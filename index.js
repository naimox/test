var tn = Object.defineProperty;
var an = (r, R, y) => R in r ? tn(r, R, {enumerable: !0, configurable: !0, writable: !0, value: y}) : r[R] = y;
var Ha = (r, R, y) => (an(r, typeof R != "symbol" ? R + "" : R, y), y);
(function () {
    const R = document.createElement("link").relList;
    if (R && R.supports && R.supports("modulepreload")) return;
    for (const C of document.querySelectorAll('link[rel="modulepreload"]')) E(C);
    new MutationObserver(C => {
        for (const x of C) if (x.type === "childList") for (const B of x.addedNodes) B.tagName === "LINK" && B.rel === "modulepreload" && E(B)
    }).observe(document, {childList: !0, subtree: !0});

    function y(C) {
        const x = {};
        return C.integrity && (x.integrity = C.integrity), C.referrerPolicy && (x.referrerPolicy = C.referrerPolicy), C.crossOrigin === "use-credentials" ? x.credentials = "include" : C.crossOrigin === "anonymous" ? x.credentials = "omit" : x.credentials = "same-origin", x
    }

    function E(C) {
        if (C.ep) return;
        C.ep = !0;
        const x = y(C);
        fetch(C.href, x)
    }
})();
var commonjsGlobal = typeof globalThis < "u" ? globalThis : typeof window < "u" ? window : typeof global < "u" ? global : typeof self < "u" ? self : {};

function getDefaultExportFromCjs(r) {
    return r && r.__esModule && Object.prototype.hasOwnProperty.call(r, "default") ? r.default : r
}

function getAugmentedNamespace(r) {
    if (r.__esModule) return r;
    var R = r.default;
    if (typeof R == "function") {
        var y = function E() {
            if (this instanceof E) {
                var C = [null];
                C.push.apply(C, arguments);
                var x = Function.bind.apply(R, C);
                return new x
            }
            return R.apply(this, arguments)
        };
        y.prototype = R.prototype
    } else y = {};
    return Object.defineProperty(y, "__esModule", {value: !0}), Object.keys(r).forEach(function (E) {
        var C = Object.getOwnPropertyDescriptor(r, E);
        Object.defineProperty(y, E, C.get ? C : {
            enumerable: !0, get: function () {
                return r[E]
            }
        })
    }), y
}

var jsxRuntimeExports = {}, jsxRuntime = {
    get exports() {
        return jsxRuntimeExports
    }, set exports(r) {
        jsxRuntimeExports = r
    }
}, reactJsxRuntime_production_min = {};
const _global_React = React;
/**
 * @license React
 * react-jsx-runtime.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var f$1 = _global_React, k = Symbol.for("react.element"), l$1 = Symbol.for("react.fragment"),
    m$2 = Object.prototype.hasOwnProperty,
    n$2 = f$1.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,
    p$1 = {key: !0, ref: !0, __self: !0, __source: !0};

function q(r, R, y) {
    var E, C = {}, x = null, B = null;
    y !== void 0 && (x = "" + y), R.key !== void 0 && (x = "" + R.key), R.ref !== void 0 && (B = R.ref);
    for (E in R) m$2.call(R, E) && !p$1.hasOwnProperty(E) && (C[E] = R[E]);
    if (r && r.defaultProps) for (E in R = r.defaultProps, R) C[E] === void 0 && (C[E] = R[E]);
    return {$$typeof: k, type: r, key: x, ref: B, props: C, _owner: n$2.current}
}

reactJsxRuntime_production_min.Fragment = l$1;
reactJsxRuntime_production_min.jsx = q;
reactJsxRuntime_production_min.jsxs = q;
(function (r) {
    r.exports = reactJsxRuntime_production_min
})(jsxRuntime);
const Fragment = jsxRuntimeExports.Fragment, jsx = jsxRuntimeExports.jsx, jsxs = jsxRuntimeExports.jsxs;
var client = {};
const _global_ReactDOM = ReactDOM;
var m$1 = _global_ReactDOM;
client.createRoot = m$1.createRoot, client.hydrateRoot = m$1.hydrateRoot;

/**
 * @remix-run/router v1.3.3
 *
 * Copyright (c) Remix Software Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE.md file in the root directory of this source tree.
 *
 * @license MIT
 */function _extends$3() {
    return _extends$3 = Object.assign ? Object.assign.bind() : function (r) {
        for (var R = 1; R < arguments.length; R++) {
            var y = arguments[R];
            for (var E in y) Object.prototype.hasOwnProperty.call(y, E) && (r[E] = y[E])
        }
        return r
    }, _extends$3.apply(this, arguments)
}

var Action;
(function (r) {
    r.Pop = "POP", r.Push = "PUSH", r.Replace = "REPLACE"
})(Action || (Action = {}));
const PopStateEventType = "popstate";

function createHashHistory(r) {
    r === void 0 && (r = {});

    function R(C, x) {
        let {pathname: B = "/", search: N = "", hash: L = ""} = parsePath(C.location.hash.substr(1));
        return createLocation("", {
            pathname: B,
            search: N,
            hash: L
        }, x.state && x.state.usr || null, x.state && x.state.key || "default")
    }

    function y(C, x) {
        let B = C.document.querySelector("base"), N = "";
        if (B && B.getAttribute("href")) {
            let L = C.location.href, O = L.indexOf("#");
            N = O === -1 ? L : L.slice(0, O)
        }
        return N + "#" + (typeof x == "string" ? x : createPath(x))
    }

    function E(C, x) {
        warning$1(C.pathname.charAt(0) === "/", "relative pathnames are not supported in hash history.push(" + JSON.stringify(x) + ")")
    }

    return getUrlBasedHistory(R, y, E, r)
}

function invariant(r, R) {
    if (r === !1 || r === null || typeof r > "u") throw new Error(R)
}

function warning$1(r, R) {
    if (!r) {
        typeof console < "u" && console.warn(R);
        try {
            throw new Error(R)
        } catch {
        }
    }
}

function createKey() {
    return Math.random().toString(36).substr(2, 8)
}

function getHistoryState(r, R) {
    return {usr: r.state, key: r.key, idx: R}
}

function createLocation(r, R, y, E) {
    return y === void 0 && (y = null), _extends$3({
        pathname: typeof r == "string" ? r : r.pathname,
        search: "",
        hash: ""
    }, typeof R == "string" ? parsePath(R) : R, {state: y, key: R && R.key || E || createKey()})
}

function createPath(r) {
    let {pathname: R = "/", search: y = "", hash: E = ""} = r;
    return y && y !== "?" && (R += y.charAt(0) === "?" ? y : "?" + y), E && E !== "#" && (R += E.charAt(0) === "#" ? E : "#" + E), R
}

function parsePath(r) {
    let R = {};
    if (r) {
        let y = r.indexOf("#");
        y >= 0 && (R.hash = r.substr(y), r = r.substr(0, y));
        let E = r.indexOf("?");
        E >= 0 && (R.search = r.substr(E), r = r.substr(0, E)), r && (R.pathname = r)
    }
    return R
}

function getUrlBasedHistory(r, R, y, E) {
    E === void 0 && (E = {});
    let {window: C = document.defaultView, v5Compat: x = !1} = E, B = C.history, N = Action.Pop, L = null, O = D();
    O == null && (O = 0, B.replaceState(_extends$3({}, B.state, {idx: O}), ""));

    function D() {
        return (B.state || {idx: null}).idx
    }

    function z() {
        N = Action.Pop;
        let me = D(), ce = me == null ? null : me - O;
        O = me, L && L({action: N, location: H.location, delta: ce})
    }

    function F(me, ce) {
        N = Action.Push;
        let ie = createLocation(H.location, me, ce);
        y && y(ie, me), O = D() + 1;
        let Be = getHistoryState(ie, O), ve = H.createHref(ie);
        try {
            B.pushState(Be, "", ve)
        } catch {
            C.location.assign(ve)
        }
        x && L && L({action: N, location: H.location, delta: 1})
    }

    function _e(me, ce) {
        N = Action.Replace;
        let ie = createLocation(H.location, me, ce);
        y && y(ie, me), O = D();
        let Be = getHistoryState(ie, O), ve = H.createHref(ie);
        B.replaceState(Be, "", ve), x && L && L({action: N, location: H.location, delta: 0})
    }

    function Y(me) {
        let ce = C.location.origin !== "null" ? C.location.origin : C.location.href,
            ie = typeof me == "string" ? me : createPath(me);
        return invariant(ce, "No window.location.(origin|href) available to create URL for href: " + ie), new URL(ie, ce)
    }

    let H = {
        get action() {
            return N
        }, get location() {
            return r(C, B)
        }, listen(me) {
            if (L) throw new Error("A history only accepts one active listener");
            return C.addEventListener(PopStateEventType, z), L = me, () => {
                C.removeEventListener(PopStateEventType, z), L = null
            }
        }, createHref(me) {
            return R(C, me)
        }, createURL: Y, encodeLocation(me) {
            let ce = Y(me);
            return {pathname: ce.pathname, search: ce.search, hash: ce.hash}
        }, push: F, replace: _e, go(me) {
            return B.go(me)
        }
    };
    return H
}

var ResultType;
(function (r) {
    r.data = "data", r.deferred = "deferred", r.redirect = "redirect", r.error = "error"
})(ResultType || (ResultType = {}));

function matchRoutes(r, R, y) {
    y === void 0 && (y = "/");
    let E = typeof R == "string" ? parsePath(R) : R, C = stripBasename(E.pathname || "/", y);
    if (C == null) return null;
    let x = flattenRoutes(r);
    rankRouteBranches(x);
    let B = null;
    for (let N = 0; B == null && N < x.length; ++N) B = matchRouteBranch(x[N], safelyDecodeURI(C));
    return B
}

function flattenRoutes(r, R, y, E) {
    R === void 0 && (R = []), y === void 0 && (y = []), E === void 0 && (E = "");
    let C = (x, B, N) => {
        let L = {
            relativePath: N === void 0 ? x.path || "" : N,
            caseSensitive: x.caseSensitive === !0,
            childrenIndex: B,
            route: x
        };
        L.relativePath.startsWith("/") && (invariant(L.relativePath.startsWith(E), 'Absolute route path "' + L.relativePath + '" nested under path ' + ('"' + E + '" is not valid. An absolute child route path ') + "must start with the combined path of all its parent routes."), L.relativePath = L.relativePath.slice(E.length));
        let O = joinPaths([E, L.relativePath]), D = y.concat(L);
        x.children && x.children.length > 0 && (invariant(x.index !== !0, "Index routes must not have child routes. Please remove " + ('all child routes from route path "' + O + '".')), flattenRoutes(x.children, R, D, O)), !(x.path == null && !x.index) && R.push({
            path: O,
            score: computeScore(O, x.index),
            routesMeta: D
        })
    };
    return r.forEach((x, B) => {
        var N;
        if (x.path === "" || !((N = x.path) != null && N.includes("?"))) C(x, B); else for (let L of explodeOptionalSegments(x.path)) C(x, B, L)
    }), R
}

function explodeOptionalSegments(r) {
    let R = r.split("/");
    if (R.length === 0) return [];
    let [y, ...E] = R, C = y.endsWith("?"), x = y.replace(/\?$/, "");
    if (E.length === 0) return C ? [x, ""] : [x];
    let B = explodeOptionalSegments(E.join("/")), N = [];
    return N.push(...B.map(L => L === "" ? x : [x, L].join("/"))), C && N.push(...B), N.map(L => r.startsWith("/") && L === "" ? "/" : L)
}

function rankRouteBranches(r) {
    r.sort((R, y) => R.score !== y.score ? y.score - R.score : compareIndexes(R.routesMeta.map(E => E.childrenIndex), y.routesMeta.map(E => E.childrenIndex)))
}

const paramRe = /^:\w+$/, dynamicSegmentValue = 3, indexRouteValue = 2, emptySegmentValue = 1, staticSegmentValue = 10,
    splatPenalty = -2, isSplat = r => r === "*";

function computeScore(r, R) {
    let y = r.split("/"), E = y.length;
    return y.some(isSplat) && (E += splatPenalty), R && (E += indexRouteValue), y.filter(C => !isSplat(C)).reduce((C, x) => C + (paramRe.test(x) ? dynamicSegmentValue : x === "" ? emptySegmentValue : staticSegmentValue), E)
}

function compareIndexes(r, R) {
    return r.length === R.length && r.slice(0, -1).every((E, C) => E === R[C]) ? r[r.length - 1] - R[R.length - 1] : 0
}

function matchRouteBranch(r, R) {
    let {routesMeta: y} = r, E = {}, C = "/", x = [];
    for (let B = 0; B < y.length; ++B) {
        let N = y[B], L = B === y.length - 1, O = C === "/" ? R : R.slice(C.length) || "/",
            D = matchPath({path: N.relativePath, caseSensitive: N.caseSensitive, end: L}, O);
        if (!D) return null;
        Object.assign(E, D.params);
        let z = N.route;
        x.push({
            params: E,
            pathname: joinPaths([C, D.pathname]),
            pathnameBase: normalizePathname(joinPaths([C, D.pathnameBase])),
            route: z
        }), D.pathnameBase !== "/" && (C = joinPaths([C, D.pathnameBase]))
    }
    return x
}

function matchPath(r, R) {
    typeof r == "string" && (r = {path: r, caseSensitive: !1, end: !0});
    let [y, E] = compilePath(r.path, r.caseSensitive, r.end), C = R.match(y);
    if (!C) return null;
    let x = C[0], B = x.replace(/(.)\/+$/, "$1"), N = C.slice(1);
    return {
        params: E.reduce((O, D, z) => {
            if (D === "*") {
                let F = N[z] || "";
                B = x.slice(0, x.length - F.length).replace(/(.)\/+$/, "$1")
            }
            return O[D] = safelyDecodeURIComponent(N[z] || "", D), O
        }, {}), pathname: x, pathnameBase: B, pattern: r
    }
}

function compilePath(r, R, y) {
    R === void 0 && (R = !1), y === void 0 && (y = !0), warning(r === "*" || !r.endsWith("*") || r.endsWith("/*"), 'Route path "' + r + '" will be treated as if it were ' + ('"' + r.replace(/\*$/, "/*") + '" because the `*` character must ') + "always follow a `/` in the pattern. To get rid of this warning, " + ('please change the route path to "' + r.replace(/\*$/, "/*") + '".'));
    let E = [],
        C = "^" + r.replace(/\/*\*?$/, "").replace(/^\/*/, "/").replace(/[\\.*+^$?{}|()[\]]/g, "\\$&").replace(/\/:(\w+)/g, (B, N) => (E.push(N), "/([^\\/]+)"));
    return r.endsWith("*") ? (E.push("*"), C += r === "*" || r === "/*" ? "(.*)$" : "(?:\\/(.+)|\\/*)$") : y ? C += "\\/*$" : r !== "" && r !== "/" && (C += "(?:(?=\\/|$))"), [new RegExp(C, R ? void 0 : "i"), E]
}

function safelyDecodeURI(r) {
    try {
        return decodeURI(r)
    } catch (R) {
        return warning(!1, 'The URL path "' + r + '" could not be decoded because it is is a malformed URL segment. This is probably due to a bad percent ' + ("encoding (" + R + ").")), r
    }
}

function safelyDecodeURIComponent(r, R) {
    try {
        return decodeURIComponent(r)
    } catch (y) {
        return warning(!1, 'The value for the URL param "' + R + '" will not be decoded because' + (' the string "' + r + '" is a malformed URL segment. This is probably') + (" due to a bad percent encoding (" + y + ").")), r
    }
}

function stripBasename(r, R) {
    if (R === "/") return r;
    if (!r.toLowerCase().startsWith(R.toLowerCase())) return null;
    let y = R.endsWith("/") ? R.length - 1 : R.length, E = r.charAt(y);
    return E && E !== "/" ? null : r.slice(y) || "/"
}

function warning(r, R) {
    if (!r) {
        typeof console < "u" && console.warn(R);
        try {
            throw new Error(R)
        } catch {
        }
    }
}

function resolvePath(r, R) {
    R === void 0 && (R = "/");
    let {pathname: y, search: E = "", hash: C = ""} = typeof r == "string" ? parsePath(r) : r;
    return {
        pathname: y ? y.startsWith("/") ? y : resolvePathname(y, R) : R,
        search: normalizeSearch(E),
        hash: normalizeHash(C)
    }
}

function resolvePathname(r, R) {
    let y = R.replace(/\/+$/, "").split("/");
    return r.split("/").forEach(C => {
        C === ".." ? y.length > 1 && y.pop() : C !== "." && y.push(C)
    }), y.length > 1 ? y.join("/") : "/"
}

function getInvalidPathError(r, R, y, E) {
    return "Cannot include a '" + r + "' character in a manually specified " + ("`to." + R + "` field [" + JSON.stringify(E) + "].  Please separate it out to the ") + ("`to." + y + "` field. Alternatively you may provide the full path as ") + 'a string in <Link to="..."> and the router will parse it for you.'
}

function getPathContributingMatches(r) {
    return r.filter((R, y) => y === 0 || R.route.path && R.route.path.length > 0)
}

function resolveTo(r, R, y, E) {
    E === void 0 && (E = !1);
    let C;
    typeof r == "string" ? C = parsePath(r) : (C = _extends$3({}, r), invariant(!C.pathname || !C.pathname.includes("?"), getInvalidPathError("?", "pathname", "search", C)), invariant(!C.pathname || !C.pathname.includes("#"), getInvalidPathError("#", "pathname", "hash", C)), invariant(!C.search || !C.search.includes("#"), getInvalidPathError("#", "search", "hash", C)));
    let x = r === "" || C.pathname === "", B = x ? "/" : C.pathname, N;
    if (E || B == null) N = y; else {
        let z = R.length - 1;
        if (B.startsWith("..")) {
            let F = B.split("/");
            for (; F[0] === "..";) F.shift(), z -= 1;
            C.pathname = F.join("/")
        }
        N = z >= 0 ? R[z] : "/"
    }
    let L = resolvePath(C, N), O = B && B !== "/" && B.endsWith("/"), D = (x || B === ".") && y.endsWith("/");
    return !L.pathname.endsWith("/") && (O || D) && (L.pathname += "/"), L
}

const joinPaths = r => r.join("/").replace(/\/\/+/g, "/"),
    normalizePathname = r => r.replace(/\/+$/, "").replace(/^\/*/, "/"),
    normalizeSearch = r => !r || r === "?" ? "" : r.startsWith("?") ? r : "?" + r,
    normalizeHash = r => !r || r === "#" ? "" : r.startsWith("#") ? r : "#" + r;

class AbortedDeferredError extends Error {
}

function isRouteErrorResponse(r) {
    return r != null && typeof r.status == "number" && typeof r.statusText == "string" && typeof r.internal == "boolean" && "data" in r
}

const validMutationMethodsArr = ["post", "put", "patch", "delete"];
new Set(validMutationMethodsArr);
const validRequestMethodsArr = ["get", ...validMutationMethodsArr];
new Set(validRequestMethodsArr);

/**
 * React Router v6.8.2
 *
 * Copyright (c) Remix Software Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE.md file in the root directory of this source tree.
 *
 * @license MIT
 */function _extends$2() {
    return _extends$2 = Object.assign ? Object.assign.bind() : function (r) {
        for (var R = 1; R < arguments.length; R++) {
            var y = arguments[R];
            for (var E in y) Object.prototype.hasOwnProperty.call(y, E) && (r[E] = y[E])
        }
        return r
    }, _extends$2.apply(this, arguments)
}

function isPolyfill(r, R) {
    return r === R && (r !== 0 || 1 / r === 1 / R) || r !== r && R !== R
}

const is = typeof Object.is == "function" ? Object.is : isPolyfill, {
    useState,
    useEffect,
    useLayoutEffect,
    useDebugValue
} = React;

function useSyncExternalStore$2(r, R, y) {
    const E = R(), [{inst: C}, x] = useState({inst: {value: E, getSnapshot: R}});
    return useLayoutEffect(() => {
        C.value = E, C.getSnapshot = R, checkIfSnapshotChanged(C) && x({inst: C})
    }, [r, E, R]), useEffect(() => (checkIfSnapshotChanged(C) && x({inst: C}), r(() => {
        checkIfSnapshotChanged(C) && x({inst: C})
    })), [r]), useDebugValue(E), E
}

function checkIfSnapshotChanged(r) {
    const R = r.getSnapshot, y = r.value;
    try {
        const E = R();
        return !is(y, E)
    } catch {
        return !0
    }
}

function useSyncExternalStore$1(r, R, y) {
    return R()
}

const canUseDOM = typeof window < "u" && typeof window.document < "u" && typeof window.document.createElement < "u",
    isServerEnvironment = !canUseDOM, shim = isServerEnvironment ? useSyncExternalStore$1 : useSyncExternalStore$2;
"useSyncExternalStore" in React && (r => r.useSyncExternalStore)(React);
const DataRouterContext = React.createContext(null), DataRouterStateContext = React.createContext(null),
    AwaitContext = React.createContext(null), NavigationContext = React.createContext(null),
    LocationContext = React.createContext(null), RouteContext = React.createContext({outlet: null, matches: []}),
    RouteErrorContext = React.createContext(null);

function useInRouterContext() {
    return React.useContext(LocationContext) != null
}

function useLocation() {
    return useInRouterContext() || invariant(!1), React.useContext(LocationContext).location
}

function useNavigate() {
    useInRouterContext() || invariant(!1);
    let {
            basename: r,
            navigator: R
        } = React.useContext(NavigationContext), {matches: y} = React.useContext(RouteContext), {pathname: E} = useLocation(),
        C = JSON.stringify(getPathContributingMatches(y).map(N => N.pathnameBase)), x = React.useRef(!1);
    return React.useEffect(() => {
        x.current = !0
    }), React.useCallback(function (N, L) {
        if (L === void 0 && (L = {}), !x.current) return;
        if (typeof N == "number") {
            R.go(N);
            return
        }
        let O = resolveTo(N, JSON.parse(C), E, L.relative === "path");
        r !== "/" && (O.pathname = O.pathname === "/" ? r : joinPaths([r, O.pathname])), (L.replace ? R.replace : R.push)(O, L.state, L)
    }, [r, R, C, E])
}

const OutletContext = React.createContext(null);

function useOutlet(r) {
    let R = React.useContext(RouteContext).outlet;
    return R && React.createElement(OutletContext.Provider, {value: r}, R)
}

function useRoutes(r, R) {
    useInRouterContext() || invariant(!1);
    let {navigator: y} = React.useContext(NavigationContext),
        E = React.useContext(DataRouterStateContext), {matches: C} = React.useContext(RouteContext),
        x = C[C.length - 1], B = x ? x.params : {};
    x && x.pathname;
    let N = x ? x.pathnameBase : "/";
    x && x.route;
    let L = useLocation(), O;
    if (R) {
        var D;
        let H = typeof R == "string" ? parsePath(R) : R;
        N === "/" || (D = H.pathname) != null && D.startsWith(N) || invariant(!1), O = H
    } else O = L;
    let z = O.pathname || "/", F = N === "/" ? z : z.slice(N.length) || "/", _e = matchRoutes(r, {pathname: F}),
        Y = _renderMatches(_e && _e.map(H => Object.assign({}, H, {
            params: Object.assign({}, B, H.params),
            pathname: joinPaths([N, y.encodeLocation ? y.encodeLocation(H.pathname).pathname : H.pathname]),
            pathnameBase: H.pathnameBase === "/" ? N : joinPaths([N, y.encodeLocation ? y.encodeLocation(H.pathnameBase).pathname : H.pathnameBase])
        })), C, E || void 0);
    return R && Y ? React.createElement(LocationContext.Provider, {
        value: {
            location: _extends$2({
                pathname: "/",
                search: "",
                hash: "",
                state: null,
                key: "default"
            }, O), navigationType: Action.Pop
        }
    }, Y) : Y
}

function DefaultErrorElement() {
    let r = useRouteError(),
        R = isRouteErrorResponse(r) ? r.status + " " + r.statusText : r instanceof Error ? r.message : JSON.stringify(r),
        y = r instanceof Error ? r.stack : null, C = {padding: "0.5rem", backgroundColor: "rgba(200,200,200, 0.5)"},
        x = null;
    return React.createElement(React.Fragment, null, React.createElement("h2", null, "Unexpected Application Error!"), React.createElement("h3", {style: {fontStyle: "italic"}}, R), y ? React.createElement("pre", {style: C}, y) : null, x)
}

class RenderErrorBoundary extends React.Component {
    constructor(R) {
        super(R), this.state = {location: R.location, error: R.error}
    }

    static getDerivedStateFromError(R) {
        return {error: R}
    }

    static getDerivedStateFromProps(R, y) {
        return y.location !== R.location ? {error: R.error, location: R.location} : {
            error: R.error || y.error,
            location: y.location
        }
    }

    componentDidCatch(R, y) {
        console.error("React Router caught the following error during render", R, y)
    }

    render() {
        return this.state.error ? React.createElement(RouteContext.Provider, {value: this.props.routeContext}, React.createElement(RouteErrorContext.Provider, {
            value: this.state.error,
            children: this.props.component
        })) : this.props.children
    }
}

function RenderedRoute(r) {
    let {routeContext: R, match: y, children: E} = r, C = React.useContext(DataRouterContext);
    return C && C.static && C.staticContext && y.route.errorElement && (C.staticContext._deepestRenderedBoundaryId = y.route.id), React.createElement(RouteContext.Provider, {value: R}, E)
}

function _renderMatches(r, R, y) {
    if (R === void 0 && (R = []), r == null) if (y != null && y.errors) r = y.matches; else return null;
    let E = r, C = y == null ? void 0 : y.errors;
    if (C != null) {
        let x = E.findIndex(B => B.route.id && (C == null ? void 0 : C[B.route.id]));
        x >= 0 || invariant(!1), E = E.slice(0, Math.min(E.length, x + 1))
    }
    return E.reduceRight((x, B, N) => {
        let L = B.route.id ? C == null ? void 0 : C[B.route.id] : null,
            O = y ? B.route.errorElement || React.createElement(DefaultErrorElement, null) : null,
            D = R.concat(E.slice(0, N + 1)), z = () => React.createElement(RenderedRoute, {
                match: B,
                routeContext: {outlet: x, matches: D}
            }, L ? O : B.route.element !== void 0 ? B.route.element : x);
        return y && (B.route.errorElement || N === 0) ? React.createElement(RenderErrorBoundary, {
            location: y.location,
            component: O,
            error: L,
            children: z(),
            routeContext: {outlet: null, matches: D}
        }) : z()
    }, null)
}

var DataRouterHook$1;
(function (r) {
    r.UseBlocker = "useBlocker", r.UseRevalidator = "useRevalidator"
})(DataRouterHook$1 || (DataRouterHook$1 = {}));
var DataRouterStateHook$1;
(function (r) {
    r.UseLoaderData = "useLoaderData", r.UseActionData = "useActionData", r.UseRouteError = "useRouteError", r.UseNavigation = "useNavigation", r.UseRouteLoaderData = "useRouteLoaderData", r.UseMatches = "useMatches", r.UseRevalidator = "useRevalidator"
})(DataRouterStateHook$1 || (DataRouterStateHook$1 = {}));

function useDataRouterState(r) {
    let R = React.useContext(DataRouterStateContext);
    return R || invariant(!1), R
}

function useRouteContext(r) {
    let R = React.useContext(RouteContext);
    return R || invariant(!1), R
}

function useCurrentRouteId(r) {
    let R = useRouteContext(), y = R.matches[R.matches.length - 1];
    return y.route.id || invariant(!1), y.route.id
}

function useRouteError() {
    var r;
    let R = React.useContext(RouteErrorContext), y = useDataRouterState(DataRouterStateHook$1.UseRouteError),
        E = useCurrentRouteId(DataRouterStateHook$1.UseRouteError);
    return R || ((r = y.errors) == null ? void 0 : r[E])
}

function Navigate(r) {
    let {to: R, replace: y, state: E, relative: C} = r;
    useInRouterContext() || invariant(!1);
    let x = React.useContext(DataRouterStateContext), B = useNavigate();
    return React.useEffect(() => {
        x && x.navigation.state !== "idle" || B(R, {replace: y, state: E, relative: C})
    }), null
}

function Outlet(r) {
    return useOutlet(r.context)
}

function Route(r) {
    invariant(!1)
}

function Router(r) {
    let {
        basename: R = "/",
        children: y = null,
        location: E,
        navigationType: C = Action.Pop,
        navigator: x,
        static: B = !1
    } = r;
    useInRouterContext() && invariant(!1);
    let N = R.replace(/^\/*/, "/"), L = React.useMemo(() => ({basename: N, navigator: x, static: B}), [N, x, B]);
    typeof E == "string" && (E = parsePath(E));
    let {pathname: O = "/", search: D = "", hash: z = "", state: F = null, key: _e = "default"} = E,
        Y = React.useMemo(() => {
            let H = stripBasename(O, N);
            return H == null ? null : {pathname: H, search: D, hash: z, state: F, key: _e}
        }, [N, O, D, z, F, _e]);
    return Y == null ? null : React.createElement(NavigationContext.Provider, {value: L}, React.createElement(LocationContext.Provider, {
        children: y,
        value: {location: Y, navigationType: C}
    }))
}

function Routes(r) {
    let {children: R, location: y} = r, E = React.useContext(DataRouterContext),
        C = E && !R ? E.router.routes : createRoutesFromChildren(R);
    return useRoutes(C, y)
}

var AwaitRenderStatus;
(function (r) {
    r[r.pending = 0] = "pending", r[r.success = 1] = "success", r[r.error = 2] = "error"
})(AwaitRenderStatus || (AwaitRenderStatus = {}));
const neverSettledPromise = new Promise(() => {
});

class AwaitErrorBoundary extends React.Component {
    constructor(R) {
        super(R), this.state = {error: null}
    }

    static getDerivedStateFromError(R) {
        return {error: R}
    }

    componentDidCatch(R, y) {
        console.error("<Await> caught the following error during render", R, y)
    }

    render() {
        let {children: R, errorElement: y, resolve: E} = this.props, C = null, x = AwaitRenderStatus.pending;
        if (!(E instanceof Promise)) x = AwaitRenderStatus.success, C = Promise.resolve(), Object.defineProperty(C, "_tracked", {get: () => !0}), Object.defineProperty(C, "_data", {get: () => E}); else if (this.state.error) {
            x = AwaitRenderStatus.error;
            let B = this.state.error;
            C = Promise.reject().catch(() => {
            }), Object.defineProperty(C, "_tracked", {get: () => !0}), Object.defineProperty(C, "_error", {get: () => B})
        } else E._tracked ? (C = E, x = C._error !== void 0 ? AwaitRenderStatus.error : C._data !== void 0 ? AwaitRenderStatus.success : AwaitRenderStatus.pending) : (x = AwaitRenderStatus.pending, Object.defineProperty(E, "_tracked", {get: () => !0}), C = E.then(B => Object.defineProperty(E, "_data", {get: () => B}), B => Object.defineProperty(E, "_error", {get: () => B})));
        if (x === AwaitRenderStatus.error && C._error instanceof AbortedDeferredError) throw neverSettledPromise;
        if (x === AwaitRenderStatus.error && !y) throw C._error;
        if (x === AwaitRenderStatus.error) return React.createElement(AwaitContext.Provider, {value: C, children: y});
        if (x === AwaitRenderStatus.success) return React.createElement(AwaitContext.Provider, {value: C, children: R});
        throw C
    }
}

function createRoutesFromChildren(r, R) {
    R === void 0 && (R = []);
    let y = [];
    return React.Children.forEach(r, (E, C) => {
        if (!React.isValidElement(E)) return;
        if (E.type === React.Fragment) {
            y.push.apply(y, createRoutesFromChildren(E.props.children, R));
            return
        }
        E.type !== Route && invariant(!1), !E.props.index || !E.props.children || invariant(!1);
        let x = [...R, C], B = {
            id: E.props.id || x.join("-"),
            caseSensitive: E.props.caseSensitive,
            element: E.props.element,
            index: E.props.index,
            path: E.props.path,
            loader: E.props.loader,
            action: E.props.action,
            errorElement: E.props.errorElement,
            hasErrorBoundary: E.props.errorElement != null,
            shouldRevalidate: E.props.shouldRevalidate,
            handle: E.props.handle
        };
        E.props.children && (B.children = createRoutesFromChildren(E.props.children, x)), y.push(B)
    }), y
}

/**
 * React Router DOM v6.8.2
 *
 * Copyright (c) Remix Software Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE.md file in the root directory of this source tree.
 *
 * @license MIT
 */function HashRouter(r) {
    let {basename: R, children: y, window: E} = r, C = React.useRef();
    C.current == null && (C.current = createHashHistory({window: E, v5Compat: !0}));
    let x = C.current, [B, N] = React.useState({action: x.action, location: x.location});
    return React.useLayoutEffect(() => x.listen(N), [x]), React.createElement(Router, {
        basename: R,
        children: y,
        location: B.location,
        navigationType: B.action,
        navigator: x
    })
}

var DataRouterHook;
(function (r) {
    r.UseScrollRestoration = "useScrollRestoration", r.UseSubmitImpl = "useSubmitImpl", r.UseFetcher = "useFetcher"
})(DataRouterHook || (DataRouterHook = {}));
var DataRouterStateHook;
(function (r) {
    r.UseFetchers = "useFetchers", r.UseScrollRestoration = "useScrollRestoration"
})(DataRouterStateHook || (DataRouterStateHook = {}));
const scriptRel = "modulepreload", assetsURL = function (r) {
    return window.__dynamic_base__ + "/" + r
}, seen = {}, __vitePreload = function (R, y, E) {
    if (!y || y.length === 0) return R();
    const C = document.getElementsByTagName("link");
    return Promise.all(y.map(x => {
        if (x = assetsURL(x), x in seen) return;
        seen[x] = !0;
        const B = x.endsWith(".css"), N = B ? '[rel="stylesheet"]' : "";
        if (!!E) for (let D = C.length - 1; D >= 0; D--) {
            const z = C[D];
            if (z.href === x && (!B || z.rel === "stylesheet")) return
        } else if (document.querySelector(`link[href="${x}"]${N}`)) return;
        const O = document.createElement("link");
        if (O.rel = B ? "stylesheet" : scriptRel, B || (O.as = "script", O.crossOrigin = ""), O.href = x, document.head.appendChild(O), B) return new Promise((D, z) => {
            O.addEventListener("load", D), O.addEventListener("error", () => z(new Error(`Unable to preload CSS for ${x}`)))
        })
    })).then(() => R())
}, Road = "", RoadStatistics = "", Responsive$O = "", PreloadPage$1 = "", Flvplayer = "", VideoConfig = "";

function warn() {
    if (console && console.warn) {
        for (var r = arguments.length, R = new Array(r), y = 0; y < r; y++) R[y] = arguments[y];
        typeof R[0] == "string" && (R[0] = `react-i18next:: ${R[0]}`), console.warn(...R)
    }
}

const alreadyWarned = {};

function warnOnce() {
    for (var r = arguments.length, R = new Array(r), y = 0; y < r; y++) R[y] = arguments[y];
    typeof R[0] == "string" && alreadyWarned[R[0]] || (typeof R[0] == "string" && (alreadyWarned[R[0]] = new Date), warn(...R))
}

const loadedClb = (r, R) => () => {
    if (r.isInitialized) R(); else {
        const y = () => {
            setTimeout(() => {
                r.off("initialized", y)
            }, 0), R()
        };
        r.on("initialized", y)
    }
};

function loadNamespaces(r, R, y) {
    r.loadNamespaces(R, loadedClb(r, y))
}

function loadLanguages(r, R, y, E) {
    typeof y == "string" && (y = [y]), y.forEach(C => {
        r.options.ns.indexOf(C) < 0 && r.options.ns.push(C)
    }), r.loadLanguages(R, loadedClb(r, E))
}

function oldI18nextHasLoadedNamespace(r, R) {
    let y = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
    const E = R.languages[0], C = R.options ? R.options.fallbackLng : !1, x = R.languages[R.languages.length - 1];
    if (E.toLowerCase() === "cimode") return !0;
    const B = (N, L) => {
        const O = R.services.backendConnector.state[`${N}|${L}`];
        return O === -1 || O === 2
    };
    return y.bindI18n && y.bindI18n.indexOf("languageChanging") > -1 && R.services.backendConnector.backend && R.isLanguageChangingTo && !B(R.isLanguageChangingTo, r) ? !1 : !!(R.hasResourceBundle(E, r) || !R.services.backendConnector.backend || R.options.resources && !R.options.partialBundledLanguages || B(E, r) && (!C || B(x, r)))
}

function hasLoadedNamespace(r, R) {
    let y = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
    return !R.languages || !R.languages.length ? (warnOnce("i18n.languages were undefined or empty", R.languages), !0) : R.options.ignoreJSONStructure !== void 0 ? R.hasLoadedNamespace(r, {
        lng: y.lng,
        precheck: (C, x) => {
            if (y.bindI18n && y.bindI18n.indexOf("languageChanging") > -1 && C.services.backendConnector.backend && C.isLanguageChangingTo && !x(C.isLanguageChangingTo, r)) return !1
        }
    }) : oldI18nextHasLoadedNamespace(r, R, y)
}

const matchHtmlEntity = /&(?:amp|#38|lt|#60|gt|#62|apos|#39|quot|#34|nbsp|#160|copy|#169|reg|#174|hellip|#8230|#x2F|#47);/g,
    htmlEntities = {
        "&amp;": "&",
        "&#38;": "&",
        "&lt;": "<",
        "&#60;": "<",
        "&gt;": ">",
        "&#62;": ">",
        "&apos;": "'",
        "&#39;": "'",
        "&quot;": '"',
        "&#34;": '"',
        "&nbsp;": " ",
        "&#160;": " ",
        "&copy;": "©",
        "&#169;": "©",
        "&reg;": "®",
        "&#174;": "®",
        "&hellip;": "…",
        "&#8230;": "…",
        "&#x2F;": "/",
        "&#47;": "/"
    }, unescapeHtmlEntity = r => htmlEntities[r], unescape$1 = r => r.replace(matchHtmlEntity, unescapeHtmlEntity);
let defaultOptions = {
    bindI18n: "languageChanged",
    bindI18nStore: "",
    transEmptyNodeValue: "",
    transSupportBasicHtmlNodes: !0,
    transWrapTextNodes: "",
    transKeepBasicHtmlNodesFor: ["br", "strong", "i", "p"],
    useSuspense: !0,
    unescape: unescape$1
};

function setDefaults$1() {
    let r = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
    defaultOptions = {...defaultOptions, ...r}
}

function getDefaults() {
    return defaultOptions
}

let i18nInstance;

function setI18n(r) {
    i18nInstance = r
}

function getI18n() {
    return i18nInstance
}

const initReactI18next = {
    type: "3rdParty", init(r) {
        setDefaults$1(r.options.react), setI18n(r)
    }
}, I18nContext = React.createContext();

class ReportNamespaces {
    constructor() {
        this.usedNamespaces = {}
    }

    addUsedNamespaces(R) {
        R.forEach(y => {
            this.usedNamespaces[y] || (this.usedNamespaces[y] = !0)
        })
    }

    getUsedNamespaces() {
        return Object.keys(this.usedNamespaces)
    }
}

const usePrevious = (r, R) => {
    const y = React.useRef();
    return React.useEffect(() => {
        y.current = R ? y.current : r
    }, [r, R]), y.current
};

function useTranslation(r) {
    let R = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    const {i18n: y} = R, {i18n: E, defaultNS: C} = React.useContext(I18nContext) || {}, x = y || E || getI18n();
    if (x && !x.reportNamespaces && (x.reportNamespaces = new ReportNamespaces), !x) {
        warnOnce("You will need to pass in an i18next instance by using initReactI18next");
        const Be = (Re, Ce) => typeof Ce == "string" ? Ce : Ce && typeof Ce == "object" && typeof Ce.defaultValue == "string" ? Ce.defaultValue : Array.isArray(Re) ? Re[Re.length - 1] : Re,
            ve = [Be, {}, !1];
        return ve.t = Be, ve.i18n = {}, ve.ready = !1, ve
    }
    x.options.react && x.options.react.wait !== void 0 && warnOnce("It seems you are still using the old wait option, you may migrate to the new useSuspense behaviour.");
    const B = {...getDefaults(), ...x.options.react, ...R}, {useSuspense: N, keyPrefix: L} = B;
    let O = r || C || x.options && x.options.defaultNS;
    O = typeof O == "string" ? [O] : O || ["translation"], x.reportNamespaces.addUsedNamespaces && x.reportNamespaces.addUsedNamespaces(O);
    const D = (x.isInitialized || x.initializedStoreOnce) && O.every(Be => hasLoadedNamespace(Be, x, B));

    function z() {
        return x.getFixedT(R.lng || null, B.nsMode === "fallback" ? O : O[0], L)
    }

    const [F, _e] = React.useState(z);
    let Y = O.join();
    R.lng && (Y = `${R.lng}${Y}`);
    const H = usePrevious(Y), me = React.useRef(!0);
    React.useEffect(() => {
        const {bindI18n: Be, bindI18nStore: ve} = B;
        me.current = !0, !D && !N && (R.lng ? loadLanguages(x, R.lng, O, () => {
            me.current && _e(z)
        }) : loadNamespaces(x, O, () => {
            me.current && _e(z)
        })), D && H && H !== Y && me.current && _e(z);

        function Re() {
            me.current && _e(z)
        }

        return Be && x && x.on(Be, Re), ve && x && x.store.on(ve, Re), () => {
            me.current = !1, Be && x && Be.split(" ").forEach(Ce => x.off(Ce, Re)), ve && x && ve.split(" ").forEach(Ce => x.store.off(Ce, Re))
        }
    }, [x, Y]);
    const ce = React.useRef(!0);
    React.useEffect(() => {
        me.current && !ce.current && _e(z), ce.current = !1
    }, [x, L]);
    const ie = [F, x, D];
    if (ie.t = F, ie.i18n = x, ie.ready = D, D || !D && !N) return ie;
    throw new Promise(Be => {
        R.lng ? loadLanguages(x, R.lng, O, () => Be()) : loadNamespaces(x, O, () => Be())
    })
}

const token = "%[a-f0-9]{2}", singleMatcher = new RegExp("(" + token + ")|([^%]+?)", "gi"),
    multiMatcher = new RegExp("(" + token + ")+", "gi");

function decodeComponents(r, R) {
    try {
        return [decodeURIComponent(r.join(""))]
    } catch {
    }
    if (r.length === 1) return r;
    R = R || 1;
    const y = r.slice(0, R), E = r.slice(R);
    return Array.prototype.concat.call([], decodeComponents(y), decodeComponents(E))
}

function decode$1(r) {
    try {
        return decodeURIComponent(r)
    } catch {
        let R = r.match(singleMatcher) || [];
        for (let y = 1; y < R.length; y++) r = decodeComponents(R, y).join(""), R = r.match(singleMatcher) || [];
        return r
    }
}

function customDecodeURIComponent(r) {
    const R = {"%FE%FF": "��", "%FF%FE": "��"};
    let y = multiMatcher.exec(r);
    for (; y;) {
        try {
            R[y[0]] = decodeURIComponent(y[0])
        } catch {
            const C = decode$1(y[0]);
            C !== y[0] && (R[y[0]] = C)
        }
        y = multiMatcher.exec(r)
    }
    R["%C2"] = "�";
    const E = Object.keys(R);
    for (const C of E) r = r.replace(new RegExp(C, "g"), R[C]);
    return r
}

function decodeUriComponent(r) {
    if (typeof r != "string") throw new TypeError("Expected `encodedURI` to be of type `string`, got `" + typeof r + "`");
    try {
        return decodeURIComponent(r)
    } catch {
        return customDecodeURIComponent(r)
    }
}

function splitOnFirst(r, R) {
    if (!(typeof r == "string" && typeof R == "string")) throw new TypeError("Expected the arguments to be of type `string`");
    if (r === "" || R === "") return [];
    const y = r.indexOf(R);
    return y === -1 ? [] : [r.slice(0, y), r.slice(y + R.length)]
}

function includeKeys(r, R) {
    const y = {};
    if (Array.isArray(R)) for (const E of R) {
        const C = Object.getOwnPropertyDescriptor(r, E);
        C != null && C.enumerable && Object.defineProperty(y, E, C)
    } else for (const E of Reflect.ownKeys(r)) {
        const C = Object.getOwnPropertyDescriptor(r, E);
        if (C.enumerable) {
            const x = r[E];
            R(E, x, r) && Object.defineProperty(y, E, C)
        }
    }
    return y
}

const isNullOrUndefined = r => r == null,
    strictUriEncode = r => encodeURIComponent(r).replace(/[!'()*]/g, R => `%${R.charCodeAt(0).toString(16).toUpperCase()}`),
    encodeFragmentIdentifier = Symbol("encodeFragmentIdentifier");

function encoderForArrayFormat(r) {
    switch (r.arrayFormat) {
        case"index":
            return R => (y, E) => {
                const C = y.length;
                return E === void 0 || r.skipNull && E === null || r.skipEmptyString && E === "" ? y : E === null ? [...y, [encode(R, r), "[", C, "]"].join("")] : [...y, [encode(R, r), "[", encode(C, r), "]=", encode(E, r)].join("")]
            };
        case"bracket":
            return R => (y, E) => E === void 0 || r.skipNull && E === null || r.skipEmptyString && E === "" ? y : E === null ? [...y, [encode(R, r), "[]"].join("")] : [...y, [encode(R, r), "[]=", encode(E, r)].join("")];
        case"colon-list-separator":
            return R => (y, E) => E === void 0 || r.skipNull && E === null || r.skipEmptyString && E === "" ? y : E === null ? [...y, [encode(R, r), ":list="].join("")] : [...y, [encode(R, r), ":list=", encode(E, r)].join("")];
        case"comma":
        case"separator":
        case"bracket-separator": {
            const R = r.arrayFormat === "bracket-separator" ? "[]=" : "=";
            return y => (E, C) => C === void 0 || r.skipNull && C === null || r.skipEmptyString && C === "" ? E : (C = C === null ? "" : C, E.length === 0 ? [[encode(y, r), R, encode(C, r)].join("")] : [[E, encode(C, r)].join(r.arrayFormatSeparator)])
        }
        default:
            return R => (y, E) => E === void 0 || r.skipNull && E === null || r.skipEmptyString && E === "" ? y : E === null ? [...y, encode(R, r)] : [...y, [encode(R, r), "=", encode(E, r)].join("")]
    }
}

function parserForArrayFormat(r) {
    let R;
    switch (r.arrayFormat) {
        case"index":
            return (y, E, C) => {
                if (R = /\[(\d*)]$/.exec(y), y = y.replace(/\[\d*]$/, ""), !R) {
                    C[y] = E;
                    return
                }
                C[y] === void 0 && (C[y] = {}), C[y][R[1]] = E
            };
        case"bracket":
            return (y, E, C) => {
                if (R = /(\[])$/.exec(y), y = y.replace(/\[]$/, ""), !R) {
                    C[y] = E;
                    return
                }
                if (C[y] === void 0) {
                    C[y] = [E];
                    return
                }
                C[y] = [...C[y], E]
            };
        case"colon-list-separator":
            return (y, E, C) => {
                if (R = /(:list)$/.exec(y), y = y.replace(/:list$/, ""), !R) {
                    C[y] = E;
                    return
                }
                if (C[y] === void 0) {
                    C[y] = [E];
                    return
                }
                C[y] = [...C[y], E]
            };
        case"comma":
        case"separator":
            return (y, E, C) => {
                const x = typeof E == "string" && E.includes(r.arrayFormatSeparator),
                    B = typeof E == "string" && !x && decode(E, r).includes(r.arrayFormatSeparator);
                E = B ? decode(E, r) : E;
                const N = x || B ? E.split(r.arrayFormatSeparator).map(L => decode(L, r)) : E === null ? E : decode(E, r);
                C[y] = N
            };
        case"bracket-separator":
            return (y, E, C) => {
                const x = /(\[])$/.test(y);
                if (y = y.replace(/\[]$/, ""), !x) {
                    C[y] = E && decode(E, r);
                    return
                }
                const B = E === null ? [] : E.split(r.arrayFormatSeparator).map(N => decode(N, r));
                if (C[y] === void 0) {
                    C[y] = B;
                    return
                }
                C[y] = [...C[y], ...B]
            };
        default:
            return (y, E, C) => {
                if (C[y] === void 0) {
                    C[y] = E;
                    return
                }
                C[y] = [...[C[y]].flat(), E]
            }
    }
}

function validateArrayFormatSeparator(r) {
    if (typeof r != "string" || r.length !== 1) throw new TypeError("arrayFormatSeparator must be single character string")
}

function encode(r, R) {
    return R.encode ? R.strict ? strictUriEncode(r) : encodeURIComponent(r) : r
}

function decode(r, R) {
    return R.decode ? decodeUriComponent(r) : r
}

function keysSorter(r) {
    return Array.isArray(r) ? r.sort() : typeof r == "object" ? keysSorter(Object.keys(r)).sort((R, y) => Number(R) - Number(y)).map(R => r[R]) : r
}

function removeHash(r) {
    const R = r.indexOf("#");
    return R !== -1 && (r = r.slice(0, R)), r
}

function getHash(r) {
    let R = "";
    const y = r.indexOf("#");
    return y !== -1 && (R = r.slice(y)), R
}

function parseValue(r, R) {
    return R.parseNumbers && !Number.isNaN(Number(r)) && typeof r == "string" && r.trim() !== "" ? r = Number(r) : R.parseBooleans && r !== null && (r.toLowerCase() === "true" || r.toLowerCase() === "false") && (r = r.toLowerCase() === "true"), r
}

function extract(r) {
    r = removeHash(r);
    const R = r.indexOf("?");
    return R === -1 ? "" : r.slice(R + 1)
}

function parse(r, R) {
    R = {
        decode: !0,
        sort: !0,
        arrayFormat: "none",
        arrayFormatSeparator: ",",
        parseNumbers: !1,
        parseBooleans: !1, ...R
    }, validateArrayFormatSeparator(R.arrayFormatSeparator);
    const y = parserForArrayFormat(R), E = Object.create(null);
    if (typeof r != "string" || (r = r.trim().replace(/^[?#&]/, ""), !r)) return E;
    for (const C of r.split("&")) {
        if (C === "") continue;
        const x = R.decode ? C.replace(/\+/g, " ") : C;
        let [B, N] = splitOnFirst(x, "=");
        B === void 0 && (B = x), N = N === void 0 ? null : ["comma", "separator", "bracket-separator"].includes(R.arrayFormat) ? N : decode(N, R), y(decode(B, R), N, E)
    }
    for (const [C, x] of Object.entries(E)) if (typeof x == "object" && x !== null) for (const [B, N] of Object.entries(x)) x[B] = parseValue(N, R); else E[C] = parseValue(x, R);
    return R.sort === !1 ? E : (R.sort === !0 ? Object.keys(E).sort() : Object.keys(E).sort(R.sort)).reduce((C, x) => {
        const B = E[x];
        return B && typeof B == "object" && !Array.isArray(B) ? C[x] = keysSorter(B) : C[x] = B, C
    }, Object.create(null))
}

function stringify(r, R) {
    if (!r) return "";
    R = {
        encode: !0,
        strict: !0,
        arrayFormat: "none",
        arrayFormatSeparator: ",", ...R
    }, validateArrayFormatSeparator(R.arrayFormatSeparator);
    const y = B => R.skipNull && isNullOrUndefined(r[B]) || R.skipEmptyString && r[B] === "",
        E = encoderForArrayFormat(R), C = {};
    for (const [B, N] of Object.entries(r)) y(B) || (C[B] = N);
    const x = Object.keys(C);
    return R.sort !== !1 && x.sort(R.sort), x.map(B => {
        const N = r[B];
        return N === void 0 ? "" : N === null ? encode(B, R) : Array.isArray(N) ? N.length === 0 && R.arrayFormat === "bracket-separator" ? encode(B, R) + "[]" : N.reduce(E(B), []).join("&") : encode(B, R) + "=" + encode(N, R)
    }).filter(B => B.length > 0).join("&")
}

function parseUrl(r, R) {
    var C;
    R = {decode: !0, ...R};
    let [y, E] = splitOnFirst(r, "#");
    return y === void 0 && (y = r), {
        url: ((C = y == null ? void 0 : y.split("?")) == null ? void 0 : C[0]) ?? "",
        query: parse(extract(r), R), ...R && R.parseFragmentIdentifier && E ? {fragmentIdentifier: decode(E, R)} : {}
    }
}

function stringifyUrl(r, R) {
    R = {encode: !0, strict: !0, [encodeFragmentIdentifier]: !0, ...R};
    const y = removeHash(r.url).split("?")[0] || "", E = extract(r.url), C = {...parse(E, {sort: !1}), ...r.query};
    let x = stringify(C, R);
    x && (x = `?${x}`);
    let B = getHash(r.url);
    if (r.fragmentIdentifier) {
        const N = new URL(y);
        N.hash = r.fragmentIdentifier, B = R[encodeFragmentIdentifier] ? N.hash : `#${r.fragmentIdentifier}`
    }
    return `${y}${x}${B}`
}

function pick(r, R, y) {
    y = {parseFragmentIdentifier: !0, [encodeFragmentIdentifier]: !1, ...y};
    const {url: E, query: C, fragmentIdentifier: x} = parseUrl(r, y);
    return stringifyUrl({url: E, query: includeKeys(C, R), fragmentIdentifier: x}, y)
}

function exclude(r, R, y) {
    const E = Array.isArray(R) ? C => !R.includes(C) : (C, x) => !R(C, x);
    return pick(r, E, y)
}

const queryString = Object.freeze(Object.defineProperty({
    __proto__: null,
    exclude,
    extract,
    parse,
    parseUrl,
    pick,
    stringify,
    stringifyUrl
}, Symbol.toStringTag, {value: "Module"})), UrlFuncs = () => {
    function r(L) {
        for (var O in L) if (Object.prototype.hasOwnProperty.call(L, O)) return !1;
        return JSON.stringify(L) === JSON.stringify({})
    }

    const R = L => queryString.parseUrl(L).url, y = (L, O) => queryString.stringifyUrl({url: L, query: O}),
        E = (L, O) => y(L, O), C = L => queryString.parseUrl(L), x = L => queryString.parseUrl(L).query,
        B = (L, O) => N(L, O) ? x(L)[O] : null, N = (L, O) => {
            let D = x(L);
            return r(D) ? !1 : D[O] != null
        };
    return {url: R, append: y, replace: E, get: B, getParms: x, has: N, parseUrl: C}
};
var SystemJsonUrlsType = (r => (r.GameRule = "gamerule", r.Level = "level", r.OlPoint = "olPoint", r.Egameapi = "egameapi", r.Dealer = "dealer", r.FreeTrialServer = "freeTrialServer", r.Qrcodeapi = "qrcodeapi", r.StarLevel = "starLevel", r.Betlogjson = "betlogjson", r.Creditlogjson = "creditlogjson", r.EventGw = "eventGw", r.TableSnapshotUrl = "tableSnapshotUrl", r))(SystemJsonUrlsType || {}),
    EnterType = (r => (r[r.Normal = 100] = "Normal", r[r.SeecardSide = 106] = "SeecardSide", r[r.Side = 200] = "Side", r[r.VIPReserve = 101] = "VIPReserve", r[r.VIPEnter = 102] = "VIPEnter", r[r.VIPSide = 103] = "VIPSide", r[r.VIPSideReserve = 201] = "VIPSideReserve", r))(EnterType || {}),
    SpecialGames = (r => (r[r.Sexy = 1011] = "Sexy", r[r.ClassicBaccarat = 1012] = "ClassicBaccarat", r))(SpecialGames || {}),
    AltGameType = (r => (r.None = "", r.HiLo = "201_Alt", r.SicTan = "201_Alt_2", r.TwoSidesPokdeng = "501_Alt", r.ThreePictures = "901_Alt", r.TeenPatti = "901_Alt_2", r))(AltGameType || {}),
    GameType = (r => (r[r.Baccarat = 101] = "Baccarat", r[r.Quick = 103] = "Quick", r[r.See = 104] = "See", r[r.InsuredBaccarat = 110] = "InsuredBaccarat", r[r.VIP = 111] = "VIP", r[r.Sicbo = 201] = "Sicbo", r[r.FPC = 202] = "FPC", r[r.DT = 301] = "DT", r[r.Roulette = 401] = "Roulette", r[r.Pokdeng = 501] = "Pokdeng", r[r.AndarBahar = 602] = "AndarBahar", r[r.UTH = 702] = "UTH", r[r.CasinoWar = 703] = "CasinoWar", r[r.Blackjack = 704] = "Blackjack", r[r.BullBull = 801] = "BullBull", r[r.Win3Card = 901] = "Win3Card", r[r.XocDia = 203] = "XocDia", r[r.TeenPatti = 603] = "TeenPatti", r))(GameType || {}),
    CardGameType = (r => (r.Card = "cardGame", r.Slot = "slotGame", r.Fishing = "fishingGame", r.Casino = "arcadeGame", r))(CardGameType || {});
const CombineGamesTypes = {TeenPatti: [603, "901_Alt_2"]}, SupportedGamesTypesMapping = {
    Baccarat: 101,
    VipBaccarat: 111,
    Sexy: 1011,
    ClassicBaccarat: 1012,
    QuickBaccarat: 103,
    SeeCardBaccarat: 104,
    InsuranceBaccarat: 110,
    DragonTiger: 301,
    Sicbo: 201,
    HiLo: "201_Alt",
    SicTan: "201_Alt_2",
    Win3Cards: 901,
    BullBull: 801,
    Pokdeng: 501,
    Roulette: 401,
    TeenPatti: "901_Alt_2",
    AndarBahar: 602,
    UltimateTexasHoldem: 702,
    ThreePictures: "901_Alt",
    TwoSidesPokdeng: "501_Alt",
    CasinoWar: 703,
    Blackjack: 704,
    FishPrawnCrab: 202,
    XocDia: 203,
    [101]: "Baccarat",
    [111]: "VipBaccarat",
    [1011]: "Sexy",
    [1012]: "ClassicBaccarat",
    [103]: "QuickBaccarat",
    [104]: "SeeCardBaccarat",
    [110]: "InsuranceBaccarat",
    [301]: "DragonTiger",
    [201]: "Sicbo",
    ["201_Alt"]: "HiLo",
    ["201_Alt_2"]: "SicTan",
    [901]: "Win3Cards",
    [801]: "BullBull",
    [501]: "Pokdeng",
    [401]: "Roulette",
    [602]: "AndarBahar",
    [702]: "UltimateTexasHoldem",
    ["901_Alt"]: "ThreePictures",
    ["501_Alt"]: "TwoSidesPokdeng",
    ["901_Alt_2"]: "TeenPatti",
    [703]: "CasinoWar",
    [704]: "Blackjack",
    [202]: "FishPrawnCrab",
    [203]: "XocDia",
    [603]: "TeenPatti"
};
var CONFIG_GAME_TYPE_MAP = (r => (r[r.Baccarat = 101] = "Baccarat", r[r.QuickBaccarat = 103] = "QuickBaccarat", r[r.SeeCardBaccarat = 104] = "SeeCardBaccarat", r[r.InsuranceBaccarat = 110] = "InsuranceBaccarat", r[r.VipBaccarat = 111] = "VipBaccarat", r[r.DragonTiger = 301] = "DragonTiger", r[r.Sicbo = 201] = "Sicbo", r.HiLo = "201_Alt", r.SicTan = "201_Alt_2", r[r.Win3Cards = 901] = "Win3Cards", r[r.BullBull = 801] = "BullBull", r[r.Pokdeng = 501] = "Pokdeng", r[r.Roulette = 401] = "Roulette", r.TeenPatti = "901_Alt_2", r[r.AndarBahar = 602] = "AndarBahar", r[r.UltimateTexasHoldem = 702] = "UltimateTexasHoldem", r.ThreePictures = "901_Alt", r.TwoSidesPokdeng = "501_Alt", r[r.CasinoWar = 703] = "CasinoWar", r[r.Blackjack = 704] = "Blackjack", r[r.FishPrawnCrab = 202] = "FishPrawnCrab", r[r.XocDia = 203] = "XocDia", r))(CONFIG_GAME_TYPE_MAP || {}),
    PlatformType = (r => (r[r.DragonHall = 100] = "DragonHall", r[r.LiveHall = 101] = "LiveHall", r[r.MultiHall = 102] = "MultiHall", r[r.VIPHall = 103] = "VIPHall", r[r.BidmeHall = 104] = "BidmeHall", r[r.EgameHall = 105] = "EgameHall", r[r.EuroHall = 109] = "EuroHall", r[r.UKHall = 112] = "UKHall", r[r.All = 999] = "All", r))(PlatformType || {}),
    Currency = (r => (r[r.CNY = 1] = "CNY", r[r.USD = 2] = "USD", r[r.HKD = 3] = "HKD", r[r.KRW = 5] = "KRW", r[r.MYR = 6] = "MYR", r[r.SGD = 7] = "SGD", r[r.JPY = 8] = "JPY", r[r.THB = 9] = "THB", r[r.IDR = 10] = "IDR", r[r.VND = 11] = "VND", r[r.EUR = 12] = "EUR", r[r.AUD = 13] = "AUD", r[r.GBP = 14] = "GBP", r[r.CHF = 15] = "CHF", r[r.MXN = 16] = "MXN", r[r.CAD = 17] = "CAD", r[r.RUB = 18] = "RUB", r[r.INR = 19] = "INR", r[r.RON = 20] = "RON", r[r.DKK = 21] = "DKK", r[r.NOK = 22] = "NOK", r[r.NTD = 23] = "NTD", r[r.VND2 = 24] = "VND2", r[r.IDR2 = 25] = "IDR2", r[r.NTD2 = 26] = "NTD2", r[r.COP = 27] = "COP", r[r.MMK = 28] = "MMK", r[r.MMK2 = 29] = "MMK2", r[r.KRW2 = 30] = "KRW2", r[r.KRW3 = 31] = "KRW3", r[r.JPY2 = 32] = "JPY2", r[r.PLN = 33] = "PLN", r[r.HRK = 34] = "HRK", r[r.CZK = 35] = "CZK", r[r.HUF = 36] = "HUF", r[r.ZAR = 37] = "ZAR", r[r.SEK = 38] = "SEK", r[r.NZD = 39] = "NZD", r[r.TRY = 40] = "TRY", r[r.BND = 41] = "BND", r[r.KHR = 42] = "KHR", r[r.KHR2 = 43] = "KHR2", r[r.USDT = 44] = "USDT", r[r.PHP = 45] = "PHP", r[r.BRL = 46] = "BRL", r[r.BDT = 47] = "BDT", r[r.PKR = 48] = "PKR", r))(Currency || {}),
    TableStatus = (r => (r[r.Init = 0] = "Init", r[r.CanBet = 100] = "CanBet", r[r.PayOut = 101] = "PayOut", r[r.Shuffle = 102] = "Shuffle", r[r.BetOver = 103] = "BetOver", r[r.BoCarding = 104] = "BoCarding", r[r.BOpengBrand = 105] = "BOpengBrand", r[r.POpengBrand = 106] = "POpengBrand", r[r.BoBCard = 107] = "BoBCard", r[r.BoPCard = 108] = "BoPCard", r[r.Done = 109] = "Done", r[r.BoCard = 110] = "BoCard", r[r.Pause = 111] = "Pause", r[r.Resume = 112] = "Resume", r[r.AdditionBet = 113] = "AdditionBet", r[r.Maintenance = 999] = "Maintenance", r))(TableStatus || {}),
    VipTableStatus = (r => (r[r.Common = 100] = "Common", r[r.Reserved = 101] = "Reserved", r))(VipTableStatus || {}),
    BetType = (r => (r[r.B_Banker = 1001] = "B_Banker", r[r.B_Player = 1002] = "B_Player", r[r.B_Tie = 1003] = "B_Tie", r[r.B_Big = 1004] = "B_Big", r[r.B_Small = 1005] = "B_Small", r[r.B_BPair = 1006] = "B_BPair", r[r.B_PPair = 1007] = "B_PPair", r[r.B_BankNoComm = 1011] = "B_BankNoComm", r[r.B_Lucky6 = 1100] = "B_Lucky6", r[r.B_BRegular = 1211] = "B_BRegular", r[r.B_PRegular = 1212] = "B_PRegular", r[r.B_AnyPair = 1223] = "B_AnyPair", r[r.B_PerfectPair = 1224] = "B_PerfectPair", r[r.B_BDragon = 1231] = "B_BDragon", r[r.B_PDragon = 1232] = "B_PDragon", r[r.B_BInsurance1 = 1301] = "B_BInsurance1", r[r.B_BInsurance2 = 1302] = "B_BInsurance2", r[r.B_PInsurance1 = 1303] = "B_PInsurance1", r[r.B_PInsurance2 = 1304] = "B_PInsurance2", r[r.B_Tiger = 1401] = "B_Tiger", r[r.B_SmallTiger = 1402] = "B_SmallTiger", r[r.B_BigTiger = 1403] = "B_BigTiger", r[r.B_TigerPair = 1404] = "B_TigerPair", r[r.B_TigerTie = 1405] = "B_TigerTie", r[r.B_BFabulous4 = 1501] = "B_BFabulous4", r[r.B_PFabulous4 = 1502] = "B_PFabulous4", r[r.B_BPreciousPair = 1503] = "B_BPreciousPair", r[r.B_PPreciousPair = 1504] = "B_PPreciousPair", r[r.B_BankerBlack = 1601] = "B_BankerBlack", r[r.B_BankerRed = 1602] = "B_BankerRed", r[r.B_PlayerBlack = 1603] = "B_PlayerBlack", r[r.B_PlayerRed = 1604] = "B_PlayerRed", r[r.B_Any6 = 1605] = "B_Any6", r[r.DT_Dragon = 2001] = "DT_Dragon", r[r.DT_Tiger = 2002] = "DT_Tiger", r[r.DT_Tie = 2003] = "DT_Tie", r[r.S_Small = 3001] = "S_Small", r[r.S_Odd = 3002] = "S_Odd", r[r.S_Even = 3003] = "S_Even", r[r.S_Big = 3004] = "S_Big", r[r.S_Triple1 = 3005] = "S_Triple1", r[r.S_Triple2 = 3006] = "S_Triple2", r[r.S_Triple3 = 3007] = "S_Triple3", r[r.S_Triple4 = 3008] = "S_Triple4", r[r.S_Triple5 = 3009] = "S_Triple5", r[r.S_Triple6 = 3010] = "S_Triple6", r[r.S_Triple = 3011] = "S_Triple", r[r.S_Pair1 = 3012] = "S_Pair1", r[r.S_Pair2 = 3013] = "S_Pair2", r[r.S_Pair3 = 3014] = "S_Pair3", r[r.S_Pair4 = 3015] = "S_Pair4", r[r.S_Pair5 = 3016] = "S_Pair5", r[r.S_Pair6 = 3017] = "S_Pair6", r[r.S_Sum4 = 3018] = "S_Sum4", r[r.S_Sum5 = 3019] = "S_Sum5", r[r.S_Sum6 = 3020] = "S_Sum6", r[r.S_Sum7 = 3021] = "S_Sum7", r[r.S_Sum8 = 3022] = "S_Sum8", r[r.S_Sum9 = 3023] = "S_Sum9", r[r.S_Sum10 = 3024] = "S_Sum10", r[r.S_Sum11 = 3025] = "S_Sum11", r[r.S_Sum12 = 3026] = "S_Sum12", r[r.S_Sum13 = 3027] = "S_Sum13", r[r.S_Sum14 = 3028] = "S_Sum14", r[r.S_Sum15 = 3029] = "S_Sum15", r[r.S_Sum16 = 3030] = "S_Sum16", r[r.S_Sum17 = 3031] = "S_Sum17", r[r.S_Format12 = 3033] = "S_Format12", r[r.S_Format13 = 3034] = "S_Format13", r[r.S_Format14 = 3035] = "S_Format14", r[r.S_Format15 = 3036] = "S_Format15", r[r.S_Format16 = 3037] = "S_Format16", r[r.S_Format23 = 3038] = "S_Format23", r[r.S_Format24 = 3039] = "S_Format24", r[r.S_Format25 = 3040] = "S_Format25", r[r.S_Format26 = 3041] = "S_Format26", r[r.S_Format34 = 3042] = "S_Format34", r[r.S_Format35 = 3043] = "S_Format35", r[r.S_Format36 = 3044] = "S_Format36", r[r.S_Format45 = 3045] = "S_Format45", r[r.S_Format46 = 3046] = "S_Format46", r[r.S_Format56 = 3047] = "S_Format56", r[r.S_Single1 = 3048] = "S_Single1", r[r.S_Single2 = 3049] = "S_Single2", r[r.S_Single3 = 3050] = "S_Single3", r[r.S_Single4 = 3051] = "S_Single4", r[r.S_Single5 = 3052] = "S_Single5", r[r.S_Single6 = 3053] = "S_Single6", r[r.HL_Hi = 3200] = "HL_Hi", r[r.HL_Lo = 3201] = "HL_Lo", r[r.HL_HiLo = 3202] = "HL_HiLo", r[r.HL_Single1 = 3203] = "HL_Single1", r[r.HL_Single2 = 3204] = "HL_Single2", r[r.HL_Single3 = 3205] = "HL_Single3", r[r.HL_Single4 = 3206] = "HL_Single4", r[r.HL_Single5 = 3207] = "HL_Single5", r[r.HL_Single6 = 3208] = "HL_Single6", r[r.HL_Format12 = 3209] = "HL_Format12", r[r.HL_Format13 = 3210] = "HL_Format13", r[r.HL_Format14 = 3211] = "HL_Format14", r[r.HL_Format15 = 3212] = "HL_Format15",r[r.HL_Format16 = 3213] = "HL_Format16",r[r.HL_Format23 = 3214] = "HL_Format23",r[r.HL_Format24 = 3215] = "HL_Format24",r[r.HL_Format25 = 3216] = "HL_Format25",r[r.HL_Format26 = 3217] = "HL_Format26",r[r.HL_Format34 = 3218] = "HL_Format34",r[r.HL_Format35 = 3219] = "HL_Format35",r[r.HL_Format36 = 3220] = "HL_Format36",r[r.HL_Format45 = 3221] = "HL_Format45",r[r.HL_Format46 = 3222] = "HL_Format46",r[r.HL_Format56 = 3223] = "HL_Format56",r[r.HL_Lo1 = 3224] = "HL_Lo1",r[r.HL_Lo2 = 3225] = "HL_Lo2",r[r.HL_Lo3 = 3226] = "HL_Lo3",r[r.HL_Lo4 = 3227] = "HL_Lo4",r[r.HL_Lo5 = 3228] = "HL_Lo5",r[r.HL_Lo6 = 3229] = "HL_Lo6",r[r.HL_Hi3 = 3230] = "HL_Hi3",r[r.HL_Hi4 = 3231] = "HL_Hi4",r[r.HL_Hi5 = 3232] = "HL_Hi5",r[r.HL_Hi6 = 3233] = "HL_Hi6",r[r.HL_Format123 = 3234] = "HL_Format123",r[r.HL_Format234 = 3235] = "HL_Format234",r[r.HL_Format345 = 3236] = "HL_Format345",r[r.HL_Format456 = 3237] = "HL_Format456",r[r.FPC_Fish = 3301] = "FPC_Fish",r[r.FPC_Prawn = 3302] = "FPC_Prawn",r[r.FPC_Calabash = 3303] = "FPC_Calabash",r[r.FPC_Coin = 3304] = "FPC_Coin",r[r.FPC_Crab = 3305] = "FPC_Crab",r[r.FPC_Chicken = 3306] = "FPC_Chicken",r[r.FPC_SingleRed = 3307] = "FPC_SingleRed",r[r.FPC_SingleGreen = 3308] = "FPC_SingleGreen",r[r.FPC_SingleBlue = 3309] = "FPC_SingleBlue",r[r.FPC_DoubleRed = 3310] = "FPC_DoubleRed",r[r.FPC_DoubleGreen = 3311] = "FPC_DoubleGreen",r[r.FPC_DoubleBlue = 3312] = "FPC_DoubleBlue",r[r.FPC_TripleRed = 3313] = "FPC_TripleRed",r[r.FPC_TripleGreen = 3314] = "FPC_TripleGreen",r[r.FPC_TripleBlue = 3315] = "FPC_TripleBlue",r[r.FPC_AnyTriple = 3316] = "FPC_AnyTriple",r[r.FPC_CalabashPrawn = 3317] = "FPC_CalabashPrawn",r[r.FPC_CalabashFish = 3318] = "FPC_CalabashFish",r[r.FPC_CalabashChicken = 3319] = "FPC_CalabashChicken",r[r.FPC_CalabashCrab = 3320] = "FPC_CalabashCrab",r[r.FPC_CalabashCoin = 3321] = "FPC_CalabashCoin",r[r.FPC_PrawnFish = 3322] = "FPC_PrawnFish",r[r.FPC_PrawnChicken = 3323] = "FPC_PrawnChicken",r[r.FPC_PrawnCrab = 3324] = "FPC_PrawnCrab",r[r.FPC_PrawnCoin = 3325] = "FPC_PrawnCoin",r[r.FPC_FishChicken = 3326] = "FPC_FishChicken",r[r.FPC_FishCrab = 3327] = "FPC_FishCrab",r[r.FPC_FishCoin = 3328] = "FPC_FishCoin",r[r.FPC_ChickenCrab = 3329] = "FPC_ChickenCrab",r[r.FPC_ChickenCoin = 3330] = "FPC_ChickenCoin",r[r.FPC_CrabCoin = 3331] = "FPC_CrabCoin",r[r.ST_Odd = 3401] = "ST_Odd",r[r.ST_Even = 3402] = "ST_Even",r[r.ST_Fan1 = 3403] = "ST_Fan1",r[r.ST_Fan2 = 3404] = "ST_Fan2",r[r.ST_Fan3 = 3405] = "ST_Fan3",r[r.ST_Fan4 = 3406] = "ST_Fan4",r[r.ST_Nim12 = 3407] = "ST_Nim12",r[r.ST_Nim13 = 3408] = "ST_Nim13",r[r.ST_Nim14 = 3409] = "ST_Nim14",r[r.ST_Nim21 = 3410] = "ST_Nim21",r[r.ST_Nim23 = 3411] = "ST_Nim23",r[r.ST_Nim24 = 3412] = "ST_Nim24",r[r.ST_Nim31 = 3413] = "ST_Nim31",r[r.ST_Nim32 = 3414] = "ST_Nim32",r[r.ST_Nim34 = 3415] = "ST_Nim34",r[r.ST_Nim41 = 3416] = "ST_Nim41",r[r.ST_Nim42 = 3417] = "ST_Nim42",r[r.ST_Nim43 = 3418] = "ST_Nim43",r[r.ST_1Nga23 = 3419] = "ST_1Nga23",r[r.ST_1Nga24 = 3420] = "ST_1Nga24",r[r.ST_1Nga34 = 3421] = "ST_1Nga34",r[r.ST_2Nga13 = 3422] = "ST_2Nga13",r[r.ST_2Nga14 = 3423] = "ST_2Nga14",r[r.ST_2Nga34 = 3424] = "ST_2Nga34",r[r.ST_3Nga12 = 3425] = "ST_3Nga12",r[r.ST_3Nga14 = 3426] = "ST_3Nga14",r[r.ST_3Nga24 = 3427] = "ST_3Nga24",r[r.ST_4Nga13 = 3428] = "ST_4Nga13",r[r.ST_4Nga12 = 3429] = "ST_4Nga12",r[r.ST_4Nga23 = 3430] = "ST_4Nga23",r[r.ST_Ssh123 = 3431] = "ST_Ssh123",r[r.ST_Ssh124 = 3432] = "ST_Ssh124",r[r.ST_Ssh134 = 3433] = "ST_Ssh134",r[r.ST_Ssh234 = 3434] = "ST_Ssh234",r[r.ST_Kwok12 = 3435] = "ST_Kwok12",r[r.ST_Kwok23 = 3436] = "ST_Kwok23",r[r.ST_Kwok34 = 3437] = "ST_Kwok34",r[r.ST_Kwok41 = 3438] = "ST_Kwok41",r[r.R_Small = 4001] = "R_Small",r[r.R_Even = 4002] = "R_Even",r[r.R_Red = 4003] = "R_Red",r[r.R_Black = 4004] = "R_Black",r[r.R_Odd = 4005] = "R_Odd",r[r.R_Big = 4006] = "R_Big",r[r.R_Dozen1To12 = 4007] = "R_Dozen1To12",r[r.R_Dozen13To24 = 4008] = "R_Dozen13To24",r[r.R_Dozen25To36 = 4009] = "R_Dozen25To36",r[r.R_Column1 = 4010] = "R_Column1",r[r.R_Column2 = 4011] = "R_Column2",r[r.R_Column3 = 4012] = "R_Column3",r[r.R_Direct0 = 4013] = "R_Direct0",r[r.R_Direct1 = 4014] = "R_Direct1",r[r.R_Direct2 = 4015] = "R_Direct2",r[r.R_Direct3 = 4016] = "R_Direct3",r[r.R_Direct4 = 4017] = "R_Direct4",r[r.R_Direct5 = 4018] = "R_Direct5",r[r.R_Direct6 = 4019] = "R_Direct6",r[r.R_Direct7 = 4020] = "R_Direct7",r[r.R_Direct8 = 4021] = "R_Direct8",r[r.R_Direct9 = 4022] = "R_Direct9",r[r.R_Direct10 = 4023] = "R_Direct10",r[r.R_Direct11 = 4024] = "R_Direct11",r[r.R_Direct12 = 4025] = "R_Direct12",r[r.R_Direct13 = 4026] = "R_Direct13",r[r.R_Direct14 = 4027] = "R_Direct14",r[r.R_Direct15 = 4028] = "R_Direct15",r[r.R_Direct16 = 4029] = "R_Direct16",r[r.R_Direct17 = 4030] = "R_Direct17",r[r.R_Direct18 = 4031] = "R_Direct18",r[r.R_Direct19 = 4032] = "R_Direct19",r[r.R_Direct20 = 4033] = "R_Direct20",r[r.R_Direct21 = 4034] = "R_Direct21",r[r.R_Direct22 = 4035] = "R_Direct22",r[r.R_Direct23 = 4036] = "R_Direct23",r[r.R_Direct24 = 4037] = "R_Direct24",r[r.R_Direct25 = 4038] = "R_Direct25",r[r.R_Direct26 = 4039] = "R_Direct26",r[r.R_Direct27 = 4040] = "R_Direct27",r[r.R_Direct28 = 4041] = "R_Direct28",r[r.R_Direct29 = 4042] = "R_Direct29",r[r.R_Direct30 = 4043] = "R_Direct30",r[r.R_Direct31 = 4044] = "R_Direct31",r[r.R_Direct32 = 4045] = "R_Direct32",r[r.R_Direct33 = 4046] = "R_Direct33",r[r.R_Direct34 = 4047] = "R_Direct34",r[r.R_Direct35 = 4048] = "R_Direct35",r[r.R_Direct36 = 4049] = "R_Direct36",r[r.R_Three012 = 4050] = "R_Three012",r[r.R_Three023 = 4051] = "R_Three023",r[r.R_Four0123 = 4052] = "R_Four0123",r[r.R_Separate0And1 = 4053] = "R_Separate0And1",r[r.R_Separate0And2 = 4054] = "R_Separate0And2",r[r.R_Separate0And3 = 4055] = "R_Separate0And3",r[r.R_Separate1And2 = 4056] = "R_Separate1And2",r[r.R_Separate2And3 = 4057] = "R_Separate2And3",r[r.R_Separate4And5 = 4058] = "R_Separate4And5",r[r.R_Separate5And6 = 4059] = "R_Separate5And6",r[r.R_Separate7And8 = 4060] = "R_Separate7And8",r[r.R_Separate8And9 = 4061] = "R_Separate8And9",r[r.R_Separate10And11 = 4062] = "R_Separate10And11",r[r.R_Separate11And12 = 4063] = "R_Separate11And12",r[r.R_Separate13And14 = 4064] = "R_Separate13And14",r[r.R_Separate14And15 = 4065] = "R_Separate14And15",r[r.R_Separate16And17 = 4066] = "R_Separate16And17",r[r.R_Separate17And18 = 4067] = "R_Separate17And18",r[r.R_Separate19And20 = 4068] = "R_Separate19And20",r[r.R_Separate20And21 = 4069] = "R_Separate20And21",r[r.R_Separate22And23 = 4070] = "R_Separate22And23",r[r.R_Separate23And24 = 4071] = "R_Separate23And24",r[r.R_Separate25And26 = 4072] = "R_Separate25And26",r[r.R_Separate26And27 = 4073] = "R_Separate26And27",r[r.R_Separate28And29 = 4074] = "R_Separate28And29",r[r.R_Separate29And30 = 4075] = "R_Separate29And30",r[r.R_Separate31And32 = 4076] = "R_Separate31And32",r[r.R_Separate32And33 = 4077] = "R_Separate32And33",r[r.R_Separate34And35 = 4078] = "R_Separate34And35",r[r.R_Separate35And36 = 4079] = "R_Separate35And36",r[r.R_Separate1And4 = 4080] = "R_Separate1And4",r[r.R_Separate4And7 = 4081] = "R_Separate4And7",r[r.R_Separate7And10 = 4082] = "R_Separate7And10",r[r.R_Separate10And13 = 4083] = "R_Separate10And13",r[r.R_Separate13And16 = 4084] = "R_Separate13And16",r[r.R_Separate16And19 = 4085] = "R_Separate16And19",r[r.R_Separate19And22 = 4086] = "R_Separate19And22",r[r.R_Separate22And25 = 4087] = "R_Separate22And25",r[r.R_Separate25And28 = 4088] = "R_Separate25And28",r[r.R_Separate28And31 = 4089] = "R_Separate28And31",r[r.R_Separate31And34 = 4090] = "R_Separate31And34",r[r.R_Separate2And5 = 4091] = "R_Separate2And5",r[r.R_Separate5And8 = 4092] = "R_Separate5And8",r[r.R_Separate8And11 = 4093] = "R_Separate8And11",r[r.R_Separate11And14 = 4094] = "R_Separate11And14",r[r.R_Separate14And17 = 4095] = "R_Separate14And17",r[r.R_Separate17And20 = 4096] = "R_Separate17And20",r[r.R_Separate20And23 = 4097] = "R_Separate20And23",r[r.R_Separate23And26 = 4098] = "R_Separate23And26",r[r.R_Separate26And28 = 4099] = "R_Separate26And28",r[r.R_Separate28And32 = 4100] = "R_Separate28And32",r[r.R_Separate32And35 = 4101] = "R_Separate32And35",r[r.R_Separate3And6 = 4102] = "R_Separate3And6",r[r.R_Separate6And9 = 4103] = "R_Separate6And9",r[r.R_Separate9And12 = 4104] = "R_Separate9And12",r[r.R_Separate12And15 = 4105] = "R_Separate12And15",r[r.R_Separate15And18 = 4106] = "R_Separate15And18",r[r.R_Separate18And21 = 4107] = "R_Separate18And21",r[r.R_Separate21And24 = 4108] = "R_Separate21And24",r[r.R_Separate24And27 = 4109] = "R_Separate24And27",r[r.R_Separate27And30 = 4110] = "R_Separate27And30",r[r.R_Separate30And33 = 4111] = "R_Separate30And33",r[r.R_Separate33And36 = 4112] = "R_Separate33And36",r[r.R_Corner1And5 = 4113] = "R_Corner1And5",r[r.R_Corner2And6 = 4114] = "R_Corner2And6",r[r.R_Corner4And8 = 4115] = "R_Corner4And8",r[r.R_Corner5And9 = 4116] = "R_Corner5And9",r[r.R_Corner7And11 = 4117] = "R_Corner7And11",r[r.R_Corner8And12 = 4118] = "R_Corner8And12",r[r.R_Corner10And14 = 4119] = "R_Corner10And14",r[r.R_Corner11And15 = 4120] = "R_Corner11And15",r[r.R_Corner13And17 = 4121] = "R_Corner13And17",r[r.R_Corner14And18 = 4122] = "R_Corner14And18",r[r.R_Corner16And20 = 4123] = "R_Corner16And20",r[r.R_Corner17And21 = 4124] = "R_Corner17And21",r[r.R_Corner19And23 = 4125] = "R_Corner19And23",r[r.R_Corner20And24 = 4126] = "R_Corner20And24",r[r.R_Corner22And26 = 4127] = "R_Corner22And26",r[r.R_Corner23And27 = 4128] = "R_Corner23And27",r[r.R_Corner25And29 = 4129] = "R_Corner25And29",r[r.R_Corner26And30 = 4130] = "R_Corner26And30",r[r.R_Corner28And32 = 4131] = "R_Corner28And32",r[r.R_Corner29And33 = 4132] = "R_Corner29And33",r[r.R_Corner31And35 = 4133] = "R_Corner31And35",r[r.R_Corner32And36 = 4134] = "R_Corner32And36",r[r.R_Street1To3 = 4135] = "R_Street1To3",r[r.R_Street4To6 = 4136] = "R_Street4To6",r[r.R_Street7To9 = 4137] = "R_Street7To9",r[r.R_Street10To12 = 4138] = "R_Street10To12",r[r.R_Street13To15 = 4139] = "R_Street13To15",r[r.R_Street16To18 = 4140] = "R_Street16To18",r[r.R_Street19To21 = 4141] = "R_Street19To21",r[r.R_Street22To24 = 4142] = "R_Street22To24",r[r.R_Street25To27 = 4143] = "R_Street25To27",r[r.R_Street28To30 = 4144] = "R_Street28To30",r[r.R_Street31To33 = 4145] = "R_Street31To33",r[r.R_Street34To36 = 4146] = "R_Street34To36",r[r.R_Line1To6 = 4147] = "R_Line1To6",r[r.R_Line4To9 = 4148] = "R_Line4To9",r[r.R_Line7To12 = 4149] = "R_Line7To12",r[r.R_Line10To15 = 4150] = "R_Line10To15",r[r.R_Line13To18 = 4151] = "R_Line13To18",r[r.R_Line16To21 = 4152] = "R_Line16To21",r[r.R_Line19To24 = 4153] = "R_Line19To24",r[r.R_Line22To27 = 4154] = "R_Line22To27",r[r.R_Line25To30 = 4157] = "R_Line25To30",r[r.R_Line28To33 = 4155] = "R_Line28To33",r[r.R_Line31To36 = 4156] = "R_Line31To36",r[r.PD_Player1 = 5001] = "PD_Player1",r[r.PD_Player2 = 5002] = "PD_Player2",r[r.PD_Player3 = 5003] = "PD_Player3",r[r.PD_Player4 = 5004] = "PD_Player4",r[r.PD_Player5 = 5005] = "PD_Player5",r[r.PD_P1Pair = 5011] = "PD_P1Pair",r[r.PD_P2Pair = 5012] = "PD_P2Pair",r[r.PD_P3Pair = 5013] = "PD_P3Pair",r[r.PD_P4Pair = 5014] = "PD_P4Pair",r[r.PD_P5Pair = 5015] = "PD_P5Pair",r[r.TPD_Player1 = 5101] = "TPD_Player1",r[r.TPD_Player2 = 5102] = "TPD_Player2",r[r.TPD_Player3 = 5103] = "TPD_Player3",r[r.TPD_Player4 = 5104] = "TPD_Player4",r[r.TPD_Player5 = 5105] = "TPD_Player5",r[r.TPD_Banker1 = 5106] = "TPD_Banker1",r[r.TPD_Banker2 = 5107] = "TPD_Banker2",r[r.TPD_Banker3 = 5108] = "TPD_Banker3",r[r.TPD_Banker4 = 5109] = "TPD_Banker4",r[r.TPD_Banker5 = 5110] = "TPD_Banker5",r[r.TPD_P1Pair = 5011] = "TPD_P1Pair",r[r.TPD_P2Pair = 5012] = "TPD_P2Pair",r[r.TPD_P3Pair = 5013] = "TPD_P3Pair",r[r.TPD_P4Pair = 5014] = "TPD_P4Pair",r[r.TPD_P5Pair = 5015] = "TPD_P5Pair",r[r.TPD_BPair = 5111] = "TPD_BPair",r[r.AB_Andar = 6201] = "AB_Andar",r[r.AB_Bahar = 6202] = "AB_Bahar",r[r.AB_Cards1To5 = 6203] = "AB_Cards1To5",r[r.AB_Cards6To10 = 6204] = "AB_Cards6To10",r[r.AB_Cards11To15 = 6205] = "AB_Cards11To15",r[r.AB_Cards16To25 = 6206] = "AB_Cards16To25",r[r.AB_Cards26To30 = 6207] = "AB_Cards26To30",r[r.AB_Cards31To35 = 6208] = "AB_Cards31To35",r[r.AB_Cards36To40 = 6209] = "AB_Cards36To40",r[r.AB_Cards41Above = 6210] = "AB_Cards41Above",r[r.AB_AndarFirst = 6211] = "AB_AndarFirst",r[r.AB_BaharFirst = 6212] = "AB_BaharFirst",r[r.TPa_PlayerA = 6301] = "TPa_PlayerA",r[r.TPa_PlayerB = 6302] = "TPa_PlayerB",r[r.TPa_Tie = 6303] = "TPa_Tie",r[r.TPa_PlayerAPairPlus = 6304] = "TPa_PlayerAPairPlus",r[r.TPa_PlayerBPairPlus = 6305] = "TPa_PlayerBPairPlus",r[r.TPa_SixCardsBonus = 6306] = "TPa_SixCardsBonus",r[r.UTH_Player1Ante = 7201] = "UTH_Player1Ante",r[r.UTH_Player1Blind = 7202] = "UTH_Player1Blind",r[r.UTH_Player1Trips = 7203] = "UTH_Player1Trips",r[r.UTH_Player1RaiseQuad = 7204] = "UTH_Player1RaiseQuad",r[r.UTH_Player1RaiseTriple = 7205] = "UTH_Player1RaiseTriple",r[r.UTH_Player1RaiseDouble = 7206] = "UTH_Player1RaiseDouble",r[r.UTH_Player1RaiseEven = 7207] = "UTH_Player1RaiseEven",r[r.UTH_Player2Ante = 7211] = "UTH_Player2Ante",r[r.UTH_Player2Blind = 7212] = "UTH_Player2Blind",r[r.UTH_Player2Trips = 7213] = "UTH_Player2Trips",r[r.UTH_Player2RaiseQuad = 7214] = "UTH_Player2RaiseQuad",r[r.UTH_Player2RaiseTriple = 7215] = "UTH_Player2RaiseTriple",r[r.UTH_Player2RaiseDouble = 7216] = "UTH_Player2RaiseDouble",r[r.UTH_Player2RaiseEven = 7217] = "UTH_Player2RaiseEven",r[r.UTH_Player3Ante = 7221] = "UTH_Player3Ante",r[r.UTH_Player3Blind = 7222] = "UTH_Player3Blind",r[r.UTH_Player3Trips = 7223] = "UTH_Player3Trips",r[r.UTH_Player3RaiseQuad = 7224] = "UTH_Player3RaiseQuad",r[r.UTH_Player3RaiseTriple = 7225] = "UTH_Player3RaiseTriple",r[r.UTH_Player3RaiseDouble = 7226] = "UTH_Player3RaiseDouble",r[r.UTH_Player3RaiseEven = 7227] = "UTH_Player3RaiseEven",r[r.CW_Player1Ante = 7301] = "CW_Player1Ante",r[r.CW_Player1Tie1 = 7302] = "CW_Player1Tie1",r[r.CW_Player1War = 7303] = "CW_Player1War",r[r.CW_Player1Tie2 = 7304] = "CW_Player1Tie2",r[r.CW_Player2Ante = 7311] = "CW_Player2Ante",r[r.CW_Player2Tie1 = 7312] = "CW_Player2Tie1",r[r.CW_Player2War = 7313] = "CW_Player2War",r[r.CW_Player2Tie2 = 7314] = "CW_Player2Tie2",r[r.CW_Player3Ante = 7321] = "CW_Player3Ante",r[r.CW_Player3Tie1 = 7322] = "CW_Player3Tie1",r[r.CW_Player3War = 7323] = "CW_Player3War",r[r.CW_Player3Tie2 = 7324] = "CW_Player3Tie2",r[r.BJ_Ante = 7401] = "BJ_Ante",r[r.BJ_AnteDouble = 7402] = "BJ_AnteDouble",r[r.BJ_Split = 7403] = "BJ_Split",r[r.BJ_Pair = 7404] = "BJ_Pair",r[r.BJ_Initial213 = 7405] = "BJ_Initial213",r[r.BJ_Hot3 = 7406] = "BJ_Hot3",r[r.BJ_BustIt = 7407] = "BJ_BustIt",r[r.BJ_Insurance = 7408] = "BJ_Insurance",r[r.BJ_LuckyLadies = 7409] = "BJ_LuckyLadies",r[r.BB_EO_Banker1 = 8001] = "BB_EO_Banker1",r[r.BB_EO_Player1 = 8101] = "BB_EO_Player1",r[r.BB_EO_Banker2 = 8002] = "BB_EO_Banker2",r[r.BB_EO_Player2 = 8102] = "BB_EO_Player2",r[r.BB_EO_Banker3 = 8003] = "BB_EO_Banker3",r[r.BB_EO_Player3 = 8103] = "BB_EO_Player3",r[r.BB_DO_Banker1 = 8011] = "BB_DO_Banker1",r[r.BB_DO_Player1 = 8111] = "BB_DO_Player1",r[r.BB_DO_Banker2 = 8012] = "BB_DO_Banker2",r[r.BB_DO_Player2 = 8112] = "BB_DO_Player2",r[r.BB_DO_Banker3 = 8013] = "BB_DO_Banker3",r[r.BB_DO_Player3 = 8113] = "BB_DO_Player3",r[r.BB_SP_Banker1 = 8021] = "BB_SP_Banker1",r[r.BB_SP_Player1 = 8121] = "BB_SP_Player1",r[r.BB_SP_Banker2 = 8022] = "BB_SP_Banker2",r[r.BB_SP_Player2 = 8122] = "BB_SP_Player2",r[r.BB_SP_Banker3 = 8023] = "BB_SP_Banker3",r[r.BB_SP_Player3 = 8123] = "BB_SP_Player3",r[r.WC_Dragon = 9001] = "WC_Dragon",r[r.WC_Phoenix = 9002] = "WC_Phoenix",r[r.WC_Pair8Plus = 9003] = "WC_Pair8Plus",r[r.WC_Straight = 9004] = "WC_Straight",r[r.WC_Flush = 9005] = "WC_Flush",r[r.WC_StraightFlush = 9006] = "WC_StraightFlush",r[r.WC_ThreeOfAKind = 9007] = "WC_ThreeOfAKind",r[r.TP_Dragon = 9101] = "TP_Dragon",r[r.TP_Phoenix = 9102] = "TP_Phoenix",r[r.TP_Tie = 9103] = "TP_Tie",r[r.TP_DragonThreePictures = 9114] = "TP_DragonThreePictures",r[r.TP_PhoenixThreePictures = 9124] = "TP_PhoenixThreePictures",r[r.XD_Tie = 3500] = "XD_Tie",r[r.XD_Small = 3501] = "XD_Small",r[r.XD_Big = 3502] = "XD_Big",r[r.XD_Odd = 3503] = "XD_Odd",r[r.XD_Even = 3504] = "XD_Even",r[r.XD_0 = 3505] = "XD_0",r[r.XD_1 = 3506] = "XD_1",r[r.XD_3 = 3507] = "XD_3",r[r.XD_4 = 3508] = "XD_4",r))(BetType || {}),
    BET_ACTIONS = (r => (r[r.UTH_P1_RAISE_4 = 701] = "UTH_P1_RAISE_4", r[r.UTH_P2_RAISE_4 = 702] = "UTH_P2_RAISE_4", r[r.UTH_P3_RAISE_4 = 703] = "UTH_P3_RAISE_4", r[r.UTH_P1_RAISE_2 = 711] = "UTH_P1_RAISE_2", r[r.UTH_P2_RAISE_2 = 712] = "UTH_P2_RAISE_2", r[r.UTH_P3_RAISE_2 = 713] = "UTH_P3_RAISE_2", r[r.UTH_P1_RAISE_1 = 721] = "UTH_P1_RAISE_1", r[r.UTH_P2_RAISE_1 = 722] = "UTH_P2_RAISE_1", r[r.UTH_P3_RAISE_1 = 723] = "UTH_P3_RAISE_1", r[r.CW_P1_WAR = 731] = "CW_P1_WAR", r[r.CW_P2_WAR = 732] = "CW_P2_WAR", r[r.CW_P3_WAR = 733] = "CW_P3_WAR", r[r.BJ_INSURANCE = 70401] = "BJ_INSURANCE", r[r.BJ_DOUBLE = 70402] = "BJ_DOUBLE", r[r.BJ_SPLIT = 70403] = "BJ_SPLIT", r[r.BJ_NORMAL = 70404] = "BJ_NORMAL", r[r.BJ_SPLIT_1 = 70405] = "BJ_SPLIT_1", r[r.BJ_SPLIT_2 = 70406] = "BJ_SPLIT_2", r))(BET_ACTIONS || {}),
    BET_STATUS = (r => (r[r.UTH_CHECKED = 100] = "UTH_CHECKED", r[r.UTH_FOLD_CW_SURRENDERED = 101] = "UTH_FOLD_CW_SURRENDERED", r[r.UTH_PENDING_CW_PENDING = 102] = "UTH_PENDING_CW_PENDING", r[r.UTH_RAISED_CW_RAISED = 103] = "UTH_RAISED_CW_RAISED", r[r.BJ_START = 110] = "BJ_START", r[r.BJ_END = 120] = "BJ_END", r))(BET_STATUS || {}),
    BetLogStatus = (r => (r[r.BETTING = 100] = "BETTING", r[r.FAILED = 101] = "FAILED", r[r.NOT_SETTLED = 110] = "NOT_SETTLED", r[r.SETTLED = 111] = "SETTLED", r[r.REFUND = 120] = "REFUND", r))(BetLogStatus || {}),
    GoodRoadType = (r => (r[r.LongBanker = 100] = "LongBanker", r[r.LongPlayer = 101] = "LongPlayer", r[r.BigRoadJump = 102] = "BigRoadJump", r[r.SinglePlayerDoubleBanker = 103] = "SinglePlayerDoubleBanker", r[r.SingleBankerDoublePlayer = 104] = "SingleBankerDoublePlayer", r[r.Chi = 105] = "Chi", r[r.ChiEveryBanker = 106] = "ChiEveryBanker", r[r.ChiEveryPlayer = 107] = "ChiEveryPlayer", r[r.ChiEveryOtherBanker = 108] = "ChiEveryOtherBanker", r[r.ChiEveryOtherPlayer = 109] = "ChiEveryOtherPlayer", r))(GoodRoadType || {}),
    Language = (r => (r[r["Zh-CN"] = 100] = "Zh-CN", r[r["Zh-TW"] = 101] = "Zh-TW", r[r.en = 102] = "en", r[r.ko = 103] = "ko", r[r.th = 104] = "th", r[r.vi = 105] = "vi", r[r.ms = 106] = "ms", r[r.es = 107] = "es", r[r.ja = 108] = "ja", r[r.ru = 109] = "ru", r[r.id = 110] = "id", r[r.mm = 111] = "mm", r))(Language || {}),
    AppType = (r => (r[r.h5 = 3] = "h5", r[r.h5pc = 6] = "h5pc", r[r.ultimate = 7] = "ultimate", r[r.casal = 8] = "casal", r[r.erv_mobile = 7] = "erv_mobile", r[r.erv_desktop = 9] = "erv_desktop", r[r.erv_android_app = -3] = "erv_android_app", r[r.erv_ios_pwa = -4] = "erv_ios_pwa", r))(AppType || {}),
    LoginType = (r => (r[r.normal = 100] = "normal", r[r.api = 101] = "api", r[r.sessionId = 202] = "sessionId", r))(LoginType || {}),
    HALL_TYPE = (r => (r[r.HOT = 0] = "HOT", r[r.LIVE = 1] = "LIVE", r[r.SINGLE = 2] = "SINGLE", r[r.CARD_GAME = 3] = "CARD_GAME", r[r.MULTI = -100] = "MULTI", r))(HALL_TYPE || {}),
    TABLE_TYPE = (r => (r[r.FEATURE = 0] = "FEATURE", r[r.NORMAL = 1] = "NORMAL", r[r.MULTI = 2] = "MULTI", r[r.SIDE = 3] = "SIDE", r))(TABLE_TYPE || {}),
    PLAYER_LOCATION = (r => (r[r.LOBBY = 0] = "LOBBY", r[r.DRAGON_HALL = 1] = "DRAGON_HALL", r[r.SEXY_HALL = 2] = "SEXY_HALL", r[r.SEE_CARD_HALL = 3] = "SEE_CARD_HALL", r[r.MULTI_HALL = 4] = "MULTI_HALL", r))(PLAYER_LOCATION || {}),
    PLAYER_ACTION = (r => (r[r.BJ_HIT = 0] = "BJ_HIT", r[r.BJ_STAND_UTH_CHECK = 1] = "BJ_STAND_UTH_CHECK", r[r.UTH_FOLD_CW_SURRENDER = 2] = "UTH_FOLD_CW_SURRENDER", r[r.VIP_RESERVE = 3] = "VIP_RESERVE", r[r.VIP_SKIP = 4] = "VIP_SKIP", r[r.VIP_START = 5] = "VIP_START", r[r.VIP_SHUFFLE = 6] = "VIP_SHUFFLE", r))(PLAYER_ACTION || {}),
    BET_METHOD = (r => (r[r.NORMAL = 0] = "NORMAL", r[r.MULTI_PLAY = 1] = "MULTI_PLAY", r[r.FAST_BET = 2] = "FAST_BET", r[r.VIP_OWNER = 3] = "VIP_OWNER", r[r.VIP_SEATED = 4] = "VIP_SEATED", r[r.VIP_SIDE = 5] = "VIP_SIDE", r))(BET_METHOD || {}),
    IN_GAME_SESSION_STORAGE_KEYS = (r => (r.IN_GAME_SELECTED_CHIP = "erv_in_game_selected_chip", r.IN_GAME_SELECTED_CHIP_VIP = "erv_in_game_selected_chip_vip", r.FAST_BET_SELECTED_CHIP = "erv_fast_bet_selected_chip", r))(IN_GAME_SESSION_STORAGE_KEYS || {});
const formatDateTime = r => {
        const R = r.getFullYear(), y = String(r.getMonth() + 1).padStart(2, "0"), E = String(r.getDate()).padStart(2, "0"),
            C = String(r.getHours()).padStart(2, "0"), x = String(r.getMinutes()).padStart(2, "0");
        return `${R}-${y}-${E} ${C}:${x}`
    }, formatMoney = r => r.toLocaleString(void 0, {minimumFractionDigits: 2, maximumFractionDigits: 2}),
    formatAbbrMoney = (r, R = !0) => {
        if (r < 1e3) return String(r);
        const y = ["", "K", "M", "B", "T"];
        let E = Math.floor(Math.log10(r) / 3), C = r / Math.pow(1e3, E);
        return R ? C = Math.floor(C) : C < 10 ? C = parseInt(C.toFixed(2)) : C < 100 && (C = parseInt(C.toFixed(1))), C + y[E]
    }, formatCurrency = (r, R) => {
        let y = R;
        return r && (y = `${Currency[r]} ${y}`), y
    }, toLowerCamelCase = r => r.replace(/(_[a-z])/g, R => R.replace("_", "").toLocaleUpperCase()),
    objectKeyToLowerCameCase = r => {
        const R = {};
        for (let [y, E] of Object.entries(r)) y = y.toLowerCase(), R[toLowerCamelCase(y)] = E;
        return R
    }, isJsonString = r => {
        try {
            var R = JSON.parse(r);
            return typeof R == "object"
        } catch {
            return !1
        }
    }, urlRandomNumber = () => {
        let r = Math.floor(1e3 + Math.random() * 9e3).toString();
        return new Date().getTime().toString() + r
    }, randomChar = r => {
        let R = "";
        const y = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789", E = y.length;
        let C = 0;
        for (; C < r;) R += y.charAt(Math.floor(Math.random() * E)), C += 1;
        return R
    };

function flattenObject(r, R, y = "") {
    return Object.keys(r).reduce((E, C) => {
        const x = y.length ? y + "." : "";
        return typeof r[C] == "object" && r[C] !== null ? Object.assign(E, flattenObject(r[C], R, x + C)) : typeof r[C] == "string" && R.some(B => r[C].endsWith(B)) && (E[x + C] = r[C]), E
    }, {})
}

function mapValueToPoker(r) {
    return r === "0" ? "0" : ["A", "2", "3", "4", "5", "6", "7", "8", "9", "10", "J", "Q", "K"][parseInt(r, 16) - 1]
}

function useOdds() {
    const {i18n: r} = useTranslation();
    return React.useCallback(R => {
        let y = "";
        if (typeof R == "string" ? y = R : y = R.toString(), y !== "") switch (r.language) {
            case"tc":
            case"sc":
            case"thai":
                return `1 : ${y}`;
            default:
                return `${y} : 1`
        }
    }, [r.language])
}

function alterKeyOrder(r, R = [], y = []) {
    const E = {};
    return Object.keys(r).sort((x, B) => {
        const N = R.findIndex(O => Object.keys(O).includes(x)), L = R.findIndex(O => Object.keys(O).includes(B));
        return N === -1 ? 1 : L === -1 ? -1 : N - L
    }).forEach(x => {
        if (!y.includes(x)) {
            const B = r[x];
            if (typeof B == "object" && !Array.isArray(B)) {
                let N;
                const L = R.find(O => Object.keys(O).includes(x));
                L && (N = L[x]), E[x] = alterKeyOrder(B, N, y)
            } else E[x] = B
        }
    }), E
}

function deepCopy(r) {
    if (typeof r == "object" && r !== null) {
        if (Array.isArray(r)) return r.map(R => deepCopy(R));
        {
            const R = {};
            for (const y in r) r.hasOwnProperty(y) && (R[y] = deepCopy(r[y]));
            return R
        }
    }
    return r
}

const getUrlParam = r => {
    let R = UrlFuncs().get(window.location.href, r);
    return R || (R = new URLSearchParams(location.hash.split("?")[1]).get(r)), R
};

function sumValuesExcludingKey(r, R) {
    let y = 0;
    for (const [E, C] of Object.entries(r)) R != null ? parseInt(E) !== R && (y += C) : y += C;
    return y
}

function isObjectEmpty(r) {
    return r ? Object.keys(r).length === 0 : !0
}

const checkArrayExists = (r, R, y) => {
        const E = y ? R.filter(C => !y.includes(C)) : R;
        return r.every(C => E.includes(C))
    },
    isStandalone = () => !!(window.matchMedia("(display-mode: standalone)").matches || "standalone" in navigator && navigator.standalone === !0),
    getFullDomain = () => {
        const r = new URL(window.location.href), R = r.protocol, y = r.hostname, E = r.port, C = r.pathname;
        let x = `${R}//${y}`;
        return E && E.length > 0 && (x = `${x}:${E}`), C != "/" && (x = `${x}${C}`), x
    }, executeConfigurationProfile = r => {
        const R = document.createElement("a");
        R.href = "data:application/x-apple-aspen-config;base64," + r, R.download = "configuration_profile.mobileconfig", document.body.appendChild(R), R.click(), document.body.removeChild(R)
    }, appendQueryStringToUrls = (r, R) => r.map(y => {
        try {
            const E = new URL(y);
            return E.search += E.search ? `&${R}` : `?${R}`, E.href
        } catch {
            return console.error(`Invalid URL: ${y}`), y
        }
    }), formatMessage = (r, R, y) => {
        let E = r;
        return y.forEach((C, x) => {
            E = E.replace(R, C)
        }), E
    }, combinePath = (r, R) => {
        const y = r.replace(/\/+$/, ""), E = R.replace(/^\/+/, "");
        return `${y}/${E}`
    }, transformString = (r, R = "_") => {
        const y = r.lastIndexOf(R);
        return y !== -1 ? r.slice(0, y) : r
    };

function encodeUtf8$1(r) {
    const R = encodeURIComponent(r), y = [];
    for (let E = 0; E < R.length; E++) {
        const C = R.charAt(E);
        if (C === "%") {
            const x = R.charAt(E + 1) + R.charAt(E + 2), B = parseInt(x, 16);
            y.push(B), E += 2
        } else y.push(C.charCodeAt(0))
    }
    return y
}

function capitalizeFirstCharacter(r) {
    return r && r.charAt(0).toUpperCase() + r.slice(1)
}

const Helper = {
    capitalizeFirstCharacter,
    formatMessage,
    isStandalone,
    executeConfigurationProfile,
    getFullDomain,
    appendQueryStringToUrls,
    checkArrayExists,
    isObjectEmpty,
    sumValuesExcludingKey,
    getUrlParam,
    deepCopy,
    alterKeyOrder,
    randomChar,
    formatMoney,
    formatAbbrMoney,
    formatDateTime,
    formatCurrency,
    useOdds,
    urlRandomNumber,
    toLowerCamelCase,
    objectKeyToLowerCameCase,
    isJsonString,
    flattenObject,
    mapValueToPoker,
    transformString,
    combinePath,
    encodeUtf8: encodeUtf8$1
};
var Module = typeof Module < "u" ? Module : {};
Module.locateFile = (r, R) => {
    if (window.__dynamic_base__ && window.__dynamic_base__.length > 0) {
        let y = window.__dynamic_base__;
        return y.charAt(y.length - 1) != "/" && (y += "/"), y + r
    }
};
const NP_LOGLEVEL = {NONE: 0, ERROR: 1, INFO: 2, DEBUG: 3};
typeof Module.logLevel > "u" && (Module.logLevel = NP_LOGLEVEL.NONE);
const logTime = () => {
    let r = new Date;
    return r.toLocaleDateString() + " " + r.toLocaleTimeString([], {hour12: !1})
}, NP_ERROR = (...r) => {
    Module.logLevel < NP_LOGLEVEL.ERROR || console.error(logTime(), "[ERROR]", ...r)
}, NP_INFO = (...r) => {
    r[0] = r[0].toString().replace("NodePlayer.js init with v0.5.78-wasm https://www.nodemedia.cn", "FlvPlayer.js init version: v0.5.78"), Module.logLevel < NP_LOGLEVEL.INFO || console.log(logTime(), "[INFO]", ...r)
}, NP_DEBUG = (...r) => {
    Module.logLevel < NP_LOGLEVEL.DEBUG || console.log(logTime(), "[DEBUG]", ...r)
};
Module.print = NP_INFO, Module.printErr = NP_ERROR;
var moduleOverrides = Object.assign({}, Module), thisProgram = "./this.program", quit_ = (r, R) => {
        throw R
    }, ENVIRONMENT_IS_WEB = typeof window == "object", ENVIRONMENT_IS_WORKER = typeof importScripts == "function",
    ENVIRONMENT_IS_NODE = typeof process == "object" && typeof process.versions == "object" && typeof process.versions.node == "string",
    scriptDirectory = "";

function locateFile(r) {
    return Module.locateFile ? Module.locateFile(r, scriptDirectory) : scriptDirectory + r
}

var read_, readAsync, readBinary;

function logExceptionOnExit(r) {
    if (r instanceof ExitStatus) return;
    err("exiting due to exception: " + r)
}

var fs, nodePath, requireNodeFS;
ENVIRONMENT_IS_NODE ? (ENVIRONMENT_IS_WORKER ? scriptDirectory = require("path").dirname(scriptDirectory) + "/" : scriptDirectory = __dirname + "/", requireNodeFS = () => {
    nodePath || (fs = require("fs"), nodePath = require("path"))
}, read_ = function (R, y) {
    return requireNodeFS(), R = nodePath.normalize(R), fs.readFileSync(R, y ? void 0 : "utf8")
}, readBinary = r => {
    var R = read_(r, !0);
    return R.buffer || (R = new Uint8Array(R)), R
}, readAsync = (r, R, y) => {
    requireNodeFS(), r = nodePath.normalize(r), fs.readFile(r, function (E, C) {
        E ? y(E) : R(C.buffer)
    })
}, process.argv.length > 1 && (thisProgram = process.argv[1].replace(/\\/g, "/")), process.argv.slice(2), typeof module < "u" && (module.exports = Module), process.on("uncaughtException", function (r) {
    if (!(r instanceof ExitStatus)) throw r
}), process.on("unhandledRejection", function (r) {
    throw r
}), quit_ = (r, R) => {
    if (keepRuntimeAlive()) throw process.exitCode = r, R;
    logExceptionOnExit(R), process.exit(r)
}, Module.inspect = function () {
    return "[Emscripten Module object]"
}) : (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) && (ENVIRONMENT_IS_WORKER ? scriptDirectory = self.location.href : typeof document < "u" && document.currentScript && (scriptDirectory = document.currentScript.src), scriptDirectory.indexOf("blob:") !== 0 ? scriptDirectory = scriptDirectory.substr(0, scriptDirectory.replace(/[?#].*/, "").lastIndexOf("/") + 1) : scriptDirectory = "", read_ = r => {
    var R = new XMLHttpRequest;
    return R.open("GET", r, !1), R.send(null), R.responseText
}, ENVIRONMENT_IS_WORKER && (readBinary = r => {
    var R = new XMLHttpRequest;
    return R.open("GET", r, !1), R.responseType = "arraybuffer", R.send(null), new Uint8Array(R.response)
}), readAsync = (r, R, y) => {
    var E = new XMLHttpRequest;
    E.open("GET", r, !0), E.responseType = "arraybuffer", E.onload = () => {
        if (E.status == 200 || E.status == 0 && E.response) {
            R(E.response);
            return
        }
        y()
    }, E.onerror = y, E.send(null)
});
var out = Module.print || console.log.bind(console), err = Module.printErr || console.warn.bind(console);
Object.assign(Module, moduleOverrides);
moduleOverrides = null;
Module.arguments && Module.arguments;
Module.thisProgram && (thisProgram = Module.thisProgram);
Module.quit && (quit_ = Module.quit);
var wasmBinary;
Module.wasmBinary && (wasmBinary = Module.wasmBinary);
var noExitRuntime = Module.noExitRuntime || !0;
typeof WebAssembly != "object" && abort("no native wasm support detected");
var wasmMemory, ABORT = !1, EXITSTATUS;

function getCFunc(r) {
    var R = Module["_" + r];
    return R
}

function ccall(r, R, y, E, C) {
    var x = {
        string: function (Y) {
            var H = 0;
            if (Y != null && Y !== 0) {
                var me = (Y.length << 2) + 1;
                H = stackAlloc(me), stringToUTF8(Y, H, me)
            }
            return H
        }, array: function (Y) {
            var H = stackAlloc(Y.length);
            return writeArrayToMemory(Y, H), H
        }
    };

    function B(Y) {
        return R === "string" ? UTF8ToString(Y) : R === "boolean" ? !!Y : Y
    }

    var N = getCFunc(r), L = [], O = 0;
    if (E) for (var D = 0; D < E.length; D++) {
        var z = x[y[D]];
        z ? (O === 0 && (O = stackSave()), L[D] = z(E[D])) : L[D] = E[D]
    }
    var F = N.apply(null, L);

    function _e(Y) {
        return O !== 0 && stackRestore(O), B(Y)
    }

    return F = _e(F), F
}

function cwrap(r, R, y, E) {
    y = y || [];
    var C = y.every(function (B) {
        return B === "number"
    }), x = R !== "string";
    return x && C && !E ? getCFunc(r) : function () {
        return ccall(r, R, y, arguments)
    }
}

var UTF8Decoder = typeof TextDecoder < "u" ? new TextDecoder("utf8") : void 0;

function UTF8ArrayToString(r, R, y) {
    for (var E = R + y, C = R; r[C] && !(C >= E);) ++C;
    if (C - R > 16 && r.buffer && UTF8Decoder) return UTF8Decoder.decode(r.subarray(R, C));
    for (var x = ""; R < C;) {
        var B = r[R++];
        if (!(B & 128)) {
            x += String.fromCharCode(B);
            continue
        }
        var N = r[R++] & 63;
        if ((B & 224) == 192) {
            x += String.fromCharCode((B & 31) << 6 | N);
            continue
        }
        var L = r[R++] & 63;
        if ((B & 240) == 224 ? B = (B & 15) << 12 | N << 6 | L : B = (B & 7) << 18 | N << 12 | L << 6 | r[R++] & 63, B < 65536) x += String.fromCharCode(B); else {
            var O = B - 65536;
            x += String.fromCharCode(55296 | O >> 10, 56320 | O & 1023)
        }
    }
    return x
}

function UTF8ToString(r, R) {
    return r ? UTF8ArrayToString(HEAPU8, r, R) : ""
}

function stringToUTF8Array(r, R, y, E) {
    if (!(E > 0)) return 0;
    for (var C = y, x = y + E - 1, B = 0; B < r.length; ++B) {
        var N = r.charCodeAt(B);
        if (N >= 55296 && N <= 57343) {
            var L = r.charCodeAt(++B);
            N = 65536 + ((N & 1023) << 10) | L & 1023
        }
        if (N <= 127) {
            if (y >= x) break;
            R[y++] = N
        } else if (N <= 2047) {
            if (y + 1 >= x) break;
            R[y++] = 192 | N >> 6, R[y++] = 128 | N & 63
        } else if (N <= 65535) {
            if (y + 2 >= x) break;
            R[y++] = 224 | N >> 12, R[y++] = 128 | N >> 6 & 63, R[y++] = 128 | N & 63
        } else {
            if (y + 3 >= x) break;
            R[y++] = 240 | N >> 18, R[y++] = 128 | N >> 12 & 63, R[y++] = 128 | N >> 6 & 63, R[y++] = 128 | N & 63
        }
    }
    return R[y] = 0, y - C
}

function stringToUTF8(r, R, y) {
    return stringToUTF8Array(r, HEAPU8, R, y)
}

function lengthBytesUTF8(r) {
    for (var R = 0, y = 0; y < r.length; ++y) {
        var E = r.charCodeAt(y);
        E >= 55296 && E <= 57343 && (E = 65536 + ((E & 1023) << 10) | r.charCodeAt(++y) & 1023), E <= 127 ? ++R : E <= 2047 ? R += 2 : E <= 65535 ? R += 3 : R += 4
    }
    return R
}

function writeArrayToMemory(r, R) {
    HEAP8.set(r, R)
}

function writeAsciiToMemory(r, R, y) {
    for (var E = 0; E < r.length; ++E) HEAP8[R++ >> 0] = r.charCodeAt(E);
    y || (HEAP8[R >> 0] = 0)
}

var buffer, HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;

function updateGlobalBufferAndViews(r) {
    buffer = r, Module.HEAP8 = HEAP8 = new Int8Array(r), Module.HEAP16 = HEAP16 = new Int16Array(r), Module.HEAP32 = HEAP32 = new Int32Array(r), Module.HEAPU8 = HEAPU8 = new Uint8Array(r), Module.HEAPU16 = HEAPU16 = new Uint16Array(r), Module.HEAPU32 = HEAPU32 = new Uint32Array(r), Module.HEAPF32 = HEAPF32 = new Float32Array(r), Module.HEAPF64 = HEAPF64 = new Float64Array(r)
}

Module.INITIAL_MEMORY;
var __ATPRERUN__ = [], __ATINIT__ = [], __ATMAIN__ = [], __ATPOSTRUN__ = [];

function keepRuntimeAlive() {
    return noExitRuntime
}

function preRun() {
    if (Module.preRun) for (typeof Module.preRun == "function" && (Module.preRun = [Module.preRun]); Module.preRun.length;) addOnPreRun(Module.preRun.shift());
    callRuntimeCallbacks(__ATPRERUN__)
}

function initRuntime() {
    callRuntimeCallbacks(__ATINIT__)
}

function preMain() {
    callRuntimeCallbacks(__ATMAIN__)
}

function postRun() {
    if (Module.postRun) for (typeof Module.postRun == "function" && (Module.postRun = [Module.postRun]); Module.postRun.length;) addOnPostRun(Module.postRun.shift());
    callRuntimeCallbacks(__ATPOSTRUN__)
}

function addOnPreRun(r) {
    __ATPRERUN__.unshift(r)
}

function addOnInit(r) {
    __ATINIT__.unshift(r)
}

function addOnPostRun(r) {
    __ATPOSTRUN__.unshift(r)
}

var runDependencies = 0, dependenciesFulfilled = null;

function addRunDependency(r) {
    runDependencies++, Module.monitorRunDependencies && Module.monitorRunDependencies(runDependencies)
}

function removeRunDependency(r) {
    if (runDependencies--, Module.monitorRunDependencies && Module.monitorRunDependencies(runDependencies), runDependencies == 0 && dependenciesFulfilled) {
        var R = dependenciesFulfilled;
        dependenciesFulfilled = null, R()
    }
}

function abort(r) {
    Module.onAbort && Module.onAbort(r), r = "Aborted(" + r + ")", err(r), ABORT = !0, EXITSTATUS = 1, r += ". Build with -sASSERTIONS for more info.";
    var R = new WebAssembly.RuntimeError(r);
    throw R
}

var dataURIPrefix = "data:application/octet-stream;base64,";

function isDataURI(r) {
    return r.startsWith(dataURIPrefix)
}

function isFileURI(r) {
    return r.startsWith("file://")
}

var wasmBinaryFile;
wasmBinaryFile = "FlvPlayer.min.wasm";
isDataURI(wasmBinaryFile) || (wasmBinaryFile = locateFile(wasmBinaryFile), console.log("FlvPlayer.min.wasm path ->", wasmBinaryFile));

function getBinary(r) {
    try {
        if (r == wasmBinaryFile && wasmBinary) return new Uint8Array(wasmBinary);
        if (readBinary) return readBinary(r);
        throw "both async and sync fetching of the wasm failed"
    } catch (R) {
        abort(R)
    }
}

function getBinaryPromise() {
    if (!wasmBinary && (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER)) {
        if (typeof fetch == "function" && !isFileURI(wasmBinaryFile)) return fetch(wasmBinaryFile, {credentials: "same-origin"}).then(function (r) {
            if (!r.ok) throw "failed to load wasm binary file at '" + wasmBinaryFile + "'";
            return r.arrayBuffer()
        }).catch(function () {
            return getBinary(wasmBinaryFile)
        });
        if (readAsync) return new Promise(function (r, R) {
            readAsync(wasmBinaryFile, function (y) {
                r(new Uint8Array(y))
            }, R)
        })
    }
    return Promise.resolve().then(function () {
        return getBinary(wasmBinaryFile)
    })
}

function createWasm() {
    var r = {a: asmLibraryArg};

    function R(B, N) {
        var L = B.exports;
        Module.asm = L, wasmMemory = Module.asm.ma, updateGlobalBufferAndViews(wasmMemory.buffer), Module.asm.Ga, addOnInit(Module.asm.na), removeRunDependency()
    }

    addRunDependency();

    function y(B) {
        R(B.instance)
    }

    function E(B) {
        return getBinaryPromise().then(function (N) {
            return WebAssembly.instantiate(N, r)
        }).then(function (N) {
            return N
        }).then(B, function (N) {
            err("failed to asynchronously prepare wasm: " + N), abort(N)
        })
    }

    function C() {
        return !wasmBinary && typeof WebAssembly.instantiateStreaming == "function" && !isDataURI(wasmBinaryFile) && !isFileURI(wasmBinaryFile) && !ENVIRONMENT_IS_NODE && typeof fetch == "function" ? fetch(wasmBinaryFile, {credentials: "same-origin"}).then(function (B) {
            var N = WebAssembly.instantiateStreaming(B, r);
            return N.then(y, function (L) {
                return err("wasm streaming compile failed: " + L), err("falling back to ArrayBuffer instantiation"), E(y)
            })
        }) : E(y)
    }

    if (Module.instantiateWasm) try {
        var x = Module.instantiateWasm(r, R);
        return x
    } catch (B) {
        return err("Module.instantiateWasm callback failed with error: " + B), !1
    }
    return C(), {}
}

var NP, SL, ASM_CONSTS = {
    211869: r => {
        var R = SL[r];
        R && R.audioContext && R.audioContext.resume()
    },
    211955: r => {
        NP[r] = {}
    },
    211972: r => {
        var R = NP[r];
        R && R.ve && R.ve.getContext("webgl") && R.ve.getContext("webgl").getExtension("WEBGL_lose_context") && R.ve.getContext("webgl").getExtension("WEBGL_lose_context").loseContext()
    },
    212195: r => {
        var R = NP[r];
        R.emit("buffer", "empty")
    },
    212248: (r, R, y) => {
        var E = NP[r];
        E.emit("metadata", new Uint8Array(Module.HEAPU8.buffer, R, y).slice(0, y))
    },
    212353: () => {
        NP = {}, typeof npAllReady == "function" && npAllReady(), window.npAllReadyFlag = !0
    },
    212452: r => {
        var R = NP[r];
        R.emit("buffer", "buffering")
    },
    212509: r => {
        var R = NP[r];
        R.emit("buffer", "full")
    },
    212561: (r, R, y, E) => {
        var C = NP[r];
        C.emit("videoSei", new Uint8Array(Module.HEAPU8.buffer, R, y), E)
    },
    212657: (r, R, y, E) => {
        var C = NP[r];
        C.emit("audioInfo", R, y, UTF8ToString(E))
    },
    212730: (r, R, y, E) => {
        var C = NP[r];
        C.emit("videoInfo", R, y, UTF8ToString(E))
    },
    212803: (r, R) => {
        var y = NP[r];
        y.emit("videoFrame", R)
    },
    212855: r => {
        var R = NP[r];
        R.emit("buffer", "empty")
    },
    212908: (r, R, y, E, C, x, B) => {
        var N = NP[r];
        N.emit("stats", {buf: R, fps: y, abps: E, vbps: C, abuf: x, ts: B})
    },
    213027: r => (typeof SL > "u" && (SL = {}), SL[r] = {}, window.workletAudioEngine ? 1024 : window.activeAudioEngine ? 4800 : 4096),
    213209: r => {
        typeof SL[r] == "object" && delete SL[r]
    },
    213264: (r, R, y, E, C) => {
        var x = window.webkitAudioContext || window.AudioContext, B = SL[r];
        if (B.audioContext = new x({sampleRate: 48e3}), B.gainNode = B.audioContext.createGain(), window.activeAudioEngine) {
            var N = 1e3 * R / B.audioContext.sampleRate;
            B.startTime = 0, B.timer = setInterval(function () {
                var L = dynCall("ii", E, [r]), O = B.audioContext.createBufferSource(),
                    D = B.audioContext.createBuffer(1, R, B.audioContext.sampleRate), z = D.getChannelData(0);
                L == R && (z.set(Module.HEAPF32.subarray(C >> 2, (C >> 2) + R)), B.startTime < B.audioContext.currentTime && (B.startTime = B.audioContext.currentTime), O.buffer = D, O.connect(B.gainNode), O.start(B.startTime), B.startTime += D.duration)
            }, N)
        } else window.workletAudioEngine ? B.audioContext.audioWorklet.addModule(FlvPlayer.WAB()).then(() => {
            B.workletProcessorNode = new AudioWorkletNode(B.audioContext, "wa-processor", {outputChannelCount: [1]}), B.workletProcessorNode.connect(B.gainNode), B.workletProcessorNode.port.postMessage({
                message: "init",
                bufferSize: R
            }), B.workletProcessorNode.port.onmessage = function (L) {
                if (B.workletProcessorNode) {
                    var O = dynCall("ii", E, [r]);
                    if (O == R) {
                        var D = new Float32Array(Module.HEAPU8.buffer, C, R).slice(0, R);
                        B.workletProcessorNode.port.postMessage({message: "data", buffer: D})
                    } else B.workletProcessorNode.port.postMessage({message: "zero"})
                }
            }
        }) : (B.scriptProcessorNode = B.audioContext.createScriptProcessor(R, 0, y), B.scriptProcessorNode.onaudioprocess = function (L) {
            if (B.audioContext) {
                var O = dynCall("ii", E, [r]), D = L.outputBuffer.getChannelData(0);
                D && (O == R ? D.set(Module.HEAPF32.subarray(C >> 2, (C >> 2) + R)) : D.fill(0))
            }
        }, B.scriptProcessorNode.connect(B.gainNode));
        return B.gainNode.connect(B.audioContext.destination), B.audioContext.resume(), B.audioContext.sampleRate
    },
    215413: r => {
        var R = SL[r];
        return R.gainNode != null && (R.gainNode.disconnect(), R.gainNode = void 0), R.scriptProcessorNode != null && (R.scriptProcessorNode.disconnect(), R.scriptProcessorNode = void 0), R.audioContext != null && (R.audioContext.close(), R.audioContext = void 0), R.timer != null && clearInterval(R.timer), 0
    },
    215795: (r, R) => {
        var y = SL[r];
        y.gainNode.gain.value = R
    }
};

function get_a_str() {
    var r = atob("VW5hdXRob3JpemVkIQ=="), R = lengthBytesUTF8(r) + 1, y = _malloc(R);
    return stringToUTF8(r, y, R + 1), y
}

function get_audio_state(r) {
    var R = SL[r];
    return R && R.audioContext && R.audioContext.state == "suspended"
}

function get_do_str() {
    var r = document.domain, R = lengthBytesUTF8(r) + 1, y = _malloc(R);
    return stringToUTF8(r, y, R + 1), y
}

function get_e_str() {
    var r = atob("RW5kIG9mIHRoZSB0cmlhbCE="), R = lengthBytesUTF8(r) + 1, y = _malloc(R);
    return stringToUTF8(r, y, R + 1), y
}

function callRuntimeCallbacks(r) {
    for (; r.length > 0;) {
        var R = r.shift();
        if (typeof R == "function") {
            R(Module);
            continue
        }
        var y = R.func;
        typeof y == "number" ? R.arg === void 0 ? function () {
            dynCall_v.call(null, y)
        }() : function (E) {
            dynCall_vi.apply(null, [y, E])
        }(R.arg) : y(R.arg === void 0 ? null : R.arg)
    }
}

function dynCallLegacy(r, R, y) {
    var E = Module["dynCall_" + r];
    return y && y.length ? E.apply(null, [R].concat(y)) : E.call(null, R)
}

function dynCall(r, R, y) {
    return dynCallLegacy(r, R, y)
}

function handleException(r) {
    if (r instanceof ExitStatus || r == "unwind") return EXITSTATUS;
    quit_(1, r)
}

function ___syscall_fcntl64(r, R, y) {
    return 0
}

function ___syscall_openat(r, R, y, E) {
}

function __emscripten_date_now() {
    return Date.now()
}

function _abort() {
    abort("")
}

var readAsmConstArgsArray = [];

function readAsmConstArgs(r, R) {
    readAsmConstArgsArray.length = 0;
    var y;
    for (R >>= 2; y = HEAPU8[r++];) R += y != 105 & R, readAsmConstArgsArray.push(y == 105 ? HEAP32[R] : HEAPF64[R++ >> 1]), ++R;
    return readAsmConstArgsArray
}

function _emscripten_asm_const_int(r, R, y) {
    var E = readAsmConstArgs(R, y);
    return ASM_CONSTS[r].apply(null, E)
}

function _emscripten_clear_interval(r) {
    clearInterval(r)
}

var JSEvents = {
    inEventHandler: 0, removeAllEventListeners: function () {
        for (var r = JSEvents.eventHandlers.length - 1; r >= 0; --r) JSEvents._removeHandler(r);
        JSEvents.eventHandlers = [], JSEvents.deferredCalls = []
    }, registerRemoveEventListeners: function () {
        JSEvents.removeEventListenersRegistered || (JSEvents.removeEventListenersRegistered = !0)
    }, deferredCalls: [], deferCall: function (r, R, y) {
        function E(B, N) {
            if (B.length != N.length) return !1;
            for (var L in B) if (B[L] != N[L]) return !1;
            return !0
        }

        for (var C in JSEvents.deferredCalls) {
            var x = JSEvents.deferredCalls[C];
            if (x.targetFunction == r && E(x.argsList, y)) return
        }
        JSEvents.deferredCalls.push({
            targetFunction: r,
            precedence: R,
            argsList: y
        }), JSEvents.deferredCalls.sort(function (B, N) {
            return B.precedence < N.precedence
        })
    }, removeDeferredCalls: function (r) {
        for (var R = 0; R < JSEvents.deferredCalls.length; ++R) JSEvents.deferredCalls[R].targetFunction == r && (JSEvents.deferredCalls.splice(R, 1), --R)
    }, canPerformEventHandlerRequests: function () {
        return JSEvents.inEventHandler && JSEvents.currentEventHandler.allowsDeferredCalls
    }, runDeferredCalls: function () {
        if (JSEvents.canPerformEventHandlerRequests()) for (var r = 0; r < JSEvents.deferredCalls.length; ++r) {
            var R = JSEvents.deferredCalls[r];
            JSEvents.deferredCalls.splice(r, 1), --r, R.targetFunction.apply(null, R.argsList)
        }
    }, eventHandlers: [], removeAllHandlersOnTarget: function (r, R) {
        for (var y = 0; y < JSEvents.eventHandlers.length; ++y) JSEvents.eventHandlers[y].target == r && (!R || R == JSEvents.eventHandlers[y].eventTypeString) && JSEvents._removeHandler(y--)
    }, _removeHandler: function (r) {
        var R = JSEvents.eventHandlers[r];
        R.target.removeEventListener(R.eventTypeString, R.eventListenerFunc, R.useCapture), JSEvents.eventHandlers.splice(r, 1)
    }, registerOrRemoveHandler: function (r) {
        var R = function (C) {
            ++JSEvents.inEventHandler, JSEvents.currentEventHandler = r, JSEvents.runDeferredCalls(), r.handlerFunc(C), JSEvents.runDeferredCalls(), --JSEvents.inEventHandler
        };
        if (r.callbackfunc) r.eventListenerFunc = R, r.target.addEventListener(r.eventTypeString, R, r.useCapture), JSEvents.eventHandlers.push(r), JSEvents.registerRemoveEventListeners(); else for (var y = 0; y < JSEvents.eventHandlers.length; ++y) JSEvents.eventHandlers[y].target == r.target && JSEvents.eventHandlers[y].eventTypeString == r.eventTypeString && JSEvents._removeHandler(y--)
    }, getNodeNameForTarget: function (r) {
        return r ? r == window ? "#window" : r == screen ? "#screen" : r && r.nodeName ? r.nodeName : "" : ""
    }, fullscreenEnabled: function () {
        return document.fullscreenEnabled || document.webkitFullscreenEnabled
    }
};

function maybeCStringToJsString(r) {
    return r > 2 ? UTF8ToString(r) : r
}

var specialHTMLTargets = [0, typeof document < "u" ? document : 0, typeof window < "u" ? window : 0];

function findEventTarget(r) {
    r = maybeCStringToJsString(r);
    var R = specialHTMLTargets[r] || (typeof document < "u" ? document.querySelector(r) : void 0);
    return R
}

function findCanvasEventTarget(r) {
    return findEventTarget(r)
}

function _emscripten_get_canvas_element_size(r, R, y) {
    var E = findCanvasEventTarget(r);
    if (!E) return -4;
    HEAP32[R >> 2] = E.width, HEAP32[y >> 2] = E.height
}

function getBoundingClientRect(r) {
    return specialHTMLTargets.indexOf(r) < 0 ? r.getBoundingClientRect() : {left: 0, top: 0}
}

function _emscripten_get_element_css_size(r, R, y) {
    if (r = findEventTarget(r), !r) return -4;
    var E = getBoundingClientRect(r);
    return HEAPF64[R >> 3] = E.width, HEAPF64[y >> 3] = E.height, 0
}

function getHeapMax() {
    return 2147483648
}

function _emscripten_get_heap_max() {
    return getHeapMax()
}

function _emscripten_memcpy_big(r, R, y) {
    HEAPU8.copyWithin(r, R, R + y)
}

function emscripten_realloc_buffer(r) {
    try {
        return wasmMemory.grow(r - buffer.byteLength + 65535 >>> 16), updateGlobalBufferAndViews(wasmMemory.buffer), 1
    } catch {
    }
}

function _emscripten_resize_heap(r) {
    var R = HEAPU8.length;
    r = r >>> 0;
    var y = getHeapMax();
    if (r > y) return !1;
    let E = (L, O) => L + (O - L % O) % O;
    for (var C = 1; C <= 4; C *= 2) {
        var x = R * (1 + .2 / C);
        x = Math.min(x, r + 100663296);
        var B = Math.min(y, E(Math.max(r, x), 65536)), N = emscripten_realloc_buffer(B);
        if (N) return !0
    }
    return !1
}

function _emscripten_set_canvas_element_size(r, R, y) {
    var E = findCanvasEventTarget(r);
    return E ? (E.width = R, E.height = y, 0) : -4
}

function _emscripten_set_element_css_size(r, R, y) {
    return r = findEventTarget(r), r ? (r.style.width = R + "px", r.style.height = y + "px", 0) : -4
}

function callUserCallback(r, R) {
    if (!ABORT) {
        if (R) {
            r();
            return
        }
        try {
            r()
        } catch (y) {
            handleException(y)
        }
    }
}

function _emscripten_set_interval(r, R, y) {
    return setInterval(function () {
        callUserCallback(function () {
            (function (E) {
                dynCall_vi.apply(null, [r, E])
            })(y)
        })
    }, R)
}

function registerKeyEventCallback(r, R, y, E, C, x, B) {
    JSEvents.keyEvent || (JSEvents.keyEvent = _malloc(176));
    var N = function (O) {
        var D = JSEvents.keyEvent;
        HEAPF64[D >> 3] = O.timeStamp;
        var z = D >> 2;
        HEAP32[z + 2] = O.location, HEAP32[z + 3] = O.ctrlKey, HEAP32[z + 4] = O.shiftKey, HEAP32[z + 5] = O.altKey, HEAP32[z + 6] = O.metaKey, HEAP32[z + 7] = O.repeat, HEAP32[z + 8] = O.charCode, HEAP32[z + 9] = O.keyCode, HEAP32[z + 10] = O.which, stringToUTF8(O.key || "", D + 44, 32), stringToUTF8(O.code || "", D + 76, 32), stringToUTF8(O.char || "", D + 108, 32), stringToUTF8(O.locale || "", D + 140, 32), function (F, _e, Y) {
            return dynCall_iiii.apply(null, [E, F, _e, Y])
        }(C, D, R) && O.preventDefault()
    }, L = {
        target: findEventTarget(r),
        allowsDeferredCalls: !0,
        eventTypeString: x,
        callbackfunc: E,
        handlerFunc: N,
        useCapture: y
    };
    JSEvents.registerOrRemoveHandler(L)
}

function _emscripten_set_keydown_callback_on_thread(r, R, y, E, C) {
    return registerKeyEventCallback(r, R, y, E, 2, "keydown"), 0
}

function fillMouseEventData(r, R, y) {
    HEAPF64[r >> 3] = R.timeStamp;
    var E = r >> 2;
    HEAP32[E + 2] = R.screenX, HEAP32[E + 3] = R.screenY, HEAP32[E + 4] = R.clientX, HEAP32[E + 5] = R.clientY, HEAP32[E + 6] = R.ctrlKey, HEAP32[E + 7] = R.shiftKey, HEAP32[E + 8] = R.altKey, HEAP32[E + 9] = R.metaKey, HEAP16[E * 2 + 20] = R.button, HEAP16[E * 2 + 21] = R.buttons, HEAP32[E + 11] = R.movementX, HEAP32[E + 12] = R.movementY;
    var C = getBoundingClientRect(y);
    HEAP32[E + 13] = R.clientX - C.left, HEAP32[E + 14] = R.clientY - C.top
}

function registerMouseEventCallback(r, R, y, E, C, x, B) {
    JSEvents.mouseEvent || (JSEvents.mouseEvent = _malloc(72)), r = findEventTarget(r);
    var N = function (O) {
        var D = O || event;
        fillMouseEventData(JSEvents.mouseEvent, D, r), function (z, F, _e) {
            return dynCall_iiii.apply(null, [E, z, F, _e])
        }(C, JSEvents.mouseEvent, R) && D.preventDefault()
    }, L = {
        target: r,
        allowsDeferredCalls: x != "mousemove" && x != "mouseenter" && x != "mouseleave",
        eventTypeString: x,
        callbackfunc: E,
        handlerFunc: N,
        useCapture: y
    };
    JSEvents.registerOrRemoveHandler(L)
}

function _emscripten_set_mousedown_callback_on_thread(r, R, y, E, C) {
    return registerMouseEventCallback(r, R, y, E, 5, "mousedown"), 0
}

function registerTouchEventCallback(r, R, y, E, C, x, B) {
    JSEvents.touchEvent || (JSEvents.touchEvent = _malloc(1696)), r = findEventTarget(r);
    var N = function (O) {
        for (var D, z = {}, F = O.touches, _e = 0; _e < F.length; ++_e) D = F[_e], D.isChanged = D.onTarget = 0, z[D.identifier] = D;
        for (var _e = 0; _e < O.changedTouches.length; ++_e) D = O.changedTouches[_e], D.isChanged = 1, z[D.identifier] = D;
        for (var _e = 0; _e < O.targetTouches.length; ++_e) z[O.targetTouches[_e].identifier].onTarget = 1;
        var Y = JSEvents.touchEvent;
        HEAPF64[Y >> 3] = O.timeStamp;
        var H = Y >> 2;
        HEAP32[H + 3] = O.ctrlKey, HEAP32[H + 4] = O.shiftKey, HEAP32[H + 5] = O.altKey, HEAP32[H + 6] = O.metaKey, H += 7;
        var me = getBoundingClientRect(r), ce = 0;
        for (var _e in z) if (D = z[_e], HEAP32[H + 0] = D.identifier, HEAP32[H + 1] = D.screenX, HEAP32[H + 2] = D.screenY, HEAP32[H + 3] = D.clientX, HEAP32[H + 4] = D.clientY, HEAP32[H + 5] = D.pageX, HEAP32[H + 6] = D.pageY, HEAP32[H + 7] = D.isChanged, HEAP32[H + 8] = D.onTarget, HEAP32[H + 9] = D.clientX - me.left, HEAP32[H + 10] = D.clientY - me.top, H += 13, ++ce > 31) break;
        HEAP32[Y + 8 >> 2] = ce, function (ie, Be, ve) {
            return dynCall_iiii.apply(null, [E, ie, Be, ve])
        }(C, Y, R) && O.preventDefault()
    }, L = {
        target: r,
        allowsDeferredCalls: x == "touchstart" || x == "touchend",
        eventTypeString: x,
        callbackfunc: E,
        handlerFunc: N,
        useCapture: y
    };
    JSEvents.registerOrRemoveHandler(L)
}

function _emscripten_set_touchstart_callback_on_thread(r, R, y, E, C) {
    return registerTouchEventCallback(r, R, y, E, 22, "touchstart"), 0
}

function __webgl_enable_ANGLE_instanced_arrays(r) {
    var R = r.getExtension("ANGLE_instanced_arrays");
    if (R) return r.vertexAttribDivisor = function (y, E) {
        R.vertexAttribDivisorANGLE(y, E)
    }, r.drawArraysInstanced = function (y, E, C, x) {
        R.drawArraysInstancedANGLE(y, E, C, x)
    }, r.drawElementsInstanced = function (y, E, C, x, B) {
        R.drawElementsInstancedANGLE(y, E, C, x, B)
    }, 1
}

function __webgl_enable_OES_vertex_array_object(r) {
    var R = r.getExtension("OES_vertex_array_object");
    if (R) return r.createVertexArray = function () {
        return R.createVertexArrayOES()
    }, r.deleteVertexArray = function (y) {
        R.deleteVertexArrayOES(y)
    }, r.bindVertexArray = function (y) {
        R.bindVertexArrayOES(y)
    }, r.isVertexArray = function (y) {
        return R.isVertexArrayOES(y)
    }, 1
}

function __webgl_enable_WEBGL_draw_buffers(r) {
    var R = r.getExtension("WEBGL_draw_buffers");
    if (R) return r.drawBuffers = function (y, E) {
        R.drawBuffersWEBGL(y, E)
    }, 1
}

function __webgl_enable_WEBGL_multi_draw(r) {
    return !!(r.multiDrawWebgl = r.getExtension("WEBGL_multi_draw"))
}

var GL = {
    counter: 1,
    buffers: [],
    programs: [],
    framebuffers: [],
    renderbuffers: [],
    textures: [],
    shaders: [],
    vaos: [],
    contexts: [],
    offscreenCanvases: {},
    queries: [],
    stringCache: {},
    unpackAlignment: 4,
    recordError: function (R) {
        GL.lastError || (GL.lastError = R)
    },
    getNewId: function (r) {
        for (var R = GL.counter++, y = r.length; y < R; y++) r[y] = null;
        return R
    },
    getSource: function (r, R, y, E) {
        for (var C = "", x = 0; x < R; ++x) {
            var B = E ? HEAP32[E + x * 4 >> 2] : -1;
            C += UTF8ToString(HEAP32[y + x * 4 >> 2], B < 0 ? void 0 : B)
        }
        return C
    },
    createContext: function (r, R) {
        if (!r.getContextSafariWebGL2Fixed) {
            let C = function (x, B) {
                var N = r.getContextSafariWebGL2Fixed(x, B);
                return x == "webgl" == N instanceof WebGLRenderingContext ? N : null
            };
            r.getContextSafariWebGL2Fixed = r.getContext, r.getContext = C
        }
        var y = r.getContext("webgl", R);
        if (!y) return 0;
        var E = GL.registerContext(y, R);
        return E
    },
    registerContext: function (r, R) {
        var y = GL.getNewId(GL.contexts), E = {handle: y, attributes: R, version: R.majorVersion, GLctx: r};
        return r.canvas && (r.canvas.GLctxObject = E), GL.contexts[y] = E, (typeof R.enableExtensionsByDefault > "u" || R.enableExtensionsByDefault) && GL.initExtensions(E), y
    },
    makeContextCurrent: function (r) {
        return GL.currentContext = GL.contexts[r], Module.ctx = GLctx = GL.currentContext && GL.currentContext.GLctx, !(r && !GLctx)
    },
    getContext: function (r) {
        return GL.contexts[r]
    },
    deleteContext: function (r) {
        GL.currentContext === GL.contexts[r] && (GL.currentContext = null), typeof JSEvents == "object" && JSEvents.removeAllHandlersOnTarget(GL.contexts[r].GLctx.canvas), GL.contexts[r] && GL.contexts[r].GLctx.canvas && (GL.contexts[r].GLctx.canvas.GLctxObject = void 0), GL.contexts[r] = null
    },
    initExtensions: function (r) {
        if (r || (r = GL.currentContext), !r.initExtensionsDone) {
            r.initExtensionsDone = !0;
            var R = r.GLctx;
            __webgl_enable_ANGLE_instanced_arrays(R), __webgl_enable_OES_vertex_array_object(R), __webgl_enable_WEBGL_draw_buffers(R), R.disjointTimerQueryExt = R.getExtension("EXT_disjoint_timer_query"), __webgl_enable_WEBGL_multi_draw(R);
            var y = R.getSupportedExtensions() || [];
            y.forEach(function (E) {
                !E.includes("lose_context") && !E.includes("debug") && R.getExtension(E)
            })
        }
    }
}, __emscripten_webgl_power_preferences = ["default", "low-power", "high-performance"];

function _emscripten_webgl_do_create_context(r, R) {
    var y = R >> 2, E = HEAP32[y + 6], C = {
        alpha: !!HEAP32[y + 0],
        depth: !!HEAP32[y + 1],
        stencil: !!HEAP32[y + 2],
        antialias: !!HEAP32[y + 3],
        premultipliedAlpha: !!HEAP32[y + 4],
        preserveDrawingBuffer: !!HEAP32[y + 5],
        powerPreference: __emscripten_webgl_power_preferences[E],
        failIfMajorPerformanceCaveat: !!HEAP32[y + 7],
        majorVersion: HEAP32[y + 8],
        minorVersion: HEAP32[y + 9],
        enableExtensionsByDefault: HEAP32[y + 10],
        explicitSwapControl: HEAP32[y + 11],
        proxyContextToMainThread: HEAP32[y + 12],
        renderViaOffscreenBackBuffer: HEAP32[y + 13]
    }, x = findCanvasEventTarget(r);
    if (!x || C.explicitSwapControl) return 0;
    var B = GL.createContext(x, C);
    return B
}

function _emscripten_webgl_create_context(r, R) {
    return _emscripten_webgl_do_create_context(r, R)
}

function _emscripten_webgl_destroy_context(r) {
    GL.currentContext == r && (GL.currentContext = 0), GL.deleteContext(r)
}

function _emscripten_webgl_init_context_attributes(r) {
    for (var R = r >> 2, y = 0; y < 14; ++y) HEAP32[R + y] = 0;
    HEAP32[R + 0] = HEAP32[R + 1] = HEAP32[R + 3] = HEAP32[R + 4] = HEAP32[R + 8] = HEAP32[R + 10] = 1
}

function _emscripten_webgl_make_context_current(r) {
    var R = GL.makeContextCurrent(r);
    return R ? 0 : -5
}

var ENV = {};

function getExecutableName() {
    return thisProgram || "./this.program"
}

function getEnvStrings() {
    if (!getEnvStrings.strings) {
        var r = (typeof navigator == "object" && navigator.languages && navigator.languages[0] || "C").replace("-", "_") + ".UTF-8",
            R = {
                USER: "web_user",
                LOGNAME: "web_user",
                PATH: "/",
                PWD: "/",
                HOME: "/home/web_user",
                LANG: r,
                _: getExecutableName()
            };
        for (var y in ENV) ENV[y] === void 0 ? delete R[y] : R[y] = ENV[y];
        var E = [];
        for (var y in R) E.push(y + "=" + R[y]);
        getEnvStrings.strings = E
    }
    return getEnvStrings.strings
}

function _environ_get(r, R) {
    var y = 0;
    return getEnvStrings().forEach(function (E, C) {
        var x = R + y;
        HEAPU32[r + C * 4 >> 2] = x, writeAsciiToMemory(E, x), y += E.length + 1
    }), 0
}

function _environ_sizes_get(r, R) {
    var y = getEnvStrings();
    HEAPU32[r >> 2] = y.length;
    var E = 0;
    return y.forEach(function (C) {
        E += C.length + 1
    }), HEAPU32[R >> 2] = E, 0
}

function _fd_close(r) {
    return 52
}

function _fd_fdstat_get(r, R) {
    var y = r == 1 || r == 2 ? 2 : abort();
    return HEAP8[R >> 0] = y, 0
}

function _fd_read(r, R, y, E) {
    return 52
}

function _fd_seek(r, R, y, E, C) {
    return 70
}

var printCharBuffers = [null, [], []];

function printChar(r, R) {
    var y = printCharBuffers[r];
    R === 0 || R === 10 ? ((r === 1 ? out : err)(UTF8ArrayToString(y, 0)), y.length = 0) : y.push(R)
}

function _fd_write(r, R, y, E) {
    for (var C = 0, x = 0; x < y; x++) {
        var B = HEAPU32[R >> 2], N = HEAPU32[R + 4 >> 2];
        R += 8;
        for (var L = 0; L < N; L++) printChar(r, HEAPU8[B + L]);
        C += N
    }
    return HEAPU32[E >> 2] = C, 0
}

function _glActiveTexture(r) {
    GLctx.activeTexture(r)
}

function _glAttachShader(r, R) {
    GLctx.attachShader(GL.programs[r], GL.shaders[R])
}

function _glBindBuffer(r, R) {
    GLctx.bindBuffer(r, GL.buffers[R])
}

function _glBindTexture(r, R) {
    GLctx.bindTexture(r, GL.textures[R])
}

function _glBufferData(r, R, y, E) {
    GLctx.bufferData(r, y ? HEAPU8.subarray(y, y + R) : R, E)
}

function _glClear(r) {
    GLctx.clear(r)
}

function _glClearColor(r, R, y, E) {
    GLctx.clearColor(r, R, y, E)
}

function _glCompileShader(r) {
    GLctx.compileShader(GL.shaders[r])
}

function _glCreateProgram() {
    var r = GL.getNewId(GL.programs), R = GLctx.createProgram();
    return R.name = r, R.maxUniformLength = R.maxAttributeLength = R.maxUniformBlockNameLength = 0, R.uniformIdCounter = 1, GL.programs[r] = R, r
}

function _glCreateShader(r) {
    var R = GL.getNewId(GL.shaders);
    return GL.shaders[R] = GLctx.createShader(r), R
}

function _glDeleteProgram(r) {
    if (r) {
        var R = GL.programs[r];
        if (!R) {
            GL.recordError(1281);
            return
        }
        GLctx.deleteProgram(R), R.name = 0, GL.programs[r] = null
    }
}

function _glDeleteShader(r) {
    if (r) {
        var R = GL.shaders[r];
        if (!R) {
            GL.recordError(1281);
            return
        }
        GLctx.deleteShader(R), GL.shaders[r] = null
    }
}

function _glDeleteTextures(r, R) {
    for (var y = 0; y < r; y++) {
        var E = HEAP32[R + y * 4 >> 2], C = GL.textures[E];
        C && (GLctx.deleteTexture(C), C.name = 0, GL.textures[E] = null)
    }
}

function _glDrawArrays(r, R, y) {
    GLctx.drawArrays(r, R, y)
}

function _glEnableVertexAttribArray(r) {
    GLctx.enableVertexAttribArray(r)
}

function __glGenObject(r, R, y, E) {
    for (var C = 0; C < r; C++) {
        var x = GLctx[y](), B = x && GL.getNewId(E);
        x ? (x.name = B, E[B] = x) : GL.recordError(1282), HEAP32[R + C * 4 >> 2] = B
    }
}

function _glGenBuffers(r, R) {
    __glGenObject(r, R, "createBuffer", GL.buffers)
}

function _glGenTextures(r, R) {
    __glGenObject(r, R, "createTexture", GL.textures)
}

function _glGetAttribLocation(r, R) {
    return GLctx.getAttribLocation(GL.programs[r], UTF8ToString(R))
}

function _glGetError() {
    var r = GLctx.getError() || GL.lastError;
    return GL.lastError = 0, r
}

function _glGetProgramInfoLog(r, R, y, E) {
    var C = GLctx.getProgramInfoLog(GL.programs[r]);
    C === null && (C = "(unknown error)");
    var x = R > 0 && E ? stringToUTF8(C, E, R) : 0;
    y && (HEAP32[y >> 2] = x)
}

function _glGetProgramiv(r, R, y) {
    if (!y) {
        GL.recordError(1281);
        return
    }
    if (r >= GL.counter) {
        GL.recordError(1281);
        return
    }
    if (r = GL.programs[r], R == 35716) {
        var E = GLctx.getProgramInfoLog(r);
        E === null && (E = "(unknown error)"), HEAP32[y >> 2] = E.length + 1
    } else if (R == 35719) {
        if (!r.maxUniformLength) for (var C = 0; C < GLctx.getProgramParameter(r, 35718); ++C) r.maxUniformLength = Math.max(r.maxUniformLength, GLctx.getActiveUniform(r, C).name.length + 1);
        HEAP32[y >> 2] = r.maxUniformLength
    } else if (R == 35722) {
        if (!r.maxAttributeLength) for (var C = 0; C < GLctx.getProgramParameter(r, 35721); ++C) r.maxAttributeLength = Math.max(r.maxAttributeLength, GLctx.getActiveAttrib(r, C).name.length + 1);
        HEAP32[y >> 2] = r.maxAttributeLength
    } else if (R == 35381) {
        if (!r.maxUniformBlockNameLength) for (var C = 0; C < GLctx.getProgramParameter(r, 35382); ++C) r.maxUniformBlockNameLength = Math.max(r.maxUniformBlockNameLength, GLctx.getActiveUniformBlockName(r, C).length + 1);
        HEAP32[y >> 2] = r.maxUniformBlockNameLength
    } else HEAP32[y >> 2] = GLctx.getProgramParameter(r, R)
}

function _glGetShaderInfoLog(r, R, y, E) {
    var C = GLctx.getShaderInfoLog(GL.shaders[r]);
    C === null && (C = "(unknown error)");
    var x = R > 0 && E ? stringToUTF8(C, E, R) : 0;
    y && (HEAP32[y >> 2] = x)
}

function _glGetShaderiv(r, R, y) {
    if (!y) {
        GL.recordError(1281);
        return
    }
    if (R == 35716) {
        var E = GLctx.getShaderInfoLog(GL.shaders[r]);
        E === null && (E = "(unknown error)");
        var C = E ? E.length + 1 : 0;
        HEAP32[y >> 2] = C
    } else if (R == 35720) {
        var x = GLctx.getShaderSource(GL.shaders[r]), B = x ? x.length + 1 : 0;
        HEAP32[y >> 2] = B
    } else HEAP32[y >> 2] = GLctx.getShaderParameter(GL.shaders[r], R)
}

function jstoi_q(r) {
    return parseInt(r)
}

function webglGetLeftBracePos(r) {
    return r.slice(-1) == "]" && r.lastIndexOf("[")
}

function webglPrepareUniformLocationsBeforeFirstUse(r) {
    var R = r.uniformLocsById, y = r.uniformSizeAndIdsByName, E, C;
    if (!R) for (r.uniformLocsById = R = {}, r.uniformArrayNamesById = {}, E = 0; E < GLctx.getProgramParameter(r, 35718); ++E) {
        var x = GLctx.getActiveUniform(r, E), B = x.name, N = x.size, L = webglGetLeftBracePos(B),
            O = L > 0 ? B.slice(0, L) : B, D = r.uniformIdCounter;
        for (r.uniformIdCounter += N, y[O] = [N, D], C = 0; C < N; ++C) R[D] = C, r.uniformArrayNamesById[D++] = O
    }
}

function _glGetUniformLocation(r, R) {
    if (R = UTF8ToString(R), r = GL.programs[r]) {
        webglPrepareUniformLocationsBeforeFirstUse(r);
        var y = r.uniformLocsById, E = 0, C = R, x = webglGetLeftBracePos(R);
        x > 0 && (E = jstoi_q(R.slice(x + 1)) >>> 0, C = R.slice(0, x));
        var B = r.uniformSizeAndIdsByName[C];
        if (B && E < B[0] && (E += B[1], y[E] = y[E] || GLctx.getUniformLocation(r, R))) return E
    } else GL.recordError(1281);
    return -1
}

function _glLinkProgram(r) {
    r = GL.programs[r], GLctx.linkProgram(r), r.uniformLocsById = 0, r.uniformSizeAndIdsByName = {}
}

function _glPixelStorei(r, R) {
    r == 3317 && (GL.unpackAlignment = R), GLctx.pixelStorei(r, R)
}

function _glShaderSource(r, R, y, E) {
    var C = GL.getSource(r, R, y, E);
    GLctx.shaderSource(GL.shaders[r], C)
}

function computeUnpackAlignedImageSize(r, R, y, E) {
    function C(N, L) {
        return N + L - 1 & -L
    }

    var x = r * y, B = C(x, E);
    return R * B
}

function __colorChannelsInGlTextureFormat(r) {
    var R = {5: 3, 6: 4, 8: 2, 29502: 3, 29504: 4};
    return R[r - 6402] || 1
}

function heapObjectForWebGLType(r) {
    return r -= 5120, r == 1 ? HEAPU8 : r == 4 ? HEAP32 : r == 6 ? HEAPF32 : r == 5 || r == 28922 ? HEAPU32 : HEAPU16
}

function heapAccessShiftForWebGLHeap(r) {
    return 31 - Math.clz32(r.BYTES_PER_ELEMENT)
}

function emscriptenWebGLGetTexPixelData(r, R, y, E, C, x) {
    var B = heapObjectForWebGLType(r), N = heapAccessShiftForWebGLHeap(B), L = 1 << N,
        O = __colorChannelsInGlTextureFormat(R) * L, D = computeUnpackAlignedImageSize(y, E, O, GL.unpackAlignment);
    return B.subarray(C >> N, C + D >> N)
}

function _glTexImage2D(r, R, y, E, C, x, B, N, L) {
    GLctx.texImage2D(r, R, y, E, C, x, B, N, L ? emscriptenWebGLGetTexPixelData(N, B, E, C, L) : null)
}

function _glTexParameterf(r, R, y) {
    GLctx.texParameterf(r, R, y)
}

function webglGetUniformLocation(r) {
    var R = GLctx.currentProgram;
    if (R) {
        var y = R.uniformLocsById[r];
        return typeof y == "number" && (R.uniformLocsById[r] = y = GLctx.getUniformLocation(R, R.uniformArrayNamesById[r] + (y > 0 ? "[" + y + "]" : ""))), y
    } else GL.recordError(1282)
}

function _glUniform1i(r, R) {
    GLctx.uniform1i(webglGetUniformLocation(r), R)
}

function _glUseProgram(r) {
    r = GL.programs[r], GLctx.useProgram(r), GLctx.currentProgram = r
}

function _glVertexAttribPointer(r, R, y, E, C, x) {
    GLctx.vertexAttribPointer(r, R, y, !!E, C, x)
}

function _glViewport(r, R, y, E) {
    GLctx.viewport(r, R, y, E)
}

function _setTempRet0(r) {
}

var GLctx, asmLibraryArg = {
    P: ___syscall_fcntl64,
    J: ___syscall_openat,
    i: __emscripten_date_now,
    a: _abort,
    b: _emscripten_asm_const_int,
    n: _emscripten_clear_interval,
    D: _emscripten_get_canvas_element_size,
    E: _emscripten_get_element_css_size,
    I: _emscripten_get_heap_max,
    N: _emscripten_memcpy_big,
    H: _emscripten_resize_heap,
    d: _emscripten_set_canvas_element_size,
    ga: _emscripten_set_element_css_size,
    o: _emscripten_set_interval,
    F: _emscripten_set_keydown_callback_on_thread,
    ka: _emscripten_set_mousedown_callback_on_thread,
    ja: _emscripten_set_touchstart_callback_on_thread,
    ha: _emscripten_webgl_create_context,
    p: _emscripten_webgl_destroy_context,
    ia: _emscripten_webgl_init_context_attributes,
    c: _emscripten_webgl_make_context_current,
    L: _environ_get,
    M: _environ_sizes_get,
    r: _fd_close,
    K: _fd_fdstat_get,
    O: _fd_read,
    G: _fd_seek,
    q: _fd_write,
    fa: get_a_str,
    V: get_audio_state,
    la: get_do_str,
    _: get_e_str,
    g: _glActiveTexture,
    t: _glAttachShader,
    x: _glBindBuffer,
    f: _glBindTexture,
    w: _glBufferData,
    B: _glClear,
    C: _glClearColor,
    ba: _glCompileShader,
    T: _glCreateProgram,
    da: _glCreateShader,
    Q: _glDeleteProgram,
    m: _glDeleteShader,
    Z: _glDeleteTextures,
    X: _glDrawArrays,
    u: _glEnableVertexAttribArray,
    $: _glGenBuffers,
    W: _glGenTextures,
    y: _glGetAttribLocation,
    ea: _glGetError,
    R: _glGetProgramInfoLog,
    s: _glGetProgramiv,
    aa: _glGetShaderInfoLog,
    A: _glGetShaderiv,
    l: _glGetUniformLocation,
    S: _glLinkProgram,
    U: _glPixelStorei,
    ca: _glShaderSource,
    j: _glTexImage2D,
    e: _glTexParameterf,
    k: _glUniform1i,
    z: _glUseProgram,
    v: _glVertexAttribPointer,
    Y: _glViewport,
    h: _setTempRet0
};
createWasm();
Module.___wasm_call_ctors = function () {
    return (Module.___wasm_call_ctors = Module.asm.na).apply(null, arguments)
};
Module._ng = function () {
    return (Module._ng = Module.asm.oa).apply(null, arguments)
};
Module._nc = function () {
    return (Module._nc = Module.asm.pa).apply(null, arguments)
};
Module._nd = function () {
    return (Module._nd = Module.asm.qa).apply(null, arguments)
};
Module._ns = function () {
    return (Module._ns = Module.asm.ra).apply(null, arguments)
};
Module._np = function () {
    return (Module._np = Module.asm.sa).apply(null, arguments)
};
Module._nv = function () {
    return (Module._nv = Module.asm.ta).apply(null, arguments)
};
Module._nr = function () {
    return (Module._nr = Module.asm.ua).apply(null, arguments)
};
Module._ni = function () {
    return (Module._ni = Module.asm.va).apply(null, arguments)
};
Module._nm = function () {
    return (Module._nm = Module.asm.wa).apply(null, arguments)
};
Module._nb = function () {
    return (Module._nb = Module.asm.xa).apply(null, arguments)
};
Module._nk = function () {
    return (Module._nk = Module.asm.ya).apply(null, arguments)
};
Module._ne = function () {
    return (Module._ne = Module.asm.za).apply(null, arguments)
};
Module._ny = function () {
    return (Module._ny = Module.asm.Aa).apply(null, arguments)
};
Module._nar = function () {
    return (Module._nar = Module.asm.Ba).apply(null, arguments)
};
Module._nor = function () {
    return (Module._nor = Module.asm.Ca).apply(null, arguments)
};
Module._nse = function () {
    return (Module._nse = Module.asm.Da).apply(null, arguments)
};
Module._ncv = function () {
    return (Module._ncv = Module.asm.Ea).apply(null, arguments)
};
Module._main = function () {
    return (Module._main = Module.asm.Fa).apply(null, arguments)
};
var _malloc = Module._malloc = function () {
    return (_malloc = Module._malloc = Module.asm.Ha).apply(null, arguments)
}, stackSave = Module.stackSave = function () {
    return (stackSave = Module.stackSave = Module.asm.Ia).apply(null, arguments)
}, stackRestore = Module.stackRestore = function () {
    return (stackRestore = Module.stackRestore = Module.asm.Ja).apply(null, arguments)
}, stackAlloc = Module.stackAlloc = function () {
    return (stackAlloc = Module.stackAlloc = Module.asm.Ka).apply(null, arguments)
};
Module.dynCall_iiiiiiii = function () {
    return (Module.dynCall_iiiiiiii = Module.asm.La).apply(null, arguments)
};
var dynCall_iiii = Module.dynCall_iiii = function () {
    return (dynCall_iiii = Module.dynCall_iiii = Module.asm.Ma).apply(null, arguments)
}, dynCall_vi = Module.dynCall_vi = function () {
    return (dynCall_vi = Module.dynCall_vi = Module.asm.Na).apply(null, arguments)
};
Module.dynCall_ii = function () {
    return (Module.dynCall_ii = Module.asm.Oa).apply(null, arguments)
};
Module.dynCall_vii = function () {
    return (Module.dynCall_vii = Module.asm.Pa).apply(null, arguments)
};
Module.dynCall_viiiiii = function () {
    return (Module.dynCall_viiiiii = Module.asm.Qa).apply(null, arguments)
};
Module.dynCall_viiii = function () {
    return (Module.dynCall_viiii = Module.asm.Ra).apply(null, arguments)
};
var dynCall_v = Module.dynCall_v = function () {
    return (dynCall_v = Module.dynCall_v = Module.asm.Sa).apply(null, arguments)
};
Module.dynCall_dd = function () {
    return (Module.dynCall_dd = Module.asm.Ta).apply(null, arguments)
};
Module.dynCall_iii = function () {
    return (Module.dynCall_iii = Module.asm.Ua).apply(null, arguments)
};
Module.dynCall_iiiiii = function () {
    return (Module.dynCall_iiiiii = Module.asm.Va).apply(null, arguments)
};
Module.dynCall_iiiiiii = function () {
    return (Module.dynCall_iiiiiii = Module.asm.Wa).apply(null, arguments)
};
Module.dynCall_viiiii = function () {
    return (Module.dynCall_viiiii = Module.asm.Xa).apply(null, arguments)
};
Module.dynCall_viii = function () {
    return (Module.dynCall_viii = Module.asm.Ya).apply(null, arguments)
};
Module.dynCall_viifi = function () {
    return (Module.dynCall_viifi = Module.asm.Za).apply(null, arguments)
};
Module.dynCall_fiii = function () {
    return (Module.dynCall_fiii = Module.asm._a).apply(null, arguments)
};
Module.dynCall_viidi = function () {
    return (Module.dynCall_viidi = Module.asm.$a).apply(null, arguments)
};
Module.dynCall_iiiii = function () {
    return (Module.dynCall_iiiii = Module.asm.ab).apply(null, arguments)
};
Module.dynCall_viiiifii = function () {
    return (Module.dynCall_viiiifii = Module.asm.bb).apply(null, arguments)
};
Module.dynCall_fii = function () {
    return (Module.dynCall_fii = Module.asm.cb).apply(null, arguments)
};
Module.dynCall_viiiiiifi = function () {
    return (Module.dynCall_viiiiiifi = Module.asm.db).apply(null, arguments)
};
Module.dynCall_viiiiiiiii = function () {
    return (Module.dynCall_viiiiiiiii = Module.asm.eb).apply(null, arguments)
};
Module.dynCall_viiiiiiiiii = function () {
    return (Module.dynCall_viiiiiiiiii = Module.asm.fb).apply(null, arguments)
};
Module.dynCall_viiiiiiii = function () {
    return (Module.dynCall_viiiiiiii = Module.asm.gb).apply(null, arguments)
};
Module.dynCall_viiiiiii = function () {
    return (Module.dynCall_viiiiiii = Module.asm.hb).apply(null, arguments)
};
Module.dynCall_viiijj = function () {
    return (Module.dynCall_viiijj = Module.asm.ib).apply(null, arguments)
};
Module.dynCall_iiiiiiidiiddii = function () {
    return (Module.dynCall_iiiiiiidiiddii = Module.asm.jb).apply(null, arguments)
};
Module.dynCall_jij = function () {
    return (Module.dynCall_jij = Module.asm.kb).apply(null, arguments)
};
Module.dynCall_jii = function () {
    return (Module.dynCall_jii = Module.asm.lb).apply(null, arguments)
};
Module.dynCall_jiji = function () {
    return (Module.dynCall_jiji = Module.asm.mb).apply(null, arguments)
};
Module.dynCall_iidiiii = function () {
    return (Module.dynCall_iidiiii = Module.asm.xa).apply(null, arguments)
};
Module._ff_h264_cabac_tables = 153662;
var calledRun;

function ExitStatus(r) {
    this.name = "ExitStatus", this.message = "Program terminated with exit(" + r + ")", this.status = r
}

dependenciesFulfilled = function r() {
    calledRun || run(), calledRun || (dependenciesFulfilled = r)
};

function callMain(r) {
    var R = Module._main, y = 0, E = 0;
    try {
        var C = R(y, E);
        return exit(C, !0), C
    } catch (x) {
        return handleException(x)
    } finally {
    }
}

function run(r) {
    if (runDependencies > 0 || (preRun(), runDependencies > 0)) return;

    function R() {
        calledRun || (calledRun = !0, Module.calledRun = !0, !ABORT && (initRuntime(), preMain(), Module.onRuntimeInitialized && Module.onRuntimeInitialized(), shouldRunNow && callMain(), postRun()))
    }

    Module.setStatus ? (Module.setStatus("Running..."), setTimeout(function () {
        setTimeout(function () {
            Module.setStatus("")
        }, 1), R()
    }, 1)) : R()
}

Module.run = run;

function exit(r, R) {
    EXITSTATUS = r, procExit(r)
}

function procExit(r) {
    EXITSTATUS = r, keepRuntimeAlive() || (Module.onExit && Module.onExit(r), ABORT = !0), quit_(r, new ExitStatus(r))
}

if (Module.preInit) for (typeof Module.preInit == "function" && (Module.preInit = [Module.preInit]); Module.preInit.length > 0;) Module.preInit.pop()();
var shouldRunNow = !0;
Module.noInitialRun && (shouldRunNow = !1);
run();
var FlvPlayer = function () {
    const r = {
        nc: cwrap("nc", "number", ["number"]),
        nd: cwrap("nd", "number", ["number"]),
        ns: cwrap("ns", "number", ["number", "string"]),
        np: cwrap("np", "number", ["number"]),
        ni: cwrap("ni", "number", ["number", "array", "number"]),
        ng: cwrap("ng", "string"),
        nv: cwrap("nv", "number", ["number", "string", "number"]),
        nm: cwrap("nm", "number", ["number", "number"]),
        nb: cwrap("nb", "number", ["number", "number"]),
        nk: cwrap("nk", "number", ["number", "number"]),
        ne: cwrap("ne", "number", ["number", "number"]),
        nr: cwrap("nr", "number", ["number", "number", "number", "number"]),
        ny: cwrap("ny", "number", ["number", "string"]),
        nor: cwrap("nor", "number", ["number", "number", "number"]),
        nar: cwrap("nar", "number", ["number"]),
        nse: cwrap("nse", "number", ["number", "number"]),
        ncv: cwrap("ncv", "number", ["number"])
    };
    document.addEventListener("fullscreenchange", xt => {
        xt.target.ctx && (document.fullscreenElement ? xt.target.offsetHeight > 0 && xt.target.offsetHeight > 0 && r.nr(xt.target.ctx, xt.target.offsetWidth, xt.target.offsetHeight, 1) : r.nr(xt.target.ctx, xt.target.tw, xt.target.th, 1))
    });

    class R extends D {
        constructor() {
            super(), this.ism = /(iPhone|iPad|iPod|iOS|Android)/i.test(navigator.userAgent) ? 1 : 0, this.ctx = r.nc(this.ism), this.dpr = window.devicePixelRatio || 1, this.rpr = screen.width / document.documentElement.clientWidth * this.dpr, this.version = r.ng(), this.isStart = !1, this.isMSE = !1, this.hasAudio = !0, this.volume = 1, this.eventFlags = 0, this.screenCount = 0, this.connTimeout = 0, this.connTimer = null, this.screenshotImage1 = null, this.screenshotImage2 = null, this.headers = {}, this.loader = new x, this.loader.on("data", K => {
                let Pe = r.ni(this.ctx, K, K.length);
                Pe < 0 && (this.emit("error", "input data error, " + Pe), this.stop())
            }), this.loader.on("open", () => {
                this.emit("start")
            }), this.loader.on("close", () => {
                this.stop()
            }), this.loader.on("error", K => {
                this.emit("error", K), this.stop()
            }), NP[this.ctx].emit = this.emit.bind(this), this.on("buffer", K => {
                this.connTimeout > 0 && (this._clearTimeout(), K === "empty" && (this.connTimer = setTimeout(() => {
                    this.emit("timeout")
                }, this.connTimeout * 1e3)))
            }), this.ism && (this.wakeLock = new O)
        }

        on(K, Pe) {
            super.on(K, Pe), K === "videoSei" ? this.eventFlags |= 1 : K === "videoFrame" && (this.eventFlags |= 2), r.nse(this.ctx, this.eventFlags)
        }

        setTimeout(K) {
            K > 0 ? this.connTimeout = K : this._clearTimeout()
        }

        _clearTimeout() {
            this.connTimer != null && (clearTimeout(this.connTimer), this.connTimer = null)
        }

        addHeaders(K) {
            this.headers = K
        }

        setView(K) {
            if (this.isMSE) {
                let Pe = document.getElementById(K), Oe = document.createElement("video"), Ue = Pe.parentNode;
                Oe.id = K, Pe.width != 300 && Pe.height != 150 && (Oe.width = Pe.width, Oe.height = Pe.height), Oe.style.cssText = Pe.style.cssText, Ue.replaceChild(Oe, Pe), this.ve = Oe
            } else return this.ve = document.getElementById(K), this.ve.ctx = this.ctx, NP[this.ctx].ve = this.ve, r.nv(this.ctx, "#" + K, this.dpr, this.rpr)
        }

        resizeView(K, Pe) {
            this.isMSE || r.nr(this.ctx, K, Pe, 0)
        }

        setKeepScreenOn() {
            this.isKeepOn = !0
        }

        setScaleMode(K) {
            return r.nm(this.ctx, K)
        }

        setBufferTime(K) {
            return r.nb(this.ctx, K)
        }

        skipLoopFilter(K) {
            return r.nk(this.ctx, K)
        }

        setVolume(K) {
            this.volume = K, this.isMSE ? this.flvPlayer && (this.flvPlayer.volume = K) : r.ne(this.ctx, K)
        }

        setCryptoKey(K) {
            r.ny(this.ctx, K)
        }

        enableAudio(K) {
            this.hasAudio = K, K || (this.volume = 0)
        }

        audioResume() {
            r.nar(this.ctx)
        }

        launchIntoFullscreen(K) {
            K.requestFullscreen ? K.requestFullscreen() : K.mozRequestFullScreen ? K.mozRequestFullScreen() : K.webkitRequestFullscreen ? K.webkitRequestFullscreen() : K.msRequestFullscreen && K.msRequestFullscreen()
        }

        fullscreen() {
            this.ve.tw = this.ve.width, this.ve.th = this.ve.height, this.launchIntoFullscreen(this.ve)
        }

        fullWebview(K) {
            this.ve.tmpcss = this.ve.style.cssText, this.ve.style.cssText = "width:100%;height:100%;position:absolute;top: 0;left: 0;z-index: -1;", r.nor(this.ctx, K)
        }

        exitFullWebview() {
            this.ve.tmpcss === void 0 || this.ve.tmpcss === "" || (this.ve.style.cssText = this.ve.tmpcss, r.nor(this.ctx, 0))
        }

        onResize(K, Pe) {
            r.nor(this.ctx, K, Pe)
        }

        screenshot(K, Pe, Oe) {
            if (this.isStart && this.screenCount++ < 30) {
                if (this.screenshotImage1 == null) {
                    this.screenshotImage1 = this.ve.toDataURL("image/" + Pe, Oe), setTimeout(() => {
                        this.screenshot(K, Pe, Oe)
                    }, 100);
                    return
                }
                if (this.screenshotImage2 == null && (this.screenshotImage2 = this.ve.toDataURL("image/" + Pe, Oe)), this.screenshotImage1.length === this.screenshotImage2.length) {
                    this.screenshotImage2 = null, setTimeout(() => {
                        this.screenshot(K, Pe, Oe)
                    }, 100);
                    return
                }
                var Ue = document.createElement("a");
                Ue.href = this.screenshotImage1.length > this.screenshotImage2.length ? this.screenshotImage1 : this.screenshotImage2, Ue.download = K, Ue.click(), this.screenCount = 0, this.screenshotImage1 = null, this.screenshotImage2 = null
            } else this.screenCount = 0, this.screenshotImage1 = null, this.screenshotImage2 = null, this.emit("error", "screenshot error")
        }

        start(K) {
            if (this.isMSE) {
                if (this.flvPlayer) return;
                let Pe = {type: "flv", url: K};
                this.hasAudio || (Pe.hasAudio = !1), this.flvPlayer = Ia(Pe), this.flvPlayer.attachMediaElement(this.ve), this.flvPlayer.on(Xe.ERROR, Oe => {
                    this.emit("error", Oe), this.stop()
                }), this.flvPlayer.on(Xe.LOADING_COMPLETE, () => {
                    this.stop()
                }), this.flvPlayer.on(Xe.MEDIA_INFO, () => {
                    this.isStart || (this.isStart = !0, this.emit("start"))
                }), this.flvPlayer.load(), this.flvPlayer.play().catch(Oe => {
                })
            } else {
                if (typeof K != "string") {
                    NP_ERROR("url invalid parameter");
                    return
                }
                if (this.isStart) {
                    NP_DEBUG("The instance has started, ignore it");
                    return
                }
                NP_INFO("call start play url:", K), this.url = K, this.ism && this.isKeepOn && this.wakeLock.enable(), r.ns(this.ctx, K) == 0 && (this.setVolume(this.volume), this.loader.start(K, this.headers), this.isStart = !0)
            }
        }

        stop() {
            if (this.isMSE) this.flvPlayer && (this.flvPlayer.detachMediaElement(), this.flvPlayer.unload(), this.flvPlayer.destroy(), this.flvPlayer = null, this.emit("stop"), this.isStart = !1); else {
                if (!this.isStart) {
                    NP_DEBUG("The instance has not started yet, ignore it");
                    return
                }
                NP_INFO("call stop play url:", this.url), this.ism && this.isKeepOn && this.wakeLock.disable(), this.isStart = !1, this.loader.stop(), this._clearTimeout(), r.np(this.ctx), this.emit("stop")
            }
        }

        clearView() {
            r.ncv(this.ctx)
        }

        release(K) {
            this.isMSE || (this.stop(), r.nd(this.ctx, K)), delete NP[this.ctx], this.ctx = null, this.loader = null, this.wakeLock = null
        }

        useMSE() {
            this.isMSE = Ma(), NP_INFO("use MSE:", this.isMSE ? "YES" : "NO"), this.isMSE && (this.flvPlayer = null, He.enableAll = !1, He.addLogListener(function (K, Pe) {
                NP_INFO(K + Pe)
            }))
        }

        static activeAudioEngine(K) {
            window.activeAudioEngine = K, K && NP_INFO("FlvPlayer.js use activeAudioEngine")
        }

        static workletAudioEngine(K) {
            window.workletAudioEngine = K & Fa(), window.workletAudioEngine && NP_INFO("FlvPlayer.js use workletAudioEngine")
        }

        static debug(K) {
            K ? Module.logLevel = NP_LOGLEVEL.INFO : Module.logLevel = NP_LOGLEVEL.NONE
        }

        static load(K) {
            window.npAllReadyFlag ? K() : setTimeout(R.load.bind(this, K), 100)
        }

        static asyncLoad() {
            return new Promise((K, Pe) => {
                R.load(() => {
                    K()
                })
            })
        }
    }

    class y {
        async start(K, Pe) {
            this.isStart = !0, this.fetchAbortController = new AbortController;
            try {
                let Oe = this.fetchAbortController.signal, Ue = await fetch(K, {signal: Oe, headers: Pe});
                if (!Ue.ok) {
                    this.isStart = !1, this.emit("error", {
                        code: -2,
                        msg: "open url error, status code is " + Ue.status
                    });
                    return
                }
                this.emit("open");
                let Ke = Ue.body.getReader();
                for (; this.isStart;) {
                    let mt = await Ke.read();
                    if (mt.done) {
                        this.emit("close");
                        break
                    }
                    this.emit("data", mt.value)
                }
            } catch (Oe) {
                this.fetchAbortController && this.emit("error", {code: -3, msg: Oe.message})
            }
            this.isStart = !1
        }

        stop() {
            this.isStart = !1, this.fetchAbortController && (this.fetchAbortController.abort(), this.fetchAbortController = null)
        }

        postMessage() {
        }

        send() {
        }
    }

    function E() {
        class xt {
            async start(Oe) {
                this.isStart = !0, this.fetchAbortController = new AbortController;
                try {
                    let Ue = this.fetchAbortController.signal, Ke = {};
                    Object.assign(Ke, Oe.headers);
                    let mt = await fetch(Oe.url, {signal: Ue, headers: Ke});
                    if (!mt.ok) {
                        this.isStart = !1, self.postMessage({
                            func: "error",
                            arg: {code: -2, msg: "open url error, status code is " + mt.status}
                        });
                        return
                    }
                    self.postMessage({func: "open"});
                    let Tt = mt.body.getReader();
                    for (; this.isStart;) {
                        let jt = await Tt.read();
                        if (jt.done) {
                            self.postMessage({func: "close"});
                            break
                        }
                        self.postMessage({func: "data", arg: jt.value})
                    }
                } catch (Ue) {
                    this.fetchAbortController && self.postMessage({func: "error", arg: {code: -3, msg: Ue.message}})
                }
                this.isStart = !1
            }

            stop() {
                this.isStart = !1, this.fetchAbortController && (this.fetchAbortController.abort(), this.fetchAbortController = null)
            }

            send(Oe) {
            }
        }

        const K = new xt;
        onmessage = Pe => {
            const {func: Oe, arg: Ue} = Pe.data;
            switch (Oe) {
                case"start":
                    K.start(Ue);
                    break;
                case"stop":
                    K.stop();
                    break;
                case"send":
                    K.send(Ue);
                    break
            }
        }
    }

    class C {
        constructor() {
            this.inBytes = 0, this.outBytes = 0, this.socket = null
        }

        start(K) {
            this.url = K.replace(/^rtmp:|^rtsp:/, "ws:"), this.url === K && (this.url = K.replace(/^rtmps:/, "wss:")), this.socket = new WebSocket(this.url), this.socket.binaryType = "arraybuffer", this.socket.onopen = () => {
                this.emit("open")
            }, this.socket.onclose = () => {
                this.emit("close")
            }, this.socket.onerror = Pe => {
                this.emit("error", {code: -3, msg: Pe})
            }, this.socket.onmessage = Pe => {
                try {
                    const Oe = new Uint8Array(Pe.data);
                    this.inBytes += Oe.length, this.emit("data", Oe)
                } catch (Oe) {
                    this.emit("error", {code: -2, msg: Oe.message})
                }
            }
        }

        postMessage() {
        }

        stop() {
            this.inBytes = 0, this.outBytes = 0, this.socket.close(), this.socket = null
        }

        send(K) {
            this.outBytes += K.byteLength, this.socket.send(K)
        }
    }

    class x extends D {
        constructor() {
            super(), this.loader = null
        }

        getFuncBody(K) {
            return K.trim().match(/^function\s*\w*\s*\([\w\s,]*\)\s*{([\w\W]*?)}$/)[1]
        }

        checkResponse() {
            return typeof window.ReadableStream == "function" && typeof window.Response == "function"
        }

        checkResponseBody() {
            return Object.prototype.hasOwnProperty.call(window.Response.prototype, "body")
        }

        start(K, Pe) {
            if (this.loader == null) if (/^ws{1,2}:|^rtmp:|^rtmps:|^rtsp:/i.test(K)) this.loader = new C, this.loader.emit = this.emit.bind(this), this.loader.terminate = this.loader.stop, this.loader.start(K); else if (this.checkResponse() && this.checkResponseBody()) this.loader = new y, this.loader.emit = this.emit.bind(this), this.loader.terminate = this.loader.stop, this.loader.start(K, Pe); else if (this.checkResponse()) {
                const Oe = this.getFuncBody(E.toString()), Ue = new Blob([Oe], {type: "text/javascript"});
                this.workerURL = URL.createObjectURL(Ue), this.loader = new Worker(this.workerURL), this.loader.onmessage = Ke => {
                    const {func: mt, arg: Tt} = Ke.data;
                    this.emit(mt, Tt)
                }, this.loader.postMessage({func: "start", arg: {url: K, headers: Pe}})
            } else this.emit("error", {code: -4, msg: "No loader is available."}); else this.emit("error", {
                code: -1,
                msg: "StreamLoader has started."
            })
        }

        stop() {
            this.loader != null ? (this.loader.postMessage({func: "stop"}), this.loader.terminate(), this.loader = null) : this.emit("error", {
                code: -1,
                msg: "StreamLoader has not been started yet."
            })
        }

        send(K) {
            this.loader.send(K)
        }
    }

    const B = "data:video/mp4;base64,AAAAIGZ0eXBpc29tAAACAGlzb21pc28yYXZjMW1wNDEAAAAIZnJlZQAACORtZGF03gIATGF2YzU4LjM1LjEwMAACMEAOAAACcQYF//9t3EXpvebZSLeWLNgg2SPu73gyNjQgLSBjb3JlIDE2MSByMzAyNyA0MTIxMjc3IC0gSC4yNjQvTVBFRy00IEFWQyBjb2RlYyAtIENvcHlsZWZ0IDIwMDMtMjAyMCAtIGh0dHA6Ly93d3cudmlkZW9sYW4ub3JnL3gyNjQuaHRtbCAtIG9wdGlvbnM6IGNhYmFjPTAgcmVmPTMgZGVibG9jaz0xOjA6MCBhbmFseXNlPTB4MToweDExMSBtZT1oZXggc3VibWU9NyBwc3k9MSBwc3lfcmQ9MS4wMDowLjAwIG1peGVkX3JlZj0xIG1lX3JhbmdlPTE2IGNocm9tYV9tZT0xIHRyZWxsaXM9MSA4eDhkY3Q9MCBjcW09MCBkZWFkem9uZT0yMSwxMSBmYXN0X3Bza2lwPTEgY2hyb21hX3FwX29mZnNldD0tMiB0aHJlYWRzPTcgbG9va2FoZWFkX3RocmVhZHM9MSBzbGljZWRfdGhyZWFkcz0wIG5yPTAgZGVjaW1hdGU9MSBpbnRlcmxhY2VkPTAgYmx1cmF5X2NvbXBhdD0wIGNvbnN0cmFpbmVkX2ludHJhPTAgYmZyYW1lcz0wIHdlaWdodHA9MCBrZXlpbnQ9MjUwIGtleWludF9taW49MTAgc2NlbmVjdXQ9NDAgaW50cmFfcmVmcmVzaD0wIHJjX2xvb2thaGVhZD00MCByYz1jcmYgbWJ0cmVlPTEgY3JmPTIzLjAgcWNvbXA9MC42MCBxcG1pbj0wIHFwbWF4PTY5IHFwc3RlcD00IGlwX3JhdGlvPTEuNDAgYXE9MToxLjAwAIAAAADvZYiED/JigADD7JycnJycnJycnJycnJycnJycnJ11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111114BGCAHARggBwEYIAcBGCAHARggBwAAAAdBmjgf4BLYARggBwEYIAcBGCAHARggBwAAAAdBmlQH+AS2ARggBwEYIAcBGCAHARggBwAAAAdBmmA/wCWwARggBwEYIAcBGCAHARggBwEYIAcAAAAHQZqAP8AlsAEYIAcBGCAHARggBwEYIAcAAAAHQZqgP8AlsAEYIAcBGCAHARggBwEYIAcAAAAHQZrAP8AlsAEYIAcBGCAHARggBwEYIAcBGCAHAAAAB0Ga4D/AJbABGCAHARggBwEYIAcBGCAHAAAAB0GbAD/AJbABGCAHARggBwEYIAcBGCAHAAAAB0GbID/AJbABGCAHARggBwEYIAcBGCAHARggBwAAAAdBm0A/wCWwARggBwEYIAcBGCAHAAAAB0GbYD/AJbABGCAHARggBwEYIAcAAAAHQZuAP8AlsAEYIAcBGCAHARggBwEYIAcBGCAHAAAAB0GboD/AJbABGCAHARggBwEYIAcBGCAHAAAAB0GbwD/AJbABGCAHARggBwEYIAcBGCAHAAAAB0Gb4D/AJbABGCAHARggBwEYIAcBGCAHARggBwAAAAdBmgA/wCWwARggBwEYIAcBGCAHARggBwAAAAdBmiA/wCWwARggBwEYIAcBGCAHARggBwAAAAdBmkA/wCWwARggBwEYIAcBGCAHARggBwEYIAcAAAAHQZpgP8AlsAEYIAcBGCAHARggBwEYIAcAAAAHQZqAP8AlsAEYIAcBGCAHARggBwEYIAcAAAAHQZqgP8AlsAEYIAcBGCAHARggBwAAAAdBmsA/wCWwARggBwEYIAcBGCAHARggBwAAAAdBmuA/wCWwARggBwEYIAcBGCAHARggBwAAAAdBmwA/wCWwARggBwEYIAcBGCAHARggBwEYIAcAAAAHQZsgP8AlsAEYIAcBGCAHARggBwEYIAcAAAAHQZtAP8AlsAEYIAcBGCAHARggBwEYIAcAAAAHQZtgP8AlsAEYIAcBGCAHARggBwEYIAcBGCAHAAAAB0GbgD/AJbABGCAHARggBwEYIAcBGCAHAAAAB0GboD/AJbABGCAHARggBwEYIAcBGCAHAAAAB0GbwD/AJbABGCAHARggBwEYIAcBGCAHARggBwAAAAdBm+A/wCWwARggBwEYIAcBGCAHARggBwAAAAdBmgA/wCWwARggBwEYIAcAAAAHQZogP8AlsAEYIAcBGCAHARggBwEYIAcBGCAHAAAAB0GaQD/AJbABGCAHARggBwEYIAcBGCAHAAAAB0GaYD/AJbABGCAHARggBwEYIAcBGCAHAAAAB0GagD/AJbABGCAHARggBwEYIAcBGCAHARggBwAAAAdBmqA/wCWwARggBwEYIAcBGCAHARggBwAAAAdBmsA/wCWwARggBwEYIAcBGCAHARggBwAAAAdBmuA/wCWwARggBwEYIAcBGCAHARggBwEYIAcAAAAHQZsAP8AlsAEYIAcBGCAHARggBwEYIAcAAAAHQZsgP8AlsAEYIAcBGCAHARggBwEYIAcAAAAHQZtAP8AlsAEYIAcBGCAHARggBwEYIAcBGCAHAAAAB0GbYD/AJbABGCAHARggBwAAAAdBm4A/wCWwARggBwEYIAcBGCAHARggBwAAAAdBm6A/wCWwARggBwEYIAcBGCAHARggBwEYIAcAAAAHQZvAP8AlsAEYIAcBGCAHARggBwEYIAcAAAAHQZvgP8AlsAEYIAcBGCAHARggBwEYIAcAAAAHQZoAO8AlsAEYIAcBGCAHARggBwEYIAcBGCAHAAAAB0GaIDfAJbABGCAHARggBwEYIAcBGCAHAAAMxm1vb3YAAABsbXZoZAAAAAAAAAAAAAAAAAAAA+gAABOgAAEAAAEAAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAPLdHJhawAAAFx0a2hkAAAAAwAAAAAAAAAAAAAAAQAAAAAAABOIAAAAAAAAAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAQAAAAAElVVUA8AAAAAAAJGVkdHMAAAAcZWxzdAAAAAAAAAABAAATiAAAAAAAAQAAAAADQ21kaWEAAAAgbWRoZAAAAAAAAAAAAAAAAAAAKAAAAMgAVcQAAAAAAC1oZGxyAAAAAAAAAAB2aWRlAAAAAAAAAAAAAAAAVmlkZW9IYW5kbGVyAAAAAu5taW5mAAAAFHZtaGQAAAABAAAAAAAAAAAAAAAkZGluZgAAABxkcmVmAAAAAAAAAAEAAAAMdXJsIAAAAAEAAAKuc3RibAAAAKpzdHNkAAAAAAAAAAEAAACaYXZjMQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAFAAPAASAAAAEgAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABj//wAAADRhdmNDAULAC//hABxnQsAL2QFB+/8ACwAMEAAAAwAQAAADAUDxQqSAAQAFaMuDyyAAAAAQcGFzcAAAAAsAAAAMAAAAGHN0dHMAAAAAAAAAAQAAADIAAAQAAAAAFHN0c3MAAAAAAAAAAQAAAAEAAAAcc3RzYwAAAAAAAAABAAAAAQAAAAEAAAABAAAA3HN0c3oAAAAAAAAAAAAAADIAAANoAAAACwAAAAsAAAALAAAACwAAAAsAAAALAAAACwAAAAsAAAALAAAACwAAAAsAAAALAAAACwAAAAsAAAALAAAACwAAAAsAAAALAAAACwAAAAsAAAALAAAACwAAAAsAAAALAAAACwAAAAsAAAALAAAACwAAAAsAAAALAAAACwAAAAsAAAALAAAACwAAAAsAAAALAAAACwAAAAsAAAALAAAACwAAAAsAAAALAAAACwAAAAsAAAALAAAACwAAAAsAAAALAAAACwAAANhzdGNvAAAAAAAAADIAAABFAAADwQAAA9wAAAP3AAAEFgAABDEAAARMAAAEawAABIYAAAShAAAEwAAABNcAAATuAAAFDQAABSgAAAVDAAAFYgAABX0AAAWYAAAFtwAABdIAAAXtAAAGBAAABh8AAAY6AAAGWQAABnQAAAaPAAAGrgAABskAAAbkAAAHAwAABx4AAAcxAAAHUAAAB2sAAAeGAAAHpQAAB8AAAAfbAAAH+gAACBUAAAgwAAAITwAACGIAAAh9AAAInAAACLcAAAjSAAAI8QAACCV0cmFrAAAAXHRraGQAAAADAAAAAAAAAAAAAAACAAAAAAAAE6AAAAAAAAAAAAAAAAEBAAAAAAEAAAAAAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAkZWR0cwAAABxlbHN0AAAAAAAAAAEAABOIAAAEAAABAAAAAAedbWRpYQAAACBtZGhkAAAAAAAAAAAAAAAAAACsRAADYVRVxAAAAAAALWhkbHIAAAAAAAAAAHNvdW4AAAAAAAAAAAAAAABTb3VuZEhhbmRsZXIAAAAHSG1pbmYAAAAQc21oZAAAAAAAAAAAAAAAJGRpbmYAAAAcZHJlZgAAAAAAAAABAAAADHVybCAAAAABAAAHDHN0YmwAAABqc3RzZAAAAAAAAAABAAAAWm1wNGEAAAAAAAAAAQAAAAAAAAAAAAIAEAAAAACsRAAAAAAANmVzZHMAAAAAA4CAgCUAAgAEgICAF0AVAAAAAAENiAAABVQFgICABRIIVuUABoCAgAECAAAAYHN0dHMAAAAAAAAACgAAAC8AAAQAAAAAAQAACtUAAAAsAAAEAAAAAAEAAArWAAAALAAABAAAAAABAAAK1QAAACwAAAQAAAAAAQAACtUAAAAaAAAEAAAAAAEAAAH/AAABzHN0c2MAAAAAAAAAJQAAAAEAAAABAAAAAQAAAAIAAAAFAAAAAQAAAAMAAAAEAAAAAQAAAAUAAAAFAAAAAQAAAAYAAAAEAAAAAQAAAAgAAAAFAAAAAQAAAAkAAAAEAAAAAQAAAAsAAAAFAAAAAQAAAAwAAAADAAAAAQAAAA4AAAAFAAAAAQAAAA8AAAAEAAAAAQAAABEAAAAFAAAAAQAAABIAAAAEAAAAAQAAABQAAAAFAAAAAQAAABUAAAAEAAAAAQAAABcAAAADAAAAAQAAABgAAAAEAAAAAQAAABoAAAAFAAAAAQAAABsAAAAEAAAAAQAAAB0AAAAFAAAAAQAAAB4AAAAEAAAAAQAAACAAAAAFAAAAAQAAACEAAAAEAAAAAQAAACIAAAACAAAAAQAAACMAAAAFAAAAAQAAACQAAAAEAAAAAQAAACYAAAAFAAAAAQAAACcAAAAEAAAAAQAAACkAAAAFAAAAAQAAACoAAAAEAAAAAQAAACwAAAAFAAAAAQAAAC0AAAACAAAAAQAAAC4AAAAEAAAAAQAAAC8AAAAFAAAAAQAAADAAAAAEAAAAAQAAADIAAAAFAAAAAQAAADMAAAAEAAAAAQAAA1xzdHN6AAAAAAAAAAAAAADSAAAAFQAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAA3HN0Y28AAAAAAAAAMwAAADAAAAOtAAADzAAAA+cAAAQCAAAEIQAABDwAAARXAAAEdgAABJEAAASsAAAEywAABOIAAAT5AAAFGAAABTMAAAVOAAAFbQAABYgAAAWjAAAFwgAABd0AAAX4AAAGDwAABioAAAZFAAAGZAAABn8AAAaaAAAGuQAABtQAAAbvAAAHDgAABykAAAc8AAAHWwAAB3YAAAeRAAAHsAAAB8sAAAfmAAAIBQAACCAAAAg7AAAIWgAACG0AAAiIAAAIpwAACMIAAAjdAAAI/AAAABpzZ3BkAQAAAHJvbGwAAAACAAAAAf//AAAAHHNiZ3AAAAAAcm9sbAAAAAEAAADSAAAAAQAAAGJ1ZHRhAAAAWm1ldGEAAAAAAAAAIWhkbHIAAAAAAAAAAG1kaXJhcHBsAAAAAAAAAAAAAAAALWlsc3QAAAAlqXRvbwAAAB1kYXRhAAAAAQAAAABMYXZmNTguMjAuMTAw",
        N = "data:video/webm;base64,GkXfo59ChoEBQveBAULygQRC84EIQoKEd2VibUKHgQRChYECGFOAZwEAAAAAABLfEU2bdLpNu4tTq4QVSalmU6yBoU27i1OrhBZUrmtTrIHYTbuMU6uEElTDZ1OsggGXTbuMU6uEHFO7a1OsghLJ7AEAAAAAAABZAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAVSalmsirXsYMPQkBNgI1MYXZmNTguNDUuMTAwV0GNTGF2ZjU4LjQ1LjEwMESJiECzmgAAAAAAFlSua0C5rgEAAAAAAABO14EBc8WI9UhIq9EDJPCcgQAitZyDdW5khoVWX1ZQOIOBASPjg4QF9eEA4AEAAAAAAAAbsIIBQLqB8FSwggElVLqB8FWwiFW3gQFVuIECrgEAAAAAAABZ14ECc8WIUEWPA9J/iJ6cgQAitZyDdW5khoZBX09QVVNWqoNjLqBWu4QExLQAg4EC4ZGfgQG1iEDncAAAAAAAYmSBIGOik09wdXNIZWFkAQE4AYC7AAAAAAASVMNnQcJzcwEAAAAAAACXY8CAZ8gBAAAAAAAAFUWji01BSk9SX0JSQU5ERIeEaXNvbWfIAQAAAAAAABZFo41NSU5PUl9WRVJTSU9ORIeDNTEyZ8gBAAAAAAAAJ0WjkUNPTVBBVElCTEVfQlJBTkRTRIeQaXNvbWlzbzJhdmMxbXA0MWfIAQAAAAAAABpFo4dFTkNPREVSRIeNTGF2ZjU4LjQ1LjEwMHNzAQAAAAAAAIZjwItjxYj1SEir0QMk8GfIAQAAAAAAAB5Fo4xIQU5ETEVSX05BTUVEh4xWaWRlb0hhbmRsZXJnyAEAAAAAAAAhRaOHRU5DT0RFUkSHlExhdmM1OC45MS4xMDAgbGlidnB4Z8iiRaOIRFVSQVRJT05Eh5QwMDowMDowNS4wMDcwMDAwMDAAAHNzAQAAAAAAAIdjwItjxYhQRY8D0n+InmfIAQAAAAAAAB5Fo4xIQU5ETEVSX05BTUVEh4xTb3VuZEhhbmRsZXJnyAEAAAAAAAAiRaOHRU5DT0RFUkSHlUxhdmM1OC45MS4xMDAgbGlib3B1c2fIokWjiERVUkFUSU9ORIeUMDA6MDA6MDUuMDE4MDAwMDAwAAAfQ7Z1T2TngQCjh4IAAID4//6jQKSBAAeAMBIAnQEqQAHwAABHCIWFiIWEiAICAAYWBPcGgWSfa9ubJzh7Jzh7Jzh7Jzh7Jzh7Jzh7Jzh7Jzh7Jzh7Jzh7Jzh7Jzh7Jzh7Jzh7Jzh7Jzh7Jzh7Jzh7Jzh7Jzh7Jzh7Jzh7Jzh7Jzh7Jzh7Jzh7Jzh7Jzh7Jzh7Jzh7Jzh7Jzh7Jzh7Jzh7Jzh7Jzh7Jzh7Jzh7Jzh7Jzh69AD+/6tQgKOHggAVgPj//qOHggApgPj//qOHggA9gPj//qOHggBRgPj//qOHggBlgPj//qOegQBrANECAAUQrAAYABhYL/QACIAEM1+tck+ccwAAo4eCAHmA+P/+o4eCAI2A+P/+o4eCAKGA+P/+o4eCALWA+P/+o4eCAMmA+P/+o56BAM8A0QIABRCsABgAGFgv9AAIgAQzX61yT5xzAACjh4IA3YD4//6jh4IA8YD4//6jh4IBBYD4//6jh4IBGYD4//6jh4IBLYD4//6jnoEBMwDRAgAFEKwAGAAYWC/0AAiABDNfrXJPnHMAAKOHggFBgPj//qOHggFVgPj//qOHggFpgPj//qOHggF9gPj//qOHggGRgPj//qOegQGXANECAAUQrAAYABhYL/QACIAEM1+tck+ccwAAo4eCAaWA+P/+o4eCAbmA+P/+o4eCAc2A+P/+o4eCAeGA+P/+o4eCAfWA+P/+o56BAfsA0QIABRCsABgAGFgv9AAIgAQzX61yT5xzAACjh4ICCYD4//6jh4ICHYD4//6jh4ICMYD4//6jh4ICRYD4//6jh4ICWYD4//6jnoECXwDRAgAFEKwAGAAYWC/0AAiABDNfrXJPnHMAAKOHggJtgPj//qOHggKBgPj//qOHggKVgPj//qOHggKpgPj//qOHggK9gPj//qOegQLDANECAAUQEBRgAGFgv9AAIgAQzX61yT5xzAAAo4eCAtGA+P/+o4eCAuWA+P/+o4eCAvmA+P/+o4eCAw2A+P/+o4eCAyGA+P/+o56BAycA0QIABRCsABgAGFgv9AAIgAQzX61yT5xzAACjh4IDNYD4//6jh4IDSYD4//6jh4IDXYD4//6jh4IDcYD4//6jh4IDhYD4//6jnoEDiwDRAgAFEKwAGAAYWC/0AAiABDNfrXJPnHMAAKOHggOZgPj//qOHggOtgPj//qOHggPBgPj//qOHggPVgPj//qOHggPpgPj//qOegQPvANECAAUQrAAYABhYL/QACIAEM1+tck+ccwAAo4eCA/2A+P/+o4eCBBGA+P/+o4eCBCWA+P/+o4eCBDmA+P/+o4eCBE2A+P/+o56BBFMA0QIABRCsABgAGFgv9AAIgAQzX61yT5xzAACjh4IEiID4//6jh4IEnID4//6jh4IEsID4//6jnoEEtwDRAgAFEKwAGAAYWC/0AAiABDNfrXJPnHMAAKOHggTEgPj//qOHggTYgPj//qOHggTsgPj//qOHggUAgPj//qOHggUUgPj//qOegQUbANECAAUQrAAYABhYL/QACIAEM1+tck+ccwAAo4eCBSiA+P/+o4eCBTyA+P/+o4eCBVCA+P/+o4eCBWSA+P/+o4eCBXiA+P/+o56BBX8A0QIABRCsABgAGFgv9AAIgAQzX61yT5xzAACjh4IFjID4//6jh4IFoID4//6jh4IFtID4//6jh4IFyID4//6jh4IF3ID4//6jnoEF4wDRAgAFEKwAGAAYWC/0AAiABDNfrXJPnHMAAKOHggXwgPj//qOHggYEgPj//qOHggYYgPj//qOHggYsgPj//qOHggZAgPj//qOegQZHANECAAUQrAAYABhYL/QACIAEM1+tck+ccwAAo4eCBlSA+P/+o4eCBmiA+P/+o4eCBnyA+P/+o4eCBpCA+P/+o4eCBqSA+P/+o56BBqsA0QIABRCsABgAGFgv9AAIgAQzX61yT5xzAACjh4IGuID4//6jh4IGzID4//6jh4IG4ID4//6jh4IG9ID4//6jh4IHCID4//6jnoEHDwDRAgAFEBAUYABhYL/QACIAEM1+tck+ccwAAKOHggccgPj//qOHggcwgPj//qOHggdEgPj//qOHggdYgPj//qOHggdsgPj//qOegQdzANECAAUQrAAYABhYL/QACIAEM1+tck+ccwAAo4eCB4CA+P/+o4eCB5SA+P/+o4eCB6iA+P/+o4eCB7yA+P/+o4eCB9CA+P/+o56BB9cA0QIABRCsABgAGFgv9AAIgAQzX61yT5xzAACjh4IH5ID4//6jh4IH+ID4//6jh4IIDID4//6jh4IIIID4//6jh4IINID4//6jnoEIOwDRAgAFEKwAGAAYWC/0AAiABDNfrXJPnHMAAKOHgghIgPj//qOHgghcgPj//qOHgghwgPj//qOHggiEgPj//qOegQifANECAAUQrAAYABhYL/QACIAEM1+tck+ccwAAo4eCCMCA+P/+o4eCCNSA+P/+o4eCCOiA+P/+o4eCCPyA+P/+o56BCQMA0QIABRCsABgAGFgv9AAIgAQzX61yT5xzAACjh4IJEID4//6jh4IJJID4//6jh4IJOID4//6jh4IJTID4//6jh4IJYID4//6jnoEJZwDRAgAFEKwAGAAYWC/0AAiABDNfrXJPnHMAAKOHggl0gPj//qOHggmIgPj//qOHggmcgPj//qOHggmwgPj//qOHggnEgPj//qOegQnLANECAAUQrAAYABhYL/QACIAEM1+tck+ccwAAo4eCCdiA+P/+o4eCCeyA+P/+o4eCCgCA+P/+o4eCChSA+P/+o4eCCiiA+P/+o56BCi8A0QIABRCsABgAGFgv9AAIgAQzX61yT5xzAACjh4IKPID4//6jh4IKUID4//6jh4IKZID4//6jh4IKeID4//6jh4IKjID4//6jnoEKkwDRAgAFEKwAGAAYWC/0AAiABDNfrXJPnHMAAKOHggqggPj//qOHggq0gPj//qOHggrIgPj//qOHggrcgPj//qOHggrwgPj//qOegQr3ANECAAUQrAAYABhYL/QACIAEM1+tck+ccwAAo4eCCwSA+P/+o4eCCxiA+P/+o4eCCyyA+P/+o4eCC0CA+P/+o4eCC1SA+P/+o56BC1sA0QIABRAQFGAAYWC/0AAiABDNfrXJPnHMAACjh4ILaID4//6jh4ILfID4//6jh4ILkID4//6jh4ILpID4//6jh4ILuID4//6jnoELvwDRAgAFEKwAGAAYWC/0AAiABDNfrXJPnHMAAKOHggvMgPj//qOHggvggPj//qOHggv0gPj//qOHggwIgPj//qOHggwcgPj//qOegQwjANECAAUQrAAYABhYL/QACIAEM1+tck+ccwAAo4eCDDCA+P/+o4eCDESA+P/+o4eCDFiA+P/+o4eCDGyA+P/+o4eCDICA+P/+o56BDIcA0QIABRCsABgAGFgv9AAIgAQzX61yT5xzAACjh4IMlID4//6jh4IMqID4//6jh4IMvID4//6jh4IM0ID4//6jnoEM6wDRAgAFEKwAGAAYWC/0AAiABDNfrXJPnHMAAKOHgg0MgPj//qOHgg0ggPj//qOHgg00gPj//qOHgg1IgPj//qOegQ1PANECAAUQrAAYABhYL/QACIAEM1+tck+ccwAAo4eCDVyA+P/+o4eCDXCA+P/+o4eCDYSA+P/+o4eCDZiA+P/+o4eCDayA+P/+o56BDbMA0QIABRCsABgAGFgv9AAIgAQzX61yT5xzAACjh4INwID4//6jh4IN1ID4//6jh4IN6ID4//6jh4IN/ID4//6jh4IOEID4//6jnoEOFwDRAgAFEKwAGAAYWC/0AAiABDNfrXJPnHMAAKOHgg4kgPj//qOHgg44gPj//qOHgg5MgPj//qOHgg5ggPj//qOHgg50gPj//qOegQ57ANECAAUQrAAYABhYL/QACIAEM1+tck+ccwAAo4eCDoiA+P/+o4eCDpyA+P/+o4eCDrCA+P/+o4eCDsSA+P/+o4eCDtiA+P/+o56BDt8A0QIABRCsABgAGFgv9AAIgAQzX61yT5xzAACjh4IO7ID4//6jh4IPAID4//6jh4IPFID4//6jh4IPKID4//6jh4IPPID4//6jnoEPQwDRAgAFEKwAGAAYWC/0AAiABDNfrXJPnHMAAKOHgg9QgPj//qOHgg9kgPj//qOHgg94gPj//qOHgg+MgPj//qOHgg+ggPj//qOegQ+nANECAAUQEBRgAGFgv9AAIgAQzX61yT5xzAAAo4eCD7SA+P/+o4eCD8iA+P/+o4eCD9yA+P/+o4eCD/CA+P/+o4eCEASA+P/+o56BEAsA0QIABRCsABgAGFgv9AAIgAQzX61yT5xzAACjh4IQGID4//6jh4IQLID4//6jh4IQQID4//6jh4IQVID4//6jh4IQaID4//6jnoEQbwDRAgAFEKwAGAAYWC/0AAiABDNfrXJPnHMAAKOHghB8gPj//qOHghCQgPj//qOHghCkgPj//qOHghC4gPj//qOHghDMgPj//qOegRDTANECAAUQrAAYABhYL/QACIAEM1+tck+ccwAAo4eCEOCA+P/+o4eCEPSA+P/+o4eCEQiA+P/+o56BETcA0QIABRCsABgAGFgv9AAIgAQzX61yT5xzAACjh4IRQ4D4//6jh4IRV4D4//6jh4IRa4D4//6jh4IRf4D4//6jh4IRk4D4//6jnoERmwDRAgAFEKwAGAAYWC/0AAiABDNfrXJPnHMAAKOHghGngPj//qOHghG7gPj//qOHghHPgPj//qOHghHjgPj//qOHghH3gPj//qOegRH/ANECAAUQrAAYABhYL/QACIAEM1+tck+ccwAAo4eCEguA+P/+o4eCEh+A+P/+o4eCEjOA+P/+o4eCEkeA+P/+o4eCEluA+P/+o56BEmMA0QIABRCsABgAGFgv9AAIgAQzX61yT5xzAACjh4ISb4D4//6jh4ISg4D4//6jh4ISl4D4//6jh4ISq4D4//6jh4ISv4D4//6jnoESxwDRAgAFEKwAGAAYWC/0AAiABDNfrXJPnHMAAKOHghLTgPj//qOHghLngPj//qOHghL7gPj//qOHghMPgPj//qOHghMjgPj//qOegRMrANECAAUQrAAYABhYL/QACIAEM1+tck+ccwAAo4eCEzeA+P/+o4eCE0uA+P/+o4eCE1+A+P/+o4eCE3OA+P/+oAEAAAAAAAAPoYeCE4cA+P/+daKDB/KBHFO7a5G7j7OBB7eK94EB8YIDX/CBDA==",
        L = () => "wakeLock" in navigator && window.navigator.userAgent.indexOf("Samsung") === -1;

    class O {
        constructor() {
            if (L()) {
                NP_DEBUG("keepScreenOn native implementation"), this._wakeLock = null;
                const K = () => {
                    this._wakeLock !== null && document.visibilityState === "visible" && this.enable()
                };
                document.addEventListener("visibilitychange", K), document.addEventListener("fullscreenchange", K)
            } else NP_DEBUG("keepScreenOn simulation implementation"), this.noSleepVideo = document.createElement("video"), this.noSleepVideo.setAttribute("playsinline", ""), this._addSourceToVideo(this.noSleepVideo, "webm", N), this._addSourceToVideo(this.noSleepVideo, "mp4", B), Object.assign(this.noSleepVideo.style, {
                position: "absolute",
                left: "-100%",
                top: "-100%"
            }), this.noSleepVideo.addEventListener("timeupdate", () => {
                this.noSleepVideo.currentTime > 4 && (this.noSleepVideo.currentTime = 1)
            })
        }

        _addSourceToVideo(K, Pe, Oe) {
            var Ue = document.createElement("source");
            Ue.src = Oe, Ue.type = `video/${Pe}`, K.appendChild(Ue)
        }

        enable() {
            if (L()) return navigator.wakeLock.request("screen").then(K => {
                this._wakeLock = K, NP_DEBUG("Wake Lock active."), this._wakeLock.addEventListener("release", () => {
                    NP_DEBUG("Wake Lock released.")
                })
            }).catch(K => {
                NP_DEBUG(`${K.name}, ${K.message}`)
            });
            document.querySelector("body").append(this.noSleepVideo), this.noSleepVideo.play()
        }

        disable() {
            if (L()) this._wakeLock && this._wakeLock.release(), this._wakeLock = null; else {
                this.noSleepVideo.pause();
                try {
                    this.noSleepVideo.parentNode && this.noSleepVideo.parentNode.removeChild(this.noSleepVideo)
                } catch {
                    NP_DEBUG("Did not unmount video - likely nosleep was never enabled")
                }
            }
        }
    }

    function D() {
        this._events = this._events || {}, this._maxListeners = this._maxListeners || void 0
    }

    D.EventEmitter = D, D.prototype._events = void 0, D.prototype._maxListeners = void 0, D.defaultMaxListeners = 10, D.prototype.setMaxListeners = function (xt) {
        if (!F(xt) || xt < 0 || isNaN(xt)) throw TypeError("n must be a positive number");
        return this._maxListeners = xt, this
    }, D.prototype.emit = function (xt) {
        var K, Pe, Oe, Ue, Ke, mt;
        if (this._events || (this._events = {}), xt === "error" && (!this._events.error || _e(this._events.error) && !this._events.error.length)) {
            if (K = arguments[1], K instanceof Error) throw K;
            var Tt = new Error('Uncaught, unspecified "error" event. (' + K + ")");
            throw Tt.context = K, Tt
        }
        if (Pe = this._events[xt], Y(Pe)) return !1;
        if (z(Pe)) switch (arguments.length) {
            case 1:
                Pe.call(this);
                break;
            case 2:
                Pe.call(this, arguments[1]);
                break;
            case 3:
                Pe.call(this, arguments[1], arguments[2]);
                break;
            default:
                Ue = Array.prototype.slice.call(arguments, 1), Pe.apply(this, Ue)
        } else if (_e(Pe)) for (Ue = Array.prototype.slice.call(arguments, 1), mt = Pe.slice(), Oe = mt.length, Ke = 0; Ke < Oe; Ke++) mt[Ke].apply(this, Ue);
        return !0
    }, D.prototype.addListener = function (xt, K) {
        var Pe;
        if (!z(K)) throw TypeError("listener must be a function");
        return this._events || (this._events = {}), this._events.newListener && this.emit("newListener", xt, z(K.listener) ? K.listener : K), this._events[xt] ? _e(this._events[xt]) ? this._events[xt].push(K) : this._events[xt] = [this._events[xt], K] : this._events[xt] = K, _e(this._events[xt]) && !this._events[xt].warned && (Y(this._maxListeners) ? Pe = D.defaultMaxListeners : Pe = this._maxListeners, Pe && Pe > 0 && this._events[xt].length > Pe && (this._events[xt].warned = !0, console.error("(node) warning: possible EventEmitter memory leak detected. %d listeners added. Use emitter.setMaxListeners() to increase limit.", this._events[xt].length), typeof console.trace == "function" && console.trace())), this
    }, D.prototype.on = D.prototype.addListener, D.prototype.once = function (xt, K) {
        if (!z(K)) throw TypeError("listener must be a function");
        var Pe = !1;

        function Oe() {
            this.removeListener(xt, Oe), Pe || (Pe = !0, K.apply(this, arguments))
        }

        return Oe.listener = K, this.on(xt, Oe), this
    }, D.prototype.removeListener = function (xt, K) {
        var Pe, Oe, Ue, Ke;
        if (!z(K)) throw TypeError("listener must be a function");
        if (!this._events || !this._events[xt]) return this;
        if (Pe = this._events[xt], Ue = Pe.length, Oe = -1, Pe === K || z(Pe.listener) && Pe.listener === K) delete this._events[xt], this._events.removeListener && this.emit("removeListener", xt, K); else if (_e(Pe)) {
            for (Ke = Ue; Ke-- > 0;) if (Pe[Ke] === K || Pe[Ke].listener && Pe[Ke].listener === K) {
                Oe = Ke;
                break
            }
            if (Oe < 0) return this;
            Pe.length === 1 ? (Pe.length = 0, delete this._events[xt]) : Pe.splice(Oe, 1), this._events.removeListener && this.emit("removeListener", xt, K)
        }
        return this
    }, D.prototype.removeAllListeners = function (xt) {
        var K, Pe;
        if (!this._events) return this;
        if (!this._events.removeListener) return arguments.length === 0 ? this._events = {} : this._events[xt] && delete this._events[xt], this;
        if (arguments.length === 0) {
            for (K in this._events) K !== "removeListener" && this.removeAllListeners(K);
            return this.removeAllListeners("removeListener"), this._events = {}, this
        }
        if (Pe = this._events[xt], z(Pe)) this.removeListener(xt, Pe); else if (Pe) for (; Pe.length;) this.removeListener(xt, Pe[Pe.length - 1]);
        return delete this._events[xt], this
    }, D.prototype.listeners = function (xt) {
        var K;
        return !this._events || !this._events[xt] ? K = [] : z(this._events[xt]) ? K = [this._events[xt]] : K = this._events[xt].slice(), K
    }, D.prototype.listenerCount = function (xt) {
        if (this._events) {
            var K = this._events[xt];
            if (z(K)) return 1;
            if (K) return K.length
        }
        return 0
    }, D.listenerCount = function (xt, K) {
        return xt.listenerCount(K)
    };

    function z(xt) {
        return typeof xt == "function"
    }

    function F(xt) {
        return typeof xt == "number"
    }

    function _e(xt) {
        return typeof xt == "object" && xt !== null
    }

    function Y(xt) {
        return xt === void 0
    }

    class H {
        static e(K, Pe) {
            (!K || H.FORCE_GLOBAL_TAG) && (K = H.GLOBAL_TAG);
            let Oe = `[${K}] > ${Pe}`;
            H.ENABLE_CALLBACK && H.emitter.emit("log", "error", Oe), H.ENABLE_ERROR && (console.error ? console.error(Oe) : console.warn ? console.warn(Oe) : console.log(Oe))
        }

        static i(K, Pe) {
            (!K || H.FORCE_GLOBAL_TAG) && (K = H.GLOBAL_TAG);
            let Oe = `[${K}] > ${Pe}`;
            H.ENABLE_CALLBACK && H.emitter.emit("log", "info", Oe), H.ENABLE_INFO && (console.info ? console.info(Oe) : console.log(Oe))
        }

        static w(K, Pe) {
            (!K || H.FORCE_GLOBAL_TAG) && (K = H.GLOBAL_TAG);
            let Oe = `[${K}] > ${Pe}`;
            H.ENABLE_CALLBACK && H.emitter.emit("log", "warn", Oe), H.ENABLE_WARN && (console.warn ? console.warn(Oe) : console.log(Oe))
        }

        static d(K, Pe) {
            (!K || H.FORCE_GLOBAL_TAG) && (K = H.GLOBAL_TAG);
            let Oe = `[${K}] > ${Pe}`;
            H.ENABLE_CALLBACK && H.emitter.emit("log", "debug", Oe), H.ENABLE_DEBUG && (console.debug ? console.debug(Oe) : console.log(Oe))
        }

        static v(K, Pe) {
            (!K || H.FORCE_GLOBAL_TAG) && (K = H.GLOBAL_TAG);
            let Oe = `[${K}] > ${Pe}`;
            H.ENABLE_CALLBACK && H.emitter.emit("log", "verbose", Oe), H.ENABLE_VERBOSE && console.log(Oe)
        }
    }

    H.GLOBAL_TAG = "flv.js", H.FORCE_GLOBAL_TAG = !1, H.ENABLE_ERROR = !0, H.ENABLE_INFO = !0, H.ENABLE_WARN = !0, H.ENABLE_DEBUG = !0, H.ENABLE_VERBOSE = !0, H.ENABLE_CALLBACK = !1, H.emitter = new D;

    class me {
        constructor() {
            this._firstCheckpoint = 0, this._lastCheckpoint = 0, this._intervalBytes = 0, this._totalBytes = 0, this._lastSecondBytes = 0, self.performance && self.performance.now ? this._now = self.performance.now.bind(self.performance) : this._now = Date.now
        }

        reset() {
            this._firstCheckpoint = this._lastCheckpoint = 0, this._totalBytes = this._intervalBytes = 0, this._lastSecondBytes = 0
        }

        addBytes(K) {
            this._firstCheckpoint === 0 ? (this._firstCheckpoint = this._now(), this._lastCheckpoint = this._firstCheckpoint, this._intervalBytes += K, this._totalBytes += K) : this._now() - this._lastCheckpoint < 1e3 ? (this._intervalBytes += K, this._totalBytes += K) : (this._lastSecondBytes = this._intervalBytes, this._intervalBytes = K, this._totalBytes += K, this._lastCheckpoint = this._now())
        }

        get currentKBps() {
            this.addBytes(0);
            let K = (this._now() - this._lastCheckpoint) / 1e3;
            return K == 0 && (K = 1), this._intervalBytes / K / 1024
        }

        get lastSecondKBps() {
            return this.addBytes(0), this._lastSecondBytes !== 0 ? this._lastSecondBytes / 1024 : this._now() - this._lastCheckpoint >= 500 ? this.currentKBps : 0
        }

        get averageKBps() {
            let K = (this._now() - this._firstCheckpoint) / 1e3;
            return this._totalBytes / K / 1024
        }
    }

    class ce {
        constructor(K) {
            this._message = K
        }

        get name() {
            return "RuntimeException"
        }

        get message() {
            return this._message
        }

        toString() {
            return this.name + ": " + this.message
        }
    }

    class ie extends ce {
        constructor(K) {
            super(K)
        }

        get name() {
            return "IllegalStateException"
        }
    }

    class Be extends ce {
        constructor(K) {
            super(K)
        }

        get name() {
            return "InvalidArgumentException"
        }
    }

    class ve extends ce {
        constructor(K) {
            super(K)
        }

        get name() {
            return "NotImplementedException"
        }
    }

    const Re = {kIdle: 0, kConnecting: 1, kBuffering: 2, kError: 3, kComplete: 4}, Ce = {
        OK: "OK",
        EXCEPTION: "Exception",
        HTTP_STATUS_CODE_INVALID: "HttpStatusCodeInvalid",
        CONNECTING_TIMEOUT: "ConnectingTimeout",
        EARLY_EOF: "EarlyEof",
        UNRECOVERABLE_EARLY_EOF: "UnrecoverableEarlyEof"
    };

    class Ne {
        constructor(K) {
            this._type = K || "undefined", this._status = Re.kIdle, this._needStash = !1, this._onContentLengthKnown = null, this._onURLRedirect = null, this._onDataArrival = null, this._onError = null, this._onComplete = null
        }

        destroy() {
            this._status = Re.kIdle, this._onContentLengthKnown = null, this._onURLRedirect = null, this._onDataArrival = null, this._onError = null, this._onComplete = null
        }

        isWorking() {
            return this._status === Re.kConnecting || this._status === Re.kBuffering
        }

        get type() {
            return this._type
        }

        get status() {
            return this._status
        }

        get needStashBuffer() {
            return this._needStash
        }

        get onContentLengthKnown() {
            return this._onContentLengthKnown
        }

        set onContentLengthKnown(K) {
            this._onContentLengthKnown = K
        }

        get onURLRedirect() {
            return this._onURLRedirect
        }

        set onURLRedirect(K) {
            this._onURLRedirect = K
        }

        get onDataArrival() {
            return this._onDataArrival
        }

        set onDataArrival(K) {
            this._onDataArrival = K
        }

        get onError() {
            return this._onError
        }

        set onError(K) {
            this._onError = K
        }

        get onComplete() {
            return this._onComplete
        }

        set onComplete(K) {
            this._onComplete = K
        }

        open(K, Pe) {
            throw new ve("Unimplemented abstract function!")
        }

        abort() {
            throw new ve("Unimplemented abstract function!")
        }
    }

    let we = {};

    function Me() {
        let xt = self.navigator.userAgent.toLowerCase(),
            K = /(edge)\/([\w.]+)/.exec(xt) || /(opr)[\/]([\w.]+)/.exec(xt) || /(chrome)[ \/]([\w.]+)/.exec(xt) || /(iemobile)[\/]([\w.]+)/.exec(xt) || /(version)(applewebkit)[ \/]([\w.]+).*(safari)[ \/]([\w.]+)/.exec(xt) || /(webkit)[ \/]([\w.]+).*(version)[ \/]([\w.]+).*(safari)[ \/]([\w.]+)/.exec(xt) || /(webkit)[ \/]([\w.]+)/.exec(xt) || /(opera)(?:.*version|)[ \/]([\w.]+)/.exec(xt) || /(msie) ([\w.]+)/.exec(xt) || xt.indexOf("trident") >= 0 && /(rv)(?::| )([\w.]+)/.exec(xt) || xt.indexOf("compatible") < 0 && /(firefox)[ \/]([\w.]+)/.exec(xt) || [],
            Pe = /(ipad)/.exec(xt) || /(ipod)/.exec(xt) || /(windows phone)/.exec(xt) || /(iphone)/.exec(xt) || /(kindle)/.exec(xt) || /(android)/.exec(xt) || /(windows)/.exec(xt) || /(mac)/.exec(xt) || /(linux)/.exec(xt) || /(cros)/.exec(xt) || [],
            Oe = {
                browser: K[5] || K[3] || K[1] || "",
                version: K[2] || K[4] || "0",
                majorVersion: K[4] || K[2] || "0",
                platform: Pe[0] || ""
            }, Ue = {};
        if (Oe.browser) {
            Ue[Oe.browser] = !0;
            let Ke = Oe.majorVersion.split(".");
            Ue.version = {
                major: parseInt(Oe.majorVersion, 10),
                string: Oe.version
            }, Ke.length > 1 && (Ue.version.minor = parseInt(Ke[1], 10)), Ke.length > 2 && (Ue.version.build = parseInt(Ke[2], 10))
        }
        if (Oe.platform && (Ue[Oe.platform] = !0), (Ue.chrome || Ue.opr || Ue.safari) && (Ue.webkit = !0), Ue.rv || Ue.iemobile) {
            Ue.rv && delete Ue.rv;
            let Ke = "msie";
            Oe.browser = Ke, Ue[Ke] = !0
        }
        if (Ue.edge) {
            delete Ue.edge;
            let Ke = "msedge";
            Oe.browser = Ke, Ue[Ke] = !0
        }
        if (Ue.opr) {
            let Ke = "opera";
            Oe.browser = Ke, Ue[Ke] = !0
        }
        if (Ue.safari && Ue.android) {
            let Ke = "android";
            Oe.browser = Ke, Ue[Ke] = !0
        }
        Ue.name = Oe.browser, Ue.platform = Oe.platform;
        for (let Ke in we) we.hasOwnProperty(Ke) && delete we[Ke];
        Object.assign(we, Ue)
    }

    Me();

    class ke extends Ne {
        static isSupported() {
            try {
                let K = we.msedge && we.version.minor >= 15048, Pe = we.msedge ? K : !0;
                return self.fetch && self.ReadableStream && Pe
            } catch {
                return !1
            }
        }

        constructor(K, Pe) {
            super("fetch-stream-loader"), this.TAG = "FetchStreamLoader", this._seekHandler = K, this._config = Pe, this._needStash = !0, this._requestAbort = !1, this._contentLength = null, this._receivedLength = 0, this._reader = null
        }

        destroy() {
            this.isWorking() && this.abort(), super.destroy()
        }

        open(K, Pe) {
            let Oe = null;
            if (self.AbortController) {
                let jt = new self.AbortController;
                Oe = jt.signal, this._fetchAbortController = jt
            }
            this._dataSource = K, this._range = Pe;
            let Ue = K.url;
            this._config.reuseRedirectedURL && K.redirectedURL != null && (Ue = K.redirectedURL);
            let Ke = this._seekHandler.getConfig(Ue, Pe), mt = new self.Headers;
            if (typeof Ke.headers == "object") {
                let jt = Ke.headers;
                for (let ia in jt) jt.hasOwnProperty(ia) && mt.append(ia, jt[ia])
            }
            let Tt = {
                method: "GET",
                headers: mt,
                mode: "cors",
                cache: "default",
                referrerPolicy: "no-referrer-when-downgrade",
                signal: Oe
            };
            if (typeof this._config.headers == "object") for (let jt in this._config.headers) mt.append(jt, this._config.headers[jt]);
            K.cors === !1 && (Tt.mode = "same-origin"), K.withCredentials && (Tt.credentials = "include"), K.referrerPolicy && (Tt.referrerPolicy = K.referrerPolicy), this._status = Re.kConnecting, self.fetch(Ke.url, Tt).then(jt => {
                if (this._requestAbort) {
                    this._requestAbort = !1, this._status = Re.kIdle;
                    return
                }
                if (jt.ok && jt.status >= 200 && jt.status <= 299) {
                    if (jt.url !== Ke.url && this._onURLRedirect) {
                        let aa = this._seekHandler.removeURLParameters(jt.url);
                        this._onURLRedirect(aa)
                    }
                    let ia = jt.headers.get("Content-Length");
                    return ia != null && (this._contentLength = parseInt(ia), this._contentLength !== 0 && this._onContentLengthKnown && this._onContentLengthKnown(this._contentLength)), this._pump.call(this, jt.body.getReader())
                } else if (this._status = Re.kError, this._onError) this._onError(Ce.HTTP_STATUS_CODE_INVALID, {
                    code: jt.status,
                    msg: jt.statusText
                }); else throw new ce("FetchStreamLoader: Http code invalid, " + jt.status + " " + jt.statusText)
            }).catch(jt => {
                if (this._requestAbort) {
                    this._requestAbort = !1;
                    return
                }
                if (this._status = Re.kError, this._onError) this._onError(Ce.EXCEPTION, {
                    code: -1,
                    msg: jt.message
                }); else throw jt
            })
        }

        abort() {
            this._requestAbort = !0, this._fetchAbortController && this._fetchAbortController.abort()
        }

        _pump(K) {
            return K.read().then(Pe => {
                if (Pe.done) if (this._contentLength !== null && this._receivedLength < this._contentLength) {
                    this._status = Re.kError;
                    let Oe = Ce.EARLY_EOF, Ue = {code: -1, msg: "Fetch stream meet Early-EOF"};
                    if (this._onError) this._onError(Oe, Ue); else throw new ce(Ue.msg)
                } else this._status = Re.kComplete, this._onComplete && this._onComplete(this._range.from, this._range.from + this._receivedLength - 1); else {
                    if (this._requestAbort === !0) return this._requestAbort = !1, this._status = Re.kComplete, K.cancel();
                    this._status = Re.kBuffering;
                    let Oe = Pe.value.buffer, Ue = this._range.from + this._receivedLength;
                    this._receivedLength += Oe.byteLength, this._onDataArrival && this._onDataArrival(Oe, Ue, this._receivedLength), this._pump(K)
                }
            }).catch(Pe => {
                if (this._requestAbort) {
                    this._requestAbort = !1;
                    return
                }
                if (Pe.code === 11 && we.msedge) return;
                this._status = Re.kError;
                let Oe = 0, Ue = null;
                if ((Pe.code === 19 || Pe.message === "network error") && (this._contentLength === null || this._contentLength !== null && this._receivedLength < this._contentLength) ? (Oe = Ce.EARLY_EOF, Ue = {
                    code: Pe.code,
                    msg: "Fetch stream meet Early-EOF"
                }) : (Oe = Ce.EXCEPTION, Ue = {
                    code: Pe.code,
                    msg: Pe.message
                }), this._onError) this._onError(Oe, Ue); else throw new ce(Ue.msg)
            })
        }
    }

    class Fe extends Ne {
        static isSupported() {
            try {
                let K = new XMLHttpRequest;
                return K.open("GET", "https://example.com", !0), K.responseType = "moz-chunked-arraybuffer", K.responseType === "moz-chunked-arraybuffer"
            } catch (K) {
                return H.w("MozChunkedLoader", K.message), !1
            }
        }

        constructor(K, Pe) {
            super("xhr-moz-chunked-loader"), this.TAG = "MozChunkedLoader", this._seekHandler = K, this._config = Pe, this._needStash = !0, this._xhr = null, this._requestAbort = !1, this._contentLength = null, this._receivedLength = 0
        }

        destroy() {
            this.isWorking() && this.abort(), this._xhr && (this._xhr.onreadystatechange = null, this._xhr.onprogress = null, this._xhr.onloadend = null, this._xhr.onerror = null, this._xhr = null), super.destroy()
        }

        open(K, Pe) {
            this._dataSource = K, this._range = Pe;
            let Oe = K.url;
            this._config.reuseRedirectedURL && K.redirectedURL != null && (Oe = K.redirectedURL);
            let Ue = this._seekHandler.getConfig(Oe, Pe);
            this._requestURL = Ue.url;
            let Ke = this._xhr = new XMLHttpRequest;
            if (Ke.open("GET", Ue.url, !0), Ke.responseType = "moz-chunked-arraybuffer", Ke.onreadystatechange = this._onReadyStateChange.bind(this), Ke.onprogress = this._onProgress.bind(this), Ke.onloadend = this._onLoadEnd.bind(this), Ke.onerror = this._onXhrError.bind(this), K.withCredentials && (Ke.withCredentials = !0), typeof Ue.headers == "object") {
                let mt = Ue.headers;
                for (let Tt in mt) mt.hasOwnProperty(Tt) && Ke.setRequestHeader(Tt, mt[Tt])
            }
            if (typeof this._config.headers == "object") {
                let mt = this._config.headers;
                for (let Tt in mt) mt.hasOwnProperty(Tt) && Ke.setRequestHeader(Tt, mt[Tt])
            }
            this._status = Re.kConnecting, Ke.send()
        }

        abort() {
            this._requestAbort = !0, this._xhr && this._xhr.abort(), this._status = Re.kComplete
        }

        _onReadyStateChange(K) {
            let Pe = K.target;
            if (Pe.readyState === 2) {
                if (Pe.responseURL != null && Pe.responseURL !== this._requestURL && this._onURLRedirect) {
                    let Oe = this._seekHandler.removeURLParameters(Pe.responseURL);
                    this._onURLRedirect(Oe)
                }
                if (Pe.status !== 0 && (Pe.status < 200 || Pe.status > 299)) if (this._status = Re.kError, this._onError) this._onError(Ce.HTTP_STATUS_CODE_INVALID, {
                    code: Pe.status,
                    msg: Pe.statusText
                }); else throw new ce("MozChunkedLoader: Http code invalid, " + Pe.status + " " + Pe.statusText); else this._status = Re.kBuffering
            }
        }

        _onProgress(K) {
            if (this._status === Re.kError) return;
            this._contentLength === null && K.total !== null && K.total !== 0 && (this._contentLength = K.total, this._onContentLengthKnown && this._onContentLengthKnown(this._contentLength));
            let Pe = K.target.response, Oe = this._range.from + this._receivedLength;
            this._receivedLength += Pe.byteLength, this._onDataArrival && this._onDataArrival(Pe, Oe, this._receivedLength)
        }

        _onLoadEnd(K) {
            if (this._requestAbort === !0) {
                this._requestAbort = !1;
                return
            } else if (this._status === Re.kError) return;
            this._status = Re.kComplete, this._onComplete && this._onComplete(this._range.from, this._range.from + this._receivedLength - 1)
        }

        _onXhrError(K) {
            this._status = Re.kError;
            let Pe = 0, Oe = null;
            if (this._contentLength && K.loaded < this._contentLength ? (Pe = Ce.EARLY_EOF, Oe = {
                code: -1,
                msg: "Moz-Chunked stream meet Early-Eof"
            }) : (Pe = Ce.EXCEPTION, Oe = {
                code: -1,
                msg: K.constructor.name + " " + K.type
            }), this._onError) this._onError(Pe, Oe); else throw new ce(Oe.msg)
        }
    }

    class $e extends Ne {
        static isSupported() {
            try {
                let K = new XMLHttpRequest;
                return K.open("GET", "https://example.com", !0), K.responseType = "arraybuffer", K.responseType === "arraybuffer"
            } catch (K) {
                return H.w("RangeLoader", K.message), !1
            }
        }

        constructor(K, Pe) {
            super("xhr-range-loader"), this.TAG = "RangeLoader", this._seekHandler = K, this._config = Pe, this._needStash = !1, this._chunkSizeKBList = [128, 256, 384, 512, 768, 1024, 1536, 2048, 3072, 4096, 5120, 6144, 7168, 8192], this._currentChunkSizeKB = 384, this._currentSpeedNormalized = 0, this._zeroSpeedChunkCount = 0, this._xhr = null, this._speedSampler = new me, this._requestAbort = !1, this._waitForTotalLength = !1, this._totalLengthReceived = !1, this._currentRequestURL = null, this._currentRedirectedURL = null, this._currentRequestRange = null, this._totalLength = null, this._contentLength = null, this._receivedLength = 0, this._lastTimeLoaded = 0
        }

        destroy() {
            this.isWorking() && this.abort(), this._xhr && (this._xhr.onreadystatechange = null, this._xhr.onprogress = null, this._xhr.onload = null, this._xhr.onerror = null, this._xhr = null), super.destroy()
        }

        get currentSpeed() {
            return this._speedSampler.lastSecondKBps
        }

        open(K, Pe) {
            this._dataSource = K, this._range = Pe, this._status = Re.kConnecting;
            let Oe = !1;
            this._dataSource.filesize != null && this._dataSource.filesize !== 0 && (Oe = !0, this._totalLength = this._dataSource.filesize), !this._totalLengthReceived && !Oe ? (this._waitForTotalLength = !0, this._internalOpen(this._dataSource, {
                from: 0,
                to: -1
            })) : this._openSubRange()
        }

        _openSubRange() {
            let K = this._currentChunkSizeKB * 1024, Pe = this._range.from + this._receivedLength, Oe = Pe + K;
            this._contentLength != null && Oe - this._range.from >= this._contentLength && (Oe = this._range.from + this._contentLength - 1), this._currentRequestRange = {
                from: Pe,
                to: Oe
            }, this._internalOpen(this._dataSource, this._currentRequestRange)
        }

        _internalOpen(K, Pe) {
            this._lastTimeLoaded = 0;
            let Oe = K.url;
            this._config.reuseRedirectedURL && (this._currentRedirectedURL != null ? Oe = this._currentRedirectedURL : K.redirectedURL != null && (Oe = K.redirectedURL));
            let Ue = this._seekHandler.getConfig(Oe, Pe);
            this._currentRequestURL = Ue.url;
            let Ke = this._xhr = new XMLHttpRequest;
            if (Ke.open("GET", Ue.url, !0), Ke.responseType = "arraybuffer", Ke.onreadystatechange = this._onReadyStateChange.bind(this), Ke.onprogress = this._onProgress.bind(this), Ke.onload = this._onLoad.bind(this), Ke.onerror = this._onXhrError.bind(this), K.withCredentials && (Ke.withCredentials = !0), typeof Ue.headers == "object") {
                let mt = Ue.headers;
                for (let Tt in mt) mt.hasOwnProperty(Tt) && Ke.setRequestHeader(Tt, mt[Tt])
            }
            if (typeof this._config.headers == "object") {
                let mt = this._config.headers;
                for (let Tt in mt) mt.hasOwnProperty(Tt) && Ke.setRequestHeader(Tt, mt[Tt])
            }
            Ke.send()
        }

        abort() {
            this._requestAbort = !0, this._internalAbort(), this._status = Re.kComplete
        }

        _internalAbort() {
            this._xhr && (this._xhr.onreadystatechange = null, this._xhr.onprogress = null, this._xhr.onload = null, this._xhr.onerror = null, this._xhr.abort(), this._xhr = null)
        }

        _onReadyStateChange(K) {
            let Pe = K.target;
            if (Pe.readyState === 2) {
                if (Pe.responseURL != null) {
                    let Oe = this._seekHandler.removeURLParameters(Pe.responseURL);
                    Pe.responseURL !== this._currentRequestURL && Oe !== this._currentRedirectedURL && (this._currentRedirectedURL = Oe, this._onURLRedirect && this._onURLRedirect(Oe))
                }
                if (Pe.status >= 200 && Pe.status <= 299) {
                    if (this._waitForTotalLength) return;
                    this._status = Re.kBuffering
                } else if (this._status = Re.kError, this._onError) this._onError(Ce.HTTP_STATUS_CODE_INVALID, {
                    code: Pe.status,
                    msg: Pe.statusText
                }); else throw new ce("RangeLoader: Http code invalid, " + Pe.status + " " + Pe.statusText)
            }
        }

        _onProgress(K) {
            if (this._status === Re.kError) return;
            if (this._contentLength === null) {
                let Oe = !1;
                if (this._waitForTotalLength) {
                    this._waitForTotalLength = !1, this._totalLengthReceived = !0, Oe = !0;
                    let Ue = K.total;
                    this._internalAbort(), Ue != null & Ue !== 0 && (this._totalLength = Ue)
                }
                if (this._range.to === -1 ? this._contentLength = this._totalLength - this._range.from : this._contentLength = this._range.to - this._range.from + 1, Oe) {
                    this._openSubRange();
                    return
                }
                this._onContentLengthKnown && this._onContentLengthKnown(this._contentLength)
            }
            let Pe = K.loaded - this._lastTimeLoaded;
            this._lastTimeLoaded = K.loaded, this._speedSampler.addBytes(Pe)
        }

        _normalizeSpeed(K) {
            let Pe = this._chunkSizeKBList, Oe = Pe.length - 1, Ue = 0, Ke = 0, mt = Oe;
            if (K < Pe[0]) return Pe[0];
            for (; Ke <= mt;) {
                if (Ue = Ke + Math.floor((mt - Ke) / 2), Ue === Oe || K >= Pe[Ue] && K < Pe[Ue + 1]) return Pe[Ue];
                Pe[Ue] < K ? Ke = Ue + 1 : mt = Ue - 1
            }
        }

        _onLoad(K) {
            if (this._status === Re.kError) return;
            if (this._waitForTotalLength) {
                this._waitForTotalLength = !1;
                return
            }
            this._lastTimeLoaded = 0;
            let Pe = this._speedSampler.lastSecondKBps;
            if (Pe === 0 && (this._zeroSpeedChunkCount++, this._zeroSpeedChunkCount >= 3 && (Pe = this._speedSampler.currentKBps)), Pe !== 0) {
                let mt = this._normalizeSpeed(Pe);
                this._currentSpeedNormalized !== mt && (this._currentSpeedNormalized = mt, this._currentChunkSizeKB = mt)
            }
            let Oe = K.target.response, Ue = this._range.from + this._receivedLength;
            this._receivedLength += Oe.byteLength;
            let Ke = !1;
            this._contentLength != null && this._receivedLength < this._contentLength ? this._openSubRange() : Ke = !0, this._onDataArrival && this._onDataArrival(Oe, Ue, this._receivedLength), Ke && (this._status = Re.kComplete, this._onComplete && this._onComplete(this._range.from, this._range.from + this._receivedLength - 1))
        }

        _onXhrError(K) {
            this._status = Re.kError;
            let Pe = 0, Oe = null;
            if (this._contentLength && this._receivedLength > 0 && this._receivedLength < this._contentLength ? (Pe = Ce.EARLY_EOF, Oe = {
                code: -1,
                msg: "RangeLoader meet Early-Eof"
            }) : (Pe = Ce.EXCEPTION, Oe = {
                code: -1,
                msg: K.constructor.name + " " + K.type
            }), this._onError) this._onError(Pe, Oe); else throw new ce(Oe.msg)
        }
    }

    class Ve extends Ne {
        static isSupported() {
            try {
                return typeof self.WebSocket < "u"
            } catch {
                return !1
            }
        }

        constructor() {
            super("websocket-loader"), this.TAG = "WebSocketLoader", this._needStash = !0, this._ws = null, this._requestAbort = !1, this._receivedLength = 0
        }

        destroy() {
            this._ws && this.abort(), super.destroy()
        }

        open(K) {
            try {
                let Pe = this._ws = new self.WebSocket(K.url);
                Pe.binaryType = "arraybuffer", Pe.onopen = this._onWebSocketOpen.bind(this), Pe.onclose = this._onWebSocketClose.bind(this), Pe.onmessage = this._onWebSocketMessage.bind(this), Pe.onerror = this._onWebSocketError.bind(this), this._status = Re.kConnecting
            } catch (Pe) {
                this._status = Re.kError;
                let Oe = {code: Pe.code, msg: Pe.message};
                if (this._onError) this._onError(Ce.EXCEPTION, Oe); else throw new ce(Oe.msg)
            }
        }

        abort() {
            let K = this._ws;
            K && (K.readyState === 0 || K.readyState === 1) && (this._requestAbort = !0, K.close()), this._ws = null, this._status = Re.kComplete
        }

        _onWebSocketOpen(K) {
            this._status = Re.kBuffering
        }

        _onWebSocketClose(K) {
            if (this._requestAbort === !0) {
                this._requestAbort = !1;
                return
            }
            this._status = Re.kComplete, this._onComplete && this._onComplete(0, this._receivedLength - 1)
        }

        _onWebSocketMessage(K) {
            if (K.data instanceof ArrayBuffer) this._dispatchArrayBuffer(K.data); else if (K.data instanceof Blob) {
                let Pe = new FileReader;
                Pe.onload = () => {
                    this._dispatchArrayBuffer(Pe.result)
                }, Pe.readAsArrayBuffer(K.data)
            } else {
                this._status = Re.kError;
                let Pe = {code: -1, msg: "Unsupported WebSocket message type: " + K.data.constructor.name};
                if (this._onError) this._onError(Ce.EXCEPTION, Pe); else throw new ce(Pe.msg)
            }
        }

        _dispatchArrayBuffer(K) {
            let Pe = K, Oe = this._receivedLength;
            this._receivedLength += Pe.byteLength, this._onDataArrival && this._onDataArrival(Pe, Oe, this._receivedLength)
        }

        _onWebSocketError(K) {
            this._status = Re.kError;
            let Pe = {code: K.code, msg: K.message};
            if (this._onError) this._onError(Ce.EXCEPTION, Pe); else throw new ce(Pe.msg)
        }
    }

    class Je {
        constructor(K) {
            this._zeroStart = K || !1
        }

        getConfig(K, Pe) {
            let Oe = {};
            if (Pe.from !== 0 || Pe.to !== -1) {
                let Ue;
                Pe.to !== -1 ? Ue = `bytes=${Pe.from.toString()}-${Pe.to.toString()}` : Ue = `bytes=${Pe.from.toString()}-`, Oe.Range = Ue
            } else this._zeroStart && (Oe.Range = "bytes=0-");
            return {url: K, headers: Oe}
        }

        removeURLParameters(K) {
            return K
        }
    }

    class Qe {
        constructor(K, Pe) {
            this._startName = K, this._endName = Pe
        }

        getConfig(K, Pe) {
            let Oe = K;
            if (Pe.from !== 0 || Pe.to !== -1) {
                let Ue = !0;
                Oe.indexOf("?") === -1 && (Oe += "?", Ue = !1), Ue && (Oe += "&"), Oe += `${this._startName}=${Pe.from.toString()}`, Pe.to !== -1 && (Oe += `&${this._endName}=${Pe.to.toString()}`)
            }
            return {url: Oe, headers: {}}
        }

        removeURLParameters(K) {
            let Pe = K.split("?")[0], Oe, Ue = K.indexOf("?");
            Ue !== -1 && (Oe = K.substring(Ue + 1));
            let Ke = "";
            if (Oe != null && Oe.length > 0) {
                let mt = Oe.split("&");
                for (let Tt = 0; Tt < mt.length; Tt++) {
                    let jt = mt[Tt].split("="), ia = Tt > 0;
                    jt[0] !== this._startName && jt[0] !== this._endName && (ia && (Ke += "&"), Ke += mt[Tt])
                }
            }
            return Ke.length === 0 ? Pe : Pe + "?" + Ke
        }
    }

    class Ze {
        constructor(K, Pe, Oe) {
            this.TAG = "IOController", this._config = Pe, this._extraData = Oe, this._stashInitialSize = 1024 * 384, Pe.stashInitialSize != null && Pe.stashInitialSize > 0 && (this._stashInitialSize = Pe.stashInitialSize), this._stashUsed = 0, this._stashSize = this._stashInitialSize, this._bufferSize = 1024 * 1024 * 3, this._stashBuffer = new ArrayBuffer(this._bufferSize), this._stashByteStart = 0, this._enableStash = !0, Pe.enableStashBuffer === !1 && (this._enableStash = !1), this._loader = null, this._loaderClass = null, this._seekHandler = null, this._dataSource = K, this._isWebSocketURL = /wss?:\/\/(.+?)/.test(K.url), this._refTotalLength = K.filesize ? K.filesize : null, this._totalLength = this._refTotalLength, this._fullRequestFlag = !1, this._currentRange = null, this._redirectedURL = null, this._speedNormalized = 0, this._speedSampler = new me, this._speedNormalizeList = [64, 128, 256, 384, 512, 768, 1024, 1536, 2048, 3072, 4096], this._isEarlyEofReconnecting = !1, this._paused = !1, this._resumeFrom = 0, this._onDataArrival = null, this._onSeeked = null, this._onError = null, this._onComplete = null, this._onRedirect = null, this._onRecoveredEarlyEof = null, this._selectSeekHandler(), this._selectLoader(), this._createLoader()
        }

        destroy() {
            this._loader.isWorking() && this._loader.abort(), this._loader.destroy(), this._loader = null, this._loaderClass = null, this._dataSource = null, this._stashBuffer = null, this._stashUsed = this._stashSize = this._bufferSize = this._stashByteStart = 0, this._currentRange = null, this._speedSampler = null, this._isEarlyEofReconnecting = !1, this._onDataArrival = null, this._onSeeked = null, this._onError = null, this._onComplete = null, this._onRedirect = null, this._onRecoveredEarlyEof = null, this._extraData = null
        }

        isWorking() {
            return this._loader && this._loader.isWorking() && !this._paused
        }

        isPaused() {
            return this._paused
        }

        get status() {
            return this._loader.status
        }

        get extraData() {
            return this._extraData
        }

        set extraData(K) {
            this._extraData = K
        }

        get onDataArrival() {
            return this._onDataArrival
        }

        set onDataArrival(K) {
            this._onDataArrival = K
        }

        get onSeeked() {
            return this._onSeeked
        }

        set onSeeked(K) {
            this._onSeeked = K
        }

        get onError() {
            return this._onError
        }

        set onError(K) {
            this._onError = K
        }

        get onComplete() {
            return this._onComplete
        }

        set onComplete(K) {
            this._onComplete = K
        }

        get onRedirect() {
            return this._onRedirect
        }

        set onRedirect(K) {
            this._onRedirect = K
        }

        get onRecoveredEarlyEof() {
            return this._onRecoveredEarlyEof
        }

        set onRecoveredEarlyEof(K) {
            this._onRecoveredEarlyEof = K
        }

        get currentURL() {
            return this._dataSource.url
        }

        get hasRedirect() {
            return this._redirectedURL != null || this._dataSource.redirectedURL != null
        }

        get currentRedirectedURL() {
            return this._redirectedURL || this._dataSource.redirectedURL
        }

        get currentSpeed() {
            return this._loaderClass === $e ? this._loader.currentSpeed : this._speedSampler.lastSecondKBps
        }

        get loaderType() {
            return this._loader.type
        }

        _selectSeekHandler() {
            let K = this._config;
            if (K.seekType === "range") this._seekHandler = new Je(this._config.rangeLoadZeroStart); else if (K.seekType === "param") {
                let Pe = K.seekParamStart || "bstart", Oe = K.seekParamEnd || "bend";
                this._seekHandler = new Qe(Pe, Oe)
            } else if (K.seekType === "custom") {
                if (typeof K.customSeekHandler != "function") throw new Be("Custom seekType specified in config but invalid customSeekHandler!");
                this._seekHandler = new K.customSeekHandler
            } else throw new Be(`Invalid seekType in config: ${K.seekType}`)
        }

        _selectLoader() {
            if (this._config.customLoader != null) this._loaderClass = this._config.customLoader; else if (this._isWebSocketURL) this._loaderClass = Ve; else if (ke.isSupported()) this._loaderClass = ke; else if (Fe.isSupported()) this._loaderClass = Fe; else if ($e.isSupported()) this._loaderClass = $e; else throw new ce("Your browser doesn't support xhr with arraybuffer responseType!")
        }

        _createLoader() {
            this._loader = new this._loaderClass(this._seekHandler, this._config), this._loader.needStashBuffer === !1 && (this._enableStash = !1), this._loader.onContentLengthKnown = this._onContentLengthKnown.bind(this), this._loader.onURLRedirect = this._onURLRedirect.bind(this), this._loader.onDataArrival = this._onLoaderChunkArrival.bind(this), this._loader.onComplete = this._onLoaderComplete.bind(this), this._loader.onError = this._onLoaderError.bind(this)
        }

        open(K) {
            this._currentRange = {
                from: 0,
                to: -1
            }, K && (this._currentRange.from = K), this._speedSampler.reset(), K || (this._fullRequestFlag = !0), this._loader.open(this._dataSource, Object.assign({}, this._currentRange))
        }

        abort() {
            this._loader.abort(), this._paused && (this._paused = !1, this._resumeFrom = 0)
        }

        pause() {
            this.isWorking() && (this._loader.abort(), this._stashUsed !== 0 ? (this._resumeFrom = this._stashByteStart, this._currentRange.to = this._stashByteStart - 1) : this._resumeFrom = this._currentRange.to + 1, this._stashUsed = 0, this._stashByteStart = 0, this._paused = !0)
        }

        resume() {
            if (this._paused) {
                this._paused = !1;
                let K = this._resumeFrom;
                this._resumeFrom = 0, this._internalSeek(K, !0)
            }
        }

        seek(K) {
            this._paused = !1, this._stashUsed = 0, this._stashByteStart = 0, this._internalSeek(K, !0)
        }

        _internalSeek(K, Pe) {
            this._loader.isWorking() && this._loader.abort(), this._flushStashBuffer(Pe), this._loader.destroy(), this._loader = null;
            let Oe = {from: K, to: -1};
            this._currentRange = {
                from: Oe.from,
                to: -1
            }, this._speedSampler.reset(), this._stashSize = this._stashInitialSize, this._createLoader(), this._loader.open(this._dataSource, Oe), this._onSeeked && this._onSeeked()
        }

        updateUrl(K) {
            if (!K || typeof K != "string" || K.length === 0) throw new Be("Url must be a non-empty string!");
            this._dataSource.url = K
        }

        _expandBuffer(K) {
            let Pe = this._stashSize;
            for (; Pe + 1024 * 1024 * 1 < K;) Pe *= 2;
            if (Pe += 1024 * 1024 * 1, Pe === this._bufferSize) return;
            let Oe = new ArrayBuffer(Pe);
            if (this._stashUsed > 0) {
                let Ue = new Uint8Array(this._stashBuffer, 0, this._stashUsed);
                new Uint8Array(Oe, 0, Pe).set(Ue, 0)
            }
            this._stashBuffer = Oe, this._bufferSize = Pe
        }

        _normalizeSpeed(K) {
            let Pe = this._speedNormalizeList, Oe = Pe.length - 1, Ue = 0, Ke = 0, mt = Oe;
            if (K < Pe[0]) return Pe[0];
            for (; Ke <= mt;) {
                if (Ue = Ke + Math.floor((mt - Ke) / 2), Ue === Oe || K >= Pe[Ue] && K < Pe[Ue + 1]) return Pe[Ue];
                Pe[Ue] < K ? Ke = Ue + 1 : mt = Ue - 1
            }
        }

        _adjustStashSize(K) {
            let Pe = 0;
            this._config.isLive || K < 512 ? Pe = K : K >= 512 && K <= 1024 ? Pe = Math.floor(K * 1.5) : Pe = K * 2, Pe > 8192 && (Pe = 8192);
            let Oe = Pe * 1024 + 1024 * 1024 * 1;
            this._bufferSize < Oe && this._expandBuffer(Oe), this._stashSize = Pe * 1024
        }

        _dispatchChunks(K, Pe) {
            return this._currentRange.to = Pe + K.byteLength - 1, this._onDataArrival(K, Pe)
        }

        _onURLRedirect(K) {
            this._redirectedURL = K, this._onRedirect && this._onRedirect(K)
        }

        _onContentLengthKnown(K) {
            K && this._fullRequestFlag && (this._totalLength = K, this._fullRequestFlag = !1)
        }

        _onLoaderChunkArrival(K, Pe, Oe) {
            if (!this._onDataArrival) throw new ie("IOController: No existing consumer (onDataArrival) callback!");
            if (this._paused) return;
            this._isEarlyEofReconnecting && (this._isEarlyEofReconnecting = !1, this._onRecoveredEarlyEof && this._onRecoveredEarlyEof()), this._speedSampler.addBytes(K.byteLength);
            let Ue = this._speedSampler.lastSecondKBps;
            if (Ue !== 0) {
                let Ke = this._normalizeSpeed(Ue);
                this._speedNormalized !== Ke && (this._speedNormalized = Ke, this._adjustStashSize(Ke))
            }
            if (this._enableStash) if (this._stashUsed === 0 && this._stashByteStart === 0 && (this._stashByteStart = Pe), this._stashUsed + K.byteLength <= this._stashSize) new Uint8Array(this._stashBuffer, 0, this._stashSize).set(new Uint8Array(K), this._stashUsed), this._stashUsed += K.byteLength; else {
                let Ke = new Uint8Array(this._stashBuffer, 0, this._bufferSize);
                if (this._stashUsed > 0) {
                    let mt = this._stashBuffer.slice(0, this._stashUsed),
                        Tt = this._dispatchChunks(mt, this._stashByteStart);
                    if (Tt < mt.byteLength) {
                        if (Tt > 0) {
                            let jt = new Uint8Array(mt, Tt);
                            Ke.set(jt, 0), this._stashUsed = jt.byteLength, this._stashByteStart += Tt
                        }
                    } else this._stashUsed = 0, this._stashByteStart += Tt;
                    this._stashUsed + K.byteLength > this._bufferSize && (this._expandBuffer(this._stashUsed + K.byteLength), Ke = new Uint8Array(this._stashBuffer, 0, this._bufferSize)), Ke.set(new Uint8Array(K), this._stashUsed), this._stashUsed += K.byteLength
                } else {
                    let mt = this._dispatchChunks(K, Pe);
                    if (mt < K.byteLength) {
                        let Tt = K.byteLength - mt;
                        Tt > this._bufferSize && (this._expandBuffer(Tt), Ke = new Uint8Array(this._stashBuffer, 0, this._bufferSize)), Ke.set(new Uint8Array(K, mt), 0), this._stashUsed += Tt, this._stashByteStart = Pe + mt
                    }
                }
            } else if (this._stashUsed === 0) {
                let Ke = this._dispatchChunks(K, Pe);
                if (Ke < K.byteLength) {
                    let mt = K.byteLength - Ke;
                    mt > this._bufferSize && this._expandBuffer(mt), new Uint8Array(this._stashBuffer, 0, this._bufferSize).set(new Uint8Array(K, Ke), 0), this._stashUsed += mt, this._stashByteStart = Pe + Ke
                }
            } else {
                this._stashUsed + K.byteLength > this._bufferSize && this._expandBuffer(this._stashUsed + K.byteLength);
                let Ke = new Uint8Array(this._stashBuffer, 0, this._bufferSize);
                Ke.set(new Uint8Array(K), this._stashUsed), this._stashUsed += K.byteLength;
                let mt = this._dispatchChunks(this._stashBuffer.slice(0, this._stashUsed), this._stashByteStart);
                if (mt < this._stashUsed && mt > 0) {
                    let Tt = new Uint8Array(this._stashBuffer, mt);
                    Ke.set(Tt, 0)
                }
                this._stashUsed -= mt, this._stashByteStart += mt
            }
        }

        _flushStashBuffer(K) {
            if (this._stashUsed > 0) {
                let Pe = this._stashBuffer.slice(0, this._stashUsed),
                    Oe = this._dispatchChunks(Pe, this._stashByteStart), Ue = Pe.byteLength - Oe;
                if (Oe < Pe.byteLength) if (K) H.w(this.TAG, `${Ue} bytes unconsumed data remain when flush buffer, dropped`); else {
                    if (Oe > 0) {
                        let Ke = new Uint8Array(this._stashBuffer, 0, this._bufferSize), mt = new Uint8Array(Pe, Oe);
                        Ke.set(mt, 0), this._stashUsed = mt.byteLength, this._stashByteStart += Oe
                    }
                    return 0
                }
                return this._stashUsed = 0, this._stashByteStart = 0, Ue
            }
            return 0
        }

        _onLoaderComplete(K, Pe) {
            this._flushStashBuffer(!0), this._onComplete && this._onComplete(this._extraData)
        }

        _onLoaderError(K, Pe) {
            switch (H.e(this.TAG, `Loader error, code = ${Pe.code}, msg = ${Pe.msg}`), this._flushStashBuffer(!1), this._isEarlyEofReconnecting && (this._isEarlyEofReconnecting = !1, K = Ce.UNRECOVERABLE_EARLY_EOF), K) {
                case Ce.EARLY_EOF: {
                    if (!this._config.isLive && this._totalLength) {
                        let Oe = this._currentRange.to + 1;
                        Oe < this._totalLength && (H.w(this.TAG, "Connection lost, trying reconnect..."), this._isEarlyEofReconnecting = !0, this._internalSeek(Oe, !1));
                        return
                    }
                    K = Ce.UNRECOVERABLE_EARLY_EOF;
                    break
                }
            }
            if (this._onError) this._onError(K, Pe); else throw new ce("IOException: " + Pe.msg)
        }
    }

    const qe = {
        enableWorker: !1,
        enableStashBuffer: !0,
        stashInitialSize: void 0,
        isLive: !1,
        lazyLoad: !0,
        lazyLoadMaxDuration: 3 * 60,
        lazyLoadRecoverDuration: 30,
        deferLoadAfterSourceOpen: !0,
        autoCleanupMaxBackwardDuration: 3 * 60,
        autoCleanupMinBackwardDuration: 2 * 60,
        statisticsInfoReportInterval: 600,
        fixAudioTimestampGap: !0,
        accurateSeek: !1,
        seekType: "range",
        seekParamStart: "bstart",
        seekParamEnd: "bend",
        rangeLoadZeroStart: !1,
        customSeekHandler: void 0,
        reuseRedirectedURL: !1,
        headers: void 0,
        customLoader: void 0
    };

    function ze() {
        return Object.assign({}, qe)
    }

    class De {
        static supportMSEH264Playback() {
            return window.MediaSource && window.MediaSource.isTypeSupported('video/mp4; codecs="avc1.42E01E,mp4a.40.2"')
        }

        static supportNetworkStreamIO() {
            let K = new Ze({}, ze()), Pe = K.loaderType;
            return K.destroy(), Pe == "fetch-stream-loader" || Pe == "xhr-moz-chunked-loader"
        }

        static getNetworkLoaderTypeName() {
            let K = new Ze({}, ze()), Pe = K.loaderType;
            return K.destroy(), Pe
        }

        static supportNativeMediaPlayback(K) {
            De.videoElement == null && (De.videoElement = window.document.createElement("video"));
            let Pe = De.videoElement.canPlayType(K);
            return Pe === "probably" || Pe == "maybe"
        }
    }

    const Xe = {
        ERROR: "error",
        LOADING_COMPLETE: "loading_complete",
        RECOVERED_EARLY_EOF: "recovered_early_eof",
        MEDIA_INFO: "media_info",
        METADATA_ARRIVED: "metadata_arrived",
        SCRIPTDATA_ARRIVED: "scriptdata_arrived",
        STATISTICS_INFO: "statistics_info"
    };

    class He {
        static get forceGlobalTag() {
            return H.FORCE_GLOBAL_TAG
        }

        static set forceGlobalTag(K) {
            H.FORCE_GLOBAL_TAG = K, He._notifyChange()
        }

        static get globalTag() {
            return H.GLOBAL_TAG
        }

        static set globalTag(K) {
            H.GLOBAL_TAG = K, He._notifyChange()
        }

        static get enableAll() {
            return H.ENABLE_VERBOSE && H.ENABLE_DEBUG && H.ENABLE_INFO && H.ENABLE_WARN && H.ENABLE_ERROR
        }

        static set enableAll(K) {
            H.ENABLE_VERBOSE = K, H.ENABLE_DEBUG = K, H.ENABLE_INFO = K, H.ENABLE_WARN = K, H.ENABLE_ERROR = K, He._notifyChange()
        }

        static get enableDebug() {
            return H.ENABLE_DEBUG
        }

        static set enableDebug(K) {
            H.ENABLE_DEBUG = K, He._notifyChange()
        }

        static get enableVerbose() {
            return H.ENABLE_VERBOSE
        }

        static set enableVerbose(K) {
            H.ENABLE_VERBOSE = K, He._notifyChange()
        }

        static get enableInfo() {
            return H.ENABLE_INFO
        }

        static set enableInfo(K) {
            H.ENABLE_INFO = K, He._notifyChange()
        }

        static get enableWarn() {
            return H.ENABLE_WARN
        }

        static set enableWarn(K) {
            H.ENABLE_WARN = K, He._notifyChange()
        }

        static get enableError() {
            return H.ENABLE_ERROR
        }

        static set enableError(K) {
            H.ENABLE_ERROR = K, He._notifyChange()
        }

        static getConfig() {
            return {
                globalTag: H.GLOBAL_TAG,
                forceGlobalTag: H.FORCE_GLOBAL_TAG,
                enableVerbose: H.ENABLE_VERBOSE,
                enableDebug: H.ENABLE_DEBUG,
                enableInfo: H.ENABLE_INFO,
                enableWarn: H.ENABLE_WARN,
                enableError: H.ENABLE_ERROR,
                enableCallback: H.ENABLE_CALLBACK
            }
        }

        static applyConfig(K) {
            H.GLOBAL_TAG = K.globalTag, H.FORCE_GLOBAL_TAG = K.forceGlobalTag, H.ENABLE_VERBOSE = K.enableVerbose, H.ENABLE_DEBUG = K.enableDebug, H.ENABLE_INFO = K.enableInfo, H.ENABLE_WARN = K.enableWarn, H.ENABLE_ERROR = K.enableError, H.ENABLE_CALLBACK = K.enableCallback
        }

        static _notifyChange() {
            let K = He.emitter;
            if (K.listenerCount("change") > 0) {
                let Pe = He.getConfig();
                K.emit("change", Pe)
            }
        }

        static registerListener(K) {
            He.emitter.addListener("change", K)
        }

        static removeListener(K) {
            He.emitter.removeListener("change", K)
        }

        static addLogListener(K) {
            H.emitter.addListener("log", K), H.emitter.listenerCount("log") > 0 && (H.ENABLE_CALLBACK = !0, He._notifyChange())
        }

        static removeLogListener(K) {
            H.emitter.removeListener("log", K), H.emitter.listenerCount("log") === 0 && (H.ENABLE_CALLBACK = !1, He._notifyChange())
        }
    }

    He.emitter = new D;

    class Ge {
        constructor() {
            this.mimeType = null, this.duration = null, this.hasAudio = null, this.hasVideo = null, this.audioCodec = null, this.videoCodec = null, this.audioDataRate = null, this.videoDataRate = null, this.audioSampleRate = null, this.audioChannelCount = null, this.width = null, this.height = null, this.fps = null, this.profile = null, this.level = null, this.refFrames = null, this.chromaFormat = null, this.sarNum = null, this.sarDen = null, this.metadata = null, this.segments = null, this.segmentCount = null, this.hasKeyframesIndex = null, this.keyframesIndex = null
        }

        isComplete() {
            let K = this.hasAudio === !1 || this.hasAudio === !0 && this.audioCodec != null && this.audioSampleRate != null && this.audioChannelCount != null,
                Pe = this.hasVideo === !1 || this.hasVideo === !0 && this.videoCodec != null && this.width != null && this.height != null && this.fps != null && this.profile != null && this.level != null && this.refFrames != null && this.chromaFormat != null && this.sarNum != null && this.sarDen != null;
            return this.mimeType != null && this.duration != null && this.metadata != null && this.hasKeyframesIndex != null && K && Pe
        }

        isSeekable() {
            return this.hasKeyframesIndex === !0
        }

        getNearestKeyframe(K) {
            if (this.keyframesIndex == null) return null;
            let Pe = this.keyframesIndex, Oe = this._search(Pe.times, K);
            return {index: Oe, milliseconds: Pe.times[Oe], fileposition: Pe.filepositions[Oe]}
        }

        _search(K, Pe) {
            let Oe = 0, Ue = K.length - 1, Ke = 0, mt = 0, Tt = Ue;
            for (Pe < K[0] && (Oe = 0, mt = Tt + 1); mt <= Tt;) if (Ke = mt + Math.floor((Tt - mt) / 2), Ke === Ue || Pe >= K[Ke] && Pe < K[Ke + 1]) {
                Oe = Ke;
                break
            } else K[Ke] < Pe ? mt = Ke + 1 : Tt = Ke - 1;
            return Oe
        }
    }

    function Le(xt, K, Pe) {
        let Oe = xt;
        if (K + Pe < Oe.length) {
            for (; Pe--;) if ((Oe[++K] & 192) != 128) return !1;
            return !0
        } else return !1
    }

    function We(xt) {
        let K = [], Pe = xt, Oe = 0, Ue = xt.length;
        for (; Oe < Ue;) {
            if (Pe[Oe] < 128) {
                K.push(String.fromCharCode(Pe[Oe])), ++Oe;
                continue
            } else if (!(Pe[Oe] < 192)) {
                if (Pe[Oe] < 224) {
                    if (Le(Pe, Oe, 1)) {
                        let Ke = (Pe[Oe] & 31) << 6 | Pe[Oe + 1] & 63;
                        if (Ke >= 128) {
                            K.push(String.fromCharCode(Ke & 65535)), Oe += 2;
                            continue
                        }
                    }
                } else if (Pe[Oe] < 240) {
                    if (Le(Pe, Oe, 2)) {
                        let Ke = (Pe[Oe] & 15) << 12 | (Pe[Oe + 1] & 63) << 6 | Pe[Oe + 2] & 63;
                        if (Ke >= 2048 && (Ke & 63488) != 55296) {
                            K.push(String.fromCharCode(Ke & 65535)), Oe += 3;
                            continue
                        }
                    }
                } else if (Pe[Oe] < 248 && Le(Pe, Oe, 3)) {
                    let Ke = (Pe[Oe] & 7) << 18 | (Pe[Oe + 1] & 63) << 12 | (Pe[Oe + 2] & 63) << 6 | Pe[Oe + 3] & 63;
                    if (Ke > 65536 && Ke < 1114112) {
                        Ke -= 65536, K.push(String.fromCharCode(Ke >>> 10 | 55296)), K.push(String.fromCharCode(Ke & 1023 | 56320)), Oe += 4;
                        continue
                    }
                }
            }
            K.push(String.fromCharCode(65533)), ++Oe
        }
        return K.join("")
    }

    let dt = function () {
        let xt = new ArrayBuffer(2);
        return new DataView(xt).setInt16(0, 256, !0), new Int16Array(xt)[0] === 256
    }();

    class et {
        static parseScriptData(K, Pe, Oe) {
            let Ue = {};
            try {
                let Ke = et.parseValue(K, Pe, Oe), mt = et.parseValue(K, Pe + Ke.size, Oe - Ke.size);
                Ue[Ke.data] = mt.data
            } catch (Ke) {
                H.e("AMF", Ke.toString())
            }
            return Ue
        }

        static parseObject(K, Pe, Oe) {
            if (Oe < 3) throw new ie("Data not enough when parse ScriptDataObject");
            let Ue = et.parseString(K, Pe, Oe), Ke = et.parseValue(K, Pe + Ue.size, Oe - Ue.size), mt = Ke.objectEnd;
            return {data: {name: Ue.data, value: Ke.data}, size: Ue.size + Ke.size, objectEnd: mt}
        }

        static parseVariable(K, Pe, Oe) {
            return et.parseObject(K, Pe, Oe)
        }

        static parseString(K, Pe, Oe) {
            if (Oe < 2) throw new ie("Data not enough when parse String");
            let Ue = new DataView(K, Pe, Oe).getUint16(0, !dt), Ke;
            return Ue > 0 ? Ke = We(new Uint8Array(K, Pe + 2, Ue)) : Ke = "", {data: Ke, size: 2 + Ue}
        }

        static parseLongString(K, Pe, Oe) {
            if (Oe < 4) throw new ie("Data not enough when parse LongString");
            let Ue = new DataView(K, Pe, Oe).getUint32(0, !dt), Ke;
            return Ue > 0 ? Ke = We(new Uint8Array(K, Pe + 4, Ue)) : Ke = "", {data: Ke, size: 4 + Ue}
        }

        static parseDate(K, Pe, Oe) {
            if (Oe < 10) throw new ie("Data size invalid when parse Date");
            let Ue = new DataView(K, Pe, Oe), Ke = Ue.getFloat64(0, !dt);
            return Ke += Ue.getInt16(8, !dt) * 60 * 1e3, {data: new Date(Ke), size: 8 + 2}
        }

        static parseValue(K, Pe, Oe) {
            if (Oe < 1) throw new ie("Data not enough when parse Value");
            let Ue = new DataView(K, Pe, Oe), Ke = 1, mt = Ue.getUint8(0), Tt, jt = !1;
            try {
                switch (mt) {
                    case 0:
                        Tt = Ue.getFloat64(1, !dt), Ke += 8;
                        break;
                    case 1: {
                        Tt = !!Ue.getUint8(1), Ke += 1;
                        break
                    }
                    case 2: {
                        let ia = et.parseString(K, Pe + 1, Oe - 1);
                        Tt = ia.data, Ke += ia.size;
                        break
                    }
                    case 3: {
                        Tt = {};
                        let ia = 0;
                        for ((Ue.getUint32(Oe - 4, !dt) & 16777215) == 9 && (ia = 3); Ke < Oe - 4;) {
                            let aa = et.parseObject(K, Pe + Ke, Oe - Ke - ia);
                            if (aa.objectEnd) break;
                            Tt[aa.data.name] = aa.data.value, Ke += aa.size
                        }
                        Ke <= Oe - 3 && (Ue.getUint32(Ke - 1, !dt) & 16777215) === 9 && (Ke += 3);
                        break
                    }
                    case 8: {
                        Tt = {}, Ke += 4;
                        let ia = 0;
                        for ((Ue.getUint32(Oe - 4, !dt) & 16777215) == 9 && (ia = 3); Ke < Oe - 8;) {
                            let aa = et.parseVariable(K, Pe + Ke, Oe - Ke - ia);
                            if (aa.objectEnd) break;
                            Tt[aa.data.name] = aa.data.value, Ke += aa.size
                        }
                        Ke <= Oe - 3 && (Ue.getUint32(Ke - 1, !dt) & 16777215) === 9 && (Ke += 3);
                        break
                    }
                    case 9:
                        Tt = void 0, Ke = 1, jt = !0;
                        break;
                    case 10: {
                        Tt = [];
                        let ia = Ue.getUint32(1, !dt);
                        Ke += 4;
                        for (let aa = 0; aa < ia; aa++) {
                            let pa = et.parseValue(K, Pe + Ke, Oe - Ke);
                            Tt.push(pa.data), Ke += pa.size
                        }
                        break
                    }
                    case 11: {
                        let ia = et.parseDate(K, Pe + 1, Oe - 1);
                        Tt = ia.data, Ke += ia.size;
                        break
                    }
                    case 12: {
                        let ia = et.parseString(K, Pe + 1, Oe - 1);
                        Tt = ia.data, Ke += ia.size;
                        break
                    }
                    default:
                        Ke = Oe, H.w("AMF", "Unsupported AMF value type " + mt)
                }
            } catch (ia) {
                H.e("AMF", ia.toString())
            }
            return {data: Tt, size: Ke, objectEnd: jt}
        }
    }

    class nt {
        constructor(K) {
            this.TAG = "ExpGolomb", this._buffer = K, this._buffer_index = 0, this._total_bytes = K.byteLength, this._total_bits = K.byteLength * 8, this._current_word = 0, this._current_word_bits_left = 0
        }

        destroy() {
            this._buffer = null
        }

        _fillCurrentWord() {
            let K = this._total_bytes - this._buffer_index;
            if (K <= 0) throw new ie("ExpGolomb: _fillCurrentWord() but no bytes available");
            let Pe = Math.min(4, K), Oe = new Uint8Array(4);
            Oe.set(this._buffer.subarray(this._buffer_index, this._buffer_index + Pe)), this._current_word = new DataView(Oe.buffer).getUint32(0, !1), this._buffer_index += Pe, this._current_word_bits_left = Pe * 8
        }

        readBits(K) {
            if (K > 32) throw new Be("ExpGolomb: readBits() bits exceeded max 32bits!");
            if (K <= this._current_word_bits_left) {
                let mt = this._current_word >>> 32 - K;
                return this._current_word <<= K, this._current_word_bits_left -= K, mt
            }
            let Pe = this._current_word_bits_left ? this._current_word : 0;
            Pe = Pe >>> 32 - this._current_word_bits_left;
            let Oe = K - this._current_word_bits_left;
            this._fillCurrentWord();
            let Ue = Math.min(Oe, this._current_word_bits_left), Ke = this._current_word >>> 32 - Ue;
            return this._current_word <<= Ue, this._current_word_bits_left -= Ue, Pe = Pe << Ue | Ke, Pe
        }

        readBool() {
            return this.readBits(1) === 1
        }

        readByte() {
            return this.readBits(8)
        }

        _skipLeadingZero() {
            let K;
            for (K = 0; K < this._current_word_bits_left; K++) if (this._current_word & 2147483648 >>> K) return this._current_word <<= K, this._current_word_bits_left -= K, K;
            return this._fillCurrentWord(), K + this._skipLeadingZero()
        }

        readUEG() {
            let K = this._skipLeadingZero();
            return this.readBits(K + 1) - 1
        }

        readSEG() {
            let K = this.readUEG();
            return K & 1 ? K + 1 >>> 1 : -1 * (K >>> 1)
        }
    }

    class tt {
        static _ebsp2rbsp(K) {
            let Pe = K, Oe = Pe.byteLength, Ue = new Uint8Array(Oe), Ke = 0;
            for (let mt = 0; mt < Oe; mt++) mt >= 2 && Pe[mt] === 3 && Pe[mt - 1] === 0 && Pe[mt - 2] === 0 || (Ue[Ke] = Pe[mt], Ke++);
            return new Uint8Array(Ue.buffer, 0, Ke)
        }

        static parseSPS(K) {
            let Pe = tt._ebsp2rbsp(K), Oe = new nt(Pe);
            Oe.readByte();
            let Ue = Oe.readByte();
            Oe.readByte();
            let Ke = Oe.readByte();
            Oe.readUEG();
            let mt = tt.getProfileString(Ue), Tt = tt.getLevelString(Ke), jt = 1, ia = 420, aa = [0, 420, 422, 444],
                pa = 8;
            if ((Ue === 100 || Ue === 110 || Ue === 122 || Ue === 244 || Ue === 44 || Ue === 83 || Ue === 86 || Ue === 118 || Ue === 128 || Ue === 138 || Ue === 144) && (jt = Oe.readUEG(), jt === 3 && Oe.readBits(1), jt <= 3 && (ia = aa[jt]), pa = Oe.readUEG() + 8, Oe.readUEG(), Oe.readBits(1), Oe.readBool())) {
                let Xa = jt !== 3 ? 8 : 12;
                for (let Ya = 0; Ya < Xa; Ya++) Oe.readBool() && (Ya < 6 ? tt._skipScalingList(Oe, 16) : tt._skipScalingList(Oe, 64))
            }
            Oe.readUEG();
            let ma = Oe.readUEG();
            if (ma === 0) Oe.readUEG(); else if (ma === 1) {
                Oe.readBits(1), Oe.readSEG(), Oe.readSEG();
                let Xa = Oe.readUEG();
                for (let Ya = 0; Ya < Xa; Ya++) Oe.readSEG()
            }
            let ba = Oe.readUEG();
            Oe.readBits(1);
            let da = Oe.readUEG(), Gt = Oe.readUEG(), ra = Oe.readBits(1);
            ra === 0 && Oe.readBits(1), Oe.readBits(1);
            let Ca = 0, La = 0, xa = 0, Da = 0;
            Oe.readBool() && (Ca = Oe.readUEG(), La = Oe.readUEG(), xa = Oe.readUEG(), Da = Oe.readUEG());
            let Ba = 1, Na = 1, ka = 0, Wa = !0, Va = 0, $a = 0;
            if (Oe.readBool()) {
                if (Oe.readBool()) {
                    let Xa = Oe.readByte(), Ya = [1, 12, 10, 16, 40, 24, 20, 32, 80, 18, 15, 64, 160, 4, 3, 2],
                        rs = [1, 11, 11, 11, 33, 11, 11, 11, 33, 11, 11, 33, 99, 3, 2, 1];
                    Xa > 0 && Xa < 16 ? (Ba = Ya[Xa - 1], Na = rs[Xa - 1]) : Xa === 255 && (Ba = Oe.readByte() << 8 | Oe.readByte(), Na = Oe.readByte() << 8 | Oe.readByte())
                }
                if (Oe.readBool() && Oe.readBool(), Oe.readBool() && (Oe.readBits(4), Oe.readBool() && Oe.readBits(24)), Oe.readBool() && (Oe.readUEG(), Oe.readUEG()), Oe.readBool()) {
                    let Xa = Oe.readBits(32), Ya = Oe.readBits(32);
                    Wa = Oe.readBool(), Va = Ya, $a = Xa * 2, ka = Va / $a
                }
            }
            let qa = 1;
            (Ba !== 1 || Na !== 1) && (qa = Ba / Na);
            let Qa = 0, za = 0;
            if (jt === 0) Qa = 1, za = 2 - ra; else {
                let Xa = jt === 3 ? 1 : 2, Ya = jt === 1 ? 2 : 1;
                Qa = Xa, za = Ya * (2 - ra)
            }
            let Za = (da + 1) * 16, ts = (2 - ra) * ((Gt + 1) * 16);
            Za -= (Ca + La) * Qa, ts -= (xa + Da) * za;
            let ns = Math.ceil(Za * qa);
            return Oe.destroy(), Oe = null, {
                profile_string: mt,
                level_string: Tt,
                bit_depth: pa,
                ref_frames: ba,
                chroma_format: ia,
                chroma_format_string: tt.getChromaFormatString(ia),
                frame_rate: {fixed: Wa, fps: ka, fps_den: $a, fps_num: Va},
                sar_ratio: {width: Ba, height: Na},
                codec_size: {width: Za, height: ts},
                present_size: {width: ns, height: ts}
            }
        }

        static _skipScalingList(K, Pe) {
            let Oe = 8, Ue = 8, Ke = 0;
            for (let mt = 0; mt < Pe; mt++) Ue !== 0 && (Ke = K.readSEG(), Ue = (Oe + Ke + 256) % 256), Oe = Ue === 0 ? Oe : Ue
        }

        static getProfileString(K) {
            switch (K) {
                case 66:
                    return "Baseline";
                case 77:
                    return "Main";
                case 88:
                    return "Extended";
                case 100:
                    return "High";
                case 110:
                    return "High10";
                case 122:
                    return "High422";
                case 244:
                    return "High444";
                default:
                    return "Unknown"
            }
        }

        static getLevelString(K) {
            return (K / 10).toFixed(1)
        }

        static getChromaFormatString(K) {
            switch (K) {
                case 420:
                    return "4:2:0";
                case 422:
                    return "4:2:2";
                case 444:
                    return "4:4:4";
                default:
                    return "Unknown"
            }
        }
    }

    const lt = {
        OK: "OK",
        FORMAT_ERROR: "FormatError",
        FORMAT_UNSUPPORTED: "FormatUnsupported",
        CODEC_UNSUPPORTED: "CodecUnsupported"
    };

    function Bt(xt, K) {
        return xt[K] << 24 | xt[K + 1] << 16 | xt[K + 2] << 8 | xt[K + 3]
    }

    class kt {
        constructor(K, Pe) {
            this.TAG = "FLVDemuxer", this._config = Pe, this._onError = null, this._onMediaInfo = null, this._onMetaDataArrived = null, this._onScriptDataArrived = null, this._onTrackMetadata = null, this._onDataAvailable = null, this._dataOffset = K.dataOffset, this._firstParse = !0, this._dispatch = !1, this._hasAudio = K.hasAudioTrack, this._hasVideo = K.hasVideoTrack, this._hasAudioFlagOverrided = !1, this._hasVideoFlagOverrided = !1, this._audioInitialMetadataDispatched = !1, this._videoInitialMetadataDispatched = !1, this._mediaInfo = new Ge, this._mediaInfo.hasAudio = this._hasAudio, this._mediaInfo.hasVideo = this._hasVideo, this._metadata = null, this._audioMetadata = null, this._videoMetadata = null, this._naluLengthSize = 4, this._timestampBase = 0, this._timescale = 1e3, this._duration = 0, this._durationOverrided = !1, this._referenceFrameRate = {
                fixed: !0,
                fps: 23.976,
                fps_num: 23976,
                fps_den: 1e3
            }, this._flvSoundRateTable = [5500, 11025, 22050, 44100, 48e3], this._mpegSamplingRates = [96e3, 88200, 64e3, 48e3, 44100, 32e3, 24e3, 22050, 16e3, 12e3, 11025, 8e3, 7350], this._mpegAudioV10SampleRateTable = [44100, 48e3, 32e3, 0], this._mpegAudioV20SampleRateTable = [22050, 24e3, 16e3, 0], this._mpegAudioV25SampleRateTable = [11025, 12e3, 8e3, 0], this._mpegAudioL1BitRateTable = [0, 32, 64, 96, 128, 160, 192, 224, 256, 288, 320, 352, 384, 416, 448, -1], this._mpegAudioL2BitRateTable = [0, 32, 48, 56, 64, 80, 96, 112, 128, 160, 192, 224, 256, 320, 384, -1], this._mpegAudioL3BitRateTable = [0, 32, 40, 48, 56, 64, 80, 96, 112, 128, 160, 192, 224, 256, 320, -1], this._videoTrack = {
                type: "video",
                id: 1,
                sequenceNumber: 0,
                samples: [],
                length: 0
            }, this._audioTrack = {
                type: "audio",
                id: 2,
                sequenceNumber: 0,
                samples: [],
                length: 0
            }, this._littleEndian = function () {
                let Oe = new ArrayBuffer(2);
                return new DataView(Oe).setInt16(0, 256, !0), new Int16Array(Oe)[0] === 256
            }()
        }

        destroy() {
            this._mediaInfo = null, this._metadata = null, this._audioMetadata = null, this._videoMetadata = null, this._videoTrack = null, this._audioTrack = null, this._onError = null, this._onMediaInfo = null, this._onMetaDataArrived = null, this._onScriptDataArrived = null, this._onTrackMetadata = null, this._onDataAvailable = null
        }

        static probe(K) {
            let Pe = new Uint8Array(K), Oe = {match: !1};
            if (Pe[0] !== 70 || Pe[1] !== 76 || Pe[2] !== 86 || Pe[3] !== 1) return Oe;
            let Ue = (Pe[4] & 4) >>> 2 != 0, Ke = (Pe[4] & 1) != 0, mt = Bt(Pe, 5);
            return mt < 9 ? Oe : {match: !0, consumed: mt, dataOffset: mt, hasAudioTrack: Ue, hasVideoTrack: Ke}
        }

        bindDataSource(K) {
            return K.onDataArrival = this.parseChunks.bind(this), this
        }

        get onTrackMetadata() {
            return this._onTrackMetadata
        }

        set onTrackMetadata(K) {
            this._onTrackMetadata = K
        }

        get onMediaInfo() {
            return this._onMediaInfo
        }

        set onMediaInfo(K) {
            this._onMediaInfo = K
        }

        get onMetaDataArrived() {
            return this._onMetaDataArrived
        }

        set onMetaDataArrived(K) {
            this._onMetaDataArrived = K
        }

        get onScriptDataArrived() {
            return this._onScriptDataArrived
        }

        set onScriptDataArrived(K) {
            this._onScriptDataArrived = K
        }

        get onError() {
            return this._onError
        }

        set onError(K) {
            this._onError = K
        }

        get onDataAvailable() {
            return this._onDataAvailable
        }

        set onDataAvailable(K) {
            this._onDataAvailable = K
        }

        get timestampBase() {
            return this._timestampBase
        }

        set timestampBase(K) {
            this._timestampBase = K
        }

        get overridedDuration() {
            return this._duration
        }

        set overridedDuration(K) {
            this._durationOverrided = !0, this._duration = K, this._mediaInfo.duration = K
        }

        set overridedHasAudio(K) {
            this._hasAudioFlagOverrided = !0, this._hasAudio = K, this._mediaInfo.hasAudio = K
        }

        set overridedHasVideo(K) {
            this._hasVideoFlagOverrided = !0, this._hasVideo = K, this._mediaInfo.hasVideo = K
        }

        resetMediaInfo() {
            this._mediaInfo = new Ge
        }

        _isInitialMetadataDispatched() {
            return this._hasAudio && this._hasVideo ? this._audioInitialMetadataDispatched && this._videoInitialMetadataDispatched : this._hasAudio && !this._hasVideo ? this._audioInitialMetadataDispatched : !this._hasAudio && this._hasVideo ? this._videoInitialMetadataDispatched : !1
        }

        parseChunks(K, Pe) {
            if (!this._onError || !this._onMediaInfo || !this._onTrackMetadata || !this._onDataAvailable) throw new ie("Flv: onError & onMediaInfo & onTrackMetadata & onDataAvailable callback must be specified");
            let Oe = 0, Ue = this._littleEndian;
            if (Pe === 0) if (K.byteLength > 13) Oe = kt.probe(K).dataOffset; else return 0;
            for (this._firstParse && (this._firstParse = !1, Pe + Oe !== this._dataOffset && H.w(this.TAG, "First time parsing but chunk byteStart invalid!"), new DataView(K, Oe).getUint32(0, !Ue) !== 0 && H.w(this.TAG, "PrevTagSize0 !== 0 !!!"), Oe += 4); Oe < K.byteLength;) {
                this._dispatch = !0;
                let Ke = new DataView(K, Oe);
                if (Oe + 11 + 4 > K.byteLength) break;
                let mt = Ke.getUint8(0), Tt = Ke.getUint32(0, !Ue) & 16777215;
                if (Oe + 11 + Tt + 4 > K.byteLength) break;
                if (mt !== 8 && mt !== 9 && mt !== 18) {
                    H.w(this.TAG, `Unsupported tag type ${mt}, skipped`), Oe += 11 + Tt + 4;
                    continue
                }
                let jt = Ke.getUint8(4), ia = Ke.getUint8(5), aa = Ke.getUint8(6), pa = Ke.getUint8(7),
                    ma = aa | ia << 8 | jt << 16 | pa << 24;
                Ke.getUint32(7, !Ue) & 16777215 && H.w(this.TAG, "Meet tag which has StreamID != 0!");
                let ba = Oe + 11;
                switch (mt) {
                    case 8:
                        this._parseAudioData(K, ba, Tt, ma);
                        break;
                    case 9:
                        this._parseVideoData(K, ba, Tt, ma, Pe + Oe);
                        break;
                    case 18:
                        this._parseScriptData(K, ba, Tt);
                        break
                }
                let da = Ke.getUint32(11 + Tt, !Ue);
                da !== 11 + Tt && H.w(this.TAG, `Invalid PrevTagSize ${da}`), Oe += 11 + Tt + 4
            }
            return this._isInitialMetadataDispatched() && this._dispatch && (this._audioTrack.length || this._videoTrack.length) && this._onDataAvailable(this._audioTrack, this._videoTrack), Oe
        }

        _parseScriptData(K, Pe, Oe) {
            let Ue = et.parseScriptData(K, Pe, Oe);
            if (Ue.hasOwnProperty("onMetaData")) {
                if (Ue.onMetaData == null || typeof Ue.onMetaData != "object") {
                    H.w(this.TAG, "Invalid onMetaData structure!");
                    return
                }
                this._metadata && H.w(this.TAG, "Found another onMetaData tag!"), this._metadata = Ue;
                let Ke = this._metadata.onMetaData;
                if (this._onMetaDataArrived && this._onMetaDataArrived(Object.assign({}, Ke)), typeof Ke.hasAudio == "boolean" && this._hasAudioFlagOverrided === !1 && (this._hasAudio = Ke.hasAudio, this._mediaInfo.hasAudio = this._hasAudio), typeof Ke.hasVideo == "boolean" && this._hasVideoFlagOverrided === !1 && (this._hasVideo = Ke.hasVideo, this._mediaInfo.hasVideo = this._hasVideo), typeof Ke.audiodatarate == "number" && (this._mediaInfo.audioDataRate = Ke.audiodatarate), typeof Ke.videodatarate == "number" && (this._mediaInfo.videoDataRate = Ke.videodatarate), typeof Ke.width == "number" && (this._mediaInfo.width = Ke.width), typeof Ke.height == "number" && (this._mediaInfo.height = Ke.height), typeof Ke.duration == "number") {
                    if (!this._durationOverrided) {
                        let mt = Math.floor(Ke.duration * this._timescale);
                        this._duration = mt, this._mediaInfo.duration = mt
                    }
                } else this._mediaInfo.duration = 0;
                if (typeof Ke.framerate == "number") {
                    let mt = Math.floor(Ke.framerate * 1e3);
                    if (mt > 0) {
                        let Tt = mt / 1e3;
                        this._referenceFrameRate.fixed = !0, this._referenceFrameRate.fps = Tt, this._referenceFrameRate.fps_num = mt, this._referenceFrameRate.fps_den = 1e3, this._mediaInfo.fps = Tt
                    }
                }
                if (typeof Ke.keyframes == "object") {
                    this._mediaInfo.hasKeyframesIndex = !0;
                    let mt = Ke.keyframes;
                    this._mediaInfo.keyframesIndex = this._parseKeyframesIndex(mt), Ke.keyframes = null
                } else this._mediaInfo.hasKeyframesIndex = !1;
                this._dispatch = !1, this._mediaInfo.metadata = Ke, H.v(this.TAG, "Parsed onMetaData"), this._mediaInfo.isComplete() && this._onMediaInfo(this._mediaInfo)
            }
            Object.keys(Ue).length > 0 && this._onScriptDataArrived && this._onScriptDataArrived(Object.assign({}, Ue))
        }

        _parseKeyframesIndex(K) {
            let Pe = [], Oe = [];
            for (let Ue = 1; Ue < K.times.length; Ue++) {
                let Ke = this._timestampBase + Math.floor(K.times[Ue] * 1e3);
                Pe.push(Ke), Oe.push(K.filepositions[Ue])
            }
            return {times: Pe, filepositions: Oe}
        }

        _parseAudioData(K, Pe, Oe, Ue) {
            if (Oe <= 1) {
                H.w(this.TAG, "Flv: Invalid audio packet, missing SoundData payload!");
                return
            }
            if (this._hasAudioFlagOverrided === !0 && this._hasAudio === !1) return;
            this._littleEndian;
            let Ke = new DataView(K, Pe, Oe).getUint8(0), mt = Ke >>> 4;
            if (mt !== 2 && mt !== 10) {
                this._onError(lt.CODEC_UNSUPPORTED, "Flv: Unsupported audio codec idx: " + mt);
                return
            }
            let Tt = 0, jt = (Ke & 12) >>> 2;
            if (jt >= 0 && jt <= 4) Tt = this._flvSoundRateTable[jt]; else {
                this._onError(lt.FORMAT_ERROR, "Flv: Invalid audio sample rate idx: " + jt);
                return
            }
            let ia = Ke & 1, aa = this._audioMetadata, pa = this._audioTrack;
            if (aa || (this._hasAudio === !1 && this._hasAudioFlagOverrided === !1 && (this._hasAudio = !0, this._mediaInfo.hasAudio = !0), aa = this._audioMetadata = {}, aa.type = "audio", aa.id = pa.id, aa.timescale = this._timescale, aa.duration = this._duration, aa.audioSampleRate = Tt, aa.channelCount = ia === 0 ? 1 : 2), mt === 10) {
                let ma = this._parseAACAudioData(K, Pe + 1, Oe - 1);
                if (ma == null) return;
                if (ma.packetType === 0) {
                    aa.config && H.w(this.TAG, "Found another AudioSpecificConfig!");
                    let ba = ma.data;
                    aa.audioSampleRate = ba.samplingRate, aa.channelCount = ba.channelCount, aa.codec = ba.codec, aa.originalCodec = ba.originalCodec, aa.config = ba.config, aa.refSampleDuration = 1024 / aa.audioSampleRate * aa.timescale, H.v(this.TAG, "Parsed AudioSpecificConfig"), this._isInitialMetadataDispatched() ? this._dispatch && (this._audioTrack.length || this._videoTrack.length) && this._onDataAvailable(this._audioTrack, this._videoTrack) : this._audioInitialMetadataDispatched = !0, this._dispatch = !1, this._onTrackMetadata("audio", aa);
                    let da = this._mediaInfo;
                    da.audioCodec = aa.originalCodec, da.audioSampleRate = aa.audioSampleRate, da.audioChannelCount = aa.channelCount, da.hasVideo ? da.videoCodec != null && (da.mimeType = 'video/x-flv; codecs="' + da.videoCodec + "," + da.audioCodec + '"') : da.mimeType = 'video/x-flv; codecs="' + da.audioCodec + '"', da.isComplete() && this._onMediaInfo(da)
                } else if (ma.packetType === 1) {
                    let ba = this._timestampBase + Ue,
                        da = {unit: ma.data, length: ma.data.byteLength, dts: ba, pts: ba};
                    pa.samples.push(da), pa.length += ma.data.length
                } else H.e(this.TAG, `Flv: Unsupported AAC data type ${ma.packetType}`)
            } else if (mt === 2) {
                if (!aa.codec) {
                    let Gt = this._parseMP3AudioData(K, Pe + 1, Oe - 1, !0);
                    if (Gt == null) return;
                    aa.audioSampleRate = Gt.samplingRate, aa.channelCount = Gt.channelCount, aa.codec = Gt.codec, aa.originalCodec = Gt.originalCodec, aa.refSampleDuration = 1152 / aa.audioSampleRate * aa.timescale, H.v(this.TAG, "Parsed MPEG Audio Frame Header"), this._audioInitialMetadataDispatched = !0, this._onTrackMetadata("audio", aa);
                    let ra = this._mediaInfo;
                    ra.audioCodec = aa.codec, ra.audioSampleRate = aa.audioSampleRate, ra.audioChannelCount = aa.channelCount, ra.audioDataRate = Gt.bitRate, ra.hasVideo ? ra.videoCodec != null && (ra.mimeType = 'video/x-flv; codecs="' + ra.videoCodec + "," + ra.audioCodec + '"') : ra.mimeType = 'video/x-flv; codecs="' + ra.audioCodec + '"', ra.isComplete() && this._onMediaInfo(ra)
                }
                let ma = this._parseMP3AudioData(K, Pe + 1, Oe - 1, !1);
                if (ma == null) return;
                let ba = this._timestampBase + Ue, da = {unit: ma, length: ma.byteLength, dts: ba, pts: ba};
                pa.samples.push(da), pa.length += ma.length
            }
        }

        _parseAACAudioData(K, Pe, Oe) {
            if (Oe <= 1) {
                H.w(this.TAG, "Flv: Invalid AAC packet, missing AACPacketType or/and Data!");
                return
            }
            let Ue = {}, Ke = new Uint8Array(K, Pe, Oe);
            return Ue.packetType = Ke[0], Ke[0] === 0 ? Ue.data = this._parseAACAudioSpecificConfig(K, Pe + 1, Oe - 1) : Ue.data = Ke.subarray(1), Ue
        }

        _parseAACAudioSpecificConfig(K, Pe, Oe) {
            let Ue = new Uint8Array(K, Pe, Oe), Ke = null, mt = 0, Tt = 0, jt = 0, ia = null;
            if (mt = Tt = Ue[0] >>> 3, jt = (Ue[0] & 7) << 1 | Ue[1] >>> 7, jt < 0 || jt >= this._mpegSamplingRates.length) {
                this._onError(lt.FORMAT_ERROR, "Flv: AAC invalid sampling frequency index!");
                return
            }
            let aa = this._mpegSamplingRates[jt], pa = (Ue[1] & 120) >>> 3;
            if (pa < 0 || pa >= 8) {
                this._onError(lt.FORMAT_ERROR, "Flv: AAC invalid channel configuration");
                return
            }
            mt === 5 && (ia = (Ue[1] & 7) << 1 | Ue[2] >>> 7);
            let ma = self.navigator.userAgent.toLowerCase();
            return ma.indexOf("firefox") !== -1 ? jt >= 6 ? (mt = 5, Ke = new Array(4), ia = jt - 3) : (mt = 2, Ke = new Array(2), ia = jt) : ma.indexOf("android") !== -1 ? (mt = 2, Ke = new Array(2), ia = jt) : (mt = 5, ia = jt, Ke = new Array(4), jt >= 6 ? ia = jt - 3 : pa === 1 && (mt = 2, Ke = new Array(2), ia = jt)), Ke[0] = mt << 3, Ke[0] |= (jt & 15) >>> 1, Ke[1] = (jt & 15) << 7, Ke[1] |= (pa & 15) << 3, mt === 5 && (Ke[1] |= (ia & 15) >>> 1, Ke[2] = (ia & 1) << 7, Ke[2] |= 2 << 2, Ke[3] = 0), {
                config: Ke,
                samplingRate: aa,
                channelCount: pa,
                codec: "mp4a.40." + mt,
                originalCodec: "mp4a.40." + Tt
            }
        }

        _parseMP3AudioData(K, Pe, Oe, Ue) {
            if (Oe < 4) {
                H.w(this.TAG, "Flv: Invalid MP3 packet, header missing!");
                return
            }
            this._littleEndian;
            let Ke = new Uint8Array(K, Pe, Oe), mt = null;
            if (Ue) {
                if (Ke[0] !== 255) return;
                let Tt = Ke[1] >>> 3 & 3, jt = (Ke[1] & 6) >> 1, ia = (Ke[2] & 240) >>> 4, aa = (Ke[2] & 12) >>> 2,
                    pa = (Ke[3] >>> 6 & 3) !== 3 ? 2 : 1, ma = 0, ba = 0, da = "mp3";
                switch (Tt) {
                    case 0:
                        ma = this._mpegAudioV25SampleRateTable[aa];
                        break;
                    case 2:
                        ma = this._mpegAudioV20SampleRateTable[aa];
                        break;
                    case 3:
                        ma = this._mpegAudioV10SampleRateTable[aa];
                        break
                }
                switch (jt) {
                    case 1:
                        ia < this._mpegAudioL3BitRateTable.length && (ba = this._mpegAudioL3BitRateTable[ia]);
                        break;
                    case 2:
                        ia < this._mpegAudioL2BitRateTable.length && (ba = this._mpegAudioL2BitRateTable[ia]);
                        break;
                    case 3:
                        ia < this._mpegAudioL1BitRateTable.length && (ba = this._mpegAudioL1BitRateTable[ia]);
                        break
                }
                mt = {bitRate: ba, samplingRate: ma, channelCount: pa, codec: da, originalCodec: da}
            } else mt = Ke;
            return mt
        }

        _parseVideoData(K, Pe, Oe, Ue, Ke) {
            if (Oe <= 1) {
                H.w(this.TAG, "Flv: Invalid video packet, missing VideoData payload!");
                return
            }
            if (this._hasVideoFlagOverrided === !0 && this._hasVideo === !1) return;
            let mt = new Uint8Array(K, Pe, Oe)[0], Tt = (mt & 240) >>> 4, jt = mt & 15;
            if (jt !== 7) {
                this._onError(lt.CODEC_UNSUPPORTED, `Flv: Unsupported codec in video frame: ${jt}`);
                return
            }
            this._parseAVCVideoPacket(K, Pe + 1, Oe - 1, Ue, Ke, Tt)
        }

        _parseAVCVideoPacket(K, Pe, Oe, Ue, Ke, mt) {
            if (Oe < 4) {
                H.w(this.TAG, "Flv: Invalid AVC packet, missing AVCPacketType or/and CompositionTime");
                return
            }
            let Tt = this._littleEndian, jt = new DataView(K, Pe, Oe), ia = jt.getUint8(0),
                aa = (jt.getUint32(0, !Tt) & 16777215) << 8 >> 8;
            if (ia === 0) this._parseAVCDecoderConfigurationRecord(K, Pe + 4, Oe - 4); else if (ia === 1) this._parseAVCVideoData(K, Pe + 4, Oe - 4, Ue, Ke, mt, aa); else if (ia !== 2) {
                this._onError(lt.FORMAT_ERROR, `Flv: Invalid video packet type ${ia}`);
                return
            }
        }

        _parseAVCDecoderConfigurationRecord(K, Pe, Oe) {
            if (Oe < 7) {
                H.w(this.TAG, "Flv: Invalid AVCDecoderConfigurationRecord, lack of data!");
                return
            }
            let Ue = this._videoMetadata, Ke = this._videoTrack, mt = this._littleEndian, Tt = new DataView(K, Pe, Oe);
            Ue ? typeof Ue.avcc < "u" && H.w(this.TAG, "Found another AVCDecoderConfigurationRecord!") : (this._hasVideo === !1 && this._hasVideoFlagOverrided === !1 && (this._hasVideo = !0, this._mediaInfo.hasVideo = !0), Ue = this._videoMetadata = {}, Ue.type = "video", Ue.id = Ke.id, Ue.timescale = this._timescale, Ue.duration = this._duration);
            let jt = Tt.getUint8(0), ia = Tt.getUint8(1);
            if (Tt.getUint8(2), Tt.getUint8(3), jt !== 1 || ia === 0) {
                this._onError(lt.FORMAT_ERROR, "Flv: Invalid AVCDecoderConfigurationRecord");
                return
            }
            if (this._naluLengthSize = (Tt.getUint8(4) & 3) + 1, this._naluLengthSize !== 3 && this._naluLengthSize !== 4) {
                this._onError(lt.FORMAT_ERROR, `Flv: Strange NaluLengthSizeMinusOne: ${this._naluLengthSize - 1}`);
                return
            }
            let aa = Tt.getUint8(5) & 31;
            if (aa === 0) {
                this._onError(lt.FORMAT_ERROR, "Flv: Invalid AVCDecoderConfigurationRecord: No SPS");
                return
            } else aa > 1 && H.w(this.TAG, `Flv: Strange AVCDecoderConfigurationRecord: SPS Count = ${aa}`);
            let pa = 6;
            for (let ba = 0; ba < aa; ba++) {
                let da = Tt.getUint16(pa, !mt);
                if (pa += 2, da === 0) continue;
                let Gt = new Uint8Array(K, Pe + pa, da);
                pa += da;
                let ra = tt.parseSPS(Gt);
                if (ba !== 0) continue;
                Ue.codecWidth = ra.codec_size.width, Ue.codecHeight = ra.codec_size.height, Ue.presentWidth = ra.present_size.width, Ue.presentHeight = ra.present_size.height, Ue.profile = ra.profile_string, Ue.level = ra.level_string, Ue.bitDepth = ra.bit_depth, Ue.chromaFormat = ra.chroma_format, Ue.sarRatio = ra.sar_ratio, Ue.frameRate = ra.frame_rate, (ra.frame_rate.fixed === !1 || ra.frame_rate.fps_num === 0 || ra.frame_rate.fps_den === 0) && (Ue.frameRate = this._referenceFrameRate);
                let Ca = Ue.frameRate.fps_den, La = Ue.frameRate.fps_num;
                Ue.refSampleDuration = Ue.timescale * (Ca / La);
                let xa = Gt.subarray(1, 4), Da = "avc1.";
                for (let Na = 0; Na < 3; Na++) {
                    let ka = xa[Na].toString(16);
                    ka.length < 2 && (ka = "0" + ka), Da += ka
                }
                Ue.codec = Da;
                let Ba = this._mediaInfo;
                Ba.width = Ue.codecWidth, Ba.height = Ue.codecHeight, Ba.fps = Ue.frameRate.fps, Ba.profile = Ue.profile, Ba.level = Ue.level, Ba.refFrames = ra.ref_frames, Ba.chromaFormat = ra.chroma_format_string, Ba.sarNum = Ue.sarRatio.width, Ba.sarDen = Ue.sarRatio.height, Ba.videoCodec = Da, Ba.hasAudio ? Ba.audioCodec != null && (Ba.mimeType = 'video/x-flv; codecs="' + Ba.videoCodec + "," + Ba.audioCodec + '"') : Ba.mimeType = 'video/x-flv; codecs="' + Ba.videoCodec + '"', Ba.isComplete() && this._onMediaInfo(Ba)
            }
            let ma = Tt.getUint8(pa);
            if (ma === 0) {
                this._onError(lt.FORMAT_ERROR, "Flv: Invalid AVCDecoderConfigurationRecord: No PPS");
                return
            } else ma > 1 && H.w(this.TAG, `Flv: Strange AVCDecoderConfigurationRecord: PPS Count = ${ma}`);
            pa++;
            for (let ba = 0; ba < ma; ba++) {
                let da = Tt.getUint16(pa, !mt);
                pa += 2, da !== 0 && (pa += da)
            }
            Ue.avcc = new Uint8Array(Oe), Ue.avcc.set(new Uint8Array(K, Pe, Oe), 0), H.v(this.TAG, "Parsed AVCDecoderConfigurationRecord"), this._isInitialMetadataDispatched() ? this._dispatch && (this._audioTrack.length || this._videoTrack.length) && this._onDataAvailable(this._audioTrack, this._videoTrack) : this._videoInitialMetadataDispatched = !0, this._dispatch = !1, this._onTrackMetadata("video", Ue)
        }

        _parseAVCVideoData(K, Pe, Oe, Ue, Ke, mt, Tt) {
            let jt = this._littleEndian, ia = new DataView(K, Pe, Oe), aa = [], pa = 0, ma = 0;
            const ba = this._naluLengthSize;
            let da = this._timestampBase + Ue, Gt = mt === 1;
            for (; ma < Oe;) {
                if (ma + 4 >= Oe) {
                    H.w(this.TAG, `Malformed Nalu near timestamp ${da}, offset = ${ma}, dataSize = ${Oe}`);
                    break
                }
                let ra = ia.getUint32(ma, !jt);
                if (ba === 3 && (ra >>>= 8), ra > Oe - ba) {
                    H.w(this.TAG, `Malformed Nalus near timestamp ${da}, NaluSize > DataSize!`);
                    return
                }
                let Ca = ia.getUint8(ma + ba) & 31;
                Ca === 5 && (Gt = !0);
                let La = new Uint8Array(K, Pe + ma, ba + ra), xa = {type: Ca, data: La};
                aa.push(xa), pa += La.byteLength, ma += ba + ra
            }
            if (aa.length) {
                let ra = this._videoTrack, Ca = {units: aa, length: pa, isKeyframe: Gt, dts: da, cts: Tt, pts: da + Tt};
                Gt && (Ca.fileposition = Ke), ra.samples.push(Ca), ra.length += pa
            }
        }
    }

    class At {
        static init() {
            At.types = {
                avc1: [],
                avcC: [],
                btrt: [],
                dinf: [],
                dref: [],
                esds: [],
                ftyp: [],
                hdlr: [],
                mdat: [],
                mdhd: [],
                mdia: [],
                mfhd: [],
                minf: [],
                moof: [],
                moov: [],
                mp4a: [],
                mvex: [],
                mvhd: [],
                sdtp: [],
                stbl: [],
                stco: [],
                stsc: [],
                stsd: [],
                stsz: [],
                stts: [],
                tfdt: [],
                tfhd: [],
                traf: [],
                trak: [],
                trun: [],
                trex: [],
                tkhd: [],
                vmhd: [],
                smhd: [],
                ".mp3": []
            };
            for (let Pe in At.types) At.types.hasOwnProperty(Pe) && (At.types[Pe] = [Pe.charCodeAt(0), Pe.charCodeAt(1), Pe.charCodeAt(2), Pe.charCodeAt(3)]);
            let K = At.constants = {};
            K.FTYP = new Uint8Array([105, 115, 111, 109, 0, 0, 0, 1, 105, 115, 111, 109, 97, 118, 99, 49]), K.STSD_PREFIX = new Uint8Array([0, 0, 0, 0, 0, 0, 0, 1]), K.STTS = new Uint8Array([0, 0, 0, 0, 0, 0, 0, 0]), K.STSC = K.STCO = K.STTS, K.STSZ = new Uint8Array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), K.HDLR_VIDEO = new Uint8Array([0, 0, 0, 0, 0, 0, 0, 0, 118, 105, 100, 101, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 86, 105, 100, 101, 111, 72, 97, 110, 100, 108, 101, 114, 0]), K.HDLR_AUDIO = new Uint8Array([0, 0, 0, 0, 0, 0, 0, 0, 115, 111, 117, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 83, 111, 117, 110, 100, 72, 97, 110, 100, 108, 101, 114, 0]), K.DREF = new Uint8Array([0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 12, 117, 114, 108, 32, 0, 0, 0, 1]), K.SMHD = new Uint8Array([0, 0, 0, 0, 0, 0, 0, 0]), K.VMHD = new Uint8Array([0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0])
        }

        static box(K) {
            let Pe = 8, Oe = null, Ue = Array.prototype.slice.call(arguments, 1), Ke = Ue.length;
            for (let Tt = 0; Tt < Ke; Tt++) Pe += Ue[Tt].byteLength;
            Oe = new Uint8Array(Pe), Oe[0] = Pe >>> 24 & 255, Oe[1] = Pe >>> 16 & 255, Oe[2] = Pe >>> 8 & 255, Oe[3] = Pe & 255, Oe.set(K, 4);
            let mt = 8;
            for (let Tt = 0; Tt < Ke; Tt++) Oe.set(Ue[Tt], mt), mt += Ue[Tt].byteLength;
            return Oe
        }

        static generateInitSegment(K) {
            let Pe = At.box(At.types.ftyp, At.constants.FTYP), Oe = At.moov(K),
                Ue = new Uint8Array(Pe.byteLength + Oe.byteLength);
            return Ue.set(Pe, 0), Ue.set(Oe, Pe.byteLength), Ue
        }

        static moov(K) {
            let Pe = At.mvhd(K.timescale, K.duration), Oe = At.trak(K), Ue = At.mvex(K);
            return At.box(At.types.moov, Pe, Oe, Ue)
        }

        static mvhd(K, Pe) {
            return At.box(At.types.mvhd, new Uint8Array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, K >>> 24 & 255, K >>> 16 & 255, K >>> 8 & 255, K & 255, Pe >>> 24 & 255, Pe >>> 16 & 255, Pe >>> 8 & 255, Pe & 255, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255]))
        }

        static trak(K) {
            return At.box(At.types.trak, At.tkhd(K), At.mdia(K))
        }

        static tkhd(K) {
            let Pe = K.id, Oe = K.duration, Ue = K.presentWidth, Ke = K.presentHeight;
            return At.box(At.types.tkhd, new Uint8Array([0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, Pe >>> 24 & 255, Pe >>> 16 & 255, Pe >>> 8 & 255, Pe & 255, 0, 0, 0, 0, Oe >>> 24 & 255, Oe >>> 16 & 255, Oe >>> 8 & 255, Oe & 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 0, 0, 0, Ue >>> 8 & 255, Ue & 255, 0, 0, Ke >>> 8 & 255, Ke & 255, 0, 0]))
        }

        static mdia(K) {
            return At.box(At.types.mdia, At.mdhd(K), At.hdlr(K), At.minf(K))
        }

        static mdhd(K) {
            let Pe = K.timescale, Oe = K.duration;
            return At.box(At.types.mdhd, new Uint8Array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, Pe >>> 24 & 255, Pe >>> 16 & 255, Pe >>> 8 & 255, Pe & 255, Oe >>> 24 & 255, Oe >>> 16 & 255, Oe >>> 8 & 255, Oe & 255, 85, 196, 0, 0]))
        }

        static hdlr(K) {
            let Pe = null;
            return K.type === "audio" ? Pe = At.constants.HDLR_AUDIO : Pe = At.constants.HDLR_VIDEO, At.box(At.types.hdlr, Pe)
        }

        static minf(K) {
            let Pe = null;
            return K.type === "audio" ? Pe = At.box(At.types.smhd, At.constants.SMHD) : Pe = At.box(At.types.vmhd, At.constants.VMHD), At.box(At.types.minf, Pe, At.dinf(), At.stbl(K))
        }

        static dinf() {
            return At.box(At.types.dinf, At.box(At.types.dref, At.constants.DREF))
        }

        static stbl(K) {
            return At.box(At.types.stbl, At.stsd(K), At.box(At.types.stts, At.constants.STTS), At.box(At.types.stsc, At.constants.STSC), At.box(At.types.stsz, At.constants.STSZ), At.box(At.types.stco, At.constants.STCO))
        }

        static stsd(K) {
            return K.type === "audio" ? K.codec === "mp3" ? At.box(At.types.stsd, At.constants.STSD_PREFIX, At.mp3(K)) : At.box(At.types.stsd, At.constants.STSD_PREFIX, At.mp4a(K)) : At.box(At.types.stsd, At.constants.STSD_PREFIX, At.avc1(K))
        }

        static mp3(K) {
            let Pe = K.channelCount, Oe = K.audioSampleRate,
                Ue = new Uint8Array([0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, Pe, 0, 16, 0, 0, 0, 0, Oe >>> 8 & 255, Oe & 255, 0, 0]);
            return At.box(At.types[".mp3"], Ue)
        }

        static mp4a(K) {
            let Pe = K.channelCount, Oe = K.audioSampleRate,
                Ue = new Uint8Array([0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, Pe, 0, 16, 0, 0, 0, 0, Oe >>> 8 & 255, Oe & 255, 0, 0]);
            return At.box(At.types.mp4a, Ue, At.esds(K))
        }

        static esds(K) {
            let Pe = K.config || [], Oe = Pe.length,
                Ue = new Uint8Array([0, 0, 0, 0, 3, 23 + Oe, 0, 1, 0, 4, 15 + Oe, 64, 21, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5].concat([Oe]).concat(Pe).concat([6, 1, 2]));
            return At.box(At.types.esds, Ue)
        }

        static avc1(K) {
            let Pe = K.avcc, Oe = K.codecWidth, Ue = K.codecHeight,
                Ke = new Uint8Array([0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, Oe >>> 8 & 255, Oe & 255, Ue >>> 8 & 255, Ue & 255, 0, 72, 0, 0, 0, 72, 0, 0, 0, 0, 0, 0, 0, 1, 10, 120, 113, 113, 47, 102, 108, 118, 46, 106, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24, 255, 255]);
            return At.box(At.types.avc1, Ke, At.box(At.types.avcC, Pe))
        }

        static mvex(K) {
            return At.box(At.types.mvex, At.trex(K))
        }

        static trex(K) {
            let Pe = K.id,
                Oe = new Uint8Array([0, 0, 0, 0, Pe >>> 24 & 255, Pe >>> 16 & 255, Pe >>> 8 & 255, Pe & 255, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1]);
            return At.box(At.types.trex, Oe)
        }

        static moof(K, Pe) {
            return At.box(At.types.moof, At.mfhd(K.sequenceNumber), At.traf(K, Pe))
        }

        static mfhd(K) {
            let Pe = new Uint8Array([0, 0, 0, 0, K >>> 24 & 255, K >>> 16 & 255, K >>> 8 & 255, K & 255]);
            return At.box(At.types.mfhd, Pe)
        }

        static traf(K, Pe) {
            let Oe = K.id,
                Ue = At.box(At.types.tfhd, new Uint8Array([0, 0, 0, 0, Oe >>> 24 & 255, Oe >>> 16 & 255, Oe >>> 8 & 255, Oe & 255])),
                Ke = At.box(At.types.tfdt, new Uint8Array([0, 0, 0, 0, Pe >>> 24 & 255, Pe >>> 16 & 255, Pe >>> 8 & 255, Pe & 255])),
                mt = At.sdtp(K), Tt = At.trun(K, mt.byteLength + 16 + 16 + 8 + 16 + 8 + 8);
            return At.box(At.types.traf, Ue, Ke, Tt, mt)
        }

        static sdtp(K) {
            let Pe = K.samples || [], Oe = Pe.length, Ue = new Uint8Array(4 + Oe);
            for (let Ke = 0; Ke < Oe; Ke++) {
                let mt = Pe[Ke].flags;
                Ue[Ke + 4] = mt.isLeading << 6 | mt.dependsOn << 4 | mt.isDependedOn << 2 | mt.hasRedundancy
            }
            return At.box(At.types.sdtp, Ue)
        }

        static trun(K, Pe) {
            let Oe = K.samples || [], Ue = Oe.length, Ke = 12 + 16 * Ue, mt = new Uint8Array(Ke);
            Pe += 8 + Ke, mt.set([0, 0, 15, 1, Ue >>> 24 & 255, Ue >>> 16 & 255, Ue >>> 8 & 255, Ue & 255, Pe >>> 24 & 255, Pe >>> 16 & 255, Pe >>> 8 & 255, Pe & 255], 0);
            for (let Tt = 0; Tt < Ue; Tt++) {
                let jt = Oe[Tt].duration, ia = Oe[Tt].size, aa = Oe[Tt].flags, pa = Oe[Tt].cts;
                mt.set([jt >>> 24 & 255, jt >>> 16 & 255, jt >>> 8 & 255, jt & 255, ia >>> 24 & 255, ia >>> 16 & 255, ia >>> 8 & 255, ia & 255, aa.isLeading << 2 | aa.dependsOn, aa.isDependedOn << 6 | aa.hasRedundancy << 4 | aa.isNonSync, 0, 0, pa >>> 24 & 255, pa >>> 16 & 255, pa >>> 8 & 255, pa & 255], 12 + 16 * Tt)
            }
            return At.box(At.types.trun, mt)
        }

        static mdat(K) {
            return At.box(At.types.mdat, K)
        }
    }

    At.init();

    class zt {
        static getSilentFrame(K, Pe) {
            if (K === "mp4a.40.2") {
                if (Pe === 1) return new Uint8Array([0, 200, 0, 128, 35, 128]);
                if (Pe === 2) return new Uint8Array([33, 0, 73, 144, 2, 25, 0, 35, 128]);
                if (Pe === 3) return new Uint8Array([0, 200, 0, 128, 32, 132, 1, 38, 64, 8, 100, 0, 142]);
                if (Pe === 4) return new Uint8Array([0, 200, 0, 128, 32, 132, 1, 38, 64, 8, 100, 0, 128, 44, 128, 8, 2, 56]);
                if (Pe === 5) return new Uint8Array([0, 200, 0, 128, 32, 132, 1, 38, 64, 8, 100, 0, 130, 48, 4, 153, 0, 33, 144, 2, 56]);
                if (Pe === 6) return new Uint8Array([0, 200, 0, 128, 32, 132, 1, 38, 64, 8, 100, 0, 130, 48, 4, 153, 0, 33, 144, 2, 0, 178, 0, 32, 8, 224])
            } else {
                if (Pe === 1) return new Uint8Array([1, 64, 34, 128, 163, 78, 230, 128, 186, 8, 0, 0, 0, 28, 6, 241, 193, 10, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 94]);
                if (Pe === 2) return new Uint8Array([1, 64, 34, 128, 163, 94, 230, 128, 186, 8, 0, 0, 0, 0, 149, 0, 6, 241, 161, 10, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 94]);
                if (Pe === 3) return new Uint8Array([1, 64, 34, 128, 163, 94, 230, 128, 186, 8, 0, 0, 0, 0, 149, 0, 6, 241, 161, 10, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 94])
            }
            return null
        }
    }

    class oa {
        constructor(K, Pe, Oe, Ue, Ke) {
            this.dts = K, this.pts = Pe, this.duration = Oe, this.originalDts = Ue, this.isSyncPoint = Ke, this.fileposition = null
        }
    }

    class sa {
        constructor() {
            this.beginDts = 0, this.endDts = 0, this.beginPts = 0, this.endPts = 0, this.originalBeginDts = 0, this.originalEndDts = 0, this.syncPoints = [], this.firstSample = null, this.lastSample = null
        }

        appendSyncPoint(K) {
            K.isSyncPoint = !0, this.syncPoints.push(K)
        }
    }

    class vt {
        constructor() {
            this._list = []
        }

        clear() {
            this._list = []
        }

        appendArray(K) {
            let Pe = this._list;
            K.length !== 0 && (Pe.length > 0 && K[0].originalDts < Pe[Pe.length - 1].originalDts && this.clear(), Array.prototype.push.apply(Pe, K))
        }

        getLastSyncPointBeforeDts(K) {
            if (this._list.length == 0) return null;
            let Pe = this._list, Oe = 0, Ue = Pe.length - 1, Ke = 0, mt = 0, Tt = Ue;
            for (K < Pe[0].dts && (Oe = 0, mt = Tt + 1); mt <= Tt;) if (Ke = mt + Math.floor((Tt - mt) / 2), Ke === Ue || K >= Pe[Ke].dts && K < Pe[Ke + 1].dts) {
                Oe = Ke;
                break
            } else Pe[Ke].dts < K ? mt = Ke + 1 : Tt = Ke - 1;
            return this._list[Oe]
        }
    }

    class ea {
        constructor(K) {
            this._type = K, this._list = [], this._lastAppendLocation = -1
        }

        get type() {
            return this._type
        }

        get length() {
            return this._list.length
        }

        isEmpty() {
            return this._list.length === 0
        }

        clear() {
            this._list = [], this._lastAppendLocation = -1
        }

        _searchNearestSegmentBefore(K) {
            let Pe = this._list;
            if (Pe.length === 0) return -2;
            let Oe = Pe.length - 1, Ue = 0, Ke = 0, mt = Oe, Tt = 0;
            if (K < Pe[0].originalBeginDts) return Tt = -1, Tt;
            for (; Ke <= mt;) if (Ue = Ke + Math.floor((mt - Ke) / 2), Ue === Oe || K > Pe[Ue].lastSample.originalDts && K < Pe[Ue + 1].originalBeginDts) {
                Tt = Ue;
                break
            } else Pe[Ue].originalBeginDts < K ? Ke = Ue + 1 : mt = Ue - 1;
            return Tt
        }

        _searchNearestSegmentAfter(K) {
            return this._searchNearestSegmentBefore(K) + 1
        }

        append(K) {
            let Pe = this._list, Oe = K, Ue = this._lastAppendLocation, Ke = 0;
            Ue !== -1 && Ue < Pe.length && Oe.originalBeginDts >= Pe[Ue].lastSample.originalDts && (Ue === Pe.length - 1 || Ue < Pe.length - 1 && Oe.originalBeginDts < Pe[Ue + 1].originalBeginDts) ? Ke = Ue + 1 : Pe.length > 0 && (Ke = this._searchNearestSegmentBefore(Oe.originalBeginDts) + 1), this._lastAppendLocation = Ke, this._list.splice(Ke, 0, Oe)
        }

        getLastSegmentBefore(K) {
            let Pe = this._searchNearestSegmentBefore(K);
            return Pe >= 0 ? this._list[Pe] : null
        }

        getLastSampleBefore(K) {
            let Pe = this.getLastSegmentBefore(K);
            return Pe != null ? Pe.lastSample : null
        }

        getLastSyncPointBefore(K) {
            let Pe = this._searchNearestSegmentBefore(K), Oe = this._list[Pe].syncPoints;
            for (; Oe.length === 0 && Pe > 0;) Pe--, Oe = this._list[Pe].syncPoints;
            return Oe.length > 0 ? Oe[Oe.length - 1] : null
        }
    }

    class _a {
        constructor(K) {
            this.TAG = "MP4Remuxer", this._config = K, this._isLive = K.isLive === !0, this._dtsBase = -1, this._dtsBaseInited = !1, this._audioDtsBase = 1 / 0, this._videoDtsBase = 1 / 0, this._audioNextDts = void 0, this._videoNextDts = void 0, this._audioStashedLastSample = null, this._videoStashedLastSample = null, this._audioMeta = null, this._videoMeta = null, this._audioSegmentInfoList = new ea("audio"), this._videoSegmentInfoList = new ea("video"), this._onInitSegment = null, this._onMediaSegment = null, this._forceFirstIDR = !!(we.chrome && (we.version.major < 50 || we.version.major === 50 && we.version.build < 2661)), this._fillSilentAfterSeek = we.msedge || we.msie, this._mp3UseMpegAudio = !we.firefox, this._fillAudioTimestampGap = this._config.fixAudioTimestampGap
        }

        destroy() {
            this._dtsBase = -1, this._dtsBaseInited = !1, this._audioMeta = null, this._videoMeta = null, this._audioSegmentInfoList.clear(), this._audioSegmentInfoList = null, this._videoSegmentInfoList.clear(), this._videoSegmentInfoList = null, this._onInitSegment = null, this._onMediaSegment = null
        }

        bindDataSource(K) {
            return K.onDataAvailable = this.remux.bind(this), K.onTrackMetadata = this._onTrackMetadataReceived.bind(this), this
        }

        get onInitSegment() {
            return this._onInitSegment
        }

        set onInitSegment(K) {
            this._onInitSegment = K
        }

        get onMediaSegment() {
            return this._onMediaSegment
        }

        set onMediaSegment(K) {
            this._onMediaSegment = K
        }

        insertDiscontinuity() {
            this._audioNextDts = this._videoNextDts = void 0
        }

        seek(K) {
            this._audioStashedLastSample = null, this._videoStashedLastSample = null, this._videoSegmentInfoList.clear(), this._audioSegmentInfoList.clear()
        }

        remux(K, Pe) {
            if (!this._onMediaSegment) throw new ie("MP4Remuxer: onMediaSegment callback must be specificed!");
            this._dtsBaseInited || this._calculateDtsBase(K, Pe), this._remuxVideo(Pe), this._remuxAudio(K)
        }

        _onTrackMetadataReceived(K, Pe) {
            let Oe = null, Ue = "mp4", Ke = Pe.codec;
            if (K === "audio") this._audioMeta = Pe, Pe.codec === "mp3" && this._mp3UseMpegAudio ? (Ue = "mpeg", Ke = "", Oe = new Uint8Array) : Oe = At.generateInitSegment(Pe); else if (K === "video") this._videoMeta = Pe, Oe = At.generateInitSegment(Pe); else return;
            if (!this._onInitSegment) throw new ie("MP4Remuxer: onInitSegment callback must be specified!");
            this._onInitSegment(K, {
                type: K,
                data: Oe.buffer,
                codec: Ke,
                container: `${K}/${Ue}`,
                mediaDuration: Pe.duration
            })
        }

        _calculateDtsBase(K, Pe) {
            this._dtsBaseInited || (K.samples && K.samples.length && (this._audioDtsBase = K.samples[0].dts), Pe.samples && Pe.samples.length && (this._videoDtsBase = Pe.samples[0].dts), this._dtsBase = Math.min(this._audioDtsBase, this._videoDtsBase), this._dtsBaseInited = !0)
        }

        flushStashedSamples() {
            let K = this._videoStashedLastSample, Pe = this._audioStashedLastSample,
                Oe = {type: "video", id: 1, sequenceNumber: 0, samples: [], length: 0};
            K != null && (Oe.samples.push(K), Oe.length = K.length);
            let Ue = {type: "audio", id: 2, sequenceNumber: 0, samples: [], length: 0};
            Pe != null && (Ue.samples.push(Pe), Ue.length = Pe.length), this._videoStashedLastSample = null, this._audioStashedLastSample = null, this._remuxVideo(Oe, !0), this._remuxAudio(Ue, !0)
        }

        _remuxAudio(K, Pe) {
            if (this._audioMeta == null) return;
            let Oe = K, Ue = Oe.samples, Ke, mt = -1, Tt = -1, jt = this._audioMeta.refSampleDuration,
                ia = this._audioMeta.codec === "mp3" && this._mp3UseMpegAudio,
                aa = this._dtsBaseInited && this._audioNextDts === void 0, pa = !1;
            if (!Ue || Ue.length === 0 || Ue.length === 1 && !Pe) return;
            let ma = 0, ba = null, da = 0;
            ia ? (ma = 0, da = Oe.length) : (ma = 8, da = 8 + Oe.length);
            let Gt = null;
            if (Ue.length > 1 && (Gt = Ue.pop(), da -= Gt.length), this._audioStashedLastSample != null) {
                let Na = this._audioStashedLastSample;
                this._audioStashedLastSample = null, Ue.unshift(Na), da += Na.length
            }
            Gt != null && (this._audioStashedLastSample = Gt);
            let ra = Ue[0].dts - this._dtsBase;
            if (this._audioNextDts) Ke = ra - this._audioNextDts; else if (this._audioSegmentInfoList.isEmpty()) Ke = 0, this._fillSilentAfterSeek && !this._videoSegmentInfoList.isEmpty() && this._audioMeta.originalCodec !== "mp3" && (pa = !0); else {
                let Na = this._audioSegmentInfoList.getLastSampleBefore(ra);
                if (Na != null) {
                    let ka = ra - (Na.originalDts + Na.duration);
                    ka <= 3 && (ka = 0);
                    let Wa = Na.dts + Na.duration + ka;
                    Ke = ra - Wa
                } else Ke = 0
            }
            if (pa) {
                let Na = ra - Ke, ka = this._videoSegmentInfoList.getLastSegmentBefore(ra);
                if (ka != null && ka.beginDts < Na) {
                    let Wa = zt.getSilentFrame(this._audioMeta.originalCodec, this._audioMeta.channelCount);
                    if (Wa) {
                        let Va = ka.beginDts, $a = Na - ka.beginDts;
                        H.v(this.TAG, `InsertPrefixSilentAudio: dts: ${Va}, duration: ${$a}`), Ue.unshift({
                            unit: Wa,
                            dts: Va,
                            pts: Va
                        }), da += Wa.byteLength
                    }
                } else pa = !1
            }
            let Ca = [];
            for (let Na = 0; Na < Ue.length; Na++) {
                let ka = Ue[Na], Wa = ka.unit, Va = ka.dts - this._dtsBase, $a = Va - Ke;
                mt === -1 && (mt = $a);
                let qa = 0;
                Na !== Ue.length - 1 ? qa = Ue[Na + 1].dts - this._dtsBase - Ke - $a : Gt != null ? qa = Gt.dts - this._dtsBase - Ke - $a : Ca.length >= 1 ? qa = Ca[Ca.length - 1].duration : qa = Math.floor(jt);
                let Qa = !1, za = null;
                if (qa > jt * 1.5 && this._audioMeta.codec !== "mp3" && this._fillAudioTimestampGap && !we.safari) {
                    Qa = !0;
                    let Za = Math.abs(qa - jt), ts = Math.ceil(Za / jt), ns = $a + jt;
                    H.w(this.TAG, `Large audio timestamp gap detected, may cause AV sync to drift. Silent frames will be generated to avoid unsync.
dts: ${$a + qa} ms, expected: ${$a + Math.round(jt)} ms, delta: ${Math.round(Za)} ms, generate: ${ts} frames`);
                    let Xa = zt.getSilentFrame(this._audioMeta.originalCodec, this._audioMeta.channelCount);
                    Xa == null && (H.w(this.TAG, `Unable to generate silent frame for ${this._audioMeta.originalCodec} with ${this._audioMeta.channelCount} channels, repeat last frame`), Xa = Wa), za = [];
                    for (let rs = 0; rs < ts; rs++) {
                        let ls = Math.round(ns);
                        if (za.length > 0) {
                            let ds = za[za.length - 1];
                            ds.duration = ls - ds.dts
                        }
                        let us = {
                            dts: ls,
                            pts: ls,
                            cts: 0,
                            unit: Xa,
                            size: Xa.byteLength,
                            duration: 0,
                            originalDts: Va,
                            flags: {isLeading: 0, dependsOn: 1, isDependedOn: 0, hasRedundancy: 0}
                        };
                        za.push(us), da += us.size, ns += jt
                    }
                    let Ya = za[za.length - 1];
                    Ya.duration = $a + qa - Ya.dts, qa = Math.round(jt)
                }
                Ca.push({
                    dts: $a,
                    pts: $a,
                    cts: 0,
                    unit: ka.unit,
                    size: ka.unit.byteLength,
                    duration: qa,
                    originalDts: Va,
                    flags: {isLeading: 0, dependsOn: 1, isDependedOn: 0, hasRedundancy: 0}
                }), Qa && Ca.push.apply(Ca, za)
            }
            ia ? ba = new Uint8Array(da) : (ba = new Uint8Array(da), ba[0] = da >>> 24 & 255, ba[1] = da >>> 16 & 255, ba[2] = da >>> 8 & 255, ba[3] = da & 255, ba.set(At.types.mdat, 4));
            for (let Na = 0; Na < Ca.length; Na++) {
                let ka = Ca[Na].unit;
                ba.set(ka, ma), ma += ka.byteLength
            }
            let La = Ca[Ca.length - 1];
            Tt = La.dts + La.duration, this._audioNextDts = Tt;
            let xa = new sa;
            xa.beginDts = mt, xa.endDts = Tt, xa.beginPts = mt, xa.endPts = Tt, xa.originalBeginDts = Ca[0].originalDts, xa.originalEndDts = La.originalDts + La.duration, xa.firstSample = new oa(Ca[0].dts, Ca[0].pts, Ca[0].duration, Ca[0].originalDts, !1), xa.lastSample = new oa(La.dts, La.pts, La.duration, La.originalDts, !1), this._isLive || this._audioSegmentInfoList.append(xa), Oe.samples = Ca, Oe.sequenceNumber++;
            let Da = null;
            ia ? Da = new Uint8Array : Da = At.moof(Oe, mt), Oe.samples = [], Oe.length = 0;
            let Ba = {type: "audio", data: this._mergeBoxes(Da, ba).buffer, sampleCount: Ca.length, info: xa};
            ia && aa && (Ba.timestampOffset = mt), this._onMediaSegment("audio", Ba)
        }

        _remuxVideo(K, Pe) {
            if (this._videoMeta == null) return;
            let Oe = K, Ue = Oe.samples, Ke, mt = -1, Tt = -1, jt = -1, ia = -1;
            if (!Ue || Ue.length === 0 || Ue.length === 1 && !Pe) return;
            let aa = 8, pa = null, ma = 8 + K.length, ba = null;
            if (Ue.length > 1 && (ba = Ue.pop(), ma -= ba.length), this._videoStashedLastSample != null) {
                let xa = this._videoStashedLastSample;
                this._videoStashedLastSample = null, Ue.unshift(xa), ma += xa.length
            }
            ba != null && (this._videoStashedLastSample = ba);
            let da = Ue[0].dts - this._dtsBase;
            if (this._videoNextDts) Ke = da - this._videoNextDts; else if (this._videoSegmentInfoList.isEmpty()) Ke = 0; else {
                let xa = this._videoSegmentInfoList.getLastSampleBefore(da);
                if (xa != null) {
                    let Da = da - (xa.originalDts + xa.duration);
                    Da <= 3 && (Da = 0);
                    let Ba = xa.dts + xa.duration + Da;
                    Ke = da - Ba
                } else Ke = 0
            }
            let Gt = new sa, ra = [];
            for (let xa = 0; xa < Ue.length; xa++) {
                let Da = Ue[xa], Ba = Da.dts - this._dtsBase, Na = Da.isKeyframe, ka = Ba - Ke, Wa = Da.cts,
                    Va = ka + Wa;
                mt === -1 && (mt = ka, jt = Va);
                let $a = 0;
                if (xa !== Ue.length - 1 ? $a = Ue[xa + 1].dts - this._dtsBase - Ke - ka : ba != null ? $a = ba.dts - this._dtsBase - Ke - ka : ra.length >= 1 ? $a = ra[ra.length - 1].duration : $a = Math.floor(this._videoMeta.refSampleDuration), Na) {
                    let qa = new oa(ka, Va, $a, Da.dts, !0);
                    qa.fileposition = Da.fileposition, Gt.appendSyncPoint(qa)
                }
                ra.push({
                    dts: ka,
                    pts: Va,
                    cts: Wa,
                    units: Da.units,
                    size: Da.length,
                    isKeyframe: Na,
                    duration: $a,
                    originalDts: Ba,
                    flags: {
                        isLeading: 0,
                        dependsOn: Na ? 2 : 1,
                        isDependedOn: Na ? 1 : 0,
                        hasRedundancy: 0,
                        isNonSync: Na ? 0 : 1
                    }
                })
            }
            pa = new Uint8Array(ma), pa[0] = ma >>> 24 & 255, pa[1] = ma >>> 16 & 255, pa[2] = ma >>> 8 & 255, pa[3] = ma & 255, pa.set(At.types.mdat, 4);
            for (let xa = 0; xa < ra.length; xa++) {
                let Da = ra[xa].units;
                for (; Da.length;) {
                    let Ba = Da.shift().data;
                    pa.set(Ba, aa), aa += Ba.byteLength
                }
            }
            let Ca = ra[ra.length - 1];
            if (Tt = Ca.dts + Ca.duration, ia = Ca.pts + Ca.duration, this._videoNextDts = Tt, Gt.beginDts = mt, Gt.endDts = Tt, Gt.beginPts = jt, Gt.endPts = ia, Gt.originalBeginDts = ra[0].originalDts, Gt.originalEndDts = Ca.originalDts + Ca.duration, Gt.firstSample = new oa(ra[0].dts, ra[0].pts, ra[0].duration, ra[0].originalDts, ra[0].isKeyframe), Gt.lastSample = new oa(Ca.dts, Ca.pts, Ca.duration, Ca.originalDts, Ca.isKeyframe), this._isLive || this._videoSegmentInfoList.append(Gt), Oe.samples = ra, Oe.sequenceNumber++, this._forceFirstIDR) {
                let xa = ra[0].flags;
                xa.dependsOn = 2, xa.isNonSync = 0
            }
            let La = At.moof(Oe, mt);
            Oe.samples = [], Oe.length = 0, this._onMediaSegment("video", {
                type: "video",
                data: this._mergeBoxes(La, pa).buffer,
                sampleCount: ra.length,
                info: Gt
            })
        }

        _mergeBoxes(K, Pe) {
            let Oe = new Uint8Array(K.byteLength + Pe.byteLength);
            return Oe.set(K, 0), Oe.set(Pe, K.byteLength), Oe
        }
    }

    const ta = {
        IO_ERROR: "io_error",
        DEMUX_ERROR: "demux_error",
        INIT_SEGMENT: "init_segment",
        MEDIA_SEGMENT: "media_segment",
        LOADING_COMPLETE: "loading_complete",
        RECOVERED_EARLY_EOF: "recovered_early_eof",
        MEDIA_INFO: "media_info",
        METADATA_ARRIVED: "metadata_arrived",
        SCRIPTDATA_ARRIVED: "scriptdata_arrived",
        STATISTICS_INFO: "statistics_info",
        RECOMMEND_SEEKPOINT: "recommend_seekpoint"
    };

    class na {
        constructor(K, Pe) {
            this.TAG = "TransmuxingController", this._emitter = new D, this._config = Pe, K.segments || (K.segments = [{
                duration: K.duration,
                filesize: K.filesize,
                url: K.url
            }]), typeof K.cors != "boolean" && (K.cors = !0), typeof K.withCredentials != "boolean" && (K.withCredentials = !1), this._mediaDataSource = K, this._currentSegmentIndex = 0;
            let Oe = 0;
            this._mediaDataSource.segments.forEach(Ue => {
                Ue.timestampBase = Oe, Oe += Ue.duration, Ue.cors = K.cors, Ue.withCredentials = K.withCredentials, Pe.referrerPolicy && (Ue.referrerPolicy = Pe.referrerPolicy)
            }), !isNaN(Oe) && this._mediaDataSource.duration !== Oe && (this._mediaDataSource.duration = Oe), this._mediaInfo = null, this._demuxer = null, this._remuxer = null, this._ioctl = null, this._pendingSeekTime = null, this._pendingResolveSeekPoint = null, this._statisticsReporter = null
        }

        destroy() {
            this._mediaInfo = null, this._mediaDataSource = null, this._statisticsReporter && this._disableStatisticsReporter(), this._ioctl && (this._ioctl.destroy(), this._ioctl = null), this._demuxer && (this._demuxer.destroy(), this._demuxer = null), this._remuxer && (this._remuxer.destroy(), this._remuxer = null), this._emitter.removeAllListeners(), this._emitter = null
        }

        on(K, Pe) {
            this._emitter.addListener(K, Pe)
        }

        off(K, Pe) {
            this._emitter.removeListener(K, Pe)
        }

        start() {
            this._loadSegment(0), this._enableStatisticsReporter()
        }

        _loadSegment(K, Pe) {
            this._currentSegmentIndex = K;
            let Oe = this._mediaDataSource.segments[K], Ue = this._ioctl = new Ze(Oe, this._config, K);
            Ue.onError = this._onIOException.bind(this), Ue.onSeeked = this._onIOSeeked.bind(this), Ue.onComplete = this._onIOComplete.bind(this), Ue.onRedirect = this._onIORedirect.bind(this), Ue.onRecoveredEarlyEof = this._onIORecoveredEarlyEof.bind(this), Pe ? this._demuxer.bindDataSource(this._ioctl) : Ue.onDataArrival = this._onInitChunkArrival.bind(this), Ue.open(Pe)
        }

        stop() {
            this._internalAbort(), this._disableStatisticsReporter()
        }

        _internalAbort() {
            this._ioctl && (this._ioctl.destroy(), this._ioctl = null)
        }

        pause() {
            this._ioctl && this._ioctl.isWorking() && (this._ioctl.pause(), this._disableStatisticsReporter())
        }

        resume() {
            this._ioctl && this._ioctl.isPaused() && (this._ioctl.resume(), this._enableStatisticsReporter())
        }

        seek(K) {
            if (this._mediaInfo == null || !this._mediaInfo.isSeekable()) return;
            let Pe = this._searchSegmentIndexContains(K);
            if (Pe === this._currentSegmentIndex) {
                let Oe = this._mediaInfo.segments[Pe];
                if (Oe == null) this._pendingSeekTime = K; else {
                    let Ue = Oe.getNearestKeyframe(K);
                    this._remuxer.seek(Ue.milliseconds), this._ioctl.seek(Ue.fileposition), this._pendingResolveSeekPoint = Ue.milliseconds
                }
            } else {
                let Oe = this._mediaInfo.segments[Pe];
                if (Oe == null) this._pendingSeekTime = K, this._internalAbort(), this._remuxer.seek(), this._remuxer.insertDiscontinuity(), this._loadSegment(Pe); else {
                    let Ue = Oe.getNearestKeyframe(K);
                    this._internalAbort(), this._remuxer.seek(K), this._remuxer.insertDiscontinuity(), this._demuxer.resetMediaInfo(), this._demuxer.timestampBase = this._mediaDataSource.segments[Pe].timestampBase, this._loadSegment(Pe, Ue.fileposition), this._pendingResolveSeekPoint = Ue.milliseconds, this._reportSegmentMediaInfo(Pe)
                }
            }
            this._enableStatisticsReporter()
        }

        _searchSegmentIndexContains(K) {
            let Pe = this._mediaDataSource.segments, Oe = Pe.length - 1;
            for (let Ue = 0; Ue < Pe.length; Ue++) if (K < Pe[Ue].timestampBase) {
                Oe = Ue - 1;
                break
            }
            return Oe
        }

        _onInitChunkArrival(K, Pe) {
            let Oe = null, Ue = 0;
            if (Pe > 0) this._demuxer.bindDataSource(this._ioctl), this._demuxer.timestampBase = this._mediaDataSource.segments[this._currentSegmentIndex].timestampBase, Ue = this._demuxer.parseChunks(K, Pe); else if ((Oe = kt.probe(K)).match) {
                this._demuxer = new kt(Oe, this._config), this._remuxer || (this._remuxer = new _a(this._config));
                let Ke = this._mediaDataSource;
                Ke.duration != null && !isNaN(Ke.duration) && (this._demuxer.overridedDuration = Ke.duration), typeof Ke.hasAudio == "boolean" && (this._demuxer.overridedHasAudio = Ke.hasAudio), typeof Ke.hasVideo == "boolean" && (this._demuxer.overridedHasVideo = Ke.hasVideo), this._demuxer.timestampBase = Ke.segments[this._currentSegmentIndex].timestampBase, this._demuxer.onError = this._onDemuxException.bind(this), this._demuxer.onMediaInfo = this._onMediaInfo.bind(this), this._demuxer.onMetaDataArrived = this._onMetaDataArrived.bind(this), this._demuxer.onScriptDataArrived = this._onScriptDataArrived.bind(this), this._remuxer.bindDataSource(this._demuxer.bindDataSource(this._ioctl)), this._remuxer.onInitSegment = this._onRemuxerInitSegmentArrival.bind(this), this._remuxer.onMediaSegment = this._onRemuxerMediaSegmentArrival.bind(this), Ue = this._demuxer.parseChunks(K, Pe)
            } else Oe = null, H.e(this.TAG, "Non-FLV, Unsupported media type!"), Promise.resolve().then(() => {
                this._internalAbort()
            }), this._emitter.emit(ta.DEMUX_ERROR, lt.FORMAT_UNSUPPORTED, "Non-FLV, Unsupported media type"), Ue = 0;
            return Ue
        }

        _onMediaInfo(K) {
            this._mediaInfo == null && (this._mediaInfo = Object.assign({}, K), this._mediaInfo.keyframesIndex = null, this._mediaInfo.segments = [], this._mediaInfo.segmentCount = this._mediaDataSource.segments.length, Object.setPrototypeOf(this._mediaInfo, Ge.prototype));
            let Pe = Object.assign({}, K);
            Object.setPrototypeOf(Pe, Ge.prototype), this._mediaInfo.segments[this._currentSegmentIndex] = Pe, this._reportSegmentMediaInfo(this._currentSegmentIndex), this._pendingSeekTime != null && Promise.resolve().then(() => {
                let Oe = this._pendingSeekTime;
                this._pendingSeekTime = null, this.seek(Oe)
            })
        }

        _onMetaDataArrived(K) {
            this._emitter.emit(ta.METADATA_ARRIVED, K)
        }

        _onScriptDataArrived(K) {
            this._emitter.emit(ta.SCRIPTDATA_ARRIVED, K)
        }

        _onIOSeeked() {
            this._remuxer.insertDiscontinuity()
        }

        _onIOComplete(K) {
            let Pe = K + 1;
            Pe < this._mediaDataSource.segments.length ? (this._internalAbort(), this._remuxer.flushStashedSamples(), this._loadSegment(Pe)) : (this._remuxer.flushStashedSamples(), this._emitter.emit(ta.LOADING_COMPLETE), this._disableStatisticsReporter())
        }

        _onIORedirect(K) {
            let Pe = this._ioctl.extraData;
            this._mediaDataSource.segments[Pe].redirectedURL = K
        }

        _onIORecoveredEarlyEof() {
            this._emitter.emit(ta.RECOVERED_EARLY_EOF)
        }

        _onIOException(K, Pe) {
            H.e(this.TAG, `IOException: type = ${K}, code = ${Pe.code}, msg = ${Pe.msg}`), this._emitter.emit(ta.IO_ERROR, K, Pe), this._disableStatisticsReporter()
        }

        _onDemuxException(K, Pe) {
            H.e(this.TAG, `DemuxException: type = ${K}, info = ${Pe}`), this._emitter.emit(ta.DEMUX_ERROR, K, Pe)
        }

        _onRemuxerInitSegmentArrival(K, Pe) {
            this._emitter.emit(ta.INIT_SEGMENT, K, Pe)
        }

        _onRemuxerMediaSegmentArrival(K, Pe) {
            if (this._pendingSeekTime == null && (this._emitter.emit(ta.MEDIA_SEGMENT, K, Pe), this._pendingResolveSeekPoint != null && K === "video")) {
                let Oe = Pe.info.syncPoints, Ue = this._pendingResolveSeekPoint;
                this._pendingResolveSeekPoint = null, we.safari && Oe.length > 0 && Oe[0].originalDts === Ue && (Ue = Oe[0].pts), this._emitter.emit(ta.RECOMMEND_SEEKPOINT, Ue)
            }
        }

        _enableStatisticsReporter() {
            this._statisticsReporter == null && (this._statisticsReporter = self.setInterval(this._reportStatisticsInfo.bind(this), this._config.statisticsInfoReportInterval))
        }

        _disableStatisticsReporter() {
            this._statisticsReporter && (self.clearInterval(this._statisticsReporter), this._statisticsReporter = null)
        }

        _reportSegmentMediaInfo(K) {
            let Pe = this._mediaInfo.segments[K], Oe = Object.assign({}, Pe);
            Oe.duration = this._mediaInfo.duration, Oe.segmentCount = this._mediaInfo.segmentCount, delete Oe.segments, delete Oe.keyframesIndex, this._emitter.emit(ta.MEDIA_INFO, Oe)
        }

        _reportStatisticsInfo() {
            let K = {};
            K.url = this._ioctl.currentURL, K.hasRedirect = this._ioctl.hasRedirect, K.hasRedirect && (K.redirectedURL = this._ioctl.currentRedirectedURL), K.speed = this._ioctl.currentSpeed, K.loaderType = this._ioctl.loaderType, K.currentSegmentIndex = this._currentSegmentIndex, K.totalSegmentCount = this._mediaDataSource.segments.length, this._emitter.emit(ta.STATISTICS_INFO, K)
        }
    }

    class Aa {
        constructor(K, Pe) {
            if (this.TAG = "Transmuxer", this._emitter = new D, this._controller = new na(K, Pe), this._controller) {
                let Oe = this._controller;
                Oe.on(ta.IO_ERROR, this._onIOError.bind(this)), Oe.on(ta.DEMUX_ERROR, this._onDemuxError.bind(this)), Oe.on(ta.INIT_SEGMENT, this._onInitSegment.bind(this)), Oe.on(ta.MEDIA_SEGMENT, this._onMediaSegment.bind(this)), Oe.on(ta.LOADING_COMPLETE, this._onLoadingComplete.bind(this)), Oe.on(ta.RECOVERED_EARLY_EOF, this._onRecoveredEarlyEof.bind(this)), Oe.on(ta.MEDIA_INFO, this._onMediaInfo.bind(this)), Oe.on(ta.METADATA_ARRIVED, this._onMetaDataArrived.bind(this)), Oe.on(ta.SCRIPTDATA_ARRIVED, this._onScriptDataArrived.bind(this)), Oe.on(ta.STATISTICS_INFO, this._onStatisticsInfo.bind(this)), Oe.on(ta.RECOMMEND_SEEKPOINT, this._onRecommendSeekpoint.bind(this))
            }
        }

        destroy() {
            this._controller.destroy(), this._controller = null, this._emitter.removeAllListeners(), this._emitter = null
        }

        on(K, Pe) {
            this._emitter.addListener(K, Pe)
        }

        off(K, Pe) {
            this._emitter.removeListener(K, Pe)
        }

        hasWorker() {
            return this._worker != null
        }

        open() {
            this._controller.start()
        }

        close() {
            this._controller.stop()
        }

        seek(K) {
            this._controller.seek(K)
        }

        pause() {
            this._controller.pause()
        }

        resume() {
            this._controller.resume()
        }

        _onInitSegment(K, Pe) {
            Promise.resolve().then(() => {
                this._emitter.emit(ta.INIT_SEGMENT, K, Pe)
            })
        }

        _onMediaSegment(K, Pe) {
            Promise.resolve().then(() => {
                this._emitter.emit(ta.MEDIA_SEGMENT, K, Pe)
            })
        }

        _onLoadingComplete() {
            Promise.resolve().then(() => {
                this._emitter.emit(ta.LOADING_COMPLETE)
            })
        }

        _onRecoveredEarlyEof() {
            Promise.resolve().then(() => {
                this._emitter.emit(ta.RECOVERED_EARLY_EOF)
            })
        }

        _onMediaInfo(K) {
            Promise.resolve().then(() => {
                this._emitter.emit(ta.MEDIA_INFO, K)
            })
        }

        _onMetaDataArrived(K) {
            Promise.resolve().then(() => {
                this._emitter.emit(ta.METADATA_ARRIVED, K)
            })
        }

        _onScriptDataArrived(K) {
            Promise.resolve().then(() => {
                this._emitter.emit(ta.SCRIPTDATA_ARRIVED, K)
            })
        }

        _onStatisticsInfo(K) {
            Promise.resolve().then(() => {
                this._emitter.emit(ta.STATISTICS_INFO, K)
            })
        }

        _onIOError(K, Pe) {
            Promise.resolve().then(() => {
                this._emitter.emit(ta.IO_ERROR, K, Pe)
            })
        }

        _onDemuxError(K, Pe) {
            Promise.resolve().then(() => {
                this._emitter.emit(ta.DEMUX_ERROR, K, Pe)
            })
        }

        _onRecommendSeekpoint(K) {
            Promise.resolve().then(() => {
                this._emitter.emit(ta.RECOMMEND_SEEKPOINT, K)
            })
        }
    }

    const Ea = {ERROR: "error", SOURCE_OPEN: "source_open", UPDATE_END: "update_end", BUFFER_FULL: "buffer_full"};

    class Sa {
        constructor(K) {
            this.TAG = "MSEController", this._config = K, this._emitter = new D, this._config.isLive && this._config.autoCleanupSourceBuffer == null && (this._config.autoCleanupSourceBuffer = !0), this.e = {
                onSourceOpen: this._onSourceOpen.bind(this),
                onSourceEnded: this._onSourceEnded.bind(this),
                onSourceClose: this._onSourceClose.bind(this),
                onSourceBufferError: this._onSourceBufferError.bind(this),
                onSourceBufferUpdateEnd: this._onSourceBufferUpdateEnd.bind(this)
            }, this._mediaSource = null, this._mediaSourceObjectURL = null, this._mediaElement = null, this._isBufferFull = !1, this._hasPendingEos = !1, this._requireSetMediaDuration = !1, this._pendingMediaDuration = 0, this._pendingSourceBufferInit = [], this._mimeTypes = {
                video: null,
                audio: null
            }, this._sourceBuffers = {video: null, audio: null}, this._lastInitSegments = {
                video: null,
                audio: null
            }, this._pendingSegments = {video: [], audio: []}, this._pendingRemoveRanges = {
                video: [],
                audio: []
            }, this._idrList = new vt
        }

        destroy() {
            (this._mediaElement || this._mediaSource) && this.detachMediaElement(), this.e = null, this._emitter.removeAllListeners(), this._emitter = null
        }

        on(K, Pe) {
            this._emitter.addListener(K, Pe)
        }

        off(K, Pe) {
            this._emitter.removeListener(K, Pe)
        }

        attachMediaElement(K) {
            if (this._mediaSource) throw new ie("MediaSource has been attached to an HTMLMediaElement!");
            let Pe = this._mediaSource = new window.MediaSource;
            Pe.addEventListener("sourceopen", this.e.onSourceOpen), Pe.addEventListener("sourceended", this.e.onSourceEnded), Pe.addEventListener("sourceclose", this.e.onSourceClose), this._mediaElement = K, this._mediaSourceObjectURL = window.URL.createObjectURL(this._mediaSource), K.src = this._mediaSourceObjectURL
        }

        detachMediaElement() {
            if (this._mediaSource) {
                let K = this._mediaSource;
                for (let Pe in this._sourceBuffers) {
                    let Oe = this._pendingSegments[Pe];
                    Oe.splice(0, Oe.length), this._pendingSegments[Pe] = null, this._pendingRemoveRanges[Pe] = null, this._lastInitSegments[Pe] = null;
                    let Ue = this._sourceBuffers[Pe];
                    if (Ue) {
                        if (K.readyState !== "closed") {
                            try {
                                K.removeSourceBuffer(Ue)
                            } catch (Ke) {
                                H.e(this.TAG, Ke.message)
                            }
                            Ue.removeEventListener("error", this.e.onSourceBufferError), Ue.removeEventListener("updateend", this.e.onSourceBufferUpdateEnd)
                        }
                        this._mimeTypes[Pe] = null, this._sourceBuffers[Pe] = null
                    }
                }
                if (K.readyState === "open") try {
                    K.endOfStream()
                } catch (Pe) {
                    H.e(this.TAG, Pe.message)
                }
                K.removeEventListener("sourceopen", this.e.onSourceOpen), K.removeEventListener("sourceended", this.e.onSourceEnded), K.removeEventListener("sourceclose", this.e.onSourceClose), this._pendingSourceBufferInit = [], this._isBufferFull = !1, this._idrList.clear(), this._mediaSource = null
            }
            this._mediaElement && (this._mediaElement.src = "", this._mediaElement.removeAttribute("src"), this._mediaElement = null), this._mediaSourceObjectURL && (window.URL.revokeObjectURL(this._mediaSourceObjectURL), this._mediaSourceObjectURL = null)
        }

        appendInitSegment(K, Pe) {
            if (!this._mediaSource || this._mediaSource.readyState !== "open") {
                this._pendingSourceBufferInit.push(K), this._pendingSegments[K.type].push(K);
                return
            }
            let Oe = K, Ue = `${Oe.container}`;
            Oe.codec && Oe.codec.length > 0 && (Ue += `;codecs=${Oe.codec}`);
            let Ke = !1;
            if (H.v(this.TAG, "Received Initialization Segment, mimeType: " + Ue), this._lastInitSegments[Oe.type] = Oe, Ue !== this._mimeTypes[Oe.type]) {
                if (this._mimeTypes[Oe.type]) H.v(this.TAG, `Notice: ${Oe.type} mimeType changed, origin: ${this._mimeTypes[Oe.type]}, target: ${Ue}`); else {
                    Ke = !0;
                    try {
                        let mt = this._sourceBuffers[Oe.type] = this._mediaSource.addSourceBuffer(Ue);
                        mt.addEventListener("error", this.e.onSourceBufferError), mt.addEventListener("updateend", this.e.onSourceBufferUpdateEnd)
                    } catch (mt) {
                        H.e(this.TAG, mt.message), this._emitter.emit(Ea.ERROR, {code: mt.code, msg: mt.message});
                        return
                    }
                }
                this._mimeTypes[Oe.type] = Ue
            }
            Pe || this._pendingSegments[Oe.type].push(Oe), Ke || this._sourceBuffers[Oe.type] && !this._sourceBuffers[Oe.type].updating && this._doAppendSegments(), we.safari && Oe.container === "audio/mpeg" && Oe.mediaDuration > 0 && (this._requireSetMediaDuration = !0, this._pendingMediaDuration = Oe.mediaDuration / 1e3, this._updateMediaSourceDuration())
        }

        appendMediaSegment(K) {
            let Pe = K;
            this._pendingSegments[Pe.type].push(Pe), this._config.autoCleanupSourceBuffer && this._needCleanupSourceBuffer() && this._doCleanupSourceBuffer();
            let Oe = this._sourceBuffers[Pe.type];
            Oe && !Oe.updating && !this._hasPendingRemoveRanges() && this._doAppendSegments()
        }

        seek(K) {
            for (let Pe in this._sourceBuffers) {
                if (!this._sourceBuffers[Pe]) continue;
                let Oe = this._sourceBuffers[Pe];
                if (this._mediaSource.readyState === "open") try {
                    Oe.abort()
                } catch (Ke) {
                    H.e(this.TAG, Ke.message)
                }
                this._idrList.clear();
                let Ue = this._pendingSegments[Pe];
                if (Ue.splice(0, Ue.length), this._mediaSource.readyState !== "closed") {
                    for (let Ke = 0; Ke < Oe.buffered.length; Ke++) {
                        let mt = Oe.buffered.start(Ke), Tt = Oe.buffered.end(Ke);
                        this._pendingRemoveRanges[Pe].push({start: mt, end: Tt})
                    }
                    if (Oe.updating || this._doRemoveRanges(), we.safari) {
                        let Ke = this._lastInitSegments[Pe];
                        Ke && (this._pendingSegments[Pe].push(Ke), Oe.updating || this._doAppendSegments())
                    }
                }
            }
        }

        endOfStream() {
            let K = this._mediaSource, Pe = this._sourceBuffers;
            if (!K || K.readyState !== "open") {
                K && K.readyState === "closed" && this._hasPendingSegments() && (this._hasPendingEos = !0);
                return
            }
            Pe.video && Pe.video.updating || Pe.audio && Pe.audio.updating ? this._hasPendingEos = !0 : (this._hasPendingEos = !1, K.endOfStream())
        }

        getNearestKeyframe(K) {
            return this._idrList.getLastSyncPointBeforeDts(K)
        }

        _needCleanupSourceBuffer() {
            if (!this._config.autoCleanupSourceBuffer) return !1;
            let K = this._mediaElement.currentTime;
            for (let Pe in this._sourceBuffers) {
                let Oe = this._sourceBuffers[Pe];
                if (Oe) {
                    let Ue = Oe.buffered;
                    if (Ue.length >= 1 && K - Ue.start(0) >= this._config.autoCleanupMaxBackwardDuration) return !0
                }
            }
            return !1
        }

        _doCleanupSourceBuffer() {
            let K = this._mediaElement.currentTime;
            for (let Pe in this._sourceBuffers) {
                let Oe = this._sourceBuffers[Pe];
                if (Oe) {
                    let Ue = Oe.buffered, Ke = !1;
                    for (let mt = 0; mt < Ue.length; mt++) {
                        let Tt = Ue.start(mt), jt = Ue.end(mt);
                        if (Tt <= K && K < jt + 3) {
                            if (K - Tt >= this._config.autoCleanupMaxBackwardDuration) {
                                Ke = !0;
                                let ia = K - this._config.autoCleanupMinBackwardDuration;
                                this._pendingRemoveRanges[Pe].push({start: Tt, end: ia})
                            }
                        } else jt < K && (Ke = !0, this._pendingRemoveRanges[Pe].push({start: Tt, end: jt}))
                    }
                    Ke && !Oe.updating && this._doRemoveRanges()
                }
            }
        }

        _updateMediaSourceDuration() {
            let K = this._sourceBuffers;
            if (this._mediaElement.readyState === 0 || this._mediaSource.readyState !== "open" || K.video && K.video.updating || K.audio && K.audio.updating) return;
            let Pe = this._mediaSource.duration, Oe = this._pendingMediaDuration;
            Oe > 0 && (isNaN(Pe) || Oe > Pe) && (H.v(this.TAG, `Update MediaSource duration from ${Pe} to ${Oe}`), this._mediaSource.duration = Oe), this._requireSetMediaDuration = !1, this._pendingMediaDuration = 0
        }

        _doRemoveRanges() {
            for (let K in this._pendingRemoveRanges) {
                if (!this._sourceBuffers[K] || this._sourceBuffers[K].updating) continue;
                let Pe = this._sourceBuffers[K], Oe = this._pendingRemoveRanges[K];
                for (; Oe.length && !Pe.updating;) {
                    let Ue = Oe.shift();
                    Pe.remove(Ue.start, Ue.end)
                }
            }
        }

        _doAppendSegments() {
            let K = this._pendingSegments;
            for (let Pe in K) if (!(!this._sourceBuffers[Pe] || this._sourceBuffers[Pe].updating) && K[Pe].length > 0) {
                let Oe = K[Pe].shift();
                if (Oe.timestampOffset) {
                    let Ue = this._sourceBuffers[Pe].timestampOffset, Ke = Oe.timestampOffset / 1e3;
                    Math.abs(Ue - Ke) > .1 && (H.v(this.TAG, `Update MPEG audio timestampOffset from ${Ue} to ${Ke}`), this._sourceBuffers[Pe].timestampOffset = Ke), delete Oe.timestampOffset
                }
                if (!Oe.data || Oe.data.byteLength === 0) continue;
                try {
                    this._sourceBuffers[Pe].appendBuffer(Oe.data), this._isBufferFull = !1, Pe === "video" && Oe.hasOwnProperty("info") && this._idrList.appendArray(Oe.info.syncPoints)
                } catch (Ue) {
                    this._pendingSegments[Pe].unshift(Oe), Ue.code === 22 ? (this._isBufferFull || this._emitter.emit(Ea.BUFFER_FULL), this._isBufferFull = !0) : (H.e(this.TAG, Ue.message), this._emitter.emit(Ea.ERROR, {
                        code: Ue.code,
                        msg: Ue.message
                    }))
                }
            }
        }

        _onSourceOpen() {
            if (H.v(this.TAG, "MediaSource onSourceOpen"), this._mediaSource.removeEventListener("sourceopen", this.e.onSourceOpen), this._pendingSourceBufferInit.length > 0) {
                let K = this._pendingSourceBufferInit;
                for (; K.length;) {
                    let Pe = K.shift();
                    this.appendInitSegment(Pe, !0)
                }
            }
            this._hasPendingSegments() && this._doAppendSegments(), this._emitter.emit(Ea.SOURCE_OPEN)
        }

        _onSourceEnded() {
            H.v(this.TAG, "MediaSource onSourceEnded")
        }

        _onSourceClose() {
            H.v(this.TAG, "MediaSource onSourceClose"), this._mediaSource && this.e != null && (this._mediaSource.removeEventListener("sourceopen", this.e.onSourceOpen), this._mediaSource.removeEventListener("sourceended", this.e.onSourceEnded), this._mediaSource.removeEventListener("sourceclose", this.e.onSourceClose))
        }

        _hasPendingSegments() {
            let K = this._pendingSegments;
            return K.video.length > 0 || K.audio.length > 0
        }

        _hasPendingRemoveRanges() {
            let K = this._pendingRemoveRanges;
            return K.video.length > 0 || K.audio.length > 0
        }

        _onSourceBufferUpdateEnd() {
            this._requireSetMediaDuration ? this._updateMediaSourceDuration() : this._hasPendingRemoveRanges() ? this._doRemoveRanges() : this._hasPendingSegments() ? this._doAppendSegments() : this._hasPendingEos && this.endOfStream(), this._emitter.emit(Ea.UPDATE_END)
        }

        _onSourceBufferError(K) {
            H.e(this.TAG, `SourceBuffer Error: ${K}`)
        }
    }

    const Ga = {NETWORK_ERROR: "NetworkError", MEDIA_ERROR: "MediaError", OTHER_ERROR: "OtherError"}, Ta = {
        NETWORK_EXCEPTION: Ce.EXCEPTION,
        NETWORK_STATUS_CODE_INVALID: Ce.HTTP_STATUS_CODE_INVALID,
        NETWORK_TIMEOUT: Ce.CONNECTING_TIMEOUT,
        NETWORK_UNRECOVERABLE_EARLY_EOF: Ce.UNRECOVERABLE_EARLY_EOF,
        MEDIA_MSE_ERROR: "MediaMSEError",
        MEDIA_FORMAT_ERROR: lt.FORMAT_ERROR,
        MEDIA_FORMAT_UNSUPPORTED: lt.FORMAT_UNSUPPORTED,
        MEDIA_CODEC_UNSUPPORTED: lt.CODEC_UNSUPPORTED
    };

    class fa {
        constructor(K, Pe) {
            if (this.TAG = "FlvPlayer", this._type = "FlvPlayer", this._emitter = new D, this._config = ze(), typeof Pe == "object" && Object.assign(this._config, Pe), K.type.toLowerCase() !== "flv") throw new Be("FlvPlayer requires an flv MediaDataSource input!");
            K.isLive === !0 && (this._config.isLive = !0), this.e = {
                onvLoadedMetadata: this._onvLoadedMetadata.bind(this),
                onvSeeking: this._onvSeeking.bind(this),
                onvCanPlay: this._onvCanPlay.bind(this),
                onvStalled: this._onvStalled.bind(this),
                onvProgress: this._onvProgress.bind(this)
            }, self.performance && self.performance.now ? this._now = self.performance.now.bind(self.performance) : this._now = Date.now, this._pendingSeekTime = null, this._requestSetTime = !1, this._seekpointRecord = null, this._progressChecker = null, this._mediaDataSource = K, this._mediaElement = null, this._msectl = null, this._transmuxer = null, this._mseSourceOpened = !1, this._hasPendingLoad = !1, this._receivedCanPlay = !1, this._mediaInfo = null, this._statisticsInfo = null;
            let Oe = we.chrome && (we.version.major < 50 || we.version.major === 50 && we.version.build < 2661);
            this._alwaysSeekKeyframe = !!(Oe || we.msedge || we.msie), this._alwaysSeekKeyframe && (this._config.accurateSeek = !1)
        }

        destroy() {
            this._progressChecker != null && (window.clearInterval(this._progressChecker), this._progressChecker = null), this._transmuxer && this.unload(), this._mediaElement && this.detachMediaElement(), this.e = null, this._mediaDataSource = null, this._emitter.removeAllListeners(), this._emitter = null
        }

        on(K, Pe) {
            K === Xe.MEDIA_INFO ? this._mediaInfo != null && Promise.resolve().then(() => {
                this._emitter.emit(Xe.MEDIA_INFO, this.mediaInfo)
            }) : K === Xe.STATISTICS_INFO && this._statisticsInfo != null && Promise.resolve().then(() => {
                this._emitter.emit(Xe.STATISTICS_INFO, this.statisticsInfo)
            }), this._emitter.addListener(K, Pe)
        }

        off(K, Pe) {
            this._emitter.removeListener(K, Pe)
        }

        attachMediaElement(K) {
            if (this._mediaElement = K, K.addEventListener("loadedmetadata", this.e.onvLoadedMetadata), K.addEventListener("seeking", this.e.onvSeeking), K.addEventListener("canplay", this.e.onvCanPlay), K.addEventListener("stalled", this.e.onvStalled), K.addEventListener("progress", this.e.onvProgress), this._msectl = new Sa(this._config), this._msectl.on(Ea.UPDATE_END, this._onmseUpdateEnd.bind(this)), this._msectl.on(Ea.BUFFER_FULL, this._onmseBufferFull.bind(this)), this._msectl.on(Ea.SOURCE_OPEN, () => {
                this._mseSourceOpened = !0, this._hasPendingLoad && (this._hasPendingLoad = !1, this.load())
            }), this._msectl.on(Ea.ERROR, Pe => {
                this._emitter.emit(Xe.ERROR, Ga.MEDIA_ERROR, Ta.MEDIA_MSE_ERROR, Pe)
            }), this._msectl.attachMediaElement(K), this._pendingSeekTime != null) try {
                K.currentTime = this._pendingSeekTime, this._pendingSeekTime = null
            } catch {
            }
        }

        detachMediaElement() {
            this._mediaElement && (this._msectl.detachMediaElement(), this._mediaElement.removeEventListener("loadedmetadata", this.e.onvLoadedMetadata), this._mediaElement.removeEventListener("seeking", this.e.onvSeeking), this._mediaElement.removeEventListener("canplay", this.e.onvCanPlay), this._mediaElement.removeEventListener("stalled", this.e.onvStalled), this._mediaElement.removeEventListener("progress", this.e.onvProgress), this._mediaElement = null), this._msectl && (this._msectl.destroy(), this._msectl = null)
        }

        load() {
            if (!this._mediaElement) throw new ie("HTMLMediaElement must be attached before load()!");
            if (this._transmuxer) throw new ie("FlvPlayer.load() has been called, please call unload() first!");
            if (!this._hasPendingLoad) {
                if (this._config.deferLoadAfterSourceOpen && this._mseSourceOpened === !1) {
                    this._hasPendingLoad = !0;
                    return
                }
                this._mediaElement.readyState > 0 && (this._requestSetTime = !0, this._mediaElement.currentTime = 0), this._transmuxer = new Aa(this._mediaDataSource, this._config), this._transmuxer.on(ta.INIT_SEGMENT, (K, Pe) => {
                    this._msectl.appendInitSegment(Pe)
                }), this._transmuxer.on(ta.MEDIA_SEGMENT, (K, Pe) => {
                    if (this._msectl.appendMediaSegment(Pe), this._config.lazyLoad && !this._config.isLive) {
                        let Oe = this._mediaElement.currentTime;
                        Pe.info.endDts >= (Oe + this._config.lazyLoadMaxDuration) * 1e3 && this._progressChecker == null && (H.v(this.TAG, "Maximum buffering duration exceeded, suspend transmuxing task"), this._suspendTransmuxer())
                    }
                }), this._transmuxer.on(ta.LOADING_COMPLETE, () => {
                    this._msectl.endOfStream(), this._emitter.emit(Xe.LOADING_COMPLETE)
                }), this._transmuxer.on(ta.RECOVERED_EARLY_EOF, () => {
                    this._emitter.emit(Xe.RECOVERED_EARLY_EOF)
                }), this._transmuxer.on(ta.IO_ERROR, (K, Pe) => {
                    this._emitter.emit(Xe.ERROR, Ga.NETWORK_ERROR, K, Pe)
                }), this._transmuxer.on(ta.DEMUX_ERROR, (K, Pe) => {
                    this._emitter.emit(Xe.ERROR, Ga.MEDIA_ERROR, K, {code: -1, msg: Pe})
                }), this._transmuxer.on(ta.MEDIA_INFO, K => {
                    this._mediaInfo = K, this._emitter.emit(Xe.MEDIA_INFO, Object.assign({}, K))
                }), this._transmuxer.on(ta.METADATA_ARRIVED, K => {
                    this._emitter.emit(Xe.METADATA_ARRIVED, K)
                }), this._transmuxer.on(ta.SCRIPTDATA_ARRIVED, K => {
                    this._emitter.emit(Xe.SCRIPTDATA_ARRIVED, K)
                }), this._transmuxer.on(ta.STATISTICS_INFO, K => {
                    this._statisticsInfo = this._fillStatisticsInfo(K), this._emitter.emit(Xe.STATISTICS_INFO, Object.assign({}, this._statisticsInfo))
                }), this._transmuxer.on(ta.RECOMMEND_SEEKPOINT, K => {
                    this._mediaElement && !this._config.accurateSeek && (this._requestSetTime = !0, this._mediaElement.currentTime = K / 1e3)
                }), this._transmuxer.open()
            }
        }

        unload() {
            this._mediaElement && this._mediaElement.pause(), this._msectl && this._msectl.seek(0), this._transmuxer && (this._transmuxer.close(), this._transmuxer.destroy(), this._transmuxer = null)
        }

        play() {
            return this._mediaElement.play()
        }

        pause() {
            this._mediaElement.pause()
        }

        get type() {
            return this._type
        }

        get buffered() {
            return this._mediaElement.buffered
        }

        get duration() {
            return this._mediaElement.duration
        }

        get volume() {
            return this._mediaElement.volume
        }

        set volume(K) {
            this._mediaElement.volume = K
        }

        get muted() {
            return this._mediaElement.muted
        }

        set muted(K) {
            this._mediaElement.muted = K
        }

        get currentTime() {
            return this._mediaElement ? this._mediaElement.currentTime : 0
        }

        set currentTime(K) {
            this._mediaElement ? this._internalSeek(K) : this._pendingSeekTime = K
        }

        get mediaInfo() {
            return Object.assign({}, this._mediaInfo)
        }

        get statisticsInfo() {
            return this._statisticsInfo == null && (this._statisticsInfo = {}), this._statisticsInfo = this._fillStatisticsInfo(this._statisticsInfo), Object.assign({}, this._statisticsInfo)
        }

        _fillStatisticsInfo(K) {
            if (K.playerType = this._type, !(this._mediaElement instanceof HTMLVideoElement)) return K;
            let Pe = !0, Oe = 0, Ue = 0;
            if (this._mediaElement.getVideoPlaybackQuality) {
                let Ke = this._mediaElement.getVideoPlaybackQuality();
                Oe = Ke.totalVideoFrames, Ue = Ke.droppedVideoFrames
            } else this._mediaElement.webkitDecodedFrameCount != null ? (Oe = this._mediaElement.webkitDecodedFrameCount, Ue = this._mediaElement.webkitDroppedFrameCount) : Pe = !1;
            return Pe && (K.decodedFrames = Oe, K.droppedFrames = Ue), K
        }

        _onmseUpdateEnd() {
            if (!this._config.lazyLoad || this._config.isLive) return;
            let K = this._mediaElement.buffered, Pe = this._mediaElement.currentTime, Oe = 0;
            for (let Ue = 0; Ue < K.length; Ue++) {
                let Ke = K.start(Ue), mt = K.end(Ue);
                if (Ke <= Pe && Pe < mt) {
                    Oe = mt;
                    break
                }
            }
            Oe >= Pe + this._config.lazyLoadMaxDuration && this._progressChecker == null && (H.v(this.TAG, "Maximum buffering duration exceeded, suspend transmuxing task"), this._suspendTransmuxer())
        }

        _onmseBufferFull() {
            H.v(this.TAG, "MSE SourceBuffer is full, suspend transmuxing task"), this._progressChecker == null && this._suspendTransmuxer()
        }

        _suspendTransmuxer() {
            this._transmuxer && (this._transmuxer.pause(), this._progressChecker == null && (this._progressChecker = window.setInterval(this._checkProgressAndResume.bind(this), 1e3)))
        }

        _checkProgressAndResume() {
            let K = this._mediaElement.currentTime, Pe = this._mediaElement.buffered, Oe = !1;
            for (let Ue = 0; Ue < Pe.length; Ue++) {
                let Ke = Pe.start(Ue), mt = Pe.end(Ue);
                if (K >= Ke && K < mt) {
                    K >= mt - this._config.lazyLoadRecoverDuration && (Oe = !0);
                    break
                }
            }
            Oe && (window.clearInterval(this._progressChecker), this._progressChecker = null, Oe && (H.v(this.TAG, "Continue loading from paused position"), this._transmuxer.resume()))
        }

        _isTimepointBuffered(K) {
            let Pe = this._mediaElement.buffered;
            for (let Oe = 0; Oe < Pe.length; Oe++) {
                let Ue = Pe.start(Oe), Ke = Pe.end(Oe);
                if (K >= Ue && K < Ke) return !0
            }
            return !1
        }

        _internalSeek(K) {
            let Pe = this._isTimepointBuffered(K), Oe = !1, Ue = 0;
            if (K < 1 && this._mediaElement.buffered.length > 0) {
                let Ke = this._mediaElement.buffered.start(0);
                (Ke < 1 && K < Ke || we.safari) && (Oe = !0, Ue = we.safari ? .1 : Ke)
            }
            if (Oe) this._requestSetTime = !0, this._mediaElement.currentTime = Ue; else if (Pe) {
                if (!this._alwaysSeekKeyframe) this._requestSetTime = !0, this._mediaElement.currentTime = K; else {
                    let Ke = this._msectl.getNearestKeyframe(Math.floor(K * 1e3));
                    this._requestSetTime = !0, Ke != null ? this._mediaElement.currentTime = Ke.dts / 1e3 : this._mediaElement.currentTime = K
                }
                this._progressChecker != null && this._checkProgressAndResume()
            } else this._progressChecker != null && (window.clearInterval(this._progressChecker), this._progressChecker = null), this._msectl.seek(K), this._transmuxer.seek(Math.floor(K * 1e3)), this._config.accurateSeek && (this._requestSetTime = !0, this._mediaElement.currentTime = K)
        }

        _checkAndApplyUnbufferedSeekpoint() {
            if (this._seekpointRecord) if (this._seekpointRecord.recordTime <= this._now() - 100) {
                let K = this._mediaElement.currentTime;
                this._seekpointRecord = null, this._isTimepointBuffered(K) || (this._progressChecker != null && (window.clearTimeout(this._progressChecker), this._progressChecker = null), this._msectl.seek(K), this._transmuxer.seek(Math.floor(K * 1e3)), this._config.accurateSeek && (this._requestSetTime = !0, this._mediaElement.currentTime = K))
            } else window.setTimeout(this._checkAndApplyUnbufferedSeekpoint.bind(this), 50)
        }

        _checkAndResumeStuckPlayback(K) {
            let Pe = this._mediaElement;
            if (K || !this._receivedCanPlay || Pe.readyState < 2) {
                let Oe = Pe.buffered;
                Oe.length > 0 && Pe.currentTime < Oe.start(0) && (H.w(this.TAG, `Playback seems stuck at ${Pe.currentTime}, seek to ${Oe.start(0)}`), this._requestSetTime = !0, this._mediaElement.currentTime = Oe.start(0), this._mediaElement.removeEventListener("progress", this.e.onvProgress))
            } else this._mediaElement.removeEventListener("progress", this.e.onvProgress)
        }

        _onvLoadedMetadata(K) {
            this._pendingSeekTime != null && (this._mediaElement.currentTime = this._pendingSeekTime, this._pendingSeekTime = null)
        }

        _onvSeeking(K) {
            let Pe = this._mediaElement.currentTime, Oe = this._mediaElement.buffered;
            if (this._requestSetTime) {
                this._requestSetTime = !1;
                return
            }
            if (Pe < 1 && Oe.length > 0) {
                let Ue = Oe.start(0);
                if (Ue < 1 && Pe < Ue || we.safari) {
                    this._requestSetTime = !0, this._mediaElement.currentTime = we.safari ? .1 : Ue;
                    return
                }
            }
            if (this._isTimepointBuffered(Pe)) {
                if (this._alwaysSeekKeyframe) {
                    let Ue = this._msectl.getNearestKeyframe(Math.floor(Pe * 1e3));
                    Ue != null && (this._requestSetTime = !0, this._mediaElement.currentTime = Ue.dts / 1e3)
                }
                this._progressChecker != null && this._checkProgressAndResume();
                return
            }
            this._seekpointRecord = {
                seekPoint: Pe,
                recordTime: this._now()
            }, window.setTimeout(this._checkAndApplyUnbufferedSeekpoint.bind(this), 50)
        }

        _onvCanPlay(K) {
            this._receivedCanPlay = !0, this._mediaElement.removeEventListener("canplay", this.e.onvCanPlay)
        }

        _onvStalled(K) {
            this._checkAndResumeStuckPlayback(!0)
        }

        _onvProgress(K) {
            this._checkAndResumeStuckPlayback()
        }
    }

    class ca {
        constructor(K, Pe) {
            if (this.TAG = "NativePlayer", this._type = "NativePlayer", this._emitter = new D, this._config = ze(), typeof Pe == "object" && Object.assign(this._config, Pe), K.type.toLowerCase() === "flv") throw new Be("NativePlayer does't support flv MediaDataSource input!");
            if (K.hasOwnProperty("segments")) throw new Be(`NativePlayer(${K.type}) doesn't support multipart playback!`);
            this.e = {onvLoadedMetadata: this._onvLoadedMetadata.bind(this)}, this._pendingSeekTime = null, this._statisticsReporter = null, this._mediaDataSource = K, this._mediaElement = null
        }

        destroy() {
            this._mediaElement && (this.unload(), this.detachMediaElement()), this.e = null, this._mediaDataSource = null, this._emitter.removeAllListeners(), this._emitter = null
        }

        on(K, Pe) {
            K === Xe.MEDIA_INFO ? this._mediaElement != null && this._mediaElement.readyState !== 0 && Promise.resolve().then(() => {
                this._emitter.emit(Xe.MEDIA_INFO, this.mediaInfo)
            }) : K === Xe.STATISTICS_INFO && this._mediaElement != null && this._mediaElement.readyState !== 0 && Promise.resolve().then(() => {
                this._emitter.emit(Xe.STATISTICS_INFO, this.statisticsInfo)
            }), this._emitter.addListener(K, Pe)
        }

        off(K, Pe) {
            this._emitter.removeListener(K, Pe)
        }

        attachMediaElement(K) {
            if (this._mediaElement = K, K.addEventListener("loadedmetadata", this.e.onvLoadedMetadata), this._pendingSeekTime != null) try {
                K.currentTime = this._pendingSeekTime, this._pendingSeekTime = null
            } catch {
            }
        }

        detachMediaElement() {
            this._mediaElement && (this._mediaElement.src = "", this._mediaElement.removeAttribute("src"), this._mediaElement.removeEventListener("loadedmetadata", this.e.onvLoadedMetadata), this._mediaElement = null), this._statisticsReporter != null && (window.clearInterval(this._statisticsReporter), this._statisticsReporter = null)
        }

        load() {
            if (!this._mediaElement) throw new ie("HTMLMediaElement must be attached before load()!");
            this._mediaElement.src = this._mediaDataSource.url, this._mediaElement.readyState > 0 && (this._mediaElement.currentTime = 0), this._mediaElement.preload = "auto", this._mediaElement.load(), this._statisticsReporter = window.setInterval(this._reportStatisticsInfo.bind(this), this._config.statisticsInfoReportInterval)
        }

        unload() {
            this._mediaElement && (this._mediaElement.src = "", this._mediaElement.removeAttribute("src")), this._statisticsReporter != null && (window.clearInterval(this._statisticsReporter), this._statisticsReporter = null)
        }

        play() {
            return this._mediaElement.play()
        }

        pause() {
            this._mediaElement.pause()
        }

        get type() {
            return this._type
        }

        get buffered() {
            return this._mediaElement.buffered
        }

        get duration() {
            return this._mediaElement.duration
        }

        get volume() {
            return this._mediaElement.volume
        }

        set volume(K) {
            this._mediaElement.volume = K
        }

        get muted() {
            return this._mediaElement.muted
        }

        set muted(K) {
            this._mediaElement.muted = K
        }

        get currentTime() {
            return this._mediaElement ? this._mediaElement.currentTime : 0
        }

        set currentTime(K) {
            this._mediaElement ? this._mediaElement.currentTime = K : this._pendingSeekTime = K
        }

        get mediaInfo() {
            let K = {mimeType: (this._mediaElement instanceof HTMLAudioElement ? "audio/" : "video/") + this._mediaDataSource.type};
            return this._mediaElement && (K.duration = Math.floor(this._mediaElement.duration * 1e3), this._mediaElement instanceof HTMLVideoElement && (K.width = this._mediaElement.videoWidth, K.height = this._mediaElement.videoHeight)), K
        }

        get statisticsInfo() {
            let K = {playerType: this._type, url: this._mediaDataSource.url};
            if (!(this._mediaElement instanceof HTMLVideoElement)) return K;
            let Pe = !0, Oe = 0, Ue = 0;
            if (this._mediaElement.getVideoPlaybackQuality) {
                let Ke = this._mediaElement.getVideoPlaybackQuality();
                Oe = Ke.totalVideoFrames, Ue = Ke.droppedVideoFrames
            } else this._mediaElement.webkitDecodedFrameCount != null ? (Oe = this._mediaElement.webkitDecodedFrameCount, Ue = this._mediaElement.webkitDroppedFrameCount) : Pe = !1;
            return Pe && (K.decodedFrames = Oe, K.droppedFrames = Ue), K
        }

        _onvLoadedMetadata(K) {
            this._pendingSeekTime != null && (this._mediaElement.currentTime = this._pendingSeekTime, this._pendingSeekTime = null), this._emitter.emit(Xe.MEDIA_INFO, this.mediaInfo)
        }

        _reportStatisticsInfo() {
            this._emitter.emit(Xe.STATISTICS_INFO, this.statisticsInfo)
        }
    }

    function Ia(xt, K) {
        let Pe = xt;
        if (Pe == null || typeof Pe != "object") throw new Be("MediaDataSource must be an javascript object!");
        if (!Pe.hasOwnProperty("type")) throw new Be("MediaDataSource must has type field to indicate video file type!");
        switch (Pe.type) {
            case"flv":
                return new fa(Pe, K);
            default:
                return new ca(Pe, K)
        }
    }

    function Ma() {
        return De.supportMSEH264Playback()
    }

    function Fa() {
        let xt = new OfflineAudioContext(1, 1, 44100);
        return !!(xt.audioWorklet && typeof xt.audioWorklet.addModule == "function")
    }

    function va() {
        class xt extends AudioWorkletProcessor {
            constructor() {
                super(), this.state = 0, this.start = !0, this.samplesArray = [], this.offset = 0, this.bufferSize = 1024, this.port.onmessage = Pe => {
                    Pe.data.message == "init" ? this.bufferSize = Pe.data.bufferSize : Pe.data.message == "stop" ? this.start = !1 : Pe.data.message == "data" ? this.samplesArray.push(Pe.data.buffer) : Pe.data.message == "zero"
                }
            }

            process(Pe, Oe, Ue) {
                const Ke = Oe[0][0];
                if (this.offset == 0 && this.port.postMessage({message: "beep"}), this.state == 0 && (this.state = 1), this.state == 1 && this.samplesArray.length == 4 && (this.state = 2), this.state == 2) {
                    let mt = this.samplesArray[0];
                    for (let Tt = 0; Tt < Ke.length; Tt++) Ke[Tt] = mt[Tt + this.offset]
                } else Ke.fill(0);
                return this.offset += 128, this.offset == this.bufferSize && (this.offset = 0, this.state == 2 && this.samplesArray.shift(), this.samplesArray.length == 0 && (this.state = 0)), this.start
            }
        }

        registerProcessor("wa-processor", xt)
    }

    function ha(xt) {
        return xt.trim().match(/^function\s*\w*\s*\([\w\s,]*\)\s*{([\w\W]*?)}$/)[1]
    }

    function Ua() {
        const xt = ha(va.toString()), K = new Blob([xt], {type: "text/javascript"});
        return URL.createObjectURL(K)
    }

    return R.WAB = Ua, R.AMF = et, R
}();
typeof exports < "u" ? (typeof module < "u" && module.exports && (exports = module.exports = FlvPlayer), exports.FlvPlayer = FlvPlayer) : Module.FlvPlayer = FlvPlayer, typeof define == "function" && define.amd && define([], function () {
    return FlvPlayer
});
var LOG_LEVELS = (r => (r[r.ROBOT = 0] = "ROBOT", r[r.DEBUG = 1] = "DEBUG", r[r.INFO = 2] = "INFO", r[r.WARNING = 3] = "WARNING", r[r.ERROR = 4] = "ERROR", r))(LOG_LEVELS || {});
const Ja = class {
    constructor() {
        Ha(this, "_logLevel", 1);
        Ha(this, "_showLogLevel", "Log level : debug |")
    }

    use(R) {
        let {isEnabled: y, logLevel: E, stringifyArguments: C, showLogLevel: x, showMethodName: B, separator: N} = R;
        Ja.SHOW_LOG_FLAG = y, this._logLevel = E
    }

    static get Inst() {
        return Ja._instance || (Ja._instance = new Ja), this._instance
    }

    log(...R) {
        if (Ja.SHOW_LOG_FLAG) {
            if (this._logLevel > 1) return;
            this.colorful(R, "color: #2d8cf0;")
        }
    }

    success(...R) {
        if (Ja.SHOW_LOG_FLAG) {
            if (this._logLevel > 1) return;
            this.colorful(R, "color: #19be6b;")
        }
    }

    info(...R) {
        if (Ja.SHOW_LOG_FLAG) {
            if (this._logLevel > 2) return;
            this.colorful(R, "color: #19bebe;")
        }
    }

    warn(...R) {
        if (Ja.SHOW_LOG_FLAG) {
            if (this._logLevel > 3) return;
            this.colorful(R, "color: #ff9900;")
        }
    }

    error(...R) {
        if (Ja.SHOW_LOG_FLAG) {
            if (this._logLevel > 4) return;
            this.colorful(R, "color: #ed4014;")
        }
    }

    colorful(...R) {
        let y = R[R.length - 1], E = "";
        for (const C of R) C != y && (Array.isArray(C) ? C.forEach(x => {
            E += " " + x
        }) : E += " " + C);
        console.groupCollapsed(`%c ${E || ""}`, `${y || ""}`), console.trace("----- PRINTING CALL STACK"), console.groupEnd()
    }

    groupBy(R, y, ...E) {
        if (this._logLevel > 1) return;
        y = y || {};
        let C = "color: #9E9E9E; font-weight: bold";
        console.groupCollapsed(`${R}`), console.group(`${R}`);
        for (let [x, B] of y) console.log(`%c ${x} :`, `${C}`, B, ...E);
        console.groupEnd(), console.trace("----- PRINTING CALL STACK"), console.groupEnd()
    }

    typeColor(R) {
        R = R || 5;
        let y = "#000000";
        switch (R) {
            case 1:
                y = "#2d8cf0";
                break;
            case 2:
                y = "#19be6b";
                break;
            case 3:
                y = "#ff9900";
                break;
            case 4:
                y = "#ed4014";
                break;
            case 5:
                y = "#000000";
                break;
            default:
                y = "#515a6e";
                break
        }
        return y
    }
};
let BgLog = Ja;
Ha(BgLog, "SHOW_LOG_FLAG", !0), Ha(BgLog, "_instance");
let Logger$1 = BgLog.Inst, GC_DOMAIN = window.__gc_domain__, GC_DOMAINS = window.__gc_domains__;
const logOptions = {isEnabled: !0, logLevel: LOG_LEVELS.ERROR};
Logger$1.use(logOptions);
const Global = (() => {
    Logger$1.info("BUNDLE TYPE ===>", "RELESAE"), Logger$1.info("MODE ====>", "production"), Logger$1.info("ENV ====>", "ERV PROD"), Logger$1.info("GC DOMAIN ====>", GC_DOMAIN);
    let r = !1, R = "", y = "", E = "", C = window.__bannerConfig__, x, B = window.__preload_config__;
    const N = Y => {
        Logger$1.info(`
`), Logger$1.info("Dev mode :"), Logger$1.info("bannerConfigJson modified.");
        let H = {};

        function me(Re) {
            return /^(?:\w+:)?\/\/([^\s\.]+\.\S{2}|localhost[\:?\d]*)\S*$/.test(Re)
        }

        function ce(Re, Ce = "", Ne = "") {
            for (const [we, Me] of Object.entries(Re)) {
                const ke = Ce ? `${Ce}.${we}` : we;
                typeof Me == "object" ? ce(Me, ke, Ne) : typeof Me == "string" && /\.(png|jpg|svg)$/.test(Me) ? me(Me) ? H[ke] = Me : H[ke] = Ne + Me : H[ke] = Me
            }
        }

        let ie = GC_DOMAIN;
        ie.charAt(ie.length - 1) == "/" && (ie = ie.substring(0, ie.length - 1), GC_DOMAIN = ie), ce(Y.desktop, "desktop", ""), ce(Y.mobile, "mobile", "");
        let Be = {};

        function ve(Re) {
            for (const [Ce, Ne] of Object.entries(Re)) {
                const we = Ce.split(".");
                let Me = Be;
                for (let ke = 0; ke < we.length - 1; ke++) {
                    const Fe = we[ke];
                    Me[Fe] = Me[Fe] || {}, Me = Me[Fe]
                }
                Me[we[we.length - 1]] = Ne
            }
        }

        return ve(H), Be
    };
    return window.__bannerConfig__ && (C = N(window.__bannerConfig__)), {
        inGameSnapShot: E,
        flvInited: r,
        flvPlayerP: R,
        preloadConfigJson: B,
        bannerConfigJson: C,
        changePreloadConfigJson: Y => {
            Logger$1.info(`
`), Logger$1.info("Dev mode :"), Logger$1.info("PreloadConfigJson modified."), Global.preloadConfigJson = Y
        },
        modifySystemJsonUrl: Y => {
            Logger$1.info("SystemJsonUrl modified to:", Y), Global.preloadConfigJson.systemJsonUrl = Y
        },
        modifyGameSourceConfigUrl: Y => {
            Logger$1.info("gameSourceConfigUrl modified to:", Y), Global.preloadConfigJson.gameSourceConfigUrl = Y
        },
        convertBannerConfigJson: N,
        getSystemJsonUrl: Y => Y == null ? void 0 : Y.systemJsonUrl,
        customizeUrl: (Y, H = null, me = !1, ce = !1) => {
            let {domains: ie, capturedString: Be, url: ve, configJson: Re, isAbsoluteURL: Ce, baseUrlPath: Ne} = Y;
            if (Ce) return ce && (ie = ie.map(Me => Helper.combinePath(Me, ce ? Ne : ""))), H && (ie = ie.map(Me => Helper.combinePath(Me, H))), me && (ie = ie.map(Me => Me + "?t=" + Date.now())), ie;
            const we = Me => (Me.charAt(Me.length - 1) == "/" && (Me = Me.substring(0, Me.length - 1), Me = Me), Me);
            return Be ? ie.map(Me => ve.replace("${" + Be + "}", we(Me)) + (ce ? Ne : "") + (H || "") + (me ? "?t=" + Date.now() : "")) : ie.map(Me => we(Me) + (ce ? Ne : "") + ve + (H || "") + (me ? "?t=" + Date.now() : ""))
        },
        getAssetsDomainsInfos: (Y, H) => {
            function me(ke) {
                return /^(?:\w+:)?\/\/([^\s\.]+\.\S{2}|localhost[\:?\d]*)\S*$/.test(ke)
            }

            const ce = ke => (ke.charAt(ke.length - 1) == "/" && (ke = ke.substring(0, ke.length - 1), ke = ke), ke),
                ie = ke => {
                    const Fe = /\${(.+?)}/g, $e = ke.match(Fe);
                    return $e ? $e[0].substring(2, $e[0].length - 1) : null
                },
                Be = (ke, Fe) => Object.prototype.hasOwnProperty.call(ke, Fe) ? ke[Fe] : (Logger$1.warn("capturedString not found in preload config:", Fe), null),
                ve = ke => {
                    function Fe(Ve) {
                        return new URLSearchParams(window.location.search).get(Ve)
                    }

                    let $e = Fe(ke);
                    return $e || ($e = new URLSearchParams(location.hash.split("?")[1]).get(ke)), $e
                }, Re = ke => {
                    if (me(ke)) {
                        let Fe = new URL(ke);
                        return ce(Fe.pathname)
                    } else {
                        if (ke.startsWith(".")) return ke == "./" ? "" : ce(ke.replace(".", ""));
                        {
                            let Fe = ie(ke), $e = ke.replace("${" + Fe + "}", "");
                            return ce($e)
                        }
                    }
                };
            if (GC_DOMAINS = GC_DOMAINS.map(ke => ce(ke)), me(Y)) return {
                baseUrlPath: ce(Re(H.baseURL)),
                domains: [Y],
                capturedString: null,
                url: Y,
                configJson: H,
                isAbsoluteURL: !0
            };
            if (H == null) return console.assert(!H, "ConfigJson cannot be null!"), {
                baseUrlPath: "",
                domains: GC_DOMAINS,
                capturedString: null,
                url: Y,
                configJson: null,
                isAbsoluteURL: !1
            };
            let Ce = ie(Y);
            if (!Ce) return console.assert(!Ce, "URL captured string not found"), {
                baseUrlPath: ce(Re(H.baseURL)),
                domains: GC_DOMAINS,
                capturedString: null,
                url: Y,
                configJson: H,
                isAbsoluteURL: !1
            };
            let Ne = [];
            {
                let ke = Be(H, Ce);
                Array.isArray(ke) && (Ne = ke), typeof ke == "string" && (Ne = ke.replace(/ /g, "").split(","))
            }
            const we = ve("gc");
            if (we && Array.isArray(Ne)) try {
                Ne = [Ne[parseInt(we) - 1]]
            } catch (ke) {
                Logger$1.error("Specific GC Index is out of bounds:", Ne, "->", parseInt(we)), Logger$1.error(ke)
            }
            return {
                baseUrlPath: ce(Re(H.baseURL)),
                domains: Ne,
                capturedString: Ce,
                url: Y,
                configJson: H,
                isAbsoluteURL: !1
            }
        },
        currentQueryString: y,
        userScene: x
    }
})();
var LIVE_STREAMS_PLAYERS = (r => (r.FLV_PLAYER = "AbFlvplayer", r.J_P = "jessibucaPlayer", r.J_P_PRP = "jessibucaPlayerPro", r))(LIVE_STREAMS_PLAYERS || {});
const useFlvPlayer = () => {
    React.useState(!1);
    const [r, R] = React.useState(null), y = React.useCallback(() => new Promise(async (N, L) => {
        Global.flvInited || (await B(), Logger$1.warn("presetAplayer done")), FlvPlayer.instants || (FlvPlayer.instants = []);
        let O = new FlvPlayer;
        O.start(""), O.audioResume(), FlvPlayer.instants.push(O), N(O)
    }), []), E = React.useCallback(async () => {
        Global.flvInited || (await B(), Logger$1.warn("checkPlayerSetUp"))
    }, []), C = React.useCallback(() => {
        let N = new FlvPlayer;

        function L(O, D) {
            return Math.floor(Math.random() * (D - O + 1)) + O
        }

        return N.playerId = L(1, 1e3), N.audioResume(), Logger$1.warn("Create a new video player", N.playerId), N
    }, []), x = React.useCallback(async () => new Promise(async (N, L) => {
        await E(), FlvPlayer.instants || (FlvPlayer.instants = []);
        let O = FlvPlayer.instants.pop();
        O || (O = new FlvPlayer, Logger$1.info("Create a new video player"), O.audioResume()), N(O)
    }), [E]), B = React.useCallback(async () => {
        Global.flvInited || (Logger$1.info("Init FlvPlayer"), await FlvPlayer.asyncLoad(), /(Android)/i.test(navigator.userAgent) && FlvPlayer.activeAudioEngine(!0), Global.flvInited = !0)
    }, []);
    return {flvPlayer: r, setUpFlv: B, presetAplayer: y, getAplayer: C, getAplayerAsync: x}
}, defaultPlayer = {
    userId: -1,
    userName: "Name",
    loginTime: "",
    amount: 0,
    currency: 1,
    nickname: "",
    pendingNickname: "",
    approveNicknameStatus: -1,
    totalBets: 0,
    isFreeOfCommission: !0
}, defaultUser = {
    player: {...defaultPlayer},
    handicapId: -1,
    supportHalls: [],
    amount: 0,
    exchangeRate: 1,
    betLimitObject: [],
    totalBetInfos: {}
}, UserInfoContext = React.createContext([defaultUser, () => {
}]), UserInfoProvider = r => {
    const [R, y] = React.useState({...defaultUser});
    return jsx(UserInfoContext.Provider, {value: [R, y], children: r.children})
};
var THEME = (r => (r.LIGHT = "light", r.DARK = "dark", r))(THEME || {}),
    BB_PLAY_TYPE = (r => (r[r.EQUAL = 0] = "EQUAL", r[r.DOUBLE = 1] = "DOUBLE", r[r.SUPER = 2] = "SUPER", r))(BB_PLAY_TYPE || {});
const defaultMultiPlayFilter = Object.fromEntries(["sexy", "classic"].concat(Object.keys(GameType).filter(r => !Number.isNaN(parseInt(r)))).concat(Object.values(AltGameType).filter(r => r !== "")).map(r => [r, !0])),
    defaultSetting = {
        showBettingStatistics: !0,
        showConfirmedBetAmounts: !0,
        noCommission: !1,
        multiPlayFilter: defaultMultiPlayFilter,
        multiPlayBlacklist: [],
        multiPlayFavorites: [],
        bullbullPlayType: 2,
        baccaratBetTypes: {},
        systemSoundOn: !0,
        liveSoundOn: !0,
        scorecards: "dark",
        customChips: []
    },
    storageSetting = Object.assign({...defaultSetting}, JSON.parse(localStorage.getItem("settings") || "null") || {...defaultSetting}),
    SettingsContext = React.createContext({}), settingsReducer = (r, R) => ({...r, [R.key]: R.newValue}),
    SettingsProvider = r => {
        const [R, y] = React.useReducer(settingsReducer, storageSetting), [E] = React.useContext(UserInfoContext),
            C = React.useCallback((x, B) => y({key: x, newValue: B}), []);
        return React.useEffect(() => {
            localStorage.setItem("settings", JSON.stringify(R))
        }, [R]), React.useEffect(() => {
            E.player.isFreeOfCommission || y({key: "noCommission", newValue: !1})
        }, [E]), React.useEffect(() => {
            const x = {...R.multiPlayFilter};
            ((N, L) => {
                for (let O in N) L.hasOwnProperty(O) || (L[O] = N[O]);
                for (let O in L) N.hasOwnProperty(O) || delete L[O]
            })(defaultMultiPlayFilter, x), y({key: "multiPlayFilter", newValue: x})
        }, []), jsx(SettingsContext.Provider, {value: {settings: R, changeSetting: C}, children: r.children})
    };
var GLC_CLASS_NAME_TYPE = (r => (r.FILL_WIDTH = "width100pc", r.FILL_HEIGHT = "height100pc", r.FULL_FILL = "wH100pc", r.NONE = "", r))(GLC_CLASS_NAME_TYPE || {});
const useGlCcontext = () => {
    let [r, R] = React.useState(!1), [y, E] = React.useState(!1);
    return {
        isEnable: r,
        setEnable: R,
        setUpClassName: (x, B = {
            appendedClasses: "",
            dyAppendedClasses: "",
            blend: !0
        }) => r ? `${B.appendedClasses} ${x}` : `${B.appendedClasses} ${B.dyAppendedClasses}`,
        isVirtualKeyboardOpen: y,
        setVirtualKeyboardOpen: E
    }
};
let GamesLayoutContainerContext = React.createContext({});
const useSystemModal = () => {
    let [r, R] = React.useState(!1), [y, E] = React.useState(), [C, x] = React.useState("default"),
        B = React.useRef(() => {
        }), N = React.useRef(() => {
        }), L = React.useRef(() => {
        }), [O, D] = React.useState(!1), [z, F] = React.useState(!1), [_e, Y] = React.useState(""), [H, me] = React.useState(!1), [ce, ie] = React.useState(!1),
        Be = React.useRef(!1), ve = we => {
            let {
                modalLayout: Me,
                confirmButtonHandle: ke,
                xButtonHandle: Fe,
                canselButtonHandle: $e,
                isAutoClose: Ve,
                isClosingByOutside: Je,
                content: Qe,
                closeByAnime: Ze = !1,
                msgPlaceholder: qe,
                msgArgs: ze
            } = we;
            R(!r), Be.current || (Be.current = !Be.current, ie(Be.current)), me(Ze), Qe && (qe && ze && (Qe = Helper.formatMessage(Qe, qe, ze)), Y(Qe)), Ve != null && D(Ve), Je != null && F(Je), Me && E(Me), ke && (B.current = ke), Fe && (N.current = Fe), $e && (L.current = $e)
        }, Re = () => {
            Be.current = !1, ie(!1)
        };
    return {
        content: _e,
        closingByOutSide: () => {
            z && Re()
        },
        closeByAnime: H,
        autoClose: () => {
            O && Re()
        },
        openSystemModal: ve,
        forceClose: Re,
        systemModalType: C,
        systemModalConfirmCb: B,
        systemModalxButtonHandleCb: N,
        systemModalxCancelHandleCb: L,
        modalLayout: y,
        isOpen: Be,
        isOpenState: ce
    }
}, defaultReactPortalProps = {wrapperId: "react-portal"}, ReactPortal = ({children: r, wrapperId: R}) => {
    const [y, E] = React.useState(null);
    return React.useLayoutEffect(() => {
        let C = document.getElementById(R), x = !1;
        if (!C) {
            x = !0;
            const B = document.createElement("div");
            B.setAttribute("id", R), document.body.appendChild(B), C = B
        }
        return E(C), () => {
            x && (C != null && C.parentNode) && C.parentNode.removeChild(C)
        }
    }, [R]), y === null ? null : ReactDOM.createPortal(r, y)
};
ReactPortal.defaultProps = defaultReactPortalProps;
const SystemModal = () => {
    let {isOpen: r, modalLayout: R, isOpenState: y} = React.useContext(SystemModalContext);
    return y ? jsx(ReactPortal, {wrapperId: "react-portal-modal-container", children: R}) : null
};
let SystemModalContext = React.createContext({}),
    SystemModalProvider = ({children: r}) => jsxs(SystemModalContext.Provider, {
        value: {...useSystemModal()},
        children: [jsx(SystemModal, {}), r]
    });
const MAX_ASPECT_RATIO_PORTRAIT_LONG = 13 / 25.5, MAX_ASPECT_RATIO_PORTRAIT_SHORT = 3 / 4,
    MAX_WIDTH_SMALL_LANDSCAPE = 800, MAX_HEIGHT_SMALL_LANDSCAPE = 400,
    isMobile$1 = /Android|webOS|iPhone|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent),
    isDesktop$1 = !isMobile$1,
    isIPad = /iPad/i.test(navigator.userAgent) || /Macintosh/i.test(navigator.userAgent) && navigator.maxTouchPoints > 1,
    isHonor = /Harmonyos/i.test(navigator.userAgent), useDeviceOrientation = () => {
        const r = React.useCallback(() => {
            C()
        }, []), R = React.useCallback(() => {
            C()
        }, []), y = () => document.documentElement.clientWidth / document.documentElement.clientHeight, E = () => {
            let O = "large-landscape";
            return y() <= MAX_ASPECT_RATIO_PORTRAIT_LONG ? O = "long-portrait" : y() <= MAX_ASPECT_RATIO_PORTRAIT_SHORT ? O = "short-portrait" : (document.documentElement.clientWidth <= MAX_WIDTH_SMALL_LANDSCAPE || document.documentElement.clientHeight <= MAX_HEIGHT_SMALL_LANDSCAPE) && (O = "small-landscape"), O
        }, C = () => {
            B(E()), L(isDesktop$1 || x.includes("landscape"))
        }, [x, B] = React.useState(E()), [N, L] = React.useState(isDesktop$1 || x.includes("landscape"));
        return React.useEffect(() => (window.addEventListener("orientationchange", r), window.addEventListener("resize", R), r(), R(), () => {
            window.removeEventListener("orientationchange", r), window.removeEventListener("resize", R)
        }), []), {orientation: x, isForceLandscape: N, aspectRatio: y}
    };

function useThrottle(r, R) {
    const y = React.useRef(null);
    React.useEffect(() => () => {
        y.current && clearTimeout(y.current)
    }, []);

    function E(...C) {
        y.current && clearTimeout(y.current), y.current = setTimeout(() => {
            r(...C)
        }, R)
    }

    return E
}

function useTimerWithToggle(r, R, y) {
    const E = React.useRef(r), C = React.useRef(0), x = React.useRef(null);
    React.useEffect(() => {
        E.current = r
    }, [r]);
    const B = () => {
        !x.current && C.current < y && (x.current = setInterval(() => {
            E.current(), C.current++, C.current >= y && N()
        }, R))
    }, N = () => {
        x.current && (window.clearInterval(x.current), x.current = null)
    };
    return {startTimer: B, stopTimer: N}
}

const useRerender = () => {
        const [r, R] = React.useState(0), {orientation: y} = useDeviceOrientation();
        return React.useEffect(() => {
            const C = () => {
                const x = document.documentElement.clientHeight, B = document.documentElement.clientWidth,
                    N = document.body.clientWidth, L = document.body.clientHeight;
                setTimeout(() => {
                    Logger$1.info(`Screen Resolution: 
 clientWH - ${B}x${x} 
 bodyWH - ${N}x${L} 
 innerWH${window.innerWidth}x${window.innerHeight} 
 ${y}`), R(O => O += 1)
                }, 0)
            };
            return window.addEventListener("resize", C), () => {
                window.removeEventListener("resize", C)
            }
        }, []), {rerender: r}
    }, LOADING_BG = window.__dynamic_base__ + "/assets/login.f851625b.jpg",
    DEMO_1_BANNER = window.__dynamic_base__ + "/assets/demo_banner_1.251f7e0b.jpg",
    DEMO_4 = window.__dynamic_base__ + "/assets/demo_4.06347e4e.png",
    DEMO_3 = window.__dynamic_base__ + "/assets/demo_3.a4924e1e.png",
    DEMO_2 = window.__dynamic_base__ + "/assets/demo_2.292aa8f5.png",
    DEMO_1 = window.__dynamic_base__ + "/assets/demo_1.8a47e570.png",
    DEMO_1_FEATURE = window.__dynamic_base__ + "/assets/demo_featuregame_1.aecf7b14.jpg",
    DEMO_2_FEATURE = window.__dynamic_base__ + "/assets/demo_featuregame_2.c3a0a723.jpg",
    MAINTENANCE_BG = window.__dynamic_base__ + "/assets/maintenance.609e124c.jpg",
    CEA = window.__dynamic_base__ + "/assets/cea.298e54ff.png",
    GLC = window.__dynamic_base__ + "/assets/glc.ca8a19b1.png",
    LOGIN_PAGE_BG = window.__dynamic_base__ + "/assets/login.f851625b.jpg",
    SPLASH_SCREEN_BG_L = window.__dynamic_base__ + "/assets/insurancebaccarat_zh_cn.ec3d1f7f.jpg",
    SPLASH_SCREEN_BG_P = window.__dynamic_base__ + "/assets/GameLoadingBg_p.1076691f.jpg",
    SPLASH_SCREEN_LOGO = window.__dynamic_base__ + "/assets/BaccaratLogo.1390d406.png",
    BG_LOADING_LOGO = window.__dynamic_base__ + "/assets/ERV-GameLogo-Classic-Baccarat.ef581db2.png",
    BG_BLACK = window.__dynamic_base__ + "/assets/black.fc513791.png",
    gamehall_andar_bahar_disabled = window.__dynamic_base__ + "/assets/gamehall_andar_bahar_disabled.a9777a63.svg",
    gamehall_andar_bahar = window.__dynamic_base__ + "/assets/gamehall_andar_bahar.98e04d32.svg",
    gamehall_baccarat_disabled = window.__dynamic_base__ + "/assets/gamehall_baccarat_disabled.1063591a.svg",
    gamehall_baccarat = window.__dynamic_base__ + "/assets/gamehall_baccarat.32842026.svg",
    gamehall_blackjack_disabled = window.__dynamic_base__ + "/assets/gamehall_blackjack_disabled.f382bb09.svg",
    gamehall_blackjack = window.__dynamic_base__ + "/assets/gamehall_blackjack.b824f9a6.svg",
    gamehall_bull_bull_disabled = window.__dynamic_base__ + "/assets/gamehall_bull_bull_disabled.3623169b.svg",
    gamehall_bull_bull = window.__dynamic_base__ + "/assets/gamehall_bull_bull.1c44a6df.svg",
    gamehall_casino_war_disabled = window.__dynamic_base__ + "/assets/gamehall_casino_war_disabled.260c841e.svg",
    gamehall_casino_war = window.__dynamic_base__ + "/assets/gamehall_casino_war.d8185a6c.svg",
    gamehall_dragon_tiger_disabled = window.__dynamic_base__ + "/assets/gamehall_dragon_tiger_disabled.3edbaf7f.svg",
    gamehall_dragon_tiger = window.__dynamic_base__ + "/assets/gamehall_dragon_tiger.a8a8fd57.svg",
    gamehall_fpc_disabled = window.__dynamic_base__ + "/assets/gamehall_fpc_disabled.ec5033ff.svg",
    gamehall_fpc = window.__dynamic_base__ + "/assets/gamehall_fpc.8fee849e.svg",
    gamehall_game_hall_disabled = window.__dynamic_base__ + "/assets/gamehall_game_hall_disabled.84725146.svg",
    gamehall_game_hall = window.__dynamic_base__ + "/assets/gamehall_game_hall.c02af45c.svg",
    gamehall_hi_lo_disabled = window.__dynamic_base__ + "/assets/gamehall_hi_lo_disabled.911c0a3e.svg",
    gamehall_hi_lo = window.__dynamic_base__ + "/assets/gamehall_hi_lo.6915c926.svg",
    gamehall_multi_hall_disabled = window.__dynamic_base__ + "/assets/gamehall_multi_hall_disabled.533387b1.svg",
    gamehall_multi_hall = window.__dynamic_base__ + "/assets/gamehall_multi_hall.ee32485f.svg",
    gamehall_pokdeng_disabled = window.__dynamic_base__ + "/assets/gamehall_pokdeng_disabled.e7f5c81f.svg",
    gamehall_pokdeng = window.__dynamic_base__ + "/assets/gamehall_pokdeng.f2f1e708.svg",
    gamehall_roulette_disabled = window.__dynamic_base__ + "/assets/gamehall_roulette_disabled.49a35149.svg",
    gamehall_roulette = window.__dynamic_base__ + "/assets/gamehall_roulette.ab286631.svg",
    gamehall_sicbo_disabled = window.__dynamic_base__ + "/assets/gamehall_sicbo_disabled.5f1a3ba0.svg",
    gamehall_sicbo = window.__dynamic_base__ + "/assets/gamehall_sicbo.9cc49c36.svg",
    gamehall_teen_patti_disabled = window.__dynamic_base__ + "/assets/gamehall_teen_patti_disabled.55a45daf.svg",
    gamehall_teen_patti = window.__dynamic_base__ + "/assets/gamehall_teen_patti.79466748.svg",
    gamehall_three_pictures_disabled = window.__dynamic_base__ + "/assets/gamehall_three_pictures_disabled.1e6f3d2f.svg",
    gamehall_three_pictures = window.__dynamic_base__ + "/assets/gamehall_three_pictures.a9a2ef77.svg",
    gamehall_uth_disabled = window.__dynamic_base__ + "/assets/gamehall_uth_disabled.f16b9611.svg",
    gamehall_uth = window.__dynamic_base__ + "/assets/gamehall_uth.ecf415a0.svg",
    gamehall_win3cards_disabled = window.__dynamic_base__ + "/assets/gamehall_win3cards_disabled.0f2f051c.svg",
    gamehall_win3cards = window.__dynamic_base__ + "/assets/gamehall_win3cards.88665674.svg",
    gamehall_sictan_disabled = window.__dynamic_base__ + "/assets/gamehall_sictan_disabled.9ed48b31.svg",
    gamehall_sictan = window.__dynamic_base__ + "/assets/gamehall_sictan.00627bf6.svg",
    andar_bahar_logo_en = window.__dynamic_base__ + "/assets/andar_bahar.950bf981.png",
    bull_bull_logo_en = window.__dynamic_base__ + "/assets/bull_bull.f4857341.png",
    baccarat_logo_en = window.__dynamic_base__ + "/assets/baccarat.d14cea80.png",
    classic_baccarat_logo_en = window.__dynamic_base__ + "/assets/classic_baccarat.aa8c0167.png",
    quick_baccarat_logo_en = window.__dynamic_base__ + "/assets/quick_baccarat.80bdc5c0.png",
    sweetie_baccarat_logo_en = window.__dynamic_base__ + "/assets/sweetie_baccarat.ace6fe6a.png",
    see_baccarat_logo_en = window.__dynamic_base__ + "/assets/see_baccarat.05c34adc.png",
    dragon_tiger_logo_en = window.__dynamic_base__ + "/assets/dragon_tiger.56fccc5f.png",
    hi_lo_logo_en = window.__dynamic_base__ + "/assets/hi_lo.0da1d14a.png",
    insurance_baccarat_logo_en = window.__dynamic_base__ + "/assets/insurance_baccarat.8651980c.png",
    vip_baccarat_logo_en = window.__dynamic_base__ + "/assets/vip_baccarat.a3a4b5b3.png",
    pokdeng_logo_en = window.__dynamic_base__ + "/assets/pokdeng.5c943352.png",
    roulette_logo_en = window.__dynamic_base__ + "/assets/roulette.c3a0c176.png",
    sicbo_logo_en = window.__dynamic_base__ + "/assets/sicbo.5a5820d9.png",
    teen_patti_logo_en = window.__dynamic_base__ + "/assets/teen_patti.bc614db0.png",
    three_pictures_logo_en = window.__dynamic_base__ + "/assets/three_pictures.6f318999.png",
    two_sides_pokdeng_logo_en = window.__dynamic_base__ + "/assets/two_sides_pokdeng.d7a7c451.png",
    uth_logo_en = window.__dynamic_base__ + "/assets/uth.d9d92fbe.png",
    win3cards_logo_en = window.__dynamic_base__ + "/assets/win3cards.1890b31e.png",
    casino_war_logo_en = window.__dynamic_base__ + "/assets/casino_war.dd7d38bd.png",
    blackjack_logo_en = window.__dynamic_base__ + "/assets/blackjack.0f6bf40f.png",
    fpc_logo_en = window.__dynamic_base__ + "/assets/fpc.147b813d.png",
    sictan_logo_en = window.__dynamic_base__ + "/assets/sictan.d24f1db7.png",
    xoc_dia_logo_en = window.__dynamic_base__ + "/assets/xoc_dia.41de1b25.png",
    andar_bahar_logo_es = window.__dynamic_base__ + "/assets/andar_bahar.29de7e49.png",
    bull_bull_logo_es = window.__dynamic_base__ + "/assets/bull_bull.df51b5cb.png",
    baccarat_logo_es = window.__dynamic_base__ + "/assets/baccarat.d14cea80.png",
    classic_baccarat_logo_es = window.__dynamic_base__ + "/assets/classic_baccarat.d1a1737d.png",
    quick_baccarat_logo_es = window.__dynamic_base__ + "/assets/quick_baccarat.6548e387.png",
    sexy_baccarat_logo_es = window.__dynamic_base__ + "/assets/sweetie_baccarat.ace6fe6a.png",
    see_baccarat_logo_es = window.__dynamic_base__ + "/assets/see_baccarat.20ad2690.png",
    dragon_tiger_logo_es = window.__dynamic_base__ + "/assets/dragon_tiger.0b60f1e8.png",
    hi_lo_logo_es = window.__dynamic_base__ + "/assets/hi_lo.d969dc50.png",
    insurance_baccarat_logo_es = window.__dynamic_base__ + "/assets/insurance_baccarat.14691988.png",
    vip_baccarat_logo_es = window.__dynamic_base__ + "/assets/vip_baccarat.a3a4b5b3.png",
    pokdeng_logo_es = window.__dynamic_base__ + "/assets/pokdeng.21c3b81f.png",
    roulette_logo_es = window.__dynamic_base__ + "/assets/roulette.e66b2402.png",
    sicbo_logo_es = window.__dynamic_base__ + "/assets/sicbo.1a6692cf.png",
    teen_patti_logo_es = window.__dynamic_base__ + "/assets/teen_patti.62d242d1.png",
    three_pictures_logo_es = window.__dynamic_base__ + "/assets/three_pictures.57b2d804.png",
    two_sides_pokdeng_logo_es = window.__dynamic_base__ + "/assets/two_sides_pokdeng.e6f01d05.png",
    uth_logo_es = window.__dynamic_base__ + "/assets/uth.b4792ebc.png",
    win3cards_logo_es = window.__dynamic_base__ + "/assets/win3cards.01e7f96d.png",
    casino_war_logo_es = window.__dynamic_base__ + "/assets/casino_war.25b0c072.png",
    blackjack_logo_es = window.__dynamic_base__ + "/assets/blackjack.f522096d.png",
    fpc_logo_es = window.__dynamic_base__ + "/assets/fpc.5a7fe838.png",
    sictan_logo_es = window.__dynamic_base__ + "/assets/sictan.7b05b9a4.png",
    xoc_dia_logo_es = window.__dynamic_base__ + "/assets/xoc_dia.10eb8033.png",
    andar_bahar_logo_pt = window.__dynamic_base__ + "/assets/andar_bahar.950bf981.png",
    bull_bull_logo_pt = window.__dynamic_base__ + "/assets/bull_bull.8d2ea70f.png",
    baccarat_logo_pt = window.__dynamic_base__ + "/assets/baccarat.a12d5296.png",
    classic_baccarat_logo_pt = window.__dynamic_base__ + "/assets/classic_baccarat.e683bf6e.png",
    quick_baccarat_logo_pt = window.__dynamic_base__ + "/assets/quick_baccarat.50bb2830.png",
    sexy_baccarat_logo_pt = window.__dynamic_base__ + "/assets/sexy_baccarat.14f71ba1.png",
    see_baccarat_logo_pt = window.__dynamic_base__ + "/assets/see_baccarat.decbae0a.png",
    dragon_tiger_logo_pt = window.__dynamic_base__ + "/assets/dragon_tiger.0fe43c3a.png",
    hi_lo_logo_pt = window.__dynamic_base__ + "/assets/hi_lo.0da1d14a.png",
    insurance_baccarat_logo_pt = window.__dynamic_base__ + "/assets/insurance_baccarat.895b958a.png",
    vip_baccarat_logo_pt = window.__dynamic_base__ + "/assets/vip_baccarat.fa9194b0.png",
    pokdeng_logo_pt = window.__dynamic_base__ + "/assets/pokdeng.28228464.png",
    roulette_logo_pt = window.__dynamic_base__ + "/assets/roulette.4fade4fe.png",
    sicbo_logo_pt = window.__dynamic_base__ + "/assets/sicbo.5a5820d9.png",
    teen_patti_logo_pt = window.__dynamic_base__ + "/assets/teen_patti.bc614db0.png",
    three_pictures_logo_pt = window.__dynamic_base__ + "/assets/three_pictures.defbd803.png",
    two_sides_pokdeng_logo_pt = window.__dynamic_base__ + "/assets/two_sides_pokdeng.3aee90fd.png",
    win3cards_logo_pt = window.__dynamic_base__ + "/assets/win3cards.44310f4f.png",
    casino_war_logo_pt = window.__dynamic_base__ + "/assets/casino_war.25e65852.png",
    blackjack_logo_pt = window.__dynamic_base__ + "/assets/blackjack.1c3ff83c.png",
    fpc_logo_pt = window.__dynamic_base__ + "/assets/fpc.35111caf.png",
    sictan_logo_pt = window.__dynamic_base__ + "/assets/sictan.d24f1db7.png",
    xoc_dia_logo_pt = window.__dynamic_base__ + "/assets/xoc_dia.41de1b25.png",
    see_baccarat_logo_ptbr = window.__dynamic_base__ + "/assets/see_baccarat.d37ce24f.png",
    two_sides_pokdeng_logo_ptbr = window.__dynamic_base__ + "/assets/two_sides_pokdeng.9cf4a890.png",
    andar_bahar_logo_tc = window.__dynamic_base__ + "/assets/andar_bahar.4d8e9817.png",
    bull_bull_logo_tc = window.__dynamic_base__ + "/assets/bull_bull.34c0a5e6.png",
    baccarat_logo_tc = window.__dynamic_base__ + "/assets/baccarat.d436af6a.png",
    classic_baccarat_logo_tc = window.__dynamic_base__ + "/assets/classic_baccarat.a9d4de4f.png",
    quick_baccarat_logo_tc = window.__dynamic_base__ + "/assets/quick_baccarat.469fe1d6.png",
    sexy_baccarat_logo_tc = window.__dynamic_base__ + "/assets/sexy_baccarat.46081af1.png",
    see_baccarat_logo_tc = window.__dynamic_base__ + "/assets/see_baccarat.0b1d0206.png",
    dragon_tiger_logo_tc = window.__dynamic_base__ + "/assets/dragon_tiger.103ca99c.png",
    insurance_baccarat_logo_tc = window.__dynamic_base__ + "/assets/insurance_baccarat.b47f245f.png",
    vip_baccarat_logo_tc = window.__dynamic_base__ + "/assets/vip_baccarat.a8648e13.png",
    pokdeng_logo_tc = window.__dynamic_base__ + "/assets/pokdeng.cf1170c5.png",
    roulette_logo_tc = window.__dynamic_base__ + "/assets/roulette.5d475a71.png",
    sicbo_logo_tc = window.__dynamic_base__ + "/assets/sicbo.0d2075ab.png",
    teen_patti_logo_tc = window.__dynamic_base__ + "/assets/teen_patti.4c7b3f9c.png",
    three_pictures_logo_tc = window.__dynamic_base__ + "/assets/three_pictures.8a7a8e5e.png",
    two_sides_pokdeng_logo_tc = window.__dynamic_base__ + "/assets/two_sides_pokdeng.6898489a.png",
    uth_logo_tc = window.__dynamic_base__ + "/assets/uth.79f072a0.png",
    win3cards_logo_tc = window.__dynamic_base__ + "/assets/win3cards.54395fe3.png",
    casino_war_logo_tc = window.__dynamic_base__ + "/assets/casino_war.5dae1213.png",
    blackjack_logo_tc = window.__dynamic_base__ + "/assets/blackjack.fc9f0fc7.png",
    fpc_logo_tc = window.__dynamic_base__ + "/assets/fpc.786783c3.png",
    sictan_logo_tc = window.__dynamic_base__ + "/assets/sictan.7e84d2e3.png",
    xoc_dia_logo_tc = window.__dynamic_base__ + "/assets/xoc_dia.a8e1a8d5.png",
    andar_bahar_logo_sc = window.__dynamic_base__ + "/assets/andar_bahar.de9fdc54.png",
    bull_bull_logo_sc = window.__dynamic_base__ + "/assets/bull_bull.34c0a5e6.png",
    baccarat_logo_sc = window.__dynamic_base__ + "/assets/baccarat.a67ec093.png",
    classic_baccarat_logo_sc = window.__dynamic_base__ + "/assets/classic_baccarat.8dedab5d.png",
    quick_baccarat_logo_sc = window.__dynamic_base__ + "/assets/quick_baccarat.55441786.png",
    sexy_baccarat_logo_sc = window.__dynamic_base__ + "/assets/sexy_baccarat.72280e53.png",
    see_baccarat_logo_sc = window.__dynamic_base__ + "/assets/see_baccarat.cd648fca.png",
    dragon_tiger_logo_sc = window.__dynamic_base__ + "/assets/dragon_tiger.30f49259.png",
    insurance_baccarat_logo_sc = window.__dynamic_base__ + "/assets/insurance_baccarat.dbf6145f.png",
    vip_baccarat_logo_sc = window.__dynamic_base__ + "/assets/vip_baccarat.ac4b8582.png",
    pokdeng_logo_sc = window.__dynamic_base__ + "/assets/pokdeng.d19f5318.png",
    roulette_logo_sc = window.__dynamic_base__ + "/assets/roulette.8b241679.png",
    sicbo_logo_sc = window.__dynamic_base__ + "/assets/sicbo.6e94c146.png",
    teen_patti_logo_sc = window.__dynamic_base__ + "/assets/teen_patti.4c7b3f9c.png",
    three_pictures_logo_sc = window.__dynamic_base__ + "/assets/three_pictures.8a7a8e5e.png",
    two_sides_pokdeng_logo_sc = window.__dynamic_base__ + "/assets/two_sides_pokdeng.f33371ec.png",
    uth_logo_sc = window.__dynamic_base__ + "/assets/uth.c84a2b06.png",
    win3cards_logo_sc = window.__dynamic_base__ + "/assets/win3cards.54395fe3.png",
    casino_war_logo_sc = window.__dynamic_base__ + "/assets/casino_war.46ab9ab2.png",
    blackjack_logo_sc = window.__dynamic_base__ + "/assets/blackjack.bc36fad6.png",
    fpc_logo_sc = window.__dynamic_base__ + "/assets/fpc.37a8687a.png",
    sictan_logo_sc = window.__dynamic_base__ + "/assets/sictan.1d1635bb.png",
    xoc_dia_logo_sc = window.__dynamic_base__ + "/assets/xoc_dia.a8e1a8d5.png",
    andar_bahar_logo_kr = window.__dynamic_base__ + "/assets/andar_bahar.449c7100.png",
    bull_bull_logo_kr = window.__dynamic_base__ + "/assets/bull_bull.a22acbba.png",
    baccarat_logo_kr = window.__dynamic_base__ + "/assets/baccarat.22d793c7.png",
    classic_baccarat_logo_kr = window.__dynamic_base__ + "/assets/classic_baccarat.b0e06509.png",
    quick_baccarat_logo_kr = window.__dynamic_base__ + "/assets/quick_baccarat.4fe6490a.png",
    sexy_baccarat_logo_kr = window.__dynamic_base__ + "/assets/sexy_baccarat.6076a64a.png",
    see_baccarat_logo_kr = window.__dynamic_base__ + "/assets/see_baccarat.0659c0c1.png",
    dragon_tiger_logo_kr = window.__dynamic_base__ + "/assets/dragon_tiger.7e9ce43f.png",
    hi_lo_logo_kr = window.__dynamic_base__ + "/assets/hi_lo.ddb3982e.png",
    insurance_baccarat_logo_kr = window.__dynamic_base__ + "/assets/insurance_baccarat.5de3f8bd.png",
    vip_baccarat_logo_kr = window.__dynamic_base__ + "/assets/vip_baccarat.a3c9b8d0.png",
    pokdeng_logo_kr = window.__dynamic_base__ + "/assets/pokdeng.9b9d433b.png",
    roulette_logo_kr = window.__dynamic_base__ + "/assets/roulette.482b80d5.png",
    sicbo_logo_kr = window.__dynamic_base__ + "/assets/sicbo.b2e5e730.png",
    teen_patti_logo_kr = window.__dynamic_base__ + "/assets/teen_patti.05c9c7b0.png",
    three_pictures_logo_kr = window.__dynamic_base__ + "/assets/three_pictures.8804a72c.png",
    two_sides_pokdeng_logo_kr = window.__dynamic_base__ + "/assets/two_sides_pokdeng.ba0528ba.png",
    uth_logo_kr = window.__dynamic_base__ + "/assets/uth.298467f7.png",
    win3cards_logo_kr = window.__dynamic_base__ + "/assets/win3cards.797e80b2.png",
    casino_war_logo_kr = window.__dynamic_base__ + "/assets/casino_war.0a00365b.png",
    blackjack_logo_kr = window.__dynamic_base__ + "/assets/blackjack.f40238ef.png",
    fpc_logo_kr = window.__dynamic_base__ + "/assets/fpc.a3068cce.png",
    sictan_logo_kr = window.__dynamic_base__ + "/assets/sictan.42875cb6.png",
    xoc_dia_logo_kr = window.__dynamic_base__ + "/assets/xoc_dia.3e2df7b1.png",
    andar_bahar_logo_thai = window.__dynamic_base__ + "/assets/andar_bahar.aff4974a.png",
    bull_bull_logo_thai = window.__dynamic_base__ + "/assets/bull_bull.8255f407.png",
    baccarat_logo_thai = window.__dynamic_base__ + "/assets/baccarat.69e32388.png",
    classic_baccarat_logo_thai = window.__dynamic_base__ + "/assets/classic_baccarat.7c98d40b.png",
    quick_baccarat_logo_thai = window.__dynamic_base__ + "/assets/quick_baccarat.81438f89.png",
    sexy_baccarat_logo_thai = window.__dynamic_base__ + "/assets/sexy_baccarat.9d383af1.png",
    see_baccarat_logo_thai = window.__dynamic_base__ + "/assets/see_baccarat.808480ec.png",
    dragon_tiger_logo_thai = window.__dynamic_base__ + "/assets/dragon_tiger.32f3e075.png",
    hi_lo_logo_thai = window.__dynamic_base__ + "/assets/hi_lo.58c76351.png",
    insurance_baccarat_logo_thai = window.__dynamic_base__ + "/assets/insurance_baccarat.c316b1d0.png",
    vip_baccarat_logo_thai = window.__dynamic_base__ + "/assets/vip_baccarat.0b577ae8.png",
    pokdeng_logo_thai = window.__dynamic_base__ + "/assets/pokdeng.e5b893ad.png",
    roulette_logo_thai = window.__dynamic_base__ + "/assets/roulette.8ad7ddf4.png",
    sicbo_logo_thai = window.__dynamic_base__ + "/assets/sicbo.6a5e7f10.png",
    teen_patti_logo_thai = window.__dynamic_base__ + "/assets/teen_patti.c6d5354f.png",
    three_pictures_logo_thai = window.__dynamic_base__ + "/assets/three_pictures.40404c25.png",
    two_sides_pokdeng_logo_thai = window.__dynamic_base__ + "/assets/two_sides_pokdeng.7b78bbda.png",
    uth_logo_thai = window.__dynamic_base__ + "/assets/uth.e7532041.png",
    win3cards_logo_thai = window.__dynamic_base__ + "/assets/win3cards.f4450c00.png",
    casino_war_logo_thai = window.__dynamic_base__ + "/assets/casino_war.d1655bdd.png",
    blackjack_logo_thai = window.__dynamic_base__ + "/assets/blackjack.ff8199c7.png",
    fpc_logo_thai = window.__dynamic_base__ + "/assets/fpc.3fd14c18.png",
    sictan_logo_thai = window.__dynamic_base__ + "/assets/sictan.7b05b9a4.png",
    xoc_dia_logo_thai = window.__dynamic_base__ + "/assets/xoc_dia.10eb8033.png",
    andar_bahar_logo_hi = window.__dynamic_base__ + "/assets/andar_bahar.b9320e89.png",
    bull_bull_logo_hi = window.__dynamic_base__ + "/assets/bull_bull.7b076b37.png",
    baccarat_logo_hi = window.__dynamic_base__ + "/assets/baccarat.45f33b01.png",
    classic_baccarat_logo_hi = window.__dynamic_base__ + "/assets/classic_baccarat.9932c0d9.png",
    quick_baccarat_logo_hi = window.__dynamic_base__ + "/assets/quick_baccarat.9b590cf9.png",
    sexy_baccarat_logo_hi = window.__dynamic_base__ + "/assets/sexy_baccarat.2bcd11e8.png",
    see_baccarat_logo_hi = window.__dynamic_base__ + "/assets/see_baccarat.9f78f216.png",
    dragon_tiger_logo_hi = window.__dynamic_base__ + "/assets/dragon_tiger.8f9d01e9.png",
    hi_lo_logo_hi = window.__dynamic_base__ + "/assets/hi_lo.534ee8f7.png",
    insurance_baccarat_logo_hi = window.__dynamic_base__ + "/assets/insurance_baccarat.ec6f656b.png",
    vip_baccarat_logo_hi = window.__dynamic_base__ + "/assets/vip_baccarat.a92464da.png",
    pokdeng_logo_hi = window.__dynamic_base__ + "/assets/pokdeng.7c9ee485.png",
    roulette_logo_hi = window.__dynamic_base__ + "/assets/roulette.f3bdf81e.png",
    sicbo_logo_hi = window.__dynamic_base__ + "/assets/sicbo.a24ce6d2.png",
    teen_patti_logo_hi = window.__dynamic_base__ + "/assets/teen_patti.793fbbae.png",
    three_pictures_logo_hi = window.__dynamic_base__ + "/assets/three_pictures.56dd7cc0.png",
    two_sides_pokdeng_logo_hi = window.__dynamic_base__ + "/assets/two_sides_pokdeng.628ba172.png",
    uth_logo_hi = window.__dynamic_base__ + "/assets/uth.1de1681b.png",
    win3cards_logo_hi = window.__dynamic_base__ + "/assets/win3cards.1e9e6f57.png",
    casino_war_logo_hi = window.__dynamic_base__ + "/assets/casino_war.fbaced89.png",
    blackjack_logo_hi = window.__dynamic_base__ + "/assets/blackjack.0cc6a2db.png",
    fpc_logo_hi = window.__dynamic_base__ + "/assets/fpc.fa7468b3.png",
    sictan_logo_hi = window.__dynamic_base__ + "/assets/sictan.fa494a25.png",
    xoc_dia_logo_hi = window.__dynamic_base__ + "/assets/xoc_dia.7d9e4a82.png",
    andar_bahar_logo_id = window.__dynamic_base__ + "/assets/andar_bahar.29de7e49.png",
    bull_bull_logo_id = window.__dynamic_base__ + "/assets/bull_bull.f4857341.png",
    baccarat_logo_id = window.__dynamic_base__ + "/assets/baccarat.d14cea80.png",
    classic_baccarat_logo_id = window.__dynamic_base__ + "/assets/classic_baccarat.654ae8b3.png",
    quick_baccarat_logo_id = window.__dynamic_base__ + "/assets/quick_baccarat.b4f9a0f7.png",
    sexy_baccarat_logo_id = window.__dynamic_base__ + "/assets/sexy_baccarat.f7b6412e.png",
    see_baccarat_logo_id = window.__dynamic_base__ + "/assets/see_baccarat.0894707c.png",
    dragon_tiger_logo_id = window.__dynamic_base__ + "/assets/dragon_tiger.71bfc8c1.png",
    hi_lo_logo_id = window.__dynamic_base__ + "/assets/hi_lo.d969dc50.png",
    insurance_baccarat_logo_id = window.__dynamic_base__ + "/assets/insurance_baccarat.2ee64418.png",
    vip_baccarat_logo_id = window.__dynamic_base__ + "/assets/vip_baccarat.a3a4b5b3.png",
    pokdeng_logo_id = window.__dynamic_base__ + "/assets/pokdeng.1e0661e0.png",
    roulette_logo_id = window.__dynamic_base__ + "/assets/roulette.085684f6.png",
    sicbo_logo_id = window.__dynamic_base__ + "/assets/sicbo.1a6692cf.png",
    teen_patti_logo_id = window.__dynamic_base__ + "/assets/teen_patti.62d242d1.png",
    three_pictures_logo_id = window.__dynamic_base__ + "/assets/three_pictures.f19c044d.png",
    two_sides_pokdeng_logo_id = window.__dynamic_base__ + "/assets/two_sides_pokdeng.15cff25e.png",
    uth_logo_id = window.__dynamic_base__ + "/assets/uth.b4792ebc.png",
    win3cards_logo_id = window.__dynamic_base__ + "/assets/win3cards.c80d0734.png",
    casino_war_logo_id = window.__dynamic_base__ + "/assets/casino_war.d147f33d.png",
    blackjack_logo_id = window.__dynamic_base__ + "/assets/blackjack.27429cf4.png",
    fpc_logo_id = window.__dynamic_base__ + "/assets/fpc.65339382.png",
    sictan_logo_id = window.__dynamic_base__ + "/assets/sictan.ce65010c.png",
    xoc_dia_logo_id = window.__dynamic_base__ + "/assets/xoc_dia.10eb8033.png",
    andar_bahar_logo_ja = window.__dynamic_base__ + "/assets/andar_bahar.29de7e49.png",
    bull_bull_logo_ja = window.__dynamic_base__ + "/assets/bull_bull.8bad2890.png",
    baccarat_logo_ja = window.__dynamic_base__ + "/assets/baccarat.e02f5bdc.png",
    classic_baccarat_logo_ja = window.__dynamic_base__ + "/assets/classic_baccarat.ac3f7d68.png",
    quick_baccarat_logo_ja = window.__dynamic_base__ + "/assets/quick_baccarat.d40d8d1d.png",
    sexy_baccarat_logo_ja = window.__dynamic_base__ + "/assets/sexy_baccarat.4f78f4e7.png",
    see_baccarat_logo_ja = window.__dynamic_base__ + "/assets/see_baccarat.f1004e61.png",
    dragon_tiger_logo_ja = window.__dynamic_base__ + "/assets/dragon_tiger.71bbd239.png",
    hi_lo_logo_ja = window.__dynamic_base__ + "/assets/hi_lo.70a3348c.png",
    insurance_baccarat_logo_ja = window.__dynamic_base__ + "/assets/insurance_baccarat.6f531aa1.png",
    vip_baccarat_logo_ja = window.__dynamic_base__ + "/assets/vip_baccarat.c3cf0d6c.png",
    pokdeng_logo_ja = window.__dynamic_base__ + "/assets/pokdeng.63c3b441.png",
    roulette_logo_ja = window.__dynamic_base__ + "/assets/roulette.41b392d7.png",
    sicbo_logo_ja = window.__dynamic_base__ + "/assets/sicbo.b8f1e6bd.png",
    teen_patti_logo_ja = window.__dynamic_base__ + "/assets/teen_patti.45e721c4.png",
    three_pictures_logo_ja = window.__dynamic_base__ + "/assets/three_pictures.33337d73.png",
    two_sides_pokdeng_logo_ja = window.__dynamic_base__ + "/assets/two_sides_pokdeng.33441566.png",
    uth_logo_ja = window.__dynamic_base__ + "/assets/uth.732e4090.png",
    win3cards_logo_ja = window.__dynamic_base__ + "/assets/win3cards.f5fa1aed.png",
    casino_war_logo_ja = window.__dynamic_base__ + "/assets/casino_war.fd70c25c.png",
    blackjack_logo_ja = window.__dynamic_base__ + "/assets/blackjack.1b8ab1e5.png",
    fpc_logo_ja = window.__dynamic_base__ + "/assets/fpc.dda059c3.png",
    sictan_logo_ja = window.__dynamic_base__ + "/assets/sictan.8cbb022a.png",
    xoc_dia_logo_ja = window.__dynamic_base__ + "/assets/xoc_dia.551fbaa5.png",
    andar_bahar_logo_vi = window.__dynamic_base__ + "/assets/andar_bahar.02537cc0.png",
    bull_bull_logo_vi = window.__dynamic_base__ + "/assets/bull_bull.7c46a20b.png",
    baccarat_logo_vi = window.__dynamic_base__ + "/assets/baccarat.ba01bde3.png",
    classic_baccarat_logo_vi = window.__dynamic_base__ + "/assets/classic_baccarat.941a1edd.png",
    quick_baccarat_logo_vi = window.__dynamic_base__ + "/assets/quick_baccarat.b04224fb.png",
    sexy_baccarat_logo_vi = window.__dynamic_base__ + "/assets/sexy_baccarat.15ad61ad.png",
    see_baccarat_logo_vi = window.__dynamic_base__ + "/assets/see_baccarat.91ec40ef.png",
    dragon_tiger_logo_vi = window.__dynamic_base__ + "/assets/dragon_tiger.0d42d1ed.png",
    hi_lo_logo_vi = window.__dynamic_base__ + "/assets/hi_lo.d969dc50.png",
    insurance_baccarat_logo_vi = window.__dynamic_base__ + "/assets/insurance_baccarat.9b5c84fe.png",
    vip_baccarat_logo_vi = window.__dynamic_base__ + "/assets/vip_baccarat.40f188de.png",
    pokdeng_logo_vi = window.__dynamic_base__ + "/assets/pokdeng.fdbd457a.png",
    roulette_logo_vi = window.__dynamic_base__ + "/assets/roulette.085684f6.png",
    sicbo_logo_vi = window.__dynamic_base__ + "/assets/sicbo.1a6692cf.png",
    teen_patti_logo_vi = window.__dynamic_base__ + "/assets/teen_patti.62d242d1.png",
    three_pictures_logo_vi = window.__dynamic_base__ + "/assets/three_pictures.52891bca.png",
    two_sides_pokdeng_logo_vi = window.__dynamic_base__ + "/assets/two_sides_pokdeng.10c8d066.png",
    uth_logo_vi = window.__dynamic_base__ + "/assets/uth.b4792ebc.png",
    win3cards_logo_vi = window.__dynamic_base__ + "/assets/win3cards.92268bbb.png",
    casino_war_logo_vi = window.__dynamic_base__ + "/assets/casino_war.a1c02ef7.png",
    blackjack_logo_vi = window.__dynamic_base__ + "/assets/blackjack.3d4dbf83.png",
    fpc_logo_vi = window.__dynamic_base__ + "/assets/fpc.1500c2d3.png",
    sictan_logo_vi = window.__dynamic_base__ + "/assets/sictan.f3aa989e.png",
    xoc_dia_logo_vi = window.__dynamic_base__ + "/assets/xoc_dia.4f3f4e09.png";
let PRELOAD_IMAGES_LIST = {
    gamehall_three_pictures_disabled,
    gamehall_three_pictures,
    gamehall_uth_disabled,
    gamehall_uth,
    gamehall_win3cards_disabled,
    gamehall_win3cards,
    gamehall_roulette_disabled,
    gamehall_roulette,
    gamehall_sicbo_disabled,
    gamehall_sicbo,
    gamehall_teen_patti_disabled,
    gamehall_teen_patti,
    gamehall_game_hall_disabled,
    gamehall_game_hall,
    gamehall_hi_lo_disabled,
    gamehall_hi_lo,
    gamehall_multi_hall_disabled,
    gamehall_multi_hall,
    gamehall_pokdeng_disabled,
    gamehall_pokdeng,
    gamehall_dragon_tiger_disabled,
    gamehall_dragon_tiger,
    gamehall_fpc_disabled,
    gamehall_fpc,
    gamehall_casino_war,
    gamehall_casino_war_disabled,
    gamehall_bull_bull,
    gamehall_bull_bull_disabled,
    gamehall_blackjack,
    gamehall_blackjack_disabled,
    gamehall_andar_bahar_disabled,
    gamehall_andar_bahar,
    gamehall_baccarat_disabled,
    gamehall_baccarat,
    gamehall_sictan_disabled,
    gamehall_sictan,
    BG_BLACK,
    LOADING_BG,
    BG_LOADING_LOGO,
    LOGIN_PAGE_BG,
    BG: LOADING_BG,
    CEA,
    DEMO_1,
    DEMO_1_BANNER,
    SPLASH_SCREEN_BG_L,
    SPLASH_SCREEN_BG_P,
    SPLASH_SCREEN_LOGO
}, IMAGES = {
    BG: LOADING_BG,
    DEMO_1,
    DEMO_2,
    DEMO_3,
    DEMO_4,
    DEMO_1_FEATURE,
    DEMO_2_FEATURE,
    DEMO_1_BANNER,
    MAINTENANCE_BG,
    LOGO: "./logo.png",
    CEA,
    GLC,
    LOADING_BG,
    BG_LOADING_LOGO,
    SPLASH_SCREEN_BG_L,
    BG_BLACK
}, GAME_LOGO = {
    en: {
        andar_bahar_logo: andar_bahar_logo_en,
        bull_bull_logo: bull_bull_logo_en,
        baccarat_logo: baccarat_logo_en,
        classic_baccarat_logo: classic_baccarat_logo_en,
        quick_baccarat_logo: quick_baccarat_logo_en,
        sexy_baccarat_logo: sweetie_baccarat_logo_en,
        see_baccarat_logo: see_baccarat_logo_en,
        dragon_tiger_logo: dragon_tiger_logo_en,
        hi_lo_logo: hi_lo_logo_en,
        insurance_baccarat_logo: insurance_baccarat_logo_en,
        vip_baccarat_logo: vip_baccarat_logo_en,
        pokdeng_logo: pokdeng_logo_en,
        roulette_logo: roulette_logo_en,
        sicbo_logo: sicbo_logo_en,
        teen_patti_logo: teen_patti_logo_en,
        three_pictures_logo: three_pictures_logo_en,
        two_sides_pokdeng_logo: two_sides_pokdeng_logo_en,
        uth_logo: uth_logo_en,
        win3cards_logo: win3cards_logo_en,
        casino_war_logo: casino_war_logo_en,
        blackjack_logo: blackjack_logo_en,
        fpc_logo: fpc_logo_en,
        sictan_logo: sictan_logo_en,
        xoc_dia_logo: xoc_dia_logo_en
    },
    pt: {
        andar_bahar_logo: andar_bahar_logo_pt,
        bull_bull_logo: bull_bull_logo_pt,
        baccarat_logo: baccarat_logo_pt,
        classic_baccarat_logo: classic_baccarat_logo_pt,
        quick_baccarat_logo: quick_baccarat_logo_pt,
        sexy_baccarat_logo: sexy_baccarat_logo_pt,
        see_baccarat_logo: see_baccarat_logo_pt,
        dragon_tiger_logo: dragon_tiger_logo_pt,
        hi_lo_logo: hi_lo_logo_pt,
        insurance_baccarat_logo: insurance_baccarat_logo_pt,
        vip_baccarat_logo: vip_baccarat_logo_pt,
        pokdeng_logo: pokdeng_logo_pt,
        roulette_logo: roulette_logo_pt,
        sicbo_logo: sicbo_logo_pt,
        teen_patti_logo: teen_patti_logo_pt,
        three_pictures_logo: three_pictures_logo_pt,
        two_sides_pokdeng_logo: two_sides_pokdeng_logo_pt,
        uth_logo: uth_logo_en,
        win3cards_logo: win3cards_logo_pt,
        casino_war_logo: casino_war_logo_pt,
        blackjack_logo: blackjack_logo_pt,
        fpc_logo: fpc_logo_pt,
        sictan_logo: sictan_logo_pt,
        xoc_dia_logo: xoc_dia_logo_pt
    },
    ptbr: {
        andar_bahar_logo: andar_bahar_logo_pt,
        bull_bull_logo: bull_bull_logo_pt,
        baccarat_logo: baccarat_logo_pt,
        classic_baccarat_logo: classic_baccarat_logo_pt,
        quick_baccarat_logo: quick_baccarat_logo_pt,
        sexy_baccarat_logo: sexy_baccarat_logo_pt,
        see_baccarat_logo: see_baccarat_logo_ptbr,
        dragon_tiger_logo: dragon_tiger_logo_pt,
        hi_lo_logo: hi_lo_logo_pt,
        insurance_baccarat_logo: insurance_baccarat_logo_pt,
        vip_baccarat_logo: vip_baccarat_logo_pt,
        pokdeng_logo: pokdeng_logo_pt,
        roulette_logo: roulette_logo_pt,
        sicbo_logo: sicbo_logo_pt,
        teen_patti_logo: teen_patti_logo_pt,
        three_pictures_logo: three_pictures_logo_pt,
        two_sides_pokdeng_logo: two_sides_pokdeng_logo_ptbr,
        uth_logo: uth_logo_en,
        win3cards_logo: win3cards_logo_pt,
        casino_war_logo: casino_war_logo_pt,
        blackjack_logo: blackjack_logo_pt,
        fpc_logo: fpc_logo_pt,
        sictan_logo: sictan_logo_pt,
        xoc_dia_logo: xoc_dia_logo_pt
    },
    tc: {
        andar_bahar_logo: andar_bahar_logo_tc,
        bull_bull_logo: bull_bull_logo_tc,
        baccarat_logo: baccarat_logo_tc,
        classic_baccarat_logo: classic_baccarat_logo_tc,
        quick_baccarat_logo: quick_baccarat_logo_tc,
        sexy_baccarat_logo: sexy_baccarat_logo_tc,
        see_baccarat_logo: see_baccarat_logo_tc,
        dragon_tiger_logo: dragon_tiger_logo_tc,
        hi_lo_logo: hi_lo_logo_en,
        insurance_baccarat_logo: insurance_baccarat_logo_tc,
        vip_baccarat_logo: vip_baccarat_logo_tc,
        pokdeng_logo: pokdeng_logo_tc,
        roulette_logo: roulette_logo_tc,
        sicbo_logo: sicbo_logo_tc,
        teen_patti_logo: teen_patti_logo_tc,
        three_pictures_logo: three_pictures_logo_tc,
        two_sides_pokdeng_logo: two_sides_pokdeng_logo_tc,
        uth_logo: uth_logo_tc,
        win3cards_logo: win3cards_logo_tc,
        casino_war_logo: casino_war_logo_tc,
        blackjack_logo: blackjack_logo_tc,
        fpc_logo: fpc_logo_tc,
        sictan_logo: sictan_logo_tc,
        xoc_dia_logo: xoc_dia_logo_tc
    },
    sc: {
        andar_bahar_logo: andar_bahar_logo_sc,
        bull_bull_logo: bull_bull_logo_sc,
        baccarat_logo: baccarat_logo_sc,
        classic_baccarat_logo: classic_baccarat_logo_sc,
        quick_baccarat_logo: quick_baccarat_logo_sc,
        sexy_baccarat_logo: sexy_baccarat_logo_sc,
        see_baccarat_logo: see_baccarat_logo_sc,
        dragon_tiger_logo: dragon_tiger_logo_sc,
        hi_lo_logo: hi_lo_logo_en,
        insurance_baccarat_logo: insurance_baccarat_logo_sc,
        vip_baccarat_logo: vip_baccarat_logo_sc,
        pokdeng_logo: pokdeng_logo_sc,
        roulette_logo: roulette_logo_sc,
        sicbo_logo: sicbo_logo_sc,
        teen_patti_logo: teen_patti_logo_sc,
        three_pictures_logo: three_pictures_logo_sc,
        two_sides_pokdeng_logo: two_sides_pokdeng_logo_sc,
        uth_logo: uth_logo_sc,
        win3cards_logo: win3cards_logo_sc,
        casino_war_logo: casino_war_logo_sc,
        blackjack_logo: blackjack_logo_sc,
        fpc_logo: fpc_logo_sc,
        sictan_logo: sictan_logo_sc,
        xoc_dia_logo: xoc_dia_logo_sc
    },
    es: {
        andar_bahar_logo: andar_bahar_logo_es,
        bull_bull_logo: bull_bull_logo_es,
        baccarat_logo: baccarat_logo_es,
        classic_baccarat_logo: classic_baccarat_logo_es,
        quick_baccarat_logo: quick_baccarat_logo_es,
        sexy_baccarat_logo: sexy_baccarat_logo_es,
        see_baccarat_logo: see_baccarat_logo_es,
        dragon_tiger_logo: dragon_tiger_logo_es,
        hi_lo_logo: hi_lo_logo_es,
        insurance_baccarat_logo: insurance_baccarat_logo_es,
        vip_baccarat_logo: vip_baccarat_logo_es,
        pokdeng_logo: pokdeng_logo_es,
        roulette_logo: roulette_logo_es,
        sicbo_logo: sicbo_logo_es,
        teen_patti_logo: teen_patti_logo_es,
        three_pictures_logo: three_pictures_logo_es,
        two_sides_pokdeng_logo: two_sides_pokdeng_logo_es,
        uth_logo: uth_logo_es,
        win3cards_logo: win3cards_logo_es,
        casino_war_logo: casino_war_logo_es,
        blackjack_logo: blackjack_logo_es,
        fpc_logo: fpc_logo_es,
        sictan_logo: sictan_logo_es,
        xoc_dia_logo: xoc_dia_logo_es
    },
    id: {
        andar_bahar_logo: andar_bahar_logo_id,
        bull_bull_logo: bull_bull_logo_id,
        baccarat_logo: baccarat_logo_id,
        classic_baccarat_logo: classic_baccarat_logo_id,
        quick_baccarat_logo: quick_baccarat_logo_id,
        sexy_baccarat_logo: sexy_baccarat_logo_id,
        see_baccarat_logo: see_baccarat_logo_id,
        dragon_tiger_logo: dragon_tiger_logo_id,
        hi_lo_logo: hi_lo_logo_id,
        insurance_baccarat_logo: insurance_baccarat_logo_id,
        vip_baccarat_logo: vip_baccarat_logo_id,
        pokdeng_logo: pokdeng_logo_id,
        roulette_logo: roulette_logo_id,
        sicbo_logo: sicbo_logo_id,
        teen_patti_logo: teen_patti_logo_id,
        three_pictures_logo: three_pictures_logo_id,
        two_sides_pokdeng_logo: two_sides_pokdeng_logo_id,
        uth_logo: uth_logo_id,
        win3cards_logo: win3cards_logo_id,
        casino_war_logo: casino_war_logo_id,
        blackjack_logo: blackjack_logo_id,
        fpc_logo: fpc_logo_id,
        sictan_logo: sictan_logo_id,
        xoc_dia_logo: xoc_dia_logo_id
    },
    kr: {
        andar_bahar_logo: andar_bahar_logo_kr,
        bull_bull_logo: bull_bull_logo_kr,
        baccarat_logo: baccarat_logo_kr,
        classic_baccarat_logo: classic_baccarat_logo_kr,
        quick_baccarat_logo: quick_baccarat_logo_kr,
        sexy_baccarat_logo: sexy_baccarat_logo_kr,
        see_baccarat_logo: see_baccarat_logo_kr,
        dragon_tiger_logo: dragon_tiger_logo_kr,
        hi_lo_logo: hi_lo_logo_kr,
        insurance_baccarat_logo: insurance_baccarat_logo_kr,
        vip_baccarat_logo: vip_baccarat_logo_kr,
        pokdeng_logo: pokdeng_logo_kr,
        roulette_logo: roulette_logo_kr,
        sicbo_logo: sicbo_logo_kr,
        teen_patti_logo: teen_patti_logo_kr,
        three_pictures_logo: three_pictures_logo_kr,
        two_sides_pokdeng_logo: two_sides_pokdeng_logo_kr,
        uth_logo: uth_logo_kr,
        win3cards_logo: win3cards_logo_kr,
        casino_war_logo: casino_war_logo_kr,
        blackjack_logo: blackjack_logo_kr,
        fpc_logo: fpc_logo_kr,
        sictan_logo: sictan_logo_kr,
        xoc_dia_logo: xoc_dia_logo_kr
    },
    thai: {
        andar_bahar_logo: andar_bahar_logo_thai,
        bull_bull_logo: bull_bull_logo_thai,
        baccarat_logo: baccarat_logo_thai,
        classic_baccarat_logo: classic_baccarat_logo_thai,
        quick_baccarat_logo: quick_baccarat_logo_thai,
        sexy_baccarat_logo: sexy_baccarat_logo_thai,
        see_baccarat_logo: see_baccarat_logo_thai,
        dragon_tiger_logo: dragon_tiger_logo_thai,
        hi_lo_logo: hi_lo_logo_thai,
        insurance_baccarat_logo: insurance_baccarat_logo_thai,
        vip_baccarat_logo: vip_baccarat_logo_thai,
        pokdeng_logo: pokdeng_logo_thai,
        roulette_logo: roulette_logo_thai,
        sicbo_logo: sicbo_logo_thai,
        teen_patti_logo: teen_patti_logo_thai,
        three_pictures_logo: three_pictures_logo_thai,
        two_sides_pokdeng_logo: two_sides_pokdeng_logo_thai,
        uth_logo: uth_logo_thai,
        win3cards_logo: win3cards_logo_thai,
        casino_war_logo: casino_war_logo_thai,
        blackjack_logo: blackjack_logo_thai,
        fpc_logo: fpc_logo_thai,
        sictan_logo: sictan_logo_thai,
        xoc_dia_logo: xoc_dia_logo_thai
    },
    hi: {
        andar_bahar_logo: andar_bahar_logo_hi,
        bull_bull_logo: bull_bull_logo_hi,
        baccarat_logo: baccarat_logo_hi,
        classic_baccarat_logo: classic_baccarat_logo_hi,
        quick_baccarat_logo: quick_baccarat_logo_hi,
        sexy_baccarat_logo: sexy_baccarat_logo_hi,
        see_baccarat_logo: see_baccarat_logo_hi,
        dragon_tiger_logo: dragon_tiger_logo_hi,
        hi_lo_logo: hi_lo_logo_hi,
        insurance_baccarat_logo: insurance_baccarat_logo_hi,
        vip_baccarat_logo: vip_baccarat_logo_hi,
        pokdeng_logo: pokdeng_logo_hi,
        roulette_logo: roulette_logo_hi,
        sicbo_logo: sicbo_logo_hi,
        teen_patti_logo: teen_patti_logo_hi,
        three_pictures_logo: three_pictures_logo_hi,
        two_sides_pokdeng_logo: two_sides_pokdeng_logo_hi,
        uth_logo: uth_logo_hi,
        win3cards_logo: win3cards_logo_hi,
        casino_war_logo: casino_war_logo_hi,
        blackjack_logo: blackjack_logo_hi,
        fpc_logo: fpc_logo_hi,
        sictan_logo: sictan_logo_hi,
        xoc_dia_logo: xoc_dia_logo_hi
    },
    ja: {
        andar_bahar_logo: andar_bahar_logo_ja,
        bull_bull_logo: bull_bull_logo_ja,
        baccarat_logo: baccarat_logo_ja,
        classic_baccarat_logo: classic_baccarat_logo_ja,
        quick_baccarat_logo: quick_baccarat_logo_ja,
        sexy_baccarat_logo: sexy_baccarat_logo_ja,
        see_baccarat_logo: see_baccarat_logo_ja,
        dragon_tiger_logo: dragon_tiger_logo_ja,
        hi_lo_logo: hi_lo_logo_ja,
        insurance_baccarat_logo: insurance_baccarat_logo_ja,
        vip_baccarat_logo: vip_baccarat_logo_ja,
        pokdeng_logo: pokdeng_logo_ja,
        roulette_logo: roulette_logo_ja,
        sicbo_logo: sicbo_logo_ja,
        teen_patti_logo: teen_patti_logo_ja,
        three_pictures_logo: three_pictures_logo_ja,
        two_sides_pokdeng_logo: two_sides_pokdeng_logo_ja,
        uth_logo: uth_logo_ja,
        win3cards_logo: win3cards_logo_ja,
        casino_war_logo: casino_war_logo_ja,
        blackjack_logo: blackjack_logo_ja,
        fpc_logo: fpc_logo_ja,
        sictan_logo: sictan_logo_ja,
        xoc_dia_logo: xoc_dia_logo_ja
    },
    vi: {
        andar_bahar_logo: andar_bahar_logo_vi,
        bull_bull_logo: bull_bull_logo_vi,
        baccarat_logo: baccarat_logo_vi,
        classic_baccarat_logo: classic_baccarat_logo_vi,
        quick_baccarat_logo: quick_baccarat_logo_vi,
        sexy_baccarat_logo: sexy_baccarat_logo_vi,
        see_baccarat_logo: see_baccarat_logo_vi,
        dragon_tiger_logo: dragon_tiger_logo_vi,
        hi_lo_logo: hi_lo_logo_vi,
        insurance_baccarat_logo: insurance_baccarat_logo_vi,
        vip_baccarat_logo: vip_baccarat_logo_vi,
        pokdeng_logo: pokdeng_logo_vi,
        roulette_logo: roulette_logo_vi,
        sicbo_logo: sicbo_logo_vi,
        teen_patti_logo: teen_patti_logo_vi,
        three_pictures_logo: three_pictures_logo_vi,
        two_sides_pokdeng_logo: two_sides_pokdeng_logo_vi,
        uth_logo: uth_logo_vi,
        win3cards_logo: win3cards_logo_vi,
        casino_war_logo: casino_war_logo_vi,
        blackjack_logo: blackjack_logo_vi,
        fpc_logo: fpc_logo_vi,
        sictan_logo: sictan_logo_vi,
        xoc_dia_logo: xoc_dia_logo_vi
    }
};
const Chips = [{amount: 1, color: "#469D93"}, {amount: 2, color: "#D7859C"}, {amount: 5, color: "#704FA8"}, {
    amount: 10,
    color: "#4345A5"
}, {amount: 20, color: "#3D8618"}, {amount: 50, color: "#B41A3A"}, {amount: 100, color: "#57ADA4"}, {
    amount: 200,
    color: "#C27A8E"
}, {amount: 500, color: "#7557A8"}, {amount: 1e3, color: "#494BA4"}, {amount: 2e3, color: "#468B22"}, {
    amount: 5e3,
    color: "#90805A"
}, {amount: 1e4, color: "#9A9A98"}, {amount: 2e4, color: "#C18261"}, {amount: 5e4, color: "#4A9BB2"}, {
    amount: 1e5,
    color: "#D7C066"
}, {amount: 2e5, color: "#347C7E"}, {amount: 5e5, color: "#A4CB5F"}, {amount: 1e6, color: "#72608D"}, {
    amount: 2e6,
    color: "#D46726"
}], DefaultCustomChips = [{amount: 0, color: "#947751"}, {amount: 0, color: "#947751"}, {
    amount: 0,
    color: "#947751"
}, {amount: 0, color: "#947751"}], GAMES = {
    [GameType.Baccarat]: "baccarat",
    [GameType.DT]: "dragon_tiger",
    [GameType.Roulette]: "roulette",
    [GameType.Sicbo]: "sicbo",
    [AltGameType.HiLo]: "hi_lo",
    [AltGameType.SicTan]: "sictan",
    [GameType.Win3Card]: "win3cards",
    [AltGameType.ThreePictures]: "three_pictures",
    [GameType.BullBull]: "bull_bull",
    [AltGameType.TeenPatti]: "teen_patti",
    [GameType.TeenPatti]: "teen_patti",
    [GameType.AndarBahar]: "andar_bahar",
    [GameType.UTH]: "uth",
    [GameType.Pokdeng]: "pokdeng",
    [AltGameType.TwoSidesPokdeng]: "two_sides_pokdeng",
    [GameType.CasinoWar]: "casino_war",
    [GameType.Blackjack]: "blackjack",
    [GameType.FPC]: "fpc",
    [CardGameType.Card]: "cardGame",
    [CardGameType.Slot]: "slotGame",
    [CardGameType.Fishing]: "fishingGame",
    [CardGameType.Casino]: "casinoGame",
    [GameType.XocDia]: "xoc_dia"
};
var BACCARAT_BET_TYPE = (r => (r[r.BANKER = 0] = "BANKER", r[r.PLAYER = 1] = "PLAYER", r[r.TIE = 2] = "TIE", r[r.B_PAIR = 3] = "B_PAIR", r[r.P_PAIR = 4] = "P_PAIR", r[r.EITHER_PAIR = 5] = "EITHER_PAIR", r[r.PERFECT_PAIR = 6] = "PERFECT_PAIR", r[r.B_BONUS = 7] = "B_BONUS", r[r.P_BONUS = 8] = "P_BONUS", r[r.BANKER_NO_COMM = 9] = "BANKER_NO_COMM", r[r.TIGER = 10] = "TIGER", r[r.TIGER_SMALL = 11] = "TIGER_SMALL", r[r.TIGER_BIG = 12] = "TIGER_BIG", r[r.TIGER_PAIR = 13] = "TIGER_PAIR", r[r.TIGER_TIE = 14] = "TIGER_TIE", r[r.B_FABULOUS_4 = 15] = "B_FABULOUS_4", r[r.P_FABULOUS_4 = 16] = "P_FABULOUS_4", r[r.B_PRECIOUS_PAIR = 17] = "B_PRECIOUS_PAIR", r[r.P_PRECIOUS_PAIR = 18] = "P_PRECIOUS_PAIR", r[r.B_BLACK = 19] = "B_BLACK", r[r.P_BLACK = 20] = "P_BLACK", r[r.B_RED = 21] = "B_RED", r[r.P_RED = 22] = "P_RED", r[r.ANY_6 = 23] = "ANY_6", r[r.B_NATURAL = 24] = "B_NATURAL", r[r.P_NATURAL = 25] = "P_NATURAL", r[r.LUCKY_6 = 26] = "LUCKY_6", r))(BACCARAT_BET_TYPE || {});
const BACCARAT_BET_TYPE_MAP = [BetType.B_Banker, BetType.B_Player, BetType.B_Tie, BetType.B_BPair, BetType.B_PPair, BetType.B_AnyPair, BetType.B_PerfectPair, BetType.B_BDragon, BetType.B_PDragon, BetType.B_BankNoComm, BetType.B_Tiger, BetType.B_SmallTiger, BetType.B_BigTiger, BetType.B_TigerPair, BetType.B_TigerTie, BetType.B_BFabulous4, BetType.B_PFabulous4, BetType.B_BPreciousPair, BetType.B_PPreciousPair, BetType.B_BankerBlack, BetType.B_PlayerBlack, BetType.B_BankerRed, BetType.B_PlayerRed, BetType.B_Any6, BetType.B_BRegular, BetType.B_PRegular, BetType.B_Lucky6],
    SIDE_BET_LIMIT_30 = {
        rounds: 30,
        betTypes: [BetType.B_SmallTiger, BetType.B_BigTiger, BetType.B_TigerTie, BetType.B_BankerBlack, BetType.B_BankerRed, BetType.B_PlayerBlack, BetType.B_PlayerRed]
    }, SIDE_BET_LIMIT_50 = {
        rounds: 50,
        betTypes: [BetType.B_BPair, BetType.B_PPair, BetType.B_AnyPair, BetType.B_PerfectPair, BetType.B_TigerPair, BetType.B_BPreciousPair, BetType.B_PPreciousPair, BetType.B_Lucky6, BetType.B_Tiger]
    };
var INSURANCE_BACCARAT_BET_TYPE = (r => (r[r.BANKER = 0] = "BANKER", r[r.PLAYER = 1] = "PLAYER", r[r.TIE = 2] = "TIE", r[r.B_PAIR = 3] = "B_PAIR", r[r.P_PAIR = 4] = "P_PAIR", r[r.EITHER_PAIR = 5] = "EITHER_PAIR", r[r.PERFECT_PAIR = 6] = "PERFECT_PAIR", r[r.B_BONUS = 7] = "B_BONUS", r[r.P_BONUS = 8] = "P_BONUS", r[r.BANKER_NO_COMM = 9] = "BANKER_NO_COMM", r[r.TIGER = 10] = "TIGER", r[r.TIGER_SMALL = 11] = "TIGER_SMALL", r[r.TIGER_BIG = 12] = "TIGER_BIG", r[r.TIGER_PAIR = 13] = "TIGER_PAIR", r[r.TIGER_TIE = 14] = "TIGER_TIE", r[r.B_FABULOUS_4 = 15] = "B_FABULOUS_4", r[r.P_FABULOUS_4 = 16] = "P_FABULOUS_4", r[r.B_PRECIOUS_PAIR = 17] = "B_PRECIOUS_PAIR", r[r.P_PRECIOUS_PAIR = 18] = "P_PRECIOUS_PAIR", r[r.B_BLACK = 19] = "B_BLACK", r[r.P_BLACK = 20] = "P_BLACK", r[r.B_RED = 21] = "B_RED", r[r.P_RED = 22] = "P_RED", r[r.ANY_6 = 23] = "ANY_6", r[r.B_NATURAL = 24] = "B_NATURAL", r[r.P_NATURAL = 25] = "P_NATURAL", r[r.LUCKY_6 = 26] = "LUCKY_6", r[r.B_INSURANCE_1 = 27] = "B_INSURANCE_1", r[r.P_INSURANCE_1 = 28] = "P_INSURANCE_1", r[r.B_INSURANCE_2 = 29] = "B_INSURANCE_2", r[r.P_INSURANCE_2 = 30] = "P_INSURANCE_2", r))(INSURANCE_BACCARAT_BET_TYPE || {});
const INSURANCE_BACCARAT_BET_TYPE_MAP = [BetType.B_Banker, BetType.B_Player, BetType.B_Tie, BetType.B_BPair, BetType.B_PPair, BetType.B_AnyPair, BetType.B_PerfectPair, BetType.B_BDragon, BetType.B_PDragon, BetType.B_BankNoComm, BetType.B_Tiger, BetType.B_SmallTiger, BetType.B_BigTiger, BetType.B_TigerPair, BetType.B_TigerTie, BetType.B_BFabulous4, BetType.B_PFabulous4, BetType.B_BPreciousPair, BetType.B_PPreciousPair, BetType.B_BankerBlack, BetType.B_PlayerBlack, BetType.B_BankerRed, BetType.B_PlayerRed, BetType.B_Any6, BetType.B_BRegular, BetType.B_PRegular, BetType.B_Lucky6, BetType.B_BInsurance1, BetType.B_PInsurance1, BetType.B_BInsurance2, BetType.B_PInsurance2];
var DRAGON_TIGER_BET_TYPE = (r => (r[r.DRAGON = 0] = "DRAGON", r[r.TIGER = 1] = "TIGER", r[r.TIE = 2] = "TIE", r))(DRAGON_TIGER_BET_TYPE || {});
const DRAGON_TIGER_BET_TYPE_MAP = [BetType.DT_Dragon, BetType.DT_Tiger, BetType.DT_Tie];
var XOC_DIA_BET_TYPE = (r => (r[r.SMALL = 0] = "SMALL", r[r.BIG = 1] = "BIG", r[r.ODD = 2] = "ODD", r[r.EVEN = 3] = "EVEN", r[r.POINT_0 = 4] = "POINT_0", r[r.POINT_1 = 5] = "POINT_1", r[r.POINT_3 = 6] = "POINT_3", r[r.POINT_4 = 7] = "POINT_4", r))(XOC_DIA_BET_TYPE || {});
const XOC_DIA_BET_TYPE_MAP = [BetType.XD_Small, BetType.XD_Big, BetType.XD_Odd, BetType.XD_Even, BetType.XD_0, BetType.XD_1, BetType.XD_3, BetType.XD_4];
var WIN3CARDS_BET_TYPE = (r => (r[r.DRAGON = 0] = "DRAGON", r[r.PHOENIX = 1] = "PHOENIX", r[r.PAIR_8_PLUS = 2] = "PAIR_8_PLUS", r[r.STRAIGHT = 3] = "STRAIGHT", r[r.FLUSH = 4] = "FLUSH", r[r.STRAIGHT_FLUSH = 5] = "STRAIGHT_FLUSH", r[r.THREE_OF_A_KIND = 6] = "THREE_OF_A_KIND", r))(WIN3CARDS_BET_TYPE || {});
const WIN3CARDS_BET_TYPE_MAP = [BetType.WC_Dragon, BetType.WC_Phoenix, BetType.WC_Pair8Plus, BetType.WC_Straight, BetType.WC_Flush, BetType.WC_StraightFlush, BetType.WC_ThreeOfAKind];
var THREE_PICTURES_BET_TYPE = (r => (r[r.DRAGON = 0] = "DRAGON", r[r.PHOENIX = 1] = "PHOENIX", r[r.TIE = 2] = "TIE", r[r.DRAGON_THREE_PICTURES = 3] = "DRAGON_THREE_PICTURES", r[r.PHOENIX_THREE_PICTURES = 4] = "PHOENIX_THREE_PICTURES", r))(THREE_PICTURES_BET_TYPE || {});
const THREE_PICTURES_BET_TYPE_MAP = [BetType.TP_Dragon, BetType.TP_Phoenix, BetType.TP_Tie, BetType.TP_DragonThreePictures, BetType.TP_PhoenixThreePictures];
var TEEN_PATTI_BET_TYPE = (r => (r[r.PLAYER_A = 0] = "PLAYER_A", r[r.PLAYER_B = 1] = "PLAYER_B", r[r.TIE = 2] = "TIE", r[r.PLAYER_A_PAIR_PLUS = 3] = "PLAYER_A_PAIR_PLUS", r[r.PLAYER_B_PAIR_PLUS = 4] = "PLAYER_B_PAIR_PLUS", r[r.SIX_CARD_BONUS = 5] = "SIX_CARD_BONUS", r))(TEEN_PATTI_BET_TYPE || {});
const TEEN_PATTI_BET_TYPE_MAP = [BetType.TPa_PlayerA, BetType.TPa_PlayerB, BetType.TPa_Tie, BetType.TPa_PlayerAPairPlus, BetType.TPa_PlayerBPairPlus, BetType.TPa_SixCardsBonus];
var BULL_BULL_BET_TYPE = (r => (r[r.EQUAL_BANKER_1 = 0] = "EQUAL_BANKER_1", r[r.EQUAL_PLAYER_1 = 1] = "EQUAL_PLAYER_1", r[r.EQUAL_BANKER_2 = 2] = "EQUAL_BANKER_2", r[r.EQUAL_PLAYER_2 = 3] = "EQUAL_PLAYER_2", r[r.EQUAL_BANKER_3 = 4] = "EQUAL_BANKER_3", r[r.EQUAL_PLAYER_3 = 5] = "EQUAL_PLAYER_3", r[r.DOUBLE_BANKER_1 = 6] = "DOUBLE_BANKER_1", r[r.DOUBLE_PLAYER_1 = 7] = "DOUBLE_PLAYER_1", r[r.DOUBLE_BANKER_2 = 8] = "DOUBLE_BANKER_2", r[r.DOUBLE_PLAYER_2 = 9] = "DOUBLE_PLAYER_2", r[r.DOUBLE_BANKER_3 = 10] = "DOUBLE_BANKER_3", r[r.DOUBLE_PLAYER_3 = 11] = "DOUBLE_PLAYER_3", r[r.SUPER_BANKER_1 = 12] = "SUPER_BANKER_1", r[r.SUPER_PLAYER_1 = 13] = "SUPER_PLAYER_1", r[r.SUPER_BANKER_2 = 14] = "SUPER_BANKER_2", r[r.SUPER_PLAYER_2 = 15] = "SUPER_PLAYER_2", r[r.SUPER_BANKER_3 = 16] = "SUPER_BANKER_3", r[r.SUPER_PLAYER_3 = 17] = "SUPER_PLAYER_3", r))(BULL_BULL_BET_TYPE || {});
const BULL_BULL_BET_TYPE_MAP = [BetType.BB_EO_Banker1, BetType.BB_EO_Player1, BetType.BB_EO_Banker2, BetType.BB_EO_Player2, BetType.BB_EO_Banker3, BetType.BB_EO_Player3, BetType.BB_DO_Banker1, BetType.BB_DO_Player1, BetType.BB_DO_Banker2, BetType.BB_DO_Player2, BetType.BB_DO_Banker3, BetType.BB_DO_Player3, BetType.BB_SP_Banker1, BetType.BB_SP_Player1, BetType.BB_SP_Banker2, BetType.BB_SP_Player2, BetType.BB_SP_Banker3, BetType.BB_SP_Player3];
var ANDAR_BAHAR_BET_TYPE = (r => (r[r.ANDAR = 0] = "ANDAR", r[r.BAHAR = 1] = "BAHAR", r[r.CARDS_1_TO_5 = 2] = "CARDS_1_TO_5", r[r.CARDS_6_TO_10 = 3] = "CARDS_6_TO_10", r[r.CARDS_11_TO_15 = 4] = "CARDS_11_TO_15", r[r.CARDS_16_TO_25 = 5] = "CARDS_16_TO_25", r[r.CARDS_26_TO_30 = 6] = "CARDS_26_TO_30", r[r.CARDS_31_TO_35 = 7] = "CARDS_31_TO_35", r[r.CARDS_36_TO_40 = 8] = "CARDS_36_TO_40", r[r.CARDS_41_PLUS = 9] = "CARDS_41_PLUS", r[r.ANDAR_1ST = 10] = "ANDAR_1ST", r[r.BAHAR_1ST = 11] = "BAHAR_1ST", r))(ANDAR_BAHAR_BET_TYPE || {});
const ANDAR_BAHAR_BET_TYPE_MAP = [BetType.AB_Andar, BetType.AB_Bahar, BetType.AB_Cards1To5, BetType.AB_Cards6To10, BetType.AB_Cards11To15, BetType.AB_Cards16To25, BetType.AB_Cards26To30, BetType.AB_Cards31To35, BetType.AB_Cards36To40, BetType.AB_Cards41Above, BetType.AB_AndarFirst, BetType.AB_BaharFirst];
var ROULETTE_BET_TYPE = (r => (r[r.SMALL = 0] = "SMALL", r[r.BIG = 1] = "BIG", r[r.EVEN = 2] = "EVEN", r[r.ODD = 3] = "ODD", r[r.RED = 4] = "RED", r[r.BLACK = 5] = "BLACK", r[r.DOZEN_1_12 = 6] = "DOZEN_1_12", r[r.DOZEN_13_24 = 7] = "DOZEN_13_24", r[r.DOZEN_25_36 = 8] = "DOZEN_25_36", r[r.COLUMN_1 = 9] = "COLUMN_1", r[r.COLUMN_2 = 10] = "COLUMN_2", r[r.COLUMN_3 = 11] = "COLUMN_3", r[r.DIRECT_0 = 12] = "DIRECT_0", r[r.DIRECT_1 = 13] = "DIRECT_1", r[r.DIRECT_2 = 14] = "DIRECT_2", r[r.DIRECT_3 = 15] = "DIRECT_3", r[r.DIRECT_4 = 16] = "DIRECT_4", r[r.DIRECT_5 = 17] = "DIRECT_5", r[r.DIRECT_6 = 18] = "DIRECT_6", r[r.DIRECT_7 = 19] = "DIRECT_7", r[r.DIRECT_8 = 20] = "DIRECT_8", r[r.DIRECT_9 = 21] = "DIRECT_9", r[r.DIRECT_10 = 22] = "DIRECT_10", r[r.DIRECT_11 = 23] = "DIRECT_11", r[r.DIRECT_12 = 24] = "DIRECT_12", r[r.DIRECT_13 = 25] = "DIRECT_13", r[r.DIRECT_14 = 26] = "DIRECT_14", r[r.DIRECT_15 = 27] = "DIRECT_15", r[r.DIRECT_16 = 28] = "DIRECT_16", r[r.DIRECT_17 = 29] = "DIRECT_17", r[r.DIRECT_18 = 30] = "DIRECT_18", r[r.DIRECT_19 = 31] = "DIRECT_19", r[r.DIRECT_20 = 32] = "DIRECT_20", r[r.DIRECT_21 = 33] = "DIRECT_21", r[r.DIRECT_22 = 34] = "DIRECT_22", r[r.DIRECT_23 = 35] = "DIRECT_23", r[r.DIRECT_24 = 36] = "DIRECT_24", r[r.DIRECT_25 = 37] = "DIRECT_25", r[r.DIRECT_26 = 38] = "DIRECT_26", r[r.DIRECT_27 = 39] = "DIRECT_27", r[r.DIRECT_28 = 40] = "DIRECT_28", r[r.DIRECT_29 = 41] = "DIRECT_29", r[r.DIRECT_30 = 42] = "DIRECT_30", r[r.DIRECT_31 = 43] = "DIRECT_31", r[r.DIRECT_32 = 44] = "DIRECT_32", r[r.DIRECT_33 = 45] = "DIRECT_33", r[r.DIRECT_34 = 46] = "DIRECT_34", r[r.DIRECT_35 = 47] = "DIRECT_35", r[r.DIRECT_36 = 48] = "DIRECT_36", r[r.THREE_0_1_2 = 49] = "THREE_0_1_2", r[r.THREE_0_2_3 = 50] = "THREE_0_2_3", r[r.FOUR_0_1_2_3 = 51] = "FOUR_0_1_2_3", r[r.SEPARATE_0_1 = 52] = "SEPARATE_0_1", r[r.SEPARATE_0_2 = 53] = "SEPARATE_0_2", r[r.SEPARATE_0_3 = 54] = "SEPARATE_0_3", r[r.SEPARATE_1_2 = 55] = "SEPARATE_1_2", r[r.SEPARATE_2_3 = 56] = "SEPARATE_2_3", r[r.SEPARATE_4_5 = 57] = "SEPARATE_4_5", r[r.SEPARATE_5_6 = 58] = "SEPARATE_5_6", r[r.SEPARATE_7_8 = 59] = "SEPARATE_7_8", r[r.SEPARATE_8_9 = 60] = "SEPARATE_8_9", r[r.SEPARATE_10_11 = 61] = "SEPARATE_10_11", r[r.SEPARATE_11_12 = 62] = "SEPARATE_11_12", r[r.SEPARATE_13_14 = 63] = "SEPARATE_13_14", r[r.SEPARATE_14_15 = 64] = "SEPARATE_14_15", r[r.SEPARATE_16_17 = 65] = "SEPARATE_16_17", r[r.SEPARATE_17_18 = 66] = "SEPARATE_17_18", r[r.SEPARATE_19_20 = 67] = "SEPARATE_19_20", r[r.SEPARATE_20_21 = 68] = "SEPARATE_20_21", r[r.SEPARATE_22_23 = 69] = "SEPARATE_22_23", r[r.SEPARATE_23_24 = 70] = "SEPARATE_23_24", r[r.SEPARATE_25_26 = 71] = "SEPARATE_25_26", r[r.SEPARATE_26_27 = 72] = "SEPARATE_26_27", r[r.SEPARATE_28_29 = 73] = "SEPARATE_28_29", r[r.SEPARATE_29_30 = 74] = "SEPARATE_29_30", r[r.SEPARATE_31_32 = 75] = "SEPARATE_31_32", r[r.SEPARATE_32_33 = 76] = "SEPARATE_32_33", r[r.SEPARATE_34_35 = 77] = "SEPARATE_34_35", r[r.SEPARATE_35_36 = 78] = "SEPARATE_35_36", r[r.SEPARATE_1_4 = 79] = "SEPARATE_1_4", r[r.SEPARATE_4_7 = 80] = "SEPARATE_4_7", r[r.SEPARATE_7_10 = 81] = "SEPARATE_7_10", r[r.SEPARATE_10_13 = 82] = "SEPARATE_10_13", r[r.SEPARATE_13_16 = 83] = "SEPARATE_13_16", r[r.SEPARATE_16_19 = 84] = "SEPARATE_16_19", r[r.SEPARATE_19_22 = 85] = "SEPARATE_19_22", r[r.SEPARATE_22_25 = 86] = "SEPARATE_22_25", r[r.SEPARATE_25_28 = 87] = "SEPARATE_25_28", r[r.SEPARATE_28_31 = 88] = "SEPARATE_28_31", r[r.SEPARATE_31_34 = 89] = "SEPARATE_31_34", r[r.SEPARATE_2_5 = 90] = "SEPARATE_2_5", r[r.SEPARATE_5_8 = 91] = "SEPARATE_5_8", r[r.SEPARATE_8_11 = 92] = "SEPARATE_8_11", r[r.SEPARATE_11_14 = 93] = "SEPARATE_11_14", r[r.SEPARATE_14_17 = 94] = "SEPARATE_14_17", r[r.SEPARATE_17_20 = 95] = "SEPARATE_17_20", r[r.SEPARATE_20_23 = 96] = "SEPARATE_20_23", r[r.SEPARATE_23_26 = 97] = "SEPARATE_23_26", r[r.SEPARATE_26_29 = 98] = "SEPARATE_26_29", r[r.SEPARATE_29_32 = 99] = "SEPARATE_29_32", r[r.SEPARATE_32_35 = 100] = "SEPARATE_32_35",r[r.SEPARATE_3_6 = 101] = "SEPARATE_3_6",r[r.SEPARATE_6_9 = 102] = "SEPARATE_6_9",r[r.SEPARATE_9_12 = 103] = "SEPARATE_9_12",r[r.SEPARATE_12_15 = 104] = "SEPARATE_12_15",r[r.SEPARATE_15_18 = 105] = "SEPARATE_15_18",r[r.SEPARATE_18_21 = 106] = "SEPARATE_18_21",r[r.SEPARATE_21_24 = 107] = "SEPARATE_21_24",r[r.SEPARATE_24_27 = 108] = "SEPARATE_24_27",r[r.SEPARATE_27_30 = 109] = "SEPARATE_27_30",r[r.SEPARATE_30_33 = 110] = "SEPARATE_30_33",r[r.SEPARATE_33_36 = 111] = "SEPARATE_33_36",r[r.CORNER_1_5 = 112] = "CORNER_1_5",r[r.CORNER_2_6 = 113] = "CORNER_2_6",r[r.CORNER_4_8 = 114] = "CORNER_4_8",r[r.CORNER_5_9 = 115] = "CORNER_5_9",r[r.CORNER_7_11 = 116] = "CORNER_7_11",r[r.CORNER_8_12 = 117] = "CORNER_8_12",r[r.CORNER_10_14 = 118] = "CORNER_10_14",r[r.CORNER_11_15 = 119] = "CORNER_11_15",r[r.CORNER_13_17 = 120] = "CORNER_13_17",r[r.CORNER_14_18 = 121] = "CORNER_14_18",r[r.CORNER_16_20 = 122] = "CORNER_16_20",r[r.CORNER_17_21 = 123] = "CORNER_17_21",r[r.CORNER_19_23 = 124] = "CORNER_19_23",r[r.CORNER_20_24 = 125] = "CORNER_20_24",r[r.CORNER_22_26 = 126] = "CORNER_22_26",r[r.CORNER_23_27 = 127] = "CORNER_23_27",r[r.CORNER_25_29 = 128] = "CORNER_25_29",r[r.CORNER_26_30 = 129] = "CORNER_26_30",r[r.CORNER_28_32 = 130] = "CORNER_28_32",r[r.CORNER_29_33 = 131] = "CORNER_29_33",r[r.CORNER_31_35 = 132] = "CORNER_31_35",r[r.CORNER_32_36 = 133] = "CORNER_32_36",r[r.STREET_1_3 = 134] = "STREET_1_3",r[r.STREET_4_6 = 135] = "STREET_4_6",r[r.STREET_7_9 = 136] = "STREET_7_9",r[r.STREET_10_12 = 137] = "STREET_10_12",r[r.STREET_13_15 = 138] = "STREET_13_15",r[r.STREET_16_18 = 139] = "STREET_16_18",r[r.STREET_19_21 = 140] = "STREET_19_21",r[r.STREET_22_24 = 141] = "STREET_22_24",r[r.STREET_25_27 = 142] = "STREET_25_27",r[r.STREET_28_30 = 143] = "STREET_28_30",r[r.STREET_31_33 = 144] = "STREET_31_33",r[r.STREET_34_36 = 145] = "STREET_34_36",r[r.LINE_1_6 = 146] = "LINE_1_6",r[r.LINE_4_9 = 147] = "LINE_4_9",r[r.LINE_7_12 = 148] = "LINE_7_12",r[r.LINE_10_15 = 149] = "LINE_10_15",r[r.LINE_13_18 = 150] = "LINE_13_18",r[r.LINE_16_21 = 151] = "LINE_16_21",r[r.LINE_19_24 = 152] = "LINE_19_24",r[r.LINE_22_27 = 153] = "LINE_22_27",r[r.LINE_25_30 = 154] = "LINE_25_30",r[r.LINE_28_33 = 155] = "LINE_28_33",r[r.LINE_31_36 = 156] = "LINE_31_36",r))(ROULETTE_BET_TYPE || {});
const ROULETTE_BET_TYPE_MAP = [BetType.R_Small, BetType.R_Big, BetType.R_Even, BetType.R_Odd, BetType.R_Red, BetType.R_Black, BetType.R_Dozen1To12, BetType.R_Dozen13To24, BetType.R_Dozen25To36, BetType.R_Column1, BetType.R_Column2, BetType.R_Column3, BetType.R_Direct0, BetType.R_Direct1, BetType.R_Direct2, BetType.R_Direct3, BetType.R_Direct4, BetType.R_Direct5, BetType.R_Direct6, BetType.R_Direct7, BetType.R_Direct8, BetType.R_Direct9, BetType.R_Direct10, BetType.R_Direct11, BetType.R_Direct12, BetType.R_Direct13, BetType.R_Direct14, BetType.R_Direct15, BetType.R_Direct16, BetType.R_Direct17, BetType.R_Direct18, BetType.R_Direct19, BetType.R_Direct20, BetType.R_Direct21, BetType.R_Direct22, BetType.R_Direct23, BetType.R_Direct24, BetType.R_Direct25, BetType.R_Direct26, BetType.R_Direct27, BetType.R_Direct28, BetType.R_Direct29, BetType.R_Direct30, BetType.R_Direct31, BetType.R_Direct32, BetType.R_Direct33, BetType.R_Direct34, BetType.R_Direct35, BetType.R_Direct36, BetType.R_Three012, BetType.R_Three023, BetType.R_Four0123, BetType.R_Separate0And1, BetType.R_Separate0And2, BetType.R_Separate0And3, BetType.R_Separate1And2, BetType.R_Separate2And3, BetType.R_Separate4And5, BetType.R_Separate5And6, BetType.R_Separate7And8, BetType.R_Separate8And9, BetType.R_Separate10And11, BetType.R_Separate11And12, BetType.R_Separate13And14, BetType.R_Separate14And15, BetType.R_Separate16And17, BetType.R_Separate17And18, BetType.R_Separate19And20, BetType.R_Separate20And21, BetType.R_Separate22And23, BetType.R_Separate23And24, BetType.R_Separate25And26, BetType.R_Separate26And27, BetType.R_Separate28And29, BetType.R_Separate29And30, BetType.R_Separate31And32, BetType.R_Separate32And33, BetType.R_Separate34And35, BetType.R_Separate35And36, BetType.R_Separate1And4, BetType.R_Separate4And7, BetType.R_Separate7And10, BetType.R_Separate10And13, BetType.R_Separate13And16, BetType.R_Separate16And19, BetType.R_Separate19And22, BetType.R_Separate22And25, BetType.R_Separate25And28, BetType.R_Separate28And31, BetType.R_Separate31And34, BetType.R_Separate2And5, BetType.R_Separate5And8, BetType.R_Separate8And11, BetType.R_Separate11And14, BetType.R_Separate14And17, BetType.R_Separate17And20, BetType.R_Separate20And23, BetType.R_Separate23And26, BetType.R_Separate26And28, BetType.R_Separate28And32, BetType.R_Separate32And35, BetType.R_Separate3And6, BetType.R_Separate6And9, BetType.R_Separate9And12, BetType.R_Separate12And15, BetType.R_Separate15And18, BetType.R_Separate18And21, BetType.R_Separate21And24, BetType.R_Separate24And27, BetType.R_Separate27And30, BetType.R_Separate30And33, BetType.R_Separate33And36, BetType.R_Corner1And5, BetType.R_Corner2And6, BetType.R_Corner4And8, BetType.R_Corner5And9, BetType.R_Corner7And11, BetType.R_Corner8And12, BetType.R_Corner10And14, BetType.R_Corner11And15, BetType.R_Corner13And17, BetType.R_Corner14And18, BetType.R_Corner16And20, BetType.R_Corner17And21, BetType.R_Corner19And23, BetType.R_Corner20And24, BetType.R_Corner22And26, BetType.R_Corner23And27, BetType.R_Corner25And29, BetType.R_Corner26And30, BetType.R_Corner28And32, BetType.R_Corner29And33, BetType.R_Corner31And35, BetType.R_Corner32And36, BetType.R_Street1To3, BetType.R_Street4To6, BetType.R_Street7To9, BetType.R_Street10To12, BetType.R_Street13To15, BetType.R_Street16To18, BetType.R_Street19To21, BetType.R_Street22To24, BetType.R_Street25To27, BetType.R_Street28To30, BetType.R_Street31To33, BetType.R_Street34To36, BetType.R_Line1To6, BetType.R_Line4To9, BetType.R_Line7To12, BetType.R_Line10To15, BetType.R_Line13To18, BetType.R_Line16To21, BetType.R_Line19To24, BetType.R_Line22To27, BetType.R_Line25To30, BetType.R_Line28To33, BetType.R_Line31To36];
var UTH_BET_TYPE = (r => (r[r.PLAYER_1_ANTE = 0] = "PLAYER_1_ANTE", r[r.PLAYER_1_BLIND = 1] = "PLAYER_1_BLIND", r[r.PLAYER_1_TRIP = 2] = "PLAYER_1_TRIP", r[r.PLAYER_1_RAISE_QUAD = 3] = "PLAYER_1_RAISE_QUAD", r[r.PLAYER_1_RAISE_TRIPLE = 4] = "PLAYER_1_RAISE_TRIPLE", r[r.PLAYER_1_RAISE_DOUBLE = 5] = "PLAYER_1_RAISE_DOUBLE", r[r.PLAYER_1_RAISE_EVEN = 6] = "PLAYER_1_RAISE_EVEN", r[r.PLAYER_2_ANTE = 7] = "PLAYER_2_ANTE", r[r.PLAYER_2_BLIND = 8] = "PLAYER_2_BLIND", r[r.PLAYER_2_TRIP = 9] = "PLAYER_2_TRIP", r[r.PLAYER_2_RAISE_QUAD = 10] = "PLAYER_2_RAISE_QUAD", r[r.PLAYER_2_RAISE_TRIPLE = 11] = "PLAYER_2_RAISE_TRIPLE", r[r.PLAYER_2_RAISE_DOUBLE = 12] = "PLAYER_2_RAISE_DOUBLE", r[r.PLAYER_2_RAISE_EVEN = 13] = "PLAYER_2_RAISE_EVEN", r[r.PLAYER_3_ANTE = 14] = "PLAYER_3_ANTE", r[r.PLAYER_3_BLIND = 15] = "PLAYER_3_BLIND", r[r.PLAYER_3_TRIP = 16] = "PLAYER_3_TRIP", r[r.PLAYER_3_RAISE_QUAD = 17] = "PLAYER_3_RAISE_QUAD", r[r.PLAYER_3_RAISE_TRIPLE = 18] = "PLAYER_3_RAISE_TRIPLE", r[r.PLAYER_3_RAISE_DOUBLE = 19] = "PLAYER_3_RAISE_DOUBLE", r[r.PLAYER_3_RAISE_EVEN = 20] = "PLAYER_3_RAISE_EVEN", r))(UTH_BET_TYPE || {});
const UTH_BET_TYPE_MAP = [BetType.UTH_Player1Ante, BetType.UTH_Player1Blind, BetType.UTH_Player1Trips, BetType.UTH_Player1RaiseQuad, BetType.UTH_Player1RaiseTriple, BetType.UTH_Player1RaiseDouble, BetType.UTH_Player1RaiseEven, BetType.UTH_Player2Ante, BetType.UTH_Player2Blind, BetType.UTH_Player2Trips, BetType.UTH_Player2RaiseQuad, BetType.UTH_Player2RaiseTriple, BetType.UTH_Player2RaiseDouble, BetType.UTH_Player2RaiseEven, BetType.UTH_Player3Ante, BetType.UTH_Player3Blind, BetType.UTH_Player3Trips, BetType.UTH_Player3RaiseQuad, BetType.UTH_Player3RaiseTriple, BetType.UTH_Player3RaiseDouble, BetType.UTH_Player3RaiseEven];
var POKDENG_BET_TYPE = (r => (r[r.PLAYER_1 = 0] = "PLAYER_1", r[r.PLAYER_2 = 1] = "PLAYER_2", r[r.PLAYER_3 = 2] = "PLAYER_3", r[r.PLAYER_4 = 3] = "PLAYER_4", r[r.PLAYER_5 = 4] = "PLAYER_5", r[r.P1_PAIR = 5] = "P1_PAIR", r[r.P2_PAIR = 6] = "P2_PAIR", r[r.P3_PAIR = 7] = "P3_PAIR", r[r.P4_PAIR = 8] = "P4_PAIR", r[r.P5_PAIR = 9] = "P5_PAIR", r))(POKDENG_BET_TYPE || {});
const POKDENG_BET_TYPE_MAP = [BetType.PD_Player1, BetType.PD_Player2, BetType.PD_Player3, BetType.PD_Player4, BetType.PD_Player5, BetType.PD_P1Pair, BetType.PD_P2Pair, BetType.PD_P3Pair, BetType.PD_P4Pair, BetType.PD_P5Pair];
var TWO_SIDES_POKDENG_BET_TYPE = (r => (r[r.PLAYER_1 = 0] = "PLAYER_1", r[r.PLAYER_2 = 1] = "PLAYER_2", r[r.PLAYER_3 = 2] = "PLAYER_3", r[r.PLAYER_4 = 3] = "PLAYER_4", r[r.PLAYER_5 = 4] = "PLAYER_5", r[r.BANKER_1 = 5] = "BANKER_1", r[r.BANKER_2 = 6] = "BANKER_2", r[r.BANKER_3 = 7] = "BANKER_3", r[r.BANKER_4 = 8] = "BANKER_4", r[r.BANKER_5 = 9] = "BANKER_5", r[r.P1_PAIR = 10] = "P1_PAIR", r[r.P2_PAIR = 11] = "P2_PAIR", r[r.P3_PAIR = 12] = "P3_PAIR", r[r.P4_PAIR = 13] = "P4_PAIR", r[r.P5_PAIR = 14] = "P5_PAIR", r[r.B_PAIR = 15] = "B_PAIR", r))(TWO_SIDES_POKDENG_BET_TYPE || {});
const TWO_SIDES_POKDENG_BET_TYPE_MAP = [BetType.TPD_Player1, BetType.TPD_Player2, BetType.TPD_Player3, BetType.TPD_Player4, BetType.TPD_Player5, BetType.TPD_Banker1, BetType.TPD_Banker2, BetType.TPD_Banker3, BetType.TPD_Banker4, BetType.TPD_Banker5, BetType.TPD_P1Pair, BetType.TPD_P2Pair, BetType.TPD_P3Pair, BetType.TPD_P4Pair, BetType.TPD_P5Pair, BetType.TPD_BPair];
var SICBO_BET_TYPE = (r => (r[r.SMALL = 0] = "SMALL", r[r.ODD = 1] = "ODD", r[r.EVEN = 2] = "EVEN", r[r.BIG = 3] = "BIG", r[r.TRIPLE_1 = 4] = "TRIPLE_1", r[r.TRIPLE_2 = 5] = "TRIPLE_2", r[r.TRIPLE_3 = 6] = "TRIPLE_3", r[r.TRIPLE_4 = 7] = "TRIPLE_4", r[r.TRIPLE_5 = 8] = "TRIPLE_5", r[r.TRIPLE_6 = 9] = "TRIPLE_6", r[r.TRIPLE = 10] = "TRIPLE", r[r.PAIR_1 = 11] = "PAIR_1", r[r.PAIR_2 = 12] = "PAIR_2", r[r.PAIR_3 = 13] = "PAIR_3", r[r.PAIR_4 = 14] = "PAIR_4", r[r.PAIR_5 = 15] = "PAIR_5", r[r.PAIR_6 = 16] = "PAIR_6", r[r.SUM_4 = 17] = "SUM_4", r[r.SUM_5 = 18] = "SUM_5", r[r.SUM_6 = 19] = "SUM_6", r[r.SUM_7 = 20] = "SUM_7", r[r.SUM_8 = 21] = "SUM_8", r[r.SUM_9 = 22] = "SUM_9", r[r.SUM_10 = 23] = "SUM_10", r[r.SUM_11 = 24] = "SUM_11", r[r.SUM_12 = 25] = "SUM_12", r[r.SUM_13 = 26] = "SUM_13", r[r.SUM_14 = 27] = "SUM_14", r[r.SUM_15 = 28] = "SUM_15", r[r.SUM_16 = 29] = "SUM_16", r[r.SUM_17 = 30] = "SUM_17", r[r.FORMAT_12 = 31] = "FORMAT_12", r[r.FORMAT_13 = 32] = "FORMAT_13", r[r.FORMAT_14 = 33] = "FORMAT_14", r[r.FORMAT_15 = 34] = "FORMAT_15", r[r.FORMAT_16 = 35] = "FORMAT_16", r[r.FORMAT_23 = 36] = "FORMAT_23", r[r.FORMAT_24 = 37] = "FORMAT_24", r[r.FORMAT_25 = 38] = "FORMAT_25", r[r.FORMAT_26 = 39] = "FORMAT_26", r[r.FORMAT_34 = 40] = "FORMAT_34", r[r.FORMAT_35 = 41] = "FORMAT_35", r[r.FORMAT_36 = 42] = "FORMAT_36", r[r.FORMAT_45 = 43] = "FORMAT_45", r[r.FORMAT_46 = 44] = "FORMAT_46", r[r.FORMAT_56 = 45] = "FORMAT_56", r[r.SINGLE_1 = 46] = "SINGLE_1", r[r.SINGLE_2 = 47] = "SINGLE_2", r[r.SINGLE_3 = 48] = "SINGLE_3", r[r.SINGLE_4 = 49] = "SINGLE_4", r[r.SINGLE_5 = 50] = "SINGLE_5", r[r.SINGLE_6 = 51] = "SINGLE_6", r))(SICBO_BET_TYPE || {});
const SICBO_BET_TYPE_MAP = [BetType.S_Small, BetType.S_Odd, BetType.S_Even, BetType.S_Big, BetType.S_Triple1, BetType.S_Triple2, BetType.S_Triple3, BetType.S_Triple4, BetType.S_Triple5, BetType.S_Triple6, BetType.S_Triple, BetType.S_Pair1, BetType.S_Pair2, BetType.S_Pair3, BetType.S_Pair4, BetType.S_Pair5, BetType.S_Pair6, BetType.S_Sum4, BetType.S_Sum5, BetType.S_Sum6, BetType.S_Sum7, BetType.S_Sum8, BetType.S_Sum9, BetType.S_Sum10, BetType.S_Sum11, BetType.S_Sum12, BetType.S_Sum13, BetType.S_Sum14, BetType.S_Sum15, BetType.S_Sum16, BetType.S_Sum17, BetType.S_Format12, BetType.S_Format13, BetType.S_Format14, BetType.S_Format15, BetType.S_Format16, BetType.S_Format23, BetType.S_Format24, BetType.S_Format25, BetType.S_Format26, BetType.S_Format34, BetType.S_Format35, BetType.S_Format36, BetType.S_Format45, BetType.S_Format46, BetType.S_Format56, BetType.S_Single1, BetType.S_Single2, BetType.S_Single3, BetType.S_Single4, BetType.S_Single5, BetType.S_Single6];
var HI_LO_BET_TYPE = (r => (r[r.HI = 0] = "HI", r[r.LO = 1] = "LO", r[r.HILO = 2] = "HILO", r[r.SINGLE_1 = 3] = "SINGLE_1", r[r.SINGLE_2 = 4] = "SINGLE_2", r[r.SINGLE_3 = 5] = "SINGLE_3", r[r.SINGLE_4 = 6] = "SINGLE_4", r[r.SINGLE_5 = 7] = "SINGLE_5", r[r.SINGLE_6 = 8] = "SINGLE_6", r[r.FORMAT_12 = 9] = "FORMAT_12", r[r.FORMAT_13 = 10] = "FORMAT_13", r[r.FORMAT_14 = 11] = "FORMAT_14", r[r.FORMAT_15 = 12] = "FORMAT_15", r[r.FORMAT_16 = 13] = "FORMAT_16", r[r.FORMAT_23 = 14] = "FORMAT_23", r[r.FORMAT_24 = 15] = "FORMAT_24", r[r.FORMAT_25 = 16] = "FORMAT_25", r[r.FORMAT_26 = 17] = "FORMAT_26", r[r.FORMAT_34 = 18] = "FORMAT_34", r[r.FORMAT_35 = 19] = "FORMAT_35", r[r.FORMAT_36 = 20] = "FORMAT_36", r[r.FORMAT_45 = 21] = "FORMAT_45", r[r.FORMAT_46 = 22] = "FORMAT_46", r[r.FORMAT_56 = 23] = "FORMAT_56", r[r.LO_1 = 24] = "LO_1", r[r.LO_2 = 25] = "LO_2", r[r.LO_3 = 26] = "LO_3", r[r.LO_4 = 27] = "LO_4", r[r.LO_5 = 28] = "LO_5", r[r.LO_6 = 29] = "LO_6", r[r.HI_3 = 30] = "HI_3", r[r.HI_4 = 31] = "HI_4", r[r.HI_5 = 32] = "HI_5", r[r.HI_6 = 33] = "HI_6", r[r.FORMAT_123 = 34] = "FORMAT_123", r[r.FORMAT_234 = 35] = "FORMAT_234", r[r.FORMAT_345 = 36] = "FORMAT_345", r[r.FORMAT_456 = 37] = "FORMAT_456", r))(HI_LO_BET_TYPE || {});
const HI_LO_BET_TYPE_MAP = [BetType.HL_Hi, BetType.HL_Lo, BetType.HL_HiLo, BetType.HL_Single1, BetType.HL_Single2, BetType.HL_Single3, BetType.HL_Single4, BetType.HL_Single5, BetType.HL_Single6, BetType.HL_Format12, BetType.HL_Format13, BetType.HL_Format14, BetType.HL_Format15, BetType.HL_Format16, BetType.HL_Format23, BetType.HL_Format24, BetType.HL_Format25, BetType.HL_Format26, BetType.HL_Format34, BetType.HL_Format35, BetType.HL_Format36, BetType.HL_Format45, BetType.HL_Format46, BetType.HL_Format56, BetType.HL_Lo1, BetType.HL_Lo2, BetType.HL_Lo3, BetType.HL_Lo4, BetType.HL_Lo5, BetType.HL_Lo6, BetType.HL_Hi3, BetType.HL_Hi4, BetType.HL_Hi5, BetType.HL_Hi6, BetType.HL_Format123, BetType.HL_Format234, BetType.HL_Format345, BetType.HL_Format456];
var SICTAN_BET_TYPE = (r => (r[r.ODD = 0] = "ODD", r[r.EVEN = 1] = "EVEN", r[r.FAN_1 = 2] = "FAN_1", r[r.FAN_2 = 3] = "FAN_2", r[r.FAN_3 = 4] = "FAN_3", r[r.FAN_4 = 5] = "FAN_4", r[r.NIM_12 = 6] = "NIM_12", r[r.NIM_13 = 7] = "NIM_13", r[r.NIM_14 = 8] = "NIM_14", r[r.NIM_21 = 9] = "NIM_21", r[r.NIM_23 = 10] = "NIM_23", r[r.NIM_24 = 11] = "NIM_24", r[r.NIM_31 = 12] = "NIM_31", r[r.NIM_32 = 13] = "NIM_32", r[r.NIM_34 = 14] = "NIM_34", r[r.NIM_41 = 15] = "NIM_41", r[r.NIM_42 = 16] = "NIM_42", r[r.NIM_43 = 17] = "NIM_43", r[r.NGA_1_23 = 18] = "NGA_1_23", r[r.NGA_1_24 = 19] = "NGA_1_24", r[r.NGA_1_34 = 20] = "NGA_1_34", r[r.NGA_2_13 = 21] = "NGA_2_13", r[r.NGA_2_14 = 22] = "NGA_2_14", r[r.NGA_2_34 = 23] = "NGA_2_34", r[r.NGA_3_12 = 24] = "NGA_3_12", r[r.NGA_3_14 = 25] = "NGA_3_14", r[r.NGA_3_24 = 26] = "NGA_3_24", r[r.NGA_4_13 = 27] = "NGA_4_13", r[r.NGA_4_12 = 28] = "NGA_4_12", r[r.NGA_4_23 = 29] = "NGA_4_23", r[r.SSH_123 = 30] = "SSH_123", r[r.SSH_124 = 31] = "SSH_124", r[r.SSH_134 = 32] = "SSH_134", r[r.SSH_234 = 33] = "SSH_234", r[r.KWOK_12 = 34] = "KWOK_12", r[r.KWOK_23 = 35] = "KWOK_23", r[r.KWOK_34 = 36] = "KWOK_34", r[r.KWOK_41 = 37] = "KWOK_41", r))(SICTAN_BET_TYPE || {});
const SICTAN_BET_TYPE_MAP = [BetType.ST_Odd, BetType.ST_Even, BetType.ST_Fan1, BetType.ST_Fan2, BetType.ST_Fan3, BetType.ST_Fan4, BetType.ST_Nim12, BetType.ST_Nim13, BetType.ST_Nim14, BetType.ST_Nim21, BetType.ST_Nim23, BetType.ST_Nim24, BetType.ST_Nim31, BetType.ST_Nim32, BetType.ST_Nim34, BetType.ST_Nim41, BetType.ST_Nim42, BetType.ST_Nim43, BetType.ST_1Nga23, BetType.ST_1Nga24, BetType.ST_1Nga34, BetType.ST_2Nga13, BetType.ST_2Nga14, BetType.ST_2Nga34, BetType.ST_3Nga12, BetType.ST_3Nga14, BetType.ST_3Nga24, BetType.ST_4Nga13, BetType.ST_4Nga12, BetType.ST_4Nga23, BetType.ST_Ssh123, BetType.ST_Ssh124, BetType.ST_Ssh134, BetType.ST_Ssh234, BetType.ST_Kwok12, BetType.ST_Kwok23, BetType.ST_Kwok34, BetType.ST_Kwok41];
var CASINO_WAR_BET_TYPE = (r => (r[r.PLAYER_1_ANTE = 0] = "PLAYER_1_ANTE", r[r.PLAYER_1_TIE_1 = 1] = "PLAYER_1_TIE_1", r[r.PLAYER_1_WAR = 2] = "PLAYER_1_WAR", r[r.PLAYER_1_TIE_2 = 3] = "PLAYER_1_TIE_2", r[r.PLAYER_2_ANTE = 4] = "PLAYER_2_ANTE", r[r.PLAYER_2_TIE_1 = 5] = "PLAYER_2_TIE_1", r[r.PLAYER_2_WAR = 6] = "PLAYER_2_WAR", r[r.PLAYER_2_TIE_2 = 7] = "PLAYER_2_TIE_2", r[r.PLAYER_3_ANTE = 8] = "PLAYER_3_ANTE", r[r.PLAYER_3_TIE_1 = 9] = "PLAYER_3_TIE_1", r[r.PLAYER_3_WAR = 10] = "PLAYER_3_WAR", r[r.PLAYER_3_TIE_2 = 11] = "PLAYER_3_TIE_2", r))(CASINO_WAR_BET_TYPE || {});
const CASINO_WAR_BET_TYPE_MAP = [BetType.CW_Player1Ante, BetType.CW_Player1Tie1, BetType.CW_Player1War, BetType.CW_Player1Tie2, BetType.CW_Player2Ante, BetType.CW_Player2Tie1, BetType.CW_Player2War, BetType.CW_Player2Tie2, BetType.CW_Player3Ante, BetType.CW_Player3Tie1, BetType.CW_Player3War, BetType.CW_Player3Tie2];
var BLACKJACK_BET_TYPE = (r => (r[r.ANTE = 0] = "ANTE", r[r.DOUBLE = 1] = "DOUBLE", r[r.SPLIT = 2] = "SPLIT", r[r.PAIR = 3] = "PAIR", r[r.INITIAL_213 = 4] = "INITIAL_213", r[r.HOT_3 = 5] = "HOT_3", r[r.BUST_IT = 6] = "BUST_IT", r[r.INSURANCE = 7] = "INSURANCE", r[r.LUCKY_LADIES = 8] = "LUCKY_LADIES", r))(BLACKJACK_BET_TYPE || {});
const BLACKJACK_BET_TYPE_MAP = [BetType.BJ_Ante, BetType.BJ_AnteDouble, BetType.BJ_Split, BetType.BJ_Pair, BetType.BJ_Initial213, BetType.BJ_Hot3, BetType.BJ_BustIt, BetType.BJ_Insurance, BetType.BJ_LuckyLadies];
var FPC_BET_TYPE = (r => (r[r.FISH = 0] = "FISH", r[r.PRAWN = 1] = "PRAWN", r[r.CALABASH = 2] = "CALABASH", r[r.COIN = 3] = "COIN", r[r.CRAB = 4] = "CRAB", r[r.CHICKEN = 5] = "CHICKEN", r[r.SINGLE_RED = 6] = "SINGLE_RED", r[r.SINGLE_GREEN = 7] = "SINGLE_GREEN", r[r.SINGLE_BLUE = 8] = "SINGLE_BLUE", r[r.DOUBLE_RED = 9] = "DOUBLE_RED", r[r.DOUBLE_GREEN = 10] = "DOUBLE_GREEN", r[r.DOUBLE_BLUE = 11] = "DOUBLE_BLUE", r[r.TRIPLE_RED = 12] = "TRIPLE_RED", r[r.TRIPLE_GREEN = 13] = "TRIPLE_GREEN", r[r.TRIPLE_BLUE = 14] = "TRIPLE_BLUE", r[r.ANY_TRIPLE = 15] = "ANY_TRIPLE", r[r.CALABASH_PRAWN = 16] = "CALABASH_PRAWN", r[r.CALABASH_FISH = 17] = "CALABASH_FISH", r[r.CALABASH_CHICKEN = 18] = "CALABASH_CHICKEN", r[r.CALABASH_CRAB = 19] = "CALABASH_CRAB", r[r.CALABASH_COIN = 20] = "CALABASH_COIN", r[r.PRAWN_FISH = 21] = "PRAWN_FISH", r[r.PRAWN_CHICKEN = 22] = "PRAWN_CHICKEN", r[r.PRAWN_CRAB = 23] = "PRAWN_CRAB", r[r.PRAWN_COIN = 24] = "PRAWN_COIN", r[r.FISH_CHICKEN = 25] = "FISH_CHICKEN", r[r.FISH_CRAB = 26] = "FISH_CRAB", r[r.FISH_COIN = 27] = "FISH_COIN", r[r.CHICKEN_CRAB = 28] = "CHICKEN_CRAB", r[r.CHICKEN_COIN = 29] = "CHICKEN_COIN", r[r.CRAB_COIN = 30] = "CRAB_COIN", r))(FPC_BET_TYPE || {});
const FPC_BET_TYPE_MAP = [BetType.FPC_Fish, BetType.FPC_Prawn, BetType.FPC_Calabash, BetType.FPC_Coin, BetType.FPC_Crab, BetType.FPC_Chicken, BetType.FPC_SingleRed, BetType.FPC_SingleGreen, BetType.FPC_SingleBlue, BetType.FPC_DoubleRed, BetType.FPC_DoubleGreen, BetType.FPC_DoubleBlue, BetType.FPC_TripleRed, BetType.FPC_TripleGreen, BetType.FPC_TripleBlue, BetType.FPC_AnyTriple, BetType.FPC_CalabashPrawn, BetType.FPC_CalabashFish, BetType.FPC_CalabashChicken, BetType.FPC_CalabashCrab, BetType.FPC_CalabashCoin, BetType.FPC_PrawnFish, BetType.FPC_PrawnChicken, BetType.FPC_PrawnCrab, BetType.FPC_PrawnCoin, BetType.FPC_FishChicken, BetType.FPC_FishCrab, BetType.FPC_FishCoin, BetType.FPC_ChickenCrab, BetType.FPC_ChickenCoin, BetType.FPC_CrabCoin];
var FPC_DICE = (r => (r[r.fish = 1] = "fish", r[r.prawn = 2] = "prawn", r[r.calabash = 3] = "calabash", r[r.coin = 4] = "coin", r[r.crab = 5] = "crab", r[r.chicken = 6] = "chicken", r))(FPC_DICE || {});
const FPC_COLOR = ["red", "green", "blue", "blue", "green", "red"], BetTable$1 = "", Responsive$N = "";
var BET_STATE = (r => (r[r.BETTING = 0] = "BETTING", r[r.NO_BET = 1] = "NO_BET", r))(BET_STATE || {});
const BetTable = r => jsx("section", {className: "bet_table", children: r.children}), FETCH_INIT = "FETCH_INIT",
    FETCH_SUCCESS = "FETCH_SUCCESS", FETCH_FAILED = "FETCH_FAILED", initState$6 = {loading: !0, error: !1, data: null};

function reducer(r = initState$6, R) {
    switch (R.type) {
        case FETCH_INIT:
            return {data: null, loading: !0, error: !1};
        case FETCH_SUCCESS:
            return {data: R.payload, loading: !1, error: !1};
        case FETCH_FAILED:
            return {data: null, loading: !1, error: !0};
        default:
            return initState$6
    }
}

const useFetch = r => {
    const [R, y] = React.useState(), [E, C] = React.useReducer(reducer, initState$6);

    async function x(B, N, L) {
        let O = 0;
        return new Promise(async D => {
            async function z() {
                try {
                    const F = await fetch(B[O], {mode: "cors"});
                    if (F.status != 404) {
                        const _e = F.headers.get("Content-Type");
                        if (_e && _e.includes("application/json")) {
                            const Y = await F.clone().json().catch(() => F.text());
                            Logger$1.success("Fetch succ ---->", B[O]), D(Y)
                        } else {
                            const Y = await F.text();
                            Logger$1.success("Fetch succ ---->", B[O]), D(Y)
                        }
                    } else throw new Error("Network response was not ok")
                } catch (F) {
                    Logger$1.error(`Error fetching data from ${B[O]}: ${F.message}`), O++, O < B.length ? await z() : (Logger$1.error("All URLs failed"), L())
                }
            }

            await z()
        })
    }

    return React.useEffect(() => {
        async function B() {
            if (C({type: FETCH_INIT}), R != "refresh") try {
                let N, L;
                if (r != null) if (N = await r(R), N.ok) Logger$1.info(" "), Logger$1.info("customFetchMethod", N, N.ok), Logger$1.info(" "), L = await N.text(); else {
                    Logger$1.warn(" "), Logger$1.warn("Http error", N.status), Logger$1.warn(" "), C({type: FETCH_FAILED});
                    return
                } else {
                    if (typeof R == "string") {
                        let O = function (me) {
                            return /^(?:\w+:)?\/\/([^\s\.]+\.\S{2}|localhost[\:?\d]*)\S*$/.test(me)
                        }, D = UrlFuncs().append(R, {t: Helper.urlRandomNumber()});
                        Logger$1.info("useFetch", D);
                        const z = () => {
                                C({type: FETCH_FAILED})
                            }, F = me => (me.charAt(me.length - 1) == "/" && (me = me.substring(0, me.length - 1)), me),
                            _e = me => /^[\w-]+\.[a-z]+(\?\S+)?$/i.test(me), Y = me => {
                                const ce = /\${(.+?)}/g, ie = me.match(ce);
                                return ie ? ie[0].substring(2, ie[0].length - 1) : null
                            }, H = (me, ce) => Object.prototype.hasOwnProperty.call(me, ce) ? me[ce] : null;
                        if (O(D)) L = await x([D], {mode: "cors"}, z); else if (_e(D)) L = await x([D], {mode: "cors"}, z); else {
                            let ce = ((ie, Be = "", ve) => {
                                let Re = !1, Ce = !1;
                                return Global.customizeUrl(Global.getAssetsDomainsInfos(ie, ve), Be, Re, Ce)
                            })(D, "", Global.preloadConfigJson);
                            Logger$1.info("Fetch --->", JSON.stringify(ce)), L = await x(ce, {mode: "cors"}, z)
                        }
                    }
                    if (Array.isArray(R)) {
                        let O = [];
                        R.forEach(D => {
                            let z = UrlFuncs().append(D, {t: Helper.urlRandomNumber()});
                            Logger$1.info("useFetch", z), O.push(fetch(z, {mode: "cors"}))
                        }), N = await Promise.all(O), L = N.map(D => D.text())
                    }
                }
                C({type: FETCH_SUCCESS, payload: L})
            } catch (N) {
                Logger$1.error("err = ", N), C({type: FETCH_FAILED})
            }
        }

        R && (Logger$1.info("fetch", R), B())
    }, [R]), {...E, setUrl: y}
}, usePreloadConifgJson = (r, R) => {
    const {loading: y, error: E, data: C, setUrl: x} = useFetch();
    React.useEffect(() => {
        R >= 0 && (Logger$1.info("needs to refresh usePreloadConifgJson", R), x("refresh"))
    }, [R]);
    let B = React.useCallback((z, F) => {
        r({type: z, payload: Global.preloadConfigJson})
    }, [r]), [N, L] = React.useState(!1), [O, D] = React.useState(!0);
    return React.useEffect(() => {
        {
            Logger$1.warn("Prelaodjson --> Prod mode"), D(!1), L(!0), B(SERVER_CONFIG_ACTIONS_TYPE.PRELOAD_CONFIG_FETCHED, Global.preloadConfigJson);
            return
        }
    }, []), React.useEffect(() => {
        if (C) if (Helper.isJsonString(C)) {
            let z = JSON.parse(C);
            Global.changePreloadConfigJson(z), L(!0), B(SERVER_CONFIG_ACTIONS_TYPE.PRELOAD_CONFIG_FETCHED, Global.preloadConfigJson);
            return
        } else Global.changePreloadConfigJson(C), L(!0), B(SERVER_CONFIG_ACTIONS_TYPE.PRELOAD_CONFIG_FETCHED, Global.preloadConfigJson)
    }, [C]), React.useEffect(() => {
        E && B(SERVER_CONFIG_ACTIONS_TYPE.FETCH_FAILED)
    }, [E]), React.useMemo(() => {
        D(y)
    }, [y]), {preloadConfigJsonloading: O, error: E, fetchSuzz: N}
}, useBannerConfigsJson = (r, R) => {
    const {loading: y, error: E, data: C, setUrl: x} = useFetch();
    React.useEffect(() => {
        R >= 0 && (Logger$1.info("needs to refresh useBannerConfigsJson", R), x("refresh"))
    }, [R]);
    let B = React.useCallback((z, F) => {
        r({type: z, payload: F})
    }, [r]), [N, L] = React.useState(!1), [O, D] = React.useState(!0);
    return React.useEffect(() => {
        {
            Logger$1.warn("BannerConfigJson --> Prod mode"), D(!1), L(!0), B(SERVER_CONFIG_ACTIONS_TYPE.BANNER_CONFIG_FETCHED, Global.bannerConfigJson);
            return
        }
    }, []), React.useEffect(() => {
        if (C) if (Helper.isJsonString(C)) {
            JSON.parse(C);
            let z = Global.convertBannerConfigJson(C);
            L(!0), B(SERVER_CONFIG_ACTIONS_TYPE.BANNER_CONFIG_FETCHED, z);
            return
        } else {
            let z = Global.convertBannerConfigJson(C);
            L(!0), B(SERVER_CONFIG_ACTIONS_TYPE.BANNER_CONFIG_FETCHED, z)
        }
    }, [C]), React.useEffect(() => {
    }, [E]), React.useMemo(() => {
        D(y)
    }, [y]), {bannerConfigsJsonloading: O, error: E, fetchSuzz: N}
};
var cryptoJsExports = {}, cryptoJs = {
    get exports() {
        return cryptoJsExports
    }, set exports(r) {
        cryptoJsExports = r
    }
};

function commonjsRequire(r) {
    throw new Error('Could not dynamically require "' + r + '". Please configure the dynamicRequireTargets or/and ignoreDynamicRequires option of @rollup/plugin-commonjs appropriately for this require call to work.')
}

var coreExports = {}, core = {
    get exports() {
        return coreExports
    }, set exports(r) {
        coreExports = r
    }
};
const __viteBrowserExternal = {}, __viteBrowserExternal$1 = Object.freeze(Object.defineProperty({
    __proto__: null,
    default: __viteBrowserExternal
}, Symbol.toStringTag, {value: "Module"})), require$$0 = getAugmentedNamespace(__viteBrowserExternal$1);
var hasRequiredCore;

function requireCore() {
    return hasRequiredCore || (hasRequiredCore = 1, function (r, R) {
        (function (y, E) {
            r.exports = E()
        })(commonjsGlobal, function () {
            var y = y || function (E, C) {
                var x;
                if (typeof window < "u" && window.crypto && (x = window.crypto), typeof self < "u" && self.crypto && (x = self.crypto), typeof globalThis < "u" && globalThis.crypto && (x = globalThis.crypto), !x && typeof window < "u" && window.msCrypto && (x = window.msCrypto), !x && typeof commonjsGlobal < "u" && commonjsGlobal.crypto && (x = commonjsGlobal.crypto), !x && typeof commonjsRequire == "function") try {
                    x = require$$0
                } catch {
                }
                var B = function () {
                    if (x) {
                        if (typeof x.getRandomValues == "function") try {
                            return x.getRandomValues(new Uint32Array(1))[0]
                        } catch {
                        }
                        if (typeof x.randomBytes == "function") try {
                            return x.randomBytes(4).readInt32LE()
                        } catch {
                        }
                    }
                    throw new Error("Native crypto module could not be used to get secure random number.")
                }, N = Object.create || function () {
                    function ie() {
                    }

                    return function (Be) {
                        var ve;
                        return ie.prototype = Be, ve = new ie, ie.prototype = null, ve
                    }
                }(), L = {}, O = L.lib = {}, D = O.Base = function () {
                    return {
                        extend: function (ie) {
                            var Be = N(this);
                            return ie && Be.mixIn(ie), (!Be.hasOwnProperty("init") || this.init === Be.init) && (Be.init = function () {
                                Be.$super.init.apply(this, arguments)
                            }), Be.init.prototype = Be, Be.$super = this, Be
                        }, create: function () {
                            var ie = this.extend();
                            return ie.init.apply(ie, arguments), ie
                        }, init: function () {
                        }, mixIn: function (ie) {
                            for (var Be in ie) ie.hasOwnProperty(Be) && (this[Be] = ie[Be]);
                            ie.hasOwnProperty("toString") && (this.toString = ie.toString)
                        }, clone: function () {
                            return this.init.prototype.extend(this)
                        }
                    }
                }(), z = O.WordArray = D.extend({
                    init: function (ie, Be) {
                        ie = this.words = ie || [], Be != C ? this.sigBytes = Be : this.sigBytes = ie.length * 4
                    }, toString: function (ie) {
                        return (ie || _e).stringify(this)
                    }, concat: function (ie) {
                        var Be = this.words, ve = ie.words, Re = this.sigBytes, Ce = ie.sigBytes;
                        if (this.clamp(), Re % 4) for (var Ne = 0; Ne < Ce; Ne++) {
                            var we = ve[Ne >>> 2] >>> 24 - Ne % 4 * 8 & 255;
                            Be[Re + Ne >>> 2] |= we << 24 - (Re + Ne) % 4 * 8
                        } else for (var Me = 0; Me < Ce; Me += 4) Be[Re + Me >>> 2] = ve[Me >>> 2];
                        return this.sigBytes += Ce, this
                    }, clamp: function () {
                        var ie = this.words, Be = this.sigBytes;
                        ie[Be >>> 2] &= 4294967295 << 32 - Be % 4 * 8, ie.length = E.ceil(Be / 4)
                    }, clone: function () {
                        var ie = D.clone.call(this);
                        return ie.words = this.words.slice(0), ie
                    }, random: function (ie) {
                        for (var Be = [], ve = 0; ve < ie; ve += 4) Be.push(B());
                        return new z.init(Be, ie)
                    }
                }), F = L.enc = {}, _e = F.Hex = {
                    stringify: function (ie) {
                        for (var Be = ie.words, ve = ie.sigBytes, Re = [], Ce = 0; Ce < ve; Ce++) {
                            var Ne = Be[Ce >>> 2] >>> 24 - Ce % 4 * 8 & 255;
                            Re.push((Ne >>> 4).toString(16)), Re.push((Ne & 15).toString(16))
                        }
                        return Re.join("")
                    }, parse: function (ie) {
                        for (var Be = ie.length, ve = [], Re = 0; Re < Be; Re += 2) ve[Re >>> 3] |= parseInt(ie.substr(Re, 2), 16) << 24 - Re % 8 * 4;
                        return new z.init(ve, Be / 2)
                    }
                }, Y = F.Latin1 = {
                    stringify: function (ie) {
                        for (var Be = ie.words, ve = ie.sigBytes, Re = [], Ce = 0; Ce < ve; Ce++) {
                            var Ne = Be[Ce >>> 2] >>> 24 - Ce % 4 * 8 & 255;
                            Re.push(String.fromCharCode(Ne))
                        }
                        return Re.join("")
                    }, parse: function (ie) {
                        for (var Be = ie.length, ve = [], Re = 0; Re < Be; Re++) ve[Re >>> 2] |= (ie.charCodeAt(Re) & 255) << 24 - Re % 4 * 8;
                        return new z.init(ve, Be)
                    }
                }, H = F.Utf8 = {
                    stringify: function (ie) {
                        try {
                            return decodeURIComponent(escape(Y.stringify(ie)))
                        } catch {
                            throw new Error("Malformed UTF-8 data")
                        }
                    }, parse: function (ie) {
                        return Y.parse(unescape(encodeURIComponent(ie)))
                    }
                }, me = O.BufferedBlockAlgorithm = D.extend({
                    reset: function () {
                        this._data = new z.init, this._nDataBytes = 0
                    }, _append: function (ie) {
                        typeof ie == "string" && (ie = H.parse(ie)), this._data.concat(ie), this._nDataBytes += ie.sigBytes
                    }, _process: function (ie) {
                        var Be, ve = this._data, Re = ve.words, Ce = ve.sigBytes, Ne = this.blockSize, we = Ne * 4,
                            Me = Ce / we;
                        ie ? Me = E.ceil(Me) : Me = E.max((Me | 0) - this._minBufferSize, 0);
                        var ke = Me * Ne, Fe = E.min(ke * 4, Ce);
                        if (ke) {
                            for (var $e = 0; $e < ke; $e += Ne) this._doProcessBlock(Re, $e);
                            Be = Re.splice(0, ke), ve.sigBytes -= Fe
                        }
                        return new z.init(Be, Fe)
                    }, clone: function () {
                        var ie = D.clone.call(this);
                        return ie._data = this._data.clone(), ie
                    }, _minBufferSize: 0
                });
                O.Hasher = me.extend({
                    cfg: D.extend(), init: function (ie) {
                        this.cfg = this.cfg.extend(ie), this.reset()
                    }, reset: function () {
                        me.reset.call(this), this._doReset()
                    }, update: function (ie) {
                        return this._append(ie), this._process(), this
                    }, finalize: function (ie) {
                        ie && this._append(ie);
                        var Be = this._doFinalize();
                        return Be
                    }, blockSize: 16, _createHelper: function (ie) {
                        return function (Be, ve) {
                            return new ie.init(ve).finalize(Be)
                        }
                    }, _createHmacHelper: function (ie) {
                        return function (Be, ve) {
                            return new ce.HMAC.init(ie, ve).finalize(Be)
                        }
                    }
                });
                var ce = L.algo = {};
                return L
            }(Math);
            return y
        })
    }(core)), coreExports
}

var x64CoreExports = {}, x64Core = {
    get exports() {
        return x64CoreExports
    }, set exports(r) {
        x64CoreExports = r
    }
}, hasRequiredX64Core;

function requireX64Core() {
    return hasRequiredX64Core || (hasRequiredX64Core = 1, function (r, R) {
        (function (y, E) {
            r.exports = E(requireCore())
        })(commonjsGlobal, function (y) {
            return function (E) {
                var C = y, x = C.lib, B = x.Base, N = x.WordArray, L = C.x64 = {};
                L.Word = B.extend({
                    init: function (O, D) {
                        this.high = O, this.low = D
                    }
                }), L.WordArray = B.extend({
                    init: function (O, D) {
                        O = this.words = O || [], D != E ? this.sigBytes = D : this.sigBytes = O.length * 8
                    }, toX32: function () {
                        for (var O = this.words, D = O.length, z = [], F = 0; F < D; F++) {
                            var _e = O[F];
                            z.push(_e.high), z.push(_e.low)
                        }
                        return N.create(z, this.sigBytes)
                    }, clone: function () {
                        for (var O = B.clone.call(this), D = O.words = this.words.slice(0), z = D.length, F = 0; F < z; F++) D[F] = D[F].clone();
                        return O
                    }
                })
            }(), y
        })
    }(x64Core)), x64CoreExports
}

var libTypedarraysExports = {}, libTypedarrays = {
    get exports() {
        return libTypedarraysExports
    }, set exports(r) {
        libTypedarraysExports = r
    }
}, hasRequiredLibTypedarrays;

function requireLibTypedarrays() {
    return hasRequiredLibTypedarrays || (hasRequiredLibTypedarrays = 1, function (r, R) {
        (function (y, E) {
            r.exports = E(requireCore())
        })(commonjsGlobal, function (y) {
            return function () {
                if (typeof ArrayBuffer == "function") {
                    var E = y, C = E.lib, x = C.WordArray, B = x.init, N = x.init = function (L) {
                        if (L instanceof ArrayBuffer && (L = new Uint8Array(L)), (L instanceof Int8Array || typeof Uint8ClampedArray < "u" && L instanceof Uint8ClampedArray || L instanceof Int16Array || L instanceof Uint16Array || L instanceof Int32Array || L instanceof Uint32Array || L instanceof Float32Array || L instanceof Float64Array) && (L = new Uint8Array(L.buffer, L.byteOffset, L.byteLength)), L instanceof Uint8Array) {
                            for (var O = L.byteLength, D = [], z = 0; z < O; z++) D[z >>> 2] |= L[z] << 24 - z % 4 * 8;
                            B.call(this, D, O)
                        } else B.apply(this, arguments)
                    };
                    N.prototype = x
                }
            }(), y.lib.WordArray
        })
    }(libTypedarrays)), libTypedarraysExports
}

var encUtf16Exports = {}, encUtf16 = {
    get exports() {
        return encUtf16Exports
    }, set exports(r) {
        encUtf16Exports = r
    }
}, hasRequiredEncUtf16;

function requireEncUtf16() {
    return hasRequiredEncUtf16 || (hasRequiredEncUtf16 = 1, function (r, R) {
        (function (y, E) {
            r.exports = E(requireCore())
        })(commonjsGlobal, function (y) {
            return function () {
                var E = y, C = E.lib, x = C.WordArray, B = E.enc;
                B.Utf16 = B.Utf16BE = {
                    stringify: function (L) {
                        for (var O = L.words, D = L.sigBytes, z = [], F = 0; F < D; F += 2) {
                            var _e = O[F >>> 2] >>> 16 - F % 4 * 8 & 65535;
                            z.push(String.fromCharCode(_e))
                        }
                        return z.join("")
                    }, parse: function (L) {
                        for (var O = L.length, D = [], z = 0; z < O; z++) D[z >>> 1] |= L.charCodeAt(z) << 16 - z % 2 * 16;
                        return x.create(D, O * 2)
                    }
                }, B.Utf16LE = {
                    stringify: function (L) {
                        for (var O = L.words, D = L.sigBytes, z = [], F = 0; F < D; F += 2) {
                            var _e = N(O[F >>> 2] >>> 16 - F % 4 * 8 & 65535);
                            z.push(String.fromCharCode(_e))
                        }
                        return z.join("")
                    }, parse: function (L) {
                        for (var O = L.length, D = [], z = 0; z < O; z++) D[z >>> 1] |= N(L.charCodeAt(z) << 16 - z % 2 * 16);
                        return x.create(D, O * 2)
                    }
                };

                function N(L) {
                    return L << 8 & 4278255360 | L >>> 8 & 16711935
                }
            }(), y.enc.Utf16
        })
    }(encUtf16)), encUtf16Exports
}

var encBase64Exports = {}, encBase64 = {
    get exports() {
        return encBase64Exports
    }, set exports(r) {
        encBase64Exports = r
    }
}, hasRequiredEncBase64;

function requireEncBase64() {
    return hasRequiredEncBase64 || (hasRequiredEncBase64 = 1, function (r, R) {
        (function (y, E) {
            r.exports = E(requireCore())
        })(commonjsGlobal, function (y) {
            return function () {
                var E = y, C = E.lib, x = C.WordArray, B = E.enc;
                B.Base64 = {
                    stringify: function (L) {
                        var O = L.words, D = L.sigBytes, z = this._map;
                        L.clamp();
                        for (var F = [], _e = 0; _e < D; _e += 3) for (var Y = O[_e >>> 2] >>> 24 - _e % 4 * 8 & 255, H = O[_e + 1 >>> 2] >>> 24 - (_e + 1) % 4 * 8 & 255, me = O[_e + 2 >>> 2] >>> 24 - (_e + 2) % 4 * 8 & 255, ce = Y << 16 | H << 8 | me, ie = 0; ie < 4 && _e + ie * .75 < D; ie++) F.push(z.charAt(ce >>> 6 * (3 - ie) & 63));
                        var Be = z.charAt(64);
                        if (Be) for (; F.length % 4;) F.push(Be);
                        return F.join("")
                    }, parse: function (L) {
                        var O = L.length, D = this._map, z = this._reverseMap;
                        if (!z) {
                            z = this._reverseMap = [];
                            for (var F = 0; F < D.length; F++) z[D.charCodeAt(F)] = F
                        }
                        var _e = D.charAt(64);
                        if (_e) {
                            var Y = L.indexOf(_e);
                            Y !== -1 && (O = Y)
                        }
                        return N(L, O, z)
                    }, _map: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/="
                };

                function N(L, O, D) {
                    for (var z = [], F = 0, _e = 0; _e < O; _e++) if (_e % 4) {
                        var Y = D[L.charCodeAt(_e - 1)] << _e % 4 * 2, H = D[L.charCodeAt(_e)] >>> 6 - _e % 4 * 2,
                            me = Y | H;
                        z[F >>> 2] |= me << 24 - F % 4 * 8, F++
                    }
                    return x.create(z, F)
                }
            }(), y.enc.Base64
        })
    }(encBase64)), encBase64Exports
}

var encBase64urlExports = {}, encBase64url = {
    get exports() {
        return encBase64urlExports
    }, set exports(r) {
        encBase64urlExports = r
    }
}, hasRequiredEncBase64url;

function requireEncBase64url() {
    return hasRequiredEncBase64url || (hasRequiredEncBase64url = 1, function (r, R) {
        (function (y, E) {
            r.exports = E(requireCore())
        })(commonjsGlobal, function (y) {
            return function () {
                var E = y, C = E.lib, x = C.WordArray, B = E.enc;
                B.Base64url = {
                    stringify: function (L, O = !0) {
                        var D = L.words, z = L.sigBytes, F = O ? this._safe_map : this._map;
                        L.clamp();
                        for (var _e = [], Y = 0; Y < z; Y += 3) for (var H = D[Y >>> 2] >>> 24 - Y % 4 * 8 & 255, me = D[Y + 1 >>> 2] >>> 24 - (Y + 1) % 4 * 8 & 255, ce = D[Y + 2 >>> 2] >>> 24 - (Y + 2) % 4 * 8 & 255, ie = H << 16 | me << 8 | ce, Be = 0; Be < 4 && Y + Be * .75 < z; Be++) _e.push(F.charAt(ie >>> 6 * (3 - Be) & 63));
                        var ve = F.charAt(64);
                        if (ve) for (; _e.length % 4;) _e.push(ve);
                        return _e.join("")
                    },
                    parse: function (L, O = !0) {
                        var D = L.length, z = O ? this._safe_map : this._map, F = this._reverseMap;
                        if (!F) {
                            F = this._reverseMap = [];
                            for (var _e = 0; _e < z.length; _e++) F[z.charCodeAt(_e)] = _e
                        }
                        var Y = z.charAt(64);
                        if (Y) {
                            var H = L.indexOf(Y);
                            H !== -1 && (D = H)
                        }
                        return N(L, D, F)
                    },
                    _map: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",
                    _safe_map: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_"
                };

                function N(L, O, D) {
                    for (var z = [], F = 0, _e = 0; _e < O; _e++) if (_e % 4) {
                        var Y = D[L.charCodeAt(_e - 1)] << _e % 4 * 2, H = D[L.charCodeAt(_e)] >>> 6 - _e % 4 * 2,
                            me = Y | H;
                        z[F >>> 2] |= me << 24 - F % 4 * 8, F++
                    }
                    return x.create(z, F)
                }
            }(), y.enc.Base64url
        })
    }(encBase64url)), encBase64urlExports
}

var md5Exports = {}, md5$2 = {
    get exports() {
        return md5Exports
    }, set exports(r) {
        md5Exports = r
    }
}, hasRequiredMd5;

function requireMd5() {
    return hasRequiredMd5 || (hasRequiredMd5 = 1, function (r, R) {
        (function (y, E) {
            r.exports = E(requireCore())
        })(commonjsGlobal, function (y) {
            return function (E) {
                var C = y, x = C.lib, B = x.WordArray, N = x.Hasher, L = C.algo, O = [];
                (function () {
                    for (var H = 0; H < 64; H++) O[H] = E.abs(E.sin(H + 1)) * 4294967296 | 0
                })();
                var D = L.MD5 = N.extend({
                    _doReset: function () {
                        this._hash = new B.init([1732584193, 4023233417, 2562383102, 271733878])
                    }, _doProcessBlock: function (H, me) {
                        for (var ce = 0; ce < 16; ce++) {
                            var ie = me + ce, Be = H[ie];
                            H[ie] = (Be << 8 | Be >>> 24) & 16711935 | (Be << 24 | Be >>> 8) & 4278255360
                        }
                        var ve = this._hash.words, Re = H[me + 0], Ce = H[me + 1], Ne = H[me + 2], we = H[me + 3],
                            Me = H[me + 4], ke = H[me + 5], Fe = H[me + 6], $e = H[me + 7], Ve = H[me + 8],
                            Je = H[me + 9], Qe = H[me + 10], Ze = H[me + 11], qe = H[me + 12], ze = H[me + 13],
                            De = H[me + 14], Xe = H[me + 15], He = ve[0], Ge = ve[1], Le = ve[2], We = ve[3];
                        He = z(He, Ge, Le, We, Re, 7, O[0]), We = z(We, He, Ge, Le, Ce, 12, O[1]), Le = z(Le, We, He, Ge, Ne, 17, O[2]), Ge = z(Ge, Le, We, He, we, 22, O[3]), He = z(He, Ge, Le, We, Me, 7, O[4]), We = z(We, He, Ge, Le, ke, 12, O[5]), Le = z(Le, We, He, Ge, Fe, 17, O[6]), Ge = z(Ge, Le, We, He, $e, 22, O[7]), He = z(He, Ge, Le, We, Ve, 7, O[8]), We = z(We, He, Ge, Le, Je, 12, O[9]), Le = z(Le, We, He, Ge, Qe, 17, O[10]), Ge = z(Ge, Le, We, He, Ze, 22, O[11]), He = z(He, Ge, Le, We, qe, 7, O[12]), We = z(We, He, Ge, Le, ze, 12, O[13]), Le = z(Le, We, He, Ge, De, 17, O[14]), Ge = z(Ge, Le, We, He, Xe, 22, O[15]), He = F(He, Ge, Le, We, Ce, 5, O[16]), We = F(We, He, Ge, Le, Fe, 9, O[17]), Le = F(Le, We, He, Ge, Ze, 14, O[18]), Ge = F(Ge, Le, We, He, Re, 20, O[19]), He = F(He, Ge, Le, We, ke, 5, O[20]), We = F(We, He, Ge, Le, Qe, 9, O[21]), Le = F(Le, We, He, Ge, Xe, 14, O[22]), Ge = F(Ge, Le, We, He, Me, 20, O[23]), He = F(He, Ge, Le, We, Je, 5, O[24]), We = F(We, He, Ge, Le, De, 9, O[25]), Le = F(Le, We, He, Ge, we, 14, O[26]), Ge = F(Ge, Le, We, He, Ve, 20, O[27]), He = F(He, Ge, Le, We, ze, 5, O[28]), We = F(We, He, Ge, Le, Ne, 9, O[29]), Le = F(Le, We, He, Ge, $e, 14, O[30]), Ge = F(Ge, Le, We, He, qe, 20, O[31]), He = _e(He, Ge, Le, We, ke, 4, O[32]), We = _e(We, He, Ge, Le, Ve, 11, O[33]), Le = _e(Le, We, He, Ge, Ze, 16, O[34]), Ge = _e(Ge, Le, We, He, De, 23, O[35]), He = _e(He, Ge, Le, We, Ce, 4, O[36]), We = _e(We, He, Ge, Le, Me, 11, O[37]), Le = _e(Le, We, He, Ge, $e, 16, O[38]), Ge = _e(Ge, Le, We, He, Qe, 23, O[39]), He = _e(He, Ge, Le, We, ze, 4, O[40]), We = _e(We, He, Ge, Le, Re, 11, O[41]), Le = _e(Le, We, He, Ge, we, 16, O[42]), Ge = _e(Ge, Le, We, He, Fe, 23, O[43]), He = _e(He, Ge, Le, We, Je, 4, O[44]), We = _e(We, He, Ge, Le, qe, 11, O[45]), Le = _e(Le, We, He, Ge, Xe, 16, O[46]), Ge = _e(Ge, Le, We, He, Ne, 23, O[47]), He = Y(He, Ge, Le, We, Re, 6, O[48]), We = Y(We, He, Ge, Le, $e, 10, O[49]), Le = Y(Le, We, He, Ge, De, 15, O[50]), Ge = Y(Ge, Le, We, He, ke, 21, O[51]), He = Y(He, Ge, Le, We, qe, 6, O[52]), We = Y(We, He, Ge, Le, we, 10, O[53]), Le = Y(Le, We, He, Ge, Qe, 15, O[54]), Ge = Y(Ge, Le, We, He, Ce, 21, O[55]), He = Y(He, Ge, Le, We, Ve, 6, O[56]), We = Y(We, He, Ge, Le, Xe, 10, O[57]), Le = Y(Le, We, He, Ge, Fe, 15, O[58]), Ge = Y(Ge, Le, We, He, ze, 21, O[59]), He = Y(He, Ge, Le, We, Me, 6, O[60]), We = Y(We, He, Ge, Le, Ze, 10, O[61]), Le = Y(Le, We, He, Ge, Ne, 15, O[62]), Ge = Y(Ge, Le, We, He, Je, 21, O[63]), ve[0] = ve[0] + He | 0, ve[1] = ve[1] + Ge | 0, ve[2] = ve[2] + Le | 0, ve[3] = ve[3] + We | 0
                    }, _doFinalize: function () {
                        var H = this._data, me = H.words, ce = this._nDataBytes * 8, ie = H.sigBytes * 8;
                        me[ie >>> 5] |= 128 << 24 - ie % 32;
                        var Be = E.floor(ce / 4294967296), ve = ce;
                        me[(ie + 64 >>> 9 << 4) + 15] = (Be << 8 | Be >>> 24) & 16711935 | (Be << 24 | Be >>> 8) & 4278255360, me[(ie + 64 >>> 9 << 4) + 14] = (ve << 8 | ve >>> 24) & 16711935 | (ve << 24 | ve >>> 8) & 4278255360, H.sigBytes = (me.length + 1) * 4, this._process();
                        for (var Re = this._hash, Ce = Re.words, Ne = 0; Ne < 4; Ne++) {
                            var we = Ce[Ne];
                            Ce[Ne] = (we << 8 | we >>> 24) & 16711935 | (we << 24 | we >>> 8) & 4278255360
                        }
                        return Re
                    }, clone: function () {
                        var H = N.clone.call(this);
                        return H._hash = this._hash.clone(), H
                    }
                });

                function z(H, me, ce, ie, Be, ve, Re) {
                    var Ce = H + (me & ce | ~me & ie) + Be + Re;
                    return (Ce << ve | Ce >>> 32 - ve) + me
                }

                function F(H, me, ce, ie, Be, ve, Re) {
                    var Ce = H + (me & ie | ce & ~ie) + Be + Re;
                    return (Ce << ve | Ce >>> 32 - ve) + me
                }

                function _e(H, me, ce, ie, Be, ve, Re) {
                    var Ce = H + (me ^ ce ^ ie) + Be + Re;
                    return (Ce << ve | Ce >>> 32 - ve) + me
                }

                function Y(H, me, ce, ie, Be, ve, Re) {
                    var Ce = H + (ce ^ (me | ~ie)) + Be + Re;
                    return (Ce << ve | Ce >>> 32 - ve) + me
                }

                C.MD5 = N._createHelper(D), C.HmacMD5 = N._createHmacHelper(D)
            }(Math), y.MD5
        })
    }(md5$2)), md5Exports
}

var sha1Exports = {}, sha1 = {
    get exports() {
        return sha1Exports
    }, set exports(r) {
        sha1Exports = r
    }
}, hasRequiredSha1;

function requireSha1() {
    return hasRequiredSha1 || (hasRequiredSha1 = 1, function (r, R) {
        (function (y, E) {
            r.exports = E(requireCore())
        })(commonjsGlobal, function (y) {
            return function () {
                var E = y, C = E.lib, x = C.WordArray, B = C.Hasher, N = E.algo, L = [], O = N.SHA1 = B.extend({
                    _doReset: function () {
                        this._hash = new x.init([1732584193, 4023233417, 2562383102, 271733878, 3285377520])
                    }, _doProcessBlock: function (D, z) {
                        for (var F = this._hash.words, _e = F[0], Y = F[1], H = F[2], me = F[3], ce = F[4], ie = 0; ie < 80; ie++) {
                            if (ie < 16) L[ie] = D[z + ie] | 0; else {
                                var Be = L[ie - 3] ^ L[ie - 8] ^ L[ie - 14] ^ L[ie - 16];
                                L[ie] = Be << 1 | Be >>> 31
                            }
                            var ve = (_e << 5 | _e >>> 27) + ce + L[ie];
                            ie < 20 ? ve += (Y & H | ~Y & me) + 1518500249 : ie < 40 ? ve += (Y ^ H ^ me) + 1859775393 : ie < 60 ? ve += (Y & H | Y & me | H & me) - 1894007588 : ve += (Y ^ H ^ me) - 899497514, ce = me, me = H, H = Y << 30 | Y >>> 2, Y = _e, _e = ve
                        }
                        F[0] = F[0] + _e | 0, F[1] = F[1] + Y | 0, F[2] = F[2] + H | 0, F[3] = F[3] + me | 0, F[4] = F[4] + ce | 0
                    }, _doFinalize: function () {
                        var D = this._data, z = D.words, F = this._nDataBytes * 8, _e = D.sigBytes * 8;
                        return z[_e >>> 5] |= 128 << 24 - _e % 32, z[(_e + 64 >>> 9 << 4) + 14] = Math.floor(F / 4294967296), z[(_e + 64 >>> 9 << 4) + 15] = F, D.sigBytes = z.length * 4, this._process(), this._hash
                    }, clone: function () {
                        var D = B.clone.call(this);
                        return D._hash = this._hash.clone(), D
                    }
                });
                E.SHA1 = B._createHelper(O), E.HmacSHA1 = B._createHmacHelper(O)
            }(), y.SHA1
        })
    }(sha1)), sha1Exports
}

var sha256Exports = {}, sha256 = {
    get exports() {
        return sha256Exports
    }, set exports(r) {
        sha256Exports = r
    }
}, hasRequiredSha256;

function requireSha256() {
    return hasRequiredSha256 || (hasRequiredSha256 = 1, function (r, R) {
        (function (y, E) {
            r.exports = E(requireCore())
        })(commonjsGlobal, function (y) {
            return function (E) {
                var C = y, x = C.lib, B = x.WordArray, N = x.Hasher, L = C.algo, O = [], D = [];
                (function () {
                    function _e(ce) {
                        for (var ie = E.sqrt(ce), Be = 2; Be <= ie; Be++) if (!(ce % Be)) return !1;
                        return !0
                    }

                    function Y(ce) {
                        return (ce - (ce | 0)) * 4294967296 | 0
                    }

                    for (var H = 2, me = 0; me < 64;) _e(H) && (me < 8 && (O[me] = Y(E.pow(H, 1 / 2))), D[me] = Y(E.pow(H, 1 / 3)), me++), H++
                })();
                var z = [], F = L.SHA256 = N.extend({
                    _doReset: function () {
                        this._hash = new B.init(O.slice(0))
                    }, _doProcessBlock: function (_e, Y) {
                        for (var H = this._hash.words, me = H[0], ce = H[1], ie = H[2], Be = H[3], ve = H[4], Re = H[5], Ce = H[6], Ne = H[7], we = 0; we < 64; we++) {
                            if (we < 16) z[we] = _e[Y + we] | 0; else {
                                var Me = z[we - 15], ke = (Me << 25 | Me >>> 7) ^ (Me << 14 | Me >>> 18) ^ Me >>> 3,
                                    Fe = z[we - 2], $e = (Fe << 15 | Fe >>> 17) ^ (Fe << 13 | Fe >>> 19) ^ Fe >>> 10;
                                z[we] = ke + z[we - 7] + $e + z[we - 16]
                            }
                            var Ve = ve & Re ^ ~ve & Ce, Je = me & ce ^ me & ie ^ ce & ie,
                                Qe = (me << 30 | me >>> 2) ^ (me << 19 | me >>> 13) ^ (me << 10 | me >>> 22),
                                Ze = (ve << 26 | ve >>> 6) ^ (ve << 21 | ve >>> 11) ^ (ve << 7 | ve >>> 25),
                                qe = Ne + Ze + Ve + D[we] + z[we], ze = Qe + Je;
                            Ne = Ce, Ce = Re, Re = ve, ve = Be + qe | 0, Be = ie, ie = ce, ce = me, me = qe + ze | 0
                        }
                        H[0] = H[0] + me | 0, H[1] = H[1] + ce | 0, H[2] = H[2] + ie | 0, H[3] = H[3] + Be | 0, H[4] = H[4] + ve | 0, H[5] = H[5] + Re | 0, H[6] = H[6] + Ce | 0, H[7] = H[7] + Ne | 0
                    }, _doFinalize: function () {
                        var _e = this._data, Y = _e.words, H = this._nDataBytes * 8, me = _e.sigBytes * 8;
                        return Y[me >>> 5] |= 128 << 24 - me % 32, Y[(me + 64 >>> 9 << 4) + 14] = E.floor(H / 4294967296), Y[(me + 64 >>> 9 << 4) + 15] = H, _e.sigBytes = Y.length * 4, this._process(), this._hash
                    }, clone: function () {
                        var _e = N.clone.call(this);
                        return _e._hash = this._hash.clone(), _e
                    }
                });
                C.SHA256 = N._createHelper(F), C.HmacSHA256 = N._createHmacHelper(F)
            }(Math), y.SHA256
        })
    }(sha256)), sha256Exports
}

var sha224Exports = {}, sha224 = {
    get exports() {
        return sha224Exports
    }, set exports(r) {
        sha224Exports = r
    }
}, hasRequiredSha224;

function requireSha224() {
    return hasRequiredSha224 || (hasRequiredSha224 = 1, function (r, R) {
        (function (y, E, C) {
            r.exports = E(requireCore(), requireSha256())
        })(commonjsGlobal, function (y) {
            return function () {
                var E = y, C = E.lib, x = C.WordArray, B = E.algo, N = B.SHA256, L = B.SHA224 = N.extend({
                    _doReset: function () {
                        this._hash = new x.init([3238371032, 914150663, 812702999, 4144912697, 4290775857, 1750603025, 1694076839, 3204075428])
                    }, _doFinalize: function () {
                        var O = N._doFinalize.call(this);
                        return O.sigBytes -= 4, O
                    }
                });
                E.SHA224 = N._createHelper(L), E.HmacSHA224 = N._createHmacHelper(L)
            }(), y.SHA224
        })
    }(sha224)), sha224Exports
}

var sha512Exports = {}, sha512 = {
    get exports() {
        return sha512Exports
    }, set exports(r) {
        sha512Exports = r
    }
}, hasRequiredSha512;

function requireSha512() {
    return hasRequiredSha512 || (hasRequiredSha512 = 1, function (r, R) {
        (function (y, E, C) {
            r.exports = E(requireCore(), requireX64Core())
        })(commonjsGlobal, function (y) {
            return function () {
                var E = y, C = E.lib, x = C.Hasher, B = E.x64, N = B.Word, L = B.WordArray, O = E.algo;

                function D() {
                    return N.create.apply(N, arguments)
                }

                var z = [D(1116352408, 3609767458), D(1899447441, 602891725), D(3049323471, 3964484399), D(3921009573, 2173295548), D(961987163, 4081628472), D(1508970993, 3053834265), D(2453635748, 2937671579), D(2870763221, 3664609560), D(3624381080, 2734883394), D(310598401, 1164996542), D(607225278, 1323610764), D(1426881987, 3590304994), D(1925078388, 4068182383), D(2162078206, 991336113), D(2614888103, 633803317), D(3248222580, 3479774868), D(3835390401, 2666613458), D(4022224774, 944711139), D(264347078, 2341262773), D(604807628, 2007800933), D(770255983, 1495990901), D(1249150122, 1856431235), D(1555081692, 3175218132), D(1996064986, 2198950837), D(2554220882, 3999719339), D(2821834349, 766784016), D(2952996808, 2566594879), D(3210313671, 3203337956), D(3336571891, 1034457026), D(3584528711, 2466948901), D(113926993, 3758326383), D(338241895, 168717936), D(666307205, 1188179964), D(773529912, 1546045734), D(1294757372, 1522805485), D(1396182291, 2643833823), D(1695183700, 2343527390), D(1986661051, 1014477480), D(2177026350, 1206759142), D(2456956037, 344077627), D(2730485921, 1290863460), D(2820302411, 3158454273), D(3259730800, 3505952657), D(3345764771, 106217008), D(3516065817, 3606008344), D(3600352804, 1432725776), D(4094571909, 1467031594), D(275423344, 851169720), D(430227734, 3100823752), D(506948616, 1363258195), D(659060556, 3750685593), D(883997877, 3785050280), D(958139571, 3318307427), D(1322822218, 3812723403), D(1537002063, 2003034995), D(1747873779, 3602036899), D(1955562222, 1575990012), D(2024104815, 1125592928), D(2227730452, 2716904306), D(2361852424, 442776044), D(2428436474, 593698344), D(2756734187, 3733110249), D(3204031479, 2999351573), D(3329325298, 3815920427), D(3391569614, 3928383900), D(3515267271, 566280711), D(3940187606, 3454069534), D(4118630271, 4000239992), D(116418474, 1914138554), D(174292421, 2731055270), D(289380356, 3203993006), D(460393269, 320620315), D(685471733, 587496836), D(852142971, 1086792851), D(1017036298, 365543100), D(1126000580, 2618297676), D(1288033470, 3409855158), D(1501505948, 4234509866), D(1607167915, 987167468), D(1816402316, 1246189591)],
                    F = [];
                (function () {
                    for (var Y = 0; Y < 80; Y++) F[Y] = D()
                })();
                var _e = O.SHA512 = x.extend({
                    _doReset: function () {
                        this._hash = new L.init([new N.init(1779033703, 4089235720), new N.init(3144134277, 2227873595), new N.init(1013904242, 4271175723), new N.init(2773480762, 1595750129), new N.init(1359893119, 2917565137), new N.init(2600822924, 725511199), new N.init(528734635, 4215389547), new N.init(1541459225, 327033209)])
                    }, _doProcessBlock: function (Y, H) {
                        for (var me = this._hash.words, ce = me[0], ie = me[1], Be = me[2], ve = me[3], Re = me[4], Ce = me[5], Ne = me[6], we = me[7], Me = ce.high, ke = ce.low, Fe = ie.high, $e = ie.low, Ve = Be.high, Je = Be.low, Qe = ve.high, Ze = ve.low, qe = Re.high, ze = Re.low, De = Ce.high, Xe = Ce.low, He = Ne.high, Ge = Ne.low, Le = we.high, We = we.low, dt = Me, et = ke, nt = Fe, tt = $e, lt = Ve, Bt = Je, kt = Qe, At = Ze, zt = qe, oa = ze, sa = De, vt = Xe, ea = He, _a = Ge, ta = Le, na = We, Aa = 0; Aa < 80; Aa++) {
                            var Ea, Sa, Ga = F[Aa];
                            if (Aa < 16) Sa = Ga.high = Y[H + Aa * 2] | 0, Ea = Ga.low = Y[H + Aa * 2 + 1] | 0; else {
                                var Ta = F[Aa - 15], fa = Ta.high, ca = Ta.low,
                                    Ia = (fa >>> 1 | ca << 31) ^ (fa >>> 8 | ca << 24) ^ fa >>> 7,
                                    Ma = (ca >>> 1 | fa << 31) ^ (ca >>> 8 | fa << 24) ^ (ca >>> 7 | fa << 25),
                                    Fa = F[Aa - 2], va = Fa.high, ha = Fa.low,
                                    Ua = (va >>> 19 | ha << 13) ^ (va << 3 | ha >>> 29) ^ va >>> 6,
                                    xt = (ha >>> 19 | va << 13) ^ (ha << 3 | va >>> 29) ^ (ha >>> 6 | va << 26),
                                    K = F[Aa - 7], Pe = K.high, Oe = K.low, Ue = F[Aa - 16], Ke = Ue.high, mt = Ue.low;
                                Ea = Ma + Oe, Sa = Ia + Pe + (Ea >>> 0 < Ma >>> 0 ? 1 : 0), Ea = Ea + xt, Sa = Sa + Ua + (Ea >>> 0 < xt >>> 0 ? 1 : 0), Ea = Ea + mt, Sa = Sa + Ke + (Ea >>> 0 < mt >>> 0 ? 1 : 0), Ga.high = Sa, Ga.low = Ea
                            }
                            var Tt = zt & sa ^ ~zt & ea, jt = oa & vt ^ ~oa & _a, ia = dt & nt ^ dt & lt ^ nt & lt,
                                aa = et & tt ^ et & Bt ^ tt & Bt,
                                pa = (dt >>> 28 | et << 4) ^ (dt << 30 | et >>> 2) ^ (dt << 25 | et >>> 7),
                                ma = (et >>> 28 | dt << 4) ^ (et << 30 | dt >>> 2) ^ (et << 25 | dt >>> 7),
                                ba = (zt >>> 14 | oa << 18) ^ (zt >>> 18 | oa << 14) ^ (zt << 23 | oa >>> 9),
                                da = (oa >>> 14 | zt << 18) ^ (oa >>> 18 | zt << 14) ^ (oa << 23 | zt >>> 9),
                                Gt = z[Aa], ra = Gt.high, Ca = Gt.low, La = na + da,
                                xa = ta + ba + (La >>> 0 < na >>> 0 ? 1 : 0), La = La + jt,
                                xa = xa + Tt + (La >>> 0 < jt >>> 0 ? 1 : 0), La = La + Ca,
                                xa = xa + ra + (La >>> 0 < Ca >>> 0 ? 1 : 0), La = La + Ea,
                                xa = xa + Sa + (La >>> 0 < Ea >>> 0 ? 1 : 0), Da = ma + aa,
                                Ba = pa + ia + (Da >>> 0 < ma >>> 0 ? 1 : 0);
                            ta = ea, na = _a, ea = sa, _a = vt, sa = zt, vt = oa, oa = At + La | 0, zt = kt + xa + (oa >>> 0 < At >>> 0 ? 1 : 0) | 0, kt = lt, At = Bt, lt = nt, Bt = tt, nt = dt, tt = et, et = La + Da | 0, dt = xa + Ba + (et >>> 0 < La >>> 0 ? 1 : 0) | 0
                        }
                        ke = ce.low = ke + et, ce.high = Me + dt + (ke >>> 0 < et >>> 0 ? 1 : 0), $e = ie.low = $e + tt, ie.high = Fe + nt + ($e >>> 0 < tt >>> 0 ? 1 : 0), Je = Be.low = Je + Bt, Be.high = Ve + lt + (Je >>> 0 < Bt >>> 0 ? 1 : 0), Ze = ve.low = Ze + At, ve.high = Qe + kt + (Ze >>> 0 < At >>> 0 ? 1 : 0), ze = Re.low = ze + oa, Re.high = qe + zt + (ze >>> 0 < oa >>> 0 ? 1 : 0), Xe = Ce.low = Xe + vt, Ce.high = De + sa + (Xe >>> 0 < vt >>> 0 ? 1 : 0), Ge = Ne.low = Ge + _a, Ne.high = He + ea + (Ge >>> 0 < _a >>> 0 ? 1 : 0), We = we.low = We + na, we.high = Le + ta + (We >>> 0 < na >>> 0 ? 1 : 0)
                    }, _doFinalize: function () {
                        var Y = this._data, H = Y.words, me = this._nDataBytes * 8, ce = Y.sigBytes * 8;
                        H[ce >>> 5] |= 128 << 24 - ce % 32, H[(ce + 128 >>> 10 << 5) + 30] = Math.floor(me / 4294967296), H[(ce + 128 >>> 10 << 5) + 31] = me, Y.sigBytes = H.length * 4, this._process();
                        var ie = this._hash.toX32();
                        return ie
                    }, clone: function () {
                        var Y = x.clone.call(this);
                        return Y._hash = this._hash.clone(), Y
                    }, blockSize: 1024 / 32
                });
                E.SHA512 = x._createHelper(_e), E.HmacSHA512 = x._createHmacHelper(_e)
            }(), y.SHA512
        })
    }(sha512)), sha512Exports
}

var sha384Exports = {}, sha384 = {
    get exports() {
        return sha384Exports
    }, set exports(r) {
        sha384Exports = r
    }
}, hasRequiredSha384;

function requireSha384() {
    return hasRequiredSha384 || (hasRequiredSha384 = 1, function (r, R) {
        (function (y, E, C) {
            r.exports = E(requireCore(), requireX64Core(), requireSha512())
        })(commonjsGlobal, function (y) {
            return function () {
                var E = y, C = E.x64, x = C.Word, B = C.WordArray, N = E.algo, L = N.SHA512, O = N.SHA384 = L.extend({
                    _doReset: function () {
                        this._hash = new B.init([new x.init(3418070365, 3238371032), new x.init(1654270250, 914150663), new x.init(2438529370, 812702999), new x.init(355462360, 4144912697), new x.init(1731405415, 4290775857), new x.init(2394180231, 1750603025), new x.init(3675008525, 1694076839), new x.init(1203062813, 3204075428)])
                    }, _doFinalize: function () {
                        var D = L._doFinalize.call(this);
                        return D.sigBytes -= 16, D
                    }
                });
                E.SHA384 = L._createHelper(O), E.HmacSHA384 = L._createHmacHelper(O)
            }(), y.SHA384
        })
    }(sha384)), sha384Exports
}

var sha3Exports = {}, sha3 = {
    get exports() {
        return sha3Exports
    }, set exports(r) {
        sha3Exports = r
    }
}, hasRequiredSha3;

function requireSha3() {
    return hasRequiredSha3 || (hasRequiredSha3 = 1, function (r, R) {
        (function (y, E, C) {
            r.exports = E(requireCore(), requireX64Core())
        })(commonjsGlobal, function (y) {
            return function (E) {
                var C = y, x = C.lib, B = x.WordArray, N = x.Hasher, L = C.x64, O = L.Word, D = C.algo, z = [], F = [],
                    _e = [];
                (function () {
                    for (var me = 1, ce = 0, ie = 0; ie < 24; ie++) {
                        z[me + 5 * ce] = (ie + 1) * (ie + 2) / 2 % 64;
                        var Be = ce % 5, ve = (2 * me + 3 * ce) % 5;
                        me = Be, ce = ve
                    }
                    for (var me = 0; me < 5; me++) for (var ce = 0; ce < 5; ce++) F[me + 5 * ce] = ce + (2 * me + 3 * ce) % 5 * 5;
                    for (var Re = 1, Ce = 0; Ce < 24; Ce++) {
                        for (var Ne = 0, we = 0, Me = 0; Me < 7; Me++) {
                            if (Re & 1) {
                                var ke = (1 << Me) - 1;
                                ke < 32 ? we ^= 1 << ke : Ne ^= 1 << ke - 32
                            }
                            Re & 128 ? Re = Re << 1 ^ 113 : Re <<= 1
                        }
                        _e[Ce] = O.create(Ne, we)
                    }
                })();
                var Y = [];
                (function () {
                    for (var me = 0; me < 25; me++) Y[me] = O.create()
                })();
                var H = D.SHA3 = N.extend({
                    cfg: N.cfg.extend({outputLength: 512}), _doReset: function () {
                        for (var me = this._state = [], ce = 0; ce < 25; ce++) me[ce] = new O.init;
                        this.blockSize = (1600 - 2 * this.cfg.outputLength) / 32
                    }, _doProcessBlock: function (me, ce) {
                        for (var ie = this._state, Be = this.blockSize / 2, ve = 0; ve < Be; ve++) {
                            var Re = me[ce + 2 * ve], Ce = me[ce + 2 * ve + 1];
                            Re = (Re << 8 | Re >>> 24) & 16711935 | (Re << 24 | Re >>> 8) & 4278255360, Ce = (Ce << 8 | Ce >>> 24) & 16711935 | (Ce << 24 | Ce >>> 8) & 4278255360;
                            var Ne = ie[ve];
                            Ne.high ^= Ce, Ne.low ^= Re
                        }
                        for (var we = 0; we < 24; we++) {
                            for (var Me = 0; Me < 5; Me++) {
                                for (var ke = 0, Fe = 0, $e = 0; $e < 5; $e++) {
                                    var Ne = ie[Me + 5 * $e];
                                    ke ^= Ne.high, Fe ^= Ne.low
                                }
                                var Ve = Y[Me];
                                Ve.high = ke, Ve.low = Fe
                            }
                            for (var Me = 0; Me < 5; Me++) for (var Je = Y[(Me + 4) % 5], Qe = Y[(Me + 1) % 5], Ze = Qe.high, qe = Qe.low, ke = Je.high ^ (Ze << 1 | qe >>> 31), Fe = Je.low ^ (qe << 1 | Ze >>> 31), $e = 0; $e < 5; $e++) {
                                var Ne = ie[Me + 5 * $e];
                                Ne.high ^= ke, Ne.low ^= Fe
                            }
                            for (var ze = 1; ze < 25; ze++) {
                                var ke, Fe, Ne = ie[ze], De = Ne.high, Xe = Ne.low, He = z[ze];
                                He < 32 ? (ke = De << He | Xe >>> 32 - He, Fe = Xe << He | De >>> 32 - He) : (ke = Xe << He - 32 | De >>> 64 - He, Fe = De << He - 32 | Xe >>> 64 - He);
                                var Ge = Y[F[ze]];
                                Ge.high = ke, Ge.low = Fe
                            }
                            var Le = Y[0], We = ie[0];
                            Le.high = We.high, Le.low = We.low;
                            for (var Me = 0; Me < 5; Me++) for (var $e = 0; $e < 5; $e++) {
                                var ze = Me + 5 * $e, Ne = ie[ze], dt = Y[ze], et = Y[(Me + 1) % 5 + 5 * $e],
                                    nt = Y[(Me + 2) % 5 + 5 * $e];
                                Ne.high = dt.high ^ ~et.high & nt.high, Ne.low = dt.low ^ ~et.low & nt.low
                            }
                            var Ne = ie[0], tt = _e[we];
                            Ne.high ^= tt.high, Ne.low ^= tt.low
                        }
                    }, _doFinalize: function () {
                        var me = this._data, ce = me.words;
                        this._nDataBytes * 8;
                        var ie = me.sigBytes * 8, Be = this.blockSize * 32;
                        ce[ie >>> 5] |= 1 << 24 - ie % 32, ce[(E.ceil((ie + 1) / Be) * Be >>> 5) - 1] |= 128, me.sigBytes = ce.length * 4, this._process();
                        for (var ve = this._state, Re = this.cfg.outputLength / 8, Ce = Re / 8, Ne = [], we = 0; we < Ce; we++) {
                            var Me = ve[we], ke = Me.high, Fe = Me.low;
                            ke = (ke << 8 | ke >>> 24) & 16711935 | (ke << 24 | ke >>> 8) & 4278255360, Fe = (Fe << 8 | Fe >>> 24) & 16711935 | (Fe << 24 | Fe >>> 8) & 4278255360, Ne.push(Fe), Ne.push(ke)
                        }
                        return new B.init(Ne, Re)
                    }, clone: function () {
                        for (var me = N.clone.call(this), ce = me._state = this._state.slice(0), ie = 0; ie < 25; ie++) ce[ie] = ce[ie].clone();
                        return me
                    }
                });
                C.SHA3 = N._createHelper(H), C.HmacSHA3 = N._createHmacHelper(H)
            }(Math), y.SHA3
        })
    }(sha3)), sha3Exports
}

var ripemd160Exports = {}, ripemd160 = {
    get exports() {
        return ripemd160Exports
    }, set exports(r) {
        ripemd160Exports = r
    }
}, hasRequiredRipemd160;

function requireRipemd160() {
    return hasRequiredRipemd160 || (hasRequiredRipemd160 = 1, function (r, R) {
        (function (y, E) {
            r.exports = E(requireCore())
        })(commonjsGlobal, function (y) {/** @preserve
         (c) 2012 by Cédric Mesnil. All rights reserved.

         Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:

         - Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
         - Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.

         THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
         */
            return function (E) {
                var C = y, x = C.lib, B = x.WordArray, N = x.Hasher, L = C.algo,
                    O = B.create([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8, 3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12, 1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2, 4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13]),
                    D = B.create([5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12, 6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2, 15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13, 8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14, 12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11]),
                    z = B.create([11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8, 7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12, 11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5, 11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12, 9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6]),
                    F = B.create([8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6, 9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11, 9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5, 15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8, 8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11]),
                    _e = B.create([0, 1518500249, 1859775393, 2400959708, 2840853838]),
                    Y = B.create([1352829926, 1548603684, 1836072691, 2053994217, 0]), H = L.RIPEMD160 = N.extend({
                        _doReset: function () {
                            this._hash = B.create([1732584193, 4023233417, 2562383102, 271733878, 3285377520])
                        }, _doProcessBlock: function (Ce, Ne) {
                            for (var we = 0; we < 16; we++) {
                                var Me = Ne + we, ke = Ce[Me];
                                Ce[Me] = (ke << 8 | ke >>> 24) & 16711935 | (ke << 24 | ke >>> 8) & 4278255360
                            }
                            var Fe = this._hash.words, $e = _e.words, Ve = Y.words, Je = O.words, Qe = D.words,
                                Ze = z.words, qe = F.words, ze, De, Xe, He, Ge, Le, We, dt, et, nt;
                            Le = ze = Fe[0], We = De = Fe[1], dt = Xe = Fe[2], et = He = Fe[3], nt = Ge = Fe[4];
                            for (var tt, we = 0; we < 80; we += 1) tt = ze + Ce[Ne + Je[we]] | 0, we < 16 ? tt += me(De, Xe, He) + $e[0] : we < 32 ? tt += ce(De, Xe, He) + $e[1] : we < 48 ? tt += ie(De, Xe, He) + $e[2] : we < 64 ? tt += Be(De, Xe, He) + $e[3] : tt += ve(De, Xe, He) + $e[4], tt = tt | 0, tt = Re(tt, Ze[we]), tt = tt + Ge | 0, ze = Ge, Ge = He, He = Re(Xe, 10), Xe = De, De = tt, tt = Le + Ce[Ne + Qe[we]] | 0, we < 16 ? tt += ve(We, dt, et) + Ve[0] : we < 32 ? tt += Be(We, dt, et) + Ve[1] : we < 48 ? tt += ie(We, dt, et) + Ve[2] : we < 64 ? tt += ce(We, dt, et) + Ve[3] : tt += me(We, dt, et) + Ve[4], tt = tt | 0, tt = Re(tt, qe[we]), tt = tt + nt | 0, Le = nt, nt = et, et = Re(dt, 10), dt = We, We = tt;
                            tt = Fe[1] + Xe + et | 0, Fe[1] = Fe[2] + He + nt | 0, Fe[2] = Fe[3] + Ge + Le | 0, Fe[3] = Fe[4] + ze + We | 0, Fe[4] = Fe[0] + De + dt | 0, Fe[0] = tt
                        }, _doFinalize: function () {
                            var Ce = this._data, Ne = Ce.words, we = this._nDataBytes * 8, Me = Ce.sigBytes * 8;
                            Ne[Me >>> 5] |= 128 << 24 - Me % 32, Ne[(Me + 64 >>> 9 << 4) + 14] = (we << 8 | we >>> 24) & 16711935 | (we << 24 | we >>> 8) & 4278255360, Ce.sigBytes = (Ne.length + 1) * 4, this._process();
                            for (var ke = this._hash, Fe = ke.words, $e = 0; $e < 5; $e++) {
                                var Ve = Fe[$e];
                                Fe[$e] = (Ve << 8 | Ve >>> 24) & 16711935 | (Ve << 24 | Ve >>> 8) & 4278255360
                            }
                            return ke
                        }, clone: function () {
                            var Ce = N.clone.call(this);
                            return Ce._hash = this._hash.clone(), Ce
                        }
                    });

                function me(Ce, Ne, we) {
                    return Ce ^ Ne ^ we
                }

                function ce(Ce, Ne, we) {
                    return Ce & Ne | ~Ce & we
                }

                function ie(Ce, Ne, we) {
                    return (Ce | ~Ne) ^ we
                }

                function Be(Ce, Ne, we) {
                    return Ce & we | Ne & ~we
                }

                function ve(Ce, Ne, we) {
                    return Ce ^ (Ne | ~we)
                }

                function Re(Ce, Ne) {
                    return Ce << Ne | Ce >>> 32 - Ne
                }

                C.RIPEMD160 = N._createHelper(H), C.HmacRIPEMD160 = N._createHmacHelper(H)
            }(), y.RIPEMD160
        })
    }(ripemd160)), ripemd160Exports
}

var hmacExports = {}, hmac = {
    get exports() {
        return hmacExports
    }, set exports(r) {
        hmacExports = r
    }
}, hasRequiredHmac;

function requireHmac() {
    return hasRequiredHmac || (hasRequiredHmac = 1, function (r, R) {
        (function (y, E) {
            r.exports = E(requireCore())
        })(commonjsGlobal, function (y) {
            (function () {
                var E = y, C = E.lib, x = C.Base, B = E.enc, N = B.Utf8, L = E.algo;
                L.HMAC = x.extend({
                    init: function (O, D) {
                        O = this._hasher = new O.init, typeof D == "string" && (D = N.parse(D));
                        var z = O.blockSize, F = z * 4;
                        D.sigBytes > F && (D = O.finalize(D)), D.clamp();
                        for (var _e = this._oKey = D.clone(), Y = this._iKey = D.clone(), H = _e.words, me = Y.words, ce = 0; ce < z; ce++) H[ce] ^= 1549556828, me[ce] ^= 909522486;
                        _e.sigBytes = Y.sigBytes = F, this.reset()
                    }, reset: function () {
                        var O = this._hasher;
                        O.reset(), O.update(this._iKey)
                    }, update: function (O) {
                        return this._hasher.update(O), this
                    }, finalize: function (O) {
                        var D = this._hasher, z = D.finalize(O);
                        D.reset();
                        var F = D.finalize(this._oKey.clone().concat(z));
                        return F
                    }
                })
            })()
        })
    }(hmac)), hmacExports
}

var pbkdf2Exports = {}, pbkdf2 = {
    get exports() {
        return pbkdf2Exports
    }, set exports(r) {
        pbkdf2Exports = r
    }
}, hasRequiredPbkdf2;

function requirePbkdf2() {
    return hasRequiredPbkdf2 || (hasRequiredPbkdf2 = 1, function (r, R) {
        (function (y, E, C) {
            r.exports = E(requireCore(), requireSha1(), requireHmac())
        })(commonjsGlobal, function (y) {
            return function () {
                var E = y, C = E.lib, x = C.Base, B = C.WordArray, N = E.algo, L = N.SHA1, O = N.HMAC,
                    D = N.PBKDF2 = x.extend({
                        cfg: x.extend({keySize: 128 / 32, hasher: L, iterations: 1}),
                        init: function (z) {
                            this.cfg = this.cfg.extend(z)
                        },
                        compute: function (z, F) {
                            for (var _e = this.cfg, Y = O.create(_e.hasher, z), H = B.create(), me = B.create([1]), ce = H.words, ie = me.words, Be = _e.keySize, ve = _e.iterations; ce.length < Be;) {
                                var Re = Y.update(F).finalize(me);
                                Y.reset();
                                for (var Ce = Re.words, Ne = Ce.length, we = Re, Me = 1; Me < ve; Me++) {
                                    we = Y.finalize(we), Y.reset();
                                    for (var ke = we.words, Fe = 0; Fe < Ne; Fe++) Ce[Fe] ^= ke[Fe]
                                }
                                H.concat(Re), ie[0]++
                            }
                            return H.sigBytes = Be * 4, H
                        }
                    });
                E.PBKDF2 = function (z, F, _e) {
                    return D.create(_e).compute(z, F)
                }
            }(), y.PBKDF2
        })
    }(pbkdf2)), pbkdf2Exports
}

var evpkdfExports = {}, evpkdf = {
    get exports() {
        return evpkdfExports
    }, set exports(r) {
        evpkdfExports = r
    }
}, hasRequiredEvpkdf;

function requireEvpkdf() {
    return hasRequiredEvpkdf || (hasRequiredEvpkdf = 1, function (r, R) {
        (function (y, E, C) {
            r.exports = E(requireCore(), requireSha1(), requireHmac())
        })(commonjsGlobal, function (y) {
            return function () {
                var E = y, C = E.lib, x = C.Base, B = C.WordArray, N = E.algo, L = N.MD5, O = N.EvpKDF = x.extend({
                    cfg: x.extend({keySize: 128 / 32, hasher: L, iterations: 1}),
                    init: function (D) {
                        this.cfg = this.cfg.extend(D)
                    },
                    compute: function (D, z) {
                        for (var F, _e = this.cfg, Y = _e.hasher.create(), H = B.create(), me = H.words, ce = _e.keySize, ie = _e.iterations; me.length < ce;) {
                            F && Y.update(F), F = Y.update(D).finalize(z), Y.reset();
                            for (var Be = 1; Be < ie; Be++) F = Y.finalize(F), Y.reset();
                            H.concat(F)
                        }
                        return H.sigBytes = ce * 4, H
                    }
                });
                E.EvpKDF = function (D, z, F) {
                    return O.create(F).compute(D, z)
                }
            }(), y.EvpKDF
        })
    }(evpkdf)), evpkdfExports
}

var cipherCoreExports = {}, cipherCore = {
    get exports() {
        return cipherCoreExports
    }, set exports(r) {
        cipherCoreExports = r
    }
}, hasRequiredCipherCore;

function requireCipherCore() {
    return hasRequiredCipherCore || (hasRequiredCipherCore = 1, function (r, R) {
        (function (y, E, C) {
            r.exports = E(requireCore(), requireEvpkdf())
        })(commonjsGlobal, function (y) {
            y.lib.Cipher || function (E) {
                var C = y, x = C.lib, B = x.Base, N = x.WordArray, L = x.BufferedBlockAlgorithm, O = C.enc;
                O.Utf8;
                var D = O.Base64, z = C.algo, F = z.EvpKDF, _e = x.Cipher = L.extend({
                    cfg: B.extend(),
                    createEncryptor: function (ke, Fe) {
                        return this.create(this._ENC_XFORM_MODE, ke, Fe)
                    },
                    createDecryptor: function (ke, Fe) {
                        return this.create(this._DEC_XFORM_MODE, ke, Fe)
                    },
                    init: function (ke, Fe, $e) {
                        this.cfg = this.cfg.extend($e), this._xformMode = ke, this._key = Fe, this.reset()
                    },
                    reset: function () {
                        L.reset.call(this), this._doReset()
                    },
                    process: function (ke) {
                        return this._append(ke), this._process()
                    },
                    finalize: function (ke) {
                        ke && this._append(ke);
                        var Fe = this._doFinalize();
                        return Fe
                    },
                    keySize: 128 / 32,
                    ivSize: 128 / 32,
                    _ENC_XFORM_MODE: 1,
                    _DEC_XFORM_MODE: 2,
                    _createHelper: function () {
                        function ke(Fe) {
                            return typeof Fe == "string" ? Me : Ce
                        }

                        return function (Fe) {
                            return {
                                encrypt: function ($e, Ve, Je) {
                                    return ke(Ve).encrypt(Fe, $e, Ve, Je)
                                }, decrypt: function ($e, Ve, Je) {
                                    return ke(Ve).decrypt(Fe, $e, Ve, Je)
                                }
                            }
                        }
                    }()
                });
                x.StreamCipher = _e.extend({
                    _doFinalize: function () {
                        var ke = this._process(!0);
                        return ke
                    }, blockSize: 1
                });
                var Y = C.mode = {}, H = x.BlockCipherMode = B.extend({
                    createEncryptor: function (ke, Fe) {
                        return this.Encryptor.create(ke, Fe)
                    }, createDecryptor: function (ke, Fe) {
                        return this.Decryptor.create(ke, Fe)
                    }, init: function (ke, Fe) {
                        this._cipher = ke, this._iv = Fe
                    }
                }), me = Y.CBC = function () {
                    var ke = H.extend();
                    ke.Encryptor = ke.extend({
                        processBlock: function ($e, Ve) {
                            var Je = this._cipher, Qe = Je.blockSize;
                            Fe.call(this, $e, Ve, Qe), Je.encryptBlock($e, Ve), this._prevBlock = $e.slice(Ve, Ve + Qe)
                        }
                    }), ke.Decryptor = ke.extend({
                        processBlock: function ($e, Ve) {
                            var Je = this._cipher, Qe = Je.blockSize, Ze = $e.slice(Ve, Ve + Qe);
                            Je.decryptBlock($e, Ve), Fe.call(this, $e, Ve, Qe), this._prevBlock = Ze
                        }
                    });

                    function Fe($e, Ve, Je) {
                        var Qe, Ze = this._iv;
                        Ze ? (Qe = Ze, this._iv = E) : Qe = this._prevBlock;
                        for (var qe = 0; qe < Je; qe++) $e[Ve + qe] ^= Qe[qe]
                    }

                    return ke
                }(), ce = C.pad = {}, ie = ce.Pkcs7 = {
                    pad: function (ke, Fe) {
                        for (var $e = Fe * 4, Ve = $e - ke.sigBytes % $e, Je = Ve << 24 | Ve << 16 | Ve << 8 | Ve, Qe = [], Ze = 0; Ze < Ve; Ze += 4) Qe.push(Je);
                        var qe = N.create(Qe, Ve);
                        ke.concat(qe)
                    }, unpad: function (ke) {
                        var Fe = ke.words[ke.sigBytes - 1 >>> 2] & 255;
                        ke.sigBytes -= Fe
                    }
                };
                x.BlockCipher = _e.extend({
                    cfg: _e.cfg.extend({mode: me, padding: ie}), reset: function () {
                        var ke;
                        _e.reset.call(this);
                        var Fe = this.cfg, $e = Fe.iv, Ve = Fe.mode;
                        this._xformMode == this._ENC_XFORM_MODE ? ke = Ve.createEncryptor : (ke = Ve.createDecryptor, this._minBufferSize = 1), this._mode && this._mode.__creator == ke ? this._mode.init(this, $e && $e.words) : (this._mode = ke.call(Ve, this, $e && $e.words), this._mode.__creator = ke)
                    }, _doProcessBlock: function (ke, Fe) {
                        this._mode.processBlock(ke, Fe)
                    }, _doFinalize: function () {
                        var ke, Fe = this.cfg.padding;
                        return this._xformMode == this._ENC_XFORM_MODE ? (Fe.pad(this._data, this.blockSize), ke = this._process(!0)) : (ke = this._process(!0), Fe.unpad(ke)), ke
                    }, blockSize: 128 / 32
                });
                var Be = x.CipherParams = B.extend({
                    init: function (ke) {
                        this.mixIn(ke)
                    }, toString: function (ke) {
                        return (ke || this.formatter).stringify(this)
                    }
                }), ve = C.format = {}, Re = ve.OpenSSL = {
                    stringify: function (ke) {
                        var Fe, $e = ke.ciphertext, Ve = ke.salt;
                        return Ve ? Fe = N.create([1398893684, 1701076831]).concat(Ve).concat($e) : Fe = $e, Fe.toString(D)
                    }, parse: function (ke) {
                        var Fe, $e = D.parse(ke), Ve = $e.words;
                        return Ve[0] == 1398893684 && Ve[1] == 1701076831 && (Fe = N.create(Ve.slice(2, 4)), Ve.splice(0, 4), $e.sigBytes -= 16), Be.create({
                            ciphertext: $e,
                            salt: Fe
                        })
                    }
                }, Ce = x.SerializableCipher = B.extend({
                    cfg: B.extend({format: Re}),
                    encrypt: function (ke, Fe, $e, Ve) {
                        Ve = this.cfg.extend(Ve);
                        var Je = ke.createEncryptor($e, Ve), Qe = Je.finalize(Fe), Ze = Je.cfg;
                        return Be.create({
                            ciphertext: Qe,
                            key: $e,
                            iv: Ze.iv,
                            algorithm: ke,
                            mode: Ze.mode,
                            padding: Ze.padding,
                            blockSize: ke.blockSize,
                            formatter: Ve.format
                        })
                    },
                    decrypt: function (ke, Fe, $e, Ve) {
                        Ve = this.cfg.extend(Ve), Fe = this._parse(Fe, Ve.format);
                        var Je = ke.createDecryptor($e, Ve).finalize(Fe.ciphertext);
                        return Je
                    },
                    _parse: function (ke, Fe) {
                        return typeof ke == "string" ? Fe.parse(ke, this) : ke
                    }
                }), Ne = C.kdf = {}, we = Ne.OpenSSL = {
                    execute: function (ke, Fe, $e, Ve) {
                        Ve || (Ve = N.random(64 / 8));
                        var Je = F.create({keySize: Fe + $e}).compute(ke, Ve),
                            Qe = N.create(Je.words.slice(Fe), $e * 4);
                        return Je.sigBytes = Fe * 4, Be.create({key: Je, iv: Qe, salt: Ve})
                    }
                }, Me = x.PasswordBasedCipher = Ce.extend({
                    cfg: Ce.cfg.extend({kdf: we}),
                    encrypt: function (ke, Fe, $e, Ve) {
                        Ve = this.cfg.extend(Ve);
                        var Je = Ve.kdf.execute($e, ke.keySize, ke.ivSize);
                        Ve.iv = Je.iv;
                        var Qe = Ce.encrypt.call(this, ke, Fe, Je.key, Ve);
                        return Qe.mixIn(Je), Qe
                    },
                    decrypt: function (ke, Fe, $e, Ve) {
                        Ve = this.cfg.extend(Ve), Fe = this._parse(Fe, Ve.format);
                        var Je = Ve.kdf.execute($e, ke.keySize, ke.ivSize, Fe.salt);
                        Ve.iv = Je.iv;
                        var Qe = Ce.decrypt.call(this, ke, Fe, Je.key, Ve);
                        return Qe
                    }
                })
            }()
        })
    }(cipherCore)), cipherCoreExports
}

var modeCfbExports = {}, modeCfb = {
    get exports() {
        return modeCfbExports
    }, set exports(r) {
        modeCfbExports = r
    }
}, hasRequiredModeCfb;

function requireModeCfb() {
    return hasRequiredModeCfb || (hasRequiredModeCfb = 1, function (r, R) {
        (function (y, E, C) {
            r.exports = E(requireCore(), requireCipherCore())
        })(commonjsGlobal, function (y) {
            return y.mode.CFB = function () {
                var E = y.lib.BlockCipherMode.extend();
                E.Encryptor = E.extend({
                    processBlock: function (x, B) {
                        var N = this._cipher, L = N.blockSize;
                        C.call(this, x, B, L, N), this._prevBlock = x.slice(B, B + L)
                    }
                }), E.Decryptor = E.extend({
                    processBlock: function (x, B) {
                        var N = this._cipher, L = N.blockSize, O = x.slice(B, B + L);
                        C.call(this, x, B, L, N), this._prevBlock = O
                    }
                });

                function C(x, B, N, L) {
                    var O, D = this._iv;
                    D ? (O = D.slice(0), this._iv = void 0) : O = this._prevBlock, L.encryptBlock(O, 0);
                    for (var z = 0; z < N; z++) x[B + z] ^= O[z]
                }

                return E
            }(), y.mode.CFB
        })
    }(modeCfb)), modeCfbExports
}

var modeCtrExports = {}, modeCtr = {
    get exports() {
        return modeCtrExports
    }, set exports(r) {
        modeCtrExports = r
    }
}, hasRequiredModeCtr;

function requireModeCtr() {
    return hasRequiredModeCtr || (hasRequiredModeCtr = 1, function (r, R) {
        (function (y, E, C) {
            r.exports = E(requireCore(), requireCipherCore())
        })(commonjsGlobal, function (y) {
            return y.mode.CTR = function () {
                var E = y.lib.BlockCipherMode.extend(), C = E.Encryptor = E.extend({
                    processBlock: function (x, B) {
                        var N = this._cipher, L = N.blockSize, O = this._iv, D = this._counter;
                        O && (D = this._counter = O.slice(0), this._iv = void 0);
                        var z = D.slice(0);
                        N.encryptBlock(z, 0), D[L - 1] = D[L - 1] + 1 | 0;
                        for (var F = 0; F < L; F++) x[B + F] ^= z[F]
                    }
                });
                return E.Decryptor = C, E
            }(), y.mode.CTR
        })
    }(modeCtr)), modeCtrExports
}

var modeCtrGladmanExports = {}, modeCtrGladman = {
    get exports() {
        return modeCtrGladmanExports
    }, set exports(r) {
        modeCtrGladmanExports = r
    }
}, hasRequiredModeCtrGladman;

function requireModeCtrGladman() {
    return hasRequiredModeCtrGladman || (hasRequiredModeCtrGladman = 1, function (r, R) {
        (function (y, E, C) {
            r.exports = E(requireCore(), requireCipherCore())
        })(commonjsGlobal, function (y) {/** @preserve
         * Counter block mode compatible with  Dr Brian Gladman fileenc.c
         * derived from CryptoJS.mode.CTR
         * Jan Hruby jhruby.web@gmail.com
         */
            return y.mode.CTRGladman = function () {
                var E = y.lib.BlockCipherMode.extend();

                function C(N) {
                    if ((N >> 24 & 255) === 255) {
                        var L = N >> 16 & 255, O = N >> 8 & 255, D = N & 255;
                        L === 255 ? (L = 0, O === 255 ? (O = 0, D === 255 ? D = 0 : ++D) : ++O) : ++L, N = 0, N += L << 16, N += O << 8, N += D
                    } else N += 1 << 24;
                    return N
                }

                function x(N) {
                    return (N[0] = C(N[0])) === 0 && (N[1] = C(N[1])), N
                }

                var B = E.Encryptor = E.extend({
                    processBlock: function (N, L) {
                        var O = this._cipher, D = O.blockSize, z = this._iv, F = this._counter;
                        z && (F = this._counter = z.slice(0), this._iv = void 0), x(F);
                        var _e = F.slice(0);
                        O.encryptBlock(_e, 0);
                        for (var Y = 0; Y < D; Y++) N[L + Y] ^= _e[Y]
                    }
                });
                return E.Decryptor = B, E
            }(), y.mode.CTRGladman
        })
    }(modeCtrGladman)), modeCtrGladmanExports
}

var modeOfbExports = {}, modeOfb = {
    get exports() {
        return modeOfbExports
    }, set exports(r) {
        modeOfbExports = r
    }
}, hasRequiredModeOfb;

function requireModeOfb() {
    return hasRequiredModeOfb || (hasRequiredModeOfb = 1, function (r, R) {
        (function (y, E, C) {
            r.exports = E(requireCore(), requireCipherCore())
        })(commonjsGlobal, function (y) {
            return y.mode.OFB = function () {
                var E = y.lib.BlockCipherMode.extend(), C = E.Encryptor = E.extend({
                    processBlock: function (x, B) {
                        var N = this._cipher, L = N.blockSize, O = this._iv, D = this._keystream;
                        O && (D = this._keystream = O.slice(0), this._iv = void 0), N.encryptBlock(D, 0);
                        for (var z = 0; z < L; z++) x[B + z] ^= D[z]
                    }
                });
                return E.Decryptor = C, E
            }(), y.mode.OFB
        })
    }(modeOfb)), modeOfbExports
}

var modeEcbExports = {}, modeEcb = {
    get exports() {
        return modeEcbExports
    }, set exports(r) {
        modeEcbExports = r
    }
}, hasRequiredModeEcb;

function requireModeEcb() {
    return hasRequiredModeEcb || (hasRequiredModeEcb = 1, function (r, R) {
        (function (y, E, C) {
            r.exports = E(requireCore(), requireCipherCore())
        })(commonjsGlobal, function (y) {
            return y.mode.ECB = function () {
                var E = y.lib.BlockCipherMode.extend();
                return E.Encryptor = E.extend({
                    processBlock: function (C, x) {
                        this._cipher.encryptBlock(C, x)
                    }
                }), E.Decryptor = E.extend({
                    processBlock: function (C, x) {
                        this._cipher.decryptBlock(C, x)
                    }
                }), E
            }(), y.mode.ECB
        })
    }(modeEcb)), modeEcbExports
}

var padAnsix923Exports = {}, padAnsix923 = {
    get exports() {
        return padAnsix923Exports
    }, set exports(r) {
        padAnsix923Exports = r
    }
}, hasRequiredPadAnsix923;

function requirePadAnsix923() {
    return hasRequiredPadAnsix923 || (hasRequiredPadAnsix923 = 1, function (r, R) {
        (function (y, E, C) {
            r.exports = E(requireCore(), requireCipherCore())
        })(commonjsGlobal, function (y) {
            return y.pad.AnsiX923 = {
                pad: function (E, C) {
                    var x = E.sigBytes, B = C * 4, N = B - x % B, L = x + N - 1;
                    E.clamp(), E.words[L >>> 2] |= N << 24 - L % 4 * 8, E.sigBytes += N
                }, unpad: function (E) {
                    var C = E.words[E.sigBytes - 1 >>> 2] & 255;
                    E.sigBytes -= C
                }
            }, y.pad.Ansix923
        })
    }(padAnsix923)), padAnsix923Exports
}

var padIso10126Exports = {}, padIso10126 = {
    get exports() {
        return padIso10126Exports
    }, set exports(r) {
        padIso10126Exports = r
    }
}, hasRequiredPadIso10126;

function requirePadIso10126() {
    return hasRequiredPadIso10126 || (hasRequiredPadIso10126 = 1, function (r, R) {
        (function (y, E, C) {
            r.exports = E(requireCore(), requireCipherCore())
        })(commonjsGlobal, function (y) {
            return y.pad.Iso10126 = {
                pad: function (E, C) {
                    var x = C * 4, B = x - E.sigBytes % x;
                    E.concat(y.lib.WordArray.random(B - 1)).concat(y.lib.WordArray.create([B << 24], 1))
                }, unpad: function (E) {
                    var C = E.words[E.sigBytes - 1 >>> 2] & 255;
                    E.sigBytes -= C
                }
            }, y.pad.Iso10126
        })
    }(padIso10126)), padIso10126Exports
}

var padIso97971Exports = {}, padIso97971 = {
    get exports() {
        return padIso97971Exports
    }, set exports(r) {
        padIso97971Exports = r
    }
}, hasRequiredPadIso97971;

function requirePadIso97971() {
    return hasRequiredPadIso97971 || (hasRequiredPadIso97971 = 1, function (r, R) {
        (function (y, E, C) {
            r.exports = E(requireCore(), requireCipherCore())
        })(commonjsGlobal, function (y) {
            return y.pad.Iso97971 = {
                pad: function (E, C) {
                    E.concat(y.lib.WordArray.create([2147483648], 1)), y.pad.ZeroPadding.pad(E, C)
                }, unpad: function (E) {
                    y.pad.ZeroPadding.unpad(E), E.sigBytes--
                }
            }, y.pad.Iso97971
        })
    }(padIso97971)), padIso97971Exports
}

var padZeropaddingExports = {}, padZeropadding = {
    get exports() {
        return padZeropaddingExports
    }, set exports(r) {
        padZeropaddingExports = r
    }
}, hasRequiredPadZeropadding;

function requirePadZeropadding() {
    return hasRequiredPadZeropadding || (hasRequiredPadZeropadding = 1, function (r, R) {
        (function (y, E, C) {
            r.exports = E(requireCore(), requireCipherCore())
        })(commonjsGlobal, function (y) {
            return y.pad.ZeroPadding = {
                pad: function (E, C) {
                    var x = C * 4;
                    E.clamp(), E.sigBytes += x - (E.sigBytes % x || x)
                }, unpad: function (E) {
                    for (var C = E.words, x = E.sigBytes - 1, x = E.sigBytes - 1; x >= 0; x--) if (C[x >>> 2] >>> 24 - x % 4 * 8 & 255) {
                        E.sigBytes = x + 1;
                        break
                    }
                }
            }, y.pad.ZeroPadding
        })
    }(padZeropadding)), padZeropaddingExports
}

var padNopaddingExports = {}, padNopadding = {
    get exports() {
        return padNopaddingExports
    }, set exports(r) {
        padNopaddingExports = r
    }
}, hasRequiredPadNopadding;

function requirePadNopadding() {
    return hasRequiredPadNopadding || (hasRequiredPadNopadding = 1, function (r, R) {
        (function (y, E, C) {
            r.exports = E(requireCore(), requireCipherCore())
        })(commonjsGlobal, function (y) {
            return y.pad.NoPadding = {
                pad: function () {
                }, unpad: function () {
                }
            }, y.pad.NoPadding
        })
    }(padNopadding)), padNopaddingExports
}

var formatHexExports = {}, formatHex = {
    get exports() {
        return formatHexExports
    }, set exports(r) {
        formatHexExports = r
    }
}, hasRequiredFormatHex;

function requireFormatHex() {
    return hasRequiredFormatHex || (hasRequiredFormatHex = 1, function (r, R) {
        (function (y, E, C) {
            r.exports = E(requireCore(), requireCipherCore())
        })(commonjsGlobal, function (y) {
            return function (E) {
                var C = y, x = C.lib, B = x.CipherParams, N = C.enc, L = N.Hex, O = C.format;
                O.Hex = {
                    stringify: function (D) {
                        return D.ciphertext.toString(L)
                    }, parse: function (D) {
                        var z = L.parse(D);
                        return B.create({ciphertext: z})
                    }
                }
            }(), y.format.Hex
        })
    }(formatHex)), formatHexExports
}

var aesExports = {}, aes = {
    get exports() {
        return aesExports
    }, set exports(r) {
        aesExports = r
    }
}, hasRequiredAes;

function requireAes() {
    return hasRequiredAes || (hasRequiredAes = 1, function (r, R) {
        (function (y, E, C) {
            r.exports = E(requireCore(), requireEncBase64(), requireMd5(), requireEvpkdf(), requireCipherCore())
        })(commonjsGlobal, function (y) {
            return function () {
                var E = y, C = E.lib, x = C.BlockCipher, B = E.algo, N = [], L = [], O = [], D = [], z = [], F = [],
                    _e = [], Y = [], H = [], me = [];
                (function () {
                    for (var Be = [], ve = 0; ve < 256; ve++) ve < 128 ? Be[ve] = ve << 1 : Be[ve] = ve << 1 ^ 283;
                    for (var Re = 0, Ce = 0, ve = 0; ve < 256; ve++) {
                        var Ne = Ce ^ Ce << 1 ^ Ce << 2 ^ Ce << 3 ^ Ce << 4;
                        Ne = Ne >>> 8 ^ Ne & 255 ^ 99, N[Re] = Ne, L[Ne] = Re;
                        var we = Be[Re], Me = Be[we], ke = Be[Me], Fe = Be[Ne] * 257 ^ Ne * 16843008;
                        O[Re] = Fe << 24 | Fe >>> 8, D[Re] = Fe << 16 | Fe >>> 16, z[Re] = Fe << 8 | Fe >>> 24, F[Re] = Fe;
                        var Fe = ke * 16843009 ^ Me * 65537 ^ we * 257 ^ Re * 16843008;
                        _e[Ne] = Fe << 24 | Fe >>> 8, Y[Ne] = Fe << 16 | Fe >>> 16, H[Ne] = Fe << 8 | Fe >>> 24, me[Ne] = Fe, Re ? (Re = we ^ Be[Be[Be[ke ^ we]]], Ce ^= Be[Be[Ce]]) : Re = Ce = 1
                    }
                })();
                var ce = [0, 1, 2, 4, 8, 16, 32, 64, 128, 27, 54], ie = B.AES = x.extend({
                    _doReset: function () {
                        var Be;
                        if (!(this._nRounds && this._keyPriorReset === this._key)) {
                            for (var ve = this._keyPriorReset = this._key, Re = ve.words, Ce = ve.sigBytes / 4, Ne = this._nRounds = Ce + 6, we = (Ne + 1) * 4, Me = this._keySchedule = [], ke = 0; ke < we; ke++) ke < Ce ? Me[ke] = Re[ke] : (Be = Me[ke - 1], ke % Ce ? Ce > 6 && ke % Ce == 4 && (Be = N[Be >>> 24] << 24 | N[Be >>> 16 & 255] << 16 | N[Be >>> 8 & 255] << 8 | N[Be & 255]) : (Be = Be << 8 | Be >>> 24, Be = N[Be >>> 24] << 24 | N[Be >>> 16 & 255] << 16 | N[Be >>> 8 & 255] << 8 | N[Be & 255], Be ^= ce[ke / Ce | 0] << 24), Me[ke] = Me[ke - Ce] ^ Be);
                            for (var Fe = this._invKeySchedule = [], $e = 0; $e < we; $e++) {
                                var ke = we - $e;
                                if ($e % 4) var Be = Me[ke]; else var Be = Me[ke - 4];
                                $e < 4 || ke <= 4 ? Fe[$e] = Be : Fe[$e] = _e[N[Be >>> 24]] ^ Y[N[Be >>> 16 & 255]] ^ H[N[Be >>> 8 & 255]] ^ me[N[Be & 255]]
                            }
                        }
                    }, encryptBlock: function (Be, ve) {
                        this._doCryptBlock(Be, ve, this._keySchedule, O, D, z, F, N)
                    }, decryptBlock: function (Be, ve) {
                        var Re = Be[ve + 1];
                        Be[ve + 1] = Be[ve + 3], Be[ve + 3] = Re, this._doCryptBlock(Be, ve, this._invKeySchedule, _e, Y, H, me, L);
                        var Re = Be[ve + 1];
                        Be[ve + 1] = Be[ve + 3], Be[ve + 3] = Re
                    }, _doCryptBlock: function (Be, ve, Re, Ce, Ne, we, Me, ke) {
                        for (var Fe = this._nRounds, $e = Be[ve] ^ Re[0], Ve = Be[ve + 1] ^ Re[1], Je = Be[ve + 2] ^ Re[2], Qe = Be[ve + 3] ^ Re[3], Ze = 4, qe = 1; qe < Fe; qe++) {
                            var ze = Ce[$e >>> 24] ^ Ne[Ve >>> 16 & 255] ^ we[Je >>> 8 & 255] ^ Me[Qe & 255] ^ Re[Ze++],
                                De = Ce[Ve >>> 24] ^ Ne[Je >>> 16 & 255] ^ we[Qe >>> 8 & 255] ^ Me[$e & 255] ^ Re[Ze++],
                                Xe = Ce[Je >>> 24] ^ Ne[Qe >>> 16 & 255] ^ we[$e >>> 8 & 255] ^ Me[Ve & 255] ^ Re[Ze++],
                                He = Ce[Qe >>> 24] ^ Ne[$e >>> 16 & 255] ^ we[Ve >>> 8 & 255] ^ Me[Je & 255] ^ Re[Ze++];
                            $e = ze, Ve = De, Je = Xe, Qe = He
                        }
                        var ze = (ke[$e >>> 24] << 24 | ke[Ve >>> 16 & 255] << 16 | ke[Je >>> 8 & 255] << 8 | ke[Qe & 255]) ^ Re[Ze++],
                            De = (ke[Ve >>> 24] << 24 | ke[Je >>> 16 & 255] << 16 | ke[Qe >>> 8 & 255] << 8 | ke[$e & 255]) ^ Re[Ze++],
                            Xe = (ke[Je >>> 24] << 24 | ke[Qe >>> 16 & 255] << 16 | ke[$e >>> 8 & 255] << 8 | ke[Ve & 255]) ^ Re[Ze++],
                            He = (ke[Qe >>> 24] << 24 | ke[$e >>> 16 & 255] << 16 | ke[Ve >>> 8 & 255] << 8 | ke[Je & 255]) ^ Re[Ze++];
                        Be[ve] = ze, Be[ve + 1] = De, Be[ve + 2] = Xe, Be[ve + 3] = He
                    }, keySize: 256 / 32
                });
                E.AES = x._createHelper(ie)
            }(), y.AES
        })
    }(aes)), aesExports
}

var tripledesExports = {}, tripledes = {
    get exports() {
        return tripledesExports
    }, set exports(r) {
        tripledesExports = r
    }
}, hasRequiredTripledes;

function requireTripledes() {
    return hasRequiredTripledes || (hasRequiredTripledes = 1, function (r, R) {
        (function (y, E, C) {
            r.exports = E(requireCore(), requireEncBase64(), requireMd5(), requireEvpkdf(), requireCipherCore())
        })(commonjsGlobal, function (y) {
            return function () {
                var E = y, C = E.lib, x = C.WordArray, B = C.BlockCipher, N = E.algo,
                    L = [57, 49, 41, 33, 25, 17, 9, 1, 58, 50, 42, 34, 26, 18, 10, 2, 59, 51, 43, 35, 27, 19, 11, 3, 60, 52, 44, 36, 63, 55, 47, 39, 31, 23, 15, 7, 62, 54, 46, 38, 30, 22, 14, 6, 61, 53, 45, 37, 29, 21, 13, 5, 28, 20, 12, 4],
                    O = [14, 17, 11, 24, 1, 5, 3, 28, 15, 6, 21, 10, 23, 19, 12, 4, 26, 8, 16, 7, 27, 20, 13, 2, 41, 52, 31, 37, 47, 55, 30, 40, 51, 45, 33, 48, 44, 49, 39, 56, 34, 53, 46, 42, 50, 36, 29, 32],
                    D = [1, 2, 4, 6, 8, 10, 12, 14, 15, 17, 19, 21, 23, 25, 27, 28], z = [{
                        0: 8421888,
                        268435456: 32768,
                        536870912: 8421378,
                        805306368: 2,
                        1073741824: 512,
                        1342177280: 8421890,
                        1610612736: 8389122,
                        1879048192: 8388608,
                        2147483648: 514,
                        2415919104: 8389120,
                        2684354560: 33280,
                        2952790016: 8421376,
                        3221225472: 32770,
                        3489660928: 8388610,
                        3758096384: 0,
                        4026531840: 33282,
                        134217728: 0,
                        402653184: 8421890,
                        671088640: 33282,
                        939524096: 32768,
                        1207959552: 8421888,
                        1476395008: 512,
                        1744830464: 8421378,
                        2013265920: 2,
                        2281701376: 8389120,
                        2550136832: 33280,
                        2818572288: 8421376,
                        3087007744: 8389122,
                        3355443200: 8388610,
                        3623878656: 32770,
                        3892314112: 514,
                        4160749568: 8388608,
                        1: 32768,
                        268435457: 2,
                        536870913: 8421888,
                        805306369: 8388608,
                        1073741825: 8421378,
                        1342177281: 33280,
                        1610612737: 512,
                        1879048193: 8389122,
                        2147483649: 8421890,
                        2415919105: 8421376,
                        2684354561: 8388610,
                        2952790017: 33282,
                        3221225473: 514,
                        3489660929: 8389120,
                        3758096385: 32770,
                        4026531841: 0,
                        134217729: 8421890,
                        402653185: 8421376,
                        671088641: 8388608,
                        939524097: 512,
                        1207959553: 32768,
                        1476395009: 8388610,
                        1744830465: 2,
                        2013265921: 33282,
                        2281701377: 32770,
                        2550136833: 8389122,
                        2818572289: 514,
                        3087007745: 8421888,
                        3355443201: 8389120,
                        3623878657: 0,
                        3892314113: 33280,
                        4160749569: 8421378
                    }, {
                        0: 1074282512,
                        16777216: 16384,
                        33554432: 524288,
                        50331648: 1074266128,
                        67108864: 1073741840,
                        83886080: 1074282496,
                        100663296: 1073758208,
                        117440512: 16,
                        134217728: 540672,
                        150994944: 1073758224,
                        167772160: 1073741824,
                        184549376: 540688,
                        201326592: 524304,
                        218103808: 0,
                        234881024: 16400,
                        251658240: 1074266112,
                        8388608: 1073758208,
                        25165824: 540688,
                        41943040: 16,
                        58720256: 1073758224,
                        75497472: 1074282512,
                        92274688: 1073741824,
                        109051904: 524288,
                        125829120: 1074266128,
                        142606336: 524304,
                        159383552: 0,
                        176160768: 16384,
                        192937984: 1074266112,
                        209715200: 1073741840,
                        226492416: 540672,
                        243269632: 1074282496,
                        260046848: 16400,
                        268435456: 0,
                        285212672: 1074266128,
                        301989888: 1073758224,
                        318767104: 1074282496,
                        335544320: 1074266112,
                        352321536: 16,
                        369098752: 540688,
                        385875968: 16384,
                        402653184: 16400,
                        419430400: 524288,
                        436207616: 524304,
                        452984832: 1073741840,
                        469762048: 540672,
                        486539264: 1073758208,
                        503316480: 1073741824,
                        520093696: 1074282512,
                        276824064: 540688,
                        293601280: 524288,
                        310378496: 1074266112,
                        327155712: 16384,
                        343932928: 1073758208,
                        360710144: 1074282512,
                        377487360: 16,
                        394264576: 1073741824,
                        411041792: 1074282496,
                        427819008: 1073741840,
                        444596224: 1073758224,
                        461373440: 524304,
                        478150656: 0,
                        494927872: 16400,
                        511705088: 1074266128,
                        528482304: 540672
                    }, {
                        0: 260,
                        1048576: 0,
                        2097152: 67109120,
                        3145728: 65796,
                        4194304: 65540,
                        5242880: 67108868,
                        6291456: 67174660,
                        7340032: 67174400,
                        8388608: 67108864,
                        9437184: 67174656,
                        10485760: 65792,
                        11534336: 67174404,
                        12582912: 67109124,
                        13631488: 65536,
                        14680064: 4,
                        15728640: 256,
                        524288: 67174656,
                        1572864: 67174404,
                        2621440: 0,
                        3670016: 67109120,
                        4718592: 67108868,
                        5767168: 65536,
                        6815744: 65540,
                        7864320: 260,
                        8912896: 4,
                        9961472: 256,
                        11010048: 67174400,
                        12058624: 65796,
                        13107200: 65792,
                        14155776: 67109124,
                        15204352: 67174660,
                        16252928: 67108864,
                        16777216: 67174656,
                        17825792: 65540,
                        18874368: 65536,
                        19922944: 67109120,
                        20971520: 256,
                        22020096: 67174660,
                        23068672: 67108868,
                        24117248: 0,
                        25165824: 67109124,
                        26214400: 67108864,
                        27262976: 4,
                        28311552: 65792,
                        29360128: 67174400,
                        30408704: 260,
                        31457280: 65796,
                        32505856: 67174404,
                        17301504: 67108864,
                        18350080: 260,
                        19398656: 67174656,
                        20447232: 0,
                        21495808: 65540,
                        22544384: 67109120,
                        23592960: 256,
                        24641536: 67174404,
                        25690112: 65536,
                        26738688: 67174660,
                        27787264: 65796,
                        28835840: 67108868,
                        29884416: 67109124,
                        30932992: 67174400,
                        31981568: 4,
                        33030144: 65792
                    }, {
                        0: 2151682048,
                        65536: 2147487808,
                        131072: 4198464,
                        196608: 2151677952,
                        262144: 0,
                        327680: 4198400,
                        393216: 2147483712,
                        458752: 4194368,
                        524288: 2147483648,
                        589824: 4194304,
                        655360: 64,
                        720896: 2147487744,
                        786432: 2151678016,
                        851968: 4160,
                        917504: 4096,
                        983040: 2151682112,
                        32768: 2147487808,
                        98304: 64,
                        163840: 2151678016,
                        229376: 2147487744,
                        294912: 4198400,
                        360448: 2151682112,
                        425984: 0,
                        491520: 2151677952,
                        557056: 4096,
                        622592: 2151682048,
                        688128: 4194304,
                        753664: 4160,
                        819200: 2147483648,
                        884736: 4194368,
                        950272: 4198464,
                        1015808: 2147483712,
                        1048576: 4194368,
                        1114112: 4198400,
                        1179648: 2147483712,
                        1245184: 0,
                        1310720: 4160,
                        1376256: 2151678016,
                        1441792: 2151682048,
                        1507328: 2147487808,
                        1572864: 2151682112,
                        1638400: 2147483648,
                        1703936: 2151677952,
                        1769472: 4198464,
                        1835008: 2147487744,
                        1900544: 4194304,
                        1966080: 64,
                        2031616: 4096,
                        1081344: 2151677952,
                        1146880: 2151682112,
                        1212416: 0,
                        1277952: 4198400,
                        1343488: 4194368,
                        1409024: 2147483648,
                        1474560: 2147487808,
                        1540096: 64,
                        1605632: 2147483712,
                        1671168: 4096,
                        1736704: 2147487744,
                        1802240: 2151678016,
                        1867776: 4160,
                        1933312: 2151682048,
                        1998848: 4194304,
                        2064384: 4198464
                    }, {
                        0: 128,
                        4096: 17039360,
                        8192: 262144,
                        12288: 536870912,
                        16384: 537133184,
                        20480: 16777344,
                        24576: 553648256,
                        28672: 262272,
                        32768: 16777216,
                        36864: 537133056,
                        40960: 536871040,
                        45056: 553910400,
                        49152: 553910272,
                        53248: 0,
                        57344: 17039488,
                        61440: 553648128,
                        2048: 17039488,
                        6144: 553648256,
                        10240: 128,
                        14336: 17039360,
                        18432: 262144,
                        22528: 537133184,
                        26624: 553910272,
                        30720: 536870912,
                        34816: 537133056,
                        38912: 0,
                        43008: 553910400,
                        47104: 16777344,
                        51200: 536871040,
                        55296: 553648128,
                        59392: 16777216,
                        63488: 262272,
                        65536: 262144,
                        69632: 128,
                        73728: 536870912,
                        77824: 553648256,
                        81920: 16777344,
                        86016: 553910272,
                        90112: 537133184,
                        94208: 16777216,
                        98304: 553910400,
                        102400: 553648128,
                        106496: 17039360,
                        110592: 537133056,
                        114688: 262272,
                        118784: 536871040,
                        122880: 0,
                        126976: 17039488,
                        67584: 553648256,
                        71680: 16777216,
                        75776: 17039360,
                        79872: 537133184,
                        83968: 536870912,
                        88064: 17039488,
                        92160: 128,
                        96256: 553910272,
                        100352: 262272,
                        104448: 553910400,
                        108544: 0,
                        112640: 553648128,
                        116736: 16777344,
                        120832: 262144,
                        124928: 537133056,
                        129024: 536871040
                    }, {
                        0: 268435464,
                        256: 8192,
                        512: 270532608,
                        768: 270540808,
                        1024: 268443648,
                        1280: 2097152,
                        1536: 2097160,
                        1792: 268435456,
                        2048: 0,
                        2304: 268443656,
                        2560: 2105344,
                        2816: 8,
                        3072: 270532616,
                        3328: 2105352,
                        3584: 8200,
                        3840: 270540800,
                        128: 270532608,
                        384: 270540808,
                        640: 8,
                        896: 2097152,
                        1152: 2105352,
                        1408: 268435464,
                        1664: 268443648,
                        1920: 8200,
                        2176: 2097160,
                        2432: 8192,
                        2688: 268443656,
                        2944: 270532616,
                        3200: 0,
                        3456: 270540800,
                        3712: 2105344,
                        3968: 268435456,
                        4096: 268443648,
                        4352: 270532616,
                        4608: 270540808,
                        4864: 8200,
                        5120: 2097152,
                        5376: 268435456,
                        5632: 268435464,
                        5888: 2105344,
                        6144: 2105352,
                        6400: 0,
                        6656: 8,
                        6912: 270532608,
                        7168: 8192,
                        7424: 268443656,
                        7680: 270540800,
                        7936: 2097160,
                        4224: 8,
                        4480: 2105344,
                        4736: 2097152,
                        4992: 268435464,
                        5248: 268443648,
                        5504: 8200,
                        5760: 270540808,
                        6016: 270532608,
                        6272: 270540800,
                        6528: 270532616,
                        6784: 8192,
                        7040: 2105352,
                        7296: 2097160,
                        7552: 0,
                        7808: 268435456,
                        8064: 268443656
                    }, {
                        0: 1048576,
                        16: 33555457,
                        32: 1024,
                        48: 1049601,
                        64: 34604033,
                        80: 0,
                        96: 1,
                        112: 34603009,
                        128: 33555456,
                        144: 1048577,
                        160: 33554433,
                        176: 34604032,
                        192: 34603008,
                        208: 1025,
                        224: 1049600,
                        240: 33554432,
                        8: 34603009,
                        24: 0,
                        40: 33555457,
                        56: 34604032,
                        72: 1048576,
                        88: 33554433,
                        104: 33554432,
                        120: 1025,
                        136: 1049601,
                        152: 33555456,
                        168: 34603008,
                        184: 1048577,
                        200: 1024,
                        216: 34604033,
                        232: 1,
                        248: 1049600,
                        256: 33554432,
                        272: 1048576,
                        288: 33555457,
                        304: 34603009,
                        320: 1048577,
                        336: 33555456,
                        352: 34604032,
                        368: 1049601,
                        384: 1025,
                        400: 34604033,
                        416: 1049600,
                        432: 1,
                        448: 0,
                        464: 34603008,
                        480: 33554433,
                        496: 1024,
                        264: 1049600,
                        280: 33555457,
                        296: 34603009,
                        312: 1,
                        328: 33554432,
                        344: 1048576,
                        360: 1025,
                        376: 34604032,
                        392: 33554433,
                        408: 34603008,
                        424: 0,
                        440: 34604033,
                        456: 1049601,
                        472: 1024,
                        488: 33555456,
                        504: 1048577
                    }, {
                        0: 134219808,
                        1: 131072,
                        2: 134217728,
                        3: 32,
                        4: 131104,
                        5: 134350880,
                        6: 134350848,
                        7: 2048,
                        8: 134348800,
                        9: 134219776,
                        10: 133120,
                        11: 134348832,
                        12: 2080,
                        13: 0,
                        14: 134217760,
                        15: 133152,
                        2147483648: 2048,
                        2147483649: 134350880,
                        2147483650: 134219808,
                        2147483651: 134217728,
                        2147483652: 134348800,
                        2147483653: 133120,
                        2147483654: 133152,
                        2147483655: 32,
                        2147483656: 134217760,
                        2147483657: 2080,
                        2147483658: 131104,
                        2147483659: 134350848,
                        2147483660: 0,
                        2147483661: 134348832,
                        2147483662: 134219776,
                        2147483663: 131072,
                        16: 133152,
                        17: 134350848,
                        18: 32,
                        19: 2048,
                        20: 134219776,
                        21: 134217760,
                        22: 134348832,
                        23: 131072,
                        24: 0,
                        25: 131104,
                        26: 134348800,
                        27: 134219808,
                        28: 134350880,
                        29: 133120,
                        30: 2080,
                        31: 134217728,
                        2147483664: 131072,
                        2147483665: 2048,
                        2147483666: 134348832,
                        2147483667: 133152,
                        2147483668: 32,
                        2147483669: 134348800,
                        2147483670: 134217728,
                        2147483671: 134219808,
                        2147483672: 134350880,
                        2147483673: 134217760,
                        2147483674: 134219776,
                        2147483675: 0,
                        2147483676: 133120,
                        2147483677: 2080,
                        2147483678: 131104,
                        2147483679: 134350848
                    }], F = [4160749569, 528482304, 33030144, 2064384, 129024, 8064, 504, 2147483679],
                    _e = N.DES = B.extend({
                        _doReset: function () {
                            for (var ce = this._key, ie = ce.words, Be = [], ve = 0; ve < 56; ve++) {
                                var Re = L[ve] - 1;
                                Be[ve] = ie[Re >>> 5] >>> 31 - Re % 32 & 1
                            }
                            for (var Ce = this._subKeys = [], Ne = 0; Ne < 16; Ne++) {
                                for (var we = Ce[Ne] = [], Me = D[Ne], ve = 0; ve < 24; ve++) we[ve / 6 | 0] |= Be[(O[ve] - 1 + Me) % 28] << 31 - ve % 6, we[4 + (ve / 6 | 0)] |= Be[28 + (O[ve + 24] - 1 + Me) % 28] << 31 - ve % 6;
                                we[0] = we[0] << 1 | we[0] >>> 31;
                                for (var ve = 1; ve < 7; ve++) we[ve] = we[ve] >>> (ve - 1) * 4 + 3;
                                we[7] = we[7] << 5 | we[7] >>> 27
                            }
                            for (var ke = this._invSubKeys = [], ve = 0; ve < 16; ve++) ke[ve] = Ce[15 - ve]
                        }, encryptBlock: function (ce, ie) {
                            this._doCryptBlock(ce, ie, this._subKeys)
                        }, decryptBlock: function (ce, ie) {
                            this._doCryptBlock(ce, ie, this._invSubKeys)
                        }, _doCryptBlock: function (ce, ie, Be) {
                            this._lBlock = ce[ie], this._rBlock = ce[ie + 1], Y.call(this, 4, 252645135), Y.call(this, 16, 65535), H.call(this, 2, 858993459), H.call(this, 8, 16711935), Y.call(this, 1, 1431655765);
                            for (var ve = 0; ve < 16; ve++) {
                                for (var Re = Be[ve], Ce = this._lBlock, Ne = this._rBlock, we = 0, Me = 0; Me < 8; Me++) we |= z[Me][((Ne ^ Re[Me]) & F[Me]) >>> 0];
                                this._lBlock = Ne, this._rBlock = Ce ^ we
                            }
                            var ke = this._lBlock;
                            this._lBlock = this._rBlock, this._rBlock = ke, Y.call(this, 1, 1431655765), H.call(this, 8, 16711935), H.call(this, 2, 858993459), Y.call(this, 16, 65535), Y.call(this, 4, 252645135), ce[ie] = this._lBlock, ce[ie + 1] = this._rBlock
                        }, keySize: 64 / 32, ivSize: 64 / 32, blockSize: 64 / 32
                    });

                function Y(ce, ie) {
                    var Be = (this._lBlock >>> ce ^ this._rBlock) & ie;
                    this._rBlock ^= Be, this._lBlock ^= Be << ce
                }

                function H(ce, ie) {
                    var Be = (this._rBlock >>> ce ^ this._lBlock) & ie;
                    this._lBlock ^= Be, this._rBlock ^= Be << ce
                }

                E.DES = B._createHelper(_e);
                var me = N.TripleDES = B.extend({
                    _doReset: function () {
                        var ce = this._key, ie = ce.words;
                        if (ie.length !== 2 && ie.length !== 4 && ie.length < 6) throw new Error("Invalid key length - 3DES requires the key length to be 64, 128, 192 or >192.");
                        var Be = ie.slice(0, 2), ve = ie.length < 4 ? ie.slice(0, 2) : ie.slice(2, 4),
                            Re = ie.length < 6 ? ie.slice(0, 2) : ie.slice(4, 6);
                        this._des1 = _e.createEncryptor(x.create(Be)), this._des2 = _e.createEncryptor(x.create(ve)), this._des3 = _e.createEncryptor(x.create(Re))
                    }, encryptBlock: function (ce, ie) {
                        this._des1.encryptBlock(ce, ie), this._des2.decryptBlock(ce, ie), this._des3.encryptBlock(ce, ie)
                    }, decryptBlock: function (ce, ie) {
                        this._des3.decryptBlock(ce, ie), this._des2.encryptBlock(ce, ie), this._des1.decryptBlock(ce, ie)
                    }, keySize: 192 / 32, ivSize: 64 / 32, blockSize: 64 / 32
                });
                E.TripleDES = B._createHelper(me)
            }(), y.TripleDES
        })
    }(tripledes)), tripledesExports
}

var rc4Exports = {}, rc4 = {
    get exports() {
        return rc4Exports
    }, set exports(r) {
        rc4Exports = r
    }
}, hasRequiredRc4;

function requireRc4() {
    return hasRequiredRc4 || (hasRequiredRc4 = 1, function (r, R) {
        (function (y, E, C) {
            r.exports = E(requireCore(), requireEncBase64(), requireMd5(), requireEvpkdf(), requireCipherCore())
        })(commonjsGlobal, function (y) {
            return function () {
                var E = y, C = E.lib, x = C.StreamCipher, B = E.algo, N = B.RC4 = x.extend({
                    _doReset: function () {
                        for (var D = this._key, z = D.words, F = D.sigBytes, _e = this._S = [], Y = 0; Y < 256; Y++) _e[Y] = Y;
                        for (var Y = 0, H = 0; Y < 256; Y++) {
                            var me = Y % F, ce = z[me >>> 2] >>> 24 - me % 4 * 8 & 255;
                            H = (H + _e[Y] + ce) % 256;
                            var ie = _e[Y];
                            _e[Y] = _e[H], _e[H] = ie
                        }
                        this._i = this._j = 0
                    }, _doProcessBlock: function (D, z) {
                        D[z] ^= L.call(this)
                    }, keySize: 256 / 32, ivSize: 0
                });

                function L() {
                    for (var D = this._S, z = this._i, F = this._j, _e = 0, Y = 0; Y < 4; Y++) {
                        z = (z + 1) % 256, F = (F + D[z]) % 256;
                        var H = D[z];
                        D[z] = D[F], D[F] = H, _e |= D[(D[z] + D[F]) % 256] << 24 - Y * 8
                    }
                    return this._i = z, this._j = F, _e
                }

                E.RC4 = x._createHelper(N);
                var O = B.RC4Drop = N.extend({
                    cfg: N.cfg.extend({drop: 192}), _doReset: function () {
                        N._doReset.call(this);
                        for (var D = this.cfg.drop; D > 0; D--) L.call(this)
                    }
                });
                E.RC4Drop = x._createHelper(O)
            }(), y.RC4
        })
    }(rc4)), rc4Exports
}

var rabbitExports = {}, rabbit = {
    get exports() {
        return rabbitExports
    }, set exports(r) {
        rabbitExports = r
    }
}, hasRequiredRabbit;

function requireRabbit() {
    return hasRequiredRabbit || (hasRequiredRabbit = 1, function (r, R) {
        (function (y, E, C) {
            r.exports = E(requireCore(), requireEncBase64(), requireMd5(), requireEvpkdf(), requireCipherCore())
        })(commonjsGlobal, function (y) {
            return function () {
                var E = y, C = E.lib, x = C.StreamCipher, B = E.algo, N = [], L = [], O = [], D = B.Rabbit = x.extend({
                    _doReset: function () {
                        for (var F = this._key.words, _e = this.cfg.iv, Y = 0; Y < 4; Y++) F[Y] = (F[Y] << 8 | F[Y] >>> 24) & 16711935 | (F[Y] << 24 | F[Y] >>> 8) & 4278255360;
                        var H = this._X = [F[0], F[3] << 16 | F[2] >>> 16, F[1], F[0] << 16 | F[3] >>> 16, F[2], F[1] << 16 | F[0] >>> 16, F[3], F[2] << 16 | F[1] >>> 16],
                            me = this._C = [F[2] << 16 | F[2] >>> 16, F[0] & 4294901760 | F[1] & 65535, F[3] << 16 | F[3] >>> 16, F[1] & 4294901760 | F[2] & 65535, F[0] << 16 | F[0] >>> 16, F[2] & 4294901760 | F[3] & 65535, F[1] << 16 | F[1] >>> 16, F[3] & 4294901760 | F[0] & 65535];
                        this._b = 0;
                        for (var Y = 0; Y < 4; Y++) z.call(this);
                        for (var Y = 0; Y < 8; Y++) me[Y] ^= H[Y + 4 & 7];
                        if (_e) {
                            var ce = _e.words, ie = ce[0], Be = ce[1],
                                ve = (ie << 8 | ie >>> 24) & 16711935 | (ie << 24 | ie >>> 8) & 4278255360,
                                Re = (Be << 8 | Be >>> 24) & 16711935 | (Be << 24 | Be >>> 8) & 4278255360,
                                Ce = ve >>> 16 | Re & 4294901760, Ne = Re << 16 | ve & 65535;
                            me[0] ^= ve, me[1] ^= Ce, me[2] ^= Re, me[3] ^= Ne, me[4] ^= ve, me[5] ^= Ce, me[6] ^= Re, me[7] ^= Ne;
                            for (var Y = 0; Y < 4; Y++) z.call(this)
                        }
                    }, _doProcessBlock: function (F, _e) {
                        var Y = this._X;
                        z.call(this), N[0] = Y[0] ^ Y[5] >>> 16 ^ Y[3] << 16, N[1] = Y[2] ^ Y[7] >>> 16 ^ Y[5] << 16, N[2] = Y[4] ^ Y[1] >>> 16 ^ Y[7] << 16, N[3] = Y[6] ^ Y[3] >>> 16 ^ Y[1] << 16;
                        for (var H = 0; H < 4; H++) N[H] = (N[H] << 8 | N[H] >>> 24) & 16711935 | (N[H] << 24 | N[H] >>> 8) & 4278255360, F[_e + H] ^= N[H]
                    }, blockSize: 128 / 32, ivSize: 64 / 32
                });

                function z() {
                    for (var F = this._X, _e = this._C, Y = 0; Y < 8; Y++) L[Y] = _e[Y];
                    _e[0] = _e[0] + 1295307597 + this._b | 0, _e[1] = _e[1] + 3545052371 + (_e[0] >>> 0 < L[0] >>> 0 ? 1 : 0) | 0, _e[2] = _e[2] + 886263092 + (_e[1] >>> 0 < L[1] >>> 0 ? 1 : 0) | 0, _e[3] = _e[3] + 1295307597 + (_e[2] >>> 0 < L[2] >>> 0 ? 1 : 0) | 0, _e[4] = _e[4] + 3545052371 + (_e[3] >>> 0 < L[3] >>> 0 ? 1 : 0) | 0, _e[5] = _e[5] + 886263092 + (_e[4] >>> 0 < L[4] >>> 0 ? 1 : 0) | 0, _e[6] = _e[6] + 1295307597 + (_e[5] >>> 0 < L[5] >>> 0 ? 1 : 0) | 0, _e[7] = _e[7] + 3545052371 + (_e[6] >>> 0 < L[6] >>> 0 ? 1 : 0) | 0, this._b = _e[7] >>> 0 < L[7] >>> 0 ? 1 : 0;
                    for (var Y = 0; Y < 8; Y++) {
                        var H = F[Y] + _e[Y], me = H & 65535, ce = H >>> 16,
                            ie = ((me * me >>> 17) + me * ce >>> 15) + ce * ce,
                            Be = ((H & 4294901760) * H | 0) + ((H & 65535) * H | 0);
                        O[Y] = ie ^ Be
                    }
                    F[0] = O[0] + (O[7] << 16 | O[7] >>> 16) + (O[6] << 16 | O[6] >>> 16) | 0, F[1] = O[1] + (O[0] << 8 | O[0] >>> 24) + O[7] | 0, F[2] = O[2] + (O[1] << 16 | O[1] >>> 16) + (O[0] << 16 | O[0] >>> 16) | 0, F[3] = O[3] + (O[2] << 8 | O[2] >>> 24) + O[1] | 0, F[4] = O[4] + (O[3] << 16 | O[3] >>> 16) + (O[2] << 16 | O[2] >>> 16) | 0, F[5] = O[5] + (O[4] << 8 | O[4] >>> 24) + O[3] | 0, F[6] = O[6] + (O[5] << 16 | O[5] >>> 16) + (O[4] << 16 | O[4] >>> 16) | 0, F[7] = O[7] + (O[6] << 8 | O[6] >>> 24) + O[5] | 0
                }

                E.Rabbit = x._createHelper(D)
            }(), y.Rabbit
        })
    }(rabbit)), rabbitExports
}

var rabbitLegacyExports = {}, rabbitLegacy = {
    get exports() {
        return rabbitLegacyExports
    }, set exports(r) {
        rabbitLegacyExports = r
    }
}, hasRequiredRabbitLegacy;

function requireRabbitLegacy() {
    return hasRequiredRabbitLegacy || (hasRequiredRabbitLegacy = 1, function (r, R) {
        (function (y, E, C) {
            r.exports = E(requireCore(), requireEncBase64(), requireMd5(), requireEvpkdf(), requireCipherCore())
        })(commonjsGlobal, function (y) {
            return function () {
                var E = y, C = E.lib, x = C.StreamCipher, B = E.algo, N = [], L = [], O = [],
                    D = B.RabbitLegacy = x.extend({
                        _doReset: function () {
                            var F = this._key.words, _e = this.cfg.iv,
                                Y = this._X = [F[0], F[3] << 16 | F[2] >>> 16, F[1], F[0] << 16 | F[3] >>> 16, F[2], F[1] << 16 | F[0] >>> 16, F[3], F[2] << 16 | F[1] >>> 16],
                                H = this._C = [F[2] << 16 | F[2] >>> 16, F[0] & 4294901760 | F[1] & 65535, F[3] << 16 | F[3] >>> 16, F[1] & 4294901760 | F[2] & 65535, F[0] << 16 | F[0] >>> 16, F[2] & 4294901760 | F[3] & 65535, F[1] << 16 | F[1] >>> 16, F[3] & 4294901760 | F[0] & 65535];
                            this._b = 0;
                            for (var me = 0; me < 4; me++) z.call(this);
                            for (var me = 0; me < 8; me++) H[me] ^= Y[me + 4 & 7];
                            if (_e) {
                                var ce = _e.words, ie = ce[0], Be = ce[1],
                                    ve = (ie << 8 | ie >>> 24) & 16711935 | (ie << 24 | ie >>> 8) & 4278255360,
                                    Re = (Be << 8 | Be >>> 24) & 16711935 | (Be << 24 | Be >>> 8) & 4278255360,
                                    Ce = ve >>> 16 | Re & 4294901760, Ne = Re << 16 | ve & 65535;
                                H[0] ^= ve, H[1] ^= Ce, H[2] ^= Re, H[3] ^= Ne, H[4] ^= ve, H[5] ^= Ce, H[6] ^= Re, H[7] ^= Ne;
                                for (var me = 0; me < 4; me++) z.call(this)
                            }
                        }, _doProcessBlock: function (F, _e) {
                            var Y = this._X;
                            z.call(this), N[0] = Y[0] ^ Y[5] >>> 16 ^ Y[3] << 16, N[1] = Y[2] ^ Y[7] >>> 16 ^ Y[5] << 16, N[2] = Y[4] ^ Y[1] >>> 16 ^ Y[7] << 16, N[3] = Y[6] ^ Y[3] >>> 16 ^ Y[1] << 16;
                            for (var H = 0; H < 4; H++) N[H] = (N[H] << 8 | N[H] >>> 24) & 16711935 | (N[H] << 24 | N[H] >>> 8) & 4278255360, F[_e + H] ^= N[H]
                        }, blockSize: 128 / 32, ivSize: 64 / 32
                    });

                function z() {
                    for (var F = this._X, _e = this._C, Y = 0; Y < 8; Y++) L[Y] = _e[Y];
                    _e[0] = _e[0] + 1295307597 + this._b | 0, _e[1] = _e[1] + 3545052371 + (_e[0] >>> 0 < L[0] >>> 0 ? 1 : 0) | 0, _e[2] = _e[2] + 886263092 + (_e[1] >>> 0 < L[1] >>> 0 ? 1 : 0) | 0, _e[3] = _e[3] + 1295307597 + (_e[2] >>> 0 < L[2] >>> 0 ? 1 : 0) | 0, _e[4] = _e[4] + 3545052371 + (_e[3] >>> 0 < L[3] >>> 0 ? 1 : 0) | 0, _e[5] = _e[5] + 886263092 + (_e[4] >>> 0 < L[4] >>> 0 ? 1 : 0) | 0, _e[6] = _e[6] + 1295307597 + (_e[5] >>> 0 < L[5] >>> 0 ? 1 : 0) | 0, _e[7] = _e[7] + 3545052371 + (_e[6] >>> 0 < L[6] >>> 0 ? 1 : 0) | 0, this._b = _e[7] >>> 0 < L[7] >>> 0 ? 1 : 0;
                    for (var Y = 0; Y < 8; Y++) {
                        var H = F[Y] + _e[Y], me = H & 65535, ce = H >>> 16,
                            ie = ((me * me >>> 17) + me * ce >>> 15) + ce * ce,
                            Be = ((H & 4294901760) * H | 0) + ((H & 65535) * H | 0);
                        O[Y] = ie ^ Be
                    }
                    F[0] = O[0] + (O[7] << 16 | O[7] >>> 16) + (O[6] << 16 | O[6] >>> 16) | 0, F[1] = O[1] + (O[0] << 8 | O[0] >>> 24) + O[7] | 0, F[2] = O[2] + (O[1] << 16 | O[1] >>> 16) + (O[0] << 16 | O[0] >>> 16) | 0, F[3] = O[3] + (O[2] << 8 | O[2] >>> 24) + O[1] | 0, F[4] = O[4] + (O[3] << 16 | O[3] >>> 16) + (O[2] << 16 | O[2] >>> 16) | 0, F[5] = O[5] + (O[4] << 8 | O[4] >>> 24) + O[3] | 0, F[6] = O[6] + (O[5] << 16 | O[5] >>> 16) + (O[4] << 16 | O[4] >>> 16) | 0, F[7] = O[7] + (O[6] << 8 | O[6] >>> 24) + O[5] | 0
                }

                E.RabbitLegacy = x._createHelper(D)
            }(), y.RabbitLegacy
        })
    }(rabbitLegacy)), rabbitLegacyExports
}

(function (r, R) {
    (function (y, E, C) {
        r.exports = E(requireCore(), requireX64Core(), requireLibTypedarrays(), requireEncUtf16(), requireEncBase64(), requireEncBase64url(), requireMd5(), requireSha1(), requireSha256(), requireSha224(), requireSha512(), requireSha384(), requireSha3(), requireRipemd160(), requireHmac(), requirePbkdf2(), requireEvpkdf(), requireCipherCore(), requireModeCfb(), requireModeCtr(), requireModeCtrGladman(), requireModeOfb(), requireModeEcb(), requirePadAnsix923(), requirePadIso10126(), requirePadIso97971(), requirePadZeropadding(), requirePadNopadding(), requireFormatHex(), requireAes(), requireTripledes(), requireRc4(), requireRabbit(), requireRabbitLegacy())
    })(commonjsGlobal, function (y) {
        return y
    })
})(cryptoJs);
const c$1 = cryptoJsExports, useSeverConfig = (r, R, y) => {
    const {loading: E, error: C, data: x, setUrl: B} = useFetch();
    let [N, L] = React.useState(!1), [O, D] = React.useState(!0);
    React.useEffect(() => {
        C && F(SERVER_CONFIG_ACTIONS_TYPE.FETCH_FAILED)
    }, [C]), React.useEffect(() => {
        B(Global.getSystemJsonUrl(r.preloadConfig))
    }, [r.preloadConfig]);
    const z = _e => {
        var Y = null;
        let H = c$1, me = H.enc.Utf8.parse("mnj$5scjkulohshdy@1z&%4h"), ce = H.enc.Utf8.parse("ifc608gt");
        var ie = H.TripleDES.decrypt(_e.toString(), me, {iv: ce});
        return Helper.isJsonString(ie.toString(H.enc.Utf8)) && (Y = JSON.parse(ie.toString(H.enc.Utf8))), Y
    };
    let F = React.useCallback((_e, Y) => {
        R({type: _e, payload: Y})
    }, [R]);
    return React.useEffect(() => {
        if (x) if (Helper.isJsonString(x)) {
            JSON.parse(x), F(SERVER_CONFIG_ACTIONS_TYPE.STSTEM_JSON_CONFIG_FETCHED, z(x));
            return
        } else F(SERVER_CONFIG_ACTIONS_TYPE.STSTEM_JSON_CONFIG_FETCHED, z(x))
    }, [x]), React.useMemo(() => {
        D(E)
    }, [E]), {severConfigSetup: O, error: C, fetchSuzz: N}
}, initState$5 = {loginAtOnce: !1, sessionId: "", errorMsg: "", errorCode: ""}, HttpContext = React.createContext({
    httpState: initState$5, setHttpState: () => {
    }
});

function HttpProvider({children: r}) {
    React.useState("");
    const [R, y] = React.useState(initState$5);
    return jsx(HttpContext.Provider, {value: {httpState: R, setHttpState: y}, children: r})
}

const IsHttpGetSessionIdSucc = ({fallback: r}) => {
    const {httpState: R} = React.useContext(HttpContext), {update: y} = React.useContext(GameSessionContext),
        E = React.useMemo(() => !!(R.errorCode && R.errorCode.length > 0), [R.errorCode]);
    return React.useEffect(() => {
        R.errorCode && R.errorCode.length > 0 && y(GAME_SESSION_ACTIONS_TYPE.LOGIN_FAILD)
    }, [R.errorCode]), jsx(Fragment, {children: E ? r && jsx(Fragment, {children: jsx(r, {code: R.errorCode})}) : null})
}, model_IbetInfoDetail = {
    MODELNAME: "IbetInfoDetail",
    AA: "betLogId",
    BB: "gameHallType",
    CC: "tableName",
    DD: "gameRoundId",
    EE: "gameTypeCode",
    FF: "commission",
    GG: "betTime",
    HH: "playTypeName",
    II: "betAmount",
    JJ: "payout",
    LL: "validAmount",
    MM: "betLogStatus",
    NN: "urlSuffix",
    OO: "shoeNum",
    PP: "shoeRoundNum",
    VV: "stringLotteryResult",
    WW: "lotteryResultDetails",
    XX: "additionalBetStatus"
}, model_IbetRecord = {
    MODELNAME: "IbetRecord",
    C: model_IbetInfoDetail,
    D: "pageNum",
    E: "numPerPage",
    F: "totalPage",
    G: "totalRecord",
    H: "subTotalBetAmount",
    I: "subtotalPayout",
    J: "subtotalValidAmount",
    K: "totalBetAmount",
    L: "totalValidAmount",
    M: "totalPayout",
    N: "rebate",
    O: "rebateCommission"
};
/**
 * [js-md5]{@link https://github.com/emn178/js-md5}
 *
 * @namespace md5
 * @version 0.7.3
 * @author Chen, Yi-Cyuan [emn178@gmail.com]
 * @copyright Chen, Yi-Cyuan 2014-2017
 * @license MIT
 */(function () {
    var ERROR = "input is invalid type", WINDOW = typeof window == "object", root = WINDOW ? window : {};
    root.JS_MD5_NO_WINDOW && (WINDOW = !1);
    var WEB_WORKER = !WINDOW && typeof self == "object",
        NODE_JS = !root.JS_MD5_NO_NODE_JS && typeof process == "object" && process.versions && process.versions.node;
    NODE_JS ? root = global : WEB_WORKER && (root = self);
    var COMMON_JS = !root.JS_MD5_NO_COMMON_JS && typeof module == "object" && module.exports,
        AMD = typeof define == "function" && define.amd,
        ARRAY_BUFFER = !root.JS_MD5_NO_ARRAY_BUFFER && typeof ArrayBuffer < "u",
        HEX_CHARS = "0123456789abcdef".split(""), EXTRA = [128, 32768, 8388608, -2147483648], SHIFT = [0, 8, 16, 24],
        OUTPUT_TYPES = ["hex", "array", "digest", "buffer", "arrayBuffer", "base64"],
        BASE64_ENCODE_CHAR = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/".split(""), blocks = [],
        buffer8;
    if (ARRAY_BUFFER) {
        var buffer = new ArrayBuffer(68);
        buffer8 = new Uint8Array(buffer), blocks = new Uint32Array(buffer)
    }
    (root.JS_MD5_NO_NODE_JS || !Array.isArray) && (Array.isArray = function (r) {
        return Object.prototype.toString.call(r) === "[object Array]"
    }), ARRAY_BUFFER && (root.JS_MD5_NO_ARRAY_BUFFER_IS_VIEW || !ArrayBuffer.isView) && (ArrayBuffer.isView = function (r) {
        return typeof r == "object" && r.buffer && r.buffer.constructor === ArrayBuffer
    });
    var createOutputMethod = function (r) {
        return function (R) {
            return new Md5(!0).update(R)[r]()
        }
    }, createMethod = function () {
        var r = createOutputMethod("hex");
        NODE_JS && (r = nodeWrap(r)), r.create = function () {
            return new Md5
        }, r.update = function (E) {
            return r.create().update(E)
        };
        for (var R = 0; R < OUTPUT_TYPES.length; ++R) {
            var y = OUTPUT_TYPES[R];
            r[y] = createOutputMethod(y)
        }
        return r
    }, nodeWrap = function (method) {
        var crypto = eval("require('crypto')"), Buffer = eval("require('buffer').Buffer"), nodeMethod = function (r) {
            if (typeof r == "string") return crypto.createHash("md5").update(r, "utf8").digest("hex");
            if (r == null) throw ERROR;
            return r.constructor === ArrayBuffer && (r = new Uint8Array(r)), Array.isArray(r) || ArrayBuffer.isView(r) || r.constructor === Buffer ? crypto.createHash("md5").update(new Buffer(r)).digest("hex") : method(r)
        };
        return nodeMethod
    };

    function Md5(r) {
        if (r) blocks[0] = blocks[16] = blocks[1] = blocks[2] = blocks[3] = blocks[4] = blocks[5] = blocks[6] = blocks[7] = blocks[8] = blocks[9] = blocks[10] = blocks[11] = blocks[12] = blocks[13] = blocks[14] = blocks[15] = 0, this.blocks = blocks, this.buffer8 = buffer8; else if (ARRAY_BUFFER) {
            var R = new ArrayBuffer(68);
            this.buffer8 = new Uint8Array(R), this.blocks = new Uint32Array(R)
        } else this.blocks = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
        this.h0 = this.h1 = this.h2 = this.h3 = this.start = this.bytes = this.hBytes = 0, this.finalized = this.hashed = !1, this.first = !0
    }

    Md5.prototype.update = function (r) {
        if (!this.finalized) {
            var R, y = typeof r;
            if (y !== "string") {
                if (y === "object") {
                    if (r === null) throw ERROR;
                    if (ARRAY_BUFFER && r.constructor === ArrayBuffer) r = new Uint8Array(r); else if (!Array.isArray(r) && (!ARRAY_BUFFER || !ArrayBuffer.isView(r))) throw ERROR
                } else throw ERROR;
                R = !0
            }
            for (var E, C = 0, x, B = r.length, N = this.blocks, L = this.buffer8; C < B;) {
                if (this.hashed && (this.hashed = !1, N[0] = N[16], N[16] = N[1] = N[2] = N[3] = N[4] = N[5] = N[6] = N[7] = N[8] = N[9] = N[10] = N[11] = N[12] = N[13] = N[14] = N[15] = 0), R) if (ARRAY_BUFFER) for (x = this.start; C < B && x < 64; ++C) L[x++] = r[C]; else for (x = this.start; C < B && x < 64; ++C) N[x >> 2] |= r[C] << SHIFT[x++ & 3]; else if (ARRAY_BUFFER) for (x = this.start; C < B && x < 64; ++C) E = r.charCodeAt(C), E < 128 ? L[x++] = E : E < 2048 ? (L[x++] = 192 | E >> 6, L[x++] = 128 | E & 63) : E < 55296 || E >= 57344 ? (L[x++] = 224 | E >> 12, L[x++] = 128 | E >> 6 & 63, L[x++] = 128 | E & 63) : (E = 65536 + ((E & 1023) << 10 | r.charCodeAt(++C) & 1023), L[x++] = 240 | E >> 18, L[x++] = 128 | E >> 12 & 63, L[x++] = 128 | E >> 6 & 63, L[x++] = 128 | E & 63); else for (x = this.start; C < B && x < 64; ++C) E = r.charCodeAt(C), E < 128 ? N[x >> 2] |= E << SHIFT[x++ & 3] : E < 2048 ? (N[x >> 2] |= (192 | E >> 6) << SHIFT[x++ & 3], N[x >> 2] |= (128 | E & 63) << SHIFT[x++ & 3]) : E < 55296 || E >= 57344 ? (N[x >> 2] |= (224 | E >> 12) << SHIFT[x++ & 3], N[x >> 2] |= (128 | E >> 6 & 63) << SHIFT[x++ & 3], N[x >> 2] |= (128 | E & 63) << SHIFT[x++ & 3]) : (E = 65536 + ((E & 1023) << 10 | r.charCodeAt(++C) & 1023), N[x >> 2] |= (240 | E >> 18) << SHIFT[x++ & 3], N[x >> 2] |= (128 | E >> 12 & 63) << SHIFT[x++ & 3], N[x >> 2] |= (128 | E >> 6 & 63) << SHIFT[x++ & 3], N[x >> 2] |= (128 | E & 63) << SHIFT[x++ & 3]);
                this.lastByteIndex = x, this.bytes += x - this.start, x >= 64 ? (this.start = x - 64, this.hash(), this.hashed = !0) : this.start = x
            }
            return this.bytes > 4294967295 && (this.hBytes += this.bytes / 4294967296 << 0, this.bytes = this.bytes % 4294967296), this
        }
    }, Md5.prototype.finalize = function () {
        if (!this.finalized) {
            this.finalized = !0;
            var r = this.blocks, R = this.lastByteIndex;
            r[R >> 2] |= EXTRA[R & 3], R >= 56 && (this.hashed || this.hash(), r[0] = r[16], r[16] = r[1] = r[2] = r[3] = r[4] = r[5] = r[6] = r[7] = r[8] = r[9] = r[10] = r[11] = r[12] = r[13] = r[14] = r[15] = 0), r[14] = this.bytes << 3, r[15] = this.hBytes << 3 | this.bytes >>> 29, this.hash()
        }
    }, Md5.prototype.hash = function () {
        var r, R, y, E, C, x, B = this.blocks;
        this.first ? (r = B[0] - 680876937, r = (r << 7 | r >>> 25) - 271733879 << 0, E = (-1732584194 ^ r & 2004318071) + B[1] - 117830708, E = (E << 12 | E >>> 20) + r << 0, y = (-271733879 ^ E & (r ^ -271733879)) + B[2] - 1126478375, y = (y << 17 | y >>> 15) + E << 0, R = (r ^ y & (E ^ r)) + B[3] - 1316259209, R = (R << 22 | R >>> 10) + y << 0) : (r = this.h0, R = this.h1, y = this.h2, E = this.h3, r += (E ^ R & (y ^ E)) + B[0] - 680876936, r = (r << 7 | r >>> 25) + R << 0, E += (y ^ r & (R ^ y)) + B[1] - 389564586, E = (E << 12 | E >>> 20) + r << 0, y += (R ^ E & (r ^ R)) + B[2] + 606105819, y = (y << 17 | y >>> 15) + E << 0, R += (r ^ y & (E ^ r)) + B[3] - 1044525330, R = (R << 22 | R >>> 10) + y << 0), r += (E ^ R & (y ^ E)) + B[4] - 176418897, r = (r << 7 | r >>> 25) + R << 0, E += (y ^ r & (R ^ y)) + B[5] + 1200080426, E = (E << 12 | E >>> 20) + r << 0, y += (R ^ E & (r ^ R)) + B[6] - 1473231341, y = (y << 17 | y >>> 15) + E << 0, R += (r ^ y & (E ^ r)) + B[7] - 45705983, R = (R << 22 | R >>> 10) + y << 0, r += (E ^ R & (y ^ E)) + B[8] + 1770035416, r = (r << 7 | r >>> 25) + R << 0, E += (y ^ r & (R ^ y)) + B[9] - 1958414417, E = (E << 12 | E >>> 20) + r << 0, y += (R ^ E & (r ^ R)) + B[10] - 42063, y = (y << 17 | y >>> 15) + E << 0, R += (r ^ y & (E ^ r)) + B[11] - 1990404162, R = (R << 22 | R >>> 10) + y << 0, r += (E ^ R & (y ^ E)) + B[12] + 1804603682, r = (r << 7 | r >>> 25) + R << 0, E += (y ^ r & (R ^ y)) + B[13] - 40341101, E = (E << 12 | E >>> 20) + r << 0, y += (R ^ E & (r ^ R)) + B[14] - 1502002290, y = (y << 17 | y >>> 15) + E << 0, R += (r ^ y & (E ^ r)) + B[15] + 1236535329, R = (R << 22 | R >>> 10) + y << 0, r += (y ^ E & (R ^ y)) + B[1] - 165796510, r = (r << 5 | r >>> 27) + R << 0, E += (R ^ y & (r ^ R)) + B[6] - 1069501632, E = (E << 9 | E >>> 23) + r << 0, y += (r ^ R & (E ^ r)) + B[11] + 643717713, y = (y << 14 | y >>> 18) + E << 0, R += (E ^ r & (y ^ E)) + B[0] - 373897302, R = (R << 20 | R >>> 12) + y << 0, r += (y ^ E & (R ^ y)) + B[5] - 701558691, r = (r << 5 | r >>> 27) + R << 0, E += (R ^ y & (r ^ R)) + B[10] + 38016083, E = (E << 9 | E >>> 23) + r << 0, y += (r ^ R & (E ^ r)) + B[15] - 660478335, y = (y << 14 | y >>> 18) + E << 0, R += (E ^ r & (y ^ E)) + B[4] - 405537848, R = (R << 20 | R >>> 12) + y << 0, r += (y ^ E & (R ^ y)) + B[9] + 568446438, r = (r << 5 | r >>> 27) + R << 0, E += (R ^ y & (r ^ R)) + B[14] - 1019803690, E = (E << 9 | E >>> 23) + r << 0, y += (r ^ R & (E ^ r)) + B[3] - 187363961, y = (y << 14 | y >>> 18) + E << 0, R += (E ^ r & (y ^ E)) + B[8] + 1163531501, R = (R << 20 | R >>> 12) + y << 0, r += (y ^ E & (R ^ y)) + B[13] - 1444681467, r = (r << 5 | r >>> 27) + R << 0, E += (R ^ y & (r ^ R)) + B[2] - 51403784, E = (E << 9 | E >>> 23) + r << 0, y += (r ^ R & (E ^ r)) + B[7] + 1735328473, y = (y << 14 | y >>> 18) + E << 0, R += (E ^ r & (y ^ E)) + B[12] - 1926607734, R = (R << 20 | R >>> 12) + y << 0, C = R ^ y, r += (C ^ E) + B[5] - 378558, r = (r << 4 | r >>> 28) + R << 0, E += (C ^ r) + B[8] - 2022574463, E = (E << 11 | E >>> 21) + r << 0, x = E ^ r, y += (x ^ R) + B[11] + 1839030562, y = (y << 16 | y >>> 16) + E << 0, R += (x ^ y) + B[14] - 35309556, R = (R << 23 | R >>> 9) + y << 0, C = R ^ y, r += (C ^ E) + B[1] - 1530992060, r = (r << 4 | r >>> 28) + R << 0, E += (C ^ r) + B[4] + 1272893353, E = (E << 11 | E >>> 21) + r << 0, x = E ^ r, y += (x ^ R) + B[7] - 155497632, y = (y << 16 | y >>> 16) + E << 0, R += (x ^ y) + B[10] - 1094730640, R = (R << 23 | R >>> 9) + y << 0, C = R ^ y, r += (C ^ E) + B[13] + 681279174, r = (r << 4 | r >>> 28) + R << 0, E += (C ^ r) + B[0] - 358537222, E = (E << 11 | E >>> 21) + r << 0, x = E ^ r, y += (x ^ R) + B[3] - 722521979, y = (y << 16 | y >>> 16) + E << 0, R += (x ^ y) + B[6] + 76029189, R = (R << 23 | R >>> 9) + y << 0, C = R ^ y, r += (C ^ E) + B[9] - 640364487, r = (r << 4 | r >>> 28) + R << 0, E += (C ^ r) + B[12] - 421815835, E = (E << 11 | E >>> 21) + r << 0, x = E ^ r, y += (x ^ R) + B[15] + 530742520, y = (y << 16 | y >>> 16) + E << 0, R += (x ^ y) + B[2] - 995338651, R = (R << 23 | R >>> 9) + y << 0, r += (y ^ (R | ~E)) + B[0] - 198630844, r = (r << 6 | r >>> 26) + R << 0, E += (R ^ (r | ~y)) + B[7] + 1126891415, E = (E << 10 | E >>> 22) + r << 0,y += (r ^ (E | ~R)) + B[14] - 1416354905,y = (y << 15 | y >>> 17) + E << 0,R += (E ^ (y | ~r)) + B[5] - 57434055,R = (R << 21 | R >>> 11) + y << 0,r += (y ^ (R | ~E)) + B[12] + 1700485571,r = (r << 6 | r >>> 26) + R << 0,E += (R ^ (r | ~y)) + B[3] - 1894986606,E = (E << 10 | E >>> 22) + r << 0,y += (r ^ (E | ~R)) + B[10] - 1051523,y = (y << 15 | y >>> 17) + E << 0,R += (E ^ (y | ~r)) + B[1] - 2054922799,R = (R << 21 | R >>> 11) + y << 0,r += (y ^ (R | ~E)) + B[8] + 1873313359,r = (r << 6 | r >>> 26) + R << 0,E += (R ^ (r | ~y)) + B[15] - 30611744,E = (E << 10 | E >>> 22) + r << 0,y += (r ^ (E | ~R)) + B[6] - 1560198380,y = (y << 15 | y >>> 17) + E << 0,R += (E ^ (y | ~r)) + B[13] + 1309151649,R = (R << 21 | R >>> 11) + y << 0,r += (y ^ (R | ~E)) + B[4] - 145523070,r = (r << 6 | r >>> 26) + R << 0,E += (R ^ (r | ~y)) + B[11] - 1120210379,E = (E << 10 | E >>> 22) + r << 0,y += (r ^ (E | ~R)) + B[2] + 718787259,y = (y << 15 | y >>> 17) + E << 0,R += (E ^ (y | ~r)) + B[9] - 343485551,R = (R << 21 | R >>> 11) + y << 0,this.first ? (this.h0 = r + 1732584193 << 0, this.h1 = R - 271733879 << 0, this.h2 = y - 1732584194 << 0, this.h3 = E + 271733878 << 0, this.first = !1) : (this.h0 = this.h0 + r << 0, this.h1 = this.h1 + R << 0, this.h2 = this.h2 + y << 0, this.h3 = this.h3 + E << 0)
    }, Md5.prototype.hex = function () {
        this.finalize();
        var r = this.h0, R = this.h1, y = this.h2, E = this.h3;
        return HEX_CHARS[r >> 4 & 15] + HEX_CHARS[r & 15] + HEX_CHARS[r >> 12 & 15] + HEX_CHARS[r >> 8 & 15] + HEX_CHARS[r >> 20 & 15] + HEX_CHARS[r >> 16 & 15] + HEX_CHARS[r >> 28 & 15] + HEX_CHARS[r >> 24 & 15] + HEX_CHARS[R >> 4 & 15] + HEX_CHARS[R & 15] + HEX_CHARS[R >> 12 & 15] + HEX_CHARS[R >> 8 & 15] + HEX_CHARS[R >> 20 & 15] + HEX_CHARS[R >> 16 & 15] + HEX_CHARS[R >> 28 & 15] + HEX_CHARS[R >> 24 & 15] + HEX_CHARS[y >> 4 & 15] + HEX_CHARS[y & 15] + HEX_CHARS[y >> 12 & 15] + HEX_CHARS[y >> 8 & 15] + HEX_CHARS[y >> 20 & 15] + HEX_CHARS[y >> 16 & 15] + HEX_CHARS[y >> 28 & 15] + HEX_CHARS[y >> 24 & 15] + HEX_CHARS[E >> 4 & 15] + HEX_CHARS[E & 15] + HEX_CHARS[E >> 12 & 15] + HEX_CHARS[E >> 8 & 15] + HEX_CHARS[E >> 20 & 15] + HEX_CHARS[E >> 16 & 15] + HEX_CHARS[E >> 28 & 15] + HEX_CHARS[E >> 24 & 15]
    }, Md5.prototype.toString = Md5.prototype.hex, Md5.prototype.digest = function () {
        this.finalize();
        var r = this.h0, R = this.h1, y = this.h2, E = this.h3;
        return [r & 255, r >> 8 & 255, r >> 16 & 255, r >> 24 & 255, R & 255, R >> 8 & 255, R >> 16 & 255, R >> 24 & 255, y & 255, y >> 8 & 255, y >> 16 & 255, y >> 24 & 255, E & 255, E >> 8 & 255, E >> 16 & 255, E >> 24 & 255]
    }, Md5.prototype.array = Md5.prototype.digest, Md5.prototype.arrayBuffer = function () {
        this.finalize();
        var r = new ArrayBuffer(16), R = new Uint32Array(r);
        return R[0] = this.h0, R[1] = this.h1, R[2] = this.h2, R[3] = this.h3, r
    }, Md5.prototype.buffer = Md5.prototype.arrayBuffer, Md5.prototype.base64 = function () {
        for (var r, R, y, E = "", C = this.array(), x = 0; x < 15;) r = C[x++], R = C[x++], y = C[x++], E += BASE64_ENCODE_CHAR[r >>> 2] + BASE64_ENCODE_CHAR[(r << 4 | R >>> 4) & 63] + BASE64_ENCODE_CHAR[(R << 2 | y >>> 6) & 63] + BASE64_ENCODE_CHAR[y & 63];
        return r = C[x], E += BASE64_ENCODE_CHAR[r >>> 2] + BASE64_ENCODE_CHAR[r << 4 & 63] + "==", E
    };
    var exports = createMethod();
    COMMON_JS ? module.exports = exports : (root.md5 = exports, AMD && define(function () {
        return exports
    }))
})();
const md5$1 = md5, SFS2X = {
    SmartFox: function (r) {
        this._majVersion = 1, this._minVersion = 2, this._subVersion = 0, this._socketEngine = new SFS2X.SocketEngine, this._eventDispatcher = new SFS2X.EventDispatcher, this._lagMonitor = null, this._log = SFS2X.Logger, this._inited = this._isJoining = !1, this._currentZone = null, this._clientDetails = "JavaScript", this.version = this._majVersion + "." + this._minVersion + "." + this._subVersion, this.config = r, this.debug = !1, this.config != null && this.config.debug && (this.debug = !0), this.logger = this._log, this.lastJoinedRoom = this.mySelf = this.buddyManager = this.userManager = this.roomManager = this.sessionToken = null, this._controllers = {}, this._initialize()
    }
};
SFS2X.SmartFox.prototype.addEventListener = function (r, R, y) {
    this._eventDispatcher.addEventListener(r, R, y)
};
SFS2X.SmartFox.prototype.removeEventListener = function (r, R) {
    this._eventDispatcher.removeEventListener(r, R)
};
SFS2X.SmartFox.prototype.setClientDetails = function (r, R) {
    this.isConnected() ? this._log.warn("SetClientDetails must be called before the connection is started") : (this._clientDetails = r != null ? r.replace(":", " ") : "", this._clientDetails += ":", this._clientDetails += R != null ? R.replace(":", " ") : "")
};
SFS2X.SmartFox.prototype.connect = function (r, R, y) {
    if (this.isConnected()) this._log.warn("Already connected"); else if (this._socketEngine.isConnecting) this._log.warn("A connection attempt is already in progress"); else {
        var E = this.config != null && this.config.host != null ? this.config.host : null,
            C = this.config != null && this.config.port != null ? this.config.port : null,
            x = this.config != null && this.config.useSSL;
        r != null && (E = r), R != null && (C = R), y != null && (x = y), E == null || E.length == 0 ? this._log.error("Invalid connection host/address") : typeof C != "number" || 0 > C || 65535 < C ? this._log.error("Invalid TCP port") : (typeof x != "boolean" && (x = !1), this._socketEngine.connect(E, C, x))
    }
};
SFS2X.SmartFox.prototype.disconnect = function () {
    this.isConnected() ? (0 < this._socketEngine.reconnectionSeconds && this.send(new SFS2X.Requests.System.ManualDisconnectionRequest), setTimeout(function (r) {
        r._handleClientDisconnection(SFS2X.Utils.ClientDisconnectionReason.MANUAL)
    }, 100, this)) : this._log.info("You are not connected")
};
SFS2X.SmartFox.prototype.enableLagMonitor = function (r, R, y) {
    this.mySelf == null ? this._log.warn("Lag Monitoring requires that you are logged in a Zone; please retry after completing the login process") : (this._lagMonitor != null && this._lagMonitor.destroy(), r && (this._lagMonitor = new SFS2X.Utils.LagMonitor(this, R, y), this._lagMonitor.start()))
};
SFS2X.SmartFox.prototype.isConnected = function () {
    return this._socketEngine != null ? this._socketEngine.isConnected : !1
};
SFS2X.SmartFox.prototype.getMaxMessageSize = function () {
    return this._socketEngine != null ? this._socketEngine._maxMessageSize : 0
};
SFS2X.SmartFox.prototype.send = function (r) {
    if (this.isConnected()) if (r.validate == null || r.execute == null) this._log.error("An invalid request was passed: " + r), this._log.debug(`Object dump:
` + SFS2X.DebugHelper.getDump(r)); else {
        try {
            r.validate(this), r.execute(this)
        } catch (y) {
            if (y instanceof SFS2X.Exceptions.SFSValidationError && y.getMessage != null) {
                if (r = y.getMessage(), y.getErrors() != null) for (var r = r + ":", R = 0; R < y.getErrors().length; R++) 1 < y.getErrors().length && (r += " " + (R + 1) + ")"), r += " " + y.getErrors()[R];
                this._log.error("Request failed | " + r)
            } else throw y;
            return !1
        }
        return this.debug && (this._log.info(`OUTGOING DATA
` + SFS2X.DebugHelper.getDump(r.getMessage())), this._log.info("OUT > " + SFS2X.Requests.getRequestNameFromId(r._id))), this._socketEngine.send(r.getMessage()), !0
    } else this._log.error("You are not connected. Request cannot be sent: " + SFS2X.Requests.getRequestNameFromId(r._id))
};
SFS2X.SmartFox.prototype.getRoomById = function (r) {
    return this.roomManager.getRoomById(r)
};
SFS2X.SmartFox.prototype.getRoomByName = function (r) {
    return this.roomManager.getRoomByName(r)
};
SFS2X.SmartFox.prototype.getRoomList = function () {
    return this.roomManager.getRoomList()
};
SFS2X.SmartFox.prototype.getRoomListFromGroup = function (r) {
    return this.roomManager.getRoomListFromGroup(r)
};
SFS2X.SmartFox.prototype.getJoinedRooms = function () {
    return this.roomManager.getJoinedRooms()
};
SFS2X.SmartFox.prototype._initialize = function () {
    this._inited || (this._socketEngine = new SFS2X.SocketEngine(this), this._socketEngine.addEventListener(SFS2X.SocketEvent.CONNECT, this._onSocketConnect, this), this._socketEngine.addEventListener(SFS2X.SocketEvent.DISCONNECT, this._onSocketDisconnect, this), this._socketEngine.addEventListener(SFS2X.SocketEvent.DATA, this._onSocketData, this), this._socketEngine.addEventListener(SFS2X.SocketEvent.IOERROR, this._onSocketIOError, this), this._controllers[0] = new SFS2X.Controllers.SystemController(this), this._controllers[1] = new SFS2X.Controllers.ExtensionController(this), this._inited = !0, this._reset())
};
SFS2X.SmartFox.prototype._reset = function (r) {
    this.buddyManager != null && this.buddyManager._clearAll(), this.userManager = new SFS2X.Managers.GlobalUserManager(this), this.roomManager = new SFS2X.Managers.RoomManager(this), this.buddyManager = new SFS2X.Managers.BuddyManager(this), this._lagMonitor != null && this._lagMonitor.destroy(), this._isJoining = !1, this.mySelf = this.lastJoinedRoom = this._currentZone = null, r && (this.sessionToken = null)
};
SFS2X.SmartFox.prototype._dispatchEvent = function (r, R) {
    this._eventDispatcher.dispatchEvent(r, R)
};
SFS2X.SmartFox.prototype._onSocketConnect = function (r) {
    r.success ? (r = new SFS2X.Requests.System.HandshakeRequest(this.version, this._clientDetails, r.isReconnection ? this.sessionToken : null), this.send(r)) : this._dispatchEvent(SFS2X.SFSEvent.CONNECTION, {success: !1})
};
SFS2X.SmartFox.prototype._onSocketDisconnect = function (r) {
    this._dispatchEvent(SFS2X.SFSEvent.CONNECTION_LOST, {reason: r.reason}), this._reset(!0)
};
SFS2X.SmartFox.prototype._onSocketData = function (E) {
    this.debug && this._log.info(`INCOMING DATA
` + SFS2X.DebugHelper.getDump(E));
    var R = E[SFS2X.Controllers.CONTROLLER_ID], y = E[SFS2X.Controllers.ACTION_ID], E = E[SFS2X.Controllers.PARAM_ID];
    R == null ? this._log.error("Message rejected: Controller ID is missing") : R == null ? this._log.error("Message rejected: Action ID missing") : this._controllers[R].handleMessage(E, y)
};
SFS2X.SmartFox.prototype._onSocketIOError = function (r) {
    this._dispatchEvent(SFS2X.SFSEvent.SOCKET_ERROR, {message: r})
};
SFS2X.SmartFox.prototype._handleHandShake = function (r) {
    var R = r[SFS2X.Controllers.KEY_ERROR_CODE];
    R == null ? (this.sessionToken = r[SFS2X.Requests.System.HandshakeRequest.KEY_SESSION_TOKEN], this._socketEngine._maxMessageSize = r[SFS2X.Requests.System.HandshakeRequest.KEY_MAX_MESSAGE_SIZE], this._socketEngine._isReconnecting ? this._socketEngine._isReconnecting = !1 : this._dispatchEvent(SFS2X.SFSEvent.CONNECTION, {success: !0})) : (r = {
        success: !1,
        errorMessage: SFS2X.ErrorCodes.getErrorMessage(R, r[SFS2X.Controllers.KEY_ERROR_PARAMS]),
        errorCode: R
    }, this._dispatchEvent(SFS2X.SFSEvent.CONNECTION, r))
};
SFS2X.SmartFox.prototype._handleLogout = function () {
    this._reset(!1)
};
SFS2X.SmartFox.prototype._handleClientDisconnection = function (r) {
    this.isConnected() && this._socketEngine.disconnect(r)
};
let Class = function () {
};
(function () {
    var r = !1, R = /xyz/.test(function () {
        xyz
    }) ? /\b_super\b/ : /.*/;
    Class.extend = function y(E) {
        function C() {
            !r && this.init && this.init.apply(this, arguments)
        }

        var x = this.prototype;
        r = !0;
        var B = new this;
        r = !1;
        for (var N in E) B[N] = typeof E[N] == "function" && typeof x[N] == "function" && R.test(E[N]) ? function (L, O) {
            return function () {
                var D = this._super;
                this._super = x[L];
                var z = O.apply(this, arguments);
                return this._super = D, z
            }
        }(N, E[N]) : E[N];
        return C.prototype = B, C.prototype.constructor = C, C.extend = y, C
    }
})();
var hexcase = 0;

function hex_md5(r) {
    return rstr2hex(rstr_md5(str2rstr_utf8(r)))
}

function rstr_md5(r) {
    return binl2rstr(binl_md5(rstr2binl(r), 8 * r.length))
}

function rstr2hex(r) {
    try {
    } catch {
        hexcase = 0
    }
    for (var R = hexcase ? "0123456789ABCDEF" : "0123456789abcdef", y = "", E, C = 0; C < r.length; C++) E = r.charCodeAt(C), y += R.charAt(E >>> 4 & 15) + R.charAt(E & 15);
    return y
}

function str2rstr_utf8(r) {
    for (var R = "", y = -1, E, C; ++y < r.length;) E = r.charCodeAt(y), C = y + 1 < r.length ? r.charCodeAt(y + 1) : 0, 55296 <= E && 56319 >= E && 56320 <= C && 57343 >= C && (E = 65536 + ((E & 1023) << 10) + (C & 1023), y++), 127 >= E ? R += String.fromCharCode(E) : 2047 >= E ? R += String.fromCharCode(192 | E >>> 6 & 31, 128 | E & 63) : 65535 >= E ? R += String.fromCharCode(224 | E >>> 12 & 15, 128 | E >>> 6 & 63, 128 | E & 63) : 2097151 >= E && (R += String.fromCharCode(240 | E >>> 18 & 7, 128 | E >>> 12 & 63, 128 | E >>> 6 & 63, 128 | E & 63));
    return R
}

function rstr2binl(r) {
    for (var R = Array(r.length >> 2), y = 0; y < R.length; y++) R[y] = 0;
    for (y = 0; y < 8 * r.length; y += 8) R[y >> 5] |= (r.charCodeAt(y / 8) & 255) << y % 32;
    return R
}

function binl2rstr(r) {
    for (var R = "", y = 0; y < 32 * r.length; y += 8) R += String.fromCharCode(r[y >> 5] >>> y % 32 & 255);
    return R
}

function binl_md5(r, R) {
    r[R >> 5] |= 128 << R % 32, r[(R + 64 >>> 9 << 4) + 14] = R;
    for (var N = 1732584193, L = -271733879, O = -1732584194, D = 271733878, y = 0; y < r.length; y += 16) var E = N, C = L, x = O, B = D, N = md5_ff(N, L, O, D, r[y + 0], 7, -680876936), D = md5_ff(D, N, L, O, r[y + 1], 12, -389564586), O = md5_ff(O, D, N, L, r[y + 2], 17, 606105819), L = md5_ff(L, O, D, N, r[y + 3], 22, -1044525330), N = md5_ff(N, L, O, D, r[y + 4], 7, -176418897), D = md5_ff(D, N, L, O, r[y + 5], 12, 1200080426), O = md5_ff(O, D, N, L, r[y + 6], 17, -1473231341), L = md5_ff(L, O, D, N, r[y + 7], 22, -45705983), N = md5_ff(N, L, O, D, r[y + 8], 7, 1770035416), D = md5_ff(D, N, L, O, r[y + 9], 12, -1958414417), O = md5_ff(O, D, N, L, r[y + 10], 17, -42063), L = md5_ff(L, O, D, N, r[y + 11], 22, -1990404162), N = md5_ff(N, L, O, D, r[y + 12], 7, 1804603682), D = md5_ff(D, N, L, O, r[y + 13], 12, -40341101), O = md5_ff(O, D, N, L, r[y + 14], 17, -1502002290), L = md5_ff(L, O, D, N, r[y + 15], 22, 1236535329), N = md5_gg(N, L, O, D, r[y + 1], 5, -165796510), D = md5_gg(D, N, L, O, r[y + 6], 9, -1069501632), O = md5_gg(O, D, N, L, r[y + 11], 14, 643717713), L = md5_gg(L, O, D, N, r[y + 0], 20, -373897302), N = md5_gg(N, L, O, D, r[y + 5], 5, -701558691), D = md5_gg(D, N, L, O, r[y + 10], 9, 38016083), O = md5_gg(O, D, N, L, r[y + 15], 14, -660478335), L = md5_gg(L, O, D, N, r[y + 4], 20, -405537848), N = md5_gg(N, L, O, D, r[y + 9], 5, 568446438), D = md5_gg(D, N, L, O, r[y + 14], 9, -1019803690), O = md5_gg(O, D, N, L, r[y + 3], 14, -187363961), L = md5_gg(L, O, D, N, r[y + 8], 20, 1163531501), N = md5_gg(N, L, O, D, r[y + 13], 5, -1444681467), D = md5_gg(D, N, L, O, r[y + 2], 9, -51403784), O = md5_gg(O, D, N, L, r[y + 7], 14, 1735328473), L = md5_gg(L, O, D, N, r[y + 12], 20, -1926607734), N = md5_hh(N, L, O, D, r[y + 5], 4, -378558), D = md5_hh(D, N, L, O, r[y + 8], 11, -2022574463), O = md5_hh(O, D, N, L, r[y + 11], 16, 1839030562), L = md5_hh(L, O, D, N, r[y + 14], 23, -35309556), N = md5_hh(N, L, O, D, r[y + 1], 4, -1530992060), D = md5_hh(D, N, L, O, r[y + 4], 11, 1272893353), O = md5_hh(O, D, N, L, r[y + 7], 16, -155497632), L = md5_hh(L, O, D, N, r[y + 10], 23, -1094730640), N = md5_hh(N, L, O, D, r[y + 13], 4, 681279174), D = md5_hh(D, N, L, O, r[y + 0], 11, -358537222), O = md5_hh(O, D, N, L, r[y + 3], 16, -722521979), L = md5_hh(L, O, D, N, r[y + 6], 23, 76029189), N = md5_hh(N, L, O, D, r[y + 9], 4, -640364487), D = md5_hh(D, N, L, O, r[y + 12], 11, -421815835), O = md5_hh(O, D, N, L, r[y + 15], 16, 530742520), L = md5_hh(L, O, D, N, r[y + 2], 23, -995338651), N = md5_ii(N, L, O, D, r[y + 0], 6, -198630844), D = md5_ii(D, N, L, O, r[y + 7], 10, 1126891415), O = md5_ii(O, D, N, L, r[y + 14], 15, -1416354905), L = md5_ii(L, O, D, N, r[y + 5], 21, -57434055), N = md5_ii(N, L, O, D, r[y + 12], 6, 1700485571), D = md5_ii(D, N, L, O, r[y + 3], 10, -1894986606), O = md5_ii(O, D, N, L, r[y + 10], 15, -1051523), L = md5_ii(L, O, D, N, r[y + 1], 21, -2054922799), N = md5_ii(N, L, O, D, r[y + 8], 6, 1873313359), D = md5_ii(D, N, L, O, r[y + 15], 10, -30611744), O = md5_ii(O, D, N, L, r[y + 6], 15, -1560198380), L = md5_ii(L, O, D, N, r[y + 13], 21, 1309151649), N = md5_ii(N, L, O, D, r[y + 4], 6, -145523070), D = md5_ii(D, N, L, O, r[y + 11], 10, -1120210379), O = md5_ii(O, D, N, L, r[y + 2], 15, 718787259), L = md5_ii(L, O, D, N, r[y + 9], 21, -343485551), N = safe_add(N, E), L = safe_add(L, C), O = safe_add(O, x), D = safe_add(D, B);
    return [N, L, O, D]
}

function md5_cmn(r, R, y, E, C, x) {
    return safe_add(bit_rol(safe_add(safe_add(R, r), safe_add(E, x)), C), y)
}

function md5_ff(r, R, y, E, C, x, B) {
    return md5_cmn(R & y | ~R & E, r, R, C, x, B)
}

function md5_gg(r, R, y, E, C, x, B) {
    return md5_cmn(R & E | y & ~E, r, R, C, x, B)
}

function md5_hh(r, R, y, E, C, x, B) {
    return md5_cmn(R ^ y ^ E, r, R, C, x, B)
}

function md5_ii(r, R, y, E, C, x, B) {
    return md5_cmn(y ^ (R | ~E), r, R, C, x, B)
}

function safe_add(r, R) {
    var y = (r & 65535) + (R & 65535);
    return (r >> 16) + (R >> 16) + (y >> 16) << 16 | y & 65535
}

function bit_rol(r, R) {
    return r << R | r >>> 32 - R
}

SFS2X.Utils = {};
SFS2X.Utils.md5_crypt = function (r, R) {
    typeof VarType < "u" && (r = VarType.toStr(r), R = VarType.toStr(R));
    var y = chrsz;
    chrsz = 8, R.substr(0, 3) == "$1$" && (R = R.substr(3));
    var E = R.indexOf("$");
    (0 > E || 8 < E) && (E = 8);
    for (var R = R.substr(0, E), C = r + "$1$" + R, x = str_md5(r + R + r), E = r.length; 0 < E; E -= 16) C = 16 <= E ? C + x : C + x.substr(0, E);
    for (E = r.length; E != 0; E >>= 1) C = E & 1 ? C + String.fromCharCode(0) : C + r.charAt(0);
    for (var B = "$1$" + R + "$", x = str_md5(C), E = 0; 1e3 > E; E++) C = "", C = E & 1 ? C + r : C + x, E % 3 != 0 && (C += R), E % 7 != 0 && (C += r), C = E & 1 ? C + x : C + r, x = str_md5(C);
    for (x += x.charAt(5), E = 0; 5 > E; E++) C = x.charCodeAt(E) << 16 | x.charCodeAt(E + 6) << 8 | x.charCodeAt(E + 12), B += md5_to64(C, 4);
    return C = x.charCodeAt(11), B += md5_to64(C, 2), chrsz = y, B
};
SFS2X.Utils.ClientDisconnectionReason = {IDLE: "idle", KICK: "kick", BAN: "ban", MANUAL: "manual", UNKNOWN: "unknown"};
SFS2X.Utils.ClientDisconnectionReason.getReason = function (r) {
    switch (r) {
        case 0:
            return this.IDLE;
        case 1:
            return this.KICK;
        case 2:
            return this.BAN;
        case 3:
            return this.MANUAL;
        case 4:
            return this.UNKNOWN
    }
};
SFS2X.Utils.ArrayUtil = {};
SFS2X.Utils.ArrayUtil.objToArray = function (r) {
    var R = [], y;
    for (y in r) r.hasOwnProperty(y) && R.push(r[y]);
    return R
};
SFS2X.Utils.ArrayUtil.removeItem = function (r, R) {
    var y = r.indexOf(R);
    -1 < y && r.splice(y, 1)
};
SFS2X.Utils.HashTable = function (r) {
    this.length = 0, this.items = {};
    for (var R in r) r.hasOwnProperty(R) && (this.items[R] = r[R], this.length++)
};
SFS2X.Utils.HashTable.prototype.setItem = function (r, R) {
    var y = void 0;
    return this.hasItem(r) ? y = this.items[r] : this.length++, this.items[r] = R, y
};
SFS2X.Utils.HashTable.prototype.getItem = function (r) {
    return this.hasItem(r) ? this.items[r] : void 0
};
SFS2X.Utils.HashTable.prototype.hasItem = function (r) {
    return this.items.hasOwnProperty(r)
};
SFS2X.Utils.HashTable.prototype.removeItem = function (r) {
    if (this.hasItem(r)) return previous = this.items[r], this.length--, delete this.items[r], previous
};
SFS2X.Utils.HashTable.prototype.keys = function () {
    var r = [], R;
    for (R in this.items) this.hasItem(R) && r.push(R);
    return r
};
SFS2X.Utils.HashTable.prototype.values = function () {
    var r = [], R;
    for (R in this.items) this.hasItem(R) && r.push(this.items[R]);
    return r
};
SFS2X.Utils.HashTable.prototype.each = function (r) {
    for (var R in this.items) this.hasItem(R) && r(R, this.items[R])
};
SFS2X.Utils.HashTable.prototype.clear = function () {
    this.items = {}, this.length = 0
};
SFS2X.Utils.LagMonitor = function (r, R, y) {
    (R == null || 1 > R) && (R = 4), (y == null || 1 > y) && (y = 10), this._sfs = r, this._valueQueue = [], this._interval = R, this._queueSize = y, this._thread = null, this._lastReqTime = -1
};
SFS2X.Utils.LagMonitor.prototype.start = function () {
    !this.isRunning() && this._sfs != null && (this._thread = setInterval(this._threadRunner, 1e3 * this._interval, this))
};
SFS2X.Utils.LagMonitor.prototype.stop = function () {
    this.isRunning() && (clearInterval(this._thread), this._thread = null, this._valueQueue = [])
};
SFS2X.Utils.LagMonitor.prototype.destroy = function () {
    this.stop(), this._sfs = null
};
SFS2X.Utils.LagMonitor.prototype.isRunning = function () {
    return this._thread != null
};
SFS2X.Utils.LagMonitor.prototype.getLastPingTime = function () {
    return 0 < this._valueQueue.length ? this._valueQueue[this._valueQueue.length - 1] : 0
};
SFS2X.Utils.LagMonitor.prototype._threadRunner = function (r) {
    r._lastReqTime = new Date().getTime(), r._sfs.send(new SFS2X.Requests.System.PingPongRequest)
};
SFS2X.Utils.LagMonitor.prototype._onPingPong = function () {
    var r = new Date().getTime() - this._lastReqTime;
    return this._valueQueue.length >= this._queueSize && this._valueQueue.shift(), this._valueQueue.push(r), this._getAveragePingTime()
};
SFS2X.Utils.LagMonitor.prototype._getAveragePingTime = function () {
    if (this._valueQueue.length == 0) return 0;
    for (var r = 0, R = 0; R < this._valueQueue.length; R++) r += this._valueQueue[R];
    return r / this._valueQueue.length
};
SFS2X.Utils.BuddyOnlineState = {ONLINE: 0, OFFLINE: 1, LEFT_THE_SERVER: 2};
SFS2X.Controllers = {};
SFS2X.Controllers.CONTROLLER_ID = "c";
SFS2X.Controllers.ACTION_ID = "a";
SFS2X.Controllers.PARAM_ID = "p";
SFS2X.Controllers.KEY_ERROR_CODE = "ec";
SFS2X.Controllers.KEY_ERROR_PARAMS = "ep";
SFS2X.Controllers.ROOM_PARAM = "r";
SFS2X.Controllers.USER_PARAM = "u";
SFS2X.Controllers.USER_COUNT_PARAM = "uc";
SFS2X.Controllers.SPECT_COUNT_PARAM = "sc";
SFS2X.Controllers.SystemController = function (r) {
    this._sfs = r, this._id = 0, this._requestHandlers = {}, this._initRequestHandlers(), this._log = SFS2X.Logger
};
SFS2X.Controllers.SystemController.prototype.getId = function () {
    return this._id
};
SFS2X.Controllers.SystemController.prototype.handleMessage = function (r, R) {
    this._sfs.debug && this._log.info("IN < " + this._getEvtName(R));
    var y = this._requestHandlers[R];
    y != null ? this[y](r) : this._log.warn("Unknown message id: " + r.id)
};
SFS2X.Controllers.SystemController.prototype._initRequestHandlers = function () {
    this._requestHandlers[SFS2X.Requests.Handshake] = "_fnHandshake", this._requestHandlers[SFS2X.Requests.Login] = "_fnLogin", this._requestHandlers[SFS2X.Requests.Logout] = "_fnLogout", this._requestHandlers[SFS2X.Requests.JoinRoom] = "_fnJoinRoom", this._requestHandlers[SFS2X.Requests.CreateRoom] = "_fnCreateRoom", this._requestHandlers[SFS2X.Requests.ChangeRoomName] = "_fnChangeRoomName", this._requestHandlers[SFS2X.Requests.ChangeRoomPassword] = "_fnChangeRoomPassword", this._requestHandlers[SFS2X.Requests.ChangeRoomCapacity] = "_fnChangeRoomCapacity", this._requestHandlers[SFS2X.Requests.GenericMessage] = "_fnGenericMessage", this._requestHandlers[SFS2X.Requests.SetRoomVariables] = "_fnSetRoomVariables", this._requestHandlers[SFS2X.Requests.SetUserVariables] = "_fnSetUserVariables", this._requestHandlers[SFS2X.Requests.SubscribeRoomGroup] = "_fnSubscribeRoomGroup", this._requestHandlers[SFS2X.Requests.UnsubscribeRoomGroup] = "_fnUnsubscribeRoomGroup", this._requestHandlers[SFS2X.Requests.SpectatorToPlayer] = "_fnSpectatorToPlayer", this._requestHandlers[SFS2X.Requests.PlayerToSpectator] = "_fnPlayerToSpectator", this._requestHandlers[SFS2X.Requests.InitBuddyList] = "_fnInitBuddyList", this._requestHandlers[SFS2X.Requests.AddBuddy] = "_fnAddBuddy", this._requestHandlers[SFS2X.Requests.RemoveBuddy] = "_fnRemoveBuddy", this._requestHandlers[SFS2X.Requests.BlockBuddy] = "_fnBlockBuddy", this._requestHandlers[SFS2X.Requests.GoOnline] = "_fnGoOnline", this._requestHandlers[SFS2X.Requests.SetBuddyVariables] = "_fnSetBuddyVariables", this._requestHandlers[SFS2X.Requests.FindRooms] = "_fnFindRooms", this._requestHandlers[SFS2X.Requests.FindUsers] = "_fnFindUsers", this._requestHandlers[SFS2X.Requests.InviteUsers] = "_fnInviteUsers", this._requestHandlers[SFS2X.Requests.InvitationReply] = "_fnInvitationReply", this._requestHandlers[SFS2X.Requests.QuickJoinGame] = "_fnQuickJoinGame", this._requestHandlers[SFS2X.Requests.PingPong] = "_fnPingPong", this._requestHandlers[SFS2X.Requests.SetUserPosition] = "_fnSetUserPosition", this._requestHandlers[1e3] = "_fnUserEnterRoom", this._requestHandlers[1001] = "_fnUserCountChange", this._requestHandlers[1002] = "_fnUserLost", this._requestHandlers[1003] = "_fnRoomLost", this._requestHandlers[1004] = "_fnUserExitRoom", this._requestHandlers[1005] = "_fnClientDisconnection", this._requestHandlers[1007] = "_fnSetMMOItemVariables"
};
SFS2X.Controllers.SystemController.prototype._getEvtName = function (r) {
    return this._requestHandlers[r].substr(3)
};
SFS2X.Controllers.SystemController.prototype._fnHandshake = function (r) {
    this._sfs._handleHandShake(r)
};
SFS2X.Controllers.SystemController.prototype._fnLogin = function (r) {
    if (r[SFS2X.Controllers.KEY_ERROR_CODE] == null) {
        this._populateRoomList(r[SFS2X.Requests.System.LoginRequest.KEY_ROOMLIST]), this._sfs.mySelf = new SFS2X.Entities.SFSUser(r[SFS2X.Requests.System.LoginRequest.KEY_ID], r[SFS2X.Requests.System.LoginRequest.KEY_USER_NAME], !0), this._sfs.mySelf._setUserManager(this._sfs.userManager), this._sfs.mySelf.privilegeId = r[SFS2X.Requests.System.LoginRequest.KEY_PRIVILEGE_ID], this._sfs.userManager._addUser(this._sfs.mySelf), this._sfs._socketEngine.reconnectionSeconds = r[SFS2X.Requests.System.LoginRequest.KEY_RECONNECTION_SECONDS];
        var R = {};
        R.zone = r[SFS2X.Requests.System.LoginRequest.KEY_ZONE_NAME], R.user = this._sfs.mySelf, R.data = r[SFS2X.Requests.System.LoginRequest.KEY_PARAMS], this._sfs._dispatchEvent(SFS2X.SFSEvent.LOGIN, R)
    } else R = r[SFS2X.Controllers.KEY_ERROR_CODE], r = SFS2X.ErrorCodes.getErrorMessage(R, r[SFS2X.Controllers.KEY_ERROR_PARAMS]), this._sfs._dispatchEvent(SFS2X.SFSEvent.LOGIN_ERROR, {
        errorMessage: r,
        errorCode: R
    })
};
SFS2X.Controllers.SystemController.prototype._fnLogout = function (r) {
    this._sfs._handleLogout();
    var R = {};
    R.zone = r[SFS2X.Requests.System.LogoutRequest.KEY_ZONE_NAME], this._sfs._dispatchEvent(SFS2X.SFSEvent.LOGOUT, R)
};
SFS2X.Controllers.SystemController.prototype._fnJoinRoom = function (r) {
    var R = this._sfs.roomManager, y = {};
    this._sfs._isJoining = !1;
    var E = r[SFS2X.Controllers.KEY_ERROR_CODE];
    if (E == null) {
        for (E = r[SFS2X.Requests.System.JoinRoomRequest.KEY_USER_LIST], r = SFS2X.Entities.SFSRoom.fromArray(r[SFS2X.Requests.System.JoinRoomRequest.KEY_ROOM]), r._setRoomManager(R), r = R._replaceRoom(r, R.containsGroup(r.groupId)), R = 0; R < E.length; R++) {
            var C = E[R], x = this._getOrCreateUser(C, !0, r);
            x._setPlayerId(C[3], r), r._addUser(x)
        }
        r.isJoined = !0, this._sfs.lastJoinedRoom = r, y.room = r, this._sfs._dispatchEvent(SFS2X.SFSEvent.ROOM_JOIN, y)
    } else r = SFS2X.ErrorCodes.getErrorMessage(E, r[SFS2X.Controllers.KEY_ERROR_PARAMS]), y.errorMessage = r, y.errorCode = E, this._sfs._dispatchEvent(SFS2X.SFSEvent.ROOM_JOIN_ERROR, y)
};
SFS2X.Controllers.SystemController.prototype._fnCreateRoom = function (r) {
    var R = {};
    if (r[SFS2X.Controllers.KEY_ERROR_CODE] == null) {
        var y = this._sfs.roomManager,
            r = SFS2X.Entities.SFSRoom.fromArray(r[SFS2X.Requests.System.CreateRoomRequest.KEY_ROOM]);
        r._setRoomManager = y, y._addRoom(r), R.room = r, this._sfs._dispatchEvent(SFS2X.SFSEvent.ROOM_ADD, R)
    } else y = r[SFS2X.Controllers.KEY_ERROR_CODE], r = SFS2X.ErrorCodes.getErrorMessage(y, r[SFS2X.Controllers.KEY_ERROR_PARAMS]), R.errorMessage = r, R.errorCode = y, this._sfs._dispatchEvent(SFS2X.SFSEvent.ROOM_CREATION_ERROR, R)
};
SFS2X.Controllers.SystemController.prototype._fnChangeRoomName = function (r) {
    var R = {};
    if (r[SFS2X.Controllers.KEY_ERROR_CODE] == null) {
        var y = this._sfs.roomManager.getRoomById(r[SFS2X.Requests.System.ChangeRoomNameRequest.KEY_ROOM]);
        y != null ? (R.oldName = y.name, this._sfs.roomManager._changeRoomName(y, r[SFS2X.Requests.System.ChangeRoomNameRequest.KEY_NAME]), R.room = y, this._sfs._dispatchEvent(SFS2X.SFSEvent.ROOM_NAME_CHANGE, R)) : this._log.warn("RoomNameChange event, unknown Room id: " + rId)
    } else y = r[SFS2X.Controllers.KEY_ERROR_CODE], r = SFS2X.ErrorCodes.getErrorMessage(y, r[SFS2X.Controllers.KEY_ERROR_PARAMS]), R.errorMessage = r, R.errorCode = y, this._sfs._dispatchEvent(SFS2X.SFSEvent.ROOM_NAME_CHANGE_ERROR, R)
};
SFS2X.Controllers.SystemController.prototype._fnChangeRoomPassword = function (r) {
    var R = {};
    if (r[SFS2X.Controllers.KEY_ERROR_CODE] == null) {
        var y = this._sfs.roomManager.getRoomById(r[SFS2X.Requests.System.ChangeRoomNameRequest.KEY_ROOM]);
        y != null ? (this._sfs.roomManager._changeRoomPasswordState(y, r[SFS2X.Requests.System.ChangeRoomPasswordStateRequest.KEY_PASS]), R.room = y, this._sfs._dispatchEvent(SFS2X.SFSEvent.ROOM_PASSWORD_STATE_CHANGE, R)) : this._log.warn("RoomPasswordChange event, unknown Room id: " + rId)
    } else y = r[SFS2X.Controllers.KEY_ERROR_CODE], r = SFS2X.ErrorCodes.getErrorMessage(y, r[SFS2X.Controllers.KEY_ERROR_PARAMS]), R.errorMessage = r, R.errorCode = y, this._sfs._dispatchEvent(SFS2X.SFSEvent.ROOM_PASSWORD_STATE_CHANGE_ERROR, R)
};
SFS2X.Controllers.SystemController.prototype._fnChangeRoomCapacity = function (r) {
    var R = {};
    if (r[SFS2X.Controllers.KEY_ERROR_CODE] == null) {
        var y = this._sfs.roomManager.getRoomById(r[SFS2X.Requests.System.ChangeRoomNameRequest.KEY_ROOM]);
        y != null ? (this._sfs.roomManager._changeRoomCapacity(y, r[SFS2X.Requests.System.ChangeRoomCapacityRequest.KEY_USER_SIZE], r[SFS2X.Requests.System.ChangeRoomCapacityRequest.KEY_SPEC_SIZE]), R.room = y, this._sfs._dispatchEvent(SFS2X.SFSEvent.ROOM_CAPACITY_CHANGE, R)) : this._log.warn("RoomPasswordChange event, unknown Room id: " + rId)
    } else y = r[SFS2X.Controllers.KEY_ERROR_CODE], r = SFS2X.ErrorCodes.getErrorMessage(y, r[SFS2X.Controllers.KEY_ERROR_PARAMS]), R.errorMessage = r, R.errorCode = y, this._sfs._dispatchEvent(SFS2X.SFSEvent.ROOM_CAPACITY_CHANGE_ERROR, R)
};
SFS2X.Controllers.SystemController.prototype._fnGenericMessage = function (r) {
    switch (r[SFS2X.Requests.System.GenericMessageRequest.KEY_MESSAGE_TYPE]) {
        case SFS2X.Requests.GenericMessageType.PUBLIC_MSG:
            this._handlePublicMessage(r);
            break;
        case SFS2X.Requests.GenericMessageType.PRIVATE_MSG:
            this._handlePrivateMessage(r);
            break;
        case SFS2X.Requests.GenericMessageType.BUDDY_MSG:
            this._handleBuddyMessage(r);
            break;
        case SFS2X.Requests.GenericMessageType.MODERATOR_MSG:
            this._handleModMessage(r);
            break;
        case SFS2X.Requests.GenericMessageType.ADMING_MSG:
            this._handleAdminMessage(r);
            break;
        case SFS2X.Requests.GenericMessageType.OBJECT_MSG:
            this._handleObjectMessage(r)
    }
};
SFS2X.Controllers.SystemController.prototype._handlePublicMessage = function (r) {
    var R = {}, y = r[SFS2X.Requests.System.GenericMessageRequest.KEY_ROOM_ID],
        E = this._sfs.roomManager.getRoomById(y);
    E != null ? (R.room = E, R.sender = this._sfs.userManager.getUserById(r[SFS2X.Requests.System.GenericMessageRequest.KEY_USER_ID]), R.message = r[SFS2X.Requests.System.GenericMessageRequest.KEY_MESSAGE], R.data = r[SFS2X.Requests.System.GenericMessageRequest.KEY_XTRA_PARAMS], this._sfs._dispatchEvent(SFS2X.SFSEvent.PUBLIC_MESSAGE, R)) : this._log.warn("Unexpected, public message target Room doesn't exist; Room id: " + y)
};
SFS2X.Controllers.SystemController.prototype._handlePrivateMessage = function (r) {
    var R = {}, y = this._sfs.userManager.getUserById(r[SFS2X.Requests.System.GenericMessageRequest.KEY_USER_ID]);
    if (y == null) {
        if (r[SFS2X.Requests.System.GenericMessageRequest.KEY_SENDER_DATA] == null) {
            this._log.warn("Unexpected, private message has no sender details");
            return
        }
        y = SFS2X.Entities.SFSUser.fromArray(r[SFS2X.Requests.System.GenericMessageRequest.KEY_SENDER_DATA])
    }
    R.sender = y, R.message = r[SFS2X.Requests.System.GenericMessageRequest.KEY_MESSAGE], R.data = r[SFS2X.Requests.System.GenericMessageRequest.KEY_XTRA_PARAMS], this._sfs._dispatchEvent(SFS2X.SFSEvent.PRIVATE_MESSAGE, R)
};
SFS2X.Controllers.SystemController.prototype._handleBuddyMessage = function (r) {
    var R = {}, y = r[SFS2X.Requests.System.GenericMessageRequest.KEY_USER_ID],
        E = this._sfs.buddyManager.getBuddyById(y);
    R.isItMe = this._sfs.mySelf.id == y, R.buddy = E, R.message = r[SFS2X.Requests.System.GenericMessageRequest.KEY_MESSAGE], R.data = r[SFS2X.Requests.System.GenericMessageRequest.KEY_XTRA_PARAMS], this._sfs._dispatchEvent(SFS2X.SFSBuddyEvent.BUDDY_MESSAGE, R)
};
SFS2X.Controllers.SystemController.prototype._handleModMessage = function (r) {
    var R = {};
    R.sender = SFS2X.Entities.SFSUser.fromArray(r[SFS2X.Requests.System.GenericMessageRequest.KEY_SENDER_DATA]), R.message = r[SFS2X.Requests.System.GenericMessageRequest.KEY_MESSAGE], R.data = r[SFS2X.Requests.System.GenericMessageRequest.KEY_XTRA_PARAMS], this._sfs._dispatchEvent(SFS2X.SFSEvent.MODERATOR_MESSAGE, R)
};
SFS2X.Controllers.SystemController.prototype._handleAdminMessage = function (r) {
    var R = {};
    R.sender = SFS2X.Entities.SFSUser.fromArray(r[SFS2X.Requests.System.GenericMessageRequest.KEY_SENDER_DATA]), R.message = r[SFS2X.Requests.System.GenericMessageRequest.KEY_MESSAGE], R.data = r[SFS2X.Requests.System.GenericMessageRequest.KEY_XTRA_PARAMS], this._sfs._dispatchEvent(SFS2X.SFSEvent.ADMIN_MESSAGE, R)
};
SFS2X.Controllers.SystemController.prototype._handleObjectMessage = function (r) {
    var R = {};
    R.sender = this._sfs.userManager.getUserById(r[SFS2X.Requests.System.GenericMessageRequest.KEY_USER_ID]), R.message = r[SFS2X.Requests.System.GenericMessageRequest.KEY_XTRA_PARAMS], this._sfs._dispatchEvent(SFS2X.SFSEvent.OBJECT_MESSAGE, R)
};
SFS2X.Controllers.SystemController.prototype._fnSetRoomVariables = function (E) {
    var R = E[SFS2X.Requests.System.SetRoomVariablesRequest.KEY_VAR_ROOM],
        y = E[SFS2X.Requests.System.SetRoomVariablesRequest.KEY_VAR_LIST], E = this._sfs.roomManager.getRoomById(R),
        C = [];
    if (E != null) {
        for (R = 0; R < y.length; R++) {
            var x = SFS2X.Entities.Variables.SFSRoomVariable.fromArray(y[R]);
            E._setVariable(x), C.push(x.name)
        }
        y = {}, y.changedVars = C, y.room = E, this._sfs._dispatchEvent(SFS2X.SFSEvent.ROOM_VARIABLES_UPDATE, y)
    } else this._log.warn("RoomVariablesUpdate event, unknown Room id: " + R)
};
SFS2X.Controllers.SystemController.prototype._fnSetUserVariables = function (E) {
    var R = E[SFS2X.Requests.System.SetUserVariablesRequest.KEY_USER],
        y = E[SFS2X.Requests.System.SetUserVariablesRequest.KEY_VAR_LIST], E = this._sfs.userManager.getUserById(R),
        C = [];
    if (E != null) {
        for (R = 0; R < y.length; R++) {
            var x = SFS2X.Entities.Variables.SFSUserVariable.fromArray(y[R]);
            E._setVariable(x), C.push(x.name)
        }
        y = {}, y.changedVars = C, y.user = E, this._sfs._dispatchEvent(SFS2X.SFSEvent.USER_VARIABLES_UPDATE, y)
    } else this._log.warn("UserVariablesUpdate event, unknown User id: " + R)
};
SFS2X.Controllers.SystemController.prototype._fnSubscribeRoomGroup = function (r) {
    var R = {};
    if (r[SFS2X.Controllers.KEY_ERROR_CODE] == null) {
        var y = r[SFS2X.Requests.System.SubscribeRoomGroupRequest.KEY_GROUP_ID],
            r = r[SFS2X.Requests.System.SubscribeRoomGroupRequest.KEY_ROOM_LIST];
        this._sfs.roomManager.containsGroup(y) && this._log.warn("Subscribe Group error: Group '" + y + "' already subscribed"), this._populateRoomList(r), R.groupId = y, R.newRooms = this._sfs.roomManager.getRoomListFromGroup(y), this._sfs._dispatchEvent(SFS2X.SFSEvent.ROOM_GROUP_SUBSCRIBE, R)
    } else y = r[SFS2X.Controllers.KEY_ERROR_CODE], r = SFS2X.ErrorCodes.getErrorMessage(y, r[SFS2X.Controllers.KEY_ERROR_PARAMS]), R.errorMessage = r, R.errorCode = y, this._sfs._dispatchEvent(SFS2X.SFSEvent.ROOM_GROUP_SUBSCRIBE_ERROR, R)
};
SFS2X.Controllers.SystemController.prototype._fnUnsubscribeRoomGroup = function (r) {
    var R = {};
    if (r[SFS2X.Controllers.KEY_ERROR_CODE] == null) {
        var y = r[SFS2X.Requests.System.UnsubscribeRoomGroupRequest.KEY_GROUP_ID];
        this._sfs.roomManager.containsGroup(y) || this._log.warn("Unsubscribe Group error: Group '" + y + "' not found (maybe never subscribed, or the Room Manager doesn't contain Rooms belonging to that Group)"), this._sfs.roomManager._removeGroup(y), R.groupId = y, this._sfs._dispatchEvent(SFS2X.SFSEvent.ROOM_GROUP_UNSUBSCRIBE, R)
    } else y = r[SFS2X.Controllers.KEY_ERROR_CODE], r = SFS2X.ErrorCodes.getErrorMessage(y, r[SFS2X.Controllers.KEY_ERROR_PARAMS]), R.errorMessage = r, R.errorCode = y, this._sfs._dispatchEvent(SFS2X.SFSEvent.ROOM_GROUP_UNSUBSCRIBE_ERROR, R)
};
SFS2X.Controllers.SystemController.prototype._fnSpectatorToPlayer = function (r) {
    var R = {};
    if (r[SFS2X.Controllers.KEY_ERROR_CODE] == null) {
        var y = r[SFS2X.Requests.System.SpectatorToPlayerRequest.KEY_ROOM_ID],
            E = r[SFS2X.Requests.System.SpectatorToPlayerRequest.KEY_USER_ID],
            r = r[SFS2X.Requests.System.SpectatorToPlayerRequest.KEY_PLAYER_ID],
            C = this._sfs.userManager.getUserById(E), x = this._sfs.roomManager.getRoomById(y);
        x != null ? C != null ? C.isJoinedInRoom(x) ? (C._setPlayerId(r, x), R.room = x, R.user = C, R.playerId = r, this._sfs._dispatchEvent(SFS2X.SFSEvent.SPECTATOR_TO_PLAYER, R)) : this._log.warn("SpectatorToPlayer event, user " + C + " not joined in Room ", x) : this._log.warn("SpectatorToPlayer event, unknown User id: " + E) : this._log.warn("SpectatorToPlayer event, unknown Room id: " + y)
    } else y = r[SFS2X.Controllers.KEY_ERROR_CODE], E = SFS2X.ErrorCodes.getErrorMessage(y, r[SFS2X.Controllers.KEY_ERROR_PARAMS]), R.errorMessage = E, R.errorCode = y, this._sfs._dispatchEvent(SFS2X.SFSEvent.SPECTATOR_TO_PLAYER_ERROR, R)
};
SFS2X.Controllers.SystemController.prototype._fnPlayerToSpectator = function (r) {
    var R = {};
    if (r[SFS2X.Controllers.KEY_ERROR_CODE] == null) {
        var y = r[SFS2X.Requests.System.PlayerToSpectatorRequest.KEY_ROOM_ID],
            r = r[SFS2X.Requests.System.PlayerToSpectatorRequest.KEY_USER_ID], E = this._sfs.userManager.getUserById(r),
            C = this._sfs.roomManager.getRoomById(y);
        C != null ? E != null ? E.isJoinedInRoom(C) ? (E._setPlayerId(-1, C), R.room = C, R.user = E, this._sfs._dispatchEvent(SFS2X.SFSEvent.PLAYER_TO_SPECTATOR, R)) : this._log.warn("PlayerToSpectator event, user " + E + " not joined in Room ", C) : this._log.warn("PlayerToSpectator event, unknown User id: " + r) : this._log.warn("PlayerToSpectator event, unknown Room id: " + y)
    } else y = r[SFS2X.Controllers.KEY_ERROR_CODE], r = SFS2X.ErrorCodes.getErrorMessage(y, r[SFS2X.Controllers.KEY_ERROR_PARAMS]), R.errorMessage = r, R.errorCode = y, this._sfs._dispatchEvent(SFS2X.SFSEvent.PLAYER_TO_SPECTATOR_ERROR, R)
};
SFS2X.Controllers.SystemController.prototype._fnFindRooms = function (r) {
    for (var R = {}, r = r[SFS2X.Requests.System.FindRoomsRequest.KEY_FILTERED_ROOMS], y = [], E = 0; E < r.length; E++) {
        var C = SFS2X.Entities.SFSRoom.fromArray(r[E]), x = this._sfs.roomManager.getRoomById(C.id);
        x != null && (C.isJoined = x.isJoined), y.push(C)
    }
    R.rooms = y, this._sfs._dispatchEvent(SFS2X.SFSEvent.ROOM_FIND_RESULT, R)
};
SFS2X.Controllers.SystemController.prototype._fnFindUsers = function (r) {
    for (var R = {}, r = r[SFS2X.Requests.System.FindUsersRequest.KEY_FILTERED_USERS], y = [], E = this._sfs.mySelf, C = 0; C < r.length; C++) {
        var x = SFS2X.Entities.SFSUser.fromArray(r[C]);
        x.id == E.id && (x = E), y.push(x)
    }
    R.users = y, this._sfs._dispatchEvent(SFS2X.SFSEvent.USER_FIND_RESULT, R)
};
SFS2X.Controllers.SystemController.prototype._fnInviteUsers = function (C) {
    var R = {}, y = null,
        y = C[SFS2X.Requests.Game.InviteUsersRequest.KEY_USER_ID] != null ? this._sfs.userManager.getUserById(C[SFS2X.Requests.Game.InviteUsersRequest.KEY_USER_ID]) : SFS2X.Entities.SFSUser.fromArray(C[SFS2X.Requests.Game.InviteUsersRequest.KEY_USER]),
        E = C[SFS2X.Requests.Game.InviteUsersRequest.KEY_INVITATION_ID],
        C = new SFS2X.Entities.Invitation.SFSInvitation(y, this._sfs.mySelf, C[SFS2X.Requests.Game.InviteUsersRequest.KEY_TIME], C[SFS2X.Requests.Game.InviteUsersRequest.KEY_PARAMS]);
    C.id = E, R.invitation = C, this._sfs._dispatchEvent(SFS2X.SFSEvent.INVITATION, R)
};
SFS2X.Controllers.SystemController.prototype._fnInvitationReply = function (r) {
    var R = {};
    if (r[SFS2X.Controllers.KEY_ERROR_CODE] == null) {
        var y = null,
            y = r[SFS2X.Requests.Game.InviteUsersRequest.KEY_USER_ID] != null ? this._sfs.userManager.getUserById(r[SFS2X.Requests.Game.InviteUsersRequest.KEY_USER_ID]) : SFS2X.Entities.SFSUser.fromArray(r[SFS2X.Requests.Game.InviteUsersRequest.KEY_USER]),
            E = r[SFS2X.Requests.Game.InviteUsersRequest.KEY_REPLY_ID],
            r = r[SFS2X.Requests.Game.InviteUsersRequest.KEY_PARAMS];
        R.invitee = y, R.reply = E, R.data = r, this._sfs._dispatchEvent(SFS2X.SFSEvent.INVITATION_REPLY, R)
    } else y = r[SFS2X.Controllers.KEY_ERROR_CODE], r = SFS2X.ErrorCodes.getErrorMessage(y, r[SFS2X.Controllers.KEY_ERROR_PARAMS]), R.errorMessage = r, R.errorCode = y, this._sfs._dispatchEvent(SFS2X.SFSEvent.INVITATION_REPLY_ERROR, R)
};
SFS2X.Controllers.SystemController.prototype._fnQuickJoinGame = function (r) {
    if (r[SFS2X.Controllers.KEY_ERROR_CODE] != null) {
        var R = r[SFS2X.Controllers.KEY_ERROR_CODE],
            r = SFS2X.ErrorCodes.getErrorMessage(R, r[SFS2X.Controllers.KEY_ERROR_PARAMS]), y = {};
        y.errorMessage = r, y.errorCode = R, this._sfs._dispatchEvent(SFS2X.SFSEvent.ROOM_JOIN_ERROR, y)
    }
};
SFS2X.Controllers.SystemController.prototype._fnPingPong = function () {
    var r = this._sfs._lagMonitor._onPingPong(), R = {};
    R.lagValue = r, this._sfs._dispatchEvent(SFS2X.SFSEvent.PING_PONG, R)
};
SFS2X.Controllers.SystemController.prototype._fnSetUserPosition = function (B) {
    var R = {}, y = this._sfs.roomManager.getRoomById(B[SFS2X.Requests.MMO.SetUserPositionRequest.KEY_ROOM]),
        E = B[SFS2X.Requests.MMO.SetUserPositionRequest.KEY_MINUS_USER_LIST],
        C = B[SFS2X.Requests.MMO.SetUserPositionRequest.KEY_PLUS_USER_LIST],
        x = B[SFS2X.Requests.MMO.SetUserPositionRequest.KEY_MINUS_ITEM_LIST],
        B = B[SFS2X.Requests.MMO.SetUserPositionRequest.KEY_PLUS_ITEM_LIST], N = [], L = [], O = [], D = [], z = 0;
    if (E != null) for (z = 0; z < E.length; z++) {
        var F = y.getUserById(E[z]);
        F != null && (y._removeUser(F), L.push(F))
    }
    if (C != null) for (z = 0; z < C.length; z++) F = C[z], E = this._getOrCreateUser(F, !0, y), N.push(E), y._addUser(E), F = F[5], F != null && (E.aoiEntryPoint = SFS2X.Entities.Data.Vec3D.fromArray(F));
    if (x != null) for (z = 0; z < x.length; z++) C = y.getMMOItem(x[z]), C != null && (y._removeItem(C), D.push(C));
    if (B != null) for (z = 0; z < B.length; z++) C = B[z], x = SFS2X.Entities.MMOItem.fromArray(C), O.push(x), y._addMMOItem(x), C = C[2], C != null && (x.aoiEntryPoint = SFS2X.Entities.Data.Vec3D.fromArray(C));
    R.addedItems = O, R.removedItems = D, R.removedUsers = L, R.addedUsers = N, R.room = y, this._sfs._dispatchEvent(SFS2X.SFSEvent.PROXIMITY_LIST_UPDATE, R)
};
SFS2X.Controllers.SystemController.prototype._fnSetMMOItemVariables = function (C) {
    var R = {}, y = this._sfs.roomManager.getRoomById(C[SFS2X.Requests.MMO.SetMMOItemVariables.KEY_ROOM_ID]),
        E = C[SFS2X.Requests.MMO.SetMMOItemVariables.KEY_ITEM_ID],
        C = C[SFS2X.Requests.MMO.SetMMOItemVariables.KEY_VAR_LIST], x = [];
    if (y != null && (E = y.getMMOItem(E), E != null)) {
        for (var B = 0; B < C.length; B++) {
            var N = SFS2X.Entities.Variables.MMOItemVariable.fromArray(C[B]);
            E._setVariable(N), x.push(N.name)
        }
        R.changedVars = x, R.mmoItem = E, R.room = y, this._sfs._dispatchEvent(SFS2X.SFSEvent.MMOITEM_VARIABLES_UPDATE, R)
    }
};
SFS2X.Controllers.SystemController.prototype._fnUserEnterRoom = function (r) {
    var R = this._sfs.roomManager.getRoomById(r[SFS2X.Controllers.ROOM_PARAM]);
    if (R != null) {
        r = this._getOrCreateUser(r[SFS2X.Controllers.USER_PARAM], !0, R), R._addUser(r);
        var y = {};
        y.user = r, y.room = R, this._sfs._dispatchEvent(SFS2X.SFSEvent.USER_ENTER_ROOM, y)
    }
};
SFS2X.Controllers.SystemController.prototype._fnUserCountChange = function (r) {
    var R = this._sfs.roomManager.getRoomById(r[SFS2X.Controllers.ROOM_PARAM]);
    if (R != null) {
        var y = r[SFS2X.Controllers.USER_COUNT_PARAM], E = 0;
        r.sc != null && (E = r[SFS2X.Controllers.SPECT_COUNT_PARAM]), R._userCount = y, R._specCount = E, r = {}, r.room = R, r.uCount = y, r.sCount = E, this._sfs._dispatchEvent(SFS2X.SFSEvent.USER_COUNT_CHANGE, r)
    }
};
SFS2X.Controllers.SystemController.prototype._fnUserLost = function (r) {
    if (r = this._sfs.userManager.getUserById(r[SFS2X.Controllers.USER_PARAM]), r != null) {
        var R = this._sfs.roomManager.getUserRooms(r);
        this._sfs.roomManager._removeUser(r), this._sfs.userManager._removeUser(r);
        for (var y = 0; y < R.length; y++) {
            var E = {};
            E.user = r, E.room = R[y], this._sfs._dispatchEvent(SFS2X.SFSEvent.USER_EXIT_ROOM, E)
        }
    }
};
SFS2X.Controllers.SystemController.prototype._fnRoomLost = function (R) {
    var R = this._sfs.roomManager.getRoomById(R[SFS2X.Controllers.ROOM_PARAM]), y = this._sfs.userManager;
    if (R != null) {
        this._sfs.roomManager._removeRoom(R);
        for (var E = R.getUserList(), C = 0; C < E.length; C++) y._removeUser(E[C]);
        y = {}, y.room = R, this._sfs._dispatchEvent(SFS2X.SFSEvent.ROOM_REMOVE, y)
    }
};
SFS2X.Controllers.SystemController.prototype._fnUserExitRoom = function (y) {
    var R = this._sfs.roomManager.getRoomById(y[SFS2X.Controllers.ROOM_PARAM]),
        y = this._sfs.userManager.getUserById(y[SFS2X.Controllers.USER_PARAM]);
    if (R != null && y != null) {
        R._removeUser(y), this._sfs.userManager._removeUser(y), y.isItMe && R.isJoined && (R.isJoined = !1, this._sfs.roomManager.getJoinedRooms().length == 0 && (this._sfs.lastJoinedRoom = null), R._isManaged || this._sfs.roomManager._removeRoom(R));
        var E = {};
        E.user = y, E.room = R, this._sfs._dispatchEvent(SFS2X.SFSEvent.USER_EXIT_ROOM, E)
    } else this._log.debug("Failed to handle UserExit event. Room: " + R + ", User: " + y)
};
SFS2X.Controllers.SystemController.prototype._fnClientDisconnection = function (r) {
    this._sfs._handleClientDisconnection(SFS2X.Utils.ClientDisconnectionReason.getReason(r.dr))
};
SFS2X.Controllers.SystemController.prototype._fnInitBuddyList = function (r) {
    var R = {};
    if (r[SFS2X.Controllers.KEY_ERROR_CODE] == null) {
        var y = r[SFS2X.Requests.BuddyList.InitBuddyListRequest.KEY_BLIST],
            E = r[SFS2X.Requests.BuddyList.InitBuddyListRequest.KEY_MY_VARS],
            C = r[SFS2X.Requests.BuddyList.InitBuddyListRequest.KEY_BUDDY_STATES];
        for (this._sfs.buddyManager._clearAll(), r = 0; r < y.length; r++) {
            var x = SFS2X.Entities.SFSBuddy.fromArray(y[r]);
            this._sfs.buddyManager._addBuddy(x)
        }
        for (C != null && this._sfs.buddyManager._setBuddyStates(C), y = [], r = 0; r < E.length; r++) C = SFS2X.Entities.Variables.SFSBuddyVariable.fromArray(E[r]), y.push(C);
        this._sfs.buddyManager._setMyVariables(y), this._sfs.buddyManager._setInited(), R.buddyList = this._sfs.buddyManager.getBuddyList(), R.myVariables = this._sfs.buddyManager.getMyVariables(), this._sfs._dispatchEvent(SFS2X.SFSBuddyEvent.BUDDY_LIST_INIT, R)
    } else E = r[SFS2X.Controllers.KEY_ERROR_CODE], r = SFS2X.ErrorCodes.getErrorMessage(E, r[SFS2X.Controllers.KEY_ERROR_PARAMS]), R.errorMessage = r, R.errorCode = E, this._sfs._dispatchEvent(SFS2X.SFSBuddyEvent.BUDDY_ERROR, R)
};
SFS2X.Controllers.SystemController.prototype._fnAddBuddy = function (r) {
    var R = {};
    if (r[SFS2X.Controllers.KEY_ERROR_CODE] == null) {
        var y = SFS2X.Entities.SFSBuddy.fromArray(r[SFS2X.Requests.BuddyList.AddBuddyRequest.KEY_BUDDY_NAME]);
        this._sfs.buddyManager._addBuddy(y), R.buddy = y, this._sfs._dispatchEvent(SFS2X.SFSBuddyEvent.BUDDY_ADD, R)
    } else y = r[SFS2X.Controllers.KEY_ERROR_CODE], r = SFS2X.ErrorCodes.getErrorMessage(y, r[SFS2X.Controllers.KEY_ERROR_PARAMS]), R.errorMessage = r, R.errorCode = y, this._sfs._dispatchEvent(SFS2X.SFSBuddyEvent.BUDDY_ERROR, R)
};
SFS2X.Controllers.SystemController.prototype._fnRemoveBuddy = function (r) {
    var R = {};
    if (r[SFS2X.Controllers.KEY_ERROR_CODE] == null) {
        var y = r[SFS2X.Requests.BuddyList.RemoveBuddyRequest.KEY_BUDDY_NAME],
            r = this._sfs.buddyManager._removeBuddyByName(y);
        r != null ? (R.buddy = r, this._sfs._dispatchEvent(SFS2X.SFSBuddyEvent.BUDDY_REMOVE, R)) : this._log.warn("Unexpected: buddy removal failed, can't find " + y + " in local buddy list")
    } else y = r[SFS2X.Controllers.KEY_ERROR_CODE], r = SFS2X.ErrorCodes.getErrorMessage(y, r[SFS2X.Controllers.KEY_ERROR_PARAMS]), R.errorMessage = r, R.errorCode = y, this._sfs._dispatchEvent(SFS2X.SFSBuddyEvent.BUDDY_ERROR, R)
};
SFS2X.Controllers.SystemController.prototype._fnBlockBuddy = function (r) {
    var R = {};
    if (r[SFS2X.Controllers.KEY_ERROR_CODE] == null) {
        var y = r[SFS2X.Requests.BuddyList.BlockBuddyRequest.KEY_BUDDY_NAME],
            E = this._sfs.buddyManager.getBuddyByName(y);
        E != null ? (E.blocked = r[SFS2X.Requests.BuddyList.BlockBuddyRequest.KEY_BUDDY_BLOCK_STATE], R.buddy = E, this._sfs._dispatchEvent(SFS2X.SFSBuddyEvent.BUDDY_BLOCK, R)) : this._log.warn("Unexpected: buddy blocking/unblocking failed, can't find " + y + " in local buddy list")
    } else y = r[SFS2X.Controllers.KEY_ERROR_CODE], r = SFS2X.ErrorCodes.getErrorMessage(y, r[SFS2X.Controllers.KEY_ERROR_PARAMS]), R.errorMessage = r, R.errorCode = y, this._sfs._dispatchEvent(SFS2X.SFSBuddyEvent.BUDDY_ERROR, R)
};
SFS2X.Controllers.SystemController.prototype._fnGoOnline = function (r) {
    var R = {};
    if (r[SFS2X.Controllers.KEY_ERROR_CODE] == null) {
        var y = r[SFS2X.Requests.BuddyList.GoOnlineRequest.KEY_BUDDY_NAME],
            E = this._sfs.buddyManager.getBuddyByName(y), C = y == this._sfs.mySelf.name,
            x = r[SFS2X.Requests.BuddyList.GoOnlineRequest.KEY_ONLINE], B = x == SFS2X.Utils.BuddyOnlineState.ONLINE,
            N = !0;
        if (C) this._sfs.buddyManager.getMyOnlineState() != B && (this._log.warn("Unexpected: myOnlineState is not in synch with the server; resynching to: " + B), this._sfs.buddyManager._setMyOnlineState(B)); else if (E != null) E.id = r[SFS2X.Requests.BuddyList.GoOnlineRequest.KEY_BUDDY_ID], E._setVariable(new SFS2X.Entities.Variables.SFSBuddyVariable(SFS2X.Entities.Variables.ReservedBuddyVariables.BV_ONLINE, B)), x == SFS2X.Utils.BuddyOnlineState.LEFT_THE_SERVER && E._clearVolatileVariables(), N = this._sfs.buddyManager.getMyOnlineState(); else {
            this._log.warn("Unexpected:  buddy '" + y + "' not found in local Buddy List when trying to set his online state");
            return
        }
        N && (R.buddy = E, R.isItMe = C, this._sfs._dispatchEvent(SFS2X.SFSBuddyEvent.BUDDY_ONLINE_STATE_CHANGE, R))
    } else y = r[SFS2X.Controllers.KEY_ERROR_CODE], r = SFS2X.ErrorCodes.getErrorMessage(y, r[SFS2X.Controllers.KEY_ERROR_PARAMS]), R.errorMessage = r, R.errorCode = y, this._sfs._dispatchEvent(SFS2X.SFSBuddyEvent.BUDDY_ERROR, R)
};
SFS2X.Controllers.SystemController.prototype._fnSetBuddyVariables = function (r) {
    var R = {};
    if (r[SFS2X.Controllers.KEY_ERROR_CODE] == null) {
        for (var y = r[SFS2X.Requests.BuddyList.SetBuddyVariablesRequest.KEY_BUDDY_NAME], r = r[SFS2X.Requests.BuddyList.SetBuddyVariablesRequest.KEY_BUDDY_VARS], E = this._sfs.buddyManager.getBuddyByName(y), C = y == this._sfs.mySelf.name, x = [], B = [], N = !0, L = 0; L < r.length; L++) {
            var O = SFS2X.Entities.Variables.SFSBuddyVariable.fromArray(r[L]);
            B.push(O), x.push(O.name)
        }
        if (C) this._sfs.buddyManager._setMyVariables(B); else if (E != null) E._setVariables(B), N = sfs.buddyManager.getMyOnlineState(); else {
            this._log.warn("Unexpected:  buddy '" + y + "' not found in local Buddy List when trying to set his Buddy Variables");
            return
        }
        N && (R.buddy = E, R.isItMe = C, R.changedVars = x, this._sfs._dispatchEvent(SFS2X.SFSBuddyEvent.BUDDY_VARIABLES_UPDATE, R))
    } else y = r[SFS2X.Controllers.KEY_ERROR_CODE], r = SFS2X.ErrorCodes.getErrorMessage(y, r[SFS2X.Controllers.KEY_ERROR_PARAMS]), R.errorMessage = r, R.errorCode = y, this._sfs._dispatchEvent(SFS2X.SFSBuddyEvent.BUDDY_ERROR, R)
};
SFS2X.Controllers.SystemController.prototype._populateRoomList = function (r) {
    for (var R = this._sfs.roomManager, y = 0; y < r.length; y++) {
        var E = SFS2X.Entities.SFSRoom.fromArray(r[y]);
        R._replaceRoom(E)
    }
};
SFS2X.Controllers.SystemController.prototype._getOrCreateUser = function (r, R, y) {
    R == null && (R = !1);
    var E = this._sfs.userManager.getUserById(r[0]);
    if (E == null) E = SFS2X.Entities.SFSUser.fromArray(r, y), E._setUserManager(this._sfs.userManager); else if (y != null) for (E._setPlayerId(r[3], y), r = r[4], y = 0; y < r.length; y++) E._setVariable(SFS2X.Entities.Variables.SFSUserVariable.fromArray(r[y]));
    return R && this._sfs.userManager._addUser(E), E
};
SFS2X.Controllers.ExtensionController = function (r) {
    this.KEY_CMD = "c", this.KEY_PARAMS = "p", this.KEY_ROOM = "r", this._sfs = r, this._id = 1, this._log = SFS2X.Logger
};
SFS2X.Controllers.ExtensionController.prototype.getId = function () {
    return this._id
};
SFS2X.Controllers.ExtensionController.prototype.handleMessage = function (r) {
    this._sfs.debug && this._log.info("IN < ExtensionResponse");
    var R = {};
    R.cmd = r[this.KEY_CMD], R.params = r[this.KEY_PARAMS], r[this.KEY_ROOM] != null && (R.sourceRoom = r[this.KEY_ROOM]), this._sfs._dispatchEvent(SFS2X.SFSEvent.EXTENSION_RESPONSE, R)
};
SFS2X.DebugHelper = {};
SFS2X.DebugHelper.getDump = function (r) {
    return r == null ? "<Null>" : r instanceof Object ? this._dumpObject(r) : "<Not An Object>"
};
SFS2X.DebugHelper._dumpObject = function (r) {
    function R(E, C, x) {
        var B = null;
        SFS2X.DebugHelper._getTabs(x);
        for (var N in E) {
            var L = E[N];
            if (L == null) B = "Null"; else {
                var O = L.constructor, D = void 0;
                O === Array || O === Object ? (B = null, D = O === Array ? "[Array]" : "[Object]", R(L, C, x + 1)) : B = L.constructor === Number ? "Num" : L.constructor === Boolean ? "Bool" : L.constructor === String ? "Str" : "Unsupported"
            }
            C.push(SFS2X.DebugHelper._getTabs(x) + N + ": " + (D ?? L) + (B == null ? "" : " (" + B + ")"))
        }
    }

    var y = [];
    return R(r, y, 0), SFS2X.DebugHelper._prettyPrint(y)
};
SFS2X.DebugHelper._getTabs = function (r) {
    if (0 >= r) return "";
    if (r == 1) return "	";
    for (var R = "", y = 0; y < r; y++) R += "	";
    return R
};
SFS2X.DebugHelper._prettyPrint = function (r) {
    for (var R = "", y = r.length - 1; -1 < y; y--) R += r[y] + `
`;
    return R
};
SFS2X.Entities = {};
SFS2X.Entities.Data = {};
SFS2X.Entities.Variables = {};
SFS2X.Entities.Match = {};
SFS2X.Entities.Invitation = {};
SFS2X.Entities.SFSRoom = Class.extend({
    init: function (r, R, y) {
        this.id = r, this.name = R, this.groupId = y ?? "default", this.isPasswordProtected = this.isJoined = this.isHidden = this.isGame = !1, this._specCount = this._userCount = this.maxSpectators = this.maxUsers = 0, this._isManaged = !0, this.variables = {}, this.properties = {}, this._userManager = new SFS2X.Managers.UserManager, this._roomManager = null
    }, toString: function () {
        return "[Room: " + this.name + ", Id: " + this.id + ", Group id: " + this.groupId + "]"
    }, getUserCount: function () {
        return this.isJoined ? this.isGame ? this.getPlayerList().length : this._userManager.getUserCount() : this._userCount
    }, getSpectatorCount: function () {
        return this.isGame ? this.isJoined ? this.getSpectatorList().length : this._specCount : 0
    }, getCapacity: function () {
        return this.maxUsers + this.maxSpectators
    }, getUserByName: function (r) {
        return this._userManager.getUserByName(r)
    }, getUserById: function (r) {
        return this._userManager.getUserById(r)
    }, containsUser: function (r) {
        return this._userManager.containsUser(r)
    }, getUserList: function () {
        return this._userManager.getUserList()
    }, getPlayerList: function () {
        for (var r = [], R = this._userManager.getUserList(), y = 0; y < R.length; y++) {
            var E = R[y];
            E.isPlayerInRoom(this) && r.push(E)
        }
        return r
    }, getSpectatorList: function () {
        for (var r = [], R = this._userManager.getUserList(), y = 0; y < R.length; y++) {
            var E = R[y];
            E.isSpectatorInRoom(this) && r.push(E)
        }
        return r
    }, getVariable: function (r) {
        return this.variables[r]
    }, containsVariable: function (r) {
        return this.variables[r] != null
    }, getVariables: function () {
        return SFS2X.Utils.ArrayUtil.objToArray(this.variables)
    }, getRoomManager: function () {
        return this._roomManager
    }, _addUser: function (r) {
        this._userManager._addUser(r)
    }, _removeUser: function (r) {
        this._userManager._removeUser(r)
    }, _setVariables: function (r) {
        for (var R = 0; R < r.length; R++) this._setVariable(r[R])
    }, _setVariable: function (r) {
        r.isNull() ? delete this.variables[r.name] : this.variables[r.name] = r
    }, _setRoomManager: function (r) {
        if (this._roomManager != null) throw new SFS2X.Exceptions.SFSError("Room Manager already assigned to Room " + this.toString());
        this._roomManager = r
    }, _merge: function (r) {
        this.variables = [];
        for (var R in r.variables) this.variables[R] = r.variables[R];
        for (this._userManager._clearAll(), r = r.getUserList(), R = 0; R < r.length; R++) this._userManager._addUser(r[R])
    }
});
SFS2X.Entities.SFSRoom.fromArray = function (r) {
    var R = r.length == 14, y = null,
        y = R ? new SFS2X.Entities.MMORoom(r[0], r[1], r[2]) : new SFS2X.Entities.SFSRoom(r[0], r[1], r[2]);
    y.isGame = r[3], y.isHidden = r[4], y.isPasswordProtected = r[5], y._userCount = r[6], y.maxUsers = r[7];
    var E = r[8];
    if (E != null) for (var C = 0; C < E.length; C++) {
        var x = SFS2X.Entities.Variables.SFSRoomVariable.fromArray(E[C]);
        y._setVariable(x)
    }
    return y.isGame && (y._specCount = r[9], y.maxSpectators = r[10]), R && (y.defaultAOI = SFS2X.Entities.Data.Vec3D.fromArray(r[11]), r[13] != null && (y.lowerMapLimit = SFS2X.Entities.Data.Vec3D.fromArray(r[12]), y.higherMapLimit = SFS2X.Entities.Data.Vec3D.fromArray(r[13]))), y
};
SFS2X.Entities.MMORoom = SFS2X.Entities.SFSRoom.extend({
    init: function (r, R, y) {
        this._super(r, R, y), this.higherMapLimit = this.lowerMapLimit = this.defaultAOI = null, this._itemsById = {}
    }, getMMOItem: function (r) {
        return this._itemsById[r]
    }, getMMOItems: function () {
        return SFS2X.Utils.ArrayUtil.objToArray(this._itemsById)
    }, _addMMOItem: function (r) {
        this._itemsById[r.id] = r
    }, _removeItem: function (r) {
        delete this._itemsById[r]
    }
});
SFS2X.Entities.SFSUser = function (r, R, y) {
    this.id = r, this.name = R, this.isItMe = y ?? !1, this.privilegeId = 0, this.properties = {}, this.aoiEntryPoint = null, this.variables = {}, this._playerIdByRoomId = {}, this._userManager = null
};
SFS2X.Entities.SFSUser.fromArray = function (r, R) {
    var y = new SFS2X.Entities.SFSUser(r[0], r[1]);
    y.privilegeId = r[2], R != null && y._setPlayerId(r[3], R);
    var E = r[4];
    if (E != null) for (var C = 0; C < E.length; C++) {
        var x = SFS2X.Entities.Variables.SFSUserVariable.fromArray(E[C]);
        y._setVariable(x)
    }
    return y
};
SFS2X.Entities.SFSUser.prototype.toString = function () {
    return "[User: " + this.name + ", Id: " + this.id + ", Is me: " + this.isItMe + "]"
};
SFS2X.Entities.SFSUser.prototype.isJoinedInRoom = function (r) {
    return r.containsUser(this)
};
SFS2X.Entities.SFSUser.prototype.isGuest = function () {
    return this.privilegeId == SFS2X.Entities.UserPrivileges.GUEST
};
SFS2X.Entities.SFSUser.prototype.isStandardUser = function () {
    return this.privilegeId == SFS2X.Entities.UserPrivileges.STANDARD
};
SFS2X.Entities.SFSUser.prototype.isModerator = function () {
    return this.privilegeId == SFS2X.Entities.UserPrivileges.MODERATOR
};
SFS2X.Entities.SFSUser.prototype.isAdmin = function () {
    return this.privilegeId == SFS2X.Entities.UserPrivileges.ADMINISTRATOR
};
SFS2X.Entities.SFSUser.prototype.isPlayer = function () {
    return this.isPlayerInRoom(this._userManager._sfs.lastJoinedRoom)
};
SFS2X.Entities.SFSUser.prototype.isSpectator = function () {
    return this.isSpectatorInRoom(this._userManager._sfs.lastJoinedRoom)
};
SFS2X.Entities.SFSUser.prototype.getPlayerId = function (r) {
    var R = 0;
    return this._playerIdByRoomId[r.id] != null && (R = this._playerIdByRoomId[r.id]), R
};
SFS2X.Entities.SFSUser.prototype.isPlayerInRoom = function (r) {
    return r != null && r.isGame ? 0 < this._playerIdByRoomId[r.id] : !1
};
SFS2X.Entities.SFSUser.prototype.isSpectatorInRoom = function (r) {
    return r != null && r.isGame ? 0 > this._playerIdByRoomId[r.id] : !1
};
SFS2X.Entities.SFSUser.prototype.getVariable = function (r) {
    return this.variables[r]
};
SFS2X.Entities.SFSUser.prototype.containsVariable = function (r) {
    return this.variables[r] != null
};
SFS2X.Entities.SFSUser.prototype.getVariables = function () {
    return SFS2X.Utils.ArrayUtil.objToArray(this.variables)
};
SFS2X.Entities.SFSUser.prototype.getUserManager = function () {
    return this._userManager
};
SFS2X.Entities.SFSUser.prototype._setPlayerId = function (r, R) {
    this._playerIdByRoomId[R.id] = r
};
SFS2X.Entities.SFSUser.prototype._removePlayerId = function (r) {
    delete this._playerIdByRoomId[r.id]
};
SFS2X.Entities.SFSUser.prototype._setVariables = function (r) {
    for (var R = 0; R < r.length; R++) this._setVariable(r[R])
};
SFS2X.Entities.SFSUser.prototype._setVariable = function (r) {
    r.isNull() ? delete this.variables[r.name] : this.variables[r.name] = r
};
SFS2X.Entities.SFSUser.prototype._setUserManager = function (r) {
    if (this._userManager != null) throw new SFS2X.Exceptions.SFSError("User Manager already assigned to user " + this.toString());
    this._userManager = r
};
SFS2X.Entities.SFSBuddy = function (r, R, y, E) {
    this.id = r, this.name = R, this.blocked = y ?? !1, this.temp = E ?? !1, this.variables = {}
};
SFS2X.Entities.SFSBuddy.fromArray = function (r) {
    for (var R = new SFS2X.Entities.SFSBuddy(r[0], r[1], r[2], 4 < r.length ? r[4] : !1), r = r[3], y = 0; y < r.length; y++) {
        var E = SFS2X.Entities.Variables.SFSBuddyVariable.fromArray(r[y]);
        R._setVariable(E)
    }
    return R
};
SFS2X.Entities.SFSBuddy.prototype.toString = function () {
    return "[Buddy: " + this.name + ", Id: " + this.id + "]"
};
SFS2X.Entities.SFSBuddy.prototype.isBlocked = function () {
    return this.blocked
};
SFS2X.Entities.SFSBuddy.prototype.isTemp = function () {
    return this.temp
};
SFS2X.Entities.SFSBuddy.prototype.isOnline = function () {
    var r = !0, R = SFS2X.Entities.Variables.ReservedBuddyVariables.BV_ONLINE;
    return this.containsVariable(R) && (r = this.getVariable(R).value), r && -1 < this.id
};
SFS2X.Entities.SFSBuddy.prototype.getState = function () {
    var r = SFS2X.Entities.Variables.ReservedBuddyVariables.BV_STATE;
    return this.containsVariable(r) ? this.getVariable(r).value : null
};
SFS2X.Entities.SFSBuddy.prototype.getNickName = function () {
    var r = SFS2X.Entities.Variables.ReservedBuddyVariables.BV_NICKNAME;
    return this.containsVariable(r) ? this.getVariable(r).value : null
};
SFS2X.Entities.SFSBuddy.prototype.getVariable = function (r) {
    return this.variables[r]
};
SFS2X.Entities.SFSBuddy.prototype.containsVariable = function (r) {
    return this.variables[r] != null
};
SFS2X.Entities.SFSBuddy.prototype.getVariables = function () {
    return SFS2X.Utils.ArrayUtil.objToArray(this.variables)
};
SFS2X.Entities.SFSBuddy.prototype.getOfflineVariables = function () {
    var r = [], R;
    for (R in this.variables) {
        var y = this.variables[R];
        y.name.charAt(0) == SFS2X.Entities.Variables.SFSBuddyVariable.OFFLINE_PREFIX && r.push(y)
    }
    return r
};
SFS2X.Entities.SFSBuddy.prototype.getOnlineVariables = function () {
    var r = [], R;
    for (R in this.variables) {
        var y = this.variables[R];
        y.name.charAt(0) != SFS2X.Entities.Variables.SFSBuddyVariable.OFFLINE_PREFIX && r.push(y)
    }
    return r
};
SFS2X.Entities.SFSBuddy.prototype._setVariables = function (r) {
    for (var R = 0; R < r.length; R++) this._setVariable(r[R])
};
SFS2X.Entities.SFSBuddy.prototype._setVariable = function (r) {
    r.isNull() ? this._removeVariable(r.name) : this.variables[r.name] = r
};
SFS2X.Entities.SFSBuddy.prototype._removeVariable = function (r) {
    delete this.variables[r]
};
SFS2X.Entities.SFSBuddy.prototype._clearVolatileVariables = function () {
    for (var r in this.variables) {
        var R = this.variables[r];
        R.name.charAt(0) != SFS2X.Entities.Variables.SFSBuddyVariable.OFFLINE_PREFIX && this._removeVariable(R.name)
    }
};
SFS2X.Entities.MMOItem = function (r) {
    this.id = r, this.aoiEntryPoint = null, this.variables = {}
};
SFS2X.Entities.MMOItem.fromArray = function (y) {
    var R = new SFS2X.Entities.MMOItem(y[0]), y = y[1];
    if (y != null) for (var E = 0; E < y.length; E++) {
        var C = SFS2X.Entities.Variables.MMOItemVariable.fromArray(y[E]);
        R._setVariable(C)
    }
    return R
};
SFS2X.Entities.MMOItem.prototype.toString = function () {
    return "[Item: " + this.id + "]"
};
SFS2X.Entities.MMOItem.prototype.getVariable = function (r) {
    return this.variables[r]
};
SFS2X.Entities.MMOItem.prototype.containsVariable = function (r) {
    return this.variables[r] != null
};
SFS2X.Entities.MMOItem.prototype.getVariables = function () {
    return SFS2X.Utils.ArrayUtil.objToArray(this.variables)
};
SFS2X.Entities.MMOItem.prototype._setVariables = function (r) {
    for (var R = 0; R < r.length; R++) this._setVariable(r[R])
};
SFS2X.Entities.MMOItem.prototype._setVariable = function (r) {
    r != null && (r.isNull() ? delete this.variables[r.name] : this.variables[r.name] = r)
};
SFS2X.Entities.Variables.SFSUserVariable = Class.extend({
    init: function (r, R, y) {
        this.name = r, this.value = R, this._setType(y)
    }, toString: function () {
        return "[UserVar: " + this.name + ", Type: " + this.type + ", Value: " + this.value + "]"
    }, toArray: function () {
        return [this.name, SFS2X.Entities.Variables.VariableType.getTypeIdFromName(this.type), this.value]
    }, isNull: function () {
        return SFS2X.Entities.Variables.VariableType.getTypeIdFromName(this.type) == SFS2X.Entities.Variables.VariableType.NULL
    }, _setType: function (r) {
        r == null && (r = -1), -1 < r ? this.type = this.getTypeName(r) : this.value == null ? this.type = this.getTypeName(SFS2X.Entities.Variables.VariableType.NULL) : (r = typeof this.value, r == "boolean" ? this.type = this.getTypeName(SFS2X.Entities.Variables.VariableType.BOOL) : r == "number" ? this.type = this.value === +this.value && this.value === (this.value | 0) ? this.getTypeName(SFS2X.Entities.Variables.VariableType.INT) : this.getTypeName(SFS2X.Entities.Variables.VariableType.DOUBLE) : r == "string" ? this.type = this.getTypeName(SFS2X.Entities.Variables.VariableType.STRING) : r == "object" && (this.type = this.value instanceof Array ? this.getTypeName(SFS2X.Entities.Variables.VariableType.ARRAY) : this.getTypeName(SFS2X.Entities.Variables.VariableType.OBJECT)))
    }, getTypeName: function (r) {
        return SFS2X.Entities.Variables.VariableType.getTypeName(r)
    }
});
SFS2X.Entities.Variables.SFSUserVariable.fromArray = function (r) {
    return new SFS2X.Entities.Variables.SFSUserVariable(r[0], r[2], r[1])
};
SFS2X.Entities.Variables.SFSRoomVariable = SFS2X.Entities.Variables.SFSUserVariable.extend({
    init: function (r, R, y) {
        this._super(r, R, y), this.isPersistent = this.isPrivate = !1
    }, toString: function () {
        return "[RoomVar: " + this.name + ", Type: " + this.type + ", Value: " + this.value + ", Is private: " + this.isPrivate + "]"
    }, toArray: function () {
        var r = this._super();
        return r.push(this.isPrivate), r.push(this.isPersistent), r
    }
});
SFS2X.Entities.Variables.SFSRoomVariable.fromArray = function (r) {
    var R = new SFS2X.Entities.Variables.SFSRoomVariable(r[0], r[2], r[1]);
    return R.isPrivate = r[3], R.isPersistent = r[4], R
};
SFS2X.Entities.Variables.SFSBuddyVariable = SFS2X.Entities.Variables.SFSUserVariable.extend({
    init: function (r, R, y) {
        this._super(r, R, y)
    }, toString: function () {
        return "[BuddyVar: " + this.name + ", Type: " + this.type + ", Value: " + this.value + "]"
    }, isOffline: function () {
        return this.name.charAt(0) == SFS2X.Entities.Variables.SFSBuddyVariable.OFFLINE_PREFIX
    }
});
SFS2X.Entities.Variables.SFSBuddyVariable.OFFLINE_PREFIX = "$";
SFS2X.Entities.Variables.SFSBuddyVariable.fromArray = function (r) {
    return new SFS2X.Entities.Variables.SFSBuddyVariable(r[0], r[2], r[1])
};
SFS2X.Entities.Variables.MMOItemVariable = SFS2X.Entities.Variables.SFSUserVariable.extend({
    init: function (r, R, y) {
        this._super(r, R, y)
    }, toString: function () {
        return "[ItemVar: " + this.name + ", Type: " + this.type + ", Value: " + this.value + "]"
    }
});
SFS2X.Entities.Variables.MMOItemVariable.fromArray = function (r) {
    return new SFS2X.Entities.Variables.MMOItemVariable(r[0], r[2], r[1])
};
SFS2X.Entities.Variables.VariableType = {
    _typeStrings: "Null Bool Int Double String Object Array".split(" "),
    NULL: 0,
    BOOL: 1,
    INT: 2,
    DOUBLE: 3,
    STRING: 4,
    OBJECT: 5,
    ARRAY: 6
};
SFS2X.Entities.Variables.VariableType.getTypeName = function (r) {
    return this._typeStrings[r]
};
SFS2X.Entities.Variables.VariableType.getTypeIdFromName = function (r) {
    return this._typeStrings.indexOf(r)
};
SFS2X.Entities.Variables.ReservedBuddyVariables = {};
SFS2X.Entities.Variables.ReservedBuddyVariables.BV_ONLINE = "$__BV_ONLINE__";
SFS2X.Entities.Variables.ReservedBuddyVariables.BV_STATE = "$__BV_STATE__";
SFS2X.Entities.Variables.ReservedBuddyVariables.BV_NICKNAME = "$__BV_NICKNAME__";
SFS2X.Entities.Variables.ReservedRoomVariables = {};
SFS2X.Entities.Variables.ReservedRoomVariables.RV_GAME_STARTED = "$GS";
SFS2X.Entities.UserPrivileges = {};
SFS2X.Entities.UserPrivileges.GUEST = 0;
SFS2X.Entities.UserPrivileges.STANDARD = 1;
SFS2X.Entities.UserPrivileges.MODERATOR = 2;
SFS2X.Entities.UserPrivileges.ADMINISTRATOR = 3;
SFS2X.Entities.Match.MatchExpression = function (r, R, y) {
    this.varName = r, this.condition = R, this.value = y, this._parent = this.next = this.logicOp = null
};
SFS2X.Entities.Match.MatchExpression.chainedMatchExpression = function (r, R, y, E, C) {
    return r = new SFS2X.Entities.Match.MatchExpression(r, R, y), r.logicOp = E, r._parent = C, r
};
SFS2X.Entities.Match.MatchExpression.prototype.and = function (r, R, y) {
    return this.next = SFS2X.Entities.Match.MatchExpression.chainedMatchExpression(r, R, y, SFS2X.Entities.Match.LogicOperator.AND, this)
};
SFS2X.Entities.Match.MatchExpression.prototype.or = function (r, R, y) {
    return this.next = SFS2X.Entities.Match.MatchExpression.chainedMatchExpression(r, R, y, SFS2X.Entities.Match.LogicOperator.OR, this)
};
SFS2X.Entities.Match.MatchExpression.prototype.hasNext = function () {
    return this.next != null
};
SFS2X.Entities.Match.MatchExpression.prototype.rewind = function () {
    for (var r = this; r._parent != null;) r = r._parent;
    return r
};
SFS2X.Entities.Match.MatchExpression.prototype.toString = function () {
    for (var r = this.rewind(), R = r._asString(); r.hasNext();) r = r.next, R += r._asString();
    return R
};
SFS2X.Entities.Match.MatchExpression.prototype._asString = function () {
    var r = "";
    return this.logicOp != null && (r += " " + this.logicOp.id + " "), r = r + "(" + (this.varName + " " + this.condition.symbol + " " + (typeof this.value == "string" ? "'" + this.value + "'" : this.value)), r + ")"
};
SFS2X.Entities.Match.MatchExpression.prototype._toArray = function () {
    var r = this.rewind(), R = [];
    for (R.push(r._expressionAsArray()); r.hasNext();) r = r.next, R.push(r._expressionAsArray());
    return R
};
SFS2X.Entities.Match.MatchExpression.prototype._expressionAsArray = function () {
    var r = [];
    return this.logicOp != null ? r.push(this.logicOp.id) : r.push(null), r.push(this.varName), r.push(this.condition.type), r.push(this.condition.symbol), r.push(this.value), r
};
SFS2X.Entities.Match.LogicOperator = function (r) {
    this.id = r
};
SFS2X.Entities.Match.LogicOperator.AND = new SFS2X.Entities.Match.LogicOperator("AND");
SFS2X.Entities.Match.LogicOperator.OR = new SFS2X.Entities.Match.LogicOperator("OR");
SFS2X.Entities.Match.BoolMatch = function (r) {
    this.type = 0, this.symbol = r
};
SFS2X.Entities.Match.BoolMatch.EQUALS = new SFS2X.Entities.Match.BoolMatch("==");
SFS2X.Entities.Match.BoolMatch.NOT_EQUALS = new SFS2X.Entities.Match.BoolMatch("!=");
SFS2X.Entities.Match.NumberMatch = function (r) {
    this.type = 1, this.symbol = r
};
SFS2X.Entities.Match.NumberMatch.EQUALS = new SFS2X.Entities.Match.NumberMatch("==");
SFS2X.Entities.Match.NumberMatch.NOT_EQUALS = new SFS2X.Entities.Match.NumberMatch("!=");
SFS2X.Entities.Match.NumberMatch.GREATER_THAN = new SFS2X.Entities.Match.NumberMatch(">");
SFS2X.Entities.Match.NumberMatch.GREATER_THAN_OR_EQUAL_TO = new SFS2X.Entities.Match.NumberMatch(">=");
SFS2X.Entities.Match.NumberMatch.LESS_THAN = new SFS2X.Entities.Match.NumberMatch("<");
SFS2X.Entities.Match.NumberMatch.LESS_THAN_OR_EQUAL_TO = new SFS2X.Entities.Match.NumberMatch("<=");
SFS2X.Entities.Match.StringMatch = function (r) {
    this.type = 2, this.symbol = r
};
SFS2X.Entities.Match.StringMatch.EQUALS = new SFS2X.Entities.Match.StringMatch("==");
SFS2X.Entities.Match.StringMatch.NOT_EQUALS = new SFS2X.Entities.Match.StringMatch("!=");
SFS2X.Entities.Match.StringMatch.CONTAINS = new SFS2X.Entities.Match.StringMatch("contains");
SFS2X.Entities.Match.StringMatch.STARTS_WITH = new SFS2X.Entities.Match.StringMatch("startsWith");
SFS2X.Entities.Match.StringMatch.ENDS_WITH = new SFS2X.Entities.Match.StringMatch("endsWith");
SFS2X.Entities.Match.RoomProperties = {};
SFS2X.Entities.Match.RoomProperties.NAME = "${N}";
SFS2X.Entities.Match.RoomProperties.GROUP_ID = "${G}";
SFS2X.Entities.Match.RoomProperties.MAX_USERS = "${MXU}";
SFS2X.Entities.Match.RoomProperties.MAX_SPECTATORS = "${MXS}";
SFS2X.Entities.Match.RoomProperties.USER_COUNT = "${UC}";
SFS2X.Entities.Match.RoomProperties.SPECTATOR_COUNT = "${SC}";
SFS2X.Entities.Match.RoomProperties.IS_GAME = "${ISG}";
SFS2X.Entities.Match.RoomProperties.IS_PRIVATE = "${ISP}";
SFS2X.Entities.Match.RoomProperties.HAS_FREE_PLAYER_SLOTS = "${HFP}";
SFS2X.Entities.Match.RoomProperties.IS_TYPE_SFSGAME = "${IST}";
SFS2X.Entities.Match.UserProperties = {};
SFS2X.Entities.Match.UserProperties.NAME = "${N}";
SFS2X.Entities.Match.UserProperties.IS_PLAYER = "${ISP}";
SFS2X.Entities.Match.UserProperties.IS_SPECTATOR = "${ISS}";
SFS2X.Entities.Match.UserProperties.IS_NPC = "${ISN}";
SFS2X.Entities.Match.UserProperties.PRIVILEGE_ID = "${PRID}";
SFS2X.Entities.Match.UserProperties.IS_IN_ANY_ROOM = "${IAR}";
SFS2X.Entities.Invitation.SFSInvitation = function (r, R, y, E) {
    this.id = -1, this.inviter = r, this.invitee = R, this.secondsForAnswer = y ?? 15, this.params = E
};
SFS2X.Entities.Invitation.InvitationReply = {};
SFS2X.Entities.Invitation.InvitationReply.ACCEPT = 0;
SFS2X.Entities.Invitation.InvitationReply.REFUSE = 1;
SFS2X.Entities.Data.Vec3D = function (r, R, y) {
    this.px = r ?? 0, this.py = R ?? 0, this.pz = y ?? 0
};
SFS2X.Entities.Data.Vec3D.fromArray = function (r) {
    return new SFS2X.Entities.Data.Vec3D(r[0], r[1], r[2])
};
SFS2X.Entities.Data.Vec3D.prototype.isFloat = function () {
    return !(this.px === parseInt(this.px) && this.py === parseInt(this.py) && this.pz === parseInt(this.pz))
};
SFS2X.Entities.Data.Vec3D.prototype._toString = function () {
    return "(" + this.px + ", " + this.py + ", " + this.pz + ")"
};
SFS2X.Entities.Data.Vec3D.prototype._toArray = function () {
    return [this.px, this.py, this.pz]
};
SFS2X.ErrorCodes = {};
SFS2X.ErrorCodes._errorsByCode = ["Client API version is obsolete: {0}; required version: {1}", "Requested Zone {0} does not exist", "User name {0} is not recognized", "Wrong password for user {0}", "User {0} is banned", "Zone {0} is full", "User {0} is already logged in Zone {1}", "The server is full", "Zone {0} is currently inactive", "User name {0} contains bad words; filtered: {1}", "Guest users not allowed in Zone {0}", "IP address {0} is banned", "A Room with the same name already exists: {0}", "Requested Group is not available - Room: {0}; Group: {1}", "Bad Room name length -  Min: {0}; max: {1}; passed name length: {2}", "Room name contains bad words: {0}", "Zone is full; can't add Rooms anymore", "You have exceeded the number of Rooms that you can create per session: {0}", "Room creation failed, wrong parameter: {0}", "User {0} already joined in Room", "Room {0} is full", "Wrong password for Room {0}", "Requested Room does not exist", "Room {0} is locked", "Group {0} is already subscribed", "Group {0} does not exist", "Group {0} is not subscribed", "Group {0} does not exist", "{0}", "Room permission error; Room {0} cannot be renamed", "Room permission error; Room {0} cannot change password state", "Room permission error; Room {0} cannot change capacity", "Switch user error; no player slots available in Room {0}", "Switch user error; no spectator slots available in Room {0}", "Switch user error; Room {0} is not a Game Room", "Switch user error; you are not joined in Room {0}", "Buddy Manager initialization error, could not load buddy list: {0}", "Buddy Manager error, your buddy list is full; size is {0}", "Buddy Manager error, was not able to block buddy {0} because offline", "Buddy Manager error, you are attempting to set too many Buddy Variables; limit is {0}", "Game {0} access denied, user does not match access criteria", "QuickJoinGame action failed: no matching Rooms were found", "Your previous invitation reply was invalid or arrived too late"];
SFS2X.ErrorCodes.setErrorMessage = function (r, R) {
    this._errorsByCode[r] = R
};
SFS2X.ErrorCodes.getErrorMessage = function (r, R) {
    return this.stringFormat(this._errorsByCode[r], R)
};
SFS2X.ErrorCodes.stringFormat = function (r, R) {
    if (r == null) return "";
    if (R != null) for (var y = 0; y < R.length; y++) r = r.replace("{" + y + "}", R[y]);
    return r
};
SFS2X.EventDispatcher = function () {
    this.listenersByEvent = {}
};
SFS2X.EventDispatcher.prototype.addEventListener = function (r, R, y) {
    this.listenersByEvent[r] == null && (this.listenersByEvent[r] = []), this.listenersByEvent[r].push({
        listener: R,
        scope: y
    })
};
SFS2X.EventDispatcher.prototype.removeEventListener = function (r, R) {
    var y = this.listenersByEvent[r];
    if (y != null) {
        for (var E = 0; E < y.length; E++) if (y[E].listener === R) {
            y.splice(E, 1);
            break
        }
    }
};
SFS2X.EventDispatcher.prototype.dispatchEvent = function (r, R) {
    var y = this.listenersByEvent[r];
    if (y && 0 < y.length) for (var E = 0; E < y.length; E++) y[E].listener.call(y[E].scope, R)
};
SFS2X.EventDispatcher.prototype.getListeners = function (r) {
    return listeners[r]
};
SFS2X.SFSEvent = {
    HANDSHAKE: "handshake",
    CONNECTION: "connection",
    CONNECTION_LOST: "connectionLost",
    CONNECTION_RETRY: "connectionRetry",
    CONNECTION_RESUME: "connectionResume",
    LOGIN: "login",
    LOGIN_ERROR: "loginError",
    LOGOUT: "logout",
    ROOM_ADD: "roomAdd",
    ROOM_CREATION_ERROR: "roomCreationError",
    ROOM_REMOVE: "roomRemove",
    ROOM_JOIN: "roomJoin",
    ROOM_JOIN_ERROR: "roomJoinError",
    USER_ENTER_ROOM: "userEnterRoom",
    USER_EXIT_ROOM: "userExitRoom",
    USER_COUNT_CHANGE: "userCountChange",
    PROXIMITY_LIST_UPDATE: "proximityListUpdate",
    PLAYER_TO_SPECTATOR: "playerToSpectator",
    PLAYER_TO_SPECTATOR_ERROR: "playerToSpectatorError",
    SPECTATOR_TO_PLAYER: "spectatorToPlayer",
    SPECTATOR_TO_PLAYER_ERROR: "spectatorToPlayerError",
    ROOM_NAME_CHANGE: "roomNameChange",
    ROOM_NAME_CHANGE_ERROR: "roomNameChangeError",
    ROOM_PASSWORD_STATE_CHANGE: "roomPasswordStateChange",
    ROOM_PASSWORD_STATE_CHANGE_ERROR: "roomPasswordStateChangeError",
    ROOM_CAPACITY_CHANGE: "roomCapacityChange",
    ROOM_CAPACITY_CHANGE_ERROR: "roomCapacityChangeError",
    PUBLIC_MESSAGE: "publicMessage",
    PRIVATE_MESSAGE: "privateMessage",
    OBJECT_MESSAGE: "objectMessage",
    MODERATOR_MESSAGE: "moderatorMessage",
    ADMIN_MESSAGE: "adminMessage",
    EXTENSION_RESPONSE: "extensionResponse",
    ROOM_VARIABLES_UPDATE: "roomVariablesUpdate",
    USER_VARIABLES_UPDATE: "userVariablesUpdate",
    MMOITEM_VARIABLES_UPDATE: "mmoItemVariablesUpdate",
    ROOM_GROUP_SUBSCRIBE: "roomGroupSubscribe",
    ROOM_GROUP_SUBSCRIBE_ERROR: "roomGroupSubscribeError",
    ROOM_GROUP_UNSUBSCRIBE: "roomGroupUnsubscribe",
    ROOM_GROUP_UNSUBSCRIBE_ERROR: "roomGroupUnsubscribeError",
    ROOM_FIND_RESULT: "roomFindResult",
    USER_FIND_RESULT: "userFindResult",
    INVITATION: "invitation",
    INVITATION_REPLY: "invitationReply",
    INVITATION_REPLY_ERROR: "invitationReplyError",
    PING_PONG: "pingPong",
    SOCKET_ERROR: "socketError"
};
SFS2X.SFSBuddyEvent = {
    BUDDY_LIST_INIT: "buddyListInit",
    BUDDY_ADD: "buddyAdd",
    BUDDY_REMOVE: "buddyRemove",
    BUDDY_BLOCK: "buddyBlock",
    BUDDY_ERROR: "buddyError",
    BUDDY_ONLINE_STATE_CHANGE: "buddyOnlineStateChange",
    BUDDY_VARIABLES_UPDATE: "buddyVariablesUpdate",
    BUDDY_MESSAGE: "buddyMessage"
};
SFS2X.Exceptions = {};
SFS2X.Exceptions.SFSError = Class.extend({
    init: function (r) {
        this._messsage = r
    }, getMessage: function () {
        return this._messsage
    }
});
SFS2X.Exceptions.SFSValidationError = SFS2X.Exceptions.SFSError.extend({
    init: function (r, R) {
        this._super(r), this._errrors = R
    }, getErrors: function () {
        return this._errrors
    }
});
SFS2X.LogLevel = {DEBUG: 0, INFO: 1, WARN: 2, ERROR: 3};
SFS2X._Logger = function () {
    this.isAvailable = console != null, this.level = SFS2X.LogLevel.INFO
};
SFS2X.Logger = new SFS2X._Logger;
SFS2X._Logger.prototype.setLevel = function (r) {
    r < SFS2X.LogLevel.DEBUG || r > SFS2X.LogLevel.ERROR || (this.level = r)
};
SFS2X._Logger.prototype.debug = function (r) {
    this.isAvailable && this.level <= SFS2X.LogLevel.DEBUG && console.log("[DEBUG] " + r)
};
SFS2X._Logger.prototype.info = function (r) {
    this.isAvailable && this.level <= SFS2X.LogLevel.INFO && console.log("[INFO] " + r)
};
SFS2X._Logger.prototype.warn = function (r) {
    this.isAvailable && this.level <= SFS2X.LogLevel.WARN && console.log("[WARN] " + r)
};
SFS2X._Logger.prototype.error = function (r) {
    this.isAvailable && console.log("[ERROR] " + r)
};
SFS2X.Managers = {};
SFS2X.Managers.UserManager = Class.extend({
    init: function (r) {
        this._sfs = r, this._usersById = new SFS2X.Utils.HashTable, this._usersByName = new SFS2X.Utils.HashTable
    }, containsUserName: function (r) {
        return this._usersByName.hasItem(r)
    }, containsUserId: function (r) {
        return this._usersById.hasItem(r)
    }, containsUser: function (r) {
        return this._usersById.hasItem(r.id)
    }, getUserById: function (r) {
        return this._usersById.getItem(r)
    }, getUserByName: function (r) {
        return this._usersByName.getItem(r)
    }, getUserCount: function () {
        return this._usersById.length
    }, getUserList: function () {
        return this._usersById.values()
    }, _addUser: function (r) {
        this._usersById.hasItem(r.id) && SFS2X.Logger.warn("Unexpected, duplicate user in UserManager: " + r.toString()), this.__addUser(r)
    }, __addUser: function (r) {
        this._usersByName.setItem(r.name, r), this._usersById.setItem(r.id, r)
    }, _removeUser: function (r) {
        this.__removeUser(r)
    }, __removeUser: function (r) {
        this._usersById.removeItem(r.id), this._usersByName.removeItem(r.name)
    }, _removeUserById: function () {
        this._usersById.removeItem(user.id), this._usersByName.removeItem(user.name)
    }, _clearAll: function () {
        this._usersById.clear(), this._usersByName.clear()
    }
});
SFS2X.Managers.GlobalUserManager = SFS2X.Managers.UserManager.extend({
    init: function (r) {
        this._super(r), this._roomRefCount = []
    }, _addUser: function (r) {
        this._roomRefCount[r] == null ? this._roomRefCount[r] = 1 : this._roomRefCount[r]++, this.__addUser(r)
    }, _removeUser: function (r) {
        this._roomRefCount != null ? 1 > this._roomRefCount[r] ? SFS2X.Logger.warn("GlobalUserManager RefCount is already at zero. User: " + r) : (this._roomRefCount[r]--, this._roomRefCount[r] == 0 && (this.__removeUser(r), delete this._roomRefCount[r])) : SFS2X.Logger.warn("Can't remove User from GlobalUserManager. RefCount missing. User: " + r)
    }, dumpRefCount: function () {
    }
});
SFS2X.Managers.RoomManager = function (r) {
    this._sfs = r, this._ownerZone = null, this._groups = [], this._roomsById = new SFS2X.Utils.HashTable, this._roomsByName = new SFS2X.Utils.HashTable
};
SFS2X.Managers.RoomManager.prototype.getRoomGroups = function () {
    return this._groups
};
SFS2X.Managers.RoomManager.prototype.containsGroup = function (r) {
    return -1 < this._groups.indexOf(r)
};
SFS2X.Managers.RoomManager.prototype.containsRoom = function (r) {
    return typeof r == "number" ? this._roomsById.hasItem(r) : this._roomsByName.hasItem(r)
};
SFS2X.Managers.RoomManager.prototype.containsRoomInGroup = function (r, R) {
    var y = this.getRoomListFromGroup(R), E = !1, C = typeof r == "number", x;
    for (x in y) {
        var B = y[x];
        if (B instanceof SFS2X.Entities.SFSRoom) {
            if (C) {
                if (B.id == r) {
                    E = !0;
                    break
                }
            } else if (B.name == r) {
                E = !0;
                break
            }
        }
    }
    return E
};
SFS2X.Managers.RoomManager.prototype.getRoomById = function (r) {
    return this._roomsById.getItem(r)
};
SFS2X.Managers.RoomManager.prototype.getRoomByName = function (r) {
    return this._roomsByName.getItem(r)
};
SFS2X.Managers.RoomManager.prototype.getRoomList = function () {
    return this._roomsById.values()
};
SFS2X.Managers.RoomManager.prototype.getRoomCount = function () {
    return this._roomsById.length
};
SFS2X.Managers.RoomManager.prototype.getRoomListFromGroup = function (r) {
    var R = [], y;
    for (y in this._roomsById.items) {
        var E = this._roomsById.items[y];
        E instanceof SFS2X.Entities.SFSRoom && E.groupId == r && R.push(E)
    }
    return R
};
SFS2X.Managers.RoomManager.prototype.getJoinedRooms = function () {
    var r = [], R;
    for (R in this._roomsById.items) {
        var y = this._roomsById.items[R];
        y instanceof SFS2X.Entities.SFSRoom && y.isJoined && r.push(y)
    }
    return r
};
SFS2X.Managers.RoomManager.prototype.getUserRooms = function (r) {
    var R = [], y;
    for (y in this._roomsById.items) {
        var E = this._roomsById.items[y];
        E instanceof SFS2X.Entities.SFSRoom && E.containsUser(r) && R.push(E)
    }
    return R
};
SFS2X.Managers.RoomManager.prototype._addRoom = function (r, R) {
    R == null && (R = !0), this._roomsById.setItem(r.id, r), this._roomsByName.setItem(r.name, r), R ? this.containsGroup(r.groupId) || this._addGroup(r.groupId) : r._isManaged = !1
};
SFS2X.Managers.RoomManager.prototype._replaceRoom = function (r, R) {
    R == null && (R = !0);
    var y = this.getRoomById(r.id);
    return y != null ? (y._merge(r), y) : (this._addRoom(r, R), r)
};
SFS2X.Managers.RoomManager.prototype._removeRoom = function (r) {
    this._roomsById.removeItem(r.id), this._roomsByName.removeItem(r.name)
};
SFS2X.Managers.RoomManager.prototype._removeRoomById = function (r) {
    r = this.getRoomById(r), r != null && this._removeRoom(r)
};
SFS2X.Managers.RoomManager.prototype._removeRoomByName = function (r) {
    r = this.getRoomByName(r), r != null && this._removeRoom(r)
};
SFS2X.Managers.RoomManager.prototype._changeRoomName = function (r, R) {
    var y = r.name;
    r.name = R, this._roomsByName.setItem(R, r), this._roomsByName.removeItem(y)
};
SFS2X.Managers.RoomManager.prototype._changeRoomPasswordState = function (r, R) {
    r.isPasswordProtected = R
};
SFS2X.Managers.RoomManager.prototype._changeRoomCapacity = function (r, R, y) {
    r.maxUsers = R, r.maxSpectators = y
};
SFS2X.Managers.RoomManager.prototype._addGroup = function (r) {
    this._groups.push(r)
};
SFS2X.Managers.RoomManager.prototype._removeGroup = function (R) {
    SFS2X.Utils.ArrayUtil.removeItem(this._groups, R);
    var R = this.getRoomListFromGroup(R), y;
    for (y in R) {
        var E = R[y];
        E instanceof SFS2X.Entities.SFSRoom && (E.isJoined ? E._isManaged = !1 : this._removeRoom(E))
    }
};
SFS2X.Managers.RoomManager.prototype._removeUser = function (r) {
    for (var R in this._roomsById.items) {
        var y = this._roomsById.items[R];
        y instanceof SFS2X.Entities.SFSRoom && y.containsUser(r) && y._removeUser(r)
    }
};
SFS2X.Managers.BuddyManager = function (r) {
    this._sfs = r, this._buddiesByName = [], this._myVariables = [], this._inited = !1, this._buddyStates = []
};
SFS2X.Managers.BuddyManager.prototype.isInited = function () {
    return this._inited
};
SFS2X.Managers.BuddyManager.prototype.containsBuddy = function (r) {
    return this.getBuddyByName(r) != null
};
SFS2X.Managers.BuddyManager.prototype.getBuddyById = function (r) {
    if (-1 < r) for (var R in this._buddiesByName) {
        var y = this._buddiesByName[R];
        if (y instanceof SFS2X.Entities.SFSBuddy && y.id == r) return y
    }
    return null
};
SFS2X.Managers.BuddyManager.prototype.getBuddyByName = function (r) {
    return this._buddiesByName[r]
};
SFS2X.Managers.BuddyManager.prototype.getBuddyByNickName = function (r) {
    for (var R in this._buddiesByName) {
        var y = this._buddiesByName[R];
        if (y instanceof SFS2X.Entities.SFSBuddy && y.nickName == r) return y
    }
    return null
};
SFS2X.Managers.BuddyManager.prototype.getOfflineBuddies = function () {
    var r = [], R;
    for (R in this._buddiesByName) {
        var y = this._buddiesByName[R];
        y instanceof SFS2X.Entities.SFSBuddy && !y.isOnline() && r.push(y)
    }
    return r
};
SFS2X.Managers.BuddyManager.prototype.getOnlineBuddies = function () {
    var r = [], R;
    for (R in this._buddiesByName) {
        var y = this._buddiesByName[R];
        y instanceof SFS2X.Entities.SFSBuddy && y.isOnline() && r.push(y)
    }
    return r
};
SFS2X.Managers.BuddyManager.prototype.getBuddyList = function () {
    return SFS2X.Utils.ArrayUtil.objToArray(this._buddiesByName)
};
SFS2X.Managers.BuddyManager.prototype.getMyVariable = function (r) {
    return this._myVariables[r]
};
SFS2X.Managers.BuddyManager.prototype.getMyVariables = function () {
    return SFS2X.Utils.ArrayUtil.objToArray(this._myVariables)
};
SFS2X.Managers.BuddyManager.prototype.getMyOnlineState = function () {
    if (!this._inited) return !1;
    var r = !0, R = this.getMyVariable(SFS2X.Entities.Variables.ReservedBuddyVariables.BV_ONLINE);
    return R != null && (r = R.value), r
};
SFS2X.Managers.BuddyManager.prototype.getMyNickName = function () {
    var r = this.getMyVariable(SFS2X.Entities.Variables.ReservedBuddyVariables.BV_NICKNAME);
    return r != null ? r.value : null
};
SFS2X.Managers.BuddyManager.prototype.getMyState = function () {
    var r = this.getMyVariable(SFS2X.Entities.Variables.ReservedBuddyVariables.BV_STATE);
    return r != null ? r.value : null
};
SFS2X.Managers.BuddyManager.prototype.getBuddyStates = function () {
    return this._buddyStates
};
SFS2X.Managers.BuddyManager.prototype._setInited = function () {
    this._inited = !0
};
SFS2X.Managers.BuddyManager.prototype._addBuddy = function (r) {
    this._buddiesByName[r.name] = r
};
SFS2X.Managers.BuddyManager.prototype._clearAll = function () {
    this._buddiesByName = []
};
SFS2X.Managers.BuddyManager.prototype._removeBuddyById = function (r) {
    return r = this.getBuddyById(r), r != null && delete this._buddiesByName[r.name], r
};
SFS2X.Managers.BuddyManager.prototype._removeBuddyByName = function (r) {
    var R = this.getBuddyByName(r);
    return R != null && delete this._buddiesByName[r], R
};
SFS2X.Managers.BuddyManager.prototype._setMyVariables = function (r) {
    for (var R = 0; R < r.length; R++) this._setMyVariable(r[R])
};
SFS2X.Managers.BuddyManager.prototype._setMyVariable = function (r) {
    r.isNull() ? delete this._myVariables[r.name] : this._myVariables[r.name] = r
};
SFS2X.Managers.BuddyManager.prototype._setMyOnlineState = function (r) {
    r = new SFS2X.Entities.Variables.SFSBuddyVariable(SFS2X.Entities.Variables.ReservedBuddyVariables.BV_ONLINE, r), this._setMyVariable(r)
};
SFS2X.Managers.BuddyManager.prototype._setMyNickName = function (r) {
    r = new SFS2X.Entities.Variables.SFSBuddyVariable(SFS2X.Entities.Variables.ReservedBuddyVariables.BV_NICKNAME, r), this._setMyVariable(r)
};
SFS2X.Managers.BuddyManager.prototype._setMyState = function (r) {
    r = new SFS2X.Entities.Variables.SFSBuddyVariable(SFS2X.Entities.Variables.ReservedBuddyVariables.BV_STATE, r), this._setMyVariable(r)
};
SFS2X.Managers.BuddyManager.prototype._setBuddyStates = function (r) {
    this._buddyStates = r
};
SFS2X.Requests = {};
SFS2X.Requests.System = {};
SFS2X.Requests.MMO = {};
SFS2X.Requests.BuddyList = {};
SFS2X.Requests.Game = {};
SFS2X.Requests._BaseRequest = Class.extend({
    init: function (r) {
        this._reqObj = {}, this._id = r, this._targetController = 0, this._log = SFS2X.Logger
    }, getMessage: function () {
        return {a: this._id, c: this._targetController, p: this._reqObj}
    }, validate: function () {
        this._log.error("BaseRequest.validate = no child-class implementation found!")
    }, execute: function () {
        this._log.error("BaseRequest.execute = no child-class implementation found!")
    }
});
SFS2X.Requests.System.HandshakeRequest = SFS2X.Requests._BaseRequest.extend({
    init: function (r, R, y) {
        this._super(SFS2X.Requests.Handshake), this._apiVersion = r, this._clientDetails = R, this._reconnectionToken = y
    }, validate: function () {
    }, execute: function () {
        this._reqObj[this.constructor.KEY_API] = this._apiVersion, this._reqObj[this.constructor.KEY_CLIENT_TYPE] = this._clientDetails, this._reconnectionToken != null && (this.reqObj[this.constructor.KEY_RECONNECTION_TOKEN] = this._reconnectionToken)
    }
});
SFS2X.Requests.System.HandshakeRequest.KEY_SESSION_TOKEN = "tk";
SFS2X.Requests.System.HandshakeRequest.KEY_API = "api";
SFS2X.Requests.System.HandshakeRequest.KEY_COMPRESSION_THRESHOLD = "ct";
SFS2X.Requests.System.HandshakeRequest.KEY_RECONNECTION_TOKEN = "rt";
SFS2X.Requests.System.HandshakeRequest.KEY_CLIENT_TYPE = "cl";
SFS2X.Requests.System.HandshakeRequest.KEY_MAX_MESSAGE_SIZE = "ms";
SFS2X.Requests.System.LoginRequest = SFS2X.Requests._BaseRequest.extend({
    init: function (r, R, y, E) {
        this._super(SFS2X.Requests.Login), this._userName = r, this._password = R, this._params = y, this._zoneName = E
    }, validate: function (r) {
        if (r.mySelf != null) throw new SFS2X.Exceptions.SFSValidationError("LoginRequest error", ["You are already logged in; logout before attempting a new login"]);
        if (r = r.config != null && r.config.zone != null ? r.config.zone : null, this._zoneName != null && (r = this._zoneName), r == null || r.length == 0) throw new SFS2X.Exceptions.SFSValidationError("LoginRequest Error", ["Missing Zone name"]);
        this._zoneName = r, this._userName == null && (this._userName = ""), this._password == null && (this._password = "")
    }, execute: function (r) {
        this._reqObj[this.constructor.KEY_ZONE_NAME] = this._zoneName, this._reqObj[this.constructor.KEY_USER_NAME] = this._userName, this._reqObj[this.constructor.KEY_PASSWORD] = 0 < this._password.length ? hex_md5(r.sessionToken + this._password) : "", this._params != null && (this._reqObj[this.constructor.KEY_PARAMS] = this._params)
    }
});
SFS2X.Requests.System.LoginRequest.KEY_ZONE_NAME = "zn";
SFS2X.Requests.System.LoginRequest.KEY_USER_NAME = "un";
SFS2X.Requests.System.LoginRequest.KEY_PASSWORD = "pw";
SFS2X.Requests.System.LoginRequest.KEY_PARAMS = "p";
SFS2X.Requests.System.LoginRequest.KEY_PRIVILEGE_ID = "pi";
SFS2X.Requests.System.LoginRequest.KEY_ID = "id";
SFS2X.Requests.System.LoginRequest.KEY_ROOMLIST = "rl";
SFS2X.Requests.System.LoginRequest.KEY_RECONNECTION_SECONDS = "rs";
SFS2X.Requests.System.LogoutRequest = SFS2X.Requests._BaseRequest.extend({
    init: function () {
        this._super(SFS2X.Requests.Logout)
    }, validate: function (r) {
        if (r.mySelf == null) throw new SFS2X.Exceptions.SFSValidationError("LogoutRequest error", ["You are not logged in"])
    }, execute: function () {
    }
});
SFS2X.Requests.System.LogoutRequest.KEY_ZONE_NAME = "zn";
SFS2X.Requests.System.JoinRoomRequest = SFS2X.Requests._BaseRequest.extend({
    init: function (r, R, y, E) {
        this._super(SFS2X.Requests.JoinRoom), typeof r == "string" ? this._rName = r : typeof r == "number" ? this._rId = r : r instanceof SFS2X.Entities.SFSRoom && (this._rId = r.id, this._rName = r.name), this._password = R, this._roomIdToLeave = y, this._asSpectator = typeof E == "boolean" ? E : !1
    }, validate: function () {
        if (this._rId == null && this._rName == null) throw new SFS2X.Exceptions.SFSValidationError("JoinRoomRequest Error", ["Missing Room id or name, please provide one of the two or an existing Room object"])
    }, execute: function (r) {
        r._isJoining = !0, 0 <= this._rId ? this._reqObj[this.constructor.KEY_ROOM_ID] = this._rId : this._rName != null && (this._reqObj[this.constructor.KEY_ROOM_NAME] = this._rName), this._password != null && (this._reqObj[this.constructor.KEY_PASS] = this._password), this._roomIdToLeave != null && (this._reqObj[this.constructor.KEY_ROOM_TO_LEAVE] = this._roomIdToLeave), this._asSpectator && (this._reqObj[this.constructor.KEY_AS_SPECTATOR] = this._asSpectator)
    }
});
SFS2X.Requests.System.JoinRoomRequest.KEY_ROOM = "r";
SFS2X.Requests.System.JoinRoomRequest.KEY_USER_LIST = "ul";
SFS2X.Requests.System.JoinRoomRequest.KEY_ROOM_NAME = "n";
SFS2X.Requests.System.JoinRoomRequest.KEY_ROOM_ID = "i";
SFS2X.Requests.System.JoinRoomRequest.KEY_PASS = "p";
SFS2X.Requests.System.JoinRoomRequest.KEY_ROOM_TO_LEAVE = "rl";
SFS2X.Requests.System.JoinRoomRequest.KEY_AS_SPECTATOR = "sp";
SFS2X.Requests.System.CreateRoomRequest = SFS2X.Requests._BaseRequest.extend({
    init: function (r, R, y) {
        this._super(SFS2X.Requests.CreateRoom), this._settings = r, this._autoJoin = typeof R == "boolean" ? R : !1, this._roomToLeave = y
    }, validate: function () {
        var r = [];
        if ((this._settings.name == null || this._settings.name.length == 0) && r.push("Missing Room name"), 0 >= this._settings.maxUsers &&
            r.push("Max number of users must be > 0"), this._settings.extension != null &&
            ((this._settings.extension.className == null || this._settings.extension.className.length == 0) &&
            r.push("Missing Extension class name"),
            (this._settings.extension.id == null || this._settings.extension.id.length == 0) && r.push("Missing Extension id")), this._settings instanceof SFS2X.Requests.MMO.MMORoomSettings && (this._settings.defaultAOI == null && r.push("Missing default AoI (Area of Interest)"), this._settings.mapLimits != null && (this._settings.mapLimits.lowerLimit == null || this._settings.mapLimits.higherLimit == null) && r.push("Map limits must be both defined")), 0 < r.length) throw new SFS2X.Exceptions.SFSValidationError("CreateRoomRequest Error", r)
    }, execute: function () {
        if (this._reqObj[this.constructor.KEY_NAME] = this._settings.name, this._reqObj[this.constructor.KEY_GROUP_ID] = this._settings.groupId, this._reqObj[this.constructor.KEY_PASSWORD] = this._settings.password, this._reqObj[this.constructor.KEY_ISGAME] = this._settings.isGame, this._reqObj[this.constructor.KEY_MAXUSERS] = this._settings.maxUsers, this._reqObj[this.constructor.KEY_MAXSPECTATORS] = this._settings.maxSpectators, this._reqObj[this.constructor.KEY_MAXVARS] = this._settings.maxVariables, this._settings.variables != null && 0 < this._settings.variables.length) {
            var r = [], R;
            for (R in this._settings.variables) {
                var y = this._settings.variables[R];
                y instanceof SFS2X.Entities.Variables.SFSRoomVariable && r.push(y.toArray())
            }
            this._reqObj[this.constructor.KEY_ROOMVARS] = r
        }
        this._settings.permissions != null && (r = [], r.push(this._settings.permissions.allowNameChange), r.push(this._settings.permissions.allowPasswordStateChange), r.push(this._settings.permissions.allowPublicMessages), r.push(this._settings.permissions.allowResizing), this._reqObj[this.constructor.KEY_PERMISSIONS] = r), this._settings.events != null && (r = [], r.push(this._settings.events.allowUserEnter), r.push(this._settings.events.allowUserExit), r.push(this._settings.events.allowUserCountChange), r.push(this._settings.events.allowUserVariablesUpdate), this._reqObj[this.constructor.KEY_EVENTS] = r), this._settings.extension != null && (this._reqObj[this.constructor.KEY_EXTID] = this._settings.extension.id, this._reqObj[this.constructor.KEY_EXTCLASS] = this._settings.extension.className, this._settings.extension.propertiesFile != null && 0 < this._settings.extension.propertiesFile.length && (this._reqObj[this.constructor.KEY_EXTPROP] = this._settings.extension.propertiesFile)), this._settings instanceof SFS2X.Requests.MMO.MMORoomSettings && (this._reqObj[this.constructor.KEY_MMO_DEFAULT_AOI] = this._settings.defaultAOI._toArray(), this._settings.mapLimits != null && (this._reqObj[this.constructor.KEY_MMO_MAP_LOW_LIMIT] = this._settings.mapLimits.lowerLimit._toArray(), this._reqObj[this.constructor.KEY_MMO_MAP_HIGH_LIMIT] = this._settings.mapLimits.higherLimit._toArray()), this._reqObj[this.constructor.KEY_MMO_USER_MAX_LIMBO_SECONDS] = this._settings.userMaxLimboSeconds, this._reqObj[this.constructor.KEY_MMO_PROXIMITY_UPDATE_MILLIS] = this._settings.proximityListUpdateMillis, this._reqObj[this.constructor.KEY_MMO_SEND_ENTRY_POINT] = this._settings.sendAOIEntryPoint), this._reqObj[this.constructor.KEY_AUTOJOIN] = this._autoJoin, this._roomToLeave != null && (this._reqObj[this.constructor.KEY_ROOM_TO_LEAVE] = this._roomToLeave.id)
    }
});
SFS2X.Requests.System.CreateRoomRequest.KEY_ROOM = "r";
SFS2X.Requests.System.CreateRoomRequest.KEY_NAME = "n";
SFS2X.Requests.System.CreateRoomRequest.KEY_PASSWORD = "p";
SFS2X.Requests.System.CreateRoomRequest.KEY_GROUP_ID = "g";
SFS2X.Requests.System.CreateRoomRequest.KEY_ISGAME = "ig";
SFS2X.Requests.System.CreateRoomRequest.KEY_MAXUSERS = "mu";
SFS2X.Requests.System.CreateRoomRequest.KEY_MAXSPECTATORS = "ms";
SFS2X.Requests.System.CreateRoomRequest.KEY_MAXVARS = "mv";
SFS2X.Requests.System.CreateRoomRequest.KEY_ROOMVARS = "rv";
SFS2X.Requests.System.CreateRoomRequest.KEY_PERMISSIONS = "pm";
SFS2X.Requests.System.CreateRoomRequest.KEY_EVENTS = "ev";
SFS2X.Requests.System.CreateRoomRequest.KEY_EXTID = "xn";
SFS2X.Requests.System.CreateRoomRequest.KEY_EXTCLASS = "xc";
SFS2X.Requests.System.CreateRoomRequest.KEY_EXTPROP = "xp";
SFS2X.Requests.System.CreateRoomRequest.KEY_AUTOJOIN = "aj";
SFS2X.Requests.System.CreateRoomRequest.KEY_ROOM_TO_LEAVE = "rl";
SFS2X.Requests.System.CreateRoomRequest.KEY_MMO_DEFAULT_AOI = "maoi";
SFS2X.Requests.System.CreateRoomRequest.KEY_MMO_MAP_LOW_LIMIT = "mllm";
SFS2X.Requests.System.CreateRoomRequest.KEY_MMO_MAP_HIGH_LIMIT = "mlhm";
SFS2X.Requests.System.CreateRoomRequest.KEY_MMO_USER_MAX_LIMBO_SECONDS = "muls";
SFS2X.Requests.System.CreateRoomRequest.KEY_MMO_PROXIMITY_UPDATE_MILLIS = "mpum";
SFS2X.Requests.System.CreateRoomRequest.KEY_MMO_SEND_ENTRY_POINT = "msep";
SFS2X.Requests.System.GenericMessageRequest = SFS2X.Requests._BaseRequest.extend({
    init: function () {
        this._super(SFS2X.Requests.GenericMessage), this._type = -1, this._recipient = this._params = this._message = this._user = this._room = null, this._sendMode = -1
    }, validate: function (r) {
        if (0 > this._type) throw new SFS2X.Exceptions.SFSValidationError("GenericMessageRequest Error", ["Unsupported message type: " + this._type]);
        var R = [];
        switch (this._type) {
            case SFS2X.Requests.GenericMessageType.PUBLIC_MSG:
                this._validatePublicMessage(r, R);
                break;
            case SFS2X.Requests.GenericMessageType.PRIVATE_MSG:
                this._validatePrivateMessage(r, R);
                break;
            case SFS2X.Requests.GenericMessageType.OBJECT_MSG:
                this._validateObjectMessage(r, R);
                break;
            case SFS2X.Requests.GenericMessageType.BUDDY_MSG:
                this._validateBuddyMessage(r, R);
                break;
            default:
                this._validateSuperUserMessage(r, R)
        }
        if (0 < R.length) throw new SFS2X.Exceptions.SFSValidationError("GenericMessageRequest Error", R)
    }, execute: function (r) {
        switch (this._reqObj[SFS2X.Requests.System.GenericMessageRequest.KEY_MESSAGE_TYPE] = this._type, this._type) {
            case SFS2X.Requests.GenericMessageType.PUBLIC_MSG:
                this._executePublicMessage(r);
                break;
            case SFS2X.Requests.GenericMessageType.PRIVATE_MSG:
                this._executePrivateMessage(r);
                break;
            case SFS2X.Requests.GenericMessageType.OBJECT_MSG:
                this._executeObjectMessage(r);
                break;
            case SFS2X.Requests.GenericMessageType.BUDDY_MSG:
                this._executeBuddyMessage(r);
                break;
            default:
                this._executeSuperUserMessage(r)
        }
    }, _validatePublicMessage: function (r, R) {
        (this._message == null || this._message.length == 0) && R.push("Public message is empty"), this._room != null && !r.mySelf.isJoinedInRoom(this._room) && R.push("You are not joined in the target Room: " + this._room)
    }, _validatePrivateMessage: function (r, R) {
        (this._message == null || this._message.length == 0) && R.push("Private message is empty"), 0 > this._recipient && R.push("Invalid recipient id: " + this._recipient)
    }, _validateObjectMessage: function (r, R) {
        this._params == null && R.push("Object message is null")
    }, _validateBuddyMessage: function (r, R) {
        r.buddyManager.isInited || R.push("Buddy List not yet initialized; please send an InitBuddyRequest first"), r.buddyManager.myOnlineState == !1 && R.push("Can't send messages while you are offline in the Buddy List system"), (this._message == null || this._message.length == 0) && R.push("Buddy message is empty"), 0 > this._recipient && R.push("Recipient is offline or not in your Buddy List")
    }, _validateSuperUserMessage: function (r, R) {
        switch ((this._message == null || this._message.length == 0) && R.push("Moderator message is empty"), this._sendMode) {
            case SFS2X.Requests.MessageRecipientMode.TO_USER:
                this._recipient instanceof SFS2X.Entities.SFSUser || R.push("SFSUser object expected as recipient");
                break;
            case SFS2X.Requests.MessageRecipientMode.TO_ROOM:
                this._recipient instanceof SFS2X.Entities.SFSRoom || R.push("SFSRoom object expected as recipient");
                break;
            case SFS2X.Requests.MessageRecipientMode.TO_GROUP:
                typeof this._recipient != "string" && R.push("String object (the groupId) expected as recipient")
        }
    }, _executePublicMessage: function (r) {
        if (this._room == null && (this._room = r.lastJoinedRoom), this._room == null) throw new SFS2X.Exceptions.SFSError("User should be joined in a Room in order to send a public message");
        this._reqObj[SFS2X.Requests.System.GenericMessageRequest.KEY_ROOM_ID] = this._room.id, this._reqObj[SFS2X.Requests.System.GenericMessageRequest.KEY_USER_ID] = r.mySelf.id, this._reqObj[SFS2X.Requests.System.GenericMessageRequest.KEY_MESSAGE] = this._message, this._params != null && (this._reqObj[SFS2X.Requests.System.GenericMessageRequest.KEY_XTRA_PARAMS] = this._params)
    }, _executePrivateMessage: function () {
        this._reqObj[SFS2X.Requests.System.GenericMessageRequest.KEY_RECIPIENT] = this._recipient, this._reqObj[SFS2X.Requests.System.GenericMessageRequest.KEY_MESSAGE] = this._message, this._params != null && (this._reqObj[SFS2X.Requests.System.GenericMessageRequest.KEY_XTRA_PARAMS] = this._params)
    }, _executeBuddyMessage: function () {
        this._reqObj[SFS2X.Requests.System.GenericMessageRequest.KEY_RECIPIENT] = this._recipient, this._reqObj[SFS2X.Requests.System.GenericMessageRequest.KEY_MESSAGE] = this._message, this._params != null && (this._reqObj[SFS2X.Requests.System.GenericMessageRequest.KEY_XTRA_PARAMS] = this._params)
    }, _executeSuperUserMessage: function () {
        switch (this._reqObj[SFS2X.Requests.System.GenericMessageRequest.KEY_MESSAGE] = this._message, this._params != null && (this._reqObj[SFS2X.Requests.System.GenericMessageRequest.KEY_XTRA_PARAMS] = this._params), this._reqObj[SFS2X.Requests.System.GenericMessageRequest.KEY_RECIPIENT_MODE] = this._sendMode, this._sendMode) {
            case SFS2X.Requests.MessageRecipientMode.TO_USER:
                this._reqObj[SFS2X.Requests.System.GenericMessageRequest.KEY_RECIPIENT] = this._recipient.id;
                break;
            case SFS2X.Requests.MessageRecipientMode.TO_ROOM:
                this._reqObj[SFS2X.Requests.System.GenericMessageRequest.KEY_RECIPIENT] = this._recipient.id;
                break;
            case SFS2X.Requests.MessageRecipientMode.TO_GROUP:
                this._reqObj[SFS2X.Requests.System.GenericMessageRequest.KEY_RECIPIENT] = this._recipient
        }
    }, _executeObjectMessage: function (r) {
        if (this._room == null && (this._room = r.lastJoinedRoom), this._room == null) throw new SFS2X.Exceptions.SFSError("User should be joined in a Room in order to send an object message");
        if (r = [], this._recipient != null && this._recipient instanceof Array) {
            var R = this._recipient;
            if (R.length > this._room.capacity) throw new SFS2X.Exceptions.SFSError("The number of recipients is bigger than the target Room capacity: " + R.length);
            for (var y in R) {
                var E = R[y];
                E instanceof SFS2X.Entities.SFSUser ? r.push(E.id) : this._log.warn("Bad recipient in ObjectMessage recipient list: " + typeof E + "; expected type: SFSUser")
            }
        }
        this._reqObj[SFS2X.Requests.System.GenericMessageRequest.KEY_ROOM_ID] = this._room.id, this._reqObj[SFS2X.Requests.System.GenericMessageRequest.KEY_XTRA_PARAMS] = this._params, 0 < r.length && (this._reqObj[SFS2X.Requests.System.GenericMessageRequest.KEY_RECIPIENT] = r)
    }
});
SFS2X.Requests.System.GenericMessageRequest.KEY_ROOM_ID = "r";
SFS2X.Requests.System.GenericMessageRequest.KEY_USER_ID = "u";
SFS2X.Requests.System.GenericMessageRequest.KEY_MESSAGE = "m";
SFS2X.Requests.System.GenericMessageRequest.KEY_MESSAGE_TYPE = "t";
SFS2X.Requests.System.GenericMessageRequest.KEY_RECIPIENT = "rc";
SFS2X.Requests.System.GenericMessageRequest.KEY_RECIPIENT_MODE = "rm";
SFS2X.Requests.System.GenericMessageRequest.KEY_XTRA_PARAMS = "p";
SFS2X.Requests.System.GenericMessageRequest.KEY_SENDER_DATA = "sd";
SFS2X.Requests.System.ChangeRoomNameRequest = SFS2X.Requests._BaseRequest.extend({
    init: function (r, R) {
        this._super(SFS2X.Requests.ChangeRoomName), this._room = r, this._newName = R
    }, validate: function () {
        var r = [];
        if (this._room == null && r.push("Provided Room is null"), (this._newName == null || this._newName.length == 0) && r.push("Invalid new room name: it must be a non-null and non-empty string"), 0 < r.length) throw new SFS2X.Exceptions.SFSValidationError("ChangeRoomNameRequest Error", r)
    }, execute: function () {
        this._reqObj[this.constructor.KEY_ROOM] = this._room.id, this._reqObj[this.constructor.KEY_NAME] = this._newName
    }
});
SFS2X.Requests.System.ChangeRoomNameRequest.KEY_ROOM = "r";
SFS2X.Requests.System.ChangeRoomNameRequest.KEY_NAME = "n";
SFS2X.Requests.System.ChangeRoomPasswordStateRequest = SFS2X.Requests._BaseRequest.extend({
    init: function (r, R) {
        this._super(SFS2X.Requests.ChangeRoomPassword), this._room = r, this._newPass = R
    }, validate: function () {
        var r = [];
        if (this._room == null && r.push("Provided Room is null"), this._newPass == null && r.push("Invalid new room name: it must be a non-null string"), 0 < r.length) throw new SFS2X.Exceptions.SFSValidationError("ChangeRoomPasswordStateRequest Error", r)
    }, execute: function () {
        this._reqObj[this.constructor.KEY_ROOM] = this._room.id, this._reqObj[this.constructor.KEY_PASS] = this._newPass
    }
});
SFS2X.Requests.System.ChangeRoomPasswordStateRequest.KEY_ROOM = "r";
SFS2X.Requests.System.ChangeRoomPasswordStateRequest.KEY_PASS = "p";
SFS2X.Requests.System.ObjectMessageRequest = SFS2X.Requests.System.GenericMessageRequest.extend({
    init: function (r, R, y) {
        this._super(), this._type = SFS2X.Requests.GenericMessageType.OBJECT_MSG, this._params = r, this._room = R, this._recipient = y
    }
});
SFS2X.Requests.System.SetRoomVariablesRequest = SFS2X.Requests._BaseRequest.extend({
    init: function (r, R) {
        this._super(SFS2X.Requests.SetRoomVariables), this._roomVariables = r, this._room = R
    }, validate: function (r) {
        var R = [];
        if (this._room != null ? this._room.containsUser(r.mySelf) || R.push("You are not joined in the target Room") : r.lastJoinedRoom == null && R.push("You are not joined in any Room"), (this._roomVariables == null || this._roomVariables.length == 0) && R.push("No variables were specified"), 0 < R.length) throw new SFS2X.Exceptions.SFSValidationError("SetRoomVariablesRequest Error", R)
    }, execute: function (r) {
        var R = [], y;
        for (y in this._roomVariables) {
            var E = this._roomVariables[y];
            E instanceof SFS2X.Entities.Variables.SFSRoomVariable && R.push(E.toArray())
        }
        this._room == null && (this._room = r.lastJoinedRoom), this._reqObj[this.constructor.KEY_VAR_LIST] = R, this._reqObj[this.constructor.KEY_VAR_ROOM] = this._room.id
    }
});
SFS2X.Requests.System.SetRoomVariablesRequest.KEY_VAR_ROOM = "r";
SFS2X.Requests.System.SetRoomVariablesRequest.KEY_VAR_LIST = "vl";
SFS2X.Requests.System.SetUserVariablesRequest = SFS2X.Requests._BaseRequest.extend({
    init: function (r) {
        this._super(SFS2X.Requests.SetUserVariables), this._userVariables = r
    }, validate: function () {
        var r = [];
        if ((this._userVariables == null || this._userVariables.length == 0) && r.push("No variables were specified"), 0 < r.length) throw new SFS2X.Exceptions.SFSValidationError("SetUserVariablesRequest Error", r)
    }, execute: function () {
        var r = [], R;
        for (R in this._userVariables) {
            var y = this._userVariables[R];
            y instanceof SFS2X.Entities.Variables.SFSUserVariable && r.push(y.toArray())
        }
        this._reqObj[this.constructor.KEY_VAR_LIST] = r
    }
});
SFS2X.Requests.System.SetUserVariablesRequest.KEY_USER = "u";
SFS2X.Requests.System.SetUserVariablesRequest.KEY_VAR_LIST = "vl";
SFS2X.Requests.System.ExtensionRequest = SFS2X.Requests._BaseRequest.extend({
    init: function (r, R, y) {
        this._super(SFS2X.Requests.CallExtension), this._targetController = 1, this._extCmd = r, this._params = R, this._room = y, this._params == null && (this._params = {})
    }, validate: function () {
        var r = [];
        if ((this._extCmd == null || this._extCmd.length == 0) && r.push("Missing extension command"), 0 < r.length) throw new SFS2X.Exceptions.SFSValidationError("ExtensionRequest Error", r)
    }, execute: function () {
        this._reqObj[this.constructor.KEY_CMD] = this._extCmd, this._reqObj[this.constructor.KEY_ROOM] = this._room == null ? -1 : this._room.id, this._reqObj[this.constructor.KEY_PARAMS] = this._params
    }
});
SFS2X.Requests.System.ExtensionRequest.KEY_CMD = "c";
SFS2X.Requests.System.ExtensionRequest.KEY_PARAMS = "p";
SFS2X.Requests.System.ExtensionRequest.KEY_ROOM = "r";
SFS2X.Requests.System.LeaveRoomRequest = SFS2X.Requests._BaseRequest.extend({
    init: function (r) {
        this._super(SFS2X.Requests.LeaveRoom), this._room = r
    }, validate: function (r) {
        if (1 > r.getJoinedRooms().length) throw new SFS2X.Exceptions.SFSValidationError("LeaveRoomRequest Error", ["You are not joined in any room"])
    }, execute: function () {
        this._room != null && (this._reqObj[this.constructor.KEY_ROOM_ID] = this._room.id)
    }
});
SFS2X.Requests.System.LeaveRoomRequest.KEY_ROOM_ID = "r";
SFS2X.Requests.System.SubscribeRoomGroupRequest = SFS2X.Requests._BaseRequest.extend({
    init: function (r) {
        this._super(SFS2X.Requests.SubscribeRoomGroup), this._groupId = r
    }, validate: function () {
        var r = [];
        if ((this._groupId == null || this._groupId.length == 0) && r.push("Invalid group id passed; must be a string with at least one character"), 0 < r.length) throw new SFS2X.Exceptions.SFSValidationError("SubscribeGroupRequest Error", r)
    }, execute: function () {
        this._reqObj[this.constructor.KEY_GROUP_ID] = this._groupId
    }
});
SFS2X.Requests.System.SubscribeRoomGroupRequest.KEY_GROUP_ID = "g";
SFS2X.Requests.System.SubscribeRoomGroupRequest.KEY_ROOM_LIST = "rl";
SFS2X.Requests.System.UnsubscribeRoomGroupRequest = SFS2X.Requests._BaseRequest.extend({
    init: function (r) {
        this._super(SFS2X.Requests.UnsubscribeRoomGroup), this._groupId = r
    }, validate: function () {
        var r = [];
        if ((this._groupId == null || this._groupId.length == 0) && r.push("Invalid group id passed; must be a string with at least one character"), 0 < r.length) throw new SFS2X.Exceptions.SFSValidationError("UnsubscribeGroupRequest Error", r)
    }, execute: function () {
        this._reqObj[this.constructor.KEY_GROUP_ID] = this._groupId
    }
});
SFS2X.Requests.System.UnsubscribeRoomGroupRequest.KEY_GROUP_ID = "g";
SFS2X.Requests.System.SpectatorToPlayerRequest = SFS2X.Requests._BaseRequest.extend({
    init: function (r) {
        this._super(SFS2X.Requests.SpectatorToPlayer), this._room = r
    }, validate: function (r) {
        if (1 > r.getJoinedRooms().length) throw new SFS2X.Exceptions.SFSValidationError("SpectatorToPlayerRequest Error", ["You are not joined in any room"])
    }, execute: function (r) {
        this._room == null && (this._room = r.lastJoinedRoom), this._reqObj[this.constructor.KEY_ROOM_ID] = this._room.id
    }
});
SFS2X.Requests.System.SpectatorToPlayerRequest.KEY_ROOM_ID = "r";
SFS2X.Requests.System.SpectatorToPlayerRequest.KEY_USER_ID = "u";
SFS2X.Requests.System.SpectatorToPlayerRequest.KEY_PLAYER_ID = "p";
SFS2X.Requests.System.PlayerToSpectatorRequest = SFS2X.Requests._BaseRequest.extend({
    init: function (r) {
        this._super(SFS2X.Requests.PlayerToSpectator), this._room = r
    }, validate: function (r) {
        if (1 > r.getJoinedRooms().length) throw new SFS2X.Exceptions.SFSValidationError("PlayerToSpectatorRequest Error", ["You are not joined in any room"])
    }, execute: function (r) {
        this._room == null && (this._room = r.lastJoinedRoom), this._reqObj[this.constructor.KEY_ROOM_ID] = this._room.id
    }
});
SFS2X.Requests.System.PlayerToSpectatorRequest.KEY_ROOM_ID = "r";
SFS2X.Requests.System.PlayerToSpectatorRequest.KEY_USER_ID = "u";
SFS2X.Requests.System.ChangeRoomCapacityRequest = SFS2X.Requests._BaseRequest.extend({
    init: function (r, R, y) {
        this._super(SFS2X.Requests.ChangeRoomCapacity), this._room = r, this._newMaxUsers = R, this._newMaxSpect = y
    }, validate: function () {
        var r = [];
        if (this._room == null && r.push("Provided Room is null"), 0 < r.length) throw new SFS2X.Exceptions.SFSValidationError("ChangeRoomCapacityRequest Error", r)
    }, execute: function () {
        this._reqObj[this.constructor.KEY_ROOM] = this._room.id, this._reqObj[this.constructor.KEY_USER_SIZE] = this._newMaxUsers, this._reqObj[this.constructor.KEY_SPEC_SIZE] = this._newMaxSpect
    }
});
SFS2X.Requests.System.ChangeRoomCapacityRequest.KEY_ROOM = "r";
SFS2X.Requests.System.ChangeRoomCapacityRequest.KEY_USER_SIZE = "u";
SFS2X.Requests.System.ChangeRoomCapacityRequest.KEY_SPEC_SIZE = "s";
SFS2X.Requests.System.PublicMessageRequest = SFS2X.Requests.System.GenericMessageRequest.extend({
    init: function (r, R, y) {
        this._super(), this._type = SFS2X.Requests.GenericMessageType.PUBLIC_MSG, this._message = r, this._room = y, this._params = R
    }
});
SFS2X.Requests.System.PrivateMessageRequest = SFS2X.Requests.System.GenericMessageRequest.extend({
    init: function (r, R, y) {
        this._super(), this._type = SFS2X.Requests.GenericMessageType.PRIVATE_MSG, this._message = r, this._recipient = R, this._params = y
    }
});
SFS2X.Requests.System.ModeratorMessageRequest = SFS2X.Requests.System.GenericMessageRequest.extend({
    init: function (r, R, y) {
        if (this._super(), R == null) throw new SFS2X.Exceptions.SFSError("Recipient mode cannot be null");
        this._type = SFS2X.Requests.GenericMessageType.MODERATOR_MSG, this._message = r, this._params = y, this._recipient = R.target, this._sendMode = R.mode
    }
});
SFS2X.Requests.System.AdminMessageRequest = SFS2X.Requests.System.GenericMessageRequest.extend({
    init: function (r, R, y) {
        if (this._super(), R == null) throw new SFS2X.Exceptions.SFSError("Recipient mode cannot be null");
        this._type = SFS2X.Requests.GenericMessageType.ADMING_MSG, this._message = r, this._params = y, this._recipient = R.target, this._sendMode = R.mode
    }
});
SFS2X.Requests.System.KickUserRequest = SFS2X.Requests._BaseRequest.extend({
    init: function (r, R, y) {
        this._super(SFS2X.Requests.KickUser), y == null && (y = 5), 0 > y && (y = 0), this._userId = r, this._message = R, this._delay = y
    }, validate: function (r) {
        var R = [];
        if (!r.mySelf.isModerator() && !r.mySelf.isAdmin() && R.push("You don't have enough permissions to execute this request"), 0 < R.length) throw new SFS2X.Exceptions.SFSValidationError("KickUserRequest Error", R)
    }, execute: function () {
        this._reqObj[this.constructor.KEY_USER_ID] = this._userId, this._reqObj[this.constructor.KEY_DELAY] = this._delay, this._message != null && 0 < this._message.length && (this._reqObj[this.constructor.KEY_MESSAGE] = this._message)
    }
});
SFS2X.Requests.System.KickUserRequest.KEY_USER_ID = "u";
SFS2X.Requests.System.KickUserRequest.KEY_MESSAGE = "m";
SFS2X.Requests.System.KickUserRequest.KEY_DELAY = "d";
SFS2X.Requests.System.BanUserRequest = SFS2X.Requests._BaseRequest.extend({
    init: function (r, R, y, E, C) {
        this._super(SFS2X.Requests.BanUser), y == null && (y = 1), E == null && (E = 5), C == null && (C = 24), this._userId = r, this._message = R, this._banMode = y, this._delay = E, this._durationHours = C
    }, validate: function (r) {
        var R = [];
        if (!r.mySelf.isModerator() && !r.mySelf.isAdmin() && R.push("You don't have enough permissions to execute this request"), 0 < R.length) throw new SFS2X.Exceptions.SFSValidationError("BanUserRequest Error", R)
    }, execute: function () {
        this._reqObj[this.constructor.KEY_USER_ID] = this._userId, this._reqObj[this.constructor.KEY_DELAY] = this._delay, this._reqObj[this.constructor.KEY_BAN_MODE] = this._banMode, this._reqObj[this.constructor.KEY_BAN_DURATION_HOURS] = this._durationHours, this._message != null && 0 < this._message.length && (this._reqObj[this.constructor.KEY_MESSAGE] = this._message)
    }
});
SFS2X.Requests.System.BanUserRequest.KEY_USER_ID = "u";
SFS2X.Requests.System.BanUserRequest.KEY_MESSAGE = "m";
SFS2X.Requests.System.BanUserRequest.KEY_DELAY = "d";
SFS2X.Requests.System.BanUserRequest.KEY_BAN_MODE = "b";
SFS2X.Requests.System.BanUserRequest.KEY_BAN_DURATION_HOURS = "dh";
SFS2X.Requests.System.ManualDisconnectionRequest = SFS2X.Requests._BaseRequest.extend({
    init: function () {
        this._super(SFS2X.Requests.ManualDisconnection)
    }, validate: function () {
    }, execute: function () {
    }
});
SFS2X.Requests.System.FindRoomsRequest = SFS2X.Requests._BaseRequest.extend({
    init: function (r, R, y) {
        this._super(SFS2X.Requests.FindRooms), y == null && (y = 0), this._matchExpr = r, this._groupId = R, this._limit = y
    }, validate: function () {
        var r = [];
        if (this._matchExpr == null && r.push("Missing match expression"), 0 < r.length) throw new SFS2X.Exceptions.SFSValidationError("FindRoomsRequest Error", r)
    }, execute: function () {
        this._reqObj[this.constructor.KEY_EXPRESSION] = this._matchExpr._toArray(), this._groupId != null && (this._reqObj[this.constructor.KEY_GROUP] = this._groupId), 0 < this._limit && (this._reqObj[this.constructor.KEY_LIMIT] = this._limit)
    }
});
SFS2X.Requests.System.FindRoomsRequest.KEY_EXPRESSION = "e";
SFS2X.Requests.System.FindRoomsRequest.KEY_GROUP = "g";
SFS2X.Requests.System.FindRoomsRequest.KEY_LIMIT = "l";
SFS2X.Requests.System.FindRoomsRequest.KEY_FILTERED_ROOMS = "fr";
SFS2X.Requests.System.FindUsersRequest = SFS2X.Requests._BaseRequest.extend({
    init: function (r, R, y) {
        this._super(SFS2X.Requests.FindUsers), y == null && (y = 0), this._matchExpr = r, this._target = R, this._limit = y
    }, validate: function () {
        var r = [];
        if (this._matchExpr == null && r.push("Missing match expression"), 0 < r.length) throw new SFS2X.Exceptions.SFSValidationError("FindUsersRequest Error", r)
    }, execute: function () {
        this._reqObj[this.constructor.KEY_EXPRESSION] = this._matchExpr._toArray(), this._target != null && (this._target instanceof SFS2X.Entities.SFSRoom ? this._reqObj[this.constructor.KEY_ROOM] = this._target.id : typeof this._target == "string" ? this._reqObj[this.constructor.KEY_GROUP] = this._target : this._log.warn("Unsupport target type for FindUsersRequest: " + this._target)), 0 < this._limit && (this._reqObj[this.constructor.KEY_LIMIT] = this._limit)
    }
});
SFS2X.Requests.System.FindUsersRequest.KEY_EXPRESSION = "e";
SFS2X.Requests.System.FindUsersRequest.KEY_GROUP = "g";
SFS2X.Requests.System.FindUsersRequest.KEY_ROOM = "r";
SFS2X.Requests.System.FindUsersRequest.KEY_LIMIT = "l";
SFS2X.Requests.System.FindUsersRequest.KEY_FILTERED_USERS = "fu";
SFS2X.Requests.System.PingPongRequest = SFS2X.Requests._BaseRequest.extend({
    init: function () {
        this._super(SFS2X.Requests.PingPong)
    }, validate: function () {
    }, execute: function () {
    }
});
SFS2X.Requests.MMO.SetUserPositionRequest = SFS2X.Requests._BaseRequest.extend({
    init: function (r, R) {
        this._super(SFS2X.Requests.SetUserPosition), this._pos = r, this._room = R
    }, validate: function (r) {
        var R = [];
        if (this._pos == null && R.push("Position must be a Vec3D instance"), this._room == null && (this._room = r.lastJoinedRoom), this._room instanceof SFS2X.Entities.MMORoom || R.push("Passed Room is not an MMORoom"), 0 < R.length) throw new SFS2X.Exceptions.SFSValidationError("SetUserPosition Error", R)
    }, execute: function () {
        this._reqObj[this.constructor.KEY_ROOM] = this._room.id, this._reqObj[this.constructor.KEY_VEC3D] = this._pos._toArray()
    }
});
SFS2X.Requests.MMO.SetUserPositionRequest.KEY_ROOM = "r";
SFS2X.Requests.MMO.SetUserPositionRequest.KEY_VEC3D = "v";
SFS2X.Requests.MMO.SetUserPositionRequest.KEY_PLUS_USER_LIST = "p";
SFS2X.Requests.MMO.SetUserPositionRequest.KEY_MINUS_USER_LIST = "m";
SFS2X.Requests.MMO.SetUserPositionRequest.KEY_PLUS_ITEM_LIST = "q";
SFS2X.Requests.MMO.SetUserPositionRequest.KEY_MINUS_ITEM_LIST = "n";
SFS2X.Requests.MMO.SetMMOItemVariables = {};
SFS2X.Requests.MMO.SetMMOItemVariables.KEY_ROOM_ID = "r";
SFS2X.Requests.MMO.SetMMOItemVariables.KEY_ITEM_ID = "i";
SFS2X.Requests.MMO.SetMMOItemVariables.KEY_VAR_LIST = "v";
SFS2X.Requests.BuddyList.InitBuddyListRequest = SFS2X.Requests._BaseRequest.extend({
    init: function () {
        this._super(SFS2X.Requests.InitBuddyList)
    }, validate: function (r) {
        var R = [];
        if (r.buddyManager.isInited() && R.push("Buddy List is already initialized"), 0 < R.length) throw new SFS2X.Exceptions.SFSValidationError("InitBuddyListRequest Error", R)
    }, execute: function () {
    }
});
SFS2X.Requests.BuddyList.InitBuddyListRequest.KEY_BLIST = "bl";
SFS2X.Requests.BuddyList.InitBuddyListRequest.KEY_BUDDY_STATES = "bs";
SFS2X.Requests.BuddyList.InitBuddyListRequest.KEY_MY_VARS = "mv";
SFS2X.Requests.BuddyList.AddBuddyRequest = SFS2X.Requests._BaseRequest.extend({
    init: function (r) {
        this._super(SFS2X.Requests.AddBuddy), this._name = r
    }, validate: function (r) {
        var R = [];
        if (r.buddyManager.isInited() || R.push("Buddy List not yet initialized; please send an InitBuddyRequest first"), (this._name == null || 1 > this._name.length) && R.push("Invalid buddy name (null or empty string)"), r.buddyManager.getMyOnlineState() == !1 && R.push("Can't add a buddy while you are offline in the Buddy List system"), r = r.buddyManager.getBuddyByName(this._name), r != null && !r.isTemp() && R.push("Can't add buddy '" + this._name + "' because it is already in your list"), 0 < R.length) throw new SFS2X.Exceptions.SFSValidationError("AddBuddyRequest Error", R)
    }, execute: function () {
        this._reqObj[this.constructor.KEY_BUDDY_NAME] = this._name
    }
});
SFS2X.Requests.BuddyList.AddBuddyRequest.KEY_BUDDY_NAME = "bn";
SFS2X.Requests.BuddyList.BlockBuddyRequest = SFS2X.Requests._BaseRequest.extend({
    init: function (r, R) {
        this._super(SFS2X.Requests.BlockBuddy), this._name = r, this._blocked = R
    }, validate: function (r) {
        var R = [];
        if (r.buddyManager.isInited() || R.push("Buddy List not yet initialized; please send an InitBuddyRequest first"), (this._name == null || 1 > this._name.length) && R.push("Invalid buddy name (null or empty string)"), r.buddyManager.getMyOnlineState() == !1 && R.push("Can't block a buddy while you are offline in the Buddy List system"), r = r.buddyManager.getBuddyByName(this._name), r == null ? R.push("Can't block buddy '" + this._name + "' because it isn't in your list") : r.isBlocked() == this._blocked && R.push("Block flag is already in the requested '" + this._blocked + "' state for buddy " + this._name), 0 < R.length) throw new SFS2X.Exceptions.SFSValidationError("BlockBuddyRequest Error", R)
    }, execute: function () {
        this._reqObj[this.constructor.KEY_BUDDY_NAME] = this._name, this._reqObj[this.constructor.KEY_BUDDY_BLOCK_STATE] = this._blocked
    }
});
SFS2X.Requests.BuddyList.BlockBuddyRequest.KEY_BUDDY_NAME = "bn";
SFS2X.Requests.BuddyList.BlockBuddyRequest.KEY_BUDDY_BLOCK_STATE = "bs";
SFS2X.Requests.BuddyList.RemoveBuddyRequest = SFS2X.Requests._BaseRequest.extend({
    init: function (r) {
        this._super(SFS2X.Requests.RemoveBuddy), this._name = r
    }, validate: function (r) {
        var R = [];
        if (r.buddyManager.isInited() || R.push("Buddy List not yet initialized; please send an InitBuddyRequest first"), r.buddyManager.getMyOnlineState() == !1 && R.push("Can't remove a buddy while you are offline in the Buddy List system"), r.buddyManager.containsBuddy(this._name) || R.push("Can't remove buddy '" + this._name + "' because it isn't in your list"), 0 < R.length) throw new SFS2X.Exceptions.SFSValidationError("RemoveBuddyRequest Error", R)
    }, execute: function () {
        this._reqObj[this.constructor.KEY_BUDDY_NAME] = this._name
    }
});
SFS2X.Requests.BuddyList.RemoveBuddyRequest.KEY_BUDDY_NAME = "bn";
SFS2X.Requests.BuddyList.SetBuddyVariablesRequest = SFS2X.Requests._BaseRequest.extend({
    init: function (r) {
        this._super(SFS2X.Requests.SetBuddyVariables), this._buddyVariables = r
    }, validate: function (r) {
        var R = [];
        if (r.buddyManager.isInited() || R.push("Buddy List not yet initialized; please send an InitBuddyRequest first"), r.buddyManager.getMyOnlineState() == !1 && R.push("Can't set Buddy Variables while you are offline in the Buddy List system"), (this._buddyVariables == null || this._buddyVariables.length == 0) && R.push("No Buddy Variables to set have been specified"), 0 < R.length) throw new SFS2X.Exceptions.SFSValidationError("SetBuddyVariablesRequest Error", R)
    }, execute: function () {
        var r = [], R;
        for (R in this._buddyVariables) {
            var y = this._buddyVariables[R];
            y instanceof SFS2X.Entities.Variables.SFSBuddyVariable && r.push(y.toArray())
        }
        this._reqObj[this.constructor.KEY_BUDDY_VARS] = r
    }
});
SFS2X.Requests.BuddyList.SetBuddyVariablesRequest.KEY_BUDDY_NAME = "bn";
SFS2X.Requests.BuddyList.SetBuddyVariablesRequest.KEY_BUDDY_VARS = "bv";
SFS2X.Requests.BuddyList.GoOnlineRequest = SFS2X.Requests._BaseRequest.extend({
    init: function (r) {
        this._super(SFS2X.Requests.GoOnline), this._online = r
    }, validate: function (r) {
        var R = [];
        if (r.buddyManager.isInited() || R.push("Buddy List not yet initialized; please send an InitBuddyRequest first"), 0 < R.length) throw new SFS2X.Exceptions.SFSValidationError("GoOnlineRequest Error", R)
    }, execute: function (r) {
        r.buddyManager._setMyOnlineState(this._online), this._reqObj[this.constructor.KEY_ONLINE] = this._online
    }
});
SFS2X.Requests.BuddyList.GoOnlineRequest.KEY_ONLINE = "o";
SFS2X.Requests.BuddyList.GoOnlineRequest.KEY_BUDDY_NAME = "bn";
SFS2X.Requests.BuddyList.GoOnlineRequest.KEY_BUDDY_ID = "bi";
SFS2X.Requests.BuddyList.BuddyMessageRequest = SFS2X.Requests.System.GenericMessageRequest.extend({
    init: function (r, R, y) {
        this._super(), this._type = SFS2X.Requests.GenericMessageType.BUDDY_MSG, this._message = r, this._recipient = R != null ? R.id : -1, this._params = y
    }
});
SFS2X.Requests.Game.InviteUsersRequest = SFS2X.Requests._BaseRequest.extend({
    init: function (r, R, y) {
        this._super(SFS2X.Requests.InviteUsers), this._invitedUsers = r, this._secondsForAnswer = R, this._params = y
    }, validate: function () {
        var r = [];
        if ((this._invitedUsers == null || 1 > this._invitedUsers.length) && r.push("No invitation(s) to send"), this._invitedUsers.length > this.constructor.MAX_INVITATIONS_FROM_CLIENT_SIDE && r.push("Too many invitations; " + this.constructor.MAX_INVITATIONS_FROM_CLIENT_SIDE + " max are allowed from client side"), (this._secondsForAnswer < this.constructor.MIN_EXPIRY_TIME || this._secondsForAnswer > this.constructor.MAX_EXPIRY_TIME) && r.push("secondsForAnswer value is out of range (min: " + this.constructor.MIN_EXPIRY_TIME + "; max: " + this.constructor.MAX_EXPIRY_TIME + ")"), 0 < r.length) throw new SFS2X.Exceptions.SFSValidationError("InviteUsersRequest Error", r)
    }, execute: function (r) {
        var R = [], y;
        for (y in this._invitedUsers) {
            var E = this._invitedUsers[y];
            (E instanceof SFS2X.Entities.SFSUser || E instanceof SFS2X.Entities.SFSBuddy) && E != r.mySelf && R.push(E.id)
        }
        this._reqObj[this.constructor.KEY_INVITED_USERS] = R, this._reqObj[this.constructor.KEY_TIME] = this._secondsForAnswer, this._params != null && (this._reqObj[this.constructor.KEY_PARAMS] = this._params)
    }
});
SFS2X.Requests.Game.InviteUsersRequest.KEY_USER = "u";
SFS2X.Requests.Game.InviteUsersRequest.KEY_USER_ID = "ui";
SFS2X.Requests.Game.InviteUsersRequest.KEY_INVITATION_ID = "ii";
SFS2X.Requests.Game.InviteUsersRequest.KEY_TIME = "t";
SFS2X.Requests.Game.InviteUsersRequest.KEY_PARAMS = "p";
SFS2X.Requests.Game.InviteUsersRequest.KEY_INVITEE_ID = "ee";
SFS2X.Requests.Game.InviteUsersRequest.KEY_INVITED_USERS = "iu";
SFS2X.Requests.Game.InviteUsersRequest.KEY_REPLY_ID = "ri";
SFS2X.Requests.Game.InviteUsersRequest.MAX_INVITATIONS_FROM_CLIENT_SIDE = 8;
SFS2X.Requests.Game.InviteUsersRequest.MIN_EXPIRY_TIME = 5;
SFS2X.Requests.Game.InviteUsersRequest.MAX_EXPIRY_TIME = 300;
SFS2X.Requests.Game.InvitationReplyRequest = SFS2X.Requests._BaseRequest.extend({
    init: function (r, R, y) {
        this._super(SFS2X.Requests.InvitationReply), this._invitation = r, this._reply = R, this._params = y
    }, validate: function () {
        var r = [];
        if (this._invitation == null && r.push("Missing invitation object"), 0 < r.length) throw new SFS2X.Exceptions.SFSValidationError("InvitationReplyRequest Error", r)
    }, execute: function () {
        this._reqObj[this.constructor.KEY_INVITATION_ID] = this._invitation.id, this._reqObj[this.constructor.KEY_INVITATION_REPLY] = this._reply, this._params != null && (this._reqObj[this.constructor.KEY_INVITATION_PARAMS] = this._params)
    }
});
SFS2X.Requests.Game.InvitationReplyRequest.KEY_INVITATION_ID = "i";
SFS2X.Requests.Game.InvitationReplyRequest.KEY_INVITATION_REPLY = "r";
SFS2X.Requests.Game.InvitationReplyRequest.KEY_INVITATION_PARAMS = "p";
SFS2X.Requests.Game.CreateSFSGameRequest = SFS2X.Requests._BaseRequest.extend({
    init: function (r) {
        this._super(SFS2X.Requests.CreateSFSGame), this._settings = r, this._createRoomRequest = new SFS2X.Requests.System.CreateRoomRequest(r, !1, null)
    }, validate: function (r) {
        var R = [];
        try {
            this._createRoomRequest.validate(r)
        } catch (y) {
            R = y.getErrors()
        }
        if (this._settings.minPlayersToStartGame > this._settings.maxUsers && R.push("Minimum number of players to start the game can't be greater than the Room's maximum number of users"), (this._settings.invitationExpiryTime < SFS2X.Requests.Game.InviteUsersRequest.MIN_EXPIRY_TIME || this._settings.invitationExpiryTime > SFS2X.Requests.Game.InviteUsersRequest.MAX_EXPIRY_TIME) && R.push("Invitation expiration time value is out of range (min: " + SFS2X.Requests.Game.InviteUsersRequest.MIN_EXPIRY_TIME + "; max: " + SFS2X.Requests.Game.InviteUsersRequest.MAX_EXPIRY_TIME + ")"), this._settings.invitedPlayers != null && this._settings.invitedPlayers.length > SFS2X.Requests.Game.InviteUsersRequest.MAX_INVITATIONS_FROM_CLIENT_SIDE && R.push("Can't invite more than " + SFS2X.Requests.Game.InviteUsersRequest.MAX_INVITATIONS_FROM_CLIENT_SIDE + " players from client side"), 0 < R.length) throw new SFS2X.Exceptions.SFSValidationError("CreateSFSGameRequest Error", R)
    }, execute: function (r) {
        if (this._createRoomRequest.execute(r), this._reqObj = this._createRoomRequest._reqObj, this._reqObj[this.constructor.KEY_IS_PUBLIC] = this._settings.isPublic, this._reqObj[this.constructor.KEY_MIN_PLAYERS] = this._settings.minPlayersToStartGame, this._reqObj[this.constructor.KEY_INVITATION_EXPIRY] = this._settings.invitationExpiryTime, this._reqObj[this.constructor.KEY_LEAVE_ROOM] = this._settings.leaveLastJoinedRoom, this._reqObj[this.constructor.KEY_NOTIFY_GAME_STARTED] = this._settings.notifyGameStarted, this._settings.playerMatchExpression != null && (this._reqObj[this.constructor.KEY_PLAYER_MATCH_EXP] = this._settings.playerMatchExpression._toArray()), this._settings.spectatorMatchExpression != null && (this._reqObj[this.constructor.KEY_SPECTATOR_MATCH_EXP] = this._settings.spectatorMatchExpression._toArray()), this._settings.invitedPlayers != null) {
            var r = [], R;
            for (R in this._settings.invitedPlayers) {
                var y = this._settings.invitedPlayers[R];
                (y instanceof SFS2X.Entities.SFSUser || y instanceof SFS2X.Entities.SFSBuddy) && r.push(y.id)
            }
            this._reqObj[this.constructor.KEY_INVITED_PLAYERS] = r
        }
        this._settings.searchableRooms != null && (this._reqObj[this.constructor.KEY_SEARCHABLE_ROOMS] = this._settings.searchableRooms), this._settings.invitationParams != null && (this._reqObj[this.constructor.KEY_INVITATION_PARAMS] = this._settings.invitationParams)
    }
});
SFS2X.Requests.Game.CreateSFSGameRequest.KEY_IS_PUBLIC = "gip";
SFS2X.Requests.Game.CreateSFSGameRequest.KEY_MIN_PLAYERS = "gmp";
SFS2X.Requests.Game.CreateSFSGameRequest.KEY_INVITED_PLAYERS = "ginp";
SFS2X.Requests.Game.CreateSFSGameRequest.KEY_SEARCHABLE_ROOMS = "gsr";
SFS2X.Requests.Game.CreateSFSGameRequest.KEY_PLAYER_MATCH_EXP = "gpme";
SFS2X.Requests.Game.CreateSFSGameRequest.KEY_SPECTATOR_MATCH_EXP = "gsme";
SFS2X.Requests.Game.CreateSFSGameRequest.KEY_INVITATION_EXPIRY = "gie";
SFS2X.Requests.Game.CreateSFSGameRequest.KEY_LEAVE_ROOM = "glr";
SFS2X.Requests.Game.CreateSFSGameRequest.KEY_NOTIFY_GAME_STARTED = "gns";
SFS2X.Requests.Game.CreateSFSGameRequest.KEY_INVITATION_PARAMS = "ip";
SFS2X.Requests.Game.QuickJoinGameRequest = SFS2X.Requests._BaseRequest.extend({
    init: function (r, R, y) {
        this._super(SFS2X.Requests.QuickJoinGame), this._matchExpression = r, this._whereToSearch = R, this._roomToLeave = y
    }, validate: function () {
        var r = [];
        if (this._whereToSearch == null || 1 > this._whereToSearch.length ? r.push("Missing lis of Rooms or Group name where to search the game to join") : this._whereToSearch.length > this.constructor.MAX_ROOMS && r.push("Too many Rooms specified in list where to search the game to join; client limit is: " + this.constructor.MAX_ROOMS), 0 < r.length) throw new SFS2X.Exceptions.SFSValidationError("CreateSFSGameRequest Error", r)
    }, execute: function () {
        if (typeof this._whereToSearch[0] == "string") this._reqObj[this.constructor.KEY_GROUP_LIST] = this._whereToSearch; else if (this._whereToSearch[0] instanceof SFS2X.Entities.SFSRoom) {
            for (var r = [], R = 0; R < this._whereToSearch.length; R++) {
                var y = this._whereToSearch[R];
                y instanceof SFS2X.Entities.SFSRoom && r.push(y.id)
            }
            this._reqObj[this.constructor.KEY_ROOM_LIST] = r
        } else throw new SFS2X.Exceptions.SFSError("Invalid type in whereToSearch parameter");
        this._roomToLeave != null && (this._reqObj[this.constructor.KEY_ROOM_TO_LEAVE] = this._roomToLeave.id), this._matchExpression != null && (this._reqObj[this.constructor.KEY_MATCH_EXPRESSION] = this._matchExpression._toArray())
    }
});
SFS2X.Requests.Game.QuickJoinGameRequest.KEY_ROOM_LIST = "rl";
SFS2X.Requests.Game.QuickJoinGameRequest.KEY_GROUP_LIST = "gl";
SFS2X.Requests.Game.QuickJoinGameRequest.KEY_ROOM_TO_LEAVE = "tl";
SFS2X.Requests.Game.QuickJoinGameRequest.KEY_MATCH_EXPRESSION = "me";
SFS2X.Requests.Game.QuickJoinGameRequest.MAX_ROOMS = 32;
SFS2X.Requests.Handshake = 0;
SFS2X.Requests.Login = 1;
SFS2X.Requests.Logout = 2;
SFS2X.Requests.JoinRoom = 4;
SFS2X.Requests.CreateRoom = 6;
SFS2X.Requests.GenericMessage = 7;
SFS2X.Requests.ChangeRoomName = 8;
SFS2X.Requests.ChangeRoomPassword = 9;
SFS2X.Requests.SetRoomVariables = 11;
SFS2X.Requests.SetUserVariables = 12;
SFS2X.Requests.CallExtension = 13;
SFS2X.Requests.LeaveRoom = 14;
SFS2X.Requests.SubscribeRoomGroup = 15;
SFS2X.Requests.UnsubscribeRoomGroup = 16;
SFS2X.Requests.SpectatorToPlayer = 17;
SFS2X.Requests.PlayerToSpectator = 18;
SFS2X.Requests.ChangeRoomCapacity = 19;
SFS2X.Requests.KickUser = 24;
SFS2X.Requests.BanUser = 25;
SFS2X.Requests.ManualDisconnection = 26;
SFS2X.Requests.FindRooms = 27;
SFS2X.Requests.FindUsers = 28;
SFS2X.Requests.PingPong = 29;
SFS2X.Requests.SetUserPosition = 30;
SFS2X.Requests.InitBuddyList = 200;
SFS2X.Requests.AddBuddy = 201;
SFS2X.Requests.BlockBuddy = 202;
SFS2X.Requests.RemoveBuddy = 203;
SFS2X.Requests.SetBuddyVariables = 204;
SFS2X.Requests.GoOnline = 205;
SFS2X.Requests.InviteUsers = 300;
SFS2X.Requests.InvitationReply = 301;
SFS2X.Requests.CreateSFSGame = 302;
SFS2X.Requests.QuickJoinGame = 303;
SFS2X.Requests.getRequestNameFromId = function (r) {
    for (var R in SFS2X.Requests) if (SFS2X.Requests[R] == r) return R;
    return null
};
SFS2X.Requests.RoomSettings = Class.extend({
    init: function (r) {
        this.name = r, this.password = "", this.groupId = "default", this.isGame = !1, this.maxUsers = 10, this.maxSpectators = 0, this.maxVariables = 5, this.variables = [], this.extension = this.events = this.permissions = null
    }
});
SFS2X.Requests.Game.SFSGameSettings = SFS2X.Requests.RoomSettings.extend({
    init: function (r) {
        this._super(r), this.isPublic = !0, this.minPlayersToStartGame = 2, this.searchableRooms = this.invitedPlayers = null, this.invitationExpiryTime = 15, this.leaveLastJoinedRoom = !0, this.notifyGameStarted = !1, this.invitationParams = this.spectatorMatchExpression = this.playerMatchExpression = null
    }
});
SFS2X.Requests.MMO.MMORoomSettings = SFS2X.Requests.RoomSettings.extend({
    init: function (r) {
        this._super(r), this.mapLimits = this.defaultAOI = null, this.userMaxLimboSeconds = 50, this.proximityListUpdateMillis = 250, this.sendAOIEntryPoint = !0
    }
});
SFS2X.Requests.RoomPermissions = function () {
    this.allowPasswordStateChange = this.allowNameChange = !1, this.allowPublicMessages = !0, this.allowResizing = !1
};
SFS2X.Requests.RoomEvents = function () {
    this.allowUserVariablesUpdate = this.allowUserExit = this.allowUserEnter = this.allowUserCountChange = !1
};
SFS2X.Requests.RoomExtension = function (r, R) {
    this.id = r, this.className = R, this.propertiesFile = ""
};
SFS2X.Requests.MMO.MapLimits = function (r, R) {
    if (r == null || R == null) throw new SFS2X.Exceptions.SFSError("Map limits arguments must be both non null!");
    this.lowerLimit = r, this.higherLimit = R
};
SFS2X.Requests.GenericMessageType = {};
SFS2X.Requests.GenericMessageType.PUBLIC_MSG = 0;
SFS2X.Requests.GenericMessageType.PRIVATE_MSG = 1;
SFS2X.Requests.GenericMessageType.MODERATOR_MSG = 2;
SFS2X.Requests.GenericMessageType.ADMING_MSG = 3;
SFS2X.Requests.GenericMessageType.OBJECT_MSG = 4;
SFS2X.Requests.GenericMessageType.BUDDY_MSG = 5;
SFS2X.Requests.MessageRecipientMode = function (r, R) {
    if (r < this.TO_USER || r > this.TO_ZONE) throw new SFS2X.Exceptions.SFSError("Illegal recipient mode: " + r);
    this.mode = r, this.target = R
};
SFS2X.Requests.MessageRecipientMode.TO_USER = 0;
SFS2X.Requests.MessageRecipientMode.TO_ROOM = 1;
SFS2X.Requests.MessageRecipientMode.TO_GROUP = 2;
SFS2X.Requests.MessageRecipientMode.TO_ZONE = 3;
SFS2X.Requests.BanMode = {};
SFS2X.Requests.BanMode.BY_ADDRESS = 0;
SFS2X.Requests.BanMode.BY_NAME = 1;
SFS2X.SocketEngine = function (r) {
    this.isConnecting = this.isConnected = !1, this.reconnectionSeconds = 0, this._controllers = {}, this._log = SFS2X.Logger, this._socket = null, this._maxMessageSize = 1e4, this._sfs = r, this._lastTcpPort = 0, this._reconnectionDelayMillis = 1e3, this._attemptingReconnection = this._isReconnecting = !1, this._eventDispatcher = new SFS2X.EventDispatcher, this._disconnectionReason = SFS2X.Utils.ClientDisconnectionReason.UNKNOWN
};
SFS2X.SocketEngine.prototype.connect = function (r, R, y) {
    this.isConnected ? this._log.error("Connection is already active") : this.isConnecting ? this._log.error("A connection attempt is already in progress") : (this.isConnecting = !0, this._socket = new WebSocket("wss" + (y ? "s" : "") + "://" + r + ":" + R + "/websocket"), this._socket._scope = this, this._socket.onopen = this._onSocketConnect, this._socket.onclose = this._onSocketDisconnect, this._socket.onmessage = this._onSocketData, this._socket.onerror = this._onSocketError)
};
SFS2X.SocketEngine.prototype.disconnect = function (r) {
    this._disconnectionReason = r, this._socket.close()
};
SFS2X.SocketEngine.prototype.addEventListener = function (r, R, y) {
    this._eventDispatcher.addEventListener(r, R, y)
};
SFS2X.SocketEngine.prototype.removeEventListener = function (r, R) {
    this._eventDispatcher.removeEventListener(r, R)
};
SFS2X.SocketEngine.prototype.addController = function (r, R) {
    this._controllers[r] == null && (this._controllers[r] = R)
};
SFS2X.SocketEngine.prototype.removeController = function (r) {
    delete this._controllers[r]
};
SFS2X.SocketEngine.prototype.send = function (r) {
    r = this._encodeMessage(r), this._socket.send(r)
};
SFS2X.SocketEngine.prototype._decodeMessage = function (r) {
    return JSON.parse(r)
};
SFS2X.SocketEngine.prototype._encodeMessage = function (r) {
    return JSON.stringify(r)
};
SFS2X.SocketEngine.prototype._onSocketConnect = function () {
    this._scope.isConnected = !0, this._scope.isConnecting = !1, this._scope._log.debug("SOCKET CONNECTION OK"), this._scope._eventDispatcher.dispatchEvent(SFS2X.SocketEvent.CONNECT, {
        success: !0,
        isReconnection: this._scope._attemptingReconnection
    })
};
SFS2X.SocketEngine.prototype._onSocketDisconnect = function () {
    if (this._scope.isConnected = !1, this._scope.isConnecting) {
        this._scope.isConnecting = !1;
        var r = {success: !1, isReconnection: this._scope._attemptingReconnection};
        this._scope._eventDispatcher.dispatchEvent(SFS2X.SocketEvent.CONNECT, r)
    } else r = {reason: this._scope._disconnectionReason}, this._scope._eventDispatcher.dispatchEvent(SFS2X.SocketEvent.DISCONNECT, r), this._scope._disconnectionReason = SFS2X.Utils.ClientDisconnectionReason.UNKNOWN
};
SFS2X.SocketEngine.prototype._onSocketData = function (r) {
    this._scope._eventDispatcher.dispatchEvent(SFS2X.SocketEvent.DATA, this._scope._decodeMessage(r.data))
};
SFS2X.SocketEngine.prototype._onSocketError = function (r) {
    this._scope._eventDispatcher.dispatchEvent(SFS2X.SocketEvent.IOERROR, r.data)
};
SFS2X.SocketEvent = {CONNECT: "socketConnect", DISCONNECT: "socketDisconnect", DATA: "data", IOERROR: "socketIOError"};
const useGameHallinfoFilter = () => {
        const [r, R] = React.useState({
            platformType: PlatformType.DragonHall,
            tableInfos: [],
            onlineCount: 0,
            goodRoadInfos: []
        }), [y] = React.useContext(UserInfoContext), {preloadConfig: E} = React.useContext(ServerConfigContext), [C, x] = React.useState(), [B, N] = React.useState({
            platformType: PlatformType.DragonHall,
            tableInfos: [],
            onlineCount: 0,
            goodRoadInfos: []
        }), L = y.suffix;
        TableStatus.Maintenance;
        const O = React.useMemo(() => {
            if (E) {
                const ce = E.whiteLabel, ie = ce.gamesBlacklist, Be = ce.supportedGamesTypes,
                    ve = (Re, Ce) => L && Object.prototype.hasOwnProperty.call(Ce, Re) ? !Ce[Re].includes(L) : !0;
                return Object.entries(Be).filter(([Re, Ce]) => Ce === !0 && ve(Re, ie)).map(([Re]) => Re)
            }
            return []
        }, [E, L]), D = React.useMemo(() => O.map(ce => SupportedGamesTypesMapping[ce]), [O]), z = React.useCallback(ce => {
            x(ce)
        }, []), F = React.useCallback((ce, ie) => {
            if (E) {
                const Be = E.whiteLabel;
                Be.supportedGamesTypes, Be.gamesBlacklist, Be.sexyGames, Be.classicBaccaratGames;
                let ve = SupportedGamesTypesMapping[ie];
                return ve === void 0 ? !1 : O.includes(ve)
            }
            return !1
        }, [E, L, O]), _e = React.useCallback((ce, ie) => {
            if (E) {
                let Be = SupportedGamesTypesMapping[ie];
                const ve = E.whiteLabel;
                ve.supportedGamesTypes;
                const Re = ve.gamesBlacklist;
                if (Re && Object.prototype.hasOwnProperty.call(Re, Be)) return !Re[Be].find(Ce => Ce == ce)
            }
            return !1
        }, [E]), Y = React.useCallback(ce => {
            var Ce;
            if (!E) return !0;
            const ie = SupportedGamesTypesMapping[ce], Be = (Ce = E.whiteLabel) == null ? void 0 : Ce.altGamesTypes;
            if (!Be || !Object.prototype.hasOwnProperty.call(Be, ie)) {
                const Ne = CombineGamesTypes[ie];
                return Ne && Ne.includes(ce) && ce.toString().includes("Alt"), !0
            }
            const ve = Be[ie], Re = parseInt(ce.toString().split("_")[0]);
            return ve === Re
        }, [E]);
        React.useEffect(() => {
            me()
        }, [r]);
        const H = React.useCallback(ce => {
            const ie = Y(ce.gameType), Be = F(ce.tableName, ce.gameType), ve = _e(ce.tableName, ce.gameType), Re = !0,
                Ce = C && (C.toString().startsWith("1") ? ce.gameType.toString().startsWith(C.toString().charAt(0)) : ce.gameType === parseInt(C.toString())) || !0;
            return Be && Re && Ce && ve && ie
        }, [O, C]), me = React.useCallback(() => {
            if (!r || r.tableInfos.length <= 0) return;
            let ce = r.tableInfos.filter(ie => H(ie)).sort((ie, Be) => (ie.tableStatus === TableStatus.Maintenance ? 1 : 0) - (Be.tableStatus === TableStatus.Maintenance ? 1 : 0));
            N({...r, tableInfos: ce})
        }, [O, r]);
        return {filteredGameHallInfo: B, gametypeSelected: z, setGameHallInfo: R, gameHallInfo: r, supportGameTypesValue: D}
    }, GameHallContext = React.createContext({
        gameHallInfo: {
            platformType: PlatformType.DragonHall,
            tableInfos: [],
            onlineCount: 0,
            goodRoadInfos: []
        },
        filteredGameHallInfo: {platformType: PlatformType.DragonHall, tableInfos: [], onlineCount: 0, goodRoadInfos: []},
        setGameHallInfo: () => {
        },
        gametypeSelected: () => {
        },
        supportGameTypesValue: []
    }), GameHallProvider = r => jsx(GameHallContext.Provider, {value: {...useGameHallinfoFilter()}, children: r.children}),
    defaultVipInfo = {}, defaultTableInfo = {
        tableId: -1,
        tableName: "",
        gameType: GameType.Baccarat,
        gameStatus: {tableId: -1, countDown: -1, inningsID: -1, gameRoundId: "", tableStatus: TableStatus.Init},
        dealerName: "",
        betPersons: [],
        betAmounts: [],
        currentShoeGameResult: [],
        allPlayersBetInfo: []
    }, GameTableContext = React.createContext({
        gameTableInfo: {
            enterType: EnterType.Normal,
            tableInfo: {...defaultTableInfo},
            altGameType: AltGameType.None
        }, setGameTableInfo: () => {
        }, getTableVideoUrl: () => {
        }, getUpdatedBetStatistics: () => null, videoUrls: [], betTypeMap: []
    }), GameTableProvider = r => {
        const [R, y] = React.useState({
            enterType: EnterType.Normal,
            tableInfo: {...defaultTableInfo},
            altGameType: AltGameType.None
        }), [E] = React.useContext(UserInfoContext);
        let {systemJsonData: C, preloadConfig: x, allReady: B} = React.useContext(ServerConfigContext),
            N = React.useRef([]);
        const L = useBetTypeMap(R.tableInfo.gameType, R.altGameType), O = React.useCallback(() => {
            let z = R.tableInfo.allPlayersBetInfo;
            if (z && z.length > 0) {
                let _e = L;
                if (z.length > 0) {
                    const Y = [];
                    return _e.reduce((me, ce) => {
                        let ie = {people: 0, amounts: 0}, Be = z.find(ve => ve.betType == ce);
                        return Be && (ie = {people: Be.betPerson, amounts: Be.betAmount * E.exchangeRate}), me.push(ie), me
                    }, Y)
                }
            }
            const F = L.length;
            return Array.from({length: F}, () => ({people: 0, amounts: 0}))
        }, [R.tableInfo.allPlayersBetInfo]), D = React.useCallback(z => {
            var Y;
            B || Logger$1.error("System json not ready");
            let F = (Y = C == null ? void 0 : C.videos.find(H => H.id == R.tableInfo.tableName)) == null ? void 0 : Y.name;
            if (!F) return Logger$1.warn(`Game table: ${R.tableInfo.tableName} live video not available from system json`), null;
            let _e = `${C == null ? void 0 : C.videoUrls[z - 1].url}${F}`;
            return N.current = C == null ? void 0 : C.videoUrls, _e
        }, [R]);
        return jsx(GameTableContext.Provider, {
            value: {
                videoUrls: N,
                gameTableInfo: R,
                setGameTableInfo: y,
                getTableVideoUrl: D,
                betTypeMap: L,
                getUpdatedBetStatistics: O
            }, children: r.children
        })
    }, useMultiGameTable = r => ({betTypeMap: useBetTypeMap(r.tableInfo.gameType, r.altGameType), gameTableInfo: r}),
    useGameTableContext = r => r ? {...useMultiGameTable(r)} : {...React.useContext(GameTableContext)},
    defaultGameTableStatus = {tableId: -1, tableStatus: TableStatus.Init, countDown: -1}, defaultCountDown = {
        tableId: -1,
        gameRoundId: -1,
        staticCountDown: -1,
        dynamicCountDown: -1,
        timestamp: new Date().valueOf()
    }, GameTableStatusContext = React.createContext({
        gameStatus: {...defaultGameTableStatus}, setGameStatus: () => {
        }, gameRoundStatus: void 0, setGameRoundStatus: () => {
        }, countDown: {...defaultCountDown}, setCountDown: () => {
        }, setVerificationEnable: () => {
        }, setVerified: () => {
        }, verificationEnable: !0, isVerified: !1
    }), GameStatusProvider = r => {
        const [R, y] = React.useState({...defaultGameTableStatus}), [E, C] = React.useState(), [x, B] = React.useState(!0), [N, L] = React.useState(!1), [O, D] = React.useState({...defaultCountDown});
        return jsx(GameTableStatusContext.Provider, {
            value: {
                isVerified: N,
                setVerified: L,
                verificationEnable: x,
                setVerificationEnable: B,
                gameStatus: R,
                setGameStatus: y,
                gameRoundStatus: E,
                setGameRoundStatus: C,
                countDown: O,
                setCountDown: D
            }, children: r.children
        })
    }, model_handicapInfo = {MODELNAME: "handicapInfo", AA: "handicapId", BB: "betLimitLow", CC: "betLimitHigh"},
    model_vipHandicapInfo = {MODELNAME: "vipHandicapInfo", AA: "vipHandicapId", BB: "betLimitLow", CC: "betLimitHigh"},
    model_player = {
        MODELNAME: "userData",
        AA: "userId",
        BB: "userName",
        CC: "loginTime",
        DD: "amount",
        FF: model_handicapInfo,
        GG: "managerId",
        JJ: "level",
        KK: "totalBets",
        LL: "currency",
        MM: "validBets",
        NN: "points",
        OO: "duration",
        PP: "exchangeRate",
        QQ: "nickname",
        RR: "avatar",
        SS: "isFreeOfCommission"
    }, model_notice = {MODELNAME: "model_notice", AA: "msgId", BB: "title", CC: "content", DD: "url"},
    model_gameStatus = {
        MODELNAME: "gameStatus",
        AA: "tableId",
        BB: "inningsID",
        CC: "gameRoundId",
        DD: "tableStatus",
        GG: "lotteryResultDetail1",
        HH: "lotteryResultDetail2",
        JJ: "lotteryResultDetail3",
        KK: "lotteryResultDetail4",
        II: "brandbg",
        LL: "burnCard",
        NN: "currentGameRoundWinResult",
        OO: "rawGameResult",
        PP: "additionalBetDetail",
        QQ: "specialWinResultRawCards",
        RR: "stageBettingType",
        SS: "specialWinResultCardType"
    }, model_allPlayersBetInfo = {MODELNAME: "allPlayersBetInfo", AAA: "betType", BBB: "betPerson", CCC: "betAmount"},
    model_GHStatistics = {
        MODELNAME: "GHStatistics",
        AA: "tableId",
        BB: "betAmounts",
        CC: "totalAmount",
        DD: "enterCount",
        FF: "betPersons",
        GG: model_allPlayersBetInfo,
        HH: "gameRoundId"
    }, model_GHStatus = {
        MODELNAME: "GHStatus",
        AA: "tableId",
        BB: "tableStatus",
        DD: "gameRoundId",
        EE: "stageBettingType"
    }, model_briefGameTable = {
        MODELNAME: "briefGameTable",
        AA: "tableId",
        BB: "tableName",
        CC: "gameType",
        FF: "tableStatus",
        JJ: "goodRoadType"
    }, model_limitTableObject = {
        MODELNAME: "limitTableObject",
        AA: "tableId",
        BB: "limitTableId",
        CC: "limitTableName",
        DD: "betLimitLow",
        EE: "betLimitHigh",
        FF: "limitTypes",
        GG: "limitLows",
        HH: "limitHighs",
        II: "diffLimitValues",
        JJ: "enterLimit"
    }, model_vipTableObject = {
        AA: "vipTableStatus",
        BB: "vipBetLimitLow",
        CC: "vipBetLimitHigh",
        DD: "isNeedPassword",
        EE: "managerId",
        FF: "deskerUserID"
    }, model_gameTable = {
        MODELNAME: "tableInfo",
        AA: "tableId",
        BB: "tableName",
        DD: "gameType",
        HH: model_gameStatus,
        II: "dealerName",
        KK: "playIds",
        LL: "chairNos",
        MM: "userNames",
        NN: "amounts",
        OO: "betTypeLists",
        PP: "betAmountLists",
        QQ: "aPlayId",
        RR: "aChairNo",
        SS: "aUserName",
        TT: "aAmount",
        UU: "aBetTypes",
        VV: "aBetAmounts",
        XX: "betPersons",
        YY: "betAmounts",
        ZZ: model_vipTableObject,
        Z3: "tableStatus",
        Z5: "betAmountLists2",
        Z6: "currencyLists",
        Z7: "aBetAmount2",
        Z8: "aCurrency",
        Z9: "aAmount2",
        Z10: "amounts2",
        Z12: "dealerIcon",
        Z13: "nicknames",
        Z14: "avatars",
        Z15: "userGameRoundStatusInfo",
        WW3: "currentShoeGameResult",
        XX2: model_allPlayersBetInfo
    }, model_gameTables = {...model_gameTable, MODELNAME: "tableInfos"}, model_login = {
        MODELNAME: "login",
        A: "resultCode",
        B: "tips",
        C: model_player,
        D: model_handicapInfo,
        E: model_vipHandicapInfo,
        F: "sessionId",
        G: "isFirstTimePlay",
        I: "elecGames",
        J: "refreshCode",
        K: "accountType",
        L: "suffix",
        N: "isShowBalanceBetLimit",
        O: "supportHalls"
    }, model_logout = {MODELNAME: "logout", A: "resultCode", B: "tips", C: "details"}, model_getGameHall = {
        MODELNAME: "getGameHall",
        A: "resultCode",
        B: "tips",
        C: "platformType",
        D: model_gameTables,
        E: "multimode",
        F: "multiBetLimitLow",
        G: "multiBetLimitHigh",
        H: "onlineCount"
    }, model_lotteryDetail = {MODELNAME: "details", AA: "gameRoundId", BB: "shoeNos", FF: "rawGameResult"},
    model_getRoadData = {
        MODELNAME: "getRoadData",
        A: "resultCode",
        B: "tips",
        C: "tableId",
        E: model_lotteryDetail,
        G: "currentShoeGameResult"
    }, model_pushUserInfo = {
        MODELNAME: "pushUserInfo",
        A: "amount",
        D: "chairNo",
        E: "totalBets",
        F: "validBets",
        G: "exchangeRate"
    }, model_pushGoodRoadOrder = {MODELNAME: "pushGoodRoadOrder", A: "tableIds", B: "types", C: "tableNames"},
    model_pushGameStatus = {MODELNAME: "pushGameStatus", A: model_gameStatus}, model_gameBet = {
        MODELNAME: "gameBet",
        A: "resultCode",
        B: "tips",
        C: "totalBetAmount",
        D: "tableId",
        E: "betTypes",
        F: "betAmounts",
        H: "gameRoundId"
    }, model_pushRawCards = {
        MODELNAME: "pushRawCards",
        A: "tableId",
        B: "rawCards",
        C: "specialWinResultRawCards",
        D: "specialWinResultCardType"
    }, model_pushPayoutInfo = {
        MODELNAME: "pushPayoutInfo",
        A: "resultCode",
        B: "tips",
        C: "gameType",
        D: "tableId",
        F: "playIds",
        G: "chairNos",
        H: "userNames",
        I: "amounts",
        J: "betTypeLists",
        K: "betAmountLists",
        L: "payoutAmountLists",
        M: "aPlayId",
        N: "aChairNo",
        O: "aUserName",
        P: "aAmount",
        Q: "aBetTypes",
        R: "aBetAmounts",
        S: "aPayoutAmounts",
        U: "betAmountLists2",
        V: "currencyLists",
        W: "aBetAmount2",
        X: "aCurrency",
        Y: "aAmount2",
        Z: "amounts2",
        Z1: "aPayoutAmounts2",
        Z2: "payoutAmountLists2"
    }, model_noticePush = {MODELNAME: "noticePush", A: model_notice}, model_pushGameTableResults = {
        MODELNAME: "pushGameTableResults",
        A: "tableId",
        C: "inningsIndex",
        G: "currentGameRoundResult"
    }, model_pushGHStatistics = {MODELNAME: "pushGHStatistics", A: model_GHStatistics},
    model_pushGHStatus = {MODELNAME: "pushGHStatus", A: model_GHStatus}, model_getBriefGameTableList = {
        MODELNAME: "getBriefGameTableList",
        A: "resultCode",
        B: "tips",
        C: model_briefGameTable
    }, model_logoutLimitTable = {MODELNAME: "logoutLimitTable", A: "resultCode", B: "tips", C: "tableId", D: "type"},
    model_pushGHAdd = {MODELNAME: "pushGHAdd", A: model_gameTable},
    model_pushGHDeletes = {MODELNAME: "pushGHDeletes", A: "tableId"}, model_showOpenedBrand = {
        MODELNAME: "showOpenedBrand",
        A: "resultCode",
        B: "tips",
        C: "brandsId",
        E: "tableId",
        F: "gameRoundId"
    }, model_betLimitDetailObject = {
        MODELNAME: "betLimitDetailObject",
        AAA: "betType",
        BBB: "betLimitLow",
        CCC: "betLimitHigh"
    }, model_potLimitDetailObject = {MODELNAME: "potLimitDetailObject", AAA: "betType", BBB: "potLimitValue"},
    model_betLimitObject = {
        MODELNAME: "betLimitObject",
        AA: "gameType",
        BB: "betLimitLow",
        CC: "betLimitHigh",
        DD: model_betLimitDetailObject,
        EE: "potLimit",
        FF: model_potLimitDetailObject
    }, model_enterGameTable = {
        MODELNAME: "enterGameTable",
        A: "resultCode",
        B: "tips",
        C: model_gameTable,
        D: "enterType"
    }, model_setPlayerHandicap = {
        MODELNAME: "setPlayerHandicap",
        A: "resultCode",
        B: "tips",
        C: model_betLimitObject,
        D: "handicapId"
    }, model_getTablesBetLimit = {MODELNAME: "getTablesBetLimit", A: "resultCode", B: "tips", C: model_limitTableObject},
    model_pushDealerInfo = {MODELNAME: "pushDealerInfo", A: "tableId", C: "dealerName"},
    model_pushGHDealer = {MODELNAME: "pushGHDealer", AA: "tableId", BB: "dealerName"},
    model_realtimeVerification = {MODELNAME: "realtimeVerification", A: "resultCode", B: "tips"},
    model_getNicknameApprovalState = {
        MODELNAME: "getNicknameApprovalState",
        A: "resultCode",
        B: "tips",
        C: "nickname",
        D: "newNickname",
        E: "state"
    }, model_updateUserProfile = {
        MODELNAME: "getNicknameApprovalState",
        A: "resultCode",
        B: "tips",
        C: "nickname",
        D: "newNickname",
        E: "state"
    }, model_reSettingPassword = {MODELNAME: "reSettingPassword", A: "resultCode", B: "tips"},
    model_userGameRoundStatusChange = {
        MODELNAME: "userGameRoundStatusChange",
        A: "resultCode",
        B: "tips",
        C: "status",
        D: "tableId",
        E: "gameRoundId",
        F: "gameover"
    }, model_userGameRoundStatus = {MODELNAME: "userGameRoundStatus", aa: "type", bb: "status"},
    model_getCountDownObject = {
        MODELNAME: "countDown",
        AA: "tableId",
        BB: "gameRoundId",
        CC: "staticCountDown",
        DD: "dynamicCountDown"
    }, model_getCountDown = {MODELNAME: "getCountDown", A: "resultCode", B: "tips", C: model_getCountDownObject},
    model_betDetailObject = {MODELNAME: "betDetail", AAA: "betType", BBB: "betAmount"},
    model_totalBetInfoObject = {MODELNAME: "totalBetInfo", AA: "tableId", BB: "gameRoundId", CC: model_betDetailObject},
    model_getCurrentPlayerBetInfo = {
        MODELNAME: "getCurrentPlayerBetInfo",
        A: "resultCode",
        B: "tips",
        C: model_totalBetInfoObject
    }, model_additionalTableInfo = {
        MODELNAME: "additionalTableInfo",
        AA: "gameType",
        BB: "vipTableReserveStatus",
        CC: "vipTableOwner",
        DD: "vipTableBufferTime"
    }, model_pushAdditionalTableInfo = {MODELNAME: "pushAdditionalTableInfo", A: "tableId", B: model_additionalTableInfo},
    model_setPlayerAction = {
        MODELNAME: "setPlayerAction",
        A: "resultCode",
        B: "tips",
        C: "status",
        D: "tableId",
        E: "type",
        F: "gameType"
    }, LOGIN_MAP = {
        0: "Successful",
        1: "Internal Server error",
        101: "Bet(s) Failed (Exceeded Selection Bet Limit)",
        102: "Bet(s) failed（Time Limit Exceeded ）",
        103: "Bet(s) Failed (Exceeded Pools Bet Limit)",
        201: "JackPot Bet(s) failed（Time Limit Exceeded ）",
        5e3: "Unknown Error",
        5001: "Request too frequently",
        6001: "User is not logged in!",
        6002: "Failed to get credit information.",
        6003: "The user name or password is error!",
        6004: "User logon is disabled.",
        6005: "You don't have handicap!",
        6006: "Can't find MultiPlay message record!",
        6007: "Can't find your agent, please contact customer service!",
        6008: "Your account logged in from another location.",
        6010: "Reset password error",
        6011: "The format of the password is error",
        6012: "Password cannot be empty",
        6013: "The password is limited to 10 characters!",
        6015: "Failure! Player cannot be repeated concern.",
        6016: "You had reached the maximum of adding players.",
        6018: "The gaming table has been closed!",
        6019: "The gaming table is currently under maintenance",
        6020: "This is private gaming table.",
        6021: "This seat is taken, please try other!",
        6022: "Failure! Please try again later.",
        6023: "Couldn't search the bet-limit table, please enter again.",
        6024: "Couldn't search the gaming table, please enter again.",
        6025: "Couldn't find an appropriate seat!",
        6026: "Enter the gaming table failed，please try again!",
        6027: "This table is full, please try other gaming table!",
        6028: "You have bet in seat in this round, can't change your seat, please click 'enter' in gaming lobby to enter gaming table!",
        6029: "This gaming table has been dedicated.",
        6030: "The table owner is left!",
        6031: "You are the table owner, and cannot change your seat.",
        6032: "You have betted aside in this round. You cannot be seated, now.",
        6033: "You have betted in seat in this round. You cannot enter table by Side Bet, now.",
        6034: "This table is not reserved, you can't join.",
        6035: "Sorry,Your VIP balance is not enough <Number>. You can join by side bet.",
        6037: "You are prohibit to bet!",
        6038: "Failure! Illegal credit changed.",
        6039: "Failure! System is busy!",
        6040: "Failure! Please login again.",
        6041: "Failure! Can't find the gaming round.",
        6042: "Bet failed. Your credit is not enough.",
        6043: "Bet Failed! It’s over maximum lose.",
        6044: "Failure! The gaming round has closed.",
        6045: "Failure! The information is error.",
        6046: "Failure! Operation conflicting!",
        6047: "Illegal betting!",
        6048: "After <Number> rounds, you can't bet big or small!",
        6049: "Invalid betting!",
        6050: "Bet Failed! It’s over maximum limit.",
        6052: "You have bet, can't skip!",
        6053: "Cards are opened, can't skip!",
        6054: "The gaming round is not start, can't skip!",
        6055: "Skipped more than 5 times!",
        6057: "Dealer is not here!",
        6058: "Illegal operation.",
        6059: "Game table not found.",
        6060: "Unsupported language!",
        6061: "Invalid operation!",
        6062: "Error parameters!",
        6063: "The gaming hall not found, please enter again.",
        6064: "System is under maintenance!",
        6065: "Couldn't find an appropriate limit-table or seat!",
        6066: "The gaming table dose not exists.",
        6067: "The gaming table not found, please enter again.",
        6068: "Password error!",
        6069: "Not bet, can't open cards!",
        6070: "Failure! You have betted aside in this round, please try again after round over.",
        6071: "You don't have this table!",
        6072: "This table seats is full, please try Side Bet!",
        6073: "Table owner has set password.",
        6074: "More than 10 minutes not bet.",
        6075: "The sessionID is out of date.",
        6076: "The sessionID is wrong.",
        6077: "SessionID or Token invalid.",
        6078: "Forced logout, called by “logout” API.",
        6079: "Platform where you are maintaining!",
        6080: "Enter table fail, Please try again.",
        6081: "Dedicate table fail,please try again.",
        6082: "The platform is under maintenance!",
        6083: "The platform license has expired!",
        6084: "The platform is not authorized to operate in this region!",
        6085: "This feature is not supported in your region!",
        6086: "The platform is not authorized to use this API!",
        6087: "The API key is invalid or has been revoked!",
        6088: "The API rate limit has been exceeded!",
        6089: "The API request is malformed!",
        6090: "The API request is unauthorized!",
        6091: "The API request is forbidden!",
        6092: "The API request failed due to server error!",
        6093: "The API request failed due to network error!",
        6094: "The API request failed due to timeout!",
        6095: "The API request failed for an unknown reason!",
        6096: "The API request requires authentication!",
        6097: "The API request is not allowed for this user!",
        6098: "The API request is not allowed for this app!",
        6099: "The API request is not allowed for this platform!",
        200001: "An error has occurred. Please contact CSD for details, thank you. [1000]",
        200002: "System timed out, please close the current game window and try again. [1001]",
        200003: "System timed out, please close the current game window and try again. [1002]",
        200004: "An error has occurred. Please contact CSD for details, thank you. [1003]",
        200005: "An error has occurred. Please contact CSD for details, thank you. [1004]",
        200006: "An error has occurred. Please contact CSD for details, thank you. [1005]",
        200007: "An error has occurred. Please contact CSD for details, thank you. [1006]",
        200008: "An error has occurred. Please contact CSD for details, thank you. [1007]",
        200009: "An error has occurred. Please contact CSD for details, thank you. [1008]",
        200011: "Account has been closed. Please contact your upline for details, thank you. [2002]",
        200012: "An error has occurred. Please contact CSD for details, thank you. [2003]",
        200013: "An error has occurred. Please contact CSD for details, thank you. [3001]",
        200014: "Your account has insufficient funds. [3002]",
        200015: "Your stake had exceeded your bet limit settings, please try again. [3003]",
        200016: "Game disabled. Please contact your upline for details, thank you. [3004]",
        200017: "An error has occurred. Please contact CSD for details, thank you. [3005]",
        200018: "Win limit hit! Please contact your upline, thank you. [3006]",
        200019: "Lose limit hit! Please contact your upline, thank you. [3007]",
        200020: "You have no bet limit setting for this game, please contact your upline to set it. [3008]",
        200021: "Your bet limit had been updated, please try again. [3009]",
        200022: "Account has been suspended. Please contact your upline for details, thank you. [3010]",
        200023: "Account has been suspended. Please contact your upline for details, thank you. [3013]",
        200024: "The game is unavailable at the moment. Please contact CSD for details, thank you. [3014]"
    }, getLoginReponse = r => LOGIN_MAP[r];
var LoginRequestType = (r => (r.userName = "a", r.password = "b", r.appType = "c", r.language = "d", r.version = "e", r.ipaddress = "f", r.loginType = "g", r.sessionId = "h", r.refreshCode = "j", r.lineId = "k", r.sfsline = "l", r.deviceType = "n", r.deviceDetail = "o", r.loginDomain = "p", r.lk = "q", r.ticketId = "r", r))(LoginRequestType || {});
const defaultPayout = {
        betTypeLists: [],
        betAmountLists: [],
        payoutAmountLists: [],
        aBetTypes: [],
        aBetAmounts: [],
        aPayoutAmounts: []
    }, PayoutContext = React.createContext({
        payout: {...defaultPayout}, setPayout: () => {
        }, payouts: {}, setMultiTablePayouts: () => {
        }
    }), PayoutProvider = r => {
        const [R, y] = React.useState({...defaultPayout}), [E, C] = React.useState({});
        return jsx(PayoutContext.Provider, {
            value: {payout: R, setPayout: y, payouts: E, setMultiTablePayouts: C},
            children: r.children
        })
    }, DialogA = "", ScalableContainerScaleContext = React.createContext(-1), ScalableContainer = "", Responsive$M = "",
    ScablableContainer = r => {
        let {fixScale: R, specificRatio: y} = r, E = 1920, C = 1080;
        const [x, B] = React.useState(), N = () => {
            var O;
            O = Math.min(window.innerWidth / E, window.innerHeight / C), B(O)
        };
        React.useEffect(() => (window.addEventListener("resize", N), () => {
            window.removeEventListener("resize", N)
        }), []);
        let L = Math.min(window.innerWidth / E, window.innerHeight / C);
        return R && (L = 1), jsx("div", {
            className: "ui_scalable_container_1920",
            style: {transform: "scale(" + L + ")", "--scale": L},
            children: jsx(ScalableContainerScaleContext.Provider, {value: L, children: r.children})
        })
    }, SystemModalWithConfirmButton = r => {
        let {showButtons: R = !0} = r, {
            isOpen: y,
            systemModalConfirmCb: E,
            autoClose: C,
            closingByOutSide: x,
            content: B
        } = React.useContext(SystemModalContext);
        const {t: N} = useTranslation();
        if (!y) return null;
        React.useEffect(() => {
            document.addEventListener("keydown", D);

            function D(z) {
                z.keyCode == 13 && L(z)
            }

            return () => {
                document.removeEventListener("keydown", D)
            }
        }, []);
        const L = D => {
            E && (E.current(), C()), D.preventDefault()
        }, O = React.useRef(null);
        return jsx("div", {
            className: "dialogContainer",
            onClick: D => {
                D.stopPropagation(), O.current.contains(D.target) || x()
            },
            children: jsx(ScablableContainer, {
                children: jsx("div", {
                    id: "inner",
                    children: jsx("div", {
                        className: "modalContent",
                        id: "cookiesPopup",
                        ref: O,
                        children: jsxs("div", {
                            className: "modal-content-flex",
                            children: [jsx("div", {
                                className: "item flex-2",
                                children: jsx("div", {
                                    className: "modal-text-parent",
                                    children: jsx("div", {className: "modal-text-child", children: B})
                                })
                            }), R && jsx(Fragment, {
                                children: jsx("div", {
                                    className: "item flex-3",
                                    children: jsx("div", {
                                        style: {
                                            width: "100%",
                                            height: "100%",
                                            position: "relative",
                                            display: "flex",
                                            justifyContent: "center",
                                            alignContent: "center,",
                                            alignItems: "center"
                                        },
                                        children: jsx("button", {
                                            onClick: L,
                                            className: "accept",
                                            children: N("messages.ok_button")
                                        })
                                    })
                                })
                            })]
                        })
                    })
                })
            })
        })
    };
let e = {data: ""},
    t$1 = r => typeof window == "object" ? ((r ? r.querySelector("#_goober") : window._goober) || Object.assign((r || document.head).appendChild(document.createElement("style")), {
        innerHTML: " ",
        id: "_goober"
    })).firstChild : r || e, l = /(?:([\u0080-\uFFFF\w-%@]+) *:? *([^{;]+?);|([^;}{]*?) *{)|(}\s*)/g,
    a = /\/\*[^]*?\*\/|  +/g, n$1 = /\n+/g, o = (r, R) => {
        let y = "", E = "", C = "";
        for (let x in r) {
            let B = r[x];
            x[0] == "@" ? x[1] == "i" ? y = x + " " + B + ";" : E += x[1] == "f" ? o(B, x) : x + "{" + o(B, x[1] == "k" ? "" : R) + "}" : typeof B == "object" ? E += o(B, R ? R.replace(/([^,])+/g, N => x.replace(/(^:.*)|([^,])+/g, L => /&/.test(L) ? L.replace(/&/g, N) : N ? N + " " + L : L)) : x) : B != null && (x = /^--/.test(x) ? x : x.replace(/[A-Z]/g, "-$&").toLowerCase(), C += o.p ? o.p(x, B) : x + ":" + B + ";")
        }
        return y + (R && C ? R + "{" + C + "}" : C) + E
    }, c = {}, s = r => {
        if (typeof r == "object") {
            let R = "";
            for (let y in r) R += y + s(r[y]);
            return R
        }
        return r
    }, i = (r, R, y, E, C) => {
        let x = s(r), B = c[x] || (c[x] = (L => {
            let O = 0, D = 11;
            for (; O < L.length;) D = 101 * D + L.charCodeAt(O++) >>> 0;
            return "go" + D
        })(x));
        if (!c[B]) {
            let L = x !== r ? r : (O => {
                let D, z, F = [{}];
                for (; D = l.exec(O.replace(a, ""));) D[4] ? F.shift() : D[3] ? (z = D[3].replace(n$1, " ").trim(), F.unshift(F[0][z] = F[0][z] || {})) : F[0][D[1]] = D[2].replace(n$1, " ").trim();
                return F[0]
            })(r);
            c[B] = o(C ? {["@keyframes " + B]: L} : L, y ? "" : "." + B)
        }
        let N = y && c.g ? c.g : null;
        return y && (c.g = c[B]), ((L, O, D, z) => {
            z ? O.data = O.data.replace(z, L) : O.data.indexOf(L) === -1 && (O.data = D ? L + O.data : O.data + L)
        })(c[B], R, E, N), B
    }, p = (r, R, y) => r.reduce((E, C, x) => {
        let B = R[x];
        if (B && B.call) {
            let N = B(y), L = N && N.props && N.props.className || /^go/.test(N) && N;
            B = L ? "." + L : N && typeof N == "object" ? N.props ? "" : o(N, "") : N === !1 ? "" : N
        }
        return E + C + (B ?? "")
    }, "");

function u$1(r) {
    let R = this || {}, y = r.call ? r(R.p) : r;
    return i(y.unshift ? y.raw ? p(y, [].slice.call(arguments, 1), R.p) : y.reduce((E, C) => Object.assign(E, C && C.call ? C(R.p) : C), {}) : y, t$1(R.target), R.g, R.o, R.k)
}

let d, f, g;
u$1.bind({g: 1});
let h$1 = u$1.bind({k: 1});

function m(r, R, y, E) {
    o.p = R, d = r, f = y, g = E
}

function j(r, R) {
    let y = this || {};
    return function () {
        let E = arguments;

        function C(x, B) {
            let N = Object.assign({}, x), L = N.className || C.className;
            y.p = Object.assign({theme: f && f()}, N), y.o = / *go\d+/.test(L), N.className = u$1.apply(y, E) + (L ? " " + L : ""), R && (N.ref = B);
            let O = r;
            return r[0] && (O = N.as || r, delete N.as), g && O[0] && g(N), d(O, N)
        }

        return R ? R(C) : C
    }
}

var W = r => typeof r == "function", T = (r, R) => W(r) ? r(R) : r, U$1 = (() => {
    let r = 0;
    return () => (++r).toString()
})(), b = (() => {
    let r;
    return () => {
        if (r === void 0 && typeof window < "u") {
            let R = matchMedia("(prefers-reduced-motion: reduce)");
            r = !R || R.matches
        }
        return r
    }
})(), Q$1 = 20, S = new Map, X = 1e3, $ = r => {
    if (S.has(r)) return;
    let R = setTimeout(() => {
        S.delete(r), u({type: 4, toastId: r})
    }, X);
    S.set(r, R)
}, J = r => {
    let R = S.get(r);
    R && clearTimeout(R)
}, v$2 = (r, R) => {
    switch (R.type) {
        case 0:
            return {...r, toasts: [R.toast, ...r.toasts].slice(0, Q$1)};
        case 1:
            return R.toast.id && J(R.toast.id), {
                ...r,
                toasts: r.toasts.map(x => x.id === R.toast.id ? {...x, ...R.toast} : x)
            };
        case 2:
            let {toast: y} = R;
            return r.toasts.find(x => x.id === y.id) ? v$2(r, {type: 1, toast: y}) : v$2(r, {type: 0, toast: y});
        case 3:
            let {toastId: E} = R;
            return E ? $(E) : r.toasts.forEach(x => {
                $(x.id)
            }), {...r, toasts: r.toasts.map(x => x.id === E || E === void 0 ? {...x, visible: !1} : x)};
        case 4:
            return R.toastId === void 0 ? {...r, toasts: []} : {...r, toasts: r.toasts.filter(x => x.id !== R.toastId)};
        case 5:
            return {...r, pausedAt: R.time};
        case 6:
            let C = R.time - (r.pausedAt || 0);
            return {...r, pausedAt: void 0, toasts: r.toasts.map(x => ({...x, pauseDuration: x.pauseDuration + C}))}
    }
}, A = [], P = {toasts: [], pausedAt: void 0}, u = r => {
    P = v$2(P, r), A.forEach(R => {
        R(P)
    })
}, G = (r, R = "blank", y) => ({
    createdAt: Date.now(),
    visible: !0,
    type: R,
    ariaProps: {role: "status", "aria-live": "polite"},
    message: r,
    pauseDuration: 0, ...y,
    id: (y == null ? void 0 : y.id) || U$1()
}), h = r => (R, y) => {
    let E = G(R, r, y);
    return u({type: 2, toast: E}), E.id
}, n = (r, R) => h("blank")(r, R);
n.error = h("error");
n.success = h("success");
n.loading = h("loading");
n.custom = h("custom");
n.dismiss = r => {
    u({type: 3, toastId: r})
};
n.remove = r => u({type: 4, toastId: r});
n.promise = (r, R, y) => {
    let E = n.loading(R.loading, {...y, ...y == null ? void 0 : y.loading});
    return r.then(C => (n.success(T(R.success, C), {id: E, ...y, ...y == null ? void 0 : y.success}), C)).catch(C => {
        n.error(T(R.error, C), {id: E, ...y, ...y == null ? void 0 : y.error})
    }), r
};
var oe$1 = h$1`
from {
  transform: scale(0) rotate(45deg);
	opacity: 0;
}
to {
 transform: scale(1) rotate(45deg);
  opacity: 1;
}`, re = h$1`
from {
  transform: scale(0);
  opacity: 0;
}
to {
  transform: scale(1);
  opacity: 1;
}`, se$2 = h$1`
from {
  transform: scale(0) rotate(90deg);
	opacity: 0;
}
to {
  transform: scale(1) rotate(90deg);
	opacity: 1;
}`, _ = j("div")`
  width: 20px;
  opacity: 0;
  height: 20px;
  border-radius: 10px;
  background: ${r => r.primary || "#ff4b4b"};
  position: relative;
  transform: rotate(45deg);

  animation: ${oe$1} 0.3s cubic-bezier(0.175, 0.885, 0.32, 1.275)
    forwards;
  animation-delay: 100ms;

  &:after,
  &:before {
    content: '';
    animation: ${re} 0.15s ease-out forwards;
    animation-delay: 150ms;
    position: absolute;
    border-radius: 3px;
    opacity: 0;
    background: ${r => r.secondary || "#fff"};
    bottom: 9px;
    left: 4px;
    height: 2px;
    width: 12px;
  }

  &:before {
    animation: ${se$2} 0.15s ease-out forwards;
    animation-delay: 180ms;
    transform: rotate(90deg);
  }
`, ne$1 = h$1`
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
`, V = j("div")`
  width: 12px;
  height: 12px;
  box-sizing: border-box;
  border: 2px solid;
  border-radius: 100%;
  border-color: ${r => r.secondary || "#e0e0e0"};
  border-right-color: ${r => r.primary || "#616161"};
  animation: ${ne$1} 1s linear infinite;
`, pe = h$1`
from {
  transform: scale(0) rotate(45deg);
	opacity: 0;
}
to {
  transform: scale(1) rotate(45deg);
	opacity: 1;
}`, de = h$1`
0% {
	height: 0;
	width: 0;
	opacity: 0;
}
40% {
  height: 0;
	width: 6px;
	opacity: 1;
}
100% {
  opacity: 1;
  height: 10px;
}`, w = j("div")`
  width: 20px;
  opacity: 0;
  height: 20px;
  border-radius: 10px;
  background: ${r => r.primary || "#61d345"};
  position: relative;
  transform: rotate(45deg);

  animation: ${pe} 0.3s cubic-bezier(0.175, 0.885, 0.32, 1.275)
    forwards;
  animation-delay: 100ms;
  &:after {
    content: '';
    box-sizing: border-box;
    animation: ${de} 0.2s ease-out forwards;
    opacity: 0;
    animation-delay: 200ms;
    position: absolute;
    border-right: 2px solid;
    border-bottom: 2px solid;
    border-color: ${r => r.secondary || "#fff"};
    bottom: 6px;
    left: 6px;
    height: 10px;
    width: 6px;
  }
`, ue = j("div")`
  position: absolute;
`, le = j("div")`
  position: relative;
  display: flex;
  justify-content: center;
  align-items: center;
  min-width: 20px;
  min-height: 20px;
`, Te$2 = h$1`
from {
  transform: scale(0.6);
  opacity: 0.4;
}
to {
  transform: scale(1);
  opacity: 1;
}`, fe = j("div")`
  position: relative;
  transform: scale(0.6);
  opacity: 0.4;
  min-width: 20px;
  animation: ${Te$2} 0.3s 0.12s cubic-bezier(0.175, 0.885, 0.32, 1.275)
    forwards;
`, M$1 = ({toast: r}) => {
    let {icon: R, type: y, iconTheme: E} = r;
    return R !== void 0 ? typeof R == "string" ? React.createElement(fe, null, R) : R : y === "blank" ? null : React.createElement(le, null, React.createElement(V, {...E}), y !== "loading" && React.createElement(ue, null, y === "error" ? React.createElement(_, {...E}) : React.createElement(w, {...E})))
}, ye = r => `
0% {transform: translate3d(0,${r * -200}%,0) scale(.6); opacity:.5;}
100% {transform: translate3d(0,0,0) scale(1); opacity:1;}
`, ge$1 = r => `
0% {transform: translate3d(0,0,-1px) scale(1); opacity:1;}
100% {transform: translate3d(0,${r * -150}%,-1px) scale(.6); opacity:0;}
`, he = "0%{opacity:0;} 100%{opacity:1;}", xe$1 = "0%{opacity:1;} 100%{opacity:0;}", be$1 = j("div")`
  display: flex;
  align-items: center;
  background: #fff;
  color: #363636;
  line-height: 1.3;
  will-change: transform;
  box-shadow: 0 3px 10px rgba(0, 0, 0, 0.1), 0 3px 3px rgba(0, 0, 0, 0.05);
  max-width: 350px;
  pointer-events: auto;
  padding: 8px 10px;
  border-radius: 8px;
`, Se = j("div")`
  display: flex;
  justify-content: center;
  margin: 4px 10px;
  color: inherit;
  flex: 1 1 auto;
  white-space: pre-line;
`, Ae$1 = (r, R) => {
    let y = r.includes("top") ? 1 : -1, [E, C] = b() ? [he, xe$1] : [ye(y), ge$1(y)];
    return {animation: R ? `${h$1(E)} 0.35s cubic-bezier(.21,1.02,.73,1) forwards` : `${h$1(C)} 0.4s forwards cubic-bezier(.06,.71,.55,1)`}
};
React.memo(({toast: r, position: R, style: y, children: E}) => {
    let C = r.height ? Ae$1(r.position || R || "top-center", r.visible) : {opacity: 0},
        x = React.createElement(M$1, {toast: r}), B = React.createElement(Se, {...r.ariaProps}, T(r.message, r));
    return React.createElement(be$1, {
        className: r.className,
        style: {...C, ...y, ...r.style}
    }, typeof E == "function" ? E({icon: x, message: B}) : React.createElement(React.Fragment, null, x, B))
});
m(React.createElement);
u$1`
  z-index: 9999;
  > * {
    pointer-events: auto;
  }
`;
var _t$1 = n;
const DialogT = "", useSystemToast = r => {
    const [R, y] = React.useState(!1), [E, C] = React.useState(!1);
    return {
        handleAnimationEnd: () => {
            y(!0), E && r()
        }, closeToast: () => {
            C(!0)
        }, closeSelf: E, animationFinished: R
    }
}, SystemToast = r => {
    let {showButton: R = !0} = {...r};
    const {t: y} = useTranslation();
    let {
        systemModalConfirmCb: E,
        autoClose: C,
        forceClose: x,
        closingByOutSide: B,
        content: N,
        closeByAnime: L
    } = React.useContext(SystemModalContext), {handleAnimationEnd: O, closeToast: D, closeSelf: z} = useSystemToast(x);
    const F = React.useRef(null);
    React.useEffect(() => {
        document.addEventListener("keydown", Y);

        function Y(H) {
            H.keyCode == 13 && _e(H)
        }

        return () => {
            document.removeEventListener("keydown", Y)
        }
    }, []);
    const _e = Y => {
        E && (E.current(), L ? D() : C()), Y.preventDefault()
    };
    return React.useEffect(() => {
        if (r.duration && r.duration > 0) {
            let Y = r.duration;
            setTimeout(() => {
                D()
            }, 1e3 * Y)
        }
    }, [r.duration]), jsx("div", {
        className: `dialogContainer ${z ? "t-fade-out" : ""}`,
        onAnimationEnd: O,
        onClick: Y => {
            Y.stopPropagation(), F.current.contains(Y.target) || B()
        },
        children: jsx(ScablableContainer, {
            children: jsx("div", {
                id: "inner",
                children: jsx("div", {
                    className: `t-modalContent ${z ? "t-close" : "t-open"} ${R ? "" : "no-button"}`,
                    ref: F,
                    onAnimationEnd: O,
                    children: jsxs("div", {
                        className: "toast-modal-content-flex",
                        children: [jsx("div", {
                            className: "item toast-flex-2",
                            children: jsx("div", {
                                className: "text-parent",
                                children: jsx("div", {className: "text-child", children: N})
                            })
                        }), R && jsx("div", {
                            className: "item toast-flex-3",
                            children: jsx("div", {
                                style: {
                                    width: "100%",
                                    height: "100%",
                                    position: "relative",
                                    display: "flex",
                                    justifyContent: "center",
                                    alignContent: "center,",
                                    alignItems: "center"
                                },
                                children: jsx("button", {
                                    onClick: _e,
                                    className: "accept",
                                    children: jsx("div", {className: "button-text", children: y("messages.ok_button")})
                                })
                            })
                        })]
                    })
                })
            })
        })
    })
}, HttpFallBack = ({code: r}) => (useHttpDialogs({
    layout: jsx(SystemModalWithConfirmButton, {}),
    code: r
}), jsx(Fragment, {})), useHttpDialogs = ({layout: r, code: R}) => {
    const {t: y} = useTranslation();
    let {isOpen: E, openSystemModal: C, forceClose: x} = React.useContext(SystemModalContext);
    const {setHttpState: B, httpState: N} = React.useContext(HttpContext);
    React.useEffect(() => {
        B(L => ({...L, errorCode: "", errorMsg: ""}))
    }, [N.errorCode]), React.useEffect(() => {
        const L = y(`error_code.${R}`);
        C({
            modalLayout: r, isAutoClose: !1, isClosingByOutside: !1, content: L, confirmButtonHandle: () => {
                x()
            }
        })
    }, [])
}, useDialog = (r = !0) => {
    const {t: R} = useTranslation();
    let {openSystemModal: y, forceClose: E} = React.useContext(SystemModalContext);
    const C = React.useRef(r);
    React.useEffect(() => {
        C.current = r
    }, [r]);
    const x = React.useCallback((N, L) => {
        y({
            modalLayout: jsx(SystemModalWithConfirmButton, {showButtons: C.current}),
            isAutoClose: !1,
            isClosingByOutside: !1,
            content: N,
            confirmButtonHandle: () => {
                L ? (E(), setTimeout(() => {
                    L()
                }, 100)) : E()
            }
        })
    }, [C]), B = React.useCallback((N, L) => {
        const O = R(`error_code.${N}`);
        y({
            modalLayout: jsx(SystemModalWithConfirmButton, {showButtons: C.current}),
            isAutoClose: !1,
            isClosingByOutside: !1,
            content: O,
            confirmButtonHandle: () => {
                L ? (E(), setTimeout(() => {
                    L()
                }, 100)) : E()
            }
        })
    }, [C]);
    return {onNormalDialogMessage: x, onNormalPopUpMessageByCode: B}
}, useToast = () => {
    let {openSystemModal: r, forceClose: R} = React.useContext(SystemModalContext);
    const {t: y} = useTranslation();
    return {
        onToastMessage: x => {
            _t$1(x, {
                style: {
                    background: "linear-gradient(15deg, rgb(2 0 36 / 53%) 0%, rgb(0 0 0) 76%, rgb(88 85 57) 100%, rgb(150 36 36 / 63%) 100%)",
                    border: "2px solid #f3ff82a1",
                    boxShadow: "0 0 3px 0px #f0faffc4",
                    width: "223px",
                    color: "#c0c5cb",
                    aspectRatio: "1.95"
                }
            })
        }, onSystemToast: x => {
            let {duration: B, content: N, code: L, cb: O} = {...x};
            L && (N = y(`error_code.${L}`)), r({
                modalLayout: jsx(SystemToast, {
                    duration: B,
                    showButton: typeof O == "function"
                }),
                isAutoClose: !0,
                isClosingByOutside: !1,
                content: N || "",
                closeByAnime: !0,
                confirmButtonHandle: () => {
                    O && O()
                }
            })
        }
    }
};
var TOAST_COLOR = (r => (r.RED = "255, 73, 73", r.BLUE = "0, 144, 255", r.GREEN = "19, 206, 102", r.BLACK = "0, 0, 0", r))(TOAST_COLOR || {});
const ToastContext = React.createContext({
    addMessage: () => {
    }, addTableMessage: () => {
    }, clearMessages: () => {
    }, clearTableMessages: () => {
    }
}), ToastProvider = r => {
    const [R, y] = React.useState(), {playingMessage: E, addMessage: C, clearMessages: x} = useToastMessages(),
        B = (L, O, D, z, F) => {
            y({tableId: L, data: O, message: D, color: z, duration: F})
        }, N = () => {
            y(void 0)
        };
    return jsx(ToastContext.Provider, {
        value: {
            playingMessage: E,
            addMessage: C,
            playingTableMessage: R,
            addTableMessage: B,
            clearMessages: x,
            clearTableMessages: N
        }, children: r.children
    })
}, useToastMessages = () => {
    const [r, R] = React.useState(), [y, E] = React.useState(!1), [C, x] = React.useState([]), B = React.useRef([]),
        N = React.useRef(-1);
    return React.useEffect(() => {
        if (y && N.current === -1) if (B.current.length === 0) E(!1); else {
            let D = {...B.current[0]};
            R(D), N.current = window.setTimeout(() => {
                N.current = -1, B.current.shift(), x(B.current.slice()), R(void 0)
            }, D.duration * 1e3)
        }
    }, [y, C]), {
        playingMessage: r, addMessage: (D, z, F) => {
            B.current.push({message: D, color: z, duration: F}), x(B.current.slice()), E(!0)
        }, clearMessages: () => {
            clearTimeout(N.current), N.current = -1, B.current = [], x(B.current.slice()), R(void 0)
        }
    }
}, useERVdialogStrategy = ({isStandalone: r, isNormalLogin: R, hasSessionId: y, hasReturnUrl: E}) => {
    const [C, x] = React.useState({showButton: !1}), B = () => {
        let N = !0;
        r ? R ? N = !0 : y && !E && (N = !1) : R || E || (N = !1), x({showButton: N})
    };
    return React.useEffect(() => {
        B()
    }, [r, R, y, E]), C
}, useERVdialogHandler = () => {
    let {sessionChecker: r} = React.useContext(GameSessionContext), {showButton: R} = useERVdialogStrategy(r);
    return {showButton: React.useMemo(() => (console.log("show", R), R), [R])}
};

function useNetwork(r) {
    const [R, y] = React.useState(navigator.onLine);
    React.useEffect(() => {
        const B = () => {
            y(!0)
        }, N = () => {
            y(!1)
        };
        return window.addEventListener("online", B), window.addEventListener("offline", N), () => {
            window.removeEventListener("online", B), window.removeEventListener("offline", N)
        }
    }, []);
    const E = 0;
    let C = E, x = React.useRef();
    return React.useEffect(() => {
        R ? x.current && (clearInterval(x.current), x.current = null, C = E) : x.current || (x.current = setInterval(() => {
            C -= 1, Logger$1.warn("lostConnectionCountDown", C), C <= 0 && (clearInterval(x.current), x.current = null, C = E, Logger$1.warn("*** Disconnect server"), r())
        }, 1e3))
    }, [R]), {isOnline: R}
}

const useSFSnetworking = (r, R) => {
    const {gameSessionContext: y, hasReturnUrl: E} = React.useContext(GameSessionContext);
    let {showButton: C} = useERVdialogHandler(), {onNormalDialogMessage: x} = useDialog(C), {onNormalDialogMessage: B} = useDialog(!0), {isOnline: N} = useNetwork(R),
        L = React.useRef(N);
    const {t: O} = useTranslation();
    React.useEffect(() => {
        if (!N) {
            const ve = () => {
                D()
            };
            B(O("error_msg.connection.connection_problem"), () => {
                z(() => {
                    Global.userScene != USER_CURRENT_SCENE.LOGIN_PAGE && r(ve)
                })
            })
        }
    }, [N]), React.useEffect(() => {
        L.current = N
    }, [N]);
    const D = (ve = !0) => {
        var Ce;
        let Re = (Ce = y.urlParamsState) == null ? void 0 : Ce.returnUrl;
        if (Re && Re.length > 0) window.location.href = Re; else if (ve) {
            const {protocol: Ne, host: we, pathname: Me} = window.location, ke = `${Ne}//${we}${Me}`;
            window.history.replaceState(null, "", ke), window.location.reload()
        } else window.location.href = "about:blank"
    }, z = ve => {
        if (!L.current) {
            B(O("error_msg.connection.connection_problem"), () => z(ve));
            return
        }
        ve()
    }, F = ve => {
        Global.userScene != USER_CURRENT_SCENE.LOGIN_PAGE ? r(ve) : ve()
    };
    return {
        kicked: ve => {
            if (ve && ve.current) return;
            const Re = () => {
                D()
            };
            B(O("error_msg.kick"), () => {
                z(() => {
                    F(Re)
                })
            })
        }, ban: () => {
            let ve = sessionStorage.getItem(SESSION_STORAGE_KEYS.SESSION_ID_TYPE) == GAME_SESSION_STATE.NORMAL_AUTH,
                Re = O("error_msg.ban") + ` (6008)
`;
            Re += ve ? O("error_msg.relogin") : !Helper.isStandalone() && E ? O("error_msg.quitGame") : "", x(Re, () => {
                z(() => {
                    sessionStorage.removeItem(SESSION_STORAGE_KEYS.SESSION_ID), D(ve)
                })
            })
        }, manual: () => {
        }, connectionProblem: () => {
            const ve = () => {
                D()
            };
            B(O("error_msg.connection.server_connection_problem"), () => {
                z(() => {
                    Global.userScene != USER_CURRENT_SCENE.LOGIN_PAGE && r(ve)
                })
            })
        }, idle: () => {
            const ve = () => {
                D()
            };
            let Re = Global.userScene == USER_CURRENT_SCENE.GAME_PAGE;
            B(O(Re ? "error_msg.idle.disconnected_to_server" : "error_msg.idle.disconnected_reconnect"), () => {
                z(() => {
                    F(ve)
                })
            })
        }, unknown: () => {
            const ve = () => {
                D()
            };
            B(O("error_msg.connection.server_connection_problem"), () => {
                z(() => {
                    F(ve)
                })
            })
        }, connectWsFailed: () => {
            const ve = () => {
                D()
            };
            B(O("error_msg.connection.server_connection_problem"), () => {
                z(() => {
                    F(ve)
                })
            })
        }, refresh: D
    }
};
var lib = {}, uaParser_minExports = {}, uaParser_min = {
    get exports() {
        return uaParser_minExports
    }, set exports(r) {
        uaParser_minExports = r
    }
};
(function (r, R) {
    (function (y, E) {
        var C = "1.0.35", x = "", B = "?", N = "function", L = "undefined", O = "object", D = "string", z = "major",
            F = "model", _e = "name", Y = "type", H = "vendor", me = "version", ce = "architecture", ie = "console",
            Be = "mobile", ve = "tablet", Re = "smarttv", Ce = "wearable", Ne = "embedded", we = 350, Me = "Amazon",
            ke = "Apple", Fe = "ASUS", $e = "BlackBerry", Ve = "Browser", Je = "Chrome", Qe = "Edge", Ze = "Firefox",
            qe = "Google", ze = "Huawei", De = "LG", Xe = "Microsoft", He = "Motorola", Ge = "Opera", Le = "Samsung",
            We = "Sharp", dt = "Sony", et = "Xiaomi", nt = "Zebra", tt = "Facebook", lt = "Chromium OS", Bt = "Mac OS",
            kt = function (Ta, fa) {
                var ca = {};
                for (var Ia in Ta) fa[Ia] && fa[Ia].length % 2 === 0 ? ca[Ia] = fa[Ia].concat(Ta[Ia]) : ca[Ia] = Ta[Ia];
                return ca
            }, At = function (Ta) {
                for (var fa = {}, ca = 0; ca < Ta.length; ca++) fa[Ta[ca].toUpperCase()] = Ta[ca];
                return fa
            }, zt = function (Ta, fa) {
                return typeof Ta === D ? oa(fa).indexOf(oa(Ta)) !== -1 : !1
            }, oa = function (Ta) {
                return Ta.toLowerCase()
            }, sa = function (Ta) {
                return typeof Ta === D ? Ta.replace(/[^\d\.]/g, x).split(".")[0] : E
            }, vt = function (Ta, fa) {
                if (typeof Ta === D) return Ta = Ta.replace(/^\s\s*/, x), typeof fa === L ? Ta : Ta.substring(0, we)
            }, ea = function (Ta, fa) {
                for (var ca = 0, Ia, Ma, Fa, va, ha, Ua; ca < fa.length && !ha;) {
                    var xt = fa[ca], K = fa[ca + 1];
                    for (Ia = Ma = 0; Ia < xt.length && !ha && xt[Ia];) if (ha = xt[Ia++].exec(Ta), ha) for (Fa = 0; Fa < K.length; Fa++) Ua = ha[++Ma], va = K[Fa], typeof va === O && va.length > 0 ? va.length === 2 ? typeof va[1] == N ? this[va[0]] = va[1].call(this, Ua) : this[va[0]] = va[1] : va.length === 3 ? typeof va[1] === N && !(va[1].exec && va[1].test) ? this[va[0]] = Ua ? va[1].call(this, Ua, va[2]) : E : this[va[0]] = Ua ? Ua.replace(va[1], va[2]) : E : va.length === 4 && (this[va[0]] = Ua ? va[3].call(this, Ua.replace(va[1], va[2])) : E) : this[va] = Ua || E;
                    ca += 2
                }
            }, _a = function (Ta, fa) {
                for (var ca in fa) if (typeof fa[ca] === O && fa[ca].length > 0) {
                    for (var Ia = 0; Ia < fa[ca].length; Ia++) if (zt(fa[ca][Ia], Ta)) return ca === B ? E : ca
                } else if (zt(fa[ca], Ta)) return ca === B ? E : ca;
                return Ta
            }, ta = {
                "1.0": "/8",
                1.2: "/1",
                1.3: "/3",
                "2.0": "/412",
                "2.0.2": "/416",
                "2.0.3": "/417",
                "2.0.4": "/419",
                "?": "/"
            }, na = {
                ME: "4.90",
                "NT 3.11": "NT3.51",
                "NT 4.0": "NT4.0",
                2e3: "NT 5.0",
                XP: ["NT 5.1", "NT 5.2"],
                Vista: "NT 6.0",
                7: "NT 6.1",
                8: "NT 6.2",
                8.1: "NT 6.3",
                10: ["NT 6.4", "NT 10.0"],
                RT: "ARM"
            }, Aa = {
                browser: [[/\b(?:crmo|crios)\/([\w\.]+)/i], [me, [_e, "Chrome"]], [/edg(?:e|ios|a)?\/([\w\.]+)/i], [me, [_e, "Edge"]], [/(opera mini)\/([-\w\.]+)/i, /(opera [mobiletab]{3,6})\b.+version\/([-\w\.]+)/i, /(opera)(?:.+version\/|[\/ ]+)([\w\.]+)/i], [_e, me], [/opios[\/ ]+([\w\.]+)/i], [me, [_e, Ge + " Mini"]], [/\bopr\/([\w\.]+)/i], [me, [_e, Ge]], [/(kindle)\/([\w\.]+)/i, /(lunascape|maxthon|netfront|jasmine|blazer)[\/ ]?([\w\.]*)/i, /(avant |iemobile|slim)(?:browser)?[\/ ]?([\w\.]*)/i, /(ba?idubrowser)[\/ ]?([\w\.]+)/i, /(?:ms|\()(ie) ([\w\.]+)/i, /(flock|rockmelt|midori|epiphany|silk|skyfire|bolt|iron|vivaldi|iridium|phantomjs|bowser|quark|qupzilla|falkon|rekonq|puffin|brave|whale(?!.+naver)|qqbrowserlite|qq|duckduckgo)\/([-\w\.]+)/i, /(heytap|ovi)browser\/([\d\.]+)/i, /(weibo)__([\d\.]+)/i], [_e, me], [/(?:\buc? ?browser|(?:juc.+)ucweb)[\/ ]?([\w\.]+)/i], [me, [_e, "UC" + Ve]], [/microm.+\bqbcore\/([\w\.]+)/i, /\bqbcore\/([\w\.]+).+microm/i], [me, [_e, "WeChat(Win) Desktop"]], [/micromessenger\/([\w\.]+)/i], [me, [_e, "WeChat"]], [/konqueror\/([\w\.]+)/i], [me, [_e, "Konqueror"]], [/trident.+rv[: ]([\w\.]{1,9})\b.+like gecko/i], [me, [_e, "IE"]], [/ya(?:search)?browser\/([\w\.]+)/i], [me, [_e, "Yandex"]], [/(avast|avg)\/([\w\.]+)/i], [[_e, /(.+)/, "$1 Secure " + Ve], me], [/\bfocus\/([\w\.]+)/i], [me, [_e, Ze + " Focus"]], [/\bopt\/([\w\.]+)/i], [me, [_e, Ge + " Touch"]], [/coc_coc\w+\/([\w\.]+)/i], [me, [_e, "Coc Coc"]], [/dolfin\/([\w\.]+)/i], [me, [_e, "Dolphin"]], [/coast\/([\w\.]+)/i], [me, [_e, Ge + " Coast"]], [/miuibrowser\/([\w\.]+)/i], [me, [_e, "MIUI " + Ve]], [/fxios\/([-\w\.]+)/i], [me, [_e, Ze]], [/\bqihu|(qi?ho?o?|360)browser/i], [[_e, "360 " + Ve]], [/(oculus|samsung|sailfish|huawei)browser\/([\w\.]+)/i], [[_e, /(.+)/, "$1 " + Ve], me], [/(comodo_dragon)\/([\w\.]+)/i], [[_e, /_/g, " "], me], [/(electron)\/([\w\.]+) safari/i, /(tesla)(?: qtcarbrowser|\/(20\d\d\.[-\w\.]+))/i, /m?(qqbrowser|baiduboxapp|2345Explorer)[\/ ]?([\w\.]+)/i], [_e, me], [/(metasr)[\/ ]?([\w\.]+)/i, /(lbbrowser)/i, /\[(linkedin)app\]/i], [_e], [/((?:fban\/fbios|fb_iab\/fb4a)(?!.+fbav)|;fbav\/([\w\.]+);)/i], [[_e, tt], me], [/(kakao(?:talk|story))[\/ ]([\w\.]+)/i, /(naver)\(.*?(\d+\.[\w\.]+).*\)/i, /safari (line)\/([\w\.]+)/i, /\b(line)\/([\w\.]+)\/iab/i, /(chromium|instagram)[\/ ]([-\w\.]+)/i], [_e, me], [/\bgsa\/([\w\.]+) .*safari\//i], [me, [_e, "GSA"]], [/musical_ly(?:.+app_?version\/|_)([\w\.]+)/i], [me, [_e, "TikTok"]], [/headlesschrome(?:\/([\w\.]+)| )/i], [me, [_e, Je + " Headless"]], [/ wv\).+(chrome)\/([\w\.]+)/i], [[_e, Je + " WebView"], me], [/droid.+ version\/([\w\.]+)\b.+(?:mobile safari|safari)/i], [me, [_e, "Android " + Ve]], [/(chrome|omniweb|arora|[tizenoka]{5} ?browser)\/v?([\w\.]+)/i], [_e, me], [/version\/([\w\.\,]+) .*mobile\/\w+ (safari)/i], [me, [_e, "Mobile Safari"]], [/version\/([\w(\.|\,)]+) .*(mobile ?safari|safari)/i], [me, _e], [/webkit.+?(mobile ?safari|safari)(\/[\w\.]+)/i], [_e, [me, _a, ta]], [/(webkit|khtml)\/([\w\.]+)/i], [_e, me], [/(navigator|netscape\d?)\/([-\w\.]+)/i], [[_e, "Netscape"], me], [/mobile vr; rv:([\w\.]+)\).+firefox/i], [me, [_e, Ze + " Reality"]], [/ekiohf.+(flow)\/([\w\.]+)/i, /(swiftfox)/i, /(icedragon|iceweasel|camino|chimera|fennec|maemo browser|minimo|conkeror|klar)[\/ ]?([\w\.\+]+)/i, /(seamonkey|k-meleon|icecat|iceape|firebird|phoenix|palemoon|basilisk|waterfox)\/([-\w\.]+)$/i, /(firefox)\/([\w\.]+)/i, /(mozilla)\/([\w\.]+) .+rv\:.+gecko\/\d+/i, /(polaris|lynx|dillo|icab|doris|amaya|w3m|netsurf|sleipnir|obigo|mosaic|(?:go|ice|up)[\. ]?browser)[-\/ ]?v?([\w\.]+)/i, /(links) \(([\w\.]+)/i, /panasonic;(viera)/i], [_e, me], [/(cobalt)\/([\w\.]+)/i], [_e, [me, /master.|lts./, ""]]],
                cpu: [[/(?:(amd|x(?:(?:86|64)[-_])?|wow|win)64)[;\)]/i], [[ce, "amd64"]], [/(ia32(?=;))/i], [[ce, oa]], [/((?:i[346]|x)86)[;\)]/i], [[ce, "ia32"]], [/\b(aarch64|arm(v?8e?l?|_?64))\b/i], [[ce, "arm64"]], [/\b(arm(?:v[67])?ht?n?[fl]p?)\b/i], [[ce, "armhf"]], [/windows (ce|mobile); ppc;/i], [[ce, "arm"]], [/((?:ppc|powerpc)(?:64)?)(?: mac|;|\))/i], [[ce, /ower/, x, oa]], [/(sun4\w)[;\)]/i], [[ce, "sparc"]], [/((?:avr32|ia64(?=;))|68k(?=\))|\barm(?=v(?:[1-7]|[5-7]1)l?|;|eabi)|(?=atmel )avr|(?:irix|mips|sparc)(?:64)?\b|pa-risc)/i], [[ce, oa]]],
                device: [[/\b(sch-i[89]0\d|shw-m380s|sm-[ptx]\w{2,4}|gt-[pn]\d{2,4}|sgh-t8[56]9|nexus 10)/i], [F, [H, Le], [Y, ve]], [/\b((?:s[cgp]h|gt|sm)-\w+|sc[g-]?[\d]+a?|galaxy nexus)/i, /samsung[- ]([-\w]+)/i, /sec-(sgh\w+)/i], [F, [H, Le], [Y, Be]], [/(?:\/|\()(ip(?:hone|od)[\w, ]*)(?:\/|;)/i], [F, [H, ke], [Y, Be]], [/\((ipad);[-\w\),; ]+apple/i, /applecoremedia\/[\w\.]+ \((ipad)/i, /\b(ipad)\d\d?,\d\d?[;\]].+ios/i], [F, [H, ke], [Y, ve]], [/(macintosh);/i], [F, [H, ke]], [/\b(sh-?[altvz]?\d\d[a-ekm]?)/i], [F, [H, We], [Y, Be]], [/\b((?:ag[rs][23]?|bah2?|sht?|btv)-a?[lw]\d{2})\b(?!.+d\/s)/i], [F, [H, ze], [Y, ve]], [/(?:huawei|honor)([-\w ]+)[;\)]/i, /\b(nexus 6p|\w{2,4}e?-[atu]?[ln][\dx][012359c][adn]?)\b(?!.+d\/s)/i], [F, [H, ze], [Y, Be]], [/\b(poco[\w ]+)(?: bui|\))/i, /\b; (\w+) build\/hm\1/i, /\b(hm[-_ ]?note?[_ ]?(?:\d\w)?) bui/i, /\b(redmi[\-_ ]?(?:note|k)?[\w_ ]+)(?: bui|\))/i, /\b(mi[-_ ]?(?:a\d|one|one[_ ]plus|note lte|max|cc)?[_ ]?(?:\d?\w?)[_ ]?(?:plus|se|lite)?)(?: bui|\))/i], [[F, /_/g, " "], [H, et], [Y, Be]], [/\b(mi[-_ ]?(?:pad)(?:[\w_ ]+))(?: bui|\))/i], [[F, /_/g, " "], [H, et], [Y, ve]], [/; (\w+) bui.+ oppo/i, /\b(cph[12]\d{3}|p(?:af|c[al]|d\w|e[ar])[mt]\d0|x9007|a101op)\b/i], [F, [H, "OPPO"], [Y, Be]], [/vivo (\w+)(?: bui|\))/i, /\b(v[12]\d{3}\w?[at])(?: bui|;)/i], [F, [H, "Vivo"], [Y, Be]], [/\b(rmx[12]\d{3})(?: bui|;|\))/i], [F, [H, "Realme"], [Y, Be]], [/\b(milestone|droid(?:[2-4x]| (?:bionic|x2|pro|razr))?:?( 4g)?)\b[\w ]+build\//i, /\bmot(?:orola)?[- ](\w*)/i, /((?:moto[\w\(\) ]+|xt\d{3,4}|nexus 6)(?= bui|\)))/i], [F, [H, He], [Y, Be]], [/\b(mz60\d|xoom[2 ]{0,2}) build\//i], [F, [H, He], [Y, ve]], [/((?=lg)?[vl]k\-?\d{3}) bui| 3\.[-\w; ]{10}lg?-([06cv9]{3,4})/i], [F, [H, De], [Y, ve]], [/(lm(?:-?f100[nv]?|-[\w\.]+)(?= bui|\))|nexus [45])/i, /\blg[-e;\/ ]+((?!browser|netcast|android tv)\w+)/i, /\blg-?([\d\w]+) bui/i], [F, [H, De], [Y, Be]], [/(ideatab[-\w ]+)/i, /lenovo ?(s[56]000[-\w]+|tab(?:[\w ]+)|yt[-\d\w]{6}|tb[-\d\w]{6})/i], [F, [H, "Lenovo"], [Y, ve]], [/(?:maemo|nokia).*(n900|lumia \d+)/i, /nokia[-_ ]?([-\w\.]*)/i], [[F, /_/g, " "], [H, "Nokia"], [Y, Be]], [/(pixel c)\b/i], [F, [H, qe], [Y, ve]], [/droid.+; (pixel[\daxl ]{0,6})(?: bui|\))/i], [F, [H, qe], [Y, Be]], [/droid.+ (a?\d[0-2]{2}so|[c-g]\d{4}|so[-gl]\w+|xq-a\w[4-7][12])(?= bui|\).+chrome\/(?![1-6]{0,1}\d\.))/i], [F, [H, dt], [Y, Be]], [/sony tablet [ps]/i, /\b(?:sony)?sgp\w+(?: bui|\))/i], [[F, "Xperia Tablet"], [H, dt], [Y, ve]], [/ (kb2005|in20[12]5|be20[12][59])\b/i, /(?:one)?(?:plus)? (a\d0\d\d)(?: b|\))/i], [F, [H, "OnePlus"], [Y, Be]], [/(alexa)webm/i, /(kf[a-z]{2}wi|aeo[c-r]{2})( bui|\))/i, /(kf[a-z]+)( bui|\)).+silk\//i], [F, [H, Me], [Y, ve]], [/((?:sd|kf)[0349hijorstuw]+)( bui|\)).+silk\//i], [[F, /(.+)/g, "Fire Phone $1"], [H, Me], [Y, Be]], [/(playbook);[-\w\),; ]+(rim)/i], [F, H, [Y, ve]], [/\b((?:bb[a-f]|st[hv])100-\d)/i, /\(bb10; (\w+)/i], [F, [H, $e], [Y, Be]], [/(?:\b|asus_)(transfo[prime ]{4,10} \w+|eeepc|slider \w+|nexus 7|padfone|p00[cj])/i], [F, [H, Fe], [Y, ve]], [/ (z[bes]6[027][012][km][ls]|zenfone \d\w?)\b/i], [F, [H, Fe], [Y, Be]], [/(nexus 9)/i], [F, [H, "HTC"], [Y, ve]], [/(htc)[-;_ ]{1,2}([\w ]+(?=\)| bui)|\w+)/i, /(zte)[- ]([\w ]+?)(?: bui|\/|\))/i, /(alcatel|geeksphone|nexian|panasonic(?!(?:;|\.))|sony(?!-bra))[-_ ]?([-\w]*)/i], [H, [F, /_/g, " "], [Y, Be]], [/droid.+; ([ab][1-7]-?[0178a]\d\d?)/i], [F, [H, "Acer"], [Y, ve]], [/droid.+; (m[1-5] note) bui/i, /\bmz-([-\w]{2,})/i], [F, [H, "Meizu"], [Y, Be]], [/(blackberry|benq|palm(?=\-)|sonyericsson|acer|asus|dell|meizu|motorola|polytron)[-_ ]?([-\w]*)/i, /(hp) ([\w ]+\w)/i, /(asus)-?(\w+)/i, /(microsoft); (lumia[\w ]+)/i, /(lenovo)[-_ ]?([-\w]+)/i, /(jolla)/i, /(oppo) ?([\w ]+) bui/i], [H, F, [Y, Be]], [/(kobo)\s(ereader|touch)/i, /(archos) (gamepad2?)/i, /(hp).+(touchpad(?!.+tablet)|tablet)/i, /(kindle)\/([\w\.]+)/i, /(nook)[\w ]+build\/(\w+)/i, /(dell) (strea[kpr\d ]*[\dko])/i, /(le[- ]+pan)[- ]+(\w{1,9}) bui/i, /(trinity)[- ]*(t\d{3}) bui/i, /(gigaset)[- ]+(q\w{1,9}) bui/i, /(vodafone) ([\w ]+)(?:\)| bui)/i], [H, F, [Y, ve]], [/(surface duo)/i], [F, [H, Xe], [Y, ve]], [/droid [\d\.]+; (fp\du?)(?: b|\))/i], [F, [H, "Fairphone"], [Y, Be]], [/(u304aa)/i], [F, [H, "AT&T"], [Y, Be]], [/\bsie-(\w*)/i], [F, [H, "Siemens"], [Y, Be]], [/\b(rct\w+) b/i], [F, [H, "RCA"], [Y, ve]], [/\b(venue[\d ]{2,7}) b/i], [F, [H, "Dell"], [Y, ve]], [/\b(q(?:mv|ta)\w+) b/i], [F, [H, "Verizon"], [Y, ve]], [/\b(?:barnes[& ]+noble |bn[rt])([\w\+ ]*) b/i], [F, [H, "Barnes & Noble"], [Y, ve]], [/\b(tm\d{3}\w+) b/i], [F, [H, "NuVision"], [Y, ve]], [/\b(k88) b/i], [F, [H, "ZTE"], [Y, ve]], [/\b(nx\d{3}j) b/i], [F, [H, "ZTE"], [Y, Be]], [/\b(gen\d{3}) b.+49h/i], [F, [H, "Swiss"], [Y, Be]], [/\b(zur\d{3}) b/i], [F, [H, "Swiss"], [Y, ve]], [/\b((zeki)?tb.*\b) b/i], [F, [H, "Zeki"], [Y, ve]], [/\b([yr]\d{2}) b/i, /\b(dragon[- ]+touch |dt)(\w{5}) b/i], [[H, "Dragon Touch"], F, [Y, ve]], [/\b(ns-?\w{0,9}) b/i], [F, [H, "Insignia"], [Y, ve]], [/\b((nxa|next)-?\w{0,9}) b/i], [F, [H, "NextBook"], [Y, ve]], [/\b(xtreme\_)?(v(1[045]|2[015]|[3469]0|7[05])) b/i], [[H, "Voice"], F, [Y, Be]], [/\b(lvtel\-)?(v1[12]) b/i], [[H, "LvTel"], F, [Y, Be]], [/\b(ph-1) /i], [F, [H, "Essential"], [Y, Be]], [/\b(v(100md|700na|7011|917g).*\b) b/i], [F, [H, "Envizen"], [Y, ve]], [/\b(trio[-\w\. ]+) b/i], [F, [H, "MachSpeed"], [Y, ve]], [/\btu_(1491) b/i], [F, [H, "Rotor"], [Y, ve]], [/(shield[\w ]+) b/i], [F, [H, "Nvidia"], [Y, ve]], [/(sprint) (\w+)/i], [H, F, [Y, Be]], [/(kin\.[onetw]{3})/i], [[F, /\./g, " "], [H, Xe], [Y, Be]], [/droid.+; (cc6666?|et5[16]|mc[239][23]x?|vc8[03]x?)\)/i], [F, [H, nt], [Y, ve]], [/droid.+; (ec30|ps20|tc[2-8]\d[kx])\)/i], [F, [H, nt], [Y, Be]], [/smart-tv.+(samsung)/i], [H, [Y, Re]], [/hbbtv.+maple;(\d+)/i], [[F, /^/, "SmartTV"], [H, Le], [Y, Re]], [/(nux; netcast.+smarttv|lg (netcast\.tv-201\d|android tv))/i], [[H, De], [Y, Re]], [/(apple) ?tv/i], [H, [F, ke + " TV"], [Y, Re]], [/crkey/i], [[F, Je + "cast"], [H, qe], [Y, Re]], [/droid.+aft(\w)( bui|\))/i], [F, [H, Me], [Y, Re]], [/\(dtv[\);].+(aquos)/i, /(aquos-tv[\w ]+)\)/i], [F, [H, We], [Y, Re]], [/(bravia[\w ]+)( bui|\))/i], [F, [H, dt], [Y, Re]], [/(mitv-\w{5}) bui/i], [F, [H, et], [Y, Re]], [/Hbbtv.*(technisat) (.*);/i], [H, F, [Y, Re]], [/\b(roku)[\dx]*[\)\/]((?:dvp-)?[\d\.]*)/i, /hbbtv\/\d+\.\d+\.\d+ +\([\w\+ ]*; *([\w\d][^;]*);([^;]*)/i], [[H, vt], [F, vt], [Y, Re]], [/\b(android tv|smart[- ]?tv|opera tv|tv; rv:)\b/i], [[Y, Re]], [/(ouya)/i, /(nintendo) ([wids3utch]+)/i], [H, F, [Y, ie]], [/droid.+; (shield) bui/i], [F, [H, "Nvidia"], [Y, ie]], [/(playstation [345portablevi]+)/i], [F, [H, dt], [Y, ie]], [/\b(xbox(?: one)?(?!; xbox))[\); ]/i], [F, [H, Xe], [Y, ie]], [/((pebble))app/i], [H, F, [Y, Ce]], [/(watch)(?: ?os[,\/]|\d,\d\/)[\d\.]+/i], [F, [H, ke], [Y, Ce]], [/droid.+; (glass) \d/i], [F, [H, qe], [Y, Ce]], [/droid.+; (wt63?0{2,3})\)/i], [F, [H, nt], [Y, Ce]], [/(quest( 2| pro)?)/i], [F, [H, tt], [Y, Ce]], [/(tesla)(?: qtcarbrowser|\/[-\w\.]+)/i], [H, [Y, Ne]], [/(aeobc)\b/i], [F, [H, Me], [Y, Ne]], [/droid .+?; ([^;]+?)(?: bui|\) applew).+? mobile safari/i], [F, [Y, Be]], [/droid .+?; ([^;]+?)(?: bui|\) applew).+?(?! mobile) safari/i], [F, [Y, ve]], [/\b((tablet|tab)[;\/]|focus\/\d(?!.+mobile))/i], [[Y, ve]], [/(phone|mobile(?:[;\/]| [ \w\/\.]*safari)|pda(?=.+windows ce))/i], [[Y, Be]], [/(android[-\w\. ]{0,9});.+buil/i], [F, [H, "Generic"]]],
                engine: [[/windows.+ edge\/([\w\.]+)/i], [me, [_e, Qe + "HTML"]], [/webkit\/537\.36.+chrome\/(?!27)([\w\.]+)/i], [me, [_e, "Blink"]], [/(presto)\/([\w\.]+)/i, /(webkit|trident|netfront|netsurf|amaya|lynx|w3m|goanna)\/([\w\.]+)/i, /ekioh(flow)\/([\w\.]+)/i, /(khtml|tasman|links)[\/ ]\(?([\w\.]+)/i, /(icab)[\/ ]([23]\.[\d\.]+)/i, /\b(libweb)/i], [_e, me], [/rv\:([\w\.]{1,9})\b.+(gecko)/i], [me, _e]],
                os: [[/microsoft (windows) (vista|xp)/i], [_e, me], [/(windows) nt 6\.2; (arm)/i, /(windows (?:phone(?: os)?|mobile))[\/ ]?([\d\.\w ]*)/i, /(windows)[\/ ]?([ntce\d\. ]+\w)(?!.+xbox)/i], [_e, [me, _a, na]], [/(win(?=3|9|n)|win 9x )([nt\d\.]+)/i], [[_e, "Windows"], [me, _a, na]], [/ip[honead]{2,4}\b(?:.*os ([\w]+) like mac|; opera)/i, /ios;fbsv\/([\d\.]+)/i, /cfnetwork\/.+darwin/i], [[me, /_/g, "."], [_e, "iOS"]], [/(mac os x) ?([\w\. ]*)/i, /(macintosh|mac_powerpc\b)(?!.+haiku)/i], [[_e, Bt], [me, /_/g, "."]], [/droid ([\w\.]+)\b.+(android[- ]x86|harmonyos)/i], [me, _e], [/(android|webos|qnx|bada|rim tablet os|maemo|meego|sailfish)[-\/ ]?([\w\.]*)/i, /(blackberry)\w*\/([\w\.]*)/i, /(tizen|kaios)[\/ ]([\w\.]+)/i, /\((series40);/i], [_e, me], [/\(bb(10);/i], [me, [_e, $e]], [/(?:symbian ?os|symbos|s60(?=;)|series60)[-\/ ]?([\w\.]*)/i], [me, [_e, "Symbian"]], [/mozilla\/[\d\.]+ \((?:mobile|tablet|tv|mobile; [\w ]+); rv:.+ gecko\/([\w\.]+)/i], [me, [_e, Ze + " OS"]], [/web0s;.+rt(tv)/i, /\b(?:hp)?wos(?:browser)?\/([\w\.]+)/i], [me, [_e, "webOS"]], [/watch(?: ?os[,\/]|\d,\d\/)([\d\.]+)/i], [me, [_e, "watchOS"]], [/crkey\/([\d\.]+)/i], [me, [_e, Je + "cast"]], [/(cros) [\w]+(?:\)| ([\w\.]+)\b)/i], [[_e, lt], me], [/panasonic;(viera)/i, /(netrange)mmh/i, /(nettv)\/(\d+\.[\w\.]+)/i, /(nintendo|playstation) ([wids345portablevuch]+)/i, /(xbox); +xbox ([^\);]+)/i, /\b(joli|palm)\b ?(?:os)?\/?([\w\.]*)/i, /(mint)[\/\(\) ]?(\w*)/i, /(mageia|vectorlinux)[; ]/i, /([kxln]?ubuntu|debian|suse|opensuse|gentoo|arch(?= linux)|slackware|fedora|mandriva|centos|pclinuxos|red ?hat|zenwalk|linpus|raspbian|plan 9|minix|risc os|contiki|deepin|manjaro|elementary os|sabayon|linspire)(?: gnu\/linux)?(?: enterprise)?(?:[- ]linux)?(?:-gnu)?[-\/ ]?(?!chrom|package)([-\w\.]*)/i, /(hurd|linux) ?([\w\.]*)/i, /(gnu) ?([\w\.]*)/i, /\b([-frentopcghs]{0,5}bsd|dragonfly)[\/ ]?(?!amd|[ix346]{1,2}86)([\w\.]*)/i, /(haiku) (\w+)/i], [_e, me], [/(sunos) ?([\w\.\d]*)/i], [[_e, "Solaris"], me], [/((?:open)?solaris)[-\/ ]?([\w\.]*)/i, /(aix) ((\d)(?=\.|\)| )[\w\.])*/i, /\b(beos|os\/2|amigaos|morphos|openvms|fuchsia|hp-ux|serenityos)/i, /(unix) ?([\w\.]*)/i], [_e, me]]
            }, Ea = function (Ta, fa) {
                if (typeof Ta === O && (fa = Ta, Ta = E), !(this instanceof Ea)) return new Ea(Ta, fa).getResult();
                var ca = typeof y !== L && y.navigator ? y.navigator : E,
                    Ia = Ta || (ca && ca.userAgent ? ca.userAgent : x), Ma = ca && ca.userAgentData ? ca.userAgentData : E,
                    Fa = fa ? kt(Aa, fa) : Aa, va = ca && ca.userAgent == Ia;
                return this.getBrowser = function () {
                    var ha = {};
                    return ha[_e] = E, ha[me] = E, ea.call(ha, Ia, Fa.browser), ha[z] = sa(ha[me]), va && ca && ca.brave && typeof ca.brave.isBrave == N && (ha[_e] = "Brave"), ha
                }, this.getCPU = function () {
                    var ha = {};
                    return ha[ce] = E, ea.call(ha, Ia, Fa.cpu), ha
                }, this.getDevice = function () {
                    var ha = {};
                    return ha[H] = E, ha[F] = E, ha[Y] = E, ea.call(ha, Ia, Fa.device), va && !ha[Y] && Ma && Ma.mobile && (ha[Y] = Be), va && ha[F] == "Macintosh" && ca && typeof ca.standalone !== L && ca.maxTouchPoints && ca.maxTouchPoints > 2 && (ha[F] = "iPad", ha[Y] = ve), ha
                }, this.getEngine = function () {
                    var ha = {};
                    return ha[_e] = E, ha[me] = E, ea.call(ha, Ia, Fa.engine), ha
                }, this.getOS = function () {
                    var ha = {};
                    return ha[_e] = E, ha[me] = E, ea.call(ha, Ia, Fa.os), va && !ha[_e] && Ma && Ma.platform != "Unknown" && (ha[_e] = Ma.platform.replace(/chrome os/i, lt).replace(/macos/i, Bt)), ha
                }, this.getResult = function () {
                    return {
                        ua: this.getUA(),
                        browser: this.getBrowser(),
                        engine: this.getEngine(),
                        os: this.getOS(),
                        device: this.getDevice(),
                        cpu: this.getCPU()
                    }
                }, this.getUA = function () {
                    return Ia
                }, this.setUA = function (ha) {
                    return Ia = typeof ha === D && ha.length > we ? vt(ha, we) : ha, this
                }, this.setUA(Ia), this
            };
        Ea.VERSION = C, Ea.BROWSER = At([_e, me, z]), Ea.CPU = At([ce]), Ea.DEVICE = At([F, H, Y, ie, Be, Re, ve, Ce, Ne]), Ea.ENGINE = Ea.OS = At([_e, me]), r.exports && (R = r.exports = Ea), R.UAParser = Ea;
        var Sa = typeof y !== L && (y.jQuery || y.Zepto);
        if (Sa && !Sa.ua) {
            var Ga = new Ea;
            Sa.ua = Ga.getResult(), Sa.ua.get = function () {
                return Ga.getUA()
            }, Sa.ua.set = function (Ta) {
                Ga.setUA(Ta);
                var fa = Ga.getResult();
                for (var ca in fa) Sa.ua[ca] = fa[ca]
            }
        }
    })(typeof window == "object" ? window : commonjsGlobal)
})(uaParser_min, uaParser_minExports);
Object.defineProperty(lib, "__esModule", {value: !0});

function _interopDefault(r) {
    return r && typeof r == "object" && "default" in r ? r.default : r
}

var React$1 = _global_React, React__default = _interopDefault(React$1), UAParser = uaParser_minExports,
    ClientUAInstance = new UAParser, browser = ClientUAInstance.getBrowser(), cpu = ClientUAInstance.getCPU(),
    device = ClientUAInstance.getDevice(), engine = ClientUAInstance.getEngine(), os = ClientUAInstance.getOS(),
    ua = ClientUAInstance.getUA(), setUa = function r(R) {
        return ClientUAInstance.setUA(R)
    }, parseUserAgent = function r(R) {
        if (!R) {
            console.error("No userAgent string was provided");
            return
        }
        var y = new UAParser(R);
        return {
            UA: y,
            browser: y.getBrowser(),
            cpu: y.getCPU(),
            device: y.getDevice(),
            engine: y.getEngine(),
            os: y.getOS(),
            ua: y.getUA(),
            setUserAgent: function (C) {
                return y.setUA(C)
            }
        }
    }, UAHelper = Object.freeze({ClientUAInstance, browser, cpu, device, engine, os, ua, setUa, parseUserAgent});

function ownKeys(r, R) {
    var y = Object.keys(r);
    if (Object.getOwnPropertySymbols) {
        var E = Object.getOwnPropertySymbols(r);
        R && (E = E.filter(function (C) {
            return Object.getOwnPropertyDescriptor(r, C).enumerable
        })), y.push.apply(y, E)
    }
    return y
}

function _objectSpread2(r) {
    for (var R = 1; R < arguments.length; R++) {
        var y = arguments[R] != null ? arguments[R] : {};
        R % 2 ? ownKeys(Object(y), !0).forEach(function (E) {
            _defineProperty(r, E, y[E])
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(r, Object.getOwnPropertyDescriptors(y)) : ownKeys(Object(y)).forEach(function (E) {
            Object.defineProperty(r, E, Object.getOwnPropertyDescriptor(y, E))
        })
    }
    return r
}

function _typeof(r) {
    return typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? _typeof = function (R) {
        return typeof R
    } : _typeof = function (R) {
        return R && typeof Symbol == "function" && R.constructor === Symbol && R !== Symbol.prototype ? "symbol" : typeof R
    }, _typeof(r)
}

function _classCallCheck(r, R) {
    if (!(r instanceof R)) throw new TypeError("Cannot call a class as a function")
}

function _defineProperties(r, R) {
    for (var y = 0; y < R.length; y++) {
        var E = R[y];
        E.enumerable = E.enumerable || !1, E.configurable = !0, "value" in E && (E.writable = !0), Object.defineProperty(r, E.key, E)
    }
}

function _createClass(r, R, y) {
    return R && _defineProperties(r.prototype, R), y && _defineProperties(r, y), r
}

function _defineProperty(r, R, y) {
    return R in r ? Object.defineProperty(r, R, {
        value: y,
        enumerable: !0,
        configurable: !0,
        writable: !0
    }) : r[R] = y, r
}

function _extends$1() {
    return _extends$1 = Object.assign || function (r) {
        for (var R = 1; R < arguments.length; R++) {
            var y = arguments[R];
            for (var E in y) Object.prototype.hasOwnProperty.call(y, E) && (r[E] = y[E])
        }
        return r
    }, _extends$1.apply(this, arguments)
}

function _inherits(r, R) {
    if (typeof R != "function" && R !== null) throw new TypeError("Super expression must either be null or a function");
    r.prototype = Object.create(R && R.prototype, {
        constructor: {
            value: r,
            writable: !0,
            configurable: !0
        }
    }), R && _setPrototypeOf(r, R)
}

function _getPrototypeOf(r) {
    return _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function (y) {
        return y.__proto__ || Object.getPrototypeOf(y)
    }, _getPrototypeOf(r)
}

function _setPrototypeOf(r, R) {
    return _setPrototypeOf = Object.setPrototypeOf || function (E, C) {
        return E.__proto__ = C, E
    }, _setPrototypeOf(r, R)
}

function _objectWithoutPropertiesLoose$1(r, R) {
    if (r == null) return {};
    var y = {}, E = Object.keys(r), C, x;
    for (x = 0; x < E.length; x++) C = E[x], !(R.indexOf(C) >= 0) && (y[C] = r[C]);
    return y
}

function _objectWithoutProperties(r, R) {
    if (r == null) return {};
    var y = _objectWithoutPropertiesLoose$1(r, R), E, C;
    if (Object.getOwnPropertySymbols) {
        var x = Object.getOwnPropertySymbols(r);
        for (C = 0; C < x.length; C++) E = x[C], !(R.indexOf(E) >= 0) && Object.prototype.propertyIsEnumerable.call(r, E) && (y[E] = r[E])
    }
    return y
}

function _assertThisInitialized(r) {
    if (r === void 0) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    return r
}

function _possibleConstructorReturn(r, R) {
    if (R && (typeof R == "object" || typeof R == "function")) return R;
    if (R !== void 0) throw new TypeError("Derived constructors may only return object or undefined");
    return _assertThisInitialized(r)
}

function _slicedToArray(r, R) {
    return _arrayWithHoles(r) || _iterableToArrayLimit(r, R) || _unsupportedIterableToArray(r, R) || _nonIterableRest()
}

function _arrayWithHoles(r) {
    if (Array.isArray(r)) return r
}

function _iterableToArrayLimit(r, R) {
    var y = r == null ? null : typeof Symbol < "u" && r[Symbol.iterator] || r["@@iterator"];
    if (y != null) {
        var E = [], C = !0, x = !1, B, N;
        try {
            for (y = y.call(r); !(C = (B = y.next()).done) && (E.push(B.value), !(R && E.length === R)); C = !0) ;
        } catch (L) {
            x = !0, N = L
        } finally {
            try {
                !C && y.return != null && y.return()
            } finally {
                if (x) throw N
            }
        }
        return E
    }
}

function _unsupportedIterableToArray(r, R) {
    if (r) {
        if (typeof r == "string") return _arrayLikeToArray(r, R);
        var y = Object.prototype.toString.call(r).slice(8, -1);
        if (y === "Object" && r.constructor && (y = r.constructor.name), y === "Map" || y === "Set") return Array.from(r);
        if (y === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(y)) return _arrayLikeToArray(r, R)
    }
}

function _arrayLikeToArray(r, R) {
    (R == null || R > r.length) && (R = r.length);
    for (var y = 0, E = new Array(R); y < R; y++) E[y] = r[y];
    return E
}

function _nonIterableRest() {
    throw new TypeError(`Invalid attempt to destructure non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`)
}

var DeviceTypes = {
        Mobile: "mobile",
        Tablet: "tablet",
        SmartTv: "smarttv",
        Console: "console",
        Wearable: "wearable",
        Embedded: "embedded",
        Browser: void 0
    }, BrowserTypes = {
        Chrome: "Chrome",
        Firefox: "Firefox",
        Opera: "Opera",
        Yandex: "Yandex",
        Safari: "Safari",
        InternetExplorer: "Internet Explorer",
        Edge: "Edge",
        Chromium: "Chromium",
        Ie: "IE",
        MobileSafari: "Mobile Safari",
        EdgeChromium: "Edge Chromium",
        MIUI: "MIUI Browser",
        SamsungBrowser: "Samsung Browser"
    }, OsTypes = {IOS: "iOS", Android: "Android", WindowsPhone: "Windows Phone", Windows: "Windows", MAC_OS: "Mac OS"},
    InitialDeviceTypes = {isMobile: !1, isTablet: !1, isBrowser: !1, isSmartTV: !1, isConsole: !1, isWearable: !1},
    checkDeviceType = function r(R) {
        switch (R) {
            case DeviceTypes.Mobile:
                return {isMobile: !0};
            case DeviceTypes.Tablet:
                return {isTablet: !0};
            case DeviceTypes.SmartTv:
                return {isSmartTV: !0};
            case DeviceTypes.Console:
                return {isConsole: !0};
            case DeviceTypes.Wearable:
                return {isWearable: !0};
            case DeviceTypes.Browser:
                return {isBrowser: !0};
            case DeviceTypes.Embedded:
                return {isEmbedded: !0};
            default:
                return InitialDeviceTypes
        }
    }, setUserAgent = function r(R) {
        return setUa(R)
    }, setDefaults = function r(R) {
        var y = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "none";
        return R || y
    }, getNavigatorInstance = function r() {
        return typeof window < "u" && (window.navigator || navigator) ? window.navigator || navigator : !1
    }, isIOS13Check = function r(R) {
        var y = getNavigatorInstance();
        return y && y.platform && (y.platform.indexOf(R) !== -1 || y.platform === "MacIntel" && y.maxTouchPoints > 1 && !window.MSStream)
    }, browserPayload = function r(R, y, E, C, x) {
        return {
            isBrowser: R,
            browserMajorVersion: setDefaults(y.major),
            browserFullVersion: setDefaults(y.version),
            browserName: setDefaults(y.name),
            engineName: setDefaults(E.name),
            engineVersion: setDefaults(E.version),
            osName: setDefaults(C.name),
            osVersion: setDefaults(C.version),
            userAgent: setDefaults(x)
        }
    }, mobilePayload = function r(R, y, E, C) {
        return _objectSpread2({}, R, {
            vendor: setDefaults(y.vendor),
            model: setDefaults(y.model),
            os: setDefaults(E.name),
            osVersion: setDefaults(E.version),
            ua: setDefaults(C)
        })
    }, smartTvPayload = function r(R, y, E, C) {
        return {
            isSmartTV: R,
            engineName: setDefaults(y.name),
            engineVersion: setDefaults(y.version),
            osName: setDefaults(E.name),
            osVersion: setDefaults(E.version),
            userAgent: setDefaults(C)
        }
    }, consolePayload = function r(R, y, E, C) {
        return {
            isConsole: R,
            engineName: setDefaults(y.name),
            engineVersion: setDefaults(y.version),
            osName: setDefaults(E.name),
            osVersion: setDefaults(E.version),
            userAgent: setDefaults(C)
        }
    }, wearablePayload = function r(R, y, E, C) {
        return {
            isWearable: R,
            engineName: setDefaults(y.name),
            engineVersion: setDefaults(y.version),
            osName: setDefaults(E.name),
            osVersion: setDefaults(E.version),
            userAgent: setDefaults(C)
        }
    }, embeddedPayload = function r(R, y, E, C, x) {
        return {
            isEmbedded: R,
            vendor: setDefaults(y.vendor),
            model: setDefaults(y.model),
            engineName: setDefaults(E.name),
            engineVersion: setDefaults(E.version),
            osName: setDefaults(C.name),
            osVersion: setDefaults(C.version),
            userAgent: setDefaults(x)
        }
    };

function deviceDetect(r) {
    var R = r ? parseUserAgent(r) : UAHelper, y = R.device, E = R.browser, C = R.engine, x = R.os, B = R.ua,
        N = checkDeviceType(y.type), L = N.isBrowser, O = N.isMobile, D = N.isTablet, z = N.isSmartTV, F = N.isConsole,
        _e = N.isWearable, Y = N.isEmbedded;
    if (L) return browserPayload(L, E, C, x, B);
    if (z) return smartTvPayload(z, C, x, B);
    if (F) return consolePayload(F, C, x, B);
    if (O || D) return mobilePayload(N, y, x, B);
    if (_e) return wearablePayload(_e, C, x, B);
    if (Y) return embeddedPayload(Y, y, C, x, B)
}

var isMobileType = function r(R) {
    var y = R.type;
    return y === DeviceTypes.Mobile
}, isTabletType = function r(R) {
    var y = R.type;
    return y === DeviceTypes.Tablet
}, isMobileAndTabletType = function r(R) {
    var y = R.type;
    return y === DeviceTypes.Mobile || y === DeviceTypes.Tablet
}, isSmartTVType = function r(R) {
    var y = R.type;
    return y === DeviceTypes.SmartTv
}, isBrowserType = function r(R) {
    var y = R.type;
    return y === DeviceTypes.Browser
}, isWearableType = function r(R) {
    var y = R.type;
    return y === DeviceTypes.Wearable
}, isConsoleType = function r(R) {
    var y = R.type;
    return y === DeviceTypes.Console
}, isEmbeddedType = function r(R) {
    var y = R.type;
    return y === DeviceTypes.Embedded
}, getMobileVendor = function r(R) {
    var y = R.vendor;
    return setDefaults(y)
}, getMobileModel = function r(R) {
    var y = R.model;
    return setDefaults(y)
}, getDeviceType = function r(R) {
    var y = R.type;
    return setDefaults(y, "browser")
}, isAndroidType = function r(R) {
    var y = R.name;
    return y === OsTypes.Android
}, isWindowsType = function r(R) {
    var y = R.name;
    return y === OsTypes.Windows
}, isMacOsType = function r(R) {
    var y = R.name;
    return y === OsTypes.MAC_OS
}, isWinPhoneType = function r(R) {
    var y = R.name;
    return y === OsTypes.WindowsPhone
}, isIOSType = function r(R) {
    var y = R.name;
    return y === OsTypes.IOS
}, getOsVersion = function r(R) {
    var y = R.version;
    return setDefaults(y)
}, getOsName = function r(R) {
    var y = R.name;
    return setDefaults(y)
}, isChromeType = function r(R) {
    var y = R.name;
    return y === BrowserTypes.Chrome
}, isFirefoxType = function r(R) {
    var y = R.name;
    return y === BrowserTypes.Firefox
}, isChromiumType = function r(R) {
    var y = R.name;
    return y === BrowserTypes.Chromium
}, isEdgeType = function r(R) {
    var y = R.name;
    return y === BrowserTypes.Edge
}, isYandexType = function r(R) {
    var y = R.name;
    return y === BrowserTypes.Yandex
}, isSafariType = function r(R) {
    var y = R.name;
    return y === BrowserTypes.Safari || y === BrowserTypes.MobileSafari
}, isMobileSafariType = function r(R) {
    var y = R.name;
    return y === BrowserTypes.MobileSafari
}, isOperaType = function r(R) {
    var y = R.name;
    return y === BrowserTypes.Opera
}, isIEType = function r(R) {
    var y = R.name;
    return y === BrowserTypes.InternetExplorer || y === BrowserTypes.Ie
}, isMIUIType = function r(R) {
    var y = R.name;
    return y === BrowserTypes.MIUI
}, isSamsungBrowserType = function r(R) {
    var y = R.name;
    return y === BrowserTypes.SamsungBrowser
}, getBrowserFullVersion = function r(R) {
    var y = R.version;
    return setDefaults(y)
}, getBrowserVersion = function r(R) {
    var y = R.major;
    return setDefaults(y)
}, getBrowserName = function r(R) {
    var y = R.name;
    return setDefaults(y)
}, getEngineName = function r(R) {
    var y = R.name;
    return setDefaults(y)
}, getEngineVersion = function r(R) {
    var y = R.version;
    return setDefaults(y)
}, isElectronType = function r() {
    var R = getNavigatorInstance(), y = R && R.userAgent && R.userAgent.toLowerCase();
    return typeof y == "string" ? /electron/.test(y) : !1
}, isEdgeChromiumType = function r(R) {
    return typeof R == "string" && R.indexOf("Edg/") !== -1
}, getIOS13 = function r() {
    var R = getNavigatorInstance();
    return R && (/iPad|iPhone|iPod/.test(R.platform) || R.platform === "MacIntel" && R.maxTouchPoints > 1) && !window.MSStream
}, getIPad13 = function r() {
    return isIOS13Check("iPad")
}, getIphone13 = function r() {
    return isIOS13Check("iPhone")
}, getIPod13 = function r() {
    return isIOS13Check("iPod")
}, getUseragent = function r(R) {
    return setDefaults(R)
};

function buildSelectorsObject(r) {
    var R = r || UAHelper, y = R.device, E = R.browser, C = R.os, x = R.engine, B = R.ua;
    return {
        isSmartTV: isSmartTVType(y),
        isConsole: isConsoleType(y),
        isWearable: isWearableType(y),
        isEmbedded: isEmbeddedType(y),
        isMobileSafari: isMobileSafariType(E) || getIPad13(),
        isChromium: isChromiumType(E),
        isMobile: isMobileAndTabletType(y) || getIPad13(),
        isMobileOnly: isMobileType(y),
        isTablet: isTabletType(y) || getIPad13(),
        isBrowser: isBrowserType(y),
        isDesktop: isBrowserType(y),
        isAndroid: isAndroidType(C),
        isWinPhone: isWinPhoneType(C),
        isIOS: isIOSType(C) || getIPad13(),
        isChrome: isChromeType(E),
        isFirefox: isFirefoxType(E),
        isSafari: isSafariType(E),
        isOpera: isOperaType(E),
        isIE: isIEType(E),
        osVersion: getOsVersion(C),
        osName: getOsName(C),
        fullBrowserVersion: getBrowserFullVersion(E),
        browserVersion: getBrowserVersion(E),
        browserName: getBrowserName(E),
        mobileVendor: getMobileVendor(y),
        mobileModel: getMobileModel(y),
        engineName: getEngineName(x),
        engineVersion: getEngineVersion(x),
        getUA: getUseragent(B),
        isEdge: isEdgeType(E) || isEdgeChromiumType(B),
        isYandex: isYandexType(E),
        deviceType: getDeviceType(y),
        isIOS13: getIOS13(),
        isIPad13: getIPad13(),
        isIPhone13: getIphone13(),
        isIPod13: getIPod13(),
        isElectron: isElectronType(),
        isEdgeChromium: isEdgeChromiumType(B),
        isLegacyEdge: isEdgeType(E) && !isEdgeChromiumType(B),
        isWindows: isWindowsType(C),
        isMacOs: isMacOsType(C),
        isMIUI: isMIUIType(E),
        isSamsungBrowser: isSamsungBrowserType(E)
    }
}

var isSmartTV = isSmartTVType(device), isConsole = isConsoleType(device), isWearable = isWearableType(device),
    isEmbedded = isEmbeddedType(device), isMobileSafari = isMobileSafariType(browser) || getIPad13(),
    isChromium = isChromiumType(browser), isMobile = isMobileAndTabletType(device) || getIPad13(),
    isMobileOnly = isMobileType(device), isTablet = isTabletType(device) || getIPad13(),
    isBrowser = isBrowserType(device), isDesktop = isBrowserType(device), isAndroid = isAndroidType(os),
    isWinPhone = isWinPhoneType(os), isIOS = isIOSType(os) || getIPad13(), isChrome = isChromeType(browser),
    isFirefox = isFirefoxType(browser), isSafari = isSafariType(browser), isOpera = isOperaType(browser),
    isIE = isIEType(browser), osVersion = getOsVersion(os), osName = getOsName(os),
    fullBrowserVersion = getBrowserFullVersion(browser), browserVersion = getBrowserVersion(browser),
    browserName = getBrowserName(browser), mobileVendor = getMobileVendor(device), mobileModel = getMobileModel(device),
    engineName = getEngineName(engine), engineVersion = getEngineVersion(engine), getUA = getUseragent(ua),
    isEdge = isEdgeType(browser) || isEdgeChromiumType(ua), isYandex = isYandexType(browser),
    deviceType = getDeviceType(device), isIOS13 = getIOS13(), isIPad13 = getIPad13(), isIPhone13 = getIphone13(),
    isIPod13 = getIPod13(), isElectron = isElectronType(), isEdgeChromium = isEdgeChromiumType(ua),
    isLegacyEdge = isEdgeType(browser) && !isEdgeChromiumType(ua), isWindows = isWindowsType(os),
    isMacOs = isMacOsType(os), isMIUI = isMIUIType(browser), isSamsungBrowser = isSamsungBrowserType(browser),
    getSelectorsByUserAgent = function r(R) {
        if (!R || typeof R != "string") {
            console.error("No valid user agent string was provided");
            return
        }
        var y = parseUserAgent(R), E = y.device, C = y.browser, x = y.os, B = y.engine, N = y.ua;
        return buildSelectorsObject({device: E, browser: C, os: x, engine: B, ua: N})
    }, AndroidView = function r(R) {
        var y = R.renderWithFragment, E = R.children, C = _objectWithoutProperties(R, ["renderWithFragment", "children"]);
        return isAndroid ? y ? React__default.createElement(React$1.Fragment, null, E) : React__default.createElement("div", C, E) : null
    }, BrowserView = function r(R) {
        var y = R.renderWithFragment, E = R.children, C = _objectWithoutProperties(R, ["renderWithFragment", "children"]);
        return isBrowser ? y ? React__default.createElement(React$1.Fragment, null, E) : React__default.createElement("div", C, E) : null
    }, IEView = function r(R) {
        var y = R.renderWithFragment, E = R.children, C = _objectWithoutProperties(R, ["renderWithFragment", "children"]);
        return isIE ? y ? React__default.createElement(React$1.Fragment, null, E) : React__default.createElement("div", C, E) : null
    }, IOSView = function r(R) {
        var y = R.renderWithFragment, E = R.children, C = _objectWithoutProperties(R, ["renderWithFragment", "children"]);
        return isIOS ? y ? React__default.createElement(React$1.Fragment, null, E) : React__default.createElement("div", C, E) : null
    }, MobileView = function r(R) {
        var y = R.renderWithFragment, E = R.children, C = _objectWithoutProperties(R, ["renderWithFragment", "children"]);
        return isMobile ? y ? React__default.createElement(React$1.Fragment, null, E) : React__default.createElement("div", C, E) : null
    }, TabletView = function r(R) {
        var y = R.renderWithFragment, E = R.children, C = _objectWithoutProperties(R, ["renderWithFragment", "children"]);
        return isTablet ? y ? React__default.createElement(React$1.Fragment, null, E) : React__default.createElement("div", C, E) : null
    }, WinPhoneView = function r(R) {
        var y = R.renderWithFragment, E = R.children, C = _objectWithoutProperties(R, ["renderWithFragment", "children"]);
        return isWinPhone ? y ? React__default.createElement(React$1.Fragment, null, E) : React__default.createElement("div", C, E) : null
    }, MobileOnlyView = function r(R) {
        var y = R.renderWithFragment, E = R.children;
        R.viewClassName, R.style;
        var C = _objectWithoutProperties(R, ["renderWithFragment", "children", "viewClassName", "style"]);
        return isMobileOnly ? y ? React__default.createElement(React$1.Fragment, null, E) : React__default.createElement("div", C, E) : null
    }, SmartTVView = function r(R) {
        var y = R.renderWithFragment, E = R.children, C = _objectWithoutProperties(R, ["renderWithFragment", "children"]);
        return isSmartTV ? y ? React__default.createElement(React$1.Fragment, null, E) : React__default.createElement("div", C, E) : null
    }, ConsoleView = function r(R) {
        var y = R.renderWithFragment, E = R.children, C = _objectWithoutProperties(R, ["renderWithFragment", "children"]);
        return isConsole ? y ? React__default.createElement(React$1.Fragment, null, E) : React__default.createElement("div", C, E) : null
    }, WearableView = function r(R) {
        var y = R.renderWithFragment, E = R.children, C = _objectWithoutProperties(R, ["renderWithFragment", "children"]);
        return isWearable ? y ? React__default.createElement(React$1.Fragment, null, E) : React__default.createElement("div", C, E) : null
    }, CustomView = function r(R) {
        var y = R.renderWithFragment, E = R.children;
        R.viewClassName, R.style;
        var C = R.condition,
            x = _objectWithoutProperties(R, ["renderWithFragment", "children", "viewClassName", "style", "condition"]);
        return C ? y ? React__default.createElement(React$1.Fragment, null, E) : React__default.createElement("div", x, E) : null
    };

function withOrientationChange(r) {
    return function (R) {
        _inherits(y, R);

        function y(E) {
            var C;
            return _classCallCheck(this, y), C = _possibleConstructorReturn(this, _getPrototypeOf(y).call(this, E)), C.isEventListenerAdded = !1, C.handleOrientationChange = C.handleOrientationChange.bind(_assertThisInitialized(C)), C.onOrientationChange = C.onOrientationChange.bind(_assertThisInitialized(C)), C.onPageLoad = C.onPageLoad.bind(_assertThisInitialized(C)), C.state = {
                isLandscape: !1,
                isPortrait: !1
            }, C
        }

        return _createClass(y, [{
            key: "handleOrientationChange", value: function () {
                this.isEventListenerAdded || (this.isEventListenerAdded = !0);
                var C = window.innerWidth > window.innerHeight ? 90 : 0;
                this.setState({isPortrait: C === 0, isLandscape: C === 90})
            }
        }, {
            key: "onOrientationChange", value: function () {
                this.handleOrientationChange()
            }
        }, {
            key: "onPageLoad", value: function () {
                this.handleOrientationChange()
            }
        }, {
            key: "componentDidMount", value: function () {
                (typeof window > "u" ? "undefined" : _typeof(window)) !== void 0 && isMobile && (this.isEventListenerAdded ? window.removeEventListener("load", this.onPageLoad, !1) : (this.handleOrientationChange(), window.addEventListener("load", this.onPageLoad, !1)), window.addEventListener("resize", this.onOrientationChange, !1))
            }
        }, {
            key: "componentWillUnmount", value: function () {
                window.removeEventListener("resize", this.onOrientationChange, !1)
            }
        }, {
            key: "render", value: function () {
                return React__default.createElement(r, _extends$1({}, this.props, {
                    isLandscape: this.state.isLandscape,
                    isPortrait: this.state.isPortrait
                }))
            }
        }]), y
    }(React__default.Component)
}

function useMobileOrientation() {
    var r = React$1.useState(function () {
        var x = window.innerWidth > window.innerHeight ? 90 : 0;
        return {isPortrait: x === 0, isLandscape: x === 90, orientation: x === 0 ? "portrait" : "landscape"}
    }), R = _slicedToArray(r, 2), y = R[0], E = R[1], C = React$1.useCallback(function () {
        var x = window.innerWidth > window.innerHeight ? 90 : 0,
            B = {isPortrait: x === 0, isLandscape: x === 90, orientation: x === 0 ? "portrait" : "landscape"};
        y.orientation !== B.orientation && E(B)
    }, [y.orientation]);
    return React$1.useEffect(function () {
        return (typeof window > "u" ? "undefined" : _typeof(window)) !== void 0 && isMobile && (C(), window.addEventListener("load", C, !1), window.addEventListener("resize", C, !1)), function () {
            window.removeEventListener("resize", C, !1), window.removeEventListener("load", C, !1)
        }
    }, [C]), y
}

function useDeviceData(r) {
    var R = r || window.navigator.userAgent;
    return parseUserAgent(R)
}

function useDeviceSelectors(r) {
    var R = r || window.navigator.userAgent, y = useDeviceData(R), E = buildSelectorsObject(y);
    return [E, y]
}

lib.AndroidView = AndroidView;
lib.BrowserTypes = BrowserTypes;
lib.BrowserView = BrowserView;
lib.ConsoleView = ConsoleView;
lib.CustomView = CustomView;
lib.IEView = IEView;
lib.IOSView = IOSView;
lib.MobileOnlyView = MobileOnlyView;
lib.MobileView = MobileView;
lib.OsTypes = OsTypes;
lib.SmartTVView = SmartTVView;
lib.TabletView = TabletView;
lib.WearableView = WearableView;
lib.WinPhoneView = WinPhoneView;
var browserName_1 = lib.browserName = browserName;
lib.browserVersion = browserVersion;
lib.deviceDetect = deviceDetect;
lib.deviceType = deviceType;
lib.engineName = engineName;
lib.engineVersion = engineVersion;
var fullBrowserVersion_1 = lib.fullBrowserVersion = fullBrowserVersion;
lib.getSelectorsByUserAgent = getSelectorsByUserAgent;
lib.getUA = getUA;
var isAndroid_1 = lib.isAndroid = isAndroid;
lib.isBrowser = isBrowser;
var isChrome_1 = lib.isChrome = isChrome;
lib.isChromium = isChromium;
lib.isConsole = isConsole;
var isDesktop_1 = lib.isDesktop = isDesktop, isEdge_1 = lib.isEdge = isEdge;
lib.isEdgeChromium = isEdgeChromium;
lib.isElectron = isElectron;
lib.isEmbedded = isEmbedded;
var isFirefox_1 = lib.isFirefox = isFirefox;
lib.isIE = isIE;
var isIOS_1 = lib.isIOS = isIOS;
lib.isIOS13 = isIOS13;
lib.isIPad13 = isIPad13;
lib.isIPhone13 = isIPhone13;
lib.isIPod13 = isIPod13;
lib.isLegacyEdge = isLegacyEdge;
lib.isMIUI = isMIUI;
var isMacOs_1 = lib.isMacOs = isMacOs, isMobile_1 = lib.isMobile = isMobile;
lib.isMobileOnly = isMobileOnly;
lib.isMobileSafari = isMobileSafari;
var isOpera_1 = lib.isOpera = isOpera, isSafari_1 = lib.isSafari = isSafari;
lib.isSamsungBrowser = isSamsungBrowser;
lib.isSmartTV = isSmartTV;
var isTablet_1 = lib.isTablet = isTablet;
lib.isWearable = isWearable;
lib.isWinPhone = isWinPhone;
var isWindows_1 = lib.isWindows = isWindows;
lib.isYandex = isYandex;
var mobileModel_1 = lib.mobileModel = mobileModel, mobileVendor_1 = lib.mobileVendor = mobileVendor,
    osName_1 = lib.osName = osName, osVersion_1 = lib.osVersion = osVersion;
lib.parseUserAgent = parseUserAgent;
lib.setUserAgent = setUserAgent;
lib.useDeviceData = useDeviceData;
lib.useDeviceSelectors = useDeviceSelectors;
lib.useMobileOrientation = useMobileOrientation;
lib.withOrientationChange = withOrientationChange;
const DialogBc = "", , pwa = "", PwaModal = () => null;
let PwaContext = React.createContext({}), PwaProvider = ({children: r}) => jsxs(PwaContext.Provider, {
    value: {...usePwa()},
    children: [jsx(PwaModal, {}), r]
});
const usePwa = () => {
    let {onNormalPopUpMessageByCode: r, onNormalDialogMessage: R} = useDialog();
    const [y, E] = React.useState(null), C = () => isIOS_1 && isSafari_1, [x, B] = React.useState(!!C()),
        N = () => !!(window.matchMedia("(display-mode: standalone)").matches || "standalone" in navigator && navigator.standalone === !0),
        L = () => {
            if (N()) {
                console.warn("Standalone mode.");
                return
            }
            if (isMobile_1 || isTablet_1) {
                O();
                return
            }
            if (!isChrome_1 && !isEdge_1 && !isOpera_1 && isFirefox_1) {
                R("For the best experience, we recommend using our web app's PWA feature on Google Chrome or Microsoft Edge.", () => {
                });
                return
            } else O()
        }, O = () => {
            if (N()) {
                console.warn("Standalone mode.");
                return
            }
            B(!1)
        }, D = () => {
            window.addEventListener("beforeinstallprompt", function (Y) {
                Y.preventDefault();
                let H = window;
                return H.myDeferredPrompt = Y, E(Y), !1
            }), window.addEventListener("appinstalled", Y => {
                let H = window;
                E(null), H.myDeferredPrompt = null
            })
        };
    return React.useEffect(() => {
        let Y = sessionStorage.getItem("erv_pwa_hidden") == "true";
        return C() && (Y = !0), B(Y), window.addEventListener("beforeinstallprompt", function (H) {
            H.preventDefault();
            let me = window;
            return me.myDeferredPrompt = H, E(H), !1
        }), window.addEventListener("appinstalled", H => {
            let me = window;
            E(null), me.myDeferredPrompt = null
        }), () => {
            window.removeEventListener("beforeinstallprompt", function (H) {
                H.preventDefault();
                let me = window;
                return me.myDeferredPrompt = H, E(H), !1
            }), window.removeEventListener("appinstalled", H => {
                let me = window;
                E(null), me.myDeferredPrompt = null
            })
        }
    }, []), React.useEffect(() => {
        if (window.myDeferredPrompt) {
            let Y = window.myDeferredPrompt;
            E(Y)
        } else E(null)
    }, [window.myDeferredPrompt]), {
        checkPWAisInstalled: () => !!(y || window.myDeferredPrompt), handleAddToHomeScreenClick: () => {
            if (isMobile_1 || isTablet_1) {
                let Y = {
                    ios: 'To add this web app to the home screen and tap below icon and tap on "Add to Home Screen".',
                    android: 'To add this web app to the home screen open the browser option menu and tap on "Add to homescreen". (The menu can be accessed by pressing the menu hardware button if your device has one, or by tapping the top right menu icon)',
                    default: 'To add this web app to the home screen, please tap on "Add to Home Screen".'
                };
                if (isIOS_1) R(Y.ios, () => {
                }); else if (isAndroid_1) {
                    if (y) try {
                        y.prompt(), y.userChoice.then(H => {
                            H.outcome === "accepted" ? (E(null), Logger$1.info("The app was added to the home screen")) : Logger$1.info("The app was not added to the home screen")
                        })
                    } catch {
                        R(Y.android, () => {
                        })
                    }
                } else R(Y.default, () => {
                })
            } else {
                if (!isChrome_1 && !isEdge_1) {
                    R("For the best experience, we recommend using our web app's PWA feature on Google Chrome or Microsoft Edge.", () => {
                    });
                    return
                }
                if (y) try {
                    y.prompt(), y.userChoice.then(Y => {
                        Y.outcome === "accepted" ? (E(null), Logger$1.info("The app was added to the home screen")) : Logger$1.info("The app was not added to the home screen")
                    })
                } catch (Y) {
                    console.error(Y)
                } else {
                    console.info("PWA in release mode");
                    let Y = window;
                    Y.myDeferredPrompt && (Y.myDeferredPrompt.prompt(), Y.myDeferredPrompt.userChoice.then(H => {
                        H.outcome === "accepted" ? (Logger$1.info("The app was added to the home screen"), localStorage.removeItem("erv_session_id_pwa"), Y.myDeferredPrompt = null) : Logger$1.info("The app was not added to the home screen")
                    }))
                }
            }
        }, prompt: y, setPrompt: E, init: D, hideDialog: () => {
            B(!0), sessionStorage.setItem("erv_pwa_hidden", "true")
        }, isAppleMobile: C, isStandalone: N, forceShowPWA: L, isHidden: x
    }
};
var UserActionType = (r => (r.CLICK = "user_action/click", r.CUSTOM = "user_action/custom", r))(UserActionType || {}),
    PrinterState = (r => (r.NORMAL = "00", r.PAPER_JAM = "01", r.NOT_CONNECTED = "FF", r.UNAVAILABLE_PLAYER = "99", r))(PrinterState || {}),
    PaperState = (r => (r.PLENTY_OF_PAPER = "00", r.LOW_ON_PAPER = "10", r.EMPTY_OF_PAPER = "FF", r))(PaperState || {}),
    PrinterResponseErrorCode = (r => (r.SUCCESS = "0000", r.INVALID_MESSAGE_FORMAT = "E001", r.UNSUPPORTED_OPERATION = "E002", r.MISSING_REQUIRED_KEY_OP_CODE = "E011", r.MISSING_REQUIRED_KEY_SC = "E012", r.INVALID_DATA_FORMAT_FOR_SC = "E021", r.INVALUE_VALUE_FOR_SC = "E031", r.CLIENT_INTERNAL_ERROR = "E0FF", r.PRINTER_IS_NOT_CONNECTED = "E101", r.PRINTER_JAM = "E111", r.EMPTY_OF_PAPER = "E112", r.PRINTER_INTERNAL_ERROR = "E1FF", r))(PrinterResponseErrorCode || {});

function useWindowSize(r = {}) {
    let {initializeWithValue: R = !0} = r;
    const [y, E] = React.useState(() => R ? {width: window.innerWidth, height: window.innerHeight} : {
        width: void 0,
        height: void 0
    }), C = React.useRef(() => E({width: window.innerWidth, height: window.innerHeight})).current;
    return React.useEffect(() => (window.addEventListener("resize", C), C(), () => window.removeEventListener("resize", C)), [r.initializeWithValue]), y
}

const useUserActionMessage = () => {
    const [r] = React.useContext(UserInfoContext), {ip: R} = React.useContext(ServerConfigContext), {gameSessionContext: y} = React.useContext(GameSessionContext),
        E = R, {width: C, height: x} = useWindowSize();
    return {
        getUserActionMessage: React.useCallback(({actionType: N, actionDetails: L}) => {
            let O = {
                username: r.player.userName,
                sessionId: r.sessionId,
                ipAddress: E,
                gameSessionInfos: y.gameSessionInfos,
                date: new Date().toUTCString(),
                pageUrl: window.location.href,
                deviceInfo: {
                    userAgent: navigator.userAgent,
                    deviceType: navigator.userAgent.includes("Mobile") ? "Mobile" : "Desktop",
                    screenResolution: `${C}x${x}`
                },
                actionType: N,
                actionDetails: L
            };
            return {message: O, stringify: () => JSON.stringify(O)}
        }, [r, E, y, location, C, x])
    }
}, {encodeUtf8} = Helper, SFSCoreContext = React.createContext({
    setSfsCoreStore: () => {
    }, connected: !1, sfs: null, connectServer: () => {
        Logger$1.log("connectServer: sfs not ready")
    }, wsServerFilter: () => {
    }, getUserList: () => [], loginWithSession: () => {
    }, loggedIn: !1, loginObject: null, enterGameTable: () => {
    }, verifyGame: () => {
    }, getNicknameApprovalState: () => {
    }, updateNickname: r => {
    }, resetPassword: (r, R) => {
    }, gameBet: (r, R, y) => {
    }, multiGameBet: (r, R, y, E, C) => {
    }, setPlayerAction: (r, R, y, E) => {
    }, changeUserGameRoundStatus: (r, R, y) => {
    }, logoutGameTable: () => {
    }, startPulseRequest: function () {
    }, loginWithUsernamePasssword: (r, R) => {
    }, setHandicap: (r, R) => {
    }, setPlayerLocation: r => {
    }, getCurrentPlayerBetInfo: () => {
    }, logout: () => {
    }, reconnectFallback: null, getCountDownByTableId: r => {
    }, openVipCards: r => {
    }, logUserAction: r => {
    }
});

function parseObjectX(r, R) {
    let y = {};
    for (const E in R) {
        if (E == "MODELNAME") continue;
        let C = R[E];
        if (r == null) return y;
        if (typeof C == "string") {
            let x = r[E];
            y[C] = x
        } else if (typeof C == "object") {
            let x = C, B = C.MODELNAME, N = r[E];
            if (N instanceof Array) {
                let L = [];
                if (N.length > 0) for (const O in N) {
                    let D = parseObjectX(N[O], x);
                    L.push(D)
                }
                y[B] = L
            } else {
                let L = parseObjectX(N, x);
                y[B] = L
            }
        } else y[C] = "OTHER"
    }
    return y
}

const logSFS = (r, R) => {
    Logger$1.log(`${r}`, JSON.stringify(R))
};

function SFSCoreProvider({children: r}) {
    var vs;
    const R = "ddd", {t: E} = useTranslation(), {
            update: C,
            gameSessionContext: x,
            isTrial: B,
            currentScene: N,
            getAppType: L,
            hasReturnUrl: O,
            setCustomChips: D,
            customChipsSetting: z
        } = React.useContext(GameSessionContext), [F, _e] = React.useState({
            username: "",
            password: ""
        }), [Y, H] = React.useState(!1), [me, ce] = React.useState(!1), {
            setHttpState: ie,
            httpState: Be
        } = React.useContext(HttpContext), ve = React.useRef(), Re = React.useRef(0),
        Ce = React.useRef(), [Ne, we] = React.useState(Number), [Me, ke] = React.useState();
    let {isStandalone: Fe} = React.useContext(PwaContext);
    const [$e, Ve] = React.useContext(UserInfoContext), {
        gameHallInfo: Je,
        setGameHallInfo: Qe
    } = React.useContext(GameHallContext), {
        gameTableInfo: Ze,
        setGameTableInfo: qe
    } = React.useContext(GameTableContext), {
        gameStatus: ze,
        setGameStatus: De,
        setGameRoundStatus: Xe,
        setCountDown: He,
        setVerificationEnable: Ge,
        setVerified: Le
    } = React.useContext(GameTableStatusContext), {
        payout: We,
        setPayout: dt,
        setMultiTablePayouts: et
    } = React.useContext(PayoutContext), {
        addMessage: nt,
        addTableMessage: tt
    } = React.useContext(ToastContext), {openSystemModal: lt, forceClose: Bt} = React.useContext(SystemModalContext);
    let {onSystemToast: kt} = useToast();
    const {
        serverLinesSorted: At,
        ip: zt,
        systemJsonData: oa,
        preloadConfig: sa
    } = React.useContext(ServerConfigContext);
    let vt = React.useRef(), ea = React.useRef(), _a = React.useRef(), ta = React.useRef();
    const {getUserActionMessage: na} = useUserActionMessage(), Aa = ht => {
        ve.current ? Logger$1.log("SFS is keeping connection, do nothing.") : (ea.current && (ea.current.disconnect(), ea.current = null), qe({
            enterType: EnterType.Normal,
            tableInfo: {...defaultTableInfo},
            altGameType: AltGameType.None
        }), setTimeout(() => {
            Logger$1.log("ReconnectTheGame now!"), ht && (vt.current = ht), xt(Ua())
        }, 500))
    }, Ea = () => {
        ea.current = ve.current, Tt()
    }, {
        kicked: Sa,
        ban: Ga,
        manual: Ta,
        connectionProblem: fa,
        idle: ca,
        unknown: Ia,
        connectWsFailed: Ma,
        refresh: Fa
    } = useSFSnetworking(Aa, Ea), va = () => {
        Logger$1.log("startPulseRequest"), Ce.current || (Ce.current = setInterval(() => {
            K()
        }, 1e3))
    }, ha = () => {
        Logger$1.log("stopPulseRequest"), clearInterval(Ce.current), Ce.current = void 0
    };
    React.useEffect(() => (Be.loginAtOnce && (me ? ie(ht => ({
        ...ht,
        loginAtOnce: !1
    })) : Y && (Logger$1.warn("httpState"), hs(), ie(ht => ({...ht, loginAtOnce: !1})))), () => {
    }), [Be]), React.useEffect(() => (Y && (Logger$1.warn("connected effect"), hs()), () => {
    }), [Y]), React.useEffect(() => (me && va(), () => {
    }), [me]), React.useEffect(() => {
        N.current === USER_CURRENT_SCENE.GAME_HALL && ps(PLAYER_LOCATION.LOBBY), N.current === USER_CURRENT_SCENE.MUlTI_HALL && (ps(PLAYER_LOCATION.MULTI_HALL), Ts())
    }, [N.current]);
    const Ua = React.useCallback(() => {
        var Mt;
        const ht = (Mt = x.urlParamsState) == null ? void 0 : Mt.specificWsServerIndex;
        if (ht) {
            const rt = oa == null ? void 0 : oa.serverlines.find(Rt => Rt.index == parseInt(ht));
            if (rt) {
                let Rt = {};
                return Rt.lineIndex = rt.index, Rt.ms = "", Rt.star = "", Rt.server = rt.servers[0], Rt
            } else {
                Logger$1.error("Invaild query string param `ws`", ht);
                return
            }
        }
        if (At) return At[0]
    }, [At, oa == null ? void 0 : oa.serverlines, (vs = x.urlParamsState) == null ? void 0 : vs.specificWsServerIndex]);

    function xt(ht) {
        if (!ht) {
            aa(404, () => {
                Fa()
            });
            return
        }
        let Mt = {host: ht.server.host, port: ht.server.port, zone: "GameServer", debug: !1, useSSL: !1};
        ta.current = ht, Logger$1.log("connectServer", Mt), ve.current || (ve.current = new SFS2X.SmartFox(Mt), ve.current.logger.level = SFS2X.LogLevel.DEBUG, ve.current.logger.enableConsoleOutput = !0, ve.current.logger.enableEventDispatching = !0, ve.current.addEventListener(SFS2X.SFSEvent.CONNECTION, Ke), ve.current.addEventListener(SFS2X.SFSEvent.CONNECTION_LOST, Tt), ve.current.connect())
    }

    React.useEffect(() => (ve.current && (ve.current.addEventListener(SFS2X.SFSEvent.LOGIN_ERROR, Oe), ve.current.addEventListener(SFS2X.SFSEvent.LOGIN, Ue), ve.current.addEventListener(SFS2X.SFSEvent.LOGOUT, ra), ve.current.addEventListener(SFS2X.SFSEvent.EXTENSION_RESPONSE, jt)), () => {
        var ht, Mt, rt, Rt;
        (ht = ve.current) == null || ht.removeEventListener(SFS2X.SFSEvent.LOGIN_ERROR, Oe), (Mt = ve.current) == null || Mt.removeEventListener(SFS2X.SFSEvent.LOGIN, Ue), (rt = ve.current) == null || rt.removeEventListener(SFS2X.SFSEvent.LOGOUT, ra), (Rt = ve.current) == null || Rt.removeEventListener(SFS2X.SFSEvent.EXTENSION_RESPONSE, jt)
    }), [Y, $e, Je, Ze]);

    function K() {
        if (ve.current) {
            Re.current++;
            let ht = {a: Re.current};
            ve.current.send(new SFS2X.Requests.System.ExtensionRequest("pulseRequest", ht, ve.current ? ve.current.lastJoinedRoom : null))
        } else Logger$1.log("stopPulseRequest"), Logger$1.warn("lost connection"), ha()
    }

    const Pe = ht => {
        if (!ve.current) {
            fa();
            return
        }
        ve.current.send(ht)
    };

    function Oe(ht) {
        ht.errorCode == 10 || (Logger$1.error("Login Error"), ke({error: ht}), C(GAME_SESSION_ACTIONS_TYPE.LOGIN_FAILD))
    }

    function Ue(ht) {
        qe({
            enterType: EnterType.Normal,
            tableInfo: {...defaultTableInfo},
            altGameType: AltGameType.None
        }), Logger$1.log("onLogin(success)", ht), C(GAME_SESSION_ACTIONS_TYPE.LOGIN_SUZZ), ht.user
    }

    function Ke(ht) {
        Logger$1.log("onConnection", ve), ht.success ? (Logger$1.warn("setConnected"), mt(!0)) : Tt({reason: "connectWsFailed"})
    }

    React.useEffect(() => {
        Logger$1.log("connected!", Y)
    }, [Y]);
    const mt = (ht, Mt = !1) => {
        ht ? H(!0) : (H(!1), C(Mt ? GAME_SESSION_ACTIONS_TYPE.LOST_CONNECTION : GAME_SESSION_ACTIONS_TYPE.LOGIN_FAILD))
    };

    function Tt(ht) {
        if (Logger$1.warn("onConnectionLost", ht), mt(!1, !0), ve.current && ve.current.removeEventListener(SFS2X.SFSEvent.CONNECTION, Ke), ve.current && ve.current.removeEventListener(SFS2X.SFSEvent.CONNECTION_LOST, Tt), ve.current && ve.current.removeEventListener(SFS2X.SFSEvent.LOGIN_ERROR, Oe), ve.current && ve.current.removeEventListener(SFS2X.SFSEvent.LOGIN, Ue), ve.current && ve.current.removeEventListener(SFS2X.SFSEvent.LOGOUT, ra), ve.current && ve.current.removeEventListener(SFS2X.SFSEvent.EXTENSION_RESPONSE, jt), ve.current = null, !ht) {
            fa();
            return
        }
        switch (ht.reason) {
            case"ban":
                Ga();
                break;
            case"manual":
                Ta();
                break;
            case"unknown":
                Ia();
                break;
            case"connectionProblem":
                fa();
                break;
            case"idle":
                ca();
                break;
            case"kick":
                Sa(_a);
                break;
            case"connectWsFailed":
                Ma();
                break;
            default:
                fa();
                break
        }
    }

    function jt(ht) {
        switch (ht.cmd) {
            case"login":
                Gt(ht);
                break;
            case"logout":
                ra(ht);
                break;
            case"pulseRequest":
                break;
            case"setPlayerHandicap":
                Ca(ht);
                break;
            case"getGameHall":
                Na(ht);
                break;
            case"pushUserInfo":
                La(ht);
                break;
            case"pushGoodRoadOrder":
                Da(ht);
                break;
            case"enterGameTable":
                qa(ht);
                break;
            case"getLimitTable":
                break;
            case"getRoadData":
                ns(ht);
                break;
            case"pushGameStatus":
                Xa(ht);
                break;
            case"gameBet":
                Qa(ht);
                break;
            case"pushRawCards":
                Ya(ht);
                break;
            case"pushPayoutInfo":
                za(ht);
                break;
            case"pushNotice":
                Ba(ht);
                break;
            case"pushGameTableResults":
                ts(ht);
                break;
            case"pushGHStatistics":
                ka(ht);
                break;
            case"pushGHStatus":
                Wa(ht);
                break;
            case"getBriefGameTableList":
                xa(ht);
                break;
            case"logoutLimitTable":
                Za(ht);
                break;
            case"pushGHAdd":
                Va(ht);
                break;
            case"pushGHDeletes":
                $a(ht);
                break;
            case"pushGHDealer":
                ls(ht);
                break;
            case"pushDealerInfo":
                rs(ht);
                break;
            case"setPlayerAction":
                us(ht);
                break;
            case"userGameRoundStatusChange":
                ds(ht);
                break;
            case"pushAdditionalTableInfo":
                ks(ht);
                break;
            case"vipOpenedBrand":
                Ds(ht);
                break;
            case"showOpenedBrand":
                Ms(ht);
                break;
            case"realtimeVerification":
                xs(ht);
                break;
            case"getNicknameApprovalState":
                Is(ht);
                break;
            case"updateUserProfile":
                Ps(ht);
                break;
            case"reSettingPassword":
                Bs(ht);
                break;
            case"setPlayerLocation":
                Ns(ht);
                break;
            case"getCurrentPlayerBetInfo":
                ws(ht);
                break;
            case"getCountDown":
                Os(ht);
                break;
            case"getTablesBetLimit":
                Ls(ht);
                break;
            default:
                Logger$1.warn("unhandled response", JSON.stringify(ht));
                break
        }
    }

    let {showButton: ia} = useERVdialogHandler(), {onNormalPopUpMessageByCode: aa} = useDialog(ia);
    const pa = React.useRef(!0), ma = React.useRef();
    React.useEffect(() => {
        me && (Je.tableInfos.length <= 0 ? ma.current || (ma.current = setInterval(() => {
            Logger$1.error("Try to getGameHall"), ms(100)
        }, 2e3)) : ma.current && (clearInterval(ma.current), ma.current = null))
    }, [Je, me, $e.handicapId]), React.useEffect(() => {
        pa.current ? pa.current = !1 : me || ce(!0)
    }, [Je, me]);
    const ba = () => {
        C(GAME_SESSION_ACTIONS_TYPE.LOGIN_SUZZ), B.current || sessionStorage.setItem(SESSION_STORAGE_KEYS.SESSION_ID, Be.sessionId), Fe() && (console.warn("SESSION_STORAGE_KEYS.SESSION_ID_PWA"), localStorage.setItem(SESSION_STORAGE_KEYS.SESSION_ID_PWA, Be.sessionId))
    }, da = (ht, Mt) => {
        sessionStorage.removeItem(SESSION_STORAGE_KEYS.SESSION_ID), ke({error: ht}), vt.current == null && C(GAME_SESSION_ACTIONS_TYPE.LOGIN_FAILD), aa(ht, () => {
            vt.current ? (vt.current(), vt.current = null) : Fa()
        }), Logger$1.warn("login failed, code", ht, Mt || getLoginReponse(ht))
    };
    React.useEffect(() => {
        if (Me && !Me.error) {
            const ht = Me;
            try {
                const Mt = {
                    accountType: ht.accountType,
                    handicapInfo: ht.handicapInfo,
                    vipHandicapInfo: ht.vipHandicapInfo,
                    handicapId: ht.handicapInfo[0].handicapId,
                    player: {
                        userId: ht.userData.userId,
                        userName: ht.userData.userName,
                        loginTime: ht.userData.loginTime,
                        amount: ht.userData.amount,
                        currency: ht.userData.currency,
                        nickname: ht.userData.nickname,
                        pendingNickname: "",
                        approveNicknameStatus: -1,
                        totalBets: 0,
                        isFreeOfCommission: ht.userData.isFreeOfCommission
                    },
                    exchangeRate: ht.userData.exchangeRate / 1e4,
                    refreshCode: ht.refreshCode,
                    sessionId: ht.sessionId,
                    suffix: ht.suffix,
                    supportHalls: ht.supportHalls.concat(ht.elecGames.length > 0 ? [105] : []),
                    amount: ht.userData.amount,
                    betLimitObject: [],
                    totalBetInfos: {}
                };
                B.current = ht.suffix == R, Ve(rt => ({...rt, ...Mt})), Es(ht.handicapInfo[0].handicapId, 100), gs(), ms(100), D(rt => {
                    function Rt(Ra, ga) {
                        const Pa = new Map(Ra.map(wa => [`${wa.handicap.handicapId}-${wa.handicap.vipHandicapId}`, wa]));
                        return ga.forEach(wa => {
                            const ya = `${wa.handicap.handicapId}-${wa.handicap.vipHandicapId}`;
                            let Ka = Pa.get(ya);
                            (!Ka || JSON.stringify(wa.handicap) !== JSON.stringify(Ka.handicap)) && Pa.set(ya, wa)
                        }), Array.from(Pa.values())
                    }

                    let Nt = Helper.deepCopy(rt);
                    const Yt = sa.whiteLabel.minChipValue || 0;
                    Nt.forEach(Ra => {
                        if (Ra.chipsInfo.length > 0) {
                            const ga = Ra.chipsInfo[0].amount, Pa = 5;
                            let wa = 0;
                            if (ga < Yt) Ra.customizeChipsInfo = Ra.customizeChipsInfo.map(ya => (ya.amount < Yt && (ya.amount = 0, ya.display = "", ya.isCheck = !1), ya.isCheck && wa++, ya)), Ra.chipsInfo = Ra.chipsInfo.filter(ya => ya.amount >= Yt).map(ya => (ya.isCheck && wa++, wa < Pa && !ya.isCheck && (ya.isCheck = !0, wa++), ya)); else {
                                const Ka = Chips.filter(Oa => Oa.amount >= Yt).map(Oa => ({
                                    ...Oa,
                                    display: Helper.formatAbbrMoney(Oa.amount),
                                    isCheck: !0
                                }));
                                Ra.customizeChipsInfo = Ra.customizeChipsInfo.map(Oa => (Oa.amount < Yt && (Oa.amount = 0, Oa.display = "", Oa.isCheck = !1), Oa.isCheck && wa++, Oa)), Ra.chipsInfo = Ka.reduce((Oa, ss, Cs) => {
                                    const cs = ss.amount >= Yt ? ss : null;
                                    if (cs) {
                                        const _s = Ra.chipsInfo.find(Rs => Rs.amount === cs.amount),
                                            bs = _s ? [_s] : [cs];
                                        return [...Oa, ...bs]
                                    }
                                    return Oa
                                }, []).map(Oa => (Oa.isCheck && wa++, wa < Pa && !Oa.isCheck && (Oa.isCheck = !0, wa++), Oa))
                            }
                        }
                    });
                    const la = [...ht.handicapInfo, ...ht.vipHandicapInfo].map(Ra => {
                        const Pa = Chips.filter(ya => sa != null && sa.whiteLabel.minChipValue ? ya.amount >= (sa == null ? void 0 : sa.whiteLabel.minChipValue) : ya).map(ya => ({
                            ...ya,
                            display: Helper.formatAbbrMoney(ya.amount),
                            isCheck: !0
                        })), wa = DefaultCustomChips.map(ya => ({
                            ...ya,
                            display: ya.amount > 0 ? Helper.formatAbbrMoney(ya.amount) : "",
                            isCheck: !1
                        }));
                        return {handicap: Ra, chipsInfo: Pa, customizeChipsInfo: wa}
                    });
                    return Rt(Nt, la)
                })
            } catch (Mt) {
                da(1, Mt)
            }
        }
    }, [Me]);

    function Gt(ht) {
        if (ht.params == null) return;
        let Mt = ht.params, rt = parseObjectX(Mt, model_login);
        if (ke(rt), rt.resultCode == 0) ba(), Logger$1.warn('Wait for the response of the "get game hall info"'); else {
            da(rt.resultCode);
            return
        }
    }

    function ra(ht) {
        if (ht.params === null) return;
        let Mt = ht.params, rt = parseObjectX(Mt, model_logout);
        rt.resultCode !== 0 && (_a.current = !0, Logger$1.log(rt), aa(rt.resultCode, () => {
            sessionStorage.removeItem(SESSION_STORAGE_KEYS.SESSION_ID), localStorage.removeItem(SESSION_STORAGE_KEYS.SESSION_ID_PWA), Fa()
        }))
    }

    function Ca(ht) {
        if (ht.params == null) return;
        let Mt = ht.params, rt = parseObjectX(Mt, model_setPlayerHandicap);
        Logger$1.log(rt), Ve(Rt => {
            let Nt = {...Rt};
            return Array.isArray(rt.betLimitObject) ? (Nt.betLimitObject = rt.betLimitObject.slice(), Nt.handicapId = rt.handicapId) : Logger$1.error("The response of setPlayerHandicap return value in which betLimitObject is null?"), {...Rt, ...Nt}
        })
    }

    function La(ht) {
        if (ht.params == null) return;
        let Mt = ht.params, rt = parseObjectX(Mt, model_pushUserInfo);
        logSFS("onPushUserInfo", rt), $e.player.userId !== -1 && (we(rt.amount), Ve(Rt => {
            let Nt = {...Rt};
            return Nt.amount = rt.amount, Nt.player.amount = rt.amount, {...Rt, ...Nt}
        }))
    }

    function xa(ht) {
        if (ht.params === null) return;
        let Mt = ht.params, rt = parseObjectX(Mt, model_getBriefGameTableList);
        as([...rt.briefGameTable.map(Nt => Nt.tableId)]), logSFS("responseGetBriefGameTableList", rt);
        for (let Nt = rt.briefGameTable.length - 1; Nt >= 0; Nt--) rt.briefGameTable[Nt].goodRoadType || rt.briefGameTable.splice(Nt, 1);
        let Rt = {...Je};
        Rt.goodRoadInfos = rt.briefGameTable.map((Nt, Yt) => ({
            tableId: Nt.tableId,
            type: Nt.goodRoadType
        })), logSFS("onGetBriefGameTableList", Rt), JSON.stringify(Rt.goodRoadInfos) !== JSON.stringify(Je.goodRoadInfos) && Qe(Rt)
    }

    function Da(ht) {
        if (ht.params === null) return;
        let Mt = ht.params, rt = parseObjectX(Mt, model_pushGoodRoadOrder);
        logSFS("responsePushGoodRoadOrder", rt);
        let Rt = {...Je}, Nt = rt.tableIds.filter((Yt, la) => rt.types[la] !== 0);
        Nt.length === 0 && (Nt = [...rt.tableIds]), Rt.goodRoadInfos = Nt.map((Yt, la) => ({
            tableId: Yt,
            type: rt.types[la]
        })), JSON.stringify(Rt.goodRoadInfos) !== JSON.stringify(Je.goodRoadInfos) && Qe(Rt)
    }

    function Ba(ht) {
        if (ht.params == null) return;
        let Mt = ht.params;
        parseObjectX(Mt, model_noticePush)
    }

    function Na(ht) {
        if (ht.params == null) return;
        let Mt = ht.params, rt = parseObjectX(Mt, model_getGameHall);
        rt.resultCode === 0 && (as([...rt.tableInfos.map(Rt => Rt.tableId)]), rt.platformType === 100 && (Qe(Rt => {
            let Nt = {...Rt};
            return Nt = Object.assign(Nt, {
                platformType: rt.platformType, tableInfos: rt.tableInfos.map(Yt => {
                    var la;
                    return Object.assign(Yt, (la = Je.tableInfos.find(Ra => Ra.tableId === Yt.tableId)) == null ? void 0 : la.gameStatus)
                }), onlineCount: rt.onlineCount
            }), Nt.tableInfos.forEach(Yt => {
                [GameType.Win3Card, GameType.Sicbo, GameType.Pokdeng].includes(Yt.gameType) && Nt.tableInfos.push(Object.assign({...Yt}, {gameType: `${Yt.gameType}_Alt`}))
            }), Nt.tableInfos.forEach(Yt => {
                [GameType.Sicbo, GameType.Win3Card].includes(Yt.gameType) && Nt.tableInfos.push(Object.assign({...Yt}, {gameType: `${Yt.gameType}_Alt_2`}))
            }), {...Rt, ...Nt}
        }), As(rt.tableInfos.filter(Rt => Rt.gameType === GameType.VIP).map(Rt => Rt.tableId)), setTimeout(() => {
            Gs()
        }, 1e3)))
    }

    function ka(ht) {
        if (ht.params === null) return;
        let Mt = ht.params, rt = parseObjectX(Mt, model_pushGHStatistics);
        logSFS("onPushGHStatistics", rt);
        let Rt = rt.GHStatistics.find(Nt => Nt.tableId === Ze.tableInfo.tableId && Nt.gameRoundId === ze.gameRoundId);
        Rt && (Logger$1.log("onPushTableBetInfo found", Rt), qe(Nt => {
            const Yt = {...Nt};
            for (let la in Rt) Yt.tableInfo.hasOwnProperty(la) && (Yt.tableInfo[la] = Rt[la]);
            return Yt
        }))
    }

    function Wa(ht) {
        if (ht.params === null) return;
        let Mt = ht.params, rt = parseObjectX(Mt, model_pushGHStatus);
        as([...rt.GHStatus.map(Nt => Nt.tableId)]), logSFS("responsePushGHStatus", rt);
        let Rt = {...Je};
        rt.GHStatus.forEach(Nt => {
            if (!Nt.tableStatus) return;
            let Yt = Rt.tableInfos.filter(la => la.tableId === Nt.tableId);
            Yt.length ? Yt.forEach(la => {
                for (let Ra in Nt) la.hasOwnProperty(Ra) && (la[Ra] = Nt[Ra]);
                [TableStatus.Shuffle, TableStatus.Maintenance].includes(Nt.tableStatus) && la.currentShoeGameResult && (la.currentShoeGameResult = la.currentShoeGameResult.map(Ra => []))
            }) : Logger$1.warn("failed to update status on", Nt.tableId)
        }), logSFS("onPushGHStatus", Rt), Qe(Rt)
    }

    function Va(ht) {
        if (ht.params === null) return;
        let Mt = ht.params, rt = parseObjectX(Mt, model_pushGHAdd);
        as([rt.tableInfo.tableId]), Qe(Rt => {
            const Nt = {...Rt};
            return Nt.tableInfos.find(Yt => Yt.tableId === rt.tableInfo.tableId) || (Logger$1.log("added game table", rt.tableInfo.tableId), Nt.tableInfos.push(rt.tableInfo), [GameType.Win3Card, GameType.Sicbo, GameType.Pokdeng].includes(rt.tableInfo.gameType) && Nt.tableInfos.push(Object.assign({...rt.tableInfo}, {gameType: `${rt.tableInfo.gameType}_Alt`})), [GameType.Sicbo, GameType.Win3Card].includes(rt.tableInfo.gameType) && Nt.tableInfos.push(Object.assign({...rt.tableInfo}, {gameType: `${rt.tableInfo.gameType}_Alt_2`})), Qe(Nt), As([rt.tableInfo.tableId])), Nt
        })
    }

    function $a(ht) {
        if (ht.params === null) return;
        let Mt = ht.params, rt = parseObjectX(Mt, model_pushGHDeletes), Rt = {...Je},
            Nt = Rt.tableInfos.findIndex(Yt => Yt.tableId === rt.tableId);
        logSFS("onPushGHDeletes", Rt), Nt !== -1 && (Rt.tableInfos = Rt.tableInfos.filter(Yt => Yt.tableId !== rt.tableId), Qe(Rt))
    }

    function qa(ht) {
        var Rt;
        if (ht.params == null) return;
        let Mt = ht.params, rt = parseObjectX(Mt, model_enterGameTable);
        if (rt.resultCode === 0) {
            Ss(na({
                actionType: UserActionType.CLICK,
                actionDetails: {action: "onEnterGameTable", details: "[DEBUG] SFS -> onEnterGameTable successful"}
            }).stringify()), rt.tableInfo.aBetAmount2 && rt.tableInfo.aBetAmount2.length > 0 ? (rt.tableInfo.playIds = [$e.player.userId], rt.tableInfo.betTypeLists = [rt.tableInfo.aBetTypes], rt.tableInfo.betAmountLists = [rt.tableInfo.aBetAmount2]) : rt.tableInfo.betAmountLists = rt.tableInfo.betAmountLists2;
            let Nt = {enterType: rt.enterType, tableInfo: {...rt.tableInfo}, altGameType: Ze.altGameType};
            if (rt.tableInfo.gameType === GameType.VIP && (As([rt.tableInfo.tableId]), Nt.vipInfo = {...defaultVipInfo}), [GameType.VIP, GameType.See].includes(rt.tableInfo.gameType) && zs(), rt.tableInfo.gameType === GameType.VIP) {
                let Yt = (Rt = Je.tableInfos.find(la => la.tableId === rt.tableInfo.tableId)) == null ? void 0 : Rt.additionalTableInfo;
                Yt && (Nt.tableInfo.additionalTableInfo = {...Yt}, rt.enterType === EnterType.VIPSideReserve && (Nt.tableInfo.additionalTableInfo.nextOwner = $e.player.userId))
            }
            qe(Nt), as([rt.tableInfo.tableId]), rt.tableInfo.gameStatus && (rt.tableInfo.gameStatus.timestamp = Date.now(), De(rt.tableInfo.gameStatus)), Xe(void 0), dt({...defaultPayout})
        } else switch (qe(Object.assign({...Ze}, {altGameType: AltGameType.None})), Logger$1.warn(rt.resultCode, rt.tips), rt.resultCode) {
            case 6035:
            case 6019:
                lt({
                    modalLayout: jsx(SystemModalWithConfirmButton, {}),
                    isAutoClose: !1,
                    isClosingByOutside: !0,
                    content: E(`error_code.${rt.resultCode}`).replace("<Number>", `(${parseInt(rt.tips) / 100})`),
                    confirmButtonHandle: Bt
                });
                break
        }
    }

    function Qa(ht) {
        if (ht.params === null) return;
        const Mt = ht.params;
        let rt = parseObjectX(Mt, model_gameBet);
        if (logSFS("responseGameBet", rt), rt.resultCode === 0) if (Qe(Rt => {
            const Nt = Rt.tableInfos, Yt = Nt.findIndex(la => la.tableId === rt.tableId);
            if (Yt !== -1) {
                let la = Nt[Yt];
                la.playIds || (la.playIds = []);
                let Ra = la.playIds.findIndex(ga => ga === $e.player.userId);
                Ra === -1 && (la.playIds.push($e.player.userId), Ra = la.playIds.length - 1), (!la.betTypeLists || la.betTypeLists.length === 0) && (la.betTypeLists = Array(Ra + 1).fill([])), (!la.betAmountLists || la.betAmountLists.length === 0) && (la.betAmountLists = Array(Ra + 1).fill([])), rt.betTypes.forEach((ga, Pa) => {
                    let wa = la.betTypeLists[Ra].findIndex(ya => ya === ga);
                    wa === -1 ? (la.betTypeLists[Ra].push(ga), la.betAmountLists[Ra].push(rt.betAmounts[Pa])) : la.betAmountLists[Ra][wa] += rt.betAmounts[Pa]
                }), delete la.processingGameBet
            }
            return Rt
        }), Ze.tableInfo.tableId !== rt.tableId) tt(rt.tableId, rt, E("messages.bet_success"), TOAST_COLOR.BLACK, 1.5); else {
            let Rt = {...Ze};
            Rt.tableInfo.playIds || (Rt.tableInfo.playIds = []);
            let Nt = Rt.tableInfo.playIds.findIndex(Yt => Yt === $e.player.userId);
            Nt === -1 && (Rt.tableInfo.playIds.push($e.player.userId), Nt = Rt.tableInfo.playIds.length - 1), (!Rt.tableInfo.betTypeLists || Rt.tableInfo.betTypeLists.length === 0) && (Rt.tableInfo.betTypeLists = Array(Nt + 1).fill([])), (!Rt.tableInfo.betAmountLists || Rt.tableInfo.betAmountLists.length === 0) && (Rt.tableInfo.betAmountLists = Array(Nt + 1).fill([])), rt.betTypes.forEach((Yt, la) => {
                let Ra = Rt.tableInfo.betTypeLists[Nt].findIndex(ga => ga === Yt);
                Ra === -1 ? (Rt.tableInfo.betTypeLists[Nt].push(Yt), Rt.tableInfo.betAmountLists[Nt].push(rt.betAmounts[la])) : Rt.tableInfo.betAmountLists[Nt][Ra] += rt.betAmounts[la]
            }), delete Rt.tableInfo.processingGameBet, nt(E("messages.bet_success"), TOAST_COLOR.BLACK, 1.5), qe(Rt)
        } else Ze.tableInfo.tableId !== rt.tableId || Ze.tableInfo.tableId === HALL_TYPE.MULTI ? (Ze.tableInfo.tableId === HALL_TYPE.MULTI ? Qe(Rt => {
            const Nt = Rt.tableInfos, Yt = Nt.findIndex(la => la.tableId === rt.tableId);
            return Yt !== -1 && delete Nt[Yt].processingGameBet, Rt
        }) : console.warn("didn't handle processingGameBet"), tt(rt.tableId, rt, E(`error_code.${rt.resultCode}`), TOAST_COLOR.BLACK, 1.5)) : (qe(Rt => (delete Rt.tableInfo.processingGameBet, {...Rt})), nt(E(`error_code.${rt.resultCode}`), TOAST_COLOR.BLACK, 1.5))
    }

    function za(ht) {
        if (ht.params === null) return;
        const Mt = ht.params;
        let rt = parseObjectX(Mt, model_pushPayoutInfo);
        logSFS("responsePushPayoutInfo", rt);
        let Rt = {...defaultPayout};
        if (rt.tableId === Ze.tableInfo.tableId) {
            let Nt = rt.playIds && rt.playIds.findIndex(Yt => Yt === $e.player.userId);
            Nt !== void 0 && Nt !== -1 ? (Rt.betTypeLists = rt.betTypeLists[Nt], Rt.betAmountLists = rt.betAmountLists2[Nt], Rt.payoutAmountLists = rt.payoutAmountLists2[Nt], Rt.aBetTypes = rt.betTypeLists[Nt], Rt.aBetAmounts = rt.betAmountLists2[Nt], Rt.aPayoutAmounts = rt.payoutAmountLists2[Nt], dt(Rt)) : rt.aBetAmount2 && rt.aBetAmount2.length > 0 && (Rt.betTypeLists = rt.aBetTypes, Rt.betAmountLists = rt.aBetAmount2, Rt.payoutAmountLists = rt.aPayoutAmounts2, Rt.aBetTypes = rt.aBetTypes, Rt.aBetAmounts = rt.aBetAmount2, Rt.aPayoutAmounts = rt.aPayoutAmounts2, dt(Rt))
        } else {
            let Nt = rt.playIds && rt.playIds.findIndex(Yt => Yt === $e.player.userId);
            Nt !== void 0 && Nt !== -1 ? (Rt.betTypeLists = rt.betTypeLists[Nt], Rt.betAmountLists = rt.betAmountLists[Nt], Rt.payoutAmountLists = rt.payoutAmountLists[Nt], Rt.aBetTypes = rt.betTypeLists[Nt], Rt.aBetAmounts = rt.betAmountLists[Nt], Rt.aPayoutAmounts = rt.payoutAmountLists[Nt], et(Yt => {
                const la = {[rt.tableId]: {payout: {...Rt}, gameRroundId: ""}};
                return {...Yt, ...la}
            })) : rt.aBetAmount2 && rt.aBetAmount2.length > 0 && (Rt.tableId = rt.tableId, Rt.betTypeLists = rt.aBetTypes, Rt.betAmountLists = rt.aBetAmount2, Rt.payoutAmountLists = rt.aPayoutAmounts2, Rt.aBetTypes = rt.aBetTypes, Rt.aBetAmounts = rt.aBetAmount2, Rt.aPayoutAmounts = rt.aPayoutAmounts2, et(Yt => {
                const la = {[rt.tableId]: {payout: {...Rt}, gameRroundId: ""}};
                return {...Yt, ...la}
            }))
        }
    }

    function Za(ht) {
        if (ht.params === null) return;
        const Mt = ht.params;
        let rt = parseObjectX(Mt, model_logoutLimitTable);
        logSFS("responseLogoutGameTable", rt);
        let Rt = () => {
            qe({
                enterType: Ze.enterType,
                tableInfo: {...defaultTableInfo},
                altGameType: AltGameType.None
            }), De({...defaultGameTableStatus}), Xe(void 0), ms(100), as([...Je.tableInfos.map(Nt => Nt.tableId)])
        };
        rt.resultCode === 0 ? !Ze.pendingEnterFastBet && Rt() : lt({
            modalLayout: jsx(SystemModalWithConfirmButton, {}),
            isAutoClose: !1,
            isClosingByOutside: !1,
            content: E(`error_code.${rt.resultCode}`),
            confirmButtonHandle: () => {
                Rt(), Bt()
            }
        })
    }

    function ts(ht) {
        if (ht.params == null) return;
        let Mt = ht.params, rt = parseObjectX(Mt, model_pushGameTableResults);
        ys(rt.tableId)
    }

    function ns(ht) {
        if (ht.params === null) return;
        var Mt = ht.params, rt = parseObjectX(Mt, model_getRoadData);
        const Rt = !rt.currentShoeGameResult;
        Rt && console.warn("this table does not have road data", rt.tableId);
        let Nt = {...Je}, Yt = Nt.tableInfos.filter(la => la.tableId === rt.tableId);
        logSFS("responseGetRoadData", Nt), Yt.length ? Rt || (Yt.forEach(la => la.currentShoeGameResult = rt.currentShoeGameResult.slice()), Qe(Nt)) : Logger$1.warn("updated tableId", rt.tableId, "but table not exist here"), Ze.tableInfo.tableId === rt.tableId && qe(la => {
            const Ra = {...la};
            let ga = {...Yt.find(Pa => Pa.gameType === Ze.tableInfo.gameType)};
            return logSFS("onGetRoadData", ga), Rt || (ga.currentShoeGameResult = rt.currentShoeGameResult.slice()), ga.allPlayersBetInfo = Array.isArray(Ze.tableInfo.allPlayersBetInfo) ? Ze.tableInfo.allPlayersBetInfo.slice() : [], Object.assign(Ra.tableInfo, ga), Ra
        })
    }

    function Xa(ht) {
        if (ht.params === null) return;
        const Mt = ht.params;
        let rt = parseObjectX(Mt, model_pushGameStatus),
            Rt = rt.gameStatus.find(ga => ga.tableId === Ze.tableInfo.tableId), Nt = ze.specialWinResultRawCards;
        if (Rt)
            if (Rt.tableStatus === TableStatus.Init)
                qe(ga => {
                    const Pa = {...ga};
                    return Pa.tableInfo.gameStatus.gameRoundId = Rt.gameRoundId, Pa
                }), De(ga => {
                    const Pa = {...ga};
                    return Pa.gameRoundId = Rt.gameRoundId, delete Pa.currentGameRoundWinResult, Pa
                }); else {
                if (Ze.tableInfo.gameType === GameType.See && [TableStatus.BoBCard, TableStatus.BoPCard, TableStatus.BoCard].includes(ze.tableStatus) && Rt.tableStatus === TableStatus.BetOver) return;
                Rt.tableStatus === TableStatus.PayOut ? (ys(Rt.tableId), Rt.specialWinResultRawCards = Nt) : (qe(Pa => {
                    var Ka;
                    const wa = {...Pa};
                    let ya = {...Pa.tableInfo};
                    for (let Oa in Rt) ya.hasOwnProperty(Oa) && (ya[Oa] = Rt[Oa]);
                    switch (Rt.tableStatus) {
                        case TableStatus.Shuffle:
                        case TableStatus.Maintenance:
                            ya.currentShoeGameResult && (ya.currentShoeGameResult = ya.currentShoeGameResult.map(Oa => []));
                            break;
                        case TableStatus.CanBet:
                            as([ya.tableId]), ya.betAmountLists = void 0, ya.betTypeLists = void 0, Xe(void 0), Ze.vipInfo && (wa.vipInfo = Object.assign({}, {...defaultVipInfo}, {limits: (Ka = wa.vipInfo) == null ? void 0 : Ka.limits}));
                            break;
                        case TableStatus.BetOver:
                            He({...defaultCountDown});
                            break
                    }
                    return wa.tableInfo = ya, wa
                }), Rt.tableStatus === TableStatus.CanBet && Xe(void 0), setTimeout(() => {
                    JSON.stringify({...defaultPayout}) !== JSON.stringify(We) && dt({...defaultPayout})
                }, 500)), delete Rt.rawGameResult, Rt.timestamp = Date.now(), De({...Rt})
            }
        let Yt = Je.tableInfos.slice();
        Yt.filter(ga => rt.gameStatus.map(Pa => Pa.tableId).includes(ga.tableId)).forEach(ga => {
            let Pa = rt.gameStatus.find(ya => ya.tableId === ga.tableId);
            if (!Pa.tableStatus) return;
            ga.gameStatus = Pa, delete ga.gameStatus.rawGameResult, ga.gameStatus.timestamp = Date.now();
            let wa = {...ga};
            for (let ya in Pa) wa.hasOwnProperty(ya) && (wa[ya] = ga.gameStatus[ya]);
            ga.gameStatus.tableStatus === TableStatus.CanBet && (ga.betAmountLists = void 0, ga.betTypeLists = void 0)
        });
        let la = Object.assign({}, Je);
        la.tableInfos = Yt, Qe(la), rt.gameStatus.find(ga => ga.tableId === We.tableId) && dt({...defaultPayout})
    }

    function Ya(ht) {
        if (ht.params === null) return;
        const Mt = ht.params;
        let rt = parseObjectX(Mt, model_pushRawCards);
        if (rt.tableId === Ze.tableInfo.tableId) {
            let Rt = Object.assign({}, {...ze});
            Rt.rawGameResult = rt.rawCards, Rt.specialWinResultRawCards = rt.specialWinResultRawCards, Rt.specialWinResultCardType = rt.specialWinResultCardType, Rt.timestamp = Date.now(), De(Rt)
        } else Qe(Rt => (Rt.tableInfos.forEach(Yt => {
            Yt.tableId === rt.tableId && (Yt.gameStatus.rawGameResult = rt.rawCards, Yt.gameStatus.specialWinResultRawCards = rt.specialWinResultRawCards, Yt.gameStatus.specialWinResultCardType = rt.specialWinResultCardType)
        }), Rt))
    }

    function rs(ht) {
        if (ht.params === null) return;
        const Mt = ht.params;
        let rt = parseObjectX(Mt, model_pushDealerInfo);
        logSFS("responsePushDealerInfo", rt), qe(Rt => Rt.tableInfo.tableId === rt.tableId ? {
            ...Rt,
            tableInfo: {...Rt.tableInfo, dealerName: rt.dealerName}
        } : Rt)
    }

    function ls(ht) {
        if (ht.params === null) return;
        const Mt = ht.params;
        let rt = parseObjectX(Mt, model_pushGHDealer);
        logSFS("responsePushGHDealer", rt);
        let Rt = {...Je}, Nt = Rt.tableInfos.filter(Yt => Yt.tableId === rt.tableId);
        logSFS("onPushGHDealer", Rt), Nt.length && (Nt.forEach(Yt => Yt.dealerName = rt.dealerName), Qe(Rt))
    }

    function us(ht) {
        if (ht.params === null) return;
        const Mt = ht.params;
        let rt = parseObjectX(Mt, model_setPlayerAction);
        if (Logger$1.info("onSetPlayerAction", Mt), rt.resultCode === 0) switch (rt.status) {
            case PLAYER_ACTION.VIP_RESERVE:
                qe(Rt => {
                    const Nt = {...Rt}, Yt = {...Nt.tableInfo.additionalTableInfo};
                    return Yt.nextOwner = $e.player.userId, Nt.tableInfo.additionalTableInfo = Yt, {...Nt}
                });
                break;
            case PLAYER_ACTION.VIP_SHUFFLE:
                nt(E("game_table.vip.shuffle_request"), TOAST_COLOR.BLACK, 1.5);
                break;
            case PLAYER_ACTION.BJ_HIT:
            case PLAYER_ACTION.BJ_STAND_UTH_CHECK:
                rt.tableId === Ze.tableInfo.tableId && De(Rt => (Rt.playerAction = rt.status, {...Rt}));
                break
        } else nt(E(`error_code.${rt.resultCode}`), TOAST_COLOR.BLACK, 1.5)
    }

    function ds(ht) {
        if (ht.params === null) return;
        const Mt = ht.params;
        let rt = parseObjectX(Mt, model_userGameRoundStatusChange);
        if (ze.tableId === rt.tableId) {
            const Rt = rt.status.map(Nt => parseObjectX(Nt, model_userGameRoundStatus));
            Xe(Rt)
        }
    }

    function xs(ht) {
        if (ht.params === null) return;
        const Mt = ht.params;
        let rt = parseObjectX(Mt, model_realtimeVerification);
        rt.resultCode !== 0 ? (Ge(!1), Le(!0), nt(E(`error_code.${rt.resultCode}`), TOAST_COLOR.BLACK, 1.5)) : nt(E("messages.game_table_verified"), TOAST_COLOR.BLACK, 1.5)
    }

    function Is(ht) {
        if (ht.params === null) return;
        const Mt = ht.params;
        let rt = parseObjectX(Mt, model_getNicknameApprovalState);
        rt.resultCode === 0 && Ve(Rt => {
            let Nt = {...Rt};
            return Nt.player.nickname = rt.nickname, Nt.player.pendingNickname = rt.newNickname, Nt.player.approveNicknameStatus = rt.state, {...Rt, ...Nt}
        })
    }

    function Ps(ht) {
        if (ht.params === null) return;
        const Mt = ht.params;
        let rt = parseObjectX(Mt, model_updateUserProfile);
        rt.resultCode !== 0 ? kt({duration: 1.5, code: rt.resultCode}) : gs()
    }

    function Bs(ht) {
        if (ht.params === null) return;
        const Mt = ht.params;
        let rt = parseObjectX(Mt, model_reSettingPassword);
        rt.resultCode !== 0 && kt({duration: 1.5, code: rt.resultCode})
    }

    function Ns(ht) {
        if (ht.params === null) return;
        const Mt = ht.params;
        Logger$1.info("onSetPlayerLocation", JSON.stringify(Mt))
    }

    function ws(ht) {
        if (ht.params === null) return;
        const Mt = ht.params;
        let rt = parseObjectX(Mt, model_getCurrentPlayerBetInfo);
        if (rt.resultCode === 0) {
            Logger$1.info("onGetCurrentPlayerBetInfo", JSON.stringify(rt));
            const Rt = rt.totalBetInfo;
            Qe(Nt => {
                const Yt = Nt.tableInfos;
                for (let la of Rt) {
                    const Ra = Yt.findIndex(ga => ga.tableId === la.tableId);
                    if (Ra !== -1) {
                        let ga = Yt[Ra];
                        ga.playIds || (ga.playIds = []);
                        let Pa = ga.playIds.findIndex(wa => wa === $e.player.userId);
                        Pa === -1 && (ga.playIds.push($e.player.userId), Pa = ga.playIds.length - 1), (!ga.betTypeLists || ga.betTypeLists.length === 0) && (ga.betTypeLists = Array(Pa + 1).fill([])), (!ga.betAmountLists || ga.betAmountLists.length === 0) && (ga.betAmountLists = Array(Pa + 1).fill([]));
                        for (let {betType: wa, betAmount: ya} of la.betDetail) {
                            let Ka = ga.betTypeLists[Pa].findIndex(Oa => Oa === wa);
                            Ka === -1 ? (ga.betTypeLists[Pa].push(wa), ga.betAmountLists[Pa].push(ya)) : ga.betAmountLists[Pa][Ka] = ya
                        }
                    }
                }
                return Nt
            })
        } else Logger$1.error("onGetCurrentPlayerBetInfo error")
    }

    function Os(ht) {
        if (ht.params === null) return;
        const Mt = ht.params;
        let rt = parseObjectX(Mt, model_getCountDown);
        if (rt.resultCode === 0) {
            let Rt = rt.countDown.find(Nt => Nt.tableId === Ze.tableInfo.tableId);
            Rt && (qe(Nt => {
                const Yt = {...Nt};
                return Yt.tableInfo.countDown = Rt.dynamicCountDown, Yt
            }), He({
                ...Rt,
                timestamp: new Date().valueOf()
            })), Qe(Nt => (Nt.tableInfos.filter(la => rt.countDown.map(Ra => Ra.tableId).includes(la.tableId)).forEach(la => {
                const Ra = rt.countDown.find(ga => ga.tableId === la.tableId);
                la.countDown = Ra.dynamicCountDown, la.gameStatus.countDown = Ra.dynamicCountDown, la.gameStatus.timestamp = new Date().valueOf()
            }), Nt))
        } else Logger$1.error("onGetCurrentPlayerBetInfo error")
    }

    function Ls(ht) {
        if (ht.params === null) return;
        const Mt = ht.params;
        let rt = parseObjectX(Mt, model_getTablesBetLimit);
        if (Object.entries(rt.limitTableObject).length === 0) return;
        Qe(Nt => {
            const Yt = Nt.tableInfos;
            return rt.limitTableObject.forEach(la => {
                let Ra = Yt.find(ga => ga.tableId === la.tableId);
                Ra && (Ra.limits = la)
            }), Nt
        });
        let Rt = rt.limitTableObject.find(Nt => Nt.tableId === Ze.tableInfo.tableId);
        Rt && qe(Nt => {
            let Yt = Nt.vipInfo || {};
            return Yt.limits = Rt, Nt.vipInfo = {...Yt}, Nt
        })
    }

    function ks(ht) {
        if (ht.params === null) return;
        const Mt = ht.params;
        let rt = parseObjectX(Mt, model_pushAdditionalTableInfo);
        Qe(Rt => {
            const Yt = Rt.tableInfos.find(la => la.tableId === rt.tableId);
            return Yt && (Yt.additionalTableInfo = rt.additionalTableInfo), Rt
        }), Ze.tableInfo.tableId === rt.tableId && qe(Rt => {
            var Nt;
            return rt.additionalTableInfo.vipTableReserveStatus === VipTableStatus.Common && ((Nt = Rt.tableInfo.additionalTableInfo) == null || delete Nt.nextOwner), Rt.tableInfo.additionalTableInfo = Object.assign({...Rt.tableInfo.additionalTableInfo}, rt.additionalTableInfo), Rt
        })
    }

    function Ds(ht) {
        ht.params !== null && ht.params
    }

    function Ms(ht) {
        if (ht.params === null) return;
        const Mt = ht.params, rt = parseObjectX(Mt, model_showOpenedBrand);
        Ze.tableInfo.tableId === rt.tableId && qe(Nt => {
            let Yt = {...Nt};
            return Yt.vipInfo = Object.assign({...Yt.vipInfo}, {brandsId: rt.brandsId}), Yt
        })
    }

    function Fs() {
        return [{id: 1, name: "Alice"}, {id: 2, name: "Bob"}, {id: 3, name: "Charlie"}]
    }

    function hs() {
        if (Be.sessionId) {
            let ht = function (ya) {
                const Ka = /^(?:https?:\/\/)?(?:[^@\n]+@)?(?:www\.)?([^:\/\n]+)/, Oa = ya.match(Ka);
                return Oa && Oa.length > 1 ? Oa[1] : null
            };
            const Mt = ya => {
                switch (ya) {
                    case"en":
                        return 102;
                    default:
                        return 102
                }
            }, rt = ve.current.config.host;
            let Rt = ht(rt);
            const Nt = () => isMobile_1 && isIOS_1 ? 1 : isTablet_1 && isIOS_1 ? 2 : isAndroid_1 ? 3 : isDesktop_1 && isWindows_1 ? 4 : isDesktop_1 && isMacOs_1 ? 5 : 0,
                Yt = () => {
                    let ya = osName_1, Ka = osVersion_1, Oa = browserName_1, ss = fullBrowserVersion_1,
                        Cs = mobileVendor_1, cs = mobileModel_1;
                    const _s = window.screen.width, bs = window.screen.height;
                    let Rs = `${_s} x ${bs}`;
                    return JSON.stringify({
                        os: ya,
                        osVer: Ka,
                        browser: Oa,
                        browserVer: ss,
                        screen: Rs,
                        mobileVendor: Cs,
                        mobileModel: cs
                    })
                }, la = () => {
                    const ya = window.location.protocol, Ka = window.location.hostname, Oa = window.location.port;
                    let ss = `${ya}//${Ka}`;
                    return Oa && Oa.length > 0 && (ss = `${ya}//${Ka}:${Oa}`), ss
                };
            Logger$1.log(`login with ${Be.sessionId}`);
            const Ra = L(), ga = "v1.3.1.0", Pa = encodeUtf8(zt);
            let wa = {
                c: Ra,
                d: Mt(x.urlParamsState.lang),
                e: ga,
                f: Pa,
                g: 101,
                h: Be.sessionId,
                j: 0,
                k: `LINE ${Rt[3]}${Rt[4]}`,
                l: ta.current.lineIndex,
                n: Nt(),
                o: Yt(),
                p: la()
            };
            Pe(new SFS2X.Requests.System.LoginRequest("", "", wa, "GameServer"))
        } else Logger$1.warn("no sessionId")
    }

    function js() {
        let ht = F.username, Mt = F.password;
        if (ht.length <= 0 || Mt.length <= 0) return Logger$1.warn("Username or password is undefined."), -1;
        Logger$1.log("md5(password)", ht, Mt, md5$1(Mt));
        let rt = {};
        rt[LoginRequestType.userName] = ht, rt[LoginRequestType.password] = md5$1(Mt), rt[LoginRequestType.appType] = L(), rt[LoginRequestType.language] = Language.en, rt[LoginRequestType.version] = "0.0.0.1", rt[LoginRequestType.ipaddress] = encodeUtf8("192.168.1.0"), rt[LoginRequestType.loginType] = LoginType.normal, rt[LoginRequestType.lineId] = 1, rt[LoginRequestType.sfsline] = 1, Pe(new SFS2X.Requests.System.LoginRequest("", "", rt, "GameServer"))
    }

    function Gs() {
        let ht = {a: 1, b: 1};
        Pe(new SFS2X.Requests.System.ExtensionRequest("getBriefGameTableList", ht, ve.current ? ve.current.lastJoinedRoom : null))
    }

    function ms(ht) {
        if (Be.sessionId) {
            let Mt = {b: ht};
            Pe(new SFS2X.Requests.System.ExtensionRequest("getGameHall", Mt, ve.current ? ve.current.lastJoinedRoom : null))
        }
    }

    function ys(ht) {
        const Mt = {a: ht};
        Pe(new SFS2X.Requests.System.ExtensionRequest("getRoadData", Mt, ve.current ? ve.current.lastJoinedRoom : null))
    }

    const Hs = React.useCallback((ht, Mt) => {
        if (Be.sessionId && Y) {
            Ss(na({
                actionType: UserActionType.CLICK,
                actionDetails: {
                    action: "enterGameTable",
                    details: `[DEBUG] SFS -> request enterGameTable with sessionId: ${Be.sessionId} connected: ${Y}`
                }
            }).stringify()), Logger$1.log("trying enter game table");
            let rt = {a: ht, b: Mt};
            Pe(new SFS2X.Requests.System.ExtensionRequest("enterGameTable", rt, ve.current ? ve.current.lastJoinedRoom : null))
        } else ca();
        Logger$1.log("enterGameTable in sfs", Be.sessionId, Y)
    }, [Be, Y]);

    function Us(ht, Mt, rt) {
        qe(Nt => {
            const Yt = {...Nt};
            return Yt.tableInfo.processingGameBet = !0, Yt
        });
        let Rt = {a: Ze.tableInfo.tableId, d: ze.gameRoundId, f: ht, h: Mt.map(Nt => JSON.stringify(Nt * 100)), i: rt};
        Pe(new SFS2X.Requests.System.ExtensionRequest("gameBet", Rt, ve.current ? ve.current.lastJoinedRoom : null))
    }

    function $s(ht, Mt, rt, Rt, Nt) {
        Qe(la => {
            const Ra = {...la}, ga = Ra.tableInfos.findIndex(Pa => Pa.tableId === ht);
            return ga !== -1 && (Ra.tableInfos[ga].processingGameBet = !0), Ra
        }), ht === Ze.tableInfo.tableId && qe(la => {
            const Ra = {...la};
            return Ra.tableInfo.processingGameBet = !0, Ra
        });
        let Yt = {a: ht, d: Mt, f: rt, h: Rt.map(la => JSON.stringify(la * 100)), i: Nt};
        Pe(new SFS2X.Requests.System.ExtensionRequest("gameBet", Yt, ve.current ? ve.current.lastJoinedRoom : null))
    }

    function Xs(ht, Mt, rt, Rt) {
        let Nt = {a: ht, b: Mt, c: rt, d: Rt};
        !Nt.b && delete Nt.b, Pe(new SFS2X.Requests.System.ExtensionRequest("setPlayerAction", Nt, ve.current ? ve.current.lastJoinedRoom : null))
    }

    function qs(ht, Mt, rt) {
        let Rt = {a: ht, b: Mt, c: [{aa: rt.type, bb: rt.status}]};
        Pe(new SFS2X.Requests.System.ExtensionRequest("userGameRoundStatusChange", Rt, ve.current ? ve.current.lastJoinedRoom : null))
    }

    function Es(ht, Mt) {
        let rt = {a: ht, b: Mt || 100};
        Pe(new SFS2X.Requests.System.ExtensionRequest("setPlayerHandicap", rt, ve.current ? ve.current.lastJoinedRoom : null))
    }

    function Vs() {
        let ht = {a: $e.player.userId, b: Ze.tableInfo.tableId};
        Pe(new SFS2X.Requests.System.ExtensionRequest("logoutLimitTable", ht, ve.current ? ve.current.lastJoinedRoom : null))
    }

    function Ys() {
        Pe(new SFS2X.Requests.System.ExtensionRequest("realtimeVerification", {}, ve.current ? ve.current.lastJoinedRoom : null))
    }

    function gs() {
        Pe(new SFS2X.Requests.System.ExtensionRequest("getNicknameApprovalState", {}, ve.current ? ve.current.lastJoinedRoom : null))
    }

    function Ks(ht) {
        let Mt = {a: ht};
        Pe(new SFS2X.Requests.System.ExtensionRequest("updateUserProfile", Mt, ve.current ? ve.current.lastJoinedRoom : null))
    }

    function Ws(ht, Mt) {
        let rt = {a: md5$1(Mt), b: md5$1(ht), c: 3};
        Pe(new SFS2X.Requests.System.ExtensionRequest("reSettingPassword", rt, ve.current ? ve.current.lastJoinedRoom : null))
    }

    function ps(ht) {
        let Mt = {a: ht};
        Pe(new SFS2X.Requests.System.ExtensionRequest("setPlayerLocation", Mt, ve.current ? ve.current.lastJoinedRoom : null))
    }

    function Ts() {
        let ht = {};
        Pe(new SFS2X.Requests.System.ExtensionRequest("getCurrentPlayerBetInfo", ht, ve.current ? ve.current.lastJoinedRoom : null))
    }

    function as(ht) {
        let Mt = {a: ht};
        Pe(new SFS2X.Requests.System.ExtensionRequest("getCountDown", Mt, ve.current ? ve.current.lastJoinedRoom : null))
    }

    function As(ht) {
        let Mt = {a: ht};
        Pe(new SFS2X.Requests.System.ExtensionRequest("getTablesBetLimit", Mt, ve.current ? ve.current.lastJoinedRoom : null))
    }

    function zs() {
        let ht = {};
        Pe(new SFS2X.Requests.System.ExtensionRequest("getAllTableStatistics", ht, ve.current ? ve.current.lastJoinedRoom : null))
    }

    function Js(ht) {
        let Mt = {a: ht};
        Pe(new SFS2X.Requests.System.ExtensionRequest("vipOpenedBrand", Mt, ve.current ? ve.current.lastJoinedRoom : null))
    }

    function Ss(ht) {
        let Mt = {a: Date.now(), b: ht};
        Pe(new SFS2X.Requests.System.ExtensionRequest("logUserAction", Mt, ve.current ? ve.current.lastJoinedRoom : null))
    }

    function Qs() {
        lt({
            modalLayout: jsx(SystemModalWithConfirmCancel, {}),
            isAutoClose: !1,
            isClosingByOutside: !0,
            content: E("messages.logout"),
            confirmButtonHandle: () => {
                sessionStorage.removeItem(SESSION_STORAGE_KEYS.SESSION_ID), sessionStorage.removeItem(SESSION_STORAGE_KEYS.SESSION_ID_TYPE), Fe() && localStorage.removeItem(SESSION_STORAGE_KEYS.SESSION_ID_PWA);
                let ht = sessionStorage.getItem(SESSION_STORAGE_KEYS.RETURN_URL);
                ht && ht.length > 0 ? (sessionStorage.removeItem(SESSION_STORAGE_KEYS.RETURN_URL), window.location.replace(ht)) : location.reload()
            }
        })
    }

    const Zs = {
        wsServerFilter: Ua,
        getCountDownByTableId: as,
        reconnectFallback: vt,
        parseObjectX,
        connected: Y,
        setSfsCoreStore: _e,
        connectServer: xt,
        getUserList: Fs,
        loginWithUsernamePasssword: js,
        loginWithSession: hs,
        sfs: ve,
        loggedIn: me,
        amount: Ne,
        loginObject: Me,
        setHandicap: Es,
        enterGameTable: Hs,
        gameBet: Us,
        multiGameBet: $s,
        setPlayerAction: Xs,
        changeUserGameRoundStatus: qs,
        logoutGameTable: Vs,
        verifyGame: Ys,
        getNicknameApprovalState: gs,
        updateNickname: Ks,
        resetPassword: Ws,
        startPulseRequest: va,
        setPlayerLocation: ps,
        openVipCards: Js,
        logout: Qs,
        getCurrentPlayerBetInfo: Ts,
        logUserAction: Ss
    };
    return jsx(SFSCoreContext.Provider, {value: Zs, children: r})
}

var LANGUAGE_MAPPING_SCENRIO = (r => (r[r.CARD_GAME = 1] = "CARD_GAME", r))(LANGUAGE_MAPPING_SCENRIO || {});
const LAND_FOR_H5 = {
    EN: "en",
    ZH_HANS: "zh_CN",
    ZH_HANT: "zh_TW",
    KO: "korean",
    PDBR: "pt_br",
    TH: "th",
    VI: "vi",
    MS: "ms",
    MY: "en",
    JA: "ja",
    ID: "id"
}, useLanguageConvertForH5 = () => {
    const {i18n: r} = useTranslation();
    return React.useMemo(() => {
        let y = r.language;
        switch (y) {
            case"sc":
                return LAND_FOR_H5.ZH_HANS;
            case"tc":
                return LAND_FOR_H5.ZH_HANT;
            case"ptbr":
                return LAND_FOR_H5.PDBR;
            case"ko":
                return LAND_FOR_H5.KO;
            default:
                return y
        }
    }, [r.language])
};

function useLanguageMapping() {
    const {i18n: r} = useTranslation(), R = {
        en: "en",
        es: "es",
        hi: "hi",
        kr: "ko",
        pt: "pt",
        ptbr: "pt_br",
        sc: "zh_CN",
        tc: "zh_TW",
        thai: "th",
        ja: "ja"
    }, y = {[1]: R};
    return React.useCallback(C => {
        const x = "en";
        return Object.prototype.hasOwnProperty.call(y[C], r.language) ? y[C][r.language] : x
    }, [r.language])
}

const useGameHttpService = () => {
    const {allReady: r, systemJsonData: R, preloadConfig: y} = React.useContext(ServerConfigContext), {
        httpState: E,
        setHttpState: C
    } = React.useContext(HttpContext);
    let x = useLanguageConvertForH5();
    React.useState("");
    const B = {
        LOGIN_WITH_PASSWORD: "/login/password",
        GET_DEALER_IMAGE: "/dealer",
        GET_BETLOG_JSON: "/api-gw/webapi/betLog/records",
        GET_CREDIT_LOG_JSON: "/api-gw/webapi/client/creditLog",
        GET_STREAM_SHOT: "/snapshot/",
        DOWNLOAD_PWA_IOS: "pwa/mobileconfig"
    };

    async function N(Be, ve) {
        let Re = 0;
        return new Promise(async Ce => {
            async function Ne() {
                try {
                    const we = await fetch(Be[Re], ve);
                    if (we.status != 404) {
                        const Me = await we.json();
                        Ce(Me)
                    } else throw Logger$1.warn("404"), new Error("Network response was not ok")
                } catch (we) {
                    Logger$1.error(`Error fetching data from ${Be[Re]}: ${we.message}`), Re++, Re < Be.length ? await Ne() : (Logger$1.error("All URLs failed"), C(Me => ({
                        ...Me,
                        errorCode: "5000",
                        errorMsg: "Networking problem."
                    })))
                }
            }

            await Ne()
        })
    }

    const L = (Be, ve = "", Re, Ce = !0) => {
        let Ne = Ce, we = !1;
        return Global.customizeUrl(Global.getAssetsDomainsInfos(Be, Re), ve, Ne, we)
    }, O = Be => {
        var Re;
        Logger$1.log("getTrialSessionId");
        let ve = (Re = R == null ? void 0 : R.urls.find(Ce => Ce.type == SystemJsonUrlsType.FreeTrialServer)) == null ? void 0 : Re.url;
        return fetch(`${ve}/session/?t=${Date.now()}`).then(Ce => Ce.json()).then(Ce => {
            if (Logger$1.log("response: ", Ce), Ce.code != 0) C(Ne => ({
                ...Ne,
                errorCode: Ce.code.toString(),
                loginAtOnce: !1
            })); else return Logger$1.log("fetch sessionId: ", Ce), C(Ne => ({
                ...Ne,
                sessionId: Ce.sessionId
            })), Be && C(Ne => ({...Ne, sessionId: Ce.sessionId, loginAtOnce: !0})), Ce
        }).catch(Ce => (C(Ne => ({...Ne, errorMsg: Ce.message, loginAtOnce: !1})), Logger$1.error(Ce), Ce))
    }, D = async Be => {
        var Ce;
        let ve = (Ce = R == null ? void 0 : R.urls.find(Ne => Ne.type == SystemJsonUrlsType.Egameapi)) == null ? void 0 : Ce.url,
            Re = L(ve, void 0, y);
        return N(Re, {
            method: "POST",
            mode: "cors",
            cache: "no-cache",
            headers: {"Content-Type": "application/json; charset=UTF-8", SessionId: E.sessionId},
            body: JSON.stringify(Be)
        }).then(Ne => Ne.code != 0 ? Ne.message : Ne)
    }, z = Be => {
        var Re;
        return r || Logger$1.error("System json not ready"), ((Re = R == null ? void 0 : R.videos.find(Ce => Ce.id == Be)) == null ? void 0 : Re.name) || ""
    }, F = async Be => {
        var Fe;
        const ve = z(Be);
        if (ve === "" || ve == null) return Logger$1.warn("Live stream name for table " + Be + " not configured in System JSON!"), null;
        const Re = $e => $e.split(".")[0];
        let Ce = (Fe = R == null ? void 0 : R.urls.find($e => $e.type == SystemJsonUrlsType.TableSnapshotUrl)) == null ? void 0 : Fe.url,
            Ne = `${Re(ve)}.jpg`, we = L(Ce, Ne, y);
        const Me = ($e, Ve = 6e3) => new Promise((Je, Qe) => {
            const Ze = setTimeout(() => {
                qe.src = "", Logger$1.error("Snap shot Image download timed out", name), Qe("Snap shot download timed out")
            }, Ve), qe = new Image;
            qe.src = $e, qe.addEventListener("load", () => {
                clearTimeout(Ze), Logger$1.log("Get ", qe.src, "succ"), Je(qe)
            }), qe.addEventListener("error", ze => {
                clearTimeout(Ze), Logger$1.log("Load ", qe.src, "failed"), Qe("Load images failed!")
            })
        });
        return await ($e => {
            let Ve = 0;
            return new Promise(async Je => {
                const Qe = async () => {
                    try {
                        let Ze = await Me($e[Ve]);
                        Je(Ze)
                    } catch {
                        Ve++, Ve < $e.length ? await Qe() : ($e.length > 1 && Logger$1.warn("Image retrieval all attempts failed"), Je(null))
                    }
                };
                await Qe()
            })
        })(we)
    }, _e = Be => {
        var ke;
        let ve = (ke = R == null ? void 0 : R.urls.find(Fe => Fe.type == SystemJsonUrlsType.Betlogjson)) == null ? void 0 : ke.url,
            Re = L(ve, void 0, y), Ce = new Date, Ne = new Date(Ce.getTime() - 14 * 24 * 60 * 60 * 1e3);
        const we = (Fe, $e) => {
            let Ve = Fe.getFullYear(), Je = Fe.getMonth() + 1, Qe = Fe.getDate(), Ze = $e ? Fe.getHours() : 12,
                qe = $e ? Fe.getMinutes() : 0, ze = $e ? Fe.getSeconds() : 0;
            return `${Ve}-${Je.toString().padStart(2, "0")}-${Qe.toString().padStart(2, "0")} ${Ze.toString().padStart(2, "0")}:${qe.toString().padStart(2, "0")}:${ze.toString().padStart(2, "0")}`
        };
        let Me = {g: we(Ne), h: we(Ce, !0), i: Be, j: 40};
        return N(Re, {
            method: "POST",
            mode: "cors",
            cache: "no-cache",
            headers: {"Content-Type": "application/json; charset=UTF-8", SessionId: E.sessionId},
            body: JSON.stringify(Me)
        }).then(Fe => {
            if (Fe.code == 0) {
                let $e = parseObjectX(Fe.data, model_IbetRecord);
                return Logger$1.log($e), $e.IbetInfoDetail
            }
        })
    }, Y = React.useCallback(Be => {
        let ve = R == null ? void 0 : R.playback[0].url, Re = ve, Ce = `${Be}.MP4`, Ne = L(Re, Ce, y);
        return Logger$1.warn("getPlayBackUrls", Ne[0], ve, Ce), Ne[0]
    }, [R]), H = React.useCallback(Be => {
        let Re = R == null ? void 0 : R.playback[0].url;
        return L(Re, Be, y)[0]
    }, [R]);
    return {
        loginCardGameWithSessionId: D,
        getTrialSessionId: O,
        loginWithUserAndPass: ({username: Be, password: ve}) => {
            var Me;
            let Re = (Me = R == null ? void 0 : R.urls.find(ke => ke.type == SystemJsonUrlsType.Qrcodeapi)) == null ? void 0 : Me.url,
                Ce = L(Re, B.LOGIN_WITH_PASSWORD, y), Ne = md5$1(ve);
            return N(Ce, {
                method: "POST",
                mode: "cors",
                cache: "no-cache",
                headers: {"Content-Type": "application/json"},
                body: JSON.stringify({username: Be, password: Ne})
            }).then(ke => {
                if (Logger$1.log("response: ", ke), ke.code != 0) C(Fe => ({
                    ...Fe,
                    errorCode: ke.code.toString()
                })); else return Logger$1.log("fetch sessionId: ", ke), C(Fe => ({
                    ...Fe,
                    sessionId: ke.data.sessionId,
                    loginAtOnce: !0
                })), ke
            }).catch(ke => {
                if (ke.message != "retry") return C(Fe => ({...Fe, errorMsg: ke.message})), Logger$1.error(ke), ke
            })
        },
        getBetRecords: _e,
        getPlayBackUrls: Y,
        getPlayBackUrl: H,
        getStreamSnapShot: F,
        getIOSpwaMobileConfig: () => {
            var Ne;
            let Be = (Ne = R == null ? void 0 : R.urls.find(we => we.type == SystemJsonUrlsType.EventGw)) == null ? void 0 : Ne.url,
                ve = L(Be, B.DOWNLOAD_PWA_IOS, y, !1);
            const Re = `a=${y == null ? void 0 : y.whiteLabel.pwa.appScheme}.png&b=${Helper.getFullDomain()}&c=${y == null ? void 0 : y.whiteLabel.pwa.pwaLabel}&d=${x}&e=${y == null ? void 0 : y.whiteLabel.pwa.pwaUUID}&t=${new Date().getTime()}`,
                Ce = Helper.appendQueryStringToUrls(ve, Re);
            N(Ce, {
                method: "GET",
                mode: "cors",
                cache: "no-cache",
                headers: {"Content-Type": "application/json", SessionId: E.sessionId}
            }).then(we => {
                const Me = we.data.A;
                setTimeout(() => {
                    Helper.executeConfigurationProfile(Me)
                }, 500)
            }).catch(we => {
                console.error("Error:", we)
            })
        },
        ping: (Be, ve, Re) => {
            let Ce, Ne = new Date().getTime();
            Ce = new XMLHttpRequest, Ce.open("GET", Be, !0), Ce.send(), Ce.onreadystatechange = function () {
                if (Ce.readyState == 4 && Ce.status == 200) {
                    let we = new Date().getTime() - Ne;
                    typeof ve == "function" && ve(we)
                }
            }
        }
    }
}, useFetchIpWithGEO = r => {
    React.useEffect(() => {
        y()
    }, []);
    const R = React.useCallback((E, C) => {
        r && r({type: E, payload: C})
    }, [r]), y = () => {
        let E = "";
        {
            const C = window.location.protocol, x = window.location.hostname, B = window.location.port;
            let N = `${C}//${x}`;
            B && B.length > 0 && (N = `${C}//${x}:${B}`), E = `${N}/geo/?t=`, window.__geo__ && window.__geo__ == "dev" && (E = "https://gi-dev.slss.link:7443/geo/?t=")
        }
        fetch(`${E}${new Date().valueOf()}&_=1687918798884`).then(C => C.json()).then(C => {
            Logger$1.info("GEO data", C), R(SERVER_CONFIG_ACTIONS_TYPE.GEO_FETCHED, C.ip)
        })
    }
}, usePingServerLines = (r, R) => {
    let {ping: y} = useGameHttpService();
    React.useEffect(() => {
        r != null && r.systemJsonData && C(r.systemJsonData)
    }, [r == null ? void 0 : r.systemJsonData]);
    const E = React.useCallback((B, N) => {
        R && R({type: B, payload: N})
    }, [R]), C = B => {
        let N = [], L = B.serverlines, O = JSON.parse(B.urls.find(D => D.type === "starLevel").url);
        Object.keys(L).forEach(function (D) {
            let z = L[D];
            if (z) {
                let F = "https://" + z.servers[0].ping + "/?ping=" + z.index + "&t=" + Date.now();
                y(F, function (_e) {
                    let Y = x(_e, O), H = [];
                    H.lineIndex = z.index, H.ms = _e, H.star = Y, H.server = z.servers[0], N.push(H), N.sort(function (me, ce) {
                        let ie = me.ms, Be = ce.ms;
                        return me.ms == 0 ? ie = 1e5 : ce.ms == 0 && (Be = 1e5), ie - Be
                    }), E(SERVER_CONFIG_ACTIONS_TYPE.PINGED_SERVER_LINES, N)
                })
            }
        })
    }, x = (B, N) => {
        let L = B, O = N[5], D = O.min, z = O.max, F = N[4], _e = F.min, Y = F.max, H = N[3], me = H.min, ce = H.max,
            ie = N[2], Be = ie.min, ve = ie.max, Re = N[1], Ce = Re.min, Ne = Re.max;
        return L >= D && L < z ? 5 : L >= _e && L < Y ? 4 : L >= me && L < ce ? 3 : L >= Be && L < ve ? 2 : L >= Ce && L < Ne ? 1 : 0
    };
    return {pingSevers: C}
}, useFetchCardGameConfigsJson = (r, R, y) => {
    const {loading: E, error: C, data: x, setUrl: B} = useFetch();
    let [N, L] = React.useState(!1), [O, D] = React.useState(!0);
    const z = 5;
    let F = React.useRef(z);
    React.useEffect(() => {
        C && (Logger$1.error("Fetch cardGameConfig.json failed, let`s retry....."), F.current -= 1)
    }, [C]), React.useEffect(() => {
        if (r.preloadConfig && F.current > 0) {
            let me = "cardGameConfig.json?t=" + new Date().getTime();
            B(me)
        } else Logger$1.error("PreloadConfig was not ready or fetching cardGameConfig.json failed")
    }, [r.preloadConfig, F.current]);
    let _e = React.useCallback((Y, H) => {
        R({type: Y, payload: H})
    }, [R]);
    return React.useEffect(() => {
        x && _e(SERVER_CONFIG_ACTIONS_TYPE.CARD_GAME_CONFIG_FETCHED, Helper.isJsonString(x) ? JSON.parse(x) : x)
    }, [x]), React.useMemo(() => {
        D(E)
    }, [E]), {cardGameConfigsJsonLoading: O, error: C, fetchSuzz: N}
};
var SERVER_CONFIG_ACTIONS_TYPE = (r => (r[r.PRELOAD_CONFIG_FETCHED = 0] = "PRELOAD_CONFIG_FETCHED", r[r.STSTEM_JSON_CONFIG_FETCHED = 1] = "STSTEM_JSON_CONFIG_FETCHED", r[r.CARD_GAME_CONFIG_FETCHED = 2] = "CARD_GAME_CONFIG_FETCHED", r[r.PINGED_SERVER_LINES = 3] = "PINGED_SERVER_LINES", r[r.BANNER_CONFIG_FETCHED = 4] = "BANNER_CONFIG_FETCHED", r[r.GEO_FETCHED = 5] = "GEO_FETCHED", r[r.FETCH_FAILED = 6] = "FETCH_FAILED", r[r.ALL_DONE = 7] = "ALL_DONE", r))(SERVER_CONFIG_ACTIONS_TYPE || {});
const initState$4 = {loading: !0, error: !1, allReady: !1, ip: ""};
let ServerConfigContext = React.createContext({});

function getKeyOrderFilter(r, R, y) {
    return {
        desktopLkeyOrder: [{desktop: [{landscape: []}, {portrait: []}]}],
        desktopPkeyOrder: [{desktop: [{portrait: []}, {landscape: []}]}],
        mobileLkeyOrder: [{mobile: [{landscape: []}, {portrait: []}]}],
        mobilePkeyOrder: [{mobile: [{portrait: []}, {landscape: []}]}]
    }[`${r.toLowerCase()}${R.toUpperCase()}keyOrder`]
}

function serverConfigReducer(r = initState$4, R) {
    switch (R.type) {
        case 0:
            return Object.assign({...r}, {error: !1, preloadConfig: R.payload});
        case 4:
            const y = getKeyOrderFilter(isMobile$1 ? "mobile" : "desktop", isMobile$1 ? "p" : "l");
            let E = Helper.alterKeyOrder(R.payload, y, [isMobile$1 ? "desktop" : "mobile"]);
            return Object.assign({...r}, {error: !1, bannerConfig: E});
        case 1:
            return Object.assign({...r}, {error: !1, systemJsonData: R.payload});
        case 3:
            return Object.assign({...r}, {error: !1, serverLinesSorted: R.payload});
        case 5:
            return Object.assign({...r}, {error: !1, ip: R.payload});
        case 7:
            return Object.assign({...r}, {loading: !1, allReady: !0});
        case 2:
            return Object.assign({...r}, {error: !1, cardGameConfig: R.payload});
        case 6:
            return Object.assign({...r}, {error: !0});
        default:
            return initState$4
    }
}

const useServerConfigration = () => {
    const [r, R] = React.useReducer(serverConfigReducer, initState$4);
    let {onNormalPopUpMessageByCode: y} = useDialog(!1);
    usePreloadConifgJson(R), useBannerConfigsJson(R), useFetchIpWithGEO(R), useSeverConfig(r, R), usePingServerLines(r, R), useFetchCardGameConfigsJson(r, R), React.useEffect(() => {
        r != null && r.error && y(404, () => {
            const C = Helper.getUrlParam("returnUrl");
            C && window.location.replace(C)
        })
    }, [r == null ? void 0 : r.error]);
    const E = React.useCallback((C, x) => {
        R && R({type: C, payload: x})
    }, [R]);
    return React.useMemo(() => {
        r.systemJsonData && r.preloadConfig && r.serverLinesSorted && r.bannerConfig && r.ip.length > 0 && E(7)
    }, [r.systemJsonData, r.preloadConfig, r.serverLinesSorted, r.bannerConfig, r.ip]), {...r}
};
let ServerConfigProvider = ({children: r}) => jsx(ServerConfigContext.Provider, {
    value: {...useServerConfigration()},
    children: r
});
const LanguageSelector$1 = "", useEasyClosePopup = r => {
    const R = React.useRef(null);
    return React.useEffect(() => {
        const y = E => {
            var C;
            if (!((C = R.current) != null && C.contains(E.target))) {
                const x = (B, N) => {
                    let L = B.parentNode;
                    for (; L !== null;) {
                        if (L === N) return !0;
                        L = L.parentNode
                    }
                    return !1
                };
                R.current && !x(E.target, R.current.parentElement) && r()
            }
        };
        return window.addEventListener("click", y, {capture: !0}), () => {
            window.removeEventListener("click", y, {capture: !0})
        }
    }, []), R
}, LANGUAGES = [{key: "thai", label: "ไทย"}, {key: "en", label: "English"}, {key: "es", label: "Español"}, {
    key: "hi",
    label: "हिंदी"
}, {key: "id", label: "Bahasa Indonesia"}, {key: "kr", label: "한국어"}, {key: "pt", label: "Português"}, {
    key: "ptbr",
    label: "Português Brasileiro"
}, {key: "sc", label: "中文简体"}, {key: "tc", label: "中文繁體"}, {key: "ja", label: "日本語"}, {
    key: "vi",
    label: "Tiếng Việt"
}], LanguageSelector = r => {
    var O, D;
    const {preloadConfig: R} = React.useContext(ServerConfigContext), {i18n: y} = useTranslation(), [E, C] = React.useState(!1),
        x = useEasyClosePopup(() => C(!1)), B = z => {
            y.changeLanguage(z), localStorage.setItem(SESSION_STORAGE_KEYS.LANGUAGE, z), sessionStorage.setItem(SESSION_STORAGE_KEYS.LANGUAGE, z), C(!E)
        };
    let N = (O = R == null ? void 0 : R.whiteLabel.supportedLanguage) == null ? void 0 : O.slice(), L = [];
    return N && (N == null ? void 0 : N.length) > 0 ? N == null || N.forEach(z => {
        let F = LANGUAGES.find(_e => _e.key === z);
        F && L.push({key: F.key, label: F.label})
    }) : L = LANGUAGES, jsxs("div", {
        id: "language_selector",
        style: {"--width": r.width},
        children: [jsxs("button", {
            onClick: () => C(!E),
            "aria-expanded": r.title,
            children: [r.icon && jsx("div", {className: "svg_lang"}), r.title && jsxs(Fragment, {
                children: [jsx("div", {
                    className: "title",
                    children: (D = LANGUAGES.find(z => z.key === y.language)) == null ? void 0 : D.label
                }), jsx("div", {className: "svg_arrow_down_triangle"})]
            })]
        }), E && jsx("div", {
            id: "language_choices",
            ref: x,
            children: L.map(z => jsx("button", {
                "aria-checked": z.key === y.language,
                onClick: () => B(z.key),
                children: z.label
            }, z.key))
        })]
    })
};
var GAME_SESSION_STATE = (r => (r.PRELOADING = "preloading", r.CONFIGARATION = "configration", r.FORWARD_LINK_AUTH = "forward_link_authentication", r.NORMAL_AUTH = "normal_authentication", r.LOGGING_IN = "logging_in", r.ONLINE = "online", r.LOGOUTING = "logout", r.TRIAL = "trial", r.OFFLINE = "offline", r.LOST_CONNECTION = "lost_connection", r))(GAME_SESSION_STATE || {}),
    USER_CURRENT_SCENE = (r => (r.LOGIN_PAGE = "login_page", r.GAME_HALL_LIVE_GAME = "game_hall_live_game", r.GAME_HALL = "game_hall", r.GAME_HALL_HOT_GAME = "game_hall_hot_game", r.GAME_PAGE = "game_table", r.MUlTI_HALL = "multi_hall", r.LOADING = "loading", r))(USER_CURRENT_SCENE || {}),
    SESSION_STORAGE_KEYS = (r => (r.RETURN_URL = "erv_return_url", r.LANGUAGE = "erv_language", r.SESSION_ID = "erv_session_id", r.SESSION_ID_TYPE = "erv_session_id_type", r.SESSION_ID_PWA = "erv_session_id_pwa", r))(SESSION_STORAGE_KEYS || {});
let GameSessionContext = React.createContext({});
var GAME_SESSION_ACTIONS_TYPE = (r => (r[r.READY_TO_LOGIN = 0] = "READY_TO_LOGIN", r[r.TRIAL = 1] = "TRIAL", r[r.LOGGING_IN = 2] = "LOGGING_IN", r[r.LOGIN_FAILD = 3] = "LOGIN_FAILD", r[r.LOGIN_SUZZ = 4] = "LOGIN_SUZZ", r[r.LOST_CONNECTION = 5] = "LOST_CONNECTION", r[r.ON_GAME_TABLE = 6] = "ON_GAME_TABLE", r[r.ON_GAME_HALL = 7] = "ON_GAME_HALL", r[r.ON_MUlTI_HALL = 8] = "ON_MUlTI_HALL", r[r.LOADING = 9] = "LOADING", r))(GAME_SESSION_ACTIONS_TYPE || {});
let initState$3 = {
    gameSessionInfos: {
        loginType: "offline",
        gameSessionState: "offline",
        userStates: "offline",
        userCurrentScene: "login_page"
    }, urlParamsState: {sessionId: "", returnUrl: "", lang: ""}
};
const gameSessionReducer = (r = initState$3, R) => {
    switch (R.type) {
        case 0:
            return Object.assign({...r}, {
                gameSessionInfos: {
                    ...r.gameSessionInfos,
                    loginType: R.payload.loginType,
                    gameSessionState: R.payload.gameSessionState,
                    userStates: "offline"
                }, urlParamsState: R.payload.urlParamsState
            });
        case 2:
            return Object.assign({...r}, {gameSessionInfos: {...r.gameSessionInfos, gameSessionState: "logging_in"}});
        case 3:
            return Object.assign({...r}, {
                gameSessionInfos: {
                    ...r.gameSessionInfos,
                    gameSessionState: "offline",
                    userStates: "offline"
                }
            });
        case 4:
            return Object.assign({...r}, {
                gameSessionInfos: {
                    ...r.gameSessionInfos,
                    gameSessionState: "online",
                    userStates: "playing"
                }
            });
        case 5:
            return Object.assign({...r}, {
                gameSessionInfos: {
                    ...r.gameSessionInfos,
                    gameSessionState: "lost_connection",
                    userStates: "offline"
                }
            });
        case 6:
            return Object.assign({...r}, {
                gameSessionInfos: {
                    ...r.gameSessionInfos,
                    userCurrentScene: "game_table",
                    userStates: "playing"
                }
            });
        case 7:
            return Object.assign({...r}, {
                gameSessionInfos: {
                    ...r.gameSessionInfos,
                    userCurrentScene: "game_hall",
                    userStates: "playing"
                }
            });
        case 8:
            return Object.assign({...r}, {
                gameSessionInfos: {
                    ...r.gameSessionInfos,
                    userCurrentScene: "multi_hall",
                    userStates: "playing"
                }
            });
        case 9:
            return Object.assign({...r}, {
                gameSessionInfos: {
                    ...r.gameSessionInfos,
                    userCurrentScene: "loading",
                    userStates: "playing"
                }
            });
        default:
            return initState$3
    }
}, useCheckUrlParams = r => {
    let [R, y] = React.useState({urlParamsChecked: !1}), {isStandalone: E} = React.useContext(PwaContext), {preloadConfig: C} = React.useContext(ServerConfigContext);
    const x = "en", B = z => {
        let F = z ?? "";
        if (z) {
            const _e = z.toLowerCase();
            _e === "zh-cn" || _e === "zh_cn" ? F = "sc" : _e === "zh-tw" || _e === "zh_tw" || _e === "zh_hk" || _e === "zh-hk" ? F = "tc" : _e === "pt_br" ? F = "ptbr" : _e === "ko" || _e === "korean" ? F = "kr" : _e === "th" && (F = "thai")
        }
        return F
    }, {i18n: N} = useTranslation(), L = () => {
        let z = O("sessionId"), F = O("returnUrl"), _e = B(O("language")), Y = O("tableName"), H = O("embedded"),
            me = O("appType"), ce = O("trial") == "true", ie = O("ws");

        function Be(Ce) {
            const Ne = new URLSearchParams;
            for (const we in Ce) Ce.hasOwnProperty(we) && Ce[we] != null && Ne.append(we, Ce[we]);
            return Ne.toString()
        }

        Global.currentQueryString = "?" + Be({
            sessionId: z,
            returnUrl: F,
            lang: _e,
            tableName: Y
        }), (!F || F.length === 0) && (F = sessionStorage.getItem("erv_return_url") || ""), sessionStorage.setItem("erv_return_url", F);
        let Re = (() => {
            let Ce = x;
            if (_e && LANGUAGES.find(Ne => Ne.key === _e)) Ce = _e; else {
                let Ne = sessionStorage.getItem("erv_language") || localStorage.getItem("erv_language");
                if (Ne && LANGUAGES.find(we => we.key === Ne)) Ce = Ne; else {
                    localStorage.removeItem("erv_language");
                    const we = B(navigator.language || navigator.languages[0]);
                    we && LANGUAGES.find(Me => Me.key === we) && (Ce = we)
                }
            }
            return C != null && C.whiteLabel.supportedLanguage.includes(Ce) ? Ce : x
        })();
        if (sessionStorage.setItem("erv_language", Re), N.changeLanguage(Re), ce) {
            y(Ce => ({
                ...Ce,
                urlParamsChecked: !0,
                returnUrl: F,
                lang: Re,
                tableName: Y,
                embedded: H,
                appType: me,
                specificWsServerIndex: ie
            })), D(0, {
                loginType: "trial",
                gameSessionState: "trial",
                urlParamsState: {
                    returnUrl: F,
                    lang: Re,
                    embedded: H,
                    tableName: Y,
                    appType: me,
                    specificWsServerIndex: ie
                }
            });
            return
        }
        z ? sessionStorage.removeItem("erv_session_id_type") : (z = sessionStorage.getItem("erv_session_id"), E() && (z = localStorage.getItem("erv_session_id_pwa"))), z && z.length > 0 ? (y(Ce => ({
            ...Ce,
            urlParamsChecked: !0,
            sessionId: z,
            returnUrl: F,
            lang: Re,
            tableName: Y,
            embedded: H,
            appType: me,
            specificWsServerIndex: ie
        })), D(0, {
            loginType: "forward_link_authentication",
            gameSessionState: "forward_link_authentication",
            urlParamsState: {
                sessionId: z,
                returnUrl: F,
                lang: Re,
                tableName: Y,
                embedded: H,
                appType: me,
                specificWsServerIndex: ie
            }
        })) : (y(Ce => ({
            ...Ce,
            urlParamsChecked: !0,
            returnUrl: F,
            lang: Re,
            embedded: H,
            appType: me,
            specificWsServerIndex: ie
        })), D(0, {
            loginType: "normal_authentication",
            gameSessionState: "normal_authentication",
            urlParamsState: {sessionId: "", returnUrl: F, lang: Re, embedded: H, appType: me, specificWsServerIndex: ie}
        }))
    }, O = z => {
        let F = UrlFuncs().get(window.location.href, z);
        return F || (F = new URLSearchParams(location.hash.split("?")[1]).get(z)), F
    }, D = React.useCallback((z, F) => {
        r && r({type: z, payload: F})
    }, [r]);
    return {check: L, urlParams: R}
}, useGameSession = () => {
    let {
        allReady: r,
        preloadConfig: R,
        serverLinesSorted: y,
        systemJsonData: E
    } = React.useContext(ServerConfigContext), [C] = React.useContext(UserInfoContext);
    const [x, B] = React.useReducer(gameSessionReducer, initState$3), {check: N} = useCheckUrlParams(B), [L, O] = React.useState(""), {
        changeSetting: D,
        settings: z
    } = React.useContext(SettingsContext), [F, _e] = React.useState(() => z.customChips);
    React.useEffect(() => {
        F.length > 0 && D("customChips", F)
    }, [F]);
    let Y = React.useRef(!1), H = React.useRef("login_page");
    React.useEffect(() => {
        r && N()
    }, [r]);
    const me = React.useCallback((De, Xe) => {
        B && B({type: De, payload: Xe})
    }, [B]);
    React.useEffect(() => {
        if (navigator.userAgentData) navigator.userAgentData.getHighEntropyValues(["fullVersionList"]).then(De => {
            let He = De.fullVersionList.find(Ge => Ge.brand.match(/(?:Google Chrome|Firefox|Safari)/));
            if (He) O(Object.values(He).join(" ")); else {
                let Ge = window.navigator.userAgent.match(/(Chrome|Firefox|Safari|Edge|IE|Opera)\/*([0-9\.]+)/);
                O(Ge ? Ge[0].replace("/", "") : "")
            }
        }); else {
            let De = window.navigator.userAgent.match(/(Chrome|Firefox|Safari|Edge|IE|Opera)\/*([0-9\.]+)/);
            O(De ? De[0].replace("/", " ") : "")
        }
    }, []);
    let ce = React.useMemo(() => {
        var De, Xe;
        return ((Xe = (De = x.urlParamsState) == null ? void 0 : De.returnUrl) == null ? void 0 : Xe.length) > 0
    }, [x.urlParamsState.returnUrl]);
    const ie = R == null ? void 0 : R.whiteLabel, Be = C.suffix, ve = x.urlParamsState.embedded === "true";
    let Re = x.gameSessionInfos.loginType === "normal_authentication" || sessionStorage.getItem("erv_session_id_type") == "normal_authentication",
        Ce = x.gameSessionInfos.gameSessionState, Ne = x.gameSessionInfos.userCurrentScene;
    const we = !!(ie != null && ie.appDownload.isShowAppDownload && !(ie != null && ie.appDownload.appDownloadBlackList.find(De => De === Be))) && !ve,
        Me = R == null ? void 0 : R.whiteLabel.sexyGames, ke = R == null ? void 0 : R.whiteLabel.classicBaccaratGames,
        Fe = (ie == null ? void 0 : ie.minChipValue) || 0;
    let {isStandalone: $e} = React.useContext(PwaContext);
    const Ve = React.useCallback(() => {
        let De = x.urlParamsState.appType ? parseInt(x.urlParamsState.appType) : void 0;
        if (De) return De;
        let Xe = $e() && isIOS_1 ? AppType.erv_ios_pwa : void 0;
        return Xe || (isDesktop_1 ? AppType.erv_desktop : AppType.erv_mobile)
    }, []), [Je, Qe] = React.useState(x.urlParamsState.tableName || void 0);
    React.useEffect(() => {
        Qe(x.urlParamsState.tableName)
    }, [x.urlParamsState.tableName]);
    const Ze = React.useMemo(() => {
        var Xe;
        return {
            isNormalLogin: Re,
            hasSessionId: ((Xe = x.urlParamsState.sessionId) == null ? void 0 : Xe.length) > 0,
            hasReturnUrl: ce,
            isStandalone: Helper.isStandalone(),
            isTrial: Y.current
        }
    }, [Re, x.gameSessionInfos, x.urlParamsState.sessionId, ce, Y]), qe = (De = !0) => {
        var He;
        let Xe = (He = x.urlParamsState) == null ? void 0 : He.returnUrl;
        if (Xe && Xe.length > 0) window.location.href = Xe; else if (De) {
            const {protocol: Ge, host: Le, pathname: We} = window.location, dt = `${Ge}//${Le}${We}`;
            window.history.replaceState(null, "", dt), window.location.reload()
        } else window.location.reload()
    }, ze = React.useCallback(De => {
        me(De), De === 7 && (H.current = "game_hall", Global.userScene = "game_hall"), De === 6 && (H.current = "game_table", Global.userScene = "game_table"), De === 8 && (H.current = "multi_hall", Global.userScene = "multi_hall")
    }, [me]);
    return {
        customChipsSetting: F,
        setCustomChips: _e,
        sessionChecker: Ze,
        getAppType: Ve,
        isShowAppDownload: we,
        refresh: qe,
        setCurrentPage: ze,
        tableNameInQueryString: Je,
        setTableNameInQueryString: Qe,
        SEXY_GAME_TABLES: Me,
        CLASSIC_BACCARAT_GAME_TABLES: ke,
        browserVersion: L,
        userCurrentScene: Ne,
        gameSessionStatus: Ce,
        gameSessionContext: x,
        update: me,
        isTrial: Y,
        currentScene: H,
        hasReturnUrl: ce,
        isNormalLoginType: Re,
        minChipValue: Fe
    }
};
let GameSessionProvider = ({children: r}) => jsx(GameSessionContext.Provider, {
    value: {...useGameSession()},
    children: r
});
var SPLASH_SCREEN_ANIMATION_TYPE = (r => (r[r.FADE_IN = 0] = "FADE_IN", r[r.FADE_OUT = 1] = "FADE_OUT", r[r.IDLE = 2] = "IDLE", r))(SPLASH_SCREEN_ANIMATION_TYPE || {});
let SplashScreenContext = React.createContext({});
const PROGRESS_LERPPING_DURATION = 800, useSplashScreen = () => {
    React.useState();
    const [r, R] = React.useState(!1), [y, E] = React.useState(2), [C, x] = React.useState(!0), {gameSessionContext: B} = React.useContext(GameSessionContext);
    let N = React.useMemo(() => B.gameSessionInfos.userCurrentScene, [B.gameSessionInfos.userCurrentScene]);
    React.useEffect(() => {
        N == USER_CURRENT_SCENE.GAME_HALL && x(!0)
    }, [N]);
    const L = React.useCallback(() => {
        E(2), R(!1)
    }, []), O = React.useCallback(z => {
        E(z)
    }, []), D = React.useCallback(() => {
        R(z => !z)
    }, []);
    return {anime: y, stop: r, reset: L, setStop: R, doAnimation: O, loadingDone: D, isLoading: C, setLoading: x}
};
let SplashScreenProvider = ({children: r}) => jsx(SplashScreenContext.Provider, {
    value: {...useSplashScreen()},
    children: r
});
const SetFixSizeContext = React.createContext(() => {
}), Chip = r => {
    const R = C => {
        switch (C.length) {
            case 1:
                return 68;
            case 2:
                return 64;
            case 3:
                return 58;
            default:
                return 42
        }
    }, y = jsxs("svg", {
        viewBox: "0 0 200 200",
        xmlnsXlink: "http://www.w3.org/1999/xlink",
        xmlns: "http://www.w3.org/2000/svg",
        children: [jsx("ellipse", {
            fill: r.color,
            cx: "99.928032",
            cy: "101.96087",
            rx: "85.928032",
            ry: "83.839134"
        }), jsxs("g", {
            fill: "#e6e6e6",
            id: "side_stripe",
            children: [jsx("path", {d: "m 155.41967,158.04332 -29.38457,15.85102 v 7.94241 c 14.23904,-4.48587 23.72833,-11.156 29.38458,-15.86358 z"}), jsx("path", {d: "m 73.823336,181.83749 c -15.716816,-4.82618 -25.81435,-12.919 -29.315096,-15.8051 v -8.12004 l 29.315096,15.91123 z"}), jsx("path", {d: "m 183.22346,113.40338 0,9.15122 c 2.85583,-9.07608 3.51454,-22.04259 1.62163,-33.295748 z"}), jsx("path", {d: "m 16.791115,113.46841 0,9.68717 C 13.760134,112.1819 12.998956,98.596721 15.377162,87.047489 Z"})]
        }), jsx("ellipse", {
            fill: "#FFF",
            cx: "100",
            cy: "98.07856",
            rx: "85.139084",
            ry: "82.1334",
            id: "side_bar"
        }), jsx("ellipse", {
            fill: r.color,
            cx: "100",
            cy: "96.07856",
            rx: "85.139084",
            ry: "82.1334",
            id: "face_color"
        }), jsx("ellipse", {
            stroke: "#FFF",
            strokeWidth: "17.3229",
            strokeDasharray: "30.2955, 47.9534",
            strokeDashoffset: "14.7149",
            fill: "none",
            cx: "100",
            cy: "96.064308",
            rx: "76.488152",
            ry: "73.514366",
            id: "face_stripe"
        }), jsx("ellipse", {
            fill: "#FCFCFC",
            cx: "99.204773",
            cy: "95.911217",
            rx: "61.000221",
            ry: "59.666084",
            id: "ellipse12",
            stroke: "#FFF",
            strokeWidth: "3.97218"
        }), jsx("text", {
            x: "100",
            y: "100",
            textAnchor: "middle",
            dominantBaseline: "middle",
            fontSize: R(r.amount.toString()),
            fontFamily: "Arial",
            fontWeight: "bold",
            children: r.amount.toString()
        })]
    }), E = jsxs("svg", {
        xmlns: "http://www.w3.org/2000/svg",
        xmlnsXlink: "http://www.w3.org/1999/xlink",
        viewBox: "0 0 200 200",
        children: [jsx("path", {
            fill: "#FFF",
            d: "M43,76.8c3-5.6,7.3-10.6,12.8-14.9c5.4-4.2,11.9-7.7,19.1-10.1c7.2-2.4,15.1-3.8,23.5-3.9 c8.4-0.1,16.4,1.1,23.7,3.3c7.4,2.2,14,5.5,19.7,9.6s10.4,9,13.8,14.5c3.4,5.5,5.4,11.6,5.7,18.1s-1.1,12.7-3.9,18.4 c-2.8,5.7-7.1,10.9-12.5,15.3c-5.4,4.4-11.9,8-19.3,10.5c-7.3,2.5-15.4,4-24,4.1s-16.8-1.1-24.3-3.5c-7.5-2.3-14.3-5.7-20-10 c-5.7-4.2-10.3-9.3-13.6-14.9c-3.2-5.6-5.1-11.8-5.2-18.3C38.4,88.6,40,82.4,43,76.8z M47,94.9c0.1,5.6,1.7,10.9,4.5,15.8 s6.8,9.2,11.7,12.9c4.9,3.7,10.8,6.6,17.2,8.6c6.5,2,13.5,3.1,20.9,3s14.4-1.4,20.7-3.5c6.3-2.2,11.9-5.3,16.6-9.1 c4.7-3.8,8.3-8.2,10.8-13.2c2.5-4.9,3.7-10.3,3.4-15.9s-2-10.9-4.9-15.6c-2.9-4.8-6.9-9-11.8-12.6c-4.9-3.5-10.7-6.4-17-8.3 c-6.3-1.9-13.3-2.9-20.5-2.8c-7.2,0.1-14.1,1.3-20.3,3.4c-6.2,2.1-11.8,5.1-16.4,8.7c-4.7,3.7-8.4,8-11,12.9 C48.2,84,46.8,89.4,47,94.9L47,94.9z"
        }), jsx("path", {
            fill: r.color,
            d: "M14.5,95c0.1,9,2.6,17.7,7.1,25.5c4.5,7.9,10.9,15,18.8,20.9c7.9,6,17.4,10.8,27.9,14 c10.5,3.3,22,5,34,4.8s23.4-2.2,33.6-5.8c10.2-3.5,19.3-8.6,26.8-14.8c7.5-6.1,13.4-13.4,17.3-21.4c3.9-8,5.8-16.6,5.3-25.7 c-0.5-9-3.4-17.5-8.1-25.1c-4.7-7.6-11.3-14.4-19.2-20.1s-17.2-10.2-27.4-13.2c-10.2-3.1-21.3-4.7-32.9-4.5S75.1,31.7,65.2,35 c-10,3.3-19,8.1-26.5,14C31.1,54.9,25,61.9,20.8,69.7S14.4,86,14.5,95z M37.6,94.7c-0.1-6.6,1.5-12.8,4.5-18.5s7.5-10.8,13-15.1 s12-7.8,19.4-10.3c7.3-2.5,15.4-3.9,23.9-4s16.6,1.1,24.1,3.3c7.5,2.3,14.3,5.6,20,9.7c5.8,4.2,10.6,9.2,14,14.8s5.5,11.8,5.8,18.4 s-1.1,12.9-4,18.7c-2.9,5.8-7.2,11.1-12.7,15.5c-5.5,4.5-12.1,8.1-19.6,10.7c-7.4,2.6-15.7,4.1-24.4,4.2c-8.7,0.1-17.1-1.1-24.7-3.5 s-14.5-5.8-20.3-10.2c-5.8-4.3-10.5-9.5-13.8-15.2C39.5,107.6,37.7,101.3,37.6,94.7z"
        }), jsxs("g", {
            children: [jsxs("radialGradient", {
                id: "SVGID_1_",
                cx: "3928.864",
                cy: "110.8949",
                r: "112.9687",
                fx: "3820.4458",
                fy: "142.6351",
                gradientTransform: "matrix(-1 0 0 -1 4022.2983 200)",
                gradientUnits: "userSpaceOnUse",
                children: [jsx("stop", {
                    offset: "4.012472e-02",
                    style: {stopColor: "#E6E6E6"}
                }), jsx("stop", {offset: "0.1256", style: {stopColor: "#EAEAEA"}}), jsx("stop", {
                    offset: "0.4692",
                    style: {stopColor: "#F8F8F8"}
                }), jsx("stop", {offset: "0.7723", style: {stopColor: "#FCFCFC"}})]
            }), jsx("path", {
                fill: "url(#SVGID_1_)",
                d: "M47.5,111.5c-3.1-5.3-4.8-11.1-4.9-17.2c-0.1-6.1,1.4-11.9,4.1-17.2c2.8-5.3,6.9-10,12-14s11.2-7.3,18-9.6 s14.3-3.6,22.2-3.7c7.9-0.1,15.5,1,22.4,3.1s13.2,5.2,18.6,9.1s9.8,8.5,12.9,13.7c3.2,5.2,5,11,5.3,17c0.3,6.1-1.1,12-3.7,17.3 c-2.7,5.4-6.7,10.2-11.8,14.3s-11.2,7.5-18.1,9.9s-14.5,3.7-22.6,3.8c-8,0.1-15.8-1-22.8-3.2s-13.4-5.4-18.8-9.4 C54.9,121.5,50.6,116.7,47.5,111.5z"
            }), jsxs("radialGradient", {
                id: "SVGID_2_",
                cx: "3927.1675",
                cy: "110.7125",
                r: "81.5036",
                gradientTransform: "matrix(-1 0 0 -1 4022.2983 200)",
                gradientUnits: "userSpaceOnUse",
                children: [jsx("stop", {offset: "0.7794", style: {stopColor: "#FCFCFC"}}), jsx("stop", {
                    offset: "1",
                    style: {stopColor: "#E6E6E6"}
                })]
            }), jsx("path", {
                style: {fill: "url(#SVGID_2_)"},
                d: "M183.8,82.2c0.3,1,0.5,2.1,0.7,3.1 c0.2,1.1,0.4,2.1,0.5,3.2s0.2,2.2,0.3,3.2c0.1,1.1,0.1,2.2,0.1,3.3c0,1.1-0.1,2.2-0.1,3.2c-0.1,1.1-0.2,2.1-0.3,3.2 s-0.3,2.1-0.5,3.1l-18-2.5c0.2-0.8,0.3-1.6,0.4-2.5c0.1-0.8,0.2-1.7,0.3-2.5s0.1-1.7,0.1-2.5c0-0.9,0-1.7-0.1-2.6 c0-0.9-0.1-1.7-0.2-2.6c-0.1-0.8-0.2-1.7-0.4-2.5s-0.3-1.7-0.5-2.5s-0.4-1.6-0.7-2.4L183,79C183.2,80.1,183.5,81.1,183.8,82.2z"
            }), jsxs("radialGradient", {
                id: "SVGID_2_",
                cx: "3927.1663",
                cy: "110.7122",
                r: "81.5026",
                gradientTransform: "matrix(-1 0 0 -1 4022.2983 200)",
                gradientUnits: "userSpaceOnUse",
                children: [jsx("stop", {offset: "0.7794", style: {stopColor: "#FCFCFC"}}), jsx("stop", {
                    offset: "1",
                    style: {stopColor: "#E6E6E6"}
                })]
            }), jsx("path", {
                style: {fill: "url(#SVGID_2_)"},
                d: "M129.5,139.9c1-0.4,2-0.8,3-1.2 s2-0.8,2.9-1.3c1-0.5,1.9-0.9,2.8-1.4c0.9-0.5,1.8-1,2.7-1.5s1.7-1,2.6-1.6c0.8-0.5,1.7-1.1,2.5-1.7l12.6,10.5 c-1,0.7-2.1,1.4-3.1,2.1c-1.1,0.7-2.2,1.4-3.3,2c-1.1,0.7-2.3,1.3-3.4,1.9c-1.2,0.6-2.4,1.2-3.6,1.8c-1.2,0.6-2.5,1.1-3.7,1.7 c-1.3,0.5-2.5,1-3.8,1.5s-2.6,0.9-3.8,1.3c-1.3,0.4-2.6,0.8-3.9,1.2l-6.5-13.5c1-0.3,2-0.6,3.1-0.9 C127.5,140.7,128.5,140.3,129.5,139.9z"
            }), jsxs("radialGradient", {
                id: "SVGID_3_",
                cx: "3927.1667",
                cy: "110.7129",
                r: "81.5034",
                gradientTransform: "matrix(-1 0 0 -1 4022.2983 200)",
                gradientUnits: "userSpaceOnUse",
                children: [jsx("stop", {offset: "0.7794", style: {stopColor: "#FCFCFC"}}), jsx("stop", {
                    offset: "1",
                    style: {stopColor: "#E6E6E6"}
                })]
            }), jsx("path", {
                style: {fill: "url(#SVGID_3_)"},
                d: "M59,134.1c0.9,0.5,1.8,1,2.7,1.5 s1.9,1,2.8,1.4c1,0.5,1.9,0.9,2.9,1.3c1,0.4,2,0.8,3,1.2s2,0.7,3.1,1.1c1,0.3,2.1,0.7,3.1,1s2.1,0.6,3.1,0.8L74.2,156 c-1.3-0.3-2.7-0.7-4-1.1c-1.3-0.4-2.6-0.8-3.9-1.2s-2.6-0.9-3.9-1.4c-1.3-0.5-2.6-1-3.8-1.6c-1.3-0.5-2.5-1.1-3.7-1.7 c-1.2-0.6-2.4-1.2-3.6-1.8c-1.2-0.6-2.3-1.3-3.4-1.9c-1.1-0.7-2.2-1.3-3.3-2l11.9-10.8C57.2,133.1,58.1,133.6,59,134.1z"
            }), jsxs("radialGradient", {
                id: "SVGID_4_",
                cx: "3927.1663",
                cy: "110.7127",
                r: "81.5037",
                gradientTransform: "matrix(-1 0 0 -1 4022.2983 200)",
                gradientUnits: "userSpaceOnUse",
                children: [jsx("stop", {offset: "0.7794", style: {stopColor: "#FCFCFC"}}), jsx("stop", {
                    offset: "1",
                    style: {stopColor: "#E6E6E6"}
                })]
            }), jsx("path", {
                style: {fill: "url(#SVGID_4_)"},
                d: "M14.5,90.8c0.1-1.1,0.2-2.1,0.3-3.2 s0.3-2.1,0.5-3.2c0.2-1,0.4-2.1,0.7-3.1l17.8,2.5c-0.2,0.8-0.4,1.6-0.5,2.5c-0.1,0.8-0.3,1.7-0.4,2.5c-0.1,0.8-0.2,1.7-0.2,2.5 s-0.1,1.7,0,2.6c0,0.9,0.1,1.7,0.1,2.6c0.1,0.8,0.2,1.7,0.3,2.5s0.3,1.7,0.4,2.5c0.2,0.8,0.4,1.6,0.6,2.5l-17.8,3 c-0.3-1-0.5-2.1-0.7-3.1s-0.4-2.1-0.6-3.2c-0.2-1.1-0.3-2.1-0.4-3.2c-0.1-1.1-0.1-2.2-0.1-3.3C14.5,92.9,14.5,91.8,14.5,90.8z"
            }), jsxs("radialGradient", {
                id: "SVGID_5_",
                cx: "3927.1665",
                cy: "110.7119",
                r: "81.504",
                gradientTransform: "matrix(-1 0 0 -1 4022.2983 200)",
                gradientUnits: "userSpaceOnUse",
                children: [jsx("stop", {offset: "0.7794", style: {stopColor: "#FCFCFC"}}), jsx("stop", {
                    offset: "1",
                    style: {stopColor: "#E6E6E6"}
                })]
            }), jsx("path", {
                style: {fill: "url(#SVGID_5_)"},
                d: "M49,41.2c1.1-0.6,2.2-1.2,3.4-1.8 s2.3-1.1,3.5-1.7c1.2-0.5,2.4-1.1,3.6-1.6c1.2-0.5,2.5-1,3.7-1.4s2.5-0.9,3.8-1.3c1.3-0.4,2.5-0.8,3.8-1.1L76.9,45 c-1,0.3-2,0.6-3,0.9c-1,0.3-2,0.6-3,1s-2,0.7-2.9,1.1c-1,0.4-1.9,0.8-2.9,1.2s-1.9,0.9-2.8,1.3c-0.9,0.5-1.8,0.9-2.7,1.4 s-1.7,1-2.6,1.5c-0.8,0.5-1.6,1.1-2.4,1.6l-12-10c1-0.7,2-1.4,3.1-2C46.8,42.5,47.9,41.9,49,41.2z"
            }), jsxs("radialGradient", {
                id: "SVGID_5_",
                cx: "3927.1672",
                cy: "110.7124",
                r: "81.5032",
                gradientTransform: "matrix(-1 0 0 -1 4022.2983 200)",
                gradientUnits: "userSpaceOnUse",
                children: [jsx("stop", {offset: "0.7794", style: {stopColor: "#FCFCFC"}}), jsx("stop", {
                    offset: "1",
                    style: {stopColor: "#E6E6E6"}
                })]
            }), jsx("path", {
                style: {fill: "url(#SVGID_5_)"},
                d: "M139.9,52.5c-0.9-0.5-1.8-1-2.7-1.4 c-0.9-0.5-1.8-0.9-2.8-1.4c-0.9-0.4-1.9-0.9-2.9-1.3c-1-0.4-2-0.8-3-1.2s-2-0.7-3-1s-2-0.6-3-0.9c-1-0.3-2-0.6-3.1-0.8l5.2-12.8 c1.3,0.3,2.6,0.6,3.9,1s2.6,0.7,3.8,1.2c1.3,0.4,2.5,0.8,3.8,1.3s2.5,0.9,3.8,1.5c1.2,0.5,2.5,1,3.7,1.6s2.4,1.1,3.5,1.7 c1.1,0.6,2.3,1.2,3.4,1.8s2.2,1.3,3.2,1.9L142.5,54C141.6,53.5,140.8,53,139.9,52.5z"
            })]
        }), jsx("path", {
            fill: r.color,
            d: "M14.6,96.3c0,0.4,0,0.8,0.1,1.2c0.1,0.9,0.2,1.7,0.3,2.5c0,0.2,0,0.5,0.1,0.7 c0.2,1.1,0.3,2.1,0.6,3.2c0.1,0.3,0.1,0.6,0.2,0.9c0.2,0.8,0.3,1.5,0.6,2.3c0.1,0.3,0.2,0.5,0.2,0.8c0.2,0.7,0.4,1.5,0.7,2.2 c0.1,0.4,0.3,0.7,0.4,1.1c0.2,0.6,0.5,1.2,0.7,1.9c0.2,0.4,0.3,0.8,0.5,1.1c0.3,0.6,0.5,1.2,0.8,1.8c0.2,0.4,0.4,0.7,0.5,1.1 c0.3,0.6,0.6,1.2,0.9,1.8c0.2,0.3,0.4,0.7,0.6,1c0.4,0.7,0.8,1.4,1.2,2c0.1,0.2,0.3,0.5,0.4,0.7c0.6,0.9,1.2,1.8,1.8,2.7 c0.1,0.2,0.3,0.4,0.4,0.6c0.5,0.7,1,1.3,1.5,2c0.3,0.4,0.7,0.8,1,1.2c0.4,0.5,0.8,1,1.2,1.4c0.4,0.4,0.7,0.8,1.1,1.2 c0.4,0.5,0.8,0.9,1.3,1.4c0.4,0.4,0.8,0.8,1.2,1.2c0.4,0.4,0.9,0.9,1.4,1.3c0.4,0.4,0.8,0.7,1.2,1.1c0.4,0.4,0.8,0.7,1.2,1.1 c1.4,1.2,2.9,2.4,4.4,3.5c0.3,0.2,0.6,0.4,0.8,0.6c1.6,1.1,3.2,2.2,4.9,3.2c0.2,0.1,0.4,0.2,0.6,0.3c1.7,1,3.4,2,5.2,2.9 c0.1,0.1,0.3,0.1,0.4,0.2c1.8,0.9,3.7,1.8,5.6,2.6c0.4,0.2,0.8,0.3,1.2,0.5c0.6,0.2,1.2,0.5,1.8,0.7s1.3,0.5,1.9,0.7 c0.6,0.2,1.2,0.4,1.9,0.7c0.7,0.2,1.3,0.4,2,0.7c0.6,0.2,1.3,0.4,1.9,0.6c0.7,0.2,1.3,0.4,2,0.6c0.6,0.2,1.3,0.3,1.9,0.5 c0.7,0.2,1.4,0.4,2.2,0.5c0.5,0.1,1,0.2,1.5,0.3c0.8,0.2,1.6,0.3,2.5,0.5c0.5,0.1,1,0.2,1.4,0.3c0.9,0.2,1.8,0.3,2.7,0.5 c0.4,0.1,0.8,0.1,1.2,0.2c1.3,0.2,2.6,0.4,4,0.5c0.1,0,0.2,0,0.3,0c1.2,0.1,2.4,0.2,3.6,0.3c0.4,0,0.8,0.1,1.2,0.1 c1,0.1,1.9,0.1,2.9,0.1c0.4,0,0.8,0,1.2,0c1.3,0,2.7,0,4,0c0.9,0,1.9-0.1,2.8-0.1c0.7,0,1.5-0.1,2.2-0.1s1.4-0.1,2.1-0.1 c0.7-0.1,1.4-0.1,2.2-0.2c0.7-0.1,1.3-0.1,2-0.2c0.7-0.1,1.4-0.2,2.1-0.3s1.3-0.2,2-0.3s1.4-0.2,2.1-0.3c0.5-0.1,0.9-0.2,1.4-0.3 c2-0.4,4-0.8,6-1.3c0.2,0,0.4-0.1,0.6-0.2c1.9-0.5,3.8-1,5.6-1.6c0.2-0.1,0.5-0.1,0.7-0.2c1.9-0.6,3.7-1.3,5.5-2 c0.3-0.1,0.7-0.3,1-0.4c1.8-0.7,3.5-1.5,5.2-2.3c0.3-0.1,0.6-0.3,0.9-0.4c1.7-0.8,3.4-1.7,5.1-2.7c0,0,0.1,0,0.1-0.1 c1.6-0.9,3.2-1.9,4.7-2.9c0.2-0.2,0.5-0.3,0.7-0.5c1.5-1,2.9-2,4.3-3.1c0.3-0.2,0.5-0.4,0.8-0.6c1.4-1.1,2.7-2.2,3.9-3.4 c0.2-0.2,0.3-0.3,0.5-0.5c1.2-1.2,2.4-2.4,3.6-3.6c0.1-0.1,0.2-0.2,0.2-0.3c1.1-1.3,2.2-2.6,3.2-3.9c0.2-0.2,0.4-0.5,0.5-0.7 c1-1.3,1.9-2.6,2.8-4c0.2-0.3,0.3-0.5,0.5-0.8c0.9-1.4,1.7-2.8,2.4-4.3c0.4-0.9,0.9-1.7,1.2-2.6c0.1-0.2,0.1-0.3,0.2-0.5 c0.3-0.8,0.6-1.5,0.9-2.3c0.1-0.3,0.2-0.6,0.3-1c0.2-0.6,0.4-1.2,0.6-1.8c0.1-0.4,0.2-0.7,0.3-1.1c0.2-0.6,0.3-1.2,0.5-1.8 c0.1-0.4,0.2-0.8,0.3-1.1c0.1-0.6,0.3-1.2,0.4-1.8c0.1-0.4,0.1-0.7,0.2-1.1c0.1-0.7,0.2-1.3,0.3-2c0-0.3,0.1-0.6,0.1-1 c0.1-1,0.2-2,0.2-3l-0.7,15.4c0,1-0.1,2-0.2,2.9c0,0.3-0.1,0.6-0.1,0.9c-0.1,0.7-0.2,1.3-0.3,2c-0.1,0.4-0.1,0.7-0.2,1.1 c-0.1,0.6-0.2,1.2-0.4,1.8c-0.1,0.4-0.2,0.8-0.3,1.1c-0.1,0.6-0.3,1.2-0.5,1.7c-0.1,0.4-0.2,0.7-0.3,1.1c-0.2,0.6-0.4,1.2-0.6,1.8 c-0.1,0.3-0.2,0.6-0.3,1c-0.3,0.8-0.6,1.5-0.9,2.2c-0.1,0.2-0.1,0.3-0.2,0.5c-0.4,0.8-0.8,1.7-1.2,2.5c0,0,0,0.1-0.1,0.1 c-0.5,1-1,2-1.6,3c-0.2,0.4-0.5,0.9-0.8,1.3c-0.2,0.3-0.3,0.5-0.5,0.8c-0.9,1.3-1.8,2.7-2.7,4c-0.2,0.2-0.4,0.5-0.5,0.7 c-1,1.3-2.1,2.6-3.2,3.9c-0.1,0.1-0.2,0.2-0.2,0.2c-1.1,1.2-2.3,2.4-3.5,3.6c-0.1,0.1-0.2,0.2-0.3,0.3s-0.1,0.1-0.2,0.2 c-1.3,1.2-2.6,2.3-3.9,3.4c-0.3,0.2-0.5,0.4-0.8,0.6c-0.3,0.2-0.6,0.5-0.9,0.7c-0.4,0.3-0.9,0.6-1.4,1c-1.1,0.8-2.3,1.6-3.5,2.4 c-0.7,0.5-1.5,0.9-2.2,1.4c-1.2,0.7-2.4,1.4-3.6,2.1c-0.8,0.4-1.6,0.9-2.4,1.3c-0.4,0.2-0.8,0.5-1.3,0.7c-0.9,0.4-1.8,0.8-2.8,1.2 c-0.8,0.3-1.6,0.7-2.3,1c-1.6,0.7-3.3,1.3-5,1.9c-0.5,0.2-1,0.4-1.5,0.6c-0.1,0-0.2,0.1-0.4,0.1c-0.2,0.1-0.4,0.1-0.7,0.2 c-1.8,0.6-3.7,1.1-5.6,1.6c-0.2,0.1-0.4,0.1-0.6,0.2c-1.9,0.5-3.9,0.9-5.9,1.3c-0.2,0-0.4,0.1-0.6,0.1c-0.3,0-0.5,0.1-0.8,0.1 c-0.7,0.1-1.4,0.2-2.1,0.3c-0.4,0.1-0.8,0.1-1.2,0.2c-0.3,0-0.5,0.1-0.8,0.1c-0.7,0.1-1.4,0.2-2.1,0.3c-0.4,0-0.8,0.1-1.3,0.2 c-0.2,0-0.5,0-0.7,0.1c-0.7,0.1-1.4,0.1-2.1,0.2c-0.4,0-0.9,0.1-1.3,0.1c-0.2,0-0.5,0-0.7,0c-0.7,0-1.5,0.1-2.2,0.1 c-0.5,0-0.9,0-1.4,0.1c-0.1,0-0.2,0-0.4,0c-0.1,0-0.2,0-0.4,0c-0.1,0-0.2,0-0.4,0c-0.1,0-0.2,0-0.4,0c-1.1,0-2.2,0-3.4,0 c-0.2,0-0.4,0-0.6,0c-0.4,0-0.8,0-1.2,0c-0.5,0-1,0-1.5,0s-0.9-0.1-1.4-0.1c-0.4,0-0.8,0-1.2-0.1c-0.2,0-0.5,0-0.7,0 c-1-0.1-1.9-0.2-2.9-0.3c-0.1,0-0.2,0-0.3,0c0,0,0,0-0.1,0c-1.2-0.1-2.4-0.3-3.6-0.4c-0.1,0-0.2,0-0.3,0c-0.4-0.1-0.8-0.1-1.2-0.2 c-0.7-0.1-1.4-0.2-2-0.3c-0.2,0-0.5-0.1-0.7-0.1c-0.5-0.1-1-0.2-1.4-0.3c-0.5-0.1-0.9-0.2-1.4-0.3c-0.4-0.1-0.7-0.2-1.1-0.2 c-0.5-0.1-1-0.2-1.4-0.3c-0.3-0.1-0.6-0.1-0.9-0.2c-0.4-0.1-0.8-0.2-1.3-0.3c-0.6-0.2-1.3-0.3-1.9-0.5c-0.3-0.1-0.5-0.1-0.8-0.2 c-0.4-0.1-0.8-0.3-1.3-0.4c-0.4-0.1-0.8-0.2-1.2-0.4c-0.2-0.1-0.5-0.2-0.7-0.2c-0.2-0.1-0.5-0.1-0.7-0.2c-0.4-0.1-0.8-0.3-1.3-0.4 c-0.6-0.2-1.2-0.4-1.8-0.7c-0.2-0.1-0.4-0.2-0.7-0.2c-0.4-0.2-0.8-0.3-1.3-0.5c-0.6-0.2-1.2-0.5-1.8-0.7c-0.2-0.1-0.4-0.2-0.6-0.2 c-0.2-0.1-0.4-0.2-0.6-0.3c-1.9-0.8-3.8-1.7-5.6-2.6h-0.1c-0.1,0-0.2-0.1-0.3-0.2c-1.8-0.9-3.5-1.9-5.2-2.9 c-0.1-0.1-0.3-0.2-0.4-0.2c-0.1,0-0.1-0.1-0.2-0.1c-1.7-1-3.3-2.1-4.8-3.2c-0.2-0.1-0.3-0.2-0.5-0.3c-0.1-0.1-0.2-0.2-0.4-0.3 c-0.3-0.2-0.6-0.4-0.9-0.6c-1.2-0.9-2.4-1.9-3.5-2.8c-0.1-0.1-0.2-0.2-0.3-0.3c-0.3-0.3-0.6-0.6-0.9-0.8c-0.4-0.4-0.8-0.7-1.2-1.1 c-0.1-0.1-0.3-0.3-0.4-0.4c-0.3-0.3-0.6-0.6-0.9-0.9c-0.4-0.4-0.8-0.8-1.2-1.2c-0.1-0.1-0.2-0.2-0.4-0.4c-0.3-0.3-0.6-0.7-0.9-1 c-0.4-0.4-0.7-0.8-1.1-1.2c-0.1-0.1-0.2-0.2-0.3-0.3c-0.3-0.4-0.6-0.7-0.9-1.1c-0.3-0.4-0.7-0.8-1-1.2c-0.1-0.1-0.2-0.2-0.2-0.3 c-0.4-0.6-0.9-1.1-1.3-1.7c-0.1-0.2-0.3-0.4-0.4-0.6c-0.6-0.8-1.2-1.7-1.7-2.5l-0.1-0.1c-0.1-0.2-0.3-0.5-0.4-0.7 c-0.4-0.7-0.8-1.3-1.2-2c-0.1-0.1-0.1-0.2-0.2-0.3c-0.1-0.2-0.2-0.5-0.4-0.7c-0.2-0.4-0.4-0.8-0.6-1.2c-0.1-0.2-0.2-0.4-0.3-0.6 c-0.2-0.4-0.4-0.7-0.5-1.1c-0.3-0.6-0.5-1.2-0.8-1.8c-0.2-0.4-0.3-0.7-0.5-1.1c-0.1-0.2-0.2-0.4-0.3-0.6c-0.2-0.4-0.3-0.8-0.5-1.3 c-0.1-0.4-0.3-0.7-0.4-1.1c-0.2-0.7-0.5-1.5-0.7-2.2c-0.1-0.3-0.2-0.5-0.2-0.8v-0.1c-0.2-0.7-0.4-1.4-0.5-2.2 c-0.1-0.3-0.1-0.6-0.2-0.9l0,0c-0.2-1-0.4-2.1-0.6-3.1l0,0c0-0.2,0-0.5-0.1-0.7c-0.1-0.8-0.2-1.6-0.3-2.4V113c0-0.4,0-0.8-0.1-1.2 c0-0.6-0.1-1.3-0.1-1.9v-0.1v-0.1v-0.1l0,0l-0.2-15.1v-0.1v-0.1v-0.1v-0.1C14.5,94.8,14.5,95.5,14.6,96.3z"
        }), jsxs("g", {
            children: [jsxs("linearGradient", {
                id: "SVGID_6_",
                gradientUnits: "userSpaceOnUse",
                x1: "3863.9209",
                y1: "43.9971",
                x2: "3892.6316",
                y2: "43.9971",
                gradientTransform: "matrix(-1 0 0 -1 4022.2983 200)",
                children: [jsx("stop", {offset: "0", style: {stopColor: "#EDEDED"}}), jsx("stop", {
                    offset: "1",
                    style: {stopColor: "#CCCCCC"}
                })]
            }), jsx("path", {
                style: {fill: "url(#SVGID_6_)"},
                d: "M133.6,154.1c1.9-0.6,3.7-1.3,5.5-2 c0.3-0.1,0.7-0.3,1-0.4c1.8-0.7,3.5-1.5,5.2-2.3c0.3-0.1,0.6-0.3,0.9-0.4c1.7-0.8,3.4-1.7,5.1-2.7c0,0,0.1,0,0.1-0.1 c1.6-0.9,3.2-1.9,4.7-2.9c0.2-0.2,0.5-0.3,0.7-0.5c0.6-0.4,1.1-0.8,1.7-1.2v14.9c-0.1,0.1-0.2,0.2-0.3,0.2 c-1.1,0.8-2.3,1.6-3.5,2.4c-0.7,0.5-1.5,0.9-2.2,1.4c-1.2,0.7-2.4,1.4-3.6,2.1c-0.8,0.4-1.6,0.9-2.4,1.3c-0.4,0.2-0.8,0.5-1.3,0.7 c-0.9,0.4-1.8,0.8-2.8,1.2c-0.8,0.3-1.6,0.7-2.3,1c-1.6,0.7-3.3,1.3-5,1.9c-0.5,0.2-1,0.4-1.5,0.6c-0.1,0-0.2,0.1-0.4,0.1 c-0.2,0.1-0.4,0.1-0.7,0.2c-0.9,0.3-1.9,0.5-2.8,0.8v-15.2c1.1-0.3,2.2-0.6,3.2-0.9C133.1,154.2,133.3,154.2,133.6,154.1z"
            }), jsxs("linearGradient", {
                id: "SVGID_7_",
                gradientUnits: "userSpaceOnUse",
                x1: "3947.5349",
                y1: "42.5298",
                x2: "3978.0288",
                y2: "42.5298",
                gradientTransform: "matrix(-1 0 0 -1 4022.2983 200)",
                children: [jsx("stop", {offset: "0", style: {stopColor: "#CCCCCC"}}), jsx("stop", {
                    offset: "1",
                    style: {stopColor: "#EDEDED"}
                })]
            }), jsx("path", {
                style: {fill: "url(#SVGID_7_)"},
                d: "M47.3,144.6c1.7,1,3.5,2.1,5.4,3 c0.1,0.1,0.3,0.1,0.4,0.2c1.9,0.9,3.8,1.9,5.8,2.7c0.4,0.2,0.8,0.3,1.2,0.5c0.6,0.2,1.2,0.5,1.9,0.7c0.6,0.2,1.3,0.5,2,0.7 c0.6,0.2,1.2,0.4,2,0.7c0.7,0.2,1.3,0.4,2.1,0.7c0.6,0.2,1.3,0.4,2,0.6c0.7,0.2,1.3,0.4,2.1,0.6c0.6,0.2,1.3,0.3,2,0.5 c0.3,0.1,0.5,0.1,0.8,0.2v16.1c-0.3-0.1-0.6-0.2-0.9-0.2c-0.6-0.2-1.3-0.3-2-0.5c-0.3-0.1-0.5-0.1-0.8-0.2 c-0.4-0.1-0.8-0.3-1.3-0.4c-0.4-0.1-0.8-0.2-1.2-0.4c-0.2-0.1-0.5-0.2-0.7-0.2c-0.2-0.1-0.5-0.1-0.7-0.2c-0.4-0.1-0.8-0.3-1.3-0.4 c-0.6-0.2-1.2-0.4-1.9-0.7c-0.2-0.1-0.4-0.2-0.7-0.2c-0.4-0.2-0.8-0.3-1.3-0.5c-0.6-0.2-1.2-0.5-1.9-0.7c-0.2-0.1-0.4-0.2-0.6-0.2 c-0.2-0.1-0.4-0.2-0.6-0.3c-2-0.8-3.9-1.8-5.8-2.7h-0.1c-0.1,0-0.2-0.1-0.3-0.2c-1.9-0.9-3.6-2-5.4-3c-0.1-0.1-0.3-0.2-0.4-0.2 c-0.1,0-0.1-0.1-0.2-0.1c-0.9-0.5-1.6-1.2-2.6-1.7v-16c0.8,0.5,1.6,1.2,2.5,1.7C46.9,144.4,47.1,144.5,47.3,144.6z"
            }), jsxs("linearGradient", {
                id: "SVGID_8_",
                gradientUnits: "userSpaceOnUse",
                x1: "4005.9421",
                y1: "92.6628",
                x2: "4008.0986",
                y2: "92.6628",
                gradientTransform: "matrix(-1 0 0 -1 4022.2983 200)",
                children: [jsx("stop", {offset: "0", style: {stopColor: "#CCCCCC"}}), jsx("stop", {
                    offset: "1",
                    style: {stopColor: "#EDEDED"}
                })]
            }), jsx("path", {
                style: {fill: "url(#SVGID_8_)"},
                d: "M14.4,94.2c0,0.5,0,0.9,0.1,1.4 c0.1,1,0.2,2,0.4,2.9c0,0.2,0,0.6,0.1,0.8c0.2,1.3,0.4,2.4,0.7,3.7c0.1,0.3,0.1,0.7,0.2,1c0.1,0.8,0.4,1.5,0.6,2.2V123 c-0.1-0.3-0.2-0.8-0.2-1.2c-0.1-0.3-0.1-0.7-0.2-1l0,0c-0.2-1.2-0.5-2.4-0.7-3.6l0,0c0-0.2,0-0.6-0.1-0.8c-0.1-0.9-0.2-1.9-0.4-2.8 v-0.1c0-0.5,0-0.9-0.1-1.4c0-0.7-0.1-1.5-0.1-2.2v-0.1v-0.1v-0.1l0,0l-0.2-17.5V92v-0.1v-0.1v-0.1C14.2,92.5,14.2,93.3,14.4,94.2z"
            }), jsxs("linearGradient", {
                id: "SVGID_9_",
                gradientUnits: "userSpaceOnUse",
                x1: "3837.292",
                y1: "93.2",
                x2: "3838.2288",
                y2: "93.2",
                gradientTransform: "matrix(-1 0 0 -1 4022.2983 200)",
                children: [jsx("stop", {offset: "0", style: {stopColor: "#CCCCCC"}}), jsx("stop", {
                    offset: "1",
                    style: {stopColor: "#EDEDED"}
                })]
            }), jsx("path", {
                style: {fill: "url(#SVGID_9_)"},
                d: "M184.3,103.9c0.1-0.7,0.2-1.3,0.3-2 c0-0.3,0.1-0.6,0.1-1c0.1-1,0.2-2,0.2-3l-0.7,15.4c0,0.8-0.1,1.6-0.2,2.4v-10.4c0-0.1,0.1-0.3,0.1-0.4 C184.2,104.6,184.3,104.2,184.3,103.9z"
            })]
        }), jsx("path", {
            fill: "#FFF",
            d: "M14.5,93c0.3,8.6,2.7,16.8,7,24.3c4.5,7.9,10.9,15,18.8,20.9c7.9,6,17.4,10.8,27.9,14c10.5,3.3,22,5,34,4.8 s23.3-2.2,33.6-5.8c10.2-3.5,19.3-8.6,26.8-14.8c7.5-6.1,13.4-13.4,17.3-21.4c3.4-6.9,5.2-14.3,5.4-22c0.2,8.5-1.6,16.6-5.3,24.2 c-3.9,8-9.8,15.2-17.3,21.4s-16.6,11.2-26.8,14.8s-21.6,5.6-33.6,5.8s-23.5-1.6-34-4.8c-10.5-3.3-19.9-8.1-27.9-14 c-7.9-5.9-14.4-13-18.8-20.9c-4.4-7.8-7-16.5-7.1-25.5C14.5,93.7,14.5,93.3,14.5,93z"
        }), jsx("text", {
            x: "100",
            y: "100",
            textAnchor: "middle",
            dominantBaseline: "middle",
            fontSize: R(r.amount.toString()),
            fontFamily: "Arial",
            fontWeight: "bold",
            children: r.amount
        })]
    });
    return r.flat ? E : y
}, useChips = r => {
    const [R, y] = React.useState([]);
    return React.useEffect(() => {
        y(r.chipAttrs.map((E, C) => jsx(Chip, {
            color: E.color,
            amount: E.display ? E.display : E.amount,
            flat: r.flat
        }, C)))
    }, [r.chipAttrs]), React.useMemo(() => R, [R])
}, useCustomizeChips = r => {
    const [R, y] = React.useState([]);
    return React.useEffect(() => {
        y(r.chipAttrs.map((E, C) => jsx(Chip, {
            color: E.color,
            amount: E.amount > 0 ? E.amount.toString() : "",
            flat: r.flat
        }, C)))
    }, [r.chipAttrs]), React.useMemo(() => R, [R])
};

function _extends() {
    return _extends = Object.assign || function (r) {
        for (var R = 1; R < arguments.length; R++) {
            var y = arguments[R];
            for (var E in y) Object.prototype.hasOwnProperty.call(y, E) && (r[E] = y[E])
        }
        return r
    }, _extends.apply(this, arguments)
}

function _objectWithoutPropertiesLoose(r, R) {
    if (r == null) return {};
    var y = {}, E = Object.keys(r), C, x;
    for (x = 0; x < E.length; x++) C = E[x], !(R.indexOf(C) >= 0) && (y[C] = r[C]);
    return y
}

function useOnMount(r) {
    React.useEffect(r, [])
}

function useSound(r, R) {
    R === void 0 && (R = {});
    var y = R, E = y.volume, C = E === void 0 ? 1 : E, x = y.playbackRate, B = x === void 0 ? 1 : x, N = y.soundEnabled,
        L = N === void 0 ? !0 : N, O = y.interrupt, D = O === void 0 ? !1 : O, z = y.onload,
        F = _objectWithoutPropertiesLoose(y, ["id", "volume", "playbackRate", "soundEnabled", "interrupt", "onload"]),
        _e = React.useRef(null), Y = React.useRef(!1), H = React.useState(null), me = H[0], ce = H[1],
        ie = React.useState(null), Be = ie[0], ve = ie[1], Re = function () {
            typeof z == "function" && z.call(this), Y.current && ce(this.duration() * 1e3), ve(this)
        };
    useOnMount(function () {
        return __vitePreload(() => import("./howler-v1.3.1.0-.js").then(ke => ke.h), []).then(function (ke) {
            if (!Y.current) {
                var Fe;
                _e.current = (Fe = ke.Howl) !== null && Fe !== void 0 ? Fe : ke.default.Howl, Y.current = !0, new _e.current(_extends({
                    src: Array.isArray(r) ? r : [r],
                    volume: C,
                    rate: B,
                    onload: Re
                }, F))
            }
        }), function () {
            Y.current = !1
        }
    }), React.useEffect(function () {
        _e.current && Be && ve(new _e.current(_extends({src: Array.isArray(r) ? r : [r], volume: C, onload: Re}, F)))
    }, [JSON.stringify(r)]), React.useEffect(function () {
        Be && (Be.volume(C), Be.rate(B))
    }, [C, B]);
    var Ce = React.useCallback(function (ke) {
        typeof ke > "u" && (ke = {}), !(!Be || !L && !ke.forceSoundEnabled) && (D && Be.stop(), ke.playbackRate && Be.rate(ke.playbackRate), Be.play(ke.id))
    }, [Be, L, D]), Ne = React.useCallback(function (ke) {
        Be && Be.stop(ke)
    }, [Be]), we = React.useCallback(function (ke) {
        Be && Be.pause(ke)
    }, [Be]), Me = [Ce, {sound: Be, stop: Ne, pause: we, duration: me}];
    return Me
}

const src = ["en.webm"], sprite = {
        1: [109, 1210],
        2: [1609, 2500],
        3: [4519, 905],
        4: [5784, 1229],
        5: [7429, 690],
        6: [8419, 700],
        7: [9469, 430],
        8: [10294, 1545],
        9: [12179, 1560],
        10: [14059, 2185],
        11: [16509, 1525],
        12: [18314, 1525],
        13: [20139, 2160],
        14: [22644, 1509],
        15: [24524, 1500],
        16: [26403, 2156],
        17: [28909, 970],
        18: [30243, 991],
        19: [31634, 1040],
        20: [33034, 980],
        21: [34409, 1090],
        22: [35844, 1160],
        23: [37424, 1025],
        24: [38809, 985],
        25: [40099, 1050],
        26: [41509, 1080],
        27: [42889, 935],
        28: [44129, 1005],
        29: [45459, 1005],
        30: [46774, 975],
        31: [48059, 1080],
        32: [49427, 1137],
        33: [50939, 995],
        34: [52239, 959],
        35: [53578, 995],
        36: [54893, 1031],
        37: [56294, 520],
        38: [57239, 1890],
        39: [59464, 2929],
        40: [62793, 1131],
        41: [64354, 1255],
        42: [65999, 1430],
        43: [67769, 1465],
        44: [69609, 1540],
        45: [71504, 1615],
        46: [73429, 1655],
        47: [75474, 1555],
        48: [77359, 1450],
        49: [79094, 1385],
        50: [80839, 705],
        53: [81909, 775],
        54: [83019, 695],
        55: [84089, 430],
        56: [84914, 1e3],
        57: [86249, 1075],
        58: [87714, 1095],
        59: [89174, 1030],
        60: [90584, 1125],
        61: [92349, 1215],
        62: [93974, 1090],
        63: [95414, 1055],
        64: [96764, 1100],
        65: [98219, 1065],
        66: [99633, 1126],
        67: [101059, 1110],
        68: [102524, 1068],
        69: [103973, 949],
        70: [105294, 1015],
        71: [106683, 1026],
        72: [108063, 961],
        73: [109391, 963],
        74: [110728, 1160],
        75: [112322, 1036],
        76: [113738, 971],
        77: [115018, 1026],
        78: [116423, 1021],
        79: [117828, 1070],
        80: [119174, 1060],
        81: [120609, 995],
        dc1: [121977, 1092],
        dc2: [123459, 360],
        dc3: [124204, 375],
        dc4: [124904, 435],
        dc5: [125617, 457],
        dc6: [126398, 531],
        dc7: [127248, 636],
        dc8: [128234, 810],
        dc9: [129389, 815],
        dc10: [130568, 891],
        dc11: [131884, 910],
        dc12: [133204, 960],
        dc13: [134584, 765],
        dc14: [135779, 860],
        dc15: [137519, 790],
        dc16: [138734, 930],
        dc17: [140104, 760],
        dc18: [141164, 1065],
        dc19: [142599, 1105],
        dc20: [144059, 1125],
        dc21: [145589, 1170],
        dc22: [147179, 1200],
        dc23: [148799, 1060],
        rou1: [150274, 980],
        rou2: [151594, 515],
        rou3: [152509, 365],
        rou4: [153254, 375],
        rou5: [153944, 455],
        rou6: [154684, 435],
        rou7: [155454, 550],
        rou8: [156314, 635],
        rou9: [157329, 550],
        rou10: [158279, 410],
        rou11: [159094, 450],
        rou12: [159939, 390],
        rou13: [160714, 525],
        rou14: [161549, 535],
        rou15: [162389, 585],
        rou16: [163299, 665],
        rou17: [164284, 625],
        rou18: [165289, 710],
        rou19: [166374, 785],
        rou20: [167529, 585],
        rou21: [168509, 620],
        rou22: [169459, 480],
        rou23: [170269, 680],
        rou24: [171309, 690],
        rou25: [172399, 715],
        rou26: [173439, 710],
        rou27: [174544, 785],
        rou28: [175704, 895],
        rou29: [177029, 805],
        rou30: [178134, 675],
        rou31: [179249, 769],
        rou32: [180363, 400],
        rou33: [181128, 625],
        rou34: [182103, 630],
        rou35: [183123, 670],
        rou36: [184148, 650],
        rou37: [185170, 695],
        rou38: [186255, 820],
        addchips: [187407, 290],
        cards_dealing: [187812, 240],
        fiveSec: [188387, 135],
        tenSec: [188912, 65]
    }, enSoundJSON = {src, sprite}, enSound = window.__dynamic_base__ + "/assets/en.2356dd00.mp3",
    SoundContext = React.createContext({
        play: () => {
        }, holdSound: () => {
        }, stopSound: () => {
        }, sound: {}
    }), SoundProvider = r => {
        const {settings: R} = React.useContext(SettingsContext), y = React.useRef(!1),
            E = React.useRef(-1), [C, x] = useSound(enSound, {
                volume: 1, soundEnabled: R.systemSoundOn, sprite: {
                    place_bet: enSoundJSON.sprite[2],
                    stop_bet: enSoundJSON.sprite[4],
                    bet_chips: enSoundJSON.sprite.addchips,
                    five_seconds: enSoundJSON.sprite.fiveSec,
                    ten_seconds: enSoundJSON.sprite.tenSec,
                    welcome: enSoundJSON.sprite[1],
                    banker_win: enSoundJSON.sprite[5],
                    player_win: enSoundJSON.sprite[6],
                    tie: enSoundJSON.sprite[7],
                    card_flip: enSoundJSON.sprite.cards_dealing,
                    banker_0: enSoundJSON.sprite[26],
                    banker_1: enSoundJSON.sprite[17],
                    banker_2: enSoundJSON.sprite[18],
                    banker_3: enSoundJSON.sprite[19],
                    banker_4: enSoundJSON.sprite[20],
                    banker_5: enSoundJSON.sprite[21],
                    banker_6: enSoundJSON.sprite[22],
                    banker_7: enSoundJSON.sprite[23],
                    banker_8: enSoundJSON.sprite[24],
                    banker_9: enSoundJSON.sprite[25],
                    player_0: enSoundJSON.sprite[36],
                    player_1: enSoundJSON.sprite[27],
                    player_2: enSoundJSON.sprite[28],
                    player_3: enSoundJSON.sprite[29],
                    player_4: enSoundJSON.sprite[30],
                    player_5: enSoundJSON.sprite[31],
                    player_6: enSoundJSON.sprite[32],
                    player_7: enSoundJSON.sprite[33],
                    player_8: enSoundJSON.sprite[34],
                    player_9: enSoundJSON.sprite[35],
                    dragon_win: enSoundJSON.sprite[53],
                    tiger_win: enSoundJSON.sprite[54],
                    dragon_1: enSoundJSON.sprite[56],
                    dragon_2: enSoundJSON.sprite[57],
                    dragon_3: enSoundJSON.sprite[58],
                    dragon_4: enSoundJSON.sprite[59],
                    dragon_5: enSoundJSON.sprite[60],
                    dragon_6: enSoundJSON.sprite[61],
                    dragon_7: enSoundJSON.sprite[62],
                    dragon_8: enSoundJSON.sprite[63],
                    dragon_9: enSoundJSON.sprite[64],
                    dragon_10: enSoundJSON.sprite[65],
                    dragon_11: enSoundJSON.sprite[66],
                    dragon_12: enSoundJSON.sprite[67],
                    dragon_13: enSoundJSON.sprite[68],
                    tiger_1: enSoundJSON.sprite[69],
                    tiger_2: enSoundJSON.sprite[70],
                    tiger_3: enSoundJSON.sprite[71],
                    tiger_4: enSoundJSON.sprite[72],
                    tiger_5: enSoundJSON.sprite[73],
                    tiger_6: enSoundJSON.sprite[74],
                    tiger_7: enSoundJSON.sprite[75],
                    tiger_8: enSoundJSON.sprite[76],
                    tiger_9: enSoundJSON.sprite[77],
                    tiger_10: enSoundJSON.sprite[78],
                    tiger_11: enSoundJSON.sprite[79],
                    tiger_12: enSoundJSON.sprite[80],
                    tiger_13: enSoundJSON.sprite[81]
                }
            });
        React.useEffect(() => () => clearTimeout(E.current), []);
        const B = React.useCallback(O => {
            x.sound && !y.current ? C(O) : x.sound || console.warn("sound.sound not found")
        }, [x]), N = (O = 5) => {
            y.current = !0, setTimeout(() => {
                y.current = !1
            }, O * 1e3)
        }, L = () => {
            !y.current && x.stop()
        };
        return jsx(SoundContext.Provider, {value: {play: B, holdSound: N, stopSound: L, sound: x}, children: r.children})
    }, useGameCacheContext = () => {
        let [r, R] = React.useState("");
        return {efficientGcDomain: r, setFastestGcDomain: R}
    }, MasterGameCacheContext = React.createContext({
        efficientGcDomain: "", setFastestGcDomain: () => {
        }
    }), MasterGameCacheProvider = r => jsx(MasterGameCacheContext.Provider, {
        value: {...useGameCacheContext()},
        children: jsx(GameCacheProvider, {children: r.children})
    }), GameCacheProvider = r => {
        const {efficientGcDomain: R} = React.useContext(MasterGameCacheContext), {...y} = useGameCache(), {...E} = useBaseLoader({...useGameCacheUtils(R), ...y}), {...C} = useSplashScreenLoader({...useGameCacheUtils(R), ...y});
        return jsx(GameCacheContext.Provider, {value: {...y, ...useGameCacheUtils(R), ...C, ...E}, children: r.children})
    }, GameCacheContext = React.createContext({
        setCachedImages: () => {
        },
        cachedImages: {},
        setPokersImages: () => {
        },
        pokersImages: {},
        bannerImages: {},
        dealerImages: {},
        rerender: 0,
        localizeImagesWithGameType: {},
        getImageSrc: r => "",
        getDealerImageSrc: (r, R) => "",
        cachingDealerImages: async r => {
        },
        startLoadingBannerConfig: async r => {
        },
        setUpGameTableSplashScreen: async r => "",
        getGameTableSplashScreenImage: (r, R) => {
        },
        localizedImages: {},
        getGameName: r => ""
    }), useBaseLoader = r => {
        let {
            flattenObject: R,
            cachingLocalizedImages: y,
            hasOwnProperties: E,
            getFileFormat: C,
            imagesRawData: x,
            deepCopy: B,
            cachingBannerImages: N,
            appendLangToUrl: L,
            cachingRawImagesData: O,
            appendLangToImageUrls: D,
            getImagesWithRetry: z,
            cachingLocalizeImageUrl: F,
            isAbsoluteURL: _e,
            getAppendedUrls: Y,
            getDomainFromUrl: H,
            fetchImageWithRace: me,
            LOCALIZE_KEYS_FILTER: ce,
            PRE_FETCH_LOCALIZED_KEYS_FILTER: ie,
            LOCALIZED_RECORDS_FILTER: Be,
            DEVICE: ve,
            ORIENTATION: Re
        } = r;
        const {preloadConfig: Ce} = React.useContext(ServerConfigContext), {
            efficientGcDomain: Ne,
            setFastestGcDomain: we
        } = React.useContext(MasterGameCacheContext), {i18n: Me} = useTranslation();
        let ke = De => {
            let Xe = {};
            return new Promise(async He => {
                await Ve(De, "", Xe), He(Xe)
            })
        };

        async function Fe(De, Xe, He, Ge) {
            let Le = [...De];
            if (ce.includes(Xe)) return;
            ie.includes(Xe) && (De = D(De));
            const We = dt => {
                if (dt) {
                    He[Xe] = dt;
                    const et = dt, nt = new Image;
                    nt.src = dt, Ge[et] = nt, N(Ge)
                } else He[Xe] = De[0]
            };
            try {
                const dt = await me(De);
                We(dt)
            } catch (dt) {
                if (Logger$1.error(dt), ie.includes(Xe)) {
                    Le = D(Le, "en");
                    try {
                        const et = await me(Le);
                        We(et)
                    } catch (et) {
                        Logger$1.error(et)
                    }
                } else He[Xe] = De[0]
            }
        }

        async function $e(De, Xe, He, Ge) {
            try {
                const Le = await z([De]);
                if (Le) {
                    He[Xe] = Le.src;
                    const We = Le.src;
                    Ge[We] = Le, Logger$1.log("urlAsKey", We), N(Ge)
                } else He[Xe] = De
            } catch (Le) {
                Logger$1.error("Error processing image:", Le)
            }
        }

        const Ve = async (De, Xe = "", He) => {
            const Ge = ["featureGames", "splashScreen"], Le = ["login", "multiplay"];
            for (const We in De) if (De.hasOwnProperty(We)) {
                const dt = De[We], et = Xe ? Ge.includes(We) ? Xe : `${Xe}.${We}` : We;
                if (Le.includes(We)) {
                    const nt = B({[`${et}`]: {...dt}});
                    O({...nt});
                    continue
                }
                if (Object.prototype.hasOwnProperty.call(SupportedGamesTypesMapping, We) && F({[et]: {...dt}}), Be.includes(We) && We == "lobby") {
                    const nt = B({[`${et}`]: {...dt}});
                    O({...nt}), Object.values(dt.banners).map(tt => {
                        var lt;
                        return (lt = tt.advLink) != null && lt.length && (tt.advLink = L("langCode", tt.advLink)), tt
                    }), F({[`${et}.${Me.language}`]: {...dt}})
                }
                if (typeof dt == "object") Ve(dt, et, He); else if (typeof dt == "string" && /\.(png|jpg|svg)$/.test(dt)) if (Logger$1.log(We, dt), _e(dt)) $e(dt, We, De, He); else {
                    let nt = Y(dt, "", Ce);
                    Fe(nt, We, De, He)
                }
            }
        }, Je = async De => new Promise(async (Xe, He) => {
            let Ge = R(De);
            for (const Le in Ge) {
                const We = Ge[Le];
                if (typeof We == "string" && /\.(png|jpg|svg)$/.test(We) && (Logger$1.log(Le, We), !_e(We))) {
                    let et = [...Y(We, "", Ce)];
                    et = D(et);
                    const nt = await z(et);
                    if (nt) {
                        Xe(nt.src);
                        break
                    }
                }
            }
        });
        React.useEffect(() => {
            if (Global.bannerConfigJson && window.bannerConfigMap) {
                const De = window.bannerConfigMap, Xe = De.l, He = De.p;
                let Ge = Xe && Object.values(Xe)[0] || null, Le = He && Object.values(He)[0] || null,
                    We = window.initLangInGCutil;
                const dt = {
                    mobilePortrait: `mobile.portrait.login.${We}.imageUrl`,
                    mobileLandscape: `mobile.landscape.login.${We}.imageUrl`,
                    desktopPortrait: `desktop.portrait.login.${We}.imageUrl`,
                    desktopLandscape: `desktop.landscape.login.${We}.imageUrl`
                }, et = (nt, tt, lt) => {
                    tt != null && tt.length ? y({[nt]: tt}) : Logger$1.warn("No such adv landing img", nt)
                };
                isMobile$1 ? (et(dt.mobileLandscape, Ge), et(dt.mobilePortrait, Le)) : (et(dt.desktopLandscape, Ge), et(dt.desktopPortrait, Le))
            }
        }, []), React.useEffect(() => {
            Ne && Ze(Qe.current)
        }, [Ne]);
        let Qe = React.useRef();
        const Ze = async De => {
            let Xe = await ke(De);
            Logger$1.log("cachedImages", Xe), N(Xe)
        }, qe = async De => new Promise(async (Xe, He) => {
            let Ge = {...De}, Le = await Je(Ge);
            Le ? we(H(Le)) : (Logger$1.error("GC Unavailable"), we(""))
        });
        return {
            startLoadingBannerConfig: async De => {
                Qe.current = De, await qe(De)
            }
        }
    }, useGameCacheUtils = r => {
        const {orientation: R} = useDeviceOrientation(), y = React.useMemo(() => ["lobby"], []),
            E = React.useMemo(() => ["bkImageUrl"], []),
            C = React.useMemo(() => ["gameLogoImageUrl", "featureGamesImageUrl"], []),
            x = React.useMemo(() => R.includes("landscape") ? "landscape" : "portrait", [R]),
            B = isMobile$1 ? "mobile" : "desktop", {i18n: N} = useTranslation();

        function L(Ce) {
            return Object.keys(Ce).length === 0
        }

        function O(Ce) {
            if (typeof Ce == "object" && Ce !== null) {
                if (Array.isArray(Ce)) return Ce.map(Ne => O(Ne));
                {
                    const Ne = {};
                    for (const we in Ce) Ce.hasOwnProperty(we) && (Ne[we] = O(Ce[we]));
                    return Ne
                }
            }
            return Ce
        }

        const D = React.useCallback((Ce, Ne) => {
                if (Array.isArray(Ce)) return Ce.map(we => {
                    const Me = ie(we);
                    return Me || Logger$1.error("Incorrect image format (jpg|jpeg|png)"), we.replace(`.${Me}`, `_${Ne || N.language}.${Me}`)
                });
                if (typeof Ce == "string") {
                    const we = ie(Ce);
                    return we || Logger$1.error("Incorrect image format (jpg|jpeg|png)"), Ce.replace(`.${we}`, `_${Ne || N.language}.${we}`)
                }
                return null
            }, [N.language]), z = Ce => new Promise((Ne, we) => {
                const Me = new Image;
                Me.src = Ce, Me.addEventListener("load", () => {
                    Ne(Me)
                }), Me.addEventListener("error", ke => {
                    we("Load images failed!")
                })
            }), F = Ce => {
                let Ne = 0;
                return new Promise(async we => {
                    const Me = async () => {
                        try {
                            let ke = await z(Ce[Ne]);
                            we(ke)
                        } catch {
                            Ne++, Ne < Ce.length ? await Me() : (Logger$1.error("No image URLs are available."), we(null))
                        }
                    };
                    await Me()
                })
            }, _e = Ce => {
                try {
                    const Ne = new URL(Ce);
                    let Me = `${Ne.protocol}//${Ne.hostname}`;
                    return Ne.port ? Me + `:${Ne.port}` : Me
                } catch {
                    return ""
                }
            }, Y = React.useCallback(async Ce => {
                let Ne = !1, we = {};
                const Me = $e => {
                    if (Ne) for (const [Ve, Je] of Object.entries(we)) ;
                }, ke = $e => {
                    const Ve = new AbortController, {signal: Je} = Ve;
                    return we[$e] = Ve, Je
                };
                new Promise(() => {
                });
                const Fe = Ce.map($e => new Promise((Ve, Je) => {
                    if (r.length > 0 && _e($e) != r) {
                        Je();
                        return
                    }
                    let Qe = ke($e);
                    fetch($e, {signal: Qe}).then(Ze => {
                        Ne || (Ze.ok ? (Ne = !0, Me(), Ve(Ze.blob().then(qe => URL.createObjectURL(qe)))) : (Logger$1.error("Image request " + $e + " failed"), Logger$1.error(`status: ${JSON.stringify(Ze.status)}`), Je(Ze.status)))
                    }).catch(Ze => {
                        Logger$1.error(`Image request failed ${Ze.message}`), Je(Ze.message)
                    })
                }));
                return Promise.any(Fe).then($e => {
                    if (!$e) throw new Error("All requests failed");
                    return $e
                }).catch($e => {
                    if ($e.message === "net::ERR_NAME_NOT_RESOLVED") return Logger$1.error("DNS resolution failed:", $e), "default-image-url.jpg";
                    throw Logger$1.error(`Image request failed:${$e}`), $e
                })
            }, [r]), H = React.useCallback(Ce => /^(?:\w+:)?\/\/([^\s\.]+\.\S{2}|localhost[\:?\d]*)\S*$/.test(Ce), []),
            me = (Ce, Ne = "", we) => {
                let Me = !1, ke = !0;
                return Global.customizeUrl(Global.getAssetsDomainsInfos(Ce, we), Ne, Me, ke)
            }, ce = Ce => SupportedGamesTypesMapping[Ce] || "baccarat", ie = Ce => {
                const Ne = Ce.match(/\.([^.?#]+)(?:[?#]|$)/);
                return Ne ? Ne[1].toLowerCase() : null
            }, Be = (Ce, Ne = "") => {
                const we = {};
                for (const Me in Ce) if (Object.prototype.hasOwnProperty.call(Ce, Me)) {
                    const ke = Ce[Me], Fe = Ne ? `${Ne}.${Me}` : Me;
                    typeof ke == "object" && !Array.isArray(ke) && ke !== null ? Object.assign(we, Be(ke, Fe)) : we[Fe] = ke
                }
                return we
            }, ve = (Ce, Ne) => {
                try {
                    const we = Ne.split(".");
                    let Me = Ce;
                    for (const ke of we) {
                        if (!Object.prototype.hasOwnProperty.call(Me, ke)) return "";
                        Me = Me[ke]
                    }
                    return Me
                } catch {
                    return ""
                }
            }, Re = React.useCallback((Ce, Ne) => {
                let we = Ne;
                if (!H(Ne)) {
                    const Me = window.location.protocol, ke = window.location.hostname, Fe = window.location.port;
                    let $e = `${Me}//${ke}`;
                    Fe && Fe.length > 0 && ($e = `${Me}//${ke}:${Fe}`, we.startsWith("/") || (we = "/" + we), we = `${$e}${we}`)
                }
                return we.includes("{" + Ce + "}") && (we = we.replace("{" + Ce + "}", N.language)), we
            }, [N.language]);
        return {
            hasOwnProperties: ve,
            flattenObject: Be,
            appendLangToUrl: Re,
            deepCopy: O,
            appendLangToImageUrls: D,
            isObjectEmpty: L,
            downloadImage: z,
            getImagesWithRetry: F,
            getDomainFromUrl: _e,
            getFileFormat: ie,
            getGameName: ce,
            getAppendedUrls: me,
            fetchImageWithRace: Y,
            isAbsoluteURL: H,
            LOCALIZE_KEYS_FILTER: C,
            ORIENTATION: x,
            DEVICE: B,
            PRE_FETCH_LOCALIZED_KEYS_FILTER: E,
            LOCALIZED_RECORDS_FILTER: y
        }
    }, useGameCache = () => {
        const [r, R] = React.useState({}), [y, E] = React.useState({}), [C, x] = React.useState({}), [B, N] = React.useState({}), [L, O] = React.useState({}), [D, z] = React.useState({}), [F, _e] = React.useState({}), [Y, H] = React.useState(0),
            me = (we, Me) => B && B.hasOwnProperty(we) && B[we].dealer === Me ? B[we].img.src : null, ce = async we => {
                N(Me => ({...Me, ...we}))
            }, ie = async we => {
                x(Me => ({...Me, ...we})), setTimeout(() => {
                    H(Me => Me += 1)
                }, 100)
            }, Be = we => r && r.hasOwnProperty(we) ? r[we].src : "", ve = async we => {
                _e(Me => ({...Me, ...we})), setTimeout(() => {
                    H(Me => Me += 1)
                }, 100)
            }, Re = React.useCallback(we => Object.prototype.hasOwnProperty.call(F, we), [F, Y]);
        return {
            rerender: Y,
            cachedImages: r,
            pokersImages: y,
            bannerImages: C,
            dealerImages: B,
            localizedImages: F,
            localizeImagesWithGameType: L,
            imagesRawData: D,
            localizedImagesExisted: Re,
            cachingLocalizedImages: ve,
            cachingLocalizeImageUrl: async we => {
                O(Me => {
                    const ke = Object.keys(we)[0], Fe = {...Me[ke], ...we[ke]};
                    return {...Me, [ke]: Fe}
                })
            },
            cachingRawImagesData: async we => {
                z(Me => {
                    const ke = Object.keys(we)[0], Fe = {...Me[ke], ...we[ke]};
                    return {...Me, [ke]: Fe}
                })
            },
            setCachedImages: R,
            setPokersImages: E,
            getImageSrc: Be,
            getDealerImageSrc: me,
            cachingDealerImages: ce,
            cachingBannerImages: ie,
            triggerRerender: H
        }
    }, useSplashScreenLoader = r => {
        let {
            deepCopy: R,
            imagesRawData: y,
            DEVICE: E,
            ORIENTATION: C,
            localizedImages: x,
            hasOwnProperties: B,
            cachingLocalizedImages: N,
            localizeImagesWithGameType: L,
            localizedImagesExisted: O,
            fetchImageWithRace: D,
            isAbsoluteURL: z,
            getFileFormat: F,
            getAppendedUrls: _e,
            getGameName: Y
        } = r;
        const {preloadConfig: H, bannerConfig: me} = React.useContext(ServerConfigContext), {i18n: ce} = useTranslation(),
            ie = async (Fe, $e) => {
                try {
                    typeof $e == "string" && ($e = [$e]);
                    const Ve = await D($e);
                    Ve ? (Logger$1.log("urlAsKey", Ve), N({[Fe]: Ve})) : Logger$1.error("all url failed")
                } catch (Ve) {
                    Logger$1.error("Error processing image:", Ve)
                }
            }, Be = React.useCallback(async (Fe, $e) => new Promise(async (Ve, Je) => {
                try {
                    typeof $e == "string" && ($e = [$e]);
                    const Qe = await D($e);
                    Qe ? (Logger$1.log("urlAsKey", Qe), N({[Fe]: Qe}), Ve()) : (Logger$1.error("all url failed"), Je())
                } catch (Qe) {
                    Logger$1.error("Error processing image:", Qe), Je()
                }
            }), [D, N, x]), ve = React.useCallback(async (Fe, $e, Ve, Je = !1) => {
                if (!L.hasOwnProperty(Fe)) {
                    Logger$1.error(`Fetch ${Fe} ${$e} failed`);
                    return
                }
                if (!L[Fe].hasOwnProperty($e)) {
                    Logger$1.error(`Fetch ${Fe} ${$e} failed`);
                    return
                }
                const Qe = Ve || ce.language, Ze = L[Fe][$e], qe = F(Ze), ze = Ze.replace(`.${qe}`, `_${Qe}.${qe}`),
                    De = `${Fe}.${Qe}.${$e}`, Xe = O(De);
                z(ze) && !Xe && (Je ? await Be(De, ze) : await ie(De, ze));
                const He = _e(ze, "", H);
                !z(ze) && !Xe && (Je ? await Be(De, He) : await ie(De, He))
            }, [ce.language, L, x, E, C]), Re = React.useCallback(async (Fe, $e) => new Promise(async (Ve, Je) => {
                const Qe = $e || ce.language, Ze = "imageUrl";
                if (Object.prototype.hasOwnProperty.call(y, Fe)) if (Object.prototype.hasOwnProperty.call(y[Fe], Ze)) {
                    const ze = R(y[Fe]).imageUrl, De = F(ze), Xe = ze.replace(`.${De}`, `_${Qe}.${De}`);
                    let He = [Xe];
                    !z(Xe) && (He = _e(Xe, "", H));
                    try {
                        await Be(`${Fe}.${Qe}.${Ze}`, He), Ve()
                    } catch {
                        Je()
                    }
                } else Logger$1.warn("No such AdsLandingBg " + Fe), Ve(); else Logger$1.warn("No such AdsLandingBg " + Fe), Ve()
            }), [ce.language, E, C, y]), Ce = React.useCallback(async Fe => {
                const $e = `${E}.landscape.${Fe}.${ce.language}.imageUrl`, Ve = `${E}.portrait.${Fe}.${ce.language}.imageUrl`,
                    Je = `${E}.landscape.${Fe}`, Qe = `${E}.portrait.${Fe}`, Ze = async (ze, De) => {
                        try {
                            await Re(ze, De)
                        } catch {
                            console.error("No such advs background.", ze, De);
                            const He = `${E}.landscape.${Fe}.en.imageUrl`, Ge = `${E}.portrait.${Fe}.en.imageUrl`;
                            return O(He) || O(Ge) || await Re(ze, "en"), "done"
                        }
                    }, qe = async ze => {
                        await Promise.all([Ze(Je, ze), Ze(Qe, ze)])
                    };
                try {
                    return O($e) || O(Ve) || await qe(ce.language), "done"
                } catch {
                    const De = `${E}.landscape.${Fe}.en.imageUrl`, Xe = `${E}.portrait.${Fe}.en.imageUrl`;
                    if (O(De) || O(Xe)) return "done";
                    try {
                        return await qe("en"), "done"
                    } catch {
                        return "done"
                    }
                }
            }, [E, ce.language, O, Re]), Ne = (Fe, $e) => new Promise(async (Ve, Je) => {
                let Qe = "gameLogoImageUrl";
                const Ze = Y(Fe), qe = `${E}.landscape.${Ze}`, ze = `${E}.portrait.${Ze}`;
                try {
                    await Promise.all([ve(qe, Qe, $e, !0), ve(ze, Qe, $e, !0)])
                } catch {
                    try {
                        await Promise.all([ve(qe, Qe, "en", !0), ve(ze, Qe, "en", !0)])
                    } catch {
                        Logger$1.error("No such images", qe, Qe, "and", ze, Qe, "in", "en")
                    }
                }
                Ve("done")
            }), we = React.useCallback((Fe, $e, Ve, Je) => {
                const Qe = Y(Fe), Ze = `${E}.${C}.${Qe}`, qe = `${Ze}.${ce.language}.${$e}`;
                if (x.hasOwnProperty(qe)) return x[qe];
                {
                    const ze = `${Ze}.en.${$e}`;
                    return Object.prototype.hasOwnProperty.call(x, ze) ? x[ze] : (Logger$1.warn("No such splash screen image", ze), null)
                }
            }, [ce.language, x, E, C]), Me = React.useCallback((Fe, $e, Ve, Je) => {
                var Ze, qe, ze, De, Xe, He;
                const Qe = Y(Fe);
                if (me) {
                    const Ge = Object.keys(me)[0], Le = me[Ge];
                    return ((ze = (qe = (Ze = Le == null ? void 0 : Le[C]) == null ? void 0 : Ze.splashScreen) == null ? void 0 : qe[Qe]) == null ? void 0 : ze.gameBkImageUrl) === void 0 || ((He = (Xe = (De = Le == null ? void 0 : Le[C]) == null ? void 0 : De.splashScreen) == null ? void 0 : Xe[Qe]) == null ? void 0 : He.gameBkImageUrl) === null ? "" : Le[C].splashScreen[Qe].gameBkImageUrl
                }
            }, [ce.language, E, C, me]), ke = React.useCallback(() => {
                if (!Global.bannerConfigJson) return IMAGES.BG;
                const Fe = `${E}.${C}.splashScreen.login.imageUrl`;
                return B(Global.bannerConfigJson, Fe)
            }, [E, C]);
        return {
            preloadAdLandingBg: Ce,
            getLaunchScreenBg: ke,
            setUpGameTableSplashScreen: Ne,
            getGameTableSplashScreenImageBg: Me,
            getGameTableSplashScreenImage: we,
            fetchBannerConfigImagesWithLang: ve
        }
    }, useDynamicImagesLoader = r => {
        const {i18n: R} = useTranslation(), {
            ORIENTATION: y,
            DEVICE: E,
            getGameName: C,
            localizedImages: x,
            fetchBannerConfigImagesWithLang: B,
            rerender: N,
            localizedImagesExisted: L
        } = React.useContext(GameCacheContext), {preloadConfig: O} = React.useContext(ServerConfigContext), [D, z] = React.useState();
        let [F, _e] = React.useState(), [Y, H] = React.useState({fImg: "", fImgEn: ""});
        const me = React.useCallback(Ce => x.hasOwnProperty(Ce) ? x[Ce] : null, [x, N]),
            ce = React.useCallback(async (Ce, Ne) => new Promise(async (we, Me) => {
                let ke = r;
                try {
                    await B(Ce, ke, R.language, !0)
                } catch {
                    if (R.language !== "en") {
                        let $e = me(`${Ce}.en.${ke}`);
                        if ($e) return we($e);
                        try {
                            await B(Ce, ke, "en", !0)
                        } catch {
                            Me(`No such feature image: ${Ce}.en.${ke}`)
                        }
                    } else {
                        let $e = me(`${Ce}.en.${ke}`);
                        if ($e) return we($e);
                        Me(`No such feature image: ${Ce}.en.${ke}`)
                    }
                }
            }), [B, me, R.language, x, N]), ie = React.useCallback(Ce => new Promise(async (Ne, we) => {
                let Me = r;
                const ke = C(Ce), Fe = `${E}.${y}.${ke}`, $e = `${Fe}.${R.language}.${Me}`;
                let Ve = me($e);
                if (Ve) {
                    Ne(Ve);
                    return
                }
                try {
                    let Je = await ce(Fe, $e);
                    Ne(Je)
                } catch (Je) {
                    we(Je)
                }
            }), [R.language, x, E, y]);
        React.useEffect(() => {
            if (D) {
                const Ce = C(D), Ne = D, we = r, Me = `${E}.${y}.${Ce}`, ke = `${Me}.${R.language}.${we}`,
                    Fe = `${Me}.en.${we}`;
                _e(() => (H({fImg: "", fImgEn: ""}), ie(Ne), {imgKey: ke, imgKeyEn: Fe, game: Ne}))
            }
        }, [R.language, E, y, D]), React.useEffect(() => {
            if (F) {
                const Ce = me(F.imgKey);
                Ce && H(we => ({...we, fImg: Ce}));
                const Ne = me(F.imgKeyEn);
                Ne && H(we => ({...we, fImgEn: Ne}))
            }
        }, [x, F, R.language]);
        const Be = React.useCallback(Ce => {
            z(Ce)
        }, [R.language, E, y]), ve = React.useRef("");
        return {
            imgPath: React.useMemo(() => {
                if (Y) {
                    if (Y.fImg.length > 0) return Y.fImg;
                    if (Y.fImgEn.length > 0) return Y.fImgEn
                }
                return ve.current
            }, [R.language, O, E, y, Y, ve]), setUp: Be
        }
    }, useFeatureImagesLoader = (r, R) => {
        const {preloadConfig: y} = React.useContext(ServerConfigContext), {
            imgPath: E,
            setUp: C
        } = useDynamicImagesLoader("featureGamesImageUrl");
        return React.useEffect(() => {
            const x = (y == null ? void 0 : y.whiteLabel.sexyGames) || [],
                B = (y == null ? void 0 : y.whiteLabel.classicBaccaratGames) || [],
                N = y == null ? void 0 : y.whiteLabel.featureGames.find(L => L.tableName === r && CONFIG_GAME_TYPE_MAP[L.gameType] === R);
            if (N) {
                let L = N.gameType;
                x.includes(N.tableName) && (L = "Sexy"), B.includes(r) && (L = "ClassicBaccarat");
                const O = SupportedGamesTypesMapping[L];
                C(O)
            }
        }, []), {imgPath: E}
    }, useGameLoadingBgLoader = r => {
        const {getGameTableSplashScreenImageBg: R} = React.useContext(GameCacheContext);
        return R(r, "gameBkImageUrl")
    }, useLogoLoader = r => {
        const {imgPath: R, setUp: y} = useDynamicImagesLoader("gameLogoImageUrl");
        return React.useEffect(() => {
            y(r)
        }, [r]), {imgPath: R}
    }, useAdLandingPageLoader = r => {
        const {i18n: R} = useTranslation();
        React.useContext(ServerConfigContext);
        const {
            ORIENTATION: y,
            DEVICE: E,
            rerender: C,
            preloadAdLandingBg: x,
            hasOwnProperties: B,
            imagesRawData: N,
            localizedImagesExisted: L,
            localizeImagesWithGameType: O,
            getGameName: D,
            localizedImages: z,
            fetchBannerConfigImagesWithLang: F
        } = React.useContext(GameCacheContext);
        return React.useMemo(() => {
            const Y = `${E}.${y}.${r}.${R.language}.imageUrl`;
            if (L(Y)) return z[Y];
            {
                let me = `${E}.${y}.${r}.en.imageUrl`;
                if (L(me)) return z[me];
                Logger$1.error("No such ads landing bg here");
                const ie = `${E}.${y}.${r}`;
                Object.prototype.hasOwnProperty.call(N, ie) ? x(r) : Logger$1.error("No such ads landing bg here")
            }
            return ""
        }, [E, y, R.language, N, z])
    }, useBannersLoader = () => {
        const {i18n: r} = useTranslation(), {
                ORIENTATION: R,
                DEVICE: y,
                localizeImagesWithGameType: E,
                isAbsoluteURL: C,
                getAppendedUrls: x,
                appendLangToUrl: B,
                triggerRerender: N,
                fetchImageWithRace: L,
                cachingLocalizeImageUrl: O,
                deepCopy: D,
                getFileFormat: z,
                imagesRawData: F
            } = React.useContext(GameCacheContext), {preloadConfig: _e} = React.useContext(ServerConfigContext),
            Y = React.useCallback(async (ce, ie, Be, ve) => {
                const Re = z(ce), Ce = ce.replace(`.${Re}`, `_${ve || r.language}.${Re}`);
                let Ne = [Ce];
                !C(Ce) && (Ne = x(Ce, "", _e));
                try {
                    const we = await L(Ne);
                    we ? (Logger$1.log("urlAsKey", we), Be[ie] = we, setTimeout(() => {
                        N(Me => Me += 1)
                    }, 100)) : (Be[ie] = null, Logger$1.error("loadBanners failed", r.language))
                } catch {
                    Be[ie] = null, ve || (console.log("Failed main banner fetching fallback to en resources as default"), Y(ce, ie, Be, "en"))
                }
            }, [_e, r.language]), H = React.useCallback(() => {
                const ce = `${y}.${R}.lobby`;
                if (Object.prototype.hasOwnProperty.call(F, ce)) if (Object.prototype.hasOwnProperty.call(F[ce], "banners")) {
                    const ie = D(F[ce]);
                    setTimeout(() => {
                        O({[`${ce}.${r.language}`]: {...ie}})
                    }, 0);
                    const Be = ie.banners;
                    Object.values(Be).map(ve => {
                        var Re;
                        return Y(ve.bkImageUrl, "bkImageUrl", ve), (Re = ve.advLink) != null && Re.length && (ve.advLink = B("langCode", ve.advLink)), ve
                    })
                } else return Logger$1.warn("No such bannerInfos " + ce), []; else return Logger$1.warn("No such bannerInfos " + ce), []
            }, [r.language, E, y, R, F]);
        return {
            bannerInfos: React.useMemo(() => {
                const ce = `${y}.${R}.lobby.${r.language}`;
                if (E.hasOwnProperty(ce)) return E[ce];
                Logger$1.warn("Trying to ferch via bannerinfos: " + ce), H()
            }, [r.language, E, y, R])
        }
    }, useDealerLoader = r => {
        const {getDealerImageSrc: R, cachingDealerImages: y} = React.useContext(GameCacheContext);
        let {getStreamSnapShot: E} = useGameHttpService();
        return {
            setUpDealerImg: (x, B, N) => {
                const L = async () => {
                    Logger$1.log("DealerImg :get dealer image from network", x, B, N);
                    let D = await E(x);
                    D ? (y({
                        [B]: {
                            dealer: N,
                            img: D
                        }
                    }), r(D.src)) : (Logger$1.warn("DealerImg : snapshot not available from network !", x, B, N), r(void 0))
                };
                let O = R(B, N);
                O ? (Logger$1.log("DealerImg :snapshot available from cache", x, B, N), r(O)) : L()
            }
        }
    }, useGcURI = () => {
        const {getAppendedUrls: r} = React.useContext(GameCacheContext), {preloadConfig: R} = React.useContext(ServerConfigContext);
        return {createGcImageUrl: React.useCallback(E => r(E, "", R), [R])}
    }, Handicap$1 = "", Responsive$L = "", useDisplayCurrency = () => {
        var y;
        const {preloadConfig: r} = React.useContext(ServerConfigContext), [R] = React.useContext(UserInfoContext);
        return (y = r == null ? void 0 : r.whiteLabel.currencyBlacklist) != null && y.includes(R.player.currency) ? null : R.player.currency
    }, Handicap = r => {
        var ce;
        const [R, y] = React.useState(!1), [E, C] = React.useState(!1), {setHandicap: x} = React.useContext(SFSCoreContext), {gameTableInfo: B} = React.useContext(GameTableContext), [N] = React.useContext(UserInfoContext),
            L = useDisplayCurrency(), [O, D] = React.useState(N.handicapInfo), [z, F] = React.useState(O && ((ce = O.find(ie => ie.handicapId === N.handicapId)) == null ? void 0 : ce.handicapId) || 1), {orientation: _e} = useDeviceOrientation(),
            Y = useEasyClosePopup(() => y(!1));
        React.useEffect(() => {
            y(!1)
        }, [_e]), React.useEffect(() => {
            var ie, Be, ve, Re, Ce;
            if (!r.ignoreVIP && ((ie = B.tableInfo.additionalTableInfo) == null ? void 0 : ie.vipTableOwner) === N.player.userId) {
                const Ne = we => we == null ? void 0 : we.map(Me => ({
                    handicapId: Me.vipHandicapId,
                    betLimitLow: Me.betLimitLow,
                    betLimitHigh: Me.betLimitHigh
                }));
                JSON.stringify(Ne(N.vipHandicapInfo)) !== JSON.stringify(O) && D(Ne(N.vipHandicapInfo)), F(N.vipHandicapInfo[0].vipHandicapId), C(B.tableInfo.gameType === GameType.VIP && ((Be = B.tableInfo.additionalTableInfo) == null ? void 0 : Be.vipTableReserveStatus) === VipTableStatus.Reserved && ((ve = B.tableInfo.additionalTableInfo) == null ? void 0 : ve.vipTableOwner) === N.player.userId)
            } else JSON.stringify(N.handicapInfo) !== JSON.stringify(O) && D(N.handicapInfo), F(((Ce = (Re = N.handicapInfo) == null ? void 0 : Re.find(Ne => Ne.handicapId === N.handicapId)) == null ? void 0 : Ce.handicapId) || 1)
        }, [N, B.tableInfo.additionalTableInfo]);
        const H = React.useCallback(ie => {
                y(!1), x(ie)
            }, []),
            me = React.useCallback(ie => Helper.formatCurrency(L, `${Helper.formatAbbrMoney(ie.betLimitLow)} - ${Helper.formatAbbrMoney(ie.betLimitHigh)}`), [L]);
        return React.useEffect(() => {
            R && r.closeOther && r.closeOther()
        }, [R]), jsxs("div", {
            id: "handicap",
            "aria-checked": r.isBottom,
            children: [jsxs("button", {
                id: "display",
                onClick: () => y(!R),
                children: [jsx("div", {className: "svg_odds"}), jsx("div", {children: O && me(O.find(ie => ie.handicapId === z))}), !E && jsx("div", {
                    className: `svg_arrow_${r.isBottom ? "up" : "down"}_triangle`,
                    "aria-expanded": R
                })]
            }), !E && R && jsx("section", {
                id: "choices",
                ref: Y,
                children: O == null ? void 0 : O.sort((ie, Be) => ie.betLimitLow - Be.betLimitLow).map((ie, Be) => jsx("button", {
                    onClick: () => H(ie.handicapId),
                    children: me(ie)
                }, Be))
            })]
        })
    }, useTap = (r = 0) => {
        const [R, y] = React.useState(!1), E = React.useRef(null), C = React.useRef(null), x = React.useRef(!1),
            B = React.useCallback(L => {
                E.current && !E.current.contains(L.target) && (x.current && y(!1), x.current = !0)
            }, [R]);
        React.useEffect(() => (R && r > 0 && (C.current && clearTimeout(C.current), C.current = setTimeout(() => {
            y(!1)
        }, r)), () => {
            C.current && clearTimeout(C.current)
        }), [R]), React.useEffect(() => (R && (x.current = !1, document.addEventListener("mousedown", B), document.addEventListener("touchstart", B)), () => {
            document.removeEventListener("mousedown", B), document.removeEventListener("touchstart", B)
        }), [B, R]);
        const N = React.useCallback(() => {
            y(L => !L)
        }, []);
        return {isVisible: R, tappedRef: E, toggle: N}
    }, Tooltip$1 = "", Tooltip = r => {
        let {isHover: R = !0} = r;
        const {isVisible: y, tappedRef: E, toggle: C} = useTap(r.timeout);
        return jsx("div", {
            ref: E,
            onTouchStart: C,
            "data-on-tap": y,
            className: `tooltip${R || y ? " " + r.className : ""}`,
            children: r.children
        })
    }, MovablePopup$1 = "", Responsive$K = "", MovablePopup = r => {
        let {movable: R = !1, initPositon: y = {align: null, offset: [1, 1]}} = r;
        const E = React.useContext(ScalableContainerScaleContext), [C, x] = React.useState(y.align === "center" ? [1920, 1080] : [0, 0]),
            B = useEasyClosePopup(r.onClose);
        return React.useEffect(() => {
            var N, L;
            if (y && y.align === "center" && r.headerRef.current) {
                const O = ((N = r.headerRef.current) == null ? void 0 : N.getBoundingClientRect().width) / 2,
                    D = (1920 / 2 - O / E) * y.offset.x;
                ((L = r.headerRef.current) == null ? void 0 : L.getBoundingClientRect().height) / 2;
                let z = 1080 / 2 * y.offset.y;
                x([D, z])
            }
        }, []), React.useEffect(() => {
            var N, L;
            if (R) {
                const O = D => {
                    const z = D.pageX || D.touches[0].pageX, F = D.pageY || D.touches[0].pageY, _e = H => {
                        const me = ((H.pageX || H.touches[0].pageX) - z) / (E === -1 ? 1 : E),
                            ce = ((H.pageY || H.touches[0].pageY) - F) / (E === -1 ? 1 : E);
                        let ie = C[0] + me, Be = Math.max(0, C[1] + ce);
                        if (E != -1) {
                            let Ce = 1080 * E * .86, Ne = r.childRef.current.getBoundingClientRect().height, we = Ce - Ne;
                            x([Math.max(Math.min(0, ie), -1920 + 80), Math.min(Be, we / E)])
                        } else x([Math.max(Math.min(0, ie), -window.innerWidth + 100), Be])
                    }, Y = () => {
                        document.removeEventListener("touchmove", _e), document.removeEventListener("mousemove", _e), document.removeEventListener("touchend", Y), document.removeEventListener("mouseup", Y)
                    };
                    document.addEventListener("touchmove", _e), document.addEventListener("mousemove", _e), document.addEventListener("touchend", Y), document.addEventListener("mouseup", Y)
                };
                return (N = r.headerRef.current) == null || N.addEventListener("mousedown", O), (L = r.headerRef.current) == null || L.addEventListener("touchstart", O), () => {
                    var D, z;
                    (D = r.headerRef.current) == null || D.removeEventListener("mousedown", O), (z = r.headerRef.current) == null || z.removeEventListener("touchstart", O)
                }
            }
        }, [r.headerRef.current, r.childRef.current, C, R]), React.useEffect(() => {
            var N;
            if (E === -1 && r.headerRef.current && ((N = r.headerRef.current) == null ? void 0 : N.getBoundingClientRect().bottom) > window.innerHeight) {
                let L = 0;
                const O = window.innerHeight, D = B.current.parentElement.getBoundingClientRect(),
                    z = parseInt(window.getComputedStyle(B.current).top), F = r.headerRef.current.getBoundingClientRect();
                L = O - D.bottom - (z - D.height) - F.height - 1, x([C[0], L])
            }
        }, [C]), jsx("div", {
            className: `movable_popup align_${r.align}`,
            ref: B,
            style: {transform: `translate(${C[0]}px, ${C[1]}px)`},
            children: r.children
        })
    }, ToggleMovablePopup = r => {
        let {movable: R, headerRef: y, align: E, onClose: C, children: x} = r;
        return jsx(MovablePopup, {
            movable: R,
            childRef: r.childRef,
            headerRef: y,
            onClose: C,
            align: E,
            initPositon: r.initPositon,
            children: x
        })
    }, PayoutList$1 = "", payoutArr = {
        [GameType.Baccarat]: [{betType: BetType.B_Player, payout: "1"}, {
            betType: BetType.B_Banker,
            payout: "0.95"
        }, {betType: BetType.B_BankNoComm, payout: "1"}, {betType: BetType.B_Tie, payout: "8"}, {
            betType: "",
            payout: ""
        }, {betType: BetType.B_PPair, payout: "11"}, {betType: BetType.B_BPair, payout: "11"}, {
            betType: BetType.B_BRegular,
            payout: "4"
        }, {betType: BetType.B_PRegular, payout: "4"}, {
            betType: BetType.B_Lucky6,
            payout: "12-18"
        }, {betType: BetType.B_PDragon, payout: "1 - 30"}, {
            betType: BetType.B_BDragon,
            payout: "1 - 30"
        }, {betType: BetType.B_AnyPair, payout: "5"}, {
            betType: BetType.B_PerfectPair,
            payout: "25"
        }, {betType: BetType.B_Tiger, payout: "12 / 18"}, {
            betType: BetType.B_BigTiger,
            payout: "50"
        }, {betType: BetType.B_SmallTiger, payout: "22"}, {
            betType: BetType.B_TigerTie,
            payout: "40"
        }, {betType: BetType.B_TigerPair, payout: "4 - 100"}, {
            betType: BetType.B_BFabulous4,
            payout: "20"
        }, {betType: BetType.B_PFabulous4, payout: "35"}, {
            betType: BetType.B_BPreciousPair,
            payout: "9 - 30"
        }, {betType: BetType.B_PPreciousPair, payout: "9 - 30"}, {
            betType: BetType.B_BankerBlack,
            payout: "2"
        }, {betType: BetType.B_PlayerBlack, payout: "2"}, {
            betType: BetType.B_BankerRed,
            payout: "2"
        }, {betType: BetType.B_PlayerRed, payout: "2"}, {betType: BetType.B_Any6, payout: "4"}],
        [GameType.DT]: [{betType: BetType.DT_Dragon, payout: "1"}, {
            betType: BetType.DT_Tiger,
            payout: "1"
        }, {betType: BetType.DT_Tie, payout: "8"}],
        [GameType.Win3Card]: [{betType: BetType.WC_Dragon, payout: "0.95"}, {
            betType: BetType.WC_Phoenix,
            payout: "0.95"
        }, {
            betType: BetType.WC_Pair8Plus,
            payout: "2",
            description: "Contains Pair 9 - Pair A / Straight / Flush / Straight Flush / Three of a kind"
        }, {betType: BetType.WC_Straight, payout: "7"}, {
            betType: BetType.WC_Flush,
            payout: "8"
        }, {betType: BetType.WC_StraightFlush, payout: "100"}, {betType: BetType.WC_ThreeOfAKind, payout: "120"}],
        [AltGameType.ThreePictures]: [{betType: BetType.TP_Dragon, payout: "1"}, {
            betType: BetType.TP_Phoenix,
            payout: "1"
        }, {betType: BetType.TP_Tie, payout: "24"}, {betType: "", payout: ""}, {
            betType: BetType.TP_DragonThreePictures,
            payout: "70"
        }, {betType: BetType.TP_PhoenixThreePictures, payout: "70"}],
        [AltGameType.TeenPatti]: [{betType: BetType.TPa_PlayerA, payout: "0.95"}, {
            betType: BetType.TPa_PlayerB,
            payout: "0.95"
        }, {betType: BetType.TPa_Tie, payout: "50"}, {
            betType: BetType.TPa_PlayerAPairPlus,
            payout: "1 - 50"
        }, {betType: BetType.TPa_PlayerBPairPlus, payout: "1 - 50"}, {
            betType: BetType.TPa_SixCardsBonus,
            payout: "7 - 1000"
        }],
        [GameType.BullBull]: [{betType: BetType.BB_EO_Player1, payout: "0.95"}, {
            betType: BetType.BB_EO_Player2,
            payout: "0.95"
        }, {betType: BetType.BB_EO_Player3, payout: "0.95"}, {
            betType: BetType.BB_EO_Banker1,
            payout: "0.95"
        }, {betType: BetType.BB_EO_Banker2, payout: "0.95"}, {
            betType: BetType.BB_EO_Banker3,
            payout: "0.95"
        }, {betType: BetType.BB_DO_Player1, payout: "0.95 - 4.75"}, {
            betType: BetType.BB_DO_Player2,
            payout: "0.95 - 4.75"
        }, {betType: BetType.BB_DO_Player3, payout: "0.95 - 4.75"}, {
            betType: BetType.BB_DO_Banker1,
            payout: "0.95 - 4.75"
        }, {betType: BetType.BB_DO_Banker2, payout: "0.95 - 4.75"}, {
            betType: BetType.BB_DO_Banker3,
            payout: "0.95 - 4.75"
        }, {betType: BetType.BB_SP_Player1, payout: "0.95 - 10.45"}, {
            betType: BetType.BB_SP_Player2,
            payout: "0.95 - 10.45"
        }, {betType: BetType.BB_SP_Player3, payout: "0.95 - 10.45"}, {
            betType: BetType.BB_SP_Banker1,
            payout: "0.95 - 10.45"
        }, {betType: BetType.BB_SP_Banker2, payout: "0.95 - 10.45"}, {
            betType: BetType.BB_SP_Banker3,
            payout: "0.95 - 10.45"
        }],
        [GameType.AndarBahar]: [{betType: BetType.AB_Andar, payout: "0.9"}, {
            betType: BetType.AB_Bahar,
            payout: "1"
        }, {betType: BetType.AB_AndarFirst, payout: "15"}, {
            betType: BetType.AB_BaharFirst,
            payout: "15.5"
        }, {betType: BetType.AB_Cards1To5, payout: "2"}, {
            betType: BetType.AB_Cards6To10,
            payout: "3"
        }, {betType: BetType.AB_Cards11To15, payout: "4"}, {
            betType: BetType.AB_Cards16To25,
            payout: "3"
        }, {betType: BetType.AB_Cards26To30, payout: "13"}, {
            betType: BetType.AB_Cards31To35,
            payout: "22"
        }, {betType: BetType.AB_Cards36To40, payout: "45"}, {betType: BetType.AB_Cards41Above, payout: "110"}],
        [GameType.Roulette]: [{betType: BetType.R_Direct0, payout: "35"}, {
            betType: BetType.R_Separate0And1,
            payout: "17"
        }, {betType: BetType.R_Street1To3, payout: "11"}, {
            betType: BetType.R_Three012,
            payout: "11"
        }, {betType: BetType.R_Corner1And5, payout: "8"}, {
            betType: BetType.R_Four0123,
            payout: "8"
        }, {betType: BetType.R_Line1To6, payout: "5"}, {
            betType: BetType.R_Column1,
            payout: "2"
        }, {betType: BetType.R_Dozen1To12, payout: "2"}, {betType: BetType.R_Red, payout: "1"}, {
            betType: BetType.R_Even,
            payout: "1"
        }, {betType: BetType.R_Small, payout: "1"}],
        [GameType.UTH]: [{betType: BetType.UTH_Player1Ante, payout: "1"}, {
            betType: BetType.UTH_Player1Blind,
            payout: "1 - 300"
        }, {betType: BetType.UTH_Player1Trips, payout: "3 - 50"}],
        [GameType.Pokdeng]: [{betType: BetType.PD_Player1, payout: "1 - 2"}, {betType: BetType.PD_P1Pair, payout: "11"}],
        [AltGameType.TwoSidesPokdeng]: [{betType: BetType.TPD_Player1, payout: "0.95 - 1.9"}, {
            betType: BetType.TPD_Banker1,
            payout: "0.95 - 1.9"
        }, {betType: BetType.TPD_P1Pair, payout: "11"}, {betType: BetType.TPD_BPair, payout: "11"}],
        [GameType.Sicbo]: [{betType: BetType.S_Small, payout: "1"}, {
            betType: BetType.S_Odd,
            payout: "1"
        }, {betType: BetType.S_Triple, payout: "24"}, {
            betType: BetType.S_Triple1,
            payout: "150"
        }, {betType: BetType.S_Single1, payout: "1"}, {
            betType: BetType.S_Single2,
            payout: "2"
        }, {betType: BetType.S_Single3, payout: "3"}, {betType: BetType.S_Pair1, payout: "8"}, {
            betType: BetType.S_Format12,
            payout: "5"
        }, {betType: BetType.S_Sum4, payout: "50"}, {betType: BetType.S_Sum5, payout: "18"}, {
            betType: BetType.S_Sum6,
            payout: "14"
        }, {betType: BetType.S_Sum7, payout: "12"}, {betType: BetType.S_Sum8, payout: "8"}, {
            betType: BetType.S_Sum9,
            payout: "6"
        }],
        [AltGameType.HiLo]: [{betType: BetType.HL_Hi, payout: "1"}, {
            betType: BetType.HL_Lo,
            payout: "0.95"
        }, {betType: BetType.HL_HiLo, payout: "5"}, {
            betType: BetType.HL_Single1,
            payout: "1 - 3"
        }, {betType: BetType.HL_Format12, payout: "5"}, {
            betType: BetType.HL_Format123,
            payout: "1 / 5"
        }, {betType: BetType.HL_Lo1, payout: "1.8"}, {betType: BetType.HL_Lo2, payout: "2"}, {
            betType: BetType.HL_Lo3,
            payout: "3"
        }, {betType: BetType.HL_Lo4, payout: "4"}, {betType: BetType.HL_Lo5, payout: "5"}, {
            betType: BetType.HL_Hi3,
            payout: "4"
        }, {betType: BetType.HL_Hi5, payout: "3"}, {betType: BetType.HL_Hi6, payout: "2"}],
        [AltGameType.SicTan]: [{betType: BetType.ST_Odd, payout: "0.95"}, {
            betType: BetType.ST_Fan1,
            payout: "2.85"
        }, {betType: BetType.ST_Nim12, payout: "1.95"}, {
            betType: BetType.ST_Kwok12,
            payout: "0.95"
        }, {betType: BetType.ST_Kwok41, payout: "0.9"}, {
            betType: BetType.ST_1Nga23,
            payout: "0.45"
        }, {betType: BetType.ST_Ssh123, payout: "0.3"}],
        [GameType.CasinoWar]: [{betType: BetType.CW_Player1Ante, payout: "1"}, {
            betType: BetType.CW_Player1Tie1,
            payout: "10"
        }, {betType: BetType.CW_Player1Tie2, payout: "10"}],
        [GameType.Blackjack]: [{betType: BetType.BJ_Ante, payout: "1 - 1.5"}, {
            betType: BetType.BJ_Pair,
            payout: "8 - 25"
        }, {betType: BetType.BJ_Initial213, payout: "5 - 100"}, {
            betType: BetType.BJ_Hot3,
            payout: "1 - 100"
        }, {betType: BetType.BJ_BustIt, payout: "1 - 250"}, {betType: BetType.BJ_LuckyLadies, payout: "4 - 1000"}],
        [GameType.FPC]: [{betType: BetType.FPC_Fish, payout: "1 - 3"}, {
            betType: BetType.FPC_CalabashPrawn,
            payout: "5 - 7"
        }, {betType: BetType.FPC_SingleRed, payout: "1"}, {
            betType: BetType.FPC_DoubleRed,
            payout: "3"
        }, {betType: BetType.FPC_TripleRed, payout: "20"}, {betType: BetType.FPC_AnyTriple, payout: "7"}],
        [GameType.XocDia]: [{betType: BetType.XD_Small, payout: "0.96"}, {
            betType: BetType.XD_Big,
            payout: "0.96"
        }, {betType: BetType.XD_Odd, payout: "0.96"}, {betType: BetType.XD_Even, payout: "0.96"}, {
            betType: BetType.XD_0,
            payout: "12"
        }, {betType: BetType.XD_1, payout: "2.6"}, {betType: BetType.XD_3, payout: "2.6"}, {
            betType: BetType.XD_4,
            payout: "12"
        }]
    }, Responsive$J = "", PayoutList = r => {
        let {movable: R = !0} = r;
        const {t: y} = useTranslation(), [E] = React.useContext(UserInfoContext), {gameTableInfo: C} = React.useContext(GameTableContext), {settings: x} = React.useContext(SettingsContext),
            B = useDisplayCurrency(), N = React.useRef(null),
            L = React.useRef(null), [O, D] = React.useState({betLimitLow: -1, betLimitHigh: -1});
        let z = r.gameType;
        [GameType.See, GameType.InsuredBaccarat, GameType.VIP, GameType.Quick].includes(z) && (z = GameType.Baccarat);
        const [F, _e] = React.useState(E.betLimitObject.find(Be => Be.gameType.includes(z))), [Y, H] = React.useState(),
            me = Helper.useOdds();
        React.useEffect(() => {
            var Re, Ce;
            const Be = () => {
                let Ne = E.betLimitObject.find(we => we.gameType.includes(z));
                Ne && JSON.stringify(Ne) !== JSON.stringify(payoutArr[z]) && D({
                    betLimitLow: Ne.betLimitLow,
                    betLimitHigh: Ne.betLimitHigh
                })
            };
            let ve = C.tableInfo.additionalTableInfo;
            if (ve) switch (ve.vipTableOwner) {
                case E.player.userId:
                    D({
                        betLimitLow: (Re = C.tableInfo.limits) == null ? void 0 : Re.betLimitLow,
                        betLimitHigh: (Ce = C.tableInfo.limits) == null ? void 0 : Ce.betLimitHigh
                    });
                    let Ne = C.tableInfo.limits;
                    Ne && H(Ne.limitTypes.map((we, Me) => ({
                        betType: we,
                        betLimitHigh: Ne.limitHighs[Me],
                        betLimitLow: Ne.limitLows[Me]
                    })));
                    break;
                default:
                    Be();
                    break
            } else Be()
        }, [C.tableInfo.additionalTableInfo, C.tableInfo.limits, E, r.gameType]);
        const ce = React.useCallback(Be => Be ? `${Be.betLimitLow} - ${Be.betLimitHigh}` : "", []),
            ie = React.useCallback(() => {
                const Be = Re => x.baccaratBetTypes[BACCARAT_BET_TYPE_MAP.findIndex(Ce => Ce === Re.betType)],
                    ve = Re => [BetType.B_Banker, BetType.B_Tie, BetType.B_Player, BetType.B_BankNoComm, ""].includes(Re.betType);
                switch (r.gameType) {
                    case GameType.Baccarat:
                    case GameType.VIP:
                    case GameType.Quick:
                    case GameType.InsuredBaccarat:
                    case GameType.VIP:
                        return payoutArr[r.altGameType || z].filter(Ce => ve(Ce) || Be(Ce));
                    case GameType.See:
                        return payoutArr[r.altGameType || z].filter(Ce => ve(Ce) && Ce.betType !== BetType.B_BankNoComm || Be(Ce));
                    case GameType.BullBull:
                        let Re = [""];
                        switch (x.bullbullPlayType) {
                            case BB_PLAY_TYPE.EQUAL:
                                Re.push(BetType.BB_EO_Banker1, BetType.BB_EO_Player1, BetType.BB_EO_Banker2, BetType.BB_EO_Player2, BetType.BB_EO_Banker3, BetType.BB_EO_Player3);
                                break;
                            case BB_PLAY_TYPE.DOUBLE:
                                Re.push(BetType.BB_DO_Banker1, BetType.BB_DO_Player1, BetType.BB_DO_Banker2, BetType.BB_DO_Player2, BetType.BB_DO_Banker3, BetType.BB_DO_Player3);
                                break;
                            case BB_PLAY_TYPE.SUPER:
                                Re.push(BetType.BB_SP_Banker1, BetType.BB_SP_Player1, BetType.BB_SP_Banker2, BetType.BB_SP_Player2, BetType.BB_SP_Banker3, BetType.BB_SP_Player3);
                                break
                        }
                        return payoutArr[z].filter(Ce => Re.includes(Ce.betType));
                    default:
                        return payoutArr[r.altGameType || z]
                }
            }, [r.gameType, r.altGameType, x.bullbullPlayType, x.baccaratBetTypes]);
        return jsx(ToggleMovablePopup, {
            movable: R,
            headerRef: N,
            childRef: L,
            onClose: () => {
            },
            align: "left",
            children: jsxs("article", {
                id: "payout_list",
                ref: L,
                children: [jsx("div", {
                    className: "title",
                    children: jsx("div", {children: `↓↑ ${Helper.formatCurrency(B, `${O.betLimitLow} - ${O.betLimitHigh}`)}`})
                }), jsx("table", {
                    children: jsxs("tbody", {
                        children: [jsxs("tr", {children: [jsx("th", {children: y("payout.bet")}), jsx("th", {children: y("payout.bet_limit")}), jsx("th", {children: y("payout.odds")})]}), jsx("tr", {children: jsx("td", {colSpan: 3})}), ie().map((Be, ve) => jsxs("tr", {
                            children: [jsx("th", {children: Be.betType ? y(`payout.bet_type.${Be.betType}`) : ""}), jsx("td", {
                                children: ce((Y || F.betLimitDetailObject).find(Re => {
                                    switch (Be.betType) {
                                        case BetType.B_BankNoComm:
                                            return Re.betType === BetType.B_Banker;
                                        case BetType.TPD_Player1:
                                            return Re.betType === BetType.PD_Player1;
                                        case BetType.S_Single2:
                                        case BetType.S_Single3:
                                            return Re.betType === BetType.S_Single1;
                                        default:
                                            return Re.betType === Be.betType
                                    }
                                }))
                            }), jsx("td", {children: me(Be.payout)})]
                        }, ve))]
                    })
                })]
            })
        })
    }, BetRecord$1 = "", Poker$3 = "",
    Poker$2 = r => jsx("div", {className: `poker svg_poker_${r.value > 0 ? r.value : "back"}`}),
    BaccaratGameResults$1 = "", BaccaratGameResults = r => {
        const R = React.useCallback(() => {
            let y = r.results;
            return r.side === "player" && y.length < 3 && y.push("-3"), y
        }, [r.results]);
        return jsx("div", {
            className: `card_results ${r.side}`,
            children: R().map((y, E) => jsx("div", {
                className: `template_${E === 2 ? "horizontal" : "vertical"}_card`,
                style: {order: r.side === "player" ? E === 2 ? 1 : 2 + E : E + 1},
                "aria-hidden": !r.showBackface && Number(y) < 0,
                children: y !== "-3" && jsx(Poker$2, {value: parseInt(y)})
            }, E))
        })
    }, DragonTigerGameResults$1 = "", DragonTigerGameResults = r => {
        const R = r.result ? parseInt(r.result) : 0;
        return jsx("div", {
            className: `card_results dt_${r.side}`,
            children: jsx("div", {
                className: "template_vertical_card",
                "aria-hidden": !r.showBackface && R <= 0,
                children: jsx(Poker$2, {value: R})
            })
        })
    }, Win3CardsGameResults$1 = "", Responsive$I = "", Win3CardsGameResults = r => jsx("div", {
        className: `card_results tc_${r.side}`,
        children: r.results.map((R, y) => jsx("div", {
            className: "template_vertical_card",
            "aria-hidden": R === "-2",
            children: jsx(Poker$2, {value: parseInt(R)})
        }, y))
    }), ThreePicturesGameResults$1 = "", ThreePicturesGameResults = r => jsx("div", {
        className: `card_results tc_${r.side}`,
        children: r.results.map((R, y) => jsx("div", {
            className: "template_vertical_card",
            "aria-hidden": R === "-2",
            children: jsx(Poker$2, {value: parseInt(R)})
        }, y))
    }), TeenPattiGameResults$1 = "", TeenPattiGameResults = r => jsx("div", {
        className: `card_results tc_${r.side}`,
        children: r.results.map((R, y) => jsx("div", {
            className: "template_vertical_card",
            "aria-hidden": R === "-2",
            children: jsx(Poker$2, {value: parseInt(R)})
        }, y))
    }), TeenPattiSixCardResults = r => jsx("div", {
        className: "card_results five_cards",
        children: r.results.map((R, y) => jsx("div", {
            className: "template_vertical_card",
            "aria-hidden": R === "-2",
            children: jsx(Poker$2, {value: parseInt(R)})
        }, y))
    }), BullBullGameResults$1 = "", BullBullGameResults = r => jsx("div", {
        className: `card_results bb${r.flat ? "_flat" : ""}`,
        children: r.results.map((R, y) => jsx("div", {
            className: "template_vertical_card",
            "aria-hidden": R === "-2",
            style: {gridArea: `card_${y}`},
            children: jsx(Poker$2, {value: parseInt(R)})
        }, y))
    }), Responsive$H = "", PokdengGameResults$1 = "", PokdengGameResults = r => jsx("div", {
        className: "card_results pd",
        children: r.results.map((R, y) => jsx("div", {
            className: "template_vertical_card",
            "aria-hidden": R === "-2",
            children: jsx(Poker$2, {value: parseInt(R)})
        }, y))
    }), TABLE_ORDER = [{rBetValue: 0, color: "#005E4E"}, {rBetValue: 32, color: "#B41B1A"}, {
        rBetValue: 15,
        color: "#1D1D1D"
    }, {rBetValue: 19, color: "#B41B1A"}, {rBetValue: 4, color: "#1D1D1D"}, {
        rBetValue: 21,
        color: "#B41B1A"
    }, {rBetValue: 2, color: "#1D1D1D"}, {rBetValue: 25, color: "#B41B1A"}, {
        rBetValue: 17,
        color: "#1D1D1D"
    }, {rBetValue: 34, color: "#B41B1A"}, {rBetValue: 6, color: "#1D1D1D"}, {
        rBetValue: 27,
        color: "#B41B1A"
    }, {rBetValue: 13, color: "#1D1D1D"}, {rBetValue: 36, color: "#B41B1A"}, {
        rBetValue: 11,
        color: "#1D1D1D"
    }, {rBetValue: 30, color: "#B41B1A"}, {rBetValue: 8, color: "#1D1D1D"}, {
        rBetValue: 23,
        color: "#B41B1A"
    }, {rBetValue: 10, color: "#1D1D1D"}, {rBetValue: 5, color: "#B41B1A"}, {
        rBetValue: 24,
        color: "#1D1D1D"
    }, {rBetValue: 16, color: "#B41B1A"}, {rBetValue: 33, color: "#1D1D1D"}, {
        rBetValue: 1,
        color: "#B41B1A"
    }, {rBetValue: 20, color: "#1D1D1D"}, {rBetValue: 14, color: "#B41B1A"}, {
        rBetValue: 31,
        color: "#1D1D1D"
    }, {rBetValue: 9, color: "#B41B1A"}, {rBetValue: 22, color: "#1D1D1D"}, {
        rBetValue: 18,
        color: "#B41B1A"
    }, {rBetValue: 29, color: "#1D1D1D"}, {rBetValue: 7, color: "#B41B1A"}, {
        rBetValue: 28,
        color: "#1D1D1D"
    }, {rBetValue: 12, color: "#B41B1A"}, {rBetValue: 35, color: "#1D1D1D"}, {
        rBetValue: 3,
        color: "#B41B1A"
    }, {rBetValue: 26, color: "#1D1D1D"}], RoulettedFocusedResult = r => {
        const [R, y] = React.useState(!1), [E, C] = React.useState(-1);
        return React.useEffect(() => {
            y(!!r.winResult)
        }, [r.winResult]), React.useEffect(() => {
            r.winResult != "" && r.winResult && C(Number(r.winResult))
        }, [r.winResult]), jsx(Fragment, {
            children: E != -1 && jsxs("svg", {
                className: R ? "roll_in" : "",
                width: "29.737156",
                height: "21.313128",
                viewBox: "0 0 29.737156 21.313128",
                version: "1.1",
                id: "svg1",
                xmlnsXlink: "http://www.w3.org/1999/xlink",
                xmlns: "http://www.w3.org/2000/svg",
                fontSize: "4px",
                "text-align": "center",
                textAnchor: "middle",
                strokeLinecap: "round",
                strokeLinejoin: "round",
                strokeWidth: "0.5",
                children: [jsxs("defs", {
                    children: [jsxs("linearGradient", {
                        id: "linearGradient42",
                        children: [jsx("stop", {
                            style: {stopColor: "#ffffff"},
                            offset: "0"
                        }), jsx("stop", {style: {stopColor: "#b3b3b3"}, offset: "1"})]
                    }), jsx("radialGradient", {
                        xlinkHref: "#linearGradient42",
                        id: "radialGradient43",
                        cx: "-55.095291",
                        cy: "18.915234",
                        fx: "-55.095291",
                        fy: "18.915234",
                        r: "2.2671015",
                        gradientTransform: "matrix(-0.33126952,1.1168917,-1.3130075,-0.38943733,-48.563007,87.354123)",
                        gradientUnits: "userSpaceOnUse"
                    }), " ", jsxs("filter", {
                        id: "filter19",
                        x: "-0.074985615",
                        y: "-0.052931017",
                        width: "1.1279166",
                        height: "1.216135",
                        children: [jsx("feFlood", {
                            result: "flood",
                            in: "SourceGraphic",
                            floodOpacity: "0.498039",
                            floodColor: "rgb(0,0,0)"
                        }), jsx("feGaussianBlur", {
                            result: "blur",
                            in: "SourceGraphic",
                            stdDeviation: "0.100000"
                        }), jsx("feOffset", {
                            result: "offset",
                            in: "blur",
                            dx: "-0.100000",
                            dy: "0.500000"
                        }), jsx("feComposite", {
                            result: "comp1",
                            operator: "in",
                            in: "flood",
                            in2: "offset"
                        }), jsx("feComposite", {result: "comp2", operator: "over", in: "SourceGraphic", in2: "comp1"})]
                    })]
                }), jsxs("g", {
                    transform: "rotate(12,8.5049893,382.83346)",
                    children: [jsx("path", {
                        style: {
                            fill: TABLE_ORDER.find((x, B) => TABLE_ORDER[(B + TABLE_ORDER.length - 1) % TABLE_ORDER.length].rBetValue === E).color,
                            stroke: "#ffffff"
                        },
                        d: "m -57.953391,15.790853 c 0,0 2.354908,-0.190266 3.534921,-0.190266 1.180013,0 3.534921,0.190266 3.534921,0.190266 m -6.194955,9.999497 -0.874887,-9.999497 -0.822866,-9.405905 c 0,0 2.903807,-0.190266 4.357787,-0.190266 1.45398,0 4.357787,0.190266 4.357787,0.190266 l -0.822866,9.405905 -0.874887,9.999497 c 0,0 -1.771091,-0.190266 -2.660034,-0.190266 -0.888943,0 -2.660034,0.190266 -2.660034,0.190266"
                    }), jsx("text", {
                        x: "-39.989758",
                        y: "12.074219",
                        children: jsx("tspan", {
                            x: "-54.408703",
                            y: "12.074219",
                            style: {fill: "#ffffff"},
                            children: TABLE_ORDER.find((x, B) => TABLE_ORDER[(B + TABLE_ORDER.length - 1) % TABLE_ORDER.length].rBetValue === E).rBetValue
                        })
                    })]
                }), jsxs("g", {
                    cx: "-54.41847",
                    cy: "15.992516",
                    transform: "translate(69.287048,-5.9446821)",
                    children: [jsx("path", {
                        style: {
                            fill: TABLE_ORDER.find(x => x.rBetValue === E).color,
                            stroke: "#ffffff"
                        },
                        d: "m -57.953391,15.790853 c 0,0 2.354908,-0.190266 3.534921,-0.190266 1.180013,0 3.534921,0.190266 3.534921,0.190266 m -6.194955,9.999497 -0.874887,-9.999497 -0.822866,-9.405905 c 0,0 2.903807,-0.190266 4.357787,-0.190266 1.45398,0 4.357787,0.190266 4.357787,0.190266 l -0.822866,9.405905 -0.874887,9.999497 c 0,0 -1.771091,-0.190266 -2.660034,-0.190266 -0.888943,0 -2.660034,0.190266 -2.660034,0.190266"
                    }), jsx("text", {
                        x: "-39.989758",
                        y: "12.074219",
                        children: jsx("tspan", {x: "-54.408703", y: "12.074219", style: {fill: "#fff61c"}, children: E})
                    }), jsx("ellipse", {
                        id: "roulette_ball",
                        style: {fill: "url(#radialGradient43)", filter: "url(#filter19)"},
                        cx: "-54.418472",
                        cy: "19.267101",
                        rx: "2.2671015",
                        ry: "2.2671018"
                    })]
                }), jsxs("g", {
                    transform: "rotate(-12,-48.05488,-276.38877)",
                    children: [jsx("path", {
                        style: {
                            fill: TABLE_ORDER.find((x, B) => TABLE_ORDER[(B + 1) % TABLE_ORDER.length].rBetValue === E).color,
                            stroke: "#ffffff"
                        },
                        d: "m -57.953391,15.790853 c 0,0 2.354908,-0.190266 3.534921,-0.190266 1.180013,0 3.534921,0.190266 3.534921,0.190266 m -6.194955,9.999497 -0.874887,-9.999497 -0.822866,-9.405905 c 0,0 2.903807,-0.190266 4.357787,-0.190266 1.45398,0 4.357787,0.190266 4.357787,0.190266 l -0.822866,9.405905 -0.874887,9.999497 c 0,0 -1.771091,-0.190266 -2.660034,-0.190266 -0.888943,0 -2.660034,0.190266 -2.660034,0.190266"
                    }), jsx("text", {
                        x: "-39.989758",
                        y: "12.074219",
                        children: jsx("tspan", {
                            x: "-54.408703",
                            y: "12.074219",
                            style: {fill: "#FFF"},
                            children: TABLE_ORDER.find((x, B) => TABLE_ORDER[(B + 1) % TABLE_ORDER.length].rBetValue === E).rBetValue
                        })
                    })]
                })]
            })
        })
    }, AndarBaharGameResults$1 = "", AndarBaharGameResults = r => jsx("div", {
        className: `andar_bahar_card_results ${r.side}${r.isWinner ? " win" : ""}`,
        children: r.results.map((R, y) => jsx("div", {
            className: "template_vertical_card",
            "aria-hidden": R === "-2",
            style: {zIndex: y},
            children: jsx(Poker$2, {value: parseInt(R)})
        }, y))
    }), GamePlayback$1 = "", Responsive$G = "", GamePlayback = r => {
        const [R, y] = React.useState(!1), [E, C] = React.useState(!1), [x, B] = React.useState(!1), [N, L] = React.useState(0), [O, D] = React.useState(0);
        React.useState(0);
        const z = React.useRef(null), F = React.useRef(null), {t: _e} = useTranslation();
        React.useEffect(() => {
            R && E && z.current.play()
        }, [R, E]), React.useEffect(() => {
            var Ce;
            (Ce = z.current) == null || Ce.pause(), y(!1)
        }, [r.url]);
        const Y = Ce => `${String(Math.floor(Ce / 60)).padStart(2, "0")}:${String(Math.floor(Ce % 60)).padStart(2, "0")}`,
            H = () => {
                C(!0), y(!0), L(0)
            }, me = () => {
                C(!E), E ? z.current.pause() : z.current.play()
            }, ce = () => {
                z.current.currentTime = 0, L(0), C(!0), z.current.play()
            }, ie = () => {
                B(!x)
            }, Be = () => L(z.current.currentTime), ve = () => D(z.current.duration), Re = Ce => {
                let Ne = F.current.getBoundingClientRect();
                z.current.currentTime = O * (Ce - Ne.left) / Ne.width
            };
        return jsx("div", {
            className: "game_playback",
            children: R ? jsxs(Fragment, {
                children: [jsx("div", {
                    className: `playback_video_container ${x ? "zoomed" : ""}`,
                    children: jsx("video", {playsInline: !0, src: r.url, ref: z, onTimeUpdate: Be, onDurationChange: ve})
                }), jsxs("div", {
                    className: "controls",
                    children: [jsxs("div", {
                        className: "control_buttons",
                        children: [jsx("button", {
                            className: "zoom",
                            onClick: ie,
                            children: jsx("div", {className: `svg_${x ? "zoom_out" : "zoom_in"}`})
                        }), jsx("button", {
                            className: E ? "pause" : "play",
                            onClick: me,
                            children: jsx("div", {className: `svg_${E ? "pause" : "play"}`})
                        }), jsx("button", {
                            className: "replay",
                            onClick: ce,
                            children: jsx("div", {className: "svg_replay"})
                        })]
                    }), jsxs("div", {
                        className: "progress",
                        children: [jsx("div", {children: Y(N)}), jsx("div", {
                            className: "bar",
                            ref: F,
                            style: {"--progress": `${N / O * 100}%`},
                            onPointerDown: Ce => Re(Ce.clientX),
                            children: jsx("div", {className: "knob"})
                        }), jsx("div", {children: Y(O)})]
                    })]
                })]
            }) : jsxs(Fragment, {
                children: [jsx("button", {
                    disabled: r.disable, className: "load_button", onClick: () => {
                        H()
                    }
                }), r.disable ? jsxs("div", {
                    className: "content_container",
                    children: [jsx("div", {className: "no_video svg_no_video"}), jsx("div", {
                        className: "text",
                        children: _e("bet_record.no_video")
                    })]
                }) : jsx("div", {className: "play_icon ", children: jsx("div", {className: "svg_play"})})]
            })
        })
    }, CasinoWarGameResults$1 = "", CasinoWarGameResults = r => jsx("div", {
        className: "card_results cw",
        children: r.results.map((R, y) => jsx("div", {
            className: "template_vertical_card",
            "aria-hidden": R === "-2",
            children: jsx(Poker$2, {value: parseInt(R)})
        }, y))
    }), BlackjackGameResults$1 = "", BlackjackGameResults = r => jsx("div", {
        className: `card_results bj${r.flat ? "_flat" : ""}`,
        style: {"--cards": r.results.length},
        "aria-checked": r.doubled,
        children: r.results.map((R, y) => jsx("div", {
            className: "template_vertical_card",
            style: {"--order": y},
            "aria-hidden": R === "-2",
            children: jsx(Poker$2, {value: parseInt(R)})
        }, y))
    }), XocDiaDots = "", Responsive$F = "", getPointsByBetType = r => {
        switch (r) {
            case XOC_DIA_BET_TYPE.POINT_0:
                return 0;
            case XOC_DIA_BET_TYPE.POINT_1:
                return 1;
            case XOC_DIA_BET_TYPE.POINT_3:
                return 3;
            case XOC_DIA_BET_TYPE.POINT_4:
                return 4;
            default:
                return -1
        }
    }, getClassNameByPoints = r => {
        switch (r) {
            case 0:
                return "point_0";
            case 1:
                return "point_1";
            case 2:
                return "point_2";
            case 3:
                return "point_3";
            case 4:
                return "point_4"
        }
    }, Dots = ({points: r, direction: R = "row"}) => {
        const y = ["xocdia_dots", R, getClassNameByPoints(r)], E = {
            0: ["white", "white", "white", "white"],
            1: ["white", "white", "white", "red"],
            2: ["white", "white", "red", "red"],
            3: ["red", "red", "red", "white"],
            4: ["red", "red", "red", "red"]
        };
        return jsx("div", {
            className: y.join(" "),
            children: Array.from({length: 4}).map((C, x) => jsx(Dot, {color: E[r][x], children: x === 3 ? r : void 0}, x))
        })
    }, Dot = ({color: r, children: R}) => jsx("div", {
        className: ["xocdia_dot", r].filter(y => y !== void 0).join(" "),
        children: R
    }), combineGameType = [GameType.TeenPatti],
    altGamePlayType = [BetType.TP_Dragon, BetType.TP_Phoenix, BetType.TP_Tie, BetType.TP_DragonThreePictures, BetType.TP_PhoenixThreePictures, BetType.TPD_Player1, BetType.TPD_Player2, BetType.TPD_Player3, BetType.TPD_Player4, BetType.TPD_Player5, BetType.TPD_Banker1, BetType.TPD_Banker2, BetType.TPD_Banker3, BetType.TPD_Banker4, BetType.TPD_Banker5, BetType.TPD_BPair, BetType.HL_Hi, BetType.HL_Lo, BetType.HL_HiLo, BetType.HL_Single1, BetType.HL_Single2, BetType.HL_Single3, BetType.HL_Single4, BetType.HL_Single5, BetType.HL_Single6, BetType.HL_Format12, BetType.HL_Format13, BetType.HL_Format14, BetType.HL_Format15, BetType.HL_Format16, BetType.HL_Format23, BetType.HL_Format24, BetType.HL_Format25, BetType.HL_Format26, BetType.HL_Format34, BetType.HL_Format35, BetType.HL_Format36, BetType.HL_Format45, BetType.HL_Format46, BetType.HL_Format56, BetType.HL_Lo1, BetType.HL_Lo2, BetType.HL_Lo3, BetType.HL_Lo4, BetType.HL_Lo5, BetType.HL_Lo6, BetType.HL_Hi3, BetType.HL_Hi4, BetType.HL_Hi5, BetType.HL_Hi6, BetType.HL_Format123, BetType.HL_Format234, BetType.HL_Format345, BetType.HL_Format456],
    alt2GamePlayType = [BetType.TPa_PlayerA, BetType.TPa_PlayerB, BetType.TPa_Tie, BetType.TPa_PlayerAPairPlus, BetType.TPa_PlayerBPairPlus, BetType.TPa_SixCardsBonus, BetType.ST_Odd, BetType.ST_Even, BetType.ST_Fan1, BetType.ST_Fan2, BetType.ST_Fan3, BetType.ST_Fan4, BetType.ST_Nim12, BetType.ST_Nim13, BetType.ST_Nim14, BetType.ST_Nim21, BetType.ST_Nim23, BetType.ST_Nim24, BetType.ST_Nim31, BetType.ST_Nim32, BetType.ST_Nim34, BetType.ST_Nim41, BetType.ST_Nim42, BetType.ST_Nim43, BetType.ST_1Nga23, BetType.ST_1Nga24, BetType.ST_1Nga34, BetType.ST_2Nga13, BetType.ST_2Nga14, BetType.ST_2Nga34, BetType.ST_3Nga12, BetType.ST_3Nga14, BetType.ST_3Nga24, BetType.ST_4Nga13, BetType.ST_4Nga12, BetType.ST_4Nga23, BetType.ST_Ssh123, BetType.ST_Ssh124, BetType.ST_Ssh134, BetType.ST_Ssh234, BetType.ST_Kwok12, BetType.ST_Kwok23, BetType.ST_Kwok34, BetType.ST_Kwok41],
    BetRecord = r => {
        let {movable: R = !0, onDetailPage: y} = r;
        const {t: E} = useTranslation();
        let {getBetRecords: C, getPlayBackUrl: x} = useGameHttpService();
        const [B, N] = React.useState([]), [L, O] = React.useState(-1), [D, z] = React.useState(), [F, _e] = React.useState(!1), [Y, H] = React.useState(!1), [me, ce] = React.useState(1),
            ie = React.useRef(null), Be = React.useRef(null),
            ve = React.useRef(null), [Re, Ce] = React.useState(new Date);
        React.useEffect(() => {
            we()
        }, []), React.useEffect(() => {
            var qe;
            L < 0 && D && ((qe = ie.current) == null || qe.scrollTo({top: D}))
        }, [L, D]), React.useEffect(() => {
            L >= 0 && Ce(new Date), y && y(!(L >= 0))
        }, [L]);
        const Ne = 40;
        React.useEffect(() => {
            const qe = ie.current, ze = () => {
                if (!qe) return;
                const De = qe.scrollTop, Xe = qe.scrollHeight, He = qe.clientHeight;
                De + He >= Xe - 1 && we()
            };
            return qe == null || qe.addEventListener("scroll", ze), () => qe == null ? void 0 : qe.removeEventListener("scroll", ze)
        }, [L, Y, F]);
        const we = async () => {
                if (F || Y) return;
                _e(!0);
                let qe = me, ze = Y, De = [];
                for (; De.length < Ne && !ze;) {
                    let He = await C(qe);
                    if (He) {
                        He.length < Ne && (ze = !0), qe++;
                        let Ge = He.filter(Le => Le.betLogStatus !== BetLogStatus.NOT_SETTLED).map(Le => {
                            const We = et => altGamePlayType.includes(et.playTypeName) && et.gameTypeCode !== GameType.Pokdeng ? 1 : combineGameType.includes(et.gameTypeCode) ? 0 : alt2GamePlayType.includes(et.playTypeName) ? 2 : 0,
                                dt = et => {
                                    if (!et.stringLotteryResult) return [];
                                    const nt = We(et);
                                    return et.stringLotteryResult[nt] || []
                                };
                            return {
                                bettingNumber: Le.betLogId,
                                gameroundId: Le.gameRoundId,
                                dateTime: Le.betTime,
                                gameType: Le.gameTypeCode,
                                tableNumber: Le.tableName,
                                betType: Le.playTypeName,
                                shoeNumber: Le.shoeNum,
                                shoeRound: Le.shoeRoundNum,
                                urlSuffix: Le.urlSuffix,
                                betAmount: Le.betAmount,
                                validBet: Le.validAmount,
                                win: Le.payout,
                                status: Le.betLogStatus,
                                results: Le.lotteryResultDetails,
                                cardTypes: dt(Le)
                            }
                        });
                        De = De.concat(Ge)
                    } else break
                }
                let Xe = B.slice();
                N(Xe.concat(De)), H(ze), ce(qe), _e(!1)
            },
            Me = React.useCallback((qe, ze) => combineGameType.includes(qe) ? qe : alt2GamePlayType.includes(ze) ? `${qe}_Alt_2` : altGamePlayType.includes(ze) ? `${qe}_Alt` : qe, []),
            ke = React.useCallback(qe => {
                const ze = He => He.betAmount, De = He => {
                    let Ge = He.status === BetLogStatus.SETTLED ? `${parseFloat(He.win) > 0 ? "+" : ""}` : "",
                        Le = He.status != BetLogStatus.SETTLED ? "-" : He.win;
                    return `${Ge}${Le}`
                }, Xe = He => He.status === BetLogStatus.SETTLED ? `${parseFloat(He.win) >= 0 ? "win" : "lose"}` : "";
                return jsxs("article", {
                    className: "record", onClick: () => {
                        z(ie.current.scrollTop), O(qe)
                    }, children: [jsx("div", {
                        children: `${B[qe].gameroundId}
${B[qe].dateTime}`
                    }), jsx("div", {
                        children: `${E(`game_types.${Me(B[qe].gameType, B[qe].betType)}`)}
${B[qe].tableNumber}`
                    }), jsx("div", {children: E(`detailed_bet_type.${B[qe].betType}`)}), jsx("div", {
                        className: "right_aligned",
                        children: ze(B[qe])
                    }), jsx("div", {className: `right_aligned ${Xe(B[qe])}`, children: De(B[qe])})]
                }, qe)
            }, [B]), Fe = qe => qe.toString(), $e = (qe, ze, De) => {
                switch (Fe(qe)) {
                    case Fe(GameType.Baccarat):
                    case Fe(GameType.Quick):
                    case Fe(GameType.VIP):
                    case Fe(GameType.InsuredBaccarat):
                    case Fe(GameType.See):
                        return jsx(BaccaratGameResults, {side: De === 0 ? "player" : "banker", results: ze[De]});
                    case Fe(GameType.DT):
                        return jsx(DragonTigerGameResults, {side: De === 0 ? "dragon" : "tiger", result: ze[De][0]});
                    case Fe(GameType.Win3Card):
                        return jsx(Win3CardsGameResults, {side: De === 0 ? "dragon" : "phoenix", results: ze[De]});
                    case Fe(AltGameType.ThreePictures):
                        return jsx(ThreePicturesGameResults, {side: De === 0 ? "dragon" : "phoenix", results: ze[De]});
                    case Fe(AltGameType.TeenPatti):
                    case Fe(GameType.TeenPatti):
                        return jsx(TeenPattiGameResults, {side: De === 0 ? "player_a" : "player_b", results: ze[De]});
                    case Fe(GameType.BullBull):
                        return jsx(BullBullGameResults, {results: ze[De]});
                    case Fe(GameType.AndarBahar):
                        return ze[De].length > 0 ? jsx(AndarBaharGameResults, {
                            side: De === 1 ? "andar" : "bahar",
                            results: ze[De],
                            isWinner: ze[De].slice(-1)[0].slice(-2) === ze[0][0].slice(-2)
                        }) : void 0;
                    case Fe(GameType.Roulette):
                        return jsx(RoulettedFocusedResult, {winResult: ze[0][0]});
                    case Fe(GameType.UTH):
                        return jsx("div", {
                            className: "uth_game_results",
                            children: ze[De].map((Xe, He) => jsx(Poker$2, {value: parseInt(Xe)}, He))
                        });
                    case Fe(GameType.Pokdeng):
                    case Fe(AltGameType.TwoSidesPokdeng):
                        return jsx(PokdengGameResults, {results: ze[De]});
                    case Fe(GameType.Sicbo):
                        return jsx("div", {
                            className: "sicbo_game_results",
                            children: ze.map(Xe => jsx("div", {className: `svg_dice_${Xe[0]}`}))
                        });
                    case Fe(AltGameType.HiLo):
                        return jsx("div", {
                            className: "hi_lo_game_results",
                            children: ze.map(Xe => jsx("div", {className: `svg_dice_${Xe[0]}`}))
                        });
                    case Fe(AltGameType.SicTan):
                        return jsx("div", {
                            className: "sictan_game_results",
                            children: ze.map(Xe => jsx("div", {className: `svg_dice_${Xe[0]}`}))
                        });
                    case Fe(GameType.XocDia):
                        return jsx(Fragment, {});
                    case Fe(GameType.CasinoWar):
                        return jsx(CasinoWarGameResults, {results: ze[De].filter(Xe => Xe !== "-1")});
                    case Fe(GameType.Blackjack):
                        return jsx(BlackjackGameResults, {results: ze[De]});
                    case Fe(GameType.FPC):
                        return jsx("div", {
                            className: "fpc_game_results",
                            children: ze.map(Xe => jsx("div", {
                                className: "dice",
                                children: jsx("div", {className: `svg_table_fpc_${FPC_DICE[Xe[0]]} ${FPC_COLOR[parseInt(Xe[0]) - 1]}`})
                            }))
                        });
                    default:
                        return
                }
            }, Ve = React.useCallback((qe, ze, De, Xe) => {
                if (!Xe) return jsx("section", {className: "baccarat_results"});
                let He = qe;
                altGamePlayType.includes(ze) && (He = qe + "_Alt"), alt2GamePlayType.includes(ze) && (He = qe + "_Alt_2"), combineGameType.includes(qe) && (He = qe);
                let Ge, Le;
                switch (Fe(He)) {
                    case Fe(GameType.Baccarat):
                    case Fe(GameType.Quick):
                    case Fe(GameType.VIP):
                    case Fe(GameType.InsuredBaccarat):
                    case Fe(GameType.See):
                        return jsxs("section", {
                            className: "baccarat_results",
                            children: [jsxs("div", {
                                className: "blue",
                                children: [jsxs("div", {
                                    className: "points",
                                    children: [jsx("div", {children: E("detailed_bet_type.1002").toUpperCase()}), jsx("div", {children: De[0].reduce((kt, At) => kt + (parseInt(At) % 100 >= 0 ? parseInt(At) % 100 > 10 ? 10 : parseInt(At) % 100 : 0), 0) % 10})]
                                }), $e(He, De, 0)]
                            }), jsxs("div", {
                                className: "red",
                                children: [jsxs("div", {
                                    className: "points",
                                    children: [jsx("div", {children: De[1].reduce((kt, At) => kt + (parseInt(At) % 100 >= 0 ? parseInt(At) % 100 > 10 ? 10 : parseInt(At) % 100 : 0), 0) % 10}), jsx("div", {children: E("detailed_bet_type.1001").toUpperCase()})]
                                }), $e(He, De, 1)]
                            })]
                        });
                    case Fe(GameType.DT):
                        return jsxs("section", {
                            className: "dragon_tiger_results",
                            children: [jsxs("div", {
                                className: "red",
                                children: [jsx("div", {children: E("bet_type.2001")}), jsxs("div", {
                                    className: "card_point",
                                    children: [jsx("div", {}), $e(He, De, 0), jsx("div", {})]
                                })]
                            }), jsxs("div", {
                                className: "blue",
                                children: [jsx("div", {children: E("bet_type.2002")}), jsxs("div", {
                                    className: "card_point",
                                    children: [jsx("div", {}), $e(He, De, 1), jsx("div", {})]
                                })]
                            })]
                        });
                    case Fe(AltGameType.TeenPatti):
                    case Fe(GameType.TeenPatti):
                        return Ge = Xe[0], Le = kt => {
                            switch (kt) {
                                case"0":
                                    return "high_card";
                                case"1":
                                    return "pair";
                                case"2":
                                    return "flush";
                                case"3":
                                    return "straight";
                                case"4":
                                    return "straight_flush";
                                case"5":
                                case"6":
                                    return "three_of_a_kind";
                                default:
                                    return
                            }
                        }, jsxs("section", {
                            className: "teen_patti_results",
                            children: [jsxs("div", {
                                className: "blue",
                                children: [jsx("div", {children: E("bet_type.6301")}), $e(He, De, 0), jsx("div", {children: E(`detailed_bet_type.additional_result.${Le(Ge[1])}`)})]
                            }), jsxs("div", {
                                className: "red",
                                children: [jsx("div", {children: E("bet_type.6302")}), $e(He, De, 1), jsx("div", {children: E(`detailed_bet_type.additional_result.${Le(Ge[2])}`)})]
                            })]
                        });
                    case Fe(GameType.Win3Card):
                        return Ge = Xe[0], Le = kt => {
                            switch (kt) {
                                case"0":
                                    return "high_card";
                                case"1":
                                    return "pair";
                                case"2":
                                    return "straight";
                                case"3":
                                    return "flush";
                                case"4":
                                    return "straight_flush";
                                case"5":
                                    return "three_of_a_kind";
                                case"6":
                                    return "235";
                                default:
                                    return ""
                            }
                        }, jsxs("section", {
                            className: "win3cards_results",
                            children: [jsxs("div", {
                                className: "blue",
                                children: [jsx("div", {children: E("bet_type.9001")}), $e(He, De, 0), jsx("div", {children: `${E(`detailed_bet_type.additional_result.${Le(Ge[1])}`)} ${parseInt(Ge[1]) <= 1 ? Helper.mapValueToPoker(Ge[2]) : ""}`})]
                            }), jsxs("div", {
                                className: "red",
                                children: [jsx("div", {children: E("bet_type.9002")}), $e(He, De, 1), jsx("div", {children: `${E(`detailed_bet_type.additional_result.${Le(Ge[3])}`)} ${parseInt(Ge[3]) <= 1 ? Helper.mapValueToPoker(Ge[4]) : ""}`})]
                            })]
                        });
                    case Fe(AltGameType.ThreePictures):
                        Ge = Xe[0];
                        let We = kt => {
                            let At = "";
                            switch (kt) {
                                case"0":
                                    At = "";
                                    break;
                                case"1":
                                    At = "single_picture";
                                    break;
                                case"2":
                                    At = "double_pictures";
                                    break;
                                case"3":
                                    At = "triple_pictures";
                                    break;
                                default:
                                    At = "";
                                    break
                            }
                            return At.length > 0 ? E(`detailed_bet_type.additional_result.${At}`) : ""
                        };
                        return Le = (kt, At) => {
                            const zt = At ? 0 : 2;
                            return We(kt[1 + zt]) ? `${We(kt[1 + zt])} ${parseInt(kt[1 + zt]) !== 3 ? kt[2 + zt] : ""}` : kt[2 + zt]
                        }, jsxs("section", {
                            className: "three_pictures_results",
                            children: [jsxs("div", {
                                className: "blue",
                                children: [jsx("div", {children: E("bet_type.9101")}), $e(He, De, 0), jsx("div", {children: Le(Ge, !0)})]
                            }), jsxs("div", {
                                className: "red",
                                children: [jsx("div", {children: E("bet_type.9102")}), $e(He, De, 1), jsx("div", {children: Le(Ge, !1)})]
                            })]
                        });
                    case Fe(GameType.BullBull):
                        return Ge = Xe[0], Le = kt => {
                            switch (kt) {
                                case"0":
                                    return "no_bull";
                                case"A":
                                    return "bull_bull";
                                case"B":
                                    return "five_dukes";
                                default:
                                    return `bull_${kt}`
                            }
                        }, jsxs("section", {
                            className: "bull_bull_results",
                            children: [jsxs("div", {
                                className: "red",
                                children: [jsxs("div", {children: [jsx("div", {children: E("roadmap.bull_bull.game_hall.banker")}), jsx(Poker$2, {value: parseInt(De[0][0])})]}), jsxs("div", {children: [De[1].map((kt, At) => jsx(Poker$2, {value: parseInt(kt)}, At)), jsx("div", {children: E(`detailed_bet_type.additional_result.${Le(Ge[1])}`)})]})]
                            }), jsxs("div", {
                                className: "blue",
                                children: [jsx("div", {children: E("roadmap.bull_bull.game_hall.player_1")}), $e(He, De, 2), jsx("div", {children: E(`detailed_bet_type.additional_result.${Le(Ge[2])}`)})]
                            }), jsxs("div", {
                                className: "blue",
                                children: [jsx("div", {children: E("roadmap.bull_bull.game_hall.player_2")}), $e(He, De, 3), jsx("div", {children: E(`detailed_bet_type.additional_result.${Le(Ge[3])}`)})]
                            }), jsxs("div", {
                                className: "blue",
                                children: [jsx("div", {children: E("roadmap.bull_bull.game_hall.player_3")}), $e(He, De, 4), jsx("div", {children: E(`detailed_bet_type.additional_result.${Le(Ge[4])}`)})]
                            })]
                        });
                    case Fe(GameType.AndarBahar):
                        return Ge = Xe[0], jsxs("section", {
                            className: "andar_bahar_results",
                            children: [jsxs("div", {
                                className: "blue",
                                children: [jsx("div", {children: E("bet_type.6201")}), $e(He, De, 1)]
                            }), jsx("div", {className: "line"}), jsxs("div", {
                                className: "red",
                                children: [jsx("div", {children: E("bet_type.6202")}), $e(He, De, 2)]
                            }), jsxs("div", {
                                className: "house_card",
                                children: [jsx("div", {children: E("bet_type.tips.house_card")}), jsx(Poker$2, {value: parseInt(De[0][0])})]
                            }), jsx("div", {children: `${E("bet_type.tips.cards_dealt")}: ${De[1].length + De[2].length}`})]
                        });
                    case Fe(GameType.Roulette):
                        Ge = Xe[0];
                        const dt = kt => {
                            switch (kt) {
                                case"1":
                                case"2":
                                case"3":
                                    return "1st_dozen";
                                case"4":
                                case"5":
                                case"6":
                                    return "2nd_dozen";
                                case"7":
                                case"8":
                                case"9":
                                    return "3rd_dozen";
                                default:
                                    return "zero"
                            }
                        }, et = kt => {
                            switch (kt) {
                                case"1":
                                case"2":
                                    return "4001";
                                case"3":
                                case"4":
                                    return "4006";
                                default:
                                    return "zero"
                            }
                        }, nt = kt => {
                            switch (kt) {
                                case"1":
                                case"3":
                                    return "4005";
                                case"2":
                                case"4":
                                    return "4002";
                                default:
                                    return "zero"
                            }
                        };
                        return jsxs("section", {
                            className: "roulette_results",
                            children: [$e(He, De, 0), jsxs("div", {children: [jsx("div", {children: jsx("div", {dangerouslySetInnerHTML: {__html: E(`detailed_bet_type.additional_result.${dt(Ge[2])}`)}})}), jsx("div", {children: jsx("div", {children: E(`detailed_bet_type.${et(Ge[1])}`)})}), jsx("div", {children: jsx("div", {children: E(`detailed_bet_type.${nt(Ge[1])}`)})})]})]
                        });
                    case Fe(GameType.UTH):
                        return Ge = Xe[0], Le = kt => {
                            let At;
                            return (zt => {
                                zt[zt.high_card = 0] = "high_card", zt[zt.pair = 1] = "pair", zt[zt.two_pairs = 2] = "two_pairs", zt[zt.three_of_a_kind = 3] = "three_of_a_kind", zt[zt.straight = 4] = "straight", zt[zt.flush = 5] = "flush", zt[zt.full_house = 6] = "full_house", zt[zt.four_of_a_kind = 7] = "four_of_a_kind", zt[zt.straight_flush = 8] = "straight_flush", zt[zt.royal_flush = 9] = "royal_flush"
                            })(At || (At = {})), At[parseInt(kt)]
                        }, jsxs("section", {
                            className: "uth_results",
                            children: [jsxs("div", {
                                className: "red",
                                children: [jsx("div", {children: E("game_table.uth.banker")}), $e(He, De, 0), jsx("div", {children: E(`detailed_bet_type.additional_result.${Le(Ge[9])}`)})]
                            }), jsxs("div", {
                                className: "community",
                                children: [jsx("div", {children: E("game_table.uth.community")}), $e(He, De, 4), jsx("div", {})]
                            }), jsxs("div", {
                                className: "blue",
                                children: [jsx("div", {children: E("game_table.uth.player_1_short")}), $e(He, De, 1), jsx("div", {})]
                            }), jsxs("div", {
                                className: "blue",
                                children: [jsx("div", {children: E("game_table.uth.player_2_short")}), $e(He, De, 2), jsx("div", {})]
                            }), jsxs("div", {
                                className: "blue",
                                children: [jsx("div", {children: E("game_table.uth.player_3_short")}), $e(He, De, 3), jsx("div", {})]
                            }), jsx("div", {
                                className: "blue card_type",
                                children: E(`detailed_bet_type.additional_result.${Le(Ge[3])}`)
                            }), jsx("div", {
                                className: "blue card_type",
                                children: E(`detailed_bet_type.additional_result.${Le(Ge[5])}`)
                            }), jsx("div", {
                                className: "blue card_type",
                                children: E(`detailed_bet_type.additional_result.${Le(Ge[7])}`)
                            })]
                        });
                    case Fe(GameType.Pokdeng):
                    case Fe(AltGameType.TwoSidesPokdeng):
                        return Ge = Xe[0], Le = kt => {
                            switch (kt) {
                                case"8":
                                    return "7.1";
                                case"9":
                                    return "7.2";
                                case"A":
                                    return "7.3";
                                case"B":
                                    return "7.4";
                                case"C":
                                    return "7.5";
                                case"D":
                                    return "8";
                                case"E":
                                    return "9";
                                default:
                                    return kt
                            }
                        }, jsxs("section", {
                            className: "pokdeng_results",
                            children: [jsxs("div", {
                                className: "red",
                                children: [jsx("div", {children: E("roadmap.pokdeng.banker")}), $e(He, De, 0), jsx("div", {children: Le(Ge[0])})]
                            }), jsxs("div", {
                                className: "blue",
                                children: [jsx("div", {children: E("roadmap.pokdeng.player_1")}), $e(He, De, 1), jsx("div", {children: Le(Ge[3])})]
                            }), jsxs("div", {
                                className: "blue",
                                children: [jsx("div", {children: E("roadmap.pokdeng.player_2")}), $e(He, De, 2), jsx("div", {children: Le(Ge[6])})]
                            }), jsxs("div", {
                                className: "blue",
                                children: [jsx("div", {children: E("roadmap.pokdeng.player_3")}), $e(He, De, 3), jsx("div", {children: Le(Ge[9])})]
                            }), jsxs("div", {
                                className: "blue",
                                children: [jsx("div", {children: E("roadmap.pokdeng.player_4")}), $e(He, De, 4), jsx("div", {children: Le(Ge[12])})]
                            }), jsxs("div", {
                                className: "blue",
                                children: [jsx("div", {children: E("roadmap.pokdeng.player_5")}), $e(He, De, 5), jsx("div", {children: Le(Ge[15])})]
                            })]
                        });
                    case Fe(GameType.Sicbo):
                        return Le = kt => {
                            switch (kt) {
                                case"1":
                                case"2":
                                    return "small_dice";
                                case"3":
                                case"4":
                                    return "big_dice";
                                default:
                                    return "triple_dice"
                            }
                        }, jsxs("section", {
                            className: "sicbo_results",
                            children: [$e(He, De, 0), jsx("div", {
                                className: Le(Xe[0][4]) === "small_dice" ? "blue" : Le(Xe[0][4]) === "big_dice" ? "red" : "green",
                                children: De.reduce((kt, At) => kt + parseInt(At[0]), 0)
                            }), jsx("div", {
                                className: Le(Xe[0][4]) === "small_dice" ? "blue" : Le(Xe[0][4]) === "big_dice" ? "red" : "green",
                                children: E(`detailed_bet_type.additional_result.${Le(Xe[0][4])}`)
                            })]
                        });
                    case Fe(AltGameType.HiLo):
                        return Le = kt => {
                            switch (kt) {
                                case"1":
                                    return BetType.HL_Lo;
                                case"3":
                                    return BetType.HL_Hi;
                                default:
                                    return BetType.HL_HiLo
                            }
                        }, jsxs("section", {
                            className: "sicbo_results",
                            children: [$e(He, De, 0), jsx("div", {
                                className: Le(Xe[0][4]) === BetType.HL_Lo ? "blue" : Le(Xe[0][4]) === BetType.HL_Hi ? "red" : "green",
                                children: E(`detailed_bet_type.${Le(Xe[0][4])}`).toUpperCase()
                            })]
                        });
                    case Fe(AltGameType.SicTan):
                        return Le = kt => {
                            switch (kt) {
                                case"1":
                                    return "odd";
                                case"2":
                                    return "even"
                            }
                        }, jsxs("section", {
                            className: "sictan_results",
                            children: [$e(He, De, 0), jsx("div", {
                                className: `fan_${Xe[0][5]}`,
                                children: Xe[0][5]
                            }), jsx("div", {
                                className: Le(Xe[0][4]) === "odd" ? "blue" : "red",
                                children: E(`detailed_bet_type.additional_result.${Le(Xe[0][4])}`)
                            })]
                        });
                    case Fe(GameType.XocDia):
                        const tt = kt => {
                            switch (kt) {
                                case"0":
                                    return BetType.XD_Tie;
                                case"1":
                                    return BetType.XD_Small;
                                case"2":
                                    return BetType.XD_Big;
                                default:
                                    return ""
                            }
                        }, lt = kt => {
                            switch (kt) {
                                case"0":
                                    return BetType.XD_Odd;
                                case"1":
                                    return BetType.XD_Even
                            }
                        };
                        return jsxs("section", {
                            className: "xocdia_results",
                            children: [jsx("div", {
                                className: "dot_points",
                                children: jsx(Dots, {points: parseInt(Xe[0][2])})
                            }), jsxs("div", {
                                className: "xocdia_result",
                                children: [jsx("div", {
                                    className: `${Xe[0][0] === "1" ? "small" : Xe[0][0] === "2" ? "big" : "tie"}`,
                                    children: E(`detailed_bet_type.${tt(Xe[0][0])}`)
                                }), jsx("div", {
                                    className: `${Xe[0][1] === "0" ? "odd" : "even"}`,
                                    children: E(`detailed_bet_type.${lt(Xe[0][1])}`)
                                })]
                            })]
                        });
                    case Fe(GameType.CasinoWar):
                        return jsxs("section", {
                            className: "casino_war_results",
                            children: [jsxs("div", {
                                className: "red",
                                children: [jsx("div", {children: E("roadmap.casino_war.banker")}), $e(He, De, 0)]
                            }), jsxs("div", {
                                className: "blue",
                                children: [jsx("div", {children: E("roadmap.casino_war.player_1")}), $e(He, De, 1)]
                            }), jsxs("div", {
                                className: "blue",
                                children: [jsx("div", {children: E("roadmap.casino_war.player_2")}), $e(He, De, 2)]
                            }), jsxs("div", {
                                className: "blue",
                                children: [jsx("div", {children: E("roadmap.casino_war.player_3")}), $e(He, De, 3)]
                            })]
                        });
                    case Fe(GameType.Blackjack):
                        const Bt = kt => {
                            const At = kt.map(oa => Math.min(parseInt(oa) % 100, 10));
                            let zt = At.reduce((oa, sa) => oa + sa, 0);
                            return At.includes(1) && zt + 10 <= 21 && (zt += 10), zt > 21 ? 0 : zt
                        };
                        return jsxs("section", {
                            className: "blackjack_results",
                            children: [jsxs("div", {
                                className: "red",
                                children: [jsx("div", {children: E("game_table.blackjack.banker")}), jsxs("div", {
                                    className: "result",
                                    children: [jsx("div", {
                                        className: "points",
                                        children: Bt(De[0]) || jsx("div", {className: "svg_bust"})
                                    }), $e(He, De, 0)]
                                })]
                            }), jsxs("div", {
                                className: "blue",
                                children: [jsx("div", {children: E("game_table.blackjack.player")}), jsx("div", {
                                    children: De.map((kt, At) => At > 0 && kt.length > 0 && jsxs("div", {
                                        className: "result",
                                        children: [jsx("div", {
                                            className: "points",
                                            children: Bt(De[At]) || jsx("div", {className: "svg_bust"})
                                        }), $e(He, De, At)]
                                    }, At))
                                })]
                            })]
                        });
                    case Fe(GameType.FPC):
                        return jsx("section", {className: "fpc_results", children: $e(He, De, 0)});
                    default:
                        return
                }
            }, []), Je = React.useCallback(() => jsxs(Fragment, {
                children: [jsxs("section", {
                    className: "header",
                    ref: Be,
                    children: [jsx("div", {}), jsxs("h2", {children: [jsx("div", {className: "svg_records"}), E("bet_record.title.records")]}), jsx("button", {
                        className: "svg_close extended-button",
                        onClick: r.onClose
                    })]
                }), jsxs("section", {
                    className: "title", children: [jsx("div", {
                        children: jsx("div", {
                            children: `${E("bet_record.gameround_id")}
${E("bet_record.date_time")}`
                        })
                    }), jsx("div", {children: jsx("div", {children: E("bet_record.game")})}), jsx("div", {children: jsx("div", {children: E("bet_record.bet_type")})}), jsx("div", {
                        className: "right_aligned",
                        children: jsx("div", {children: E("bet_record.total_bet")})
                    }), jsx("div", {
                        className: "right_aligned",
                        children: jsx("div", {children: E("bet_record.win_loss")})
                    })]
                }), jsxs("section", {
                    className: "content",
                    ref: ie,
                    children: [B.map((qe, ze) => ke(ze)), jsx("div", {id: "loading", "aria-hidden": Y || !F})]
                })]
            }), [B]), Qe = React.useMemo(() => {
                if (L >= 0 && B.length > 0) {
                    let {urlSuffix: qe} = B[L];
                    return x(qe.replace(/^\/|\/$/g, ""))
                }
                return ""
            }, [B, L]), Ze = React.useCallback(() => {
                const {
                    bettingNumber: qe,
                    gameroundId: ze,
                    dateTime: De,
                    gameType: Xe,
                    tableNumber: He,
                    betType: Ge,
                    shoeNumber: Le,
                    shoeRound: We,
                    betAmount: dt,
                    urlSuffix: et,
                    validBet: nt,
                    win: tt,
                    status: lt,
                    results: Bt,
                    cardTypes: kt
                } = B[L], At = We !== -1;
                return jsxs(Fragment, {
                    children: [jsxs("section", {
                        className: "header",
                        ref: Be,
                        children: [jsx("button", {
                            className: "button extended-button",
                            onClick: () => O(-1),
                            children: jsx("div", {className: "svg_arrow_left"})
                        }), jsxs("h2", {children: [jsx("div", {className: "svg_records"}), E("bet_record.title.details")]}), jsx("button", {
                            className: "svg_close",
                            onClick: r.onClose
                        })]
                    }), jsxs("section", {
                        className: "details",
                        children: [jsx("section", {
                            className: "playback",
                            children: jsx(GamePlayback, {disable: lt !== BetLogStatus.SETTLED, url: Qe})
                        }), lt == BetLogStatus.SETTLED ? Bt && Ve(Xe, Ge, Bt, kt) : "", jsx("section", {
                            className: "detail", children: jsx("table", {
                                children: jsxs("tbody", {
                                    children: [jsxs("tr", {children: [jsx("th", {children: E("bet_record.betting_number")}), jsx("td", {children: qe})]}), jsxs("tr", {children: [jsx("th", {children: E("bet_record.gameround_id")}), jsx("td", {children: ze})]}), jsxs("tr", {children: [jsx("th", {children: E("bet_record.date_time")}), jsx("td", {children: De})]}), jsxs("tr", {children: [jsx("th", {children: E("bet_record.game_type")}), jsx("td", {children: E(`game_types.${Me(Xe, Ge)}`)})]}), jsxs("tr", {children: [jsx("th", {children: E("bet_record.table_number")}), jsx("td", {children: He})]}), jsxs("tr", {children: [jsx("th", {children: E("bet_record.bet_type")}), jsx("td", {children: E(`detailed_bet_type.${Ge}`)})]}), At && jsxs("tr", {children: [jsx("th", {children: E("bet_record.shoe_round")}), jsx("td", {children: `${Le}-${We}`})]}), jsxs("tr", {children: [jsx("th", {children: E("bet_record.bet_amount")}), jsx("td", {children: dt})]}), jsxs("tr", {
                                        children: [jsx("th", {children: E("bet_record.win_loss")}), jsx("td", {
                                            className: lt == BetLogStatus.SETTLED ? parseFloat(tt) >= 0 ? "win" : "lose" : "",
                                            children: lt === BetLogStatus.SETTLED && tt || "-"
                                        })]
                                    }), jsxs("tr", {children: [jsx("th", {children: E("bet_record.valid_bet")}), jsx("td", {children: nt})]}), jsxs("tr", {
                                        className: "status",
                                        children: [jsx("th", {children: E("bet_record.status")}), jsx("td", {
                                            className: [BetLogStatus.BETTING, BetLogStatus.NOT_SETTLED].includes(lt) ? "pending" : lt === BetLogStatus.SETTLED ? "settled" : "failed",
                                            children: E(`bet_record.bet_status.${lt}`)
                                        })]
                                    })]
                                })
                            })
                        }), jsxs("section", {
                            className: "buttons",
                            children: [L > 0 ? jsx("button", {
                                onClick: () => O(L - 1),
                                children: `< ${E("bet_record.previous")}`
                            }) : jsx("div", {}), L < B.length - 1 ? jsx("button", {
                                onClick: () => O(L + 1),
                                children: `${E("bet_record.next")} >`
                            }) : jsx("div", {})]
                        })]
                    })]
                })
            }, [L, B]);
        return jsx(ToggleMovablePopup, {
            movable: R, headerRef: Be, childRef: ve, onClose: () => {
            }, align: "right", children: jsx("article", {id: "records", ref: ve, children: L < 0 ? Je() : Ze()})
        })
    }, ZoomContext$4 = React.createContext([void 0, () => {
    }]), BaccaratDetailedRoads = r => {
        const [R, y] = React.useState([]);
        React.useEffect(() => {
            let B = r.roadMap.slice();
            JSON.stringify(R) !== JSON.stringify(B) && y(B)
        }, [r.roadMap]);
        const {orientation: E} = useDeviceOrientation(), [C, x] = React.useState();
        return jsxs("div", {
            className: "detailed_roads",
            children: [(isDesktop$1 || E.includes("landscape")) && jsx(BaccaratRoadStatistics, {
                roadMap: r.roadMap,
                onAsk: r.onAsk,
                bigRoadConsecutiveList: r.bigRoadConsecutiveList
            }), jsx("section", {
                className: "roads_layout",
                "aria-checked": !!C,
                children: jsxs(ZoomContext$4.Provider, {
                    value: [C, x],
                    children: [(C === "Big" || !C) && jsx(BaccaratBigRoad, {
                        size: {
                            x: isMobile$1 && E === "small-landscape" ? 15 : C === "Big" ? 18 : 28,
                            y: 6
                        }, roadMap: R.map(B => B[1]), allowZoom: !0
                    }), (C === "Big_Eye" || !C) && jsx(BaccaratBigEyeRoad, {
                        size: {
                            x: E === "small-landscape" ? 16 : 18,
                            y: 6
                        }, bigRoadConsecutiveList: r.bigRoadConsecutiveList, allowZoom: !0
                    }), (C === "Small" || !C) && jsx(BaccaratSmallRoad, {
                        size: {x: E === "small-landscape" ? 16 : 18, y: 6},
                        bigRoadConsecutiveList: r.bigRoadConsecutiveList,
                        allowZoom: !0
                    }), (C === "Cockroach" || !C) && jsx(BaccaratCockroachRoad, {
                        size: {
                            x: E === "small-landscape" ? 16 : 18,
                            y: 6
                        }, bigRoadConsecutiveList: r.bigRoadConsecutiveList, allowZoom: !0
                    })]
                })
            })]
        })
    }, PieDisplay$2 = r => {
        const R = React.useRef(null), y = React.useRef(r.percentage), E = React.useRef(r.percentage), C = React.useRef(-1),
            x = () => {
                var L;
                return (L = R.current) == null ? void 0 : L.getContext("2d")
            };
        React.useEffect(() => {
            B(), N(y.current)
        }, [r.size]), React.useEffect(() => {
            cancelAnimationFrame(C.current), E.current = y.current;
            let L = 0;
            const O = r.percentage - E.current;
            let D = z => {
                L || (L = z);
                const F = z - L;
                if (!F) {
                    C.current = requestAnimationFrame(D);
                    return
                }
                L = z;
                const _e = F / r.speed, Y = O * _e;
                y.current = O > 0 ? Math.min(y.current + Y, r.percentage) : Math.max(y.current + Y, r.percentage), B(), N(y.current), O > 0 && y.current < r.percentage || O < 0 && y.current > r.percentage ? C.current = requestAnimationFrame(D) : E.current = y.current
            };
            return O !== 0 && (C.current = requestAnimationFrame(D)), () => cancelAnimationFrame(C.current)
        }, [r.percentage, r.speed]);
        const B = () => {
            const L = x();
            L && L.clearRect(0, 0, r.size, r.size)
        }, N = L => {
            const O = x();
            O && (O.beginPath(), O.strokeStyle = r.outline, O.lineWidth = r.thickness, O.arc(r.size / 2, r.size / 2, (r.size - r.thickness) / 2, -Math.PI / 2, 2 * Math.PI * L / 100 - Math.PI / 2), O.stroke())
        };
        return jsx("canvas", {ref: R, width: `${r.size}px`, height: `${r.size}px`})
    }, Statistic = r => {
        const [R, y] = React.useState(r.percentage.toString()), E = React.useRef(r.percentage), C = React.useRef(-1),
            x = 250, B = 2;
        return React.useEffect(() => {
            const L = (r.percentage - E.current) / x;
            let O = 0;
            const D = z => {
                O || (O = z);
                let F = L * (z - O);
                E.current += F, E.current = L > 0 ? Math.min(E.current, r.percentage) : Math.max(E.current, r.percentage), y(E.current.toFixed(0)), O = z, (L > 0 && E.current < r.percentage || L < 0 && E.current > r.percentage) && requestAnimationFrame(D)
            };
            return C.current = requestAnimationFrame(D), () => cancelAnimationFrame(C.current)
        }, [r.percentage]), jsxs("div", {
            className: "pie_display_container",
            children: [jsx("div", {
                className: "statistic_background",
                style: {width: `${r.size - B}px`, borderColor: r.color}
            }), jsx(PieDisplay$2, {
                size: r.size,
                outline: r.color,
                thickness: B,
                percentage: r.percentage,
                speed: x
            }), jsx("div", {className: "pie_display_label", children: `${R}%`})]
        })
    }, CentralizedBetTable = "", Responsive$E = "", CommissionToggle$1 = "", Responsive$D = "", toggle = "",
    Toggle = ({toggleKey: r, checked: R, disabled: y, onChange: E}) => {
        const C = () => {
            E(!R)
        };
        return jsxs("label", {
            className: "toggle_switch",
            "aria-disabled": y,
            children: [jsx("input", {
                type: "checkbox",
                id: r.toString(),
                checked: R,
                onChange: C
            }), jsx("span", {className: "slider round"})]
        })
    };
var COMM_TYPE = (r => (r[r.NONE = 0] = "NONE", r[r.COMM = 1] = "COMM", r[r.NO_COMM = 2] = "NO_COMM", r))(COMM_TYPE || {});
const CommissionToggle = () => {
        const {t: r} = useTranslation(), {
            settings: R,
            changeSetting: y
        } = React.useContext(SettingsContext), [E] = React.useContext(UserInfoContext);
        return E.player.isFreeOfCommission ? isDesktop$1 ? jsxs("div", {
            className: "no_commission",
            children: [jsx(Toggle, {
                toggleKey: "no_commission",
                checked: R.noCommission,
                onChange: C => y("noCommission", C)
            }), jsx("div", {children: r("game_table.baccarat.no_comm")})]
        }) : jsx("button", {
            className: "no_commission",
            onClick: () => y("noCommission", !R.noCommission),
            "aria-checked": R.noCommission,
            children: jsx("div", {children: r("game_table.baccarat.no_comm")})
        }) : null
    }, BaccaratPlayType$1 = "", Responsive$C = "", Drawer$1 = "", Responsive$B = "",
    useHonorDrawerHook = ({hidden: r, containerRef: R, setDragging: y}) => {
        const E = React.useRef(window.innerHeight);
        let {isVirtualKeyboardOpen: C} = React.useContext(GamesLayoutContainerContext);
        React.useEffect(() => {
            E.current = window.innerHeight
        }, []), React.useEffect(() => {
            isHonor && !C && !r && (R.current.style.top = "unset", R.current.style.transform = `translateY(${-E.current}px)`, setTimeout(() => {
                y(!1)
            }, 100))
        }, [C]), React.useEffect(() => {
            if (!isHonor) return;
            const x = () => {
                C && !r ? E.current - window.innerHeight > 0 && (R.current.style.transform = "unset", R.current && (R.current.style.top = "0px"), y(!0)) : E.current = window.innerHeight
            };
            return window.addEventListener("resize", x), () => {
                window.removeEventListener("resize", x)
            }
        }, [C, r, E.current])
    }, POPUP_TIME = 200;
var DRAWER_INITIAL_HEIGHT_LEVELS = (r => (r.HIGH = "drawer_height_high", r.MID = "drawer_height_mid", r.LOW = "drawer_height_low", r))(DRAWER_INITIAL_HEIGHT_LEVELS || {});
const useDrawer = r => {
    const [R, y] = React.useState(!0), [E, C] = React.useState("");
    return React.useEffect(() => {
        R && C("")
    }, [R]), React.useEffect(() => {
        E != "" && setTimeout(() => {
            var x;
            (x = r.current) == null || x.onOpen(), y(!1)
        }, 100)
    }, [E]), {drawerHidden: R, setDrawerHidden: y, setPopup: C, popup: E}
}, Drawer = React.forwardRef((r, R) => {
    let {initialHeight: y, withCloseBtn: E = !1, dragContentToClose: C} = r;
    const {orientation: x} = useDeviceOrientation(), B = React.useContext(ScalableContainerScaleContext),
        N = React.useRef(null),
        L = React.useRef(null), [O, D] = React.useState("drawer_height_high"), [z, F] = React.useState(0), [_e, Y] = React.useState(!1), [H, me] = React.useState(!0), [ce, ie] = React.useState(x.includes("portrait") ? 1 : B), [Be, ve] = React.useState(0),
        Re = React.useMemo(() => x, [x]);
    isHonor && useHonorDrawerHook({
        hidden: H,
        containerRef: L,
        setDragging: Y
    }), C ?? (C = !1), React.useImperativeHandle(R, () => ({
        onOpen: () => {
            me(!1), F(Be)
        }, close: () => {
            F(0), setTimeout(() => {
                me(!0)
            }, 200)
        }
    }), [Be]);
    const Ce = () => {
        L.current && ve(L.current.getBoundingClientRect()[x.includes("portrait") ? "height" : "width"] / ce)
    };
    React.useEffect(() => {
        H || Ce()
    }, [H]), React.useEffect(() => {
        Be > 0 && !H && F(Be)
    }, [Be]), React.useEffect(() => {
        Ce()
    }, [L.current]), React.useEffect(() => {
        y && D(y)
    }, [y]), React.useEffect(() => {
        const we = () => {
            window.innerHeight < screen.height || (Ne(), setTimeout(() => {
                Ce()
            }, 200))
        };
        return window.addEventListener("resize", we), () => window.removeEventListener("resize", we)
    }, [ce, x]), React.useEffect(() => {
        H || isMobile$1 && Ne()
    }, [Re]), React.useEffect(() => ie(x.includes("portrait") ? 1 : ce), [x, ce]), React.useEffect(() => r.setDrawerHidden(H), [H]), React.useEffect(() => {
        var ke, Fe, $e, Ve;
        const we = Je => {
            Y(!0);
            const Qe = Je.touches[0][x.includes("portrait") ? "pageY" : "pageX"],
                Ze = L.current.getBoundingClientRect()[x.includes("portrait") ? "top" : "left"], qe = De => {
                    const Xe = De.touches[0][x.includes("portrait") ? "pageY" : "pageX"] - Qe, He = Math.max(0, Xe);
                    F((Be - He) / ce)
                }, ze = () => {
                    document.removeEventListener("touchmove", qe), document.removeEventListener("touchend", ze), Y(!1), L.current.getBoundingClientRect()[x.includes("portrait") ? "top" : "left"] - Ze > L.current.getBoundingClientRect()[x.includes("portrait") ? "height" : "width"] / 3 ? Ne() : F(Be)
                };
            document.addEventListener("touchmove", qe), document.addEventListener("touchend", ze)
        }, Me = Je => {
            Y(!0);
            const Qe = Je[x.includes("portrait") ? "pageY" : "pageX"],
                Ze = L.current.getBoundingClientRect()[x.includes("portrait") ? "top" : "left"], qe = De => {
                    const Xe = De[x.includes("portrait") ? "pageY" : "pageX"] - Qe, He = Math.max(0, Xe);
                    F((Be - He) / ce)
                }, ze = () => {
                    document.removeEventListener("mousemove", qe), document.removeEventListener("mouseup", ze), Y(!1), L.current.getBoundingClientRect()[x.includes("portrait") ? "top" : "left"] - Ze > L.current.getBoundingClientRect()[x.includes("portrait") ? "height" : "width"] / 3 ? Ne() : F(Be)
                };
            document.addEventListener("mousemove", qe), document.addEventListener("mouseup", ze)
        };
        return C ? ((ke = L.current) == null || ke.addEventListener("touchstart", we), (Fe = L.current) == null || Fe.addEventListener("mousedown", Me)) : (($e = N.current) == null || $e.addEventListener("touchstart", we), (Ve = N.current) == null || Ve.addEventListener("mousedown", Me)), () => {
            var Je, Qe, Ze, qe;
            C ? ((Je = L.current) == null || Je.removeEventListener("touchstart", we), (Qe = L.current) == null || Qe.removeEventListener("mousedown", Me)) : ((Ze = N.current) == null || Ze.removeEventListener("touchstart", we), (qe = N.current) == null || qe.removeEventListener("mousedown", Me))
        }
    }, [Be, x]);
    const Ne = () => {
        F(0), window.setTimeout(() => me(!0), POPUP_TIME)
    };
    return jsxs("section", {
        id: "drawer",
        "aria-hidden": H,
        children: [jsx("button", {id: "drawer_block", onClick: Ne}), jsxs("section", {
            id: "drawer_container",
            className: `${O}`,
            ref: L,
            style: {transform: `translateY(${-z}px)`},
            "aria-busy": _e,
            children: [jsxs("div", {
                className: "knob_container",
                children: [jsx("button", {}), jsx("div", {className: "knob", ref: N}), E && jsx("button", {
                    onClick: Ne,
                    className: "svg_close extended-button"
                }) || jsx("button", {})]
            }), r.children]
        })]
    })
});
Drawer.displayName = "Drawer";
const BACCARAT_PLAY_TYPE_PRESET = [{
    type: "default",
    betAreas: [BACCARAT_BET_TYPE.B_BONUS, BACCARAT_BET_TYPE.P_BONUS, BACCARAT_BET_TYPE.B_PAIR, BACCARAT_BET_TYPE.P_PAIR, BACCARAT_BET_TYPE.PERFECT_PAIR, BACCARAT_BET_TYPE.EITHER_PAIR]
}, {type: "basic", betAreas: [BACCARAT_BET_TYPE.B_PAIR, BACCARAT_BET_TYPE.P_PAIR]}, {
    type: "natural",
    betAreas: [BACCARAT_BET_TYPE.B_PAIR, BACCARAT_BET_TYPE.P_PAIR, BACCARAT_BET_TYPE.B_NATURAL, BACCARAT_BET_TYPE.P_NATURAL, BACCARAT_BET_TYPE.LUCKY_6]
}, {
    type: "tiger",
    betAreas: [BACCARAT_BET_TYPE.TIGER, BACCARAT_BET_TYPE.TIGER_BIG, BACCARAT_BET_TYPE.TIGER_SMALL, BACCARAT_BET_TYPE.TIGER_TIE, BACCARAT_BET_TYPE.TIGER_PAIR]
}, {
    type: "fabulous_4",
    betAreas: [BACCARAT_BET_TYPE.B_FABULOUS_4, BACCARAT_BET_TYPE.P_FABULOUS_4, BACCARAT_BET_TYPE.B_PRECIOUS_PAIR, BACCARAT_BET_TYPE.P_PRECIOUS_PAIR]
}, {
    type: "super",
    betAreas: [BACCARAT_BET_TYPE.B_BLACK, BACCARAT_BET_TYPE.P_BLACK, BACCARAT_BET_TYPE.B_RED, BACCARAT_BET_TYPE.P_RED, BACCARAT_BET_TYPE.ANY_6]
}], BaccaratPlayType = () => {
    const {t: r, i18n: R} = useTranslation(), {settings: y, changeSetting: E} = React.useContext(SettingsContext),
        C = React.useRef(null), {setDrawerHidden: x, popup: B, setPopup: N} = useDrawer(C);
    React.useEffect(() => {
        if (Object.values(y.baccaratBetTypes).filter(z => z).length < 2) {
            let z = Object.fromEntries(Object.keys(BACCARAT_BET_TYPE).filter(F => !isNaN(parseInt(F))).filter(F => ![BACCARAT_BET_TYPE.BANKER, BACCARAT_BET_TYPE.TIE, BACCARAT_BET_TYPE.PLAYER].includes(parseInt(F))).map(F => [parseInt(F), !1]));
            BACCARAT_PLAY_TYPE_PRESET[0].betAreas.forEach(F => z[F] = !0), E("baccaratBetTypes", z)
        }
    }, []);
    const L = z => {
            var _e;
            let F = Object.fromEntries(Object.keys(BACCARAT_BET_TYPE).filter(Y => !isNaN(parseInt(Y))).filter(Y => ![BACCARAT_BET_TYPE.BANKER, BACCARAT_BET_TYPE.TIE, BACCARAT_BET_TYPE.PLAYER].includes(parseInt(Y))).map(Y => [parseInt(Y), !1]));
            z.forEach(Y => F[Y] = !0), E("baccaratBetTypes", F), N(""), (_e = C.current) == null || _e.close()
        },
        O = (z, F) => BACCARAT_BET_TYPE[F].startsWith("B_") ? "red" : BACCARAT_BET_TYPE[F].startsWith("P_") ? "blue" : "yellow",
        D = React.useMemo(() => jsxs("section", {
            className: "baccarat_play_type",
            children: [jsx("h1", {children: r("baccarat_gameplay.switch")}), jsx("div", {
                className: "play_types",
                children: BACCARAT_PLAY_TYPE_PRESET.map(z => jsxs("button", {
                    onClick: () => L(z.betAreas),
                    "aria-checked": z.betAreas.every(F => y.baccaratBetTypes[F]) && z.betAreas.length === Object.values(y.baccaratBetTypes).filter(F => F).length,
                    children: [jsx("h3", {children: r(`baccarat_gameplay.${z.type}`)}), jsxs("div", {
                        className: `bet_table ${z.type}`,
                        children: [jsx("div", {
                            className: "blue",
                            style: {gridArea: "player"},
                            children: r(`bet_type.${BACCARAT_BET_TYPE_MAP[BACCARAT_BET_TYPE.PLAYER]}`)
                        }), jsx("div", {
                            className: "green",
                            style: {gridArea: "tie"},
                            children: r(`bet_type.${BACCARAT_BET_TYPE_MAP[BACCARAT_BET_TYPE.TIE]}`)
                        }), jsx("div", {
                            className: "red",
                            style: {gridArea: "banker"},
                            children: r(`bet_type.${BACCARAT_BET_TYPE_MAP[BACCARAT_BET_TYPE.BANKER]}`)
                        }), z.betAreas.map(F => jsx("div", {
                            className: `${BACCARAT_BET_TYPE[F].toLowerCase()} ${O(z, F)}`,
                            style: {gridArea: BACCARAT_BET_TYPE[F].toLowerCase()},
                            children: r(`bet_type.${BACCARAT_BET_TYPE_MAP[F]}`)
                        }, F))]
                    })]
                }, z.type))
            })]
        }), [y.baccaratBetTypes, R.language]);
    return jsxs(Fragment, {
        children: [isDesktop$1 && B === "play_type" && D, isMobile$1 && jsx(Drawer, {
            ref: C,
            initialHeight: DRAWER_INITIAL_HEIGHT_LEVELS.HIGH,
            setDrawerHidden: x,
            children: D
        }), jsxs("button", {
            className: "switch_gameplay",
            onClick: () => N(B === "" ? "play_type" : ""),
            children: [jsx("div", {className: "svg_baccarat_switch"}), jsx(Tooltip, {
                className: "playtype_tooltip",
                children: r("baccarat_gameplay.switch")
            })]
        })]
    })
}, useToastMessage = (r = "", R = 3e3) => {
    const [y, E] = React.useState(r), [C, x] = React.useState(!1);
    return React.useEffect(() => {
        let N;
        return C && (N = setTimeout(() => {
            x(!1)
        }, R)), () => {
            clearTimeout(N)
        }
    }, [C, R]), {
        message: y, visible: C, showToast: N => {
            E(N), x(!0)
        }
    }
}, BaccaratBetTable = r => {
    var Je;
    const {t: R} = useTranslation(), y = useAvailableChips(),
        E = React.useContext(ScalableContainerScaleContext), {settings: C} = React.useContext(SettingsContext),
        x = React.useContext(GameTableBetAmountContext), B = React.useContext(GameTableBetStateContext),
        N = React.useContext(GameTableBetContext), L = React.useContext(GameTablePendingBetAmountContext),
        O = React.useContext(GameTablePayoutContext), D = useDisplayCurrency(), {
            orientation: z,
            isForceLandscape: F
        } = useDeviceOrientation(), [_e, Y] = React.useState(Object.values(BACCARAT_BET_TYPE).map(Qe => ({
            color: y[0].color,
            amount: Helper.formatAbbrMoney(x[Qe])
        }))), H = useChips({chipAttrs: _e, flat: F && B === BET_STATE.NO_BET}),
        me = useBetChip(O, x, L, H), [ce, ie] = React.useState(Object.fromEntries(Object.keys(BACCARAT_BET_TYPE).filter(Qe => !Number.isNaN(parseInt(Qe))).map(Qe => [Qe, !1]))),
        Be = Helper.useOdds(), {message: ve, showToast: Re, visible: Ce} = useToastMessage("", 2e3),
        Ne = React.useCallback(Qe => {
            let Ze = [];
            if (Qe) switch (B) {
                case BET_STATE.BETTING:
                    Ze.push("betting");
                    break;
                case BET_STATE.NO_BET:
                    Ze.push("no_bet");
                    break
            }
            return Ze.join(" ")
        }, [B]);
    useBetAmountUpdateChipEffect(x, L, _e, Y), usePayoutUpdateChipEffect(x, L, O, _e, Y);
    const we = Qe => {
        if (B === BET_STATE.NO_BET) return;
        if (r.roadMap.length >= SIDE_BET_LIMIT_30.rounds && SIDE_BET_LIMIT_30.betTypes.includes(BACCARAT_BET_TYPE_MAP[Qe])) {
            Re(R("bet_type.tips.no_bet_after").replaceAll("%1", "30").replaceAll("%2", R(`bet_type.${BACCARAT_BET_TYPE_MAP[Qe]}`)));
            return
        }
        if (r.roadMap.length >= SIDE_BET_LIMIT_50.rounds && SIDE_BET_LIMIT_50.betTypes.includes(BACCARAT_BET_TYPE_MAP[Qe])) {
            Re(R("bet_type.tips.no_bet_after").replaceAll("%1", "50").replaceAll("%2", R(`bet_type.${BACCARAT_BET_TYPE_MAP[Qe]}`)));
            return
        }
        const Ze = x[BACCARAT_BET_TYPE.BANKER] ? COMM_TYPE.COMM : x[BACCARAT_BET_TYPE.BANKER_NO_COMM] ? COMM_TYPE.NO_COMM : COMM_TYPE.NONE;
        if (Ze === COMM_TYPE.COMM && Qe === BACCARAT_BET_TYPE.BANKER_NO_COMM || Ze === COMM_TYPE.NO_COMM && Qe === BACCARAT_BET_TYPE.BANKER) {
            Re(R(`bet_type.tips.${x[BACCARAT_BET_TYPE.BANKER] ? "comm" : "no_comm"}_betted`));
            return
        }
        N([BACCARAT_BET_TYPE_MAP[Qe]])
    };
    React.useEffect(() => {
        let Qe = Object.fromEntries(Object.keys(BACCARAT_BET_TYPE).filter(qe => !Number.isNaN(parseInt(qe))).map(qe => [qe, !1]));
        const Ze = {0: BACCARAT_BET_TYPE.TIE, 1: BACCARAT_BET_TYPE.BANKER, 2: BACCARAT_BET_TYPE.PLAYER};
        Qe[Ze[r.winResult[0]]] = !0, Qe[BACCARAT_BET_TYPE.BANKER_NO_COMM] = r.winResult[0] === "1", Qe[BACCARAT_BET_TYPE.B_PAIR] = ["1", "3", "4", "6"].includes(r.winResult[3]), Qe[BACCARAT_BET_TYPE.P_PAIR] = ["2", "3", "5", "6"].includes(r.winResult[3]), Qe[BACCARAT_BET_TYPE.EITHER_PAIR] = parseInt(r.winResult[3]) >= 1, Qe[BACCARAT_BET_TYPE.PERFECT_PAIR] = parseInt(r.winResult[3]) >= 4, Qe[BACCARAT_BET_TYPE.TIGER_PAIR] = parseInt(r.winResult[3]) >= 1, Qe[BACCARAT_BET_TYPE.B_BONUS] = ["3", "4", "5", "6"].includes(r.winResult[4]), Qe[BACCARAT_BET_TYPE.P_BONUS] = ["7", "8"].includes(r.winResult[4]), Qe[BACCARAT_BET_TYPE.TIGER] = ["1", "2", "3", "4"].includes(r.winResult[4]), Qe[BACCARAT_BET_TYPE.TIGER_BIG] = ["1", "3"].includes(r.winResult[4]), Qe[BACCARAT_BET_TYPE.TIGER_SMALL] = ["2", "4"].includes(r.winResult[4]), Qe[BACCARAT_BET_TYPE.TIGER_TIE] = r.winResult[4] === "9", Qe[BACCARAT_BET_TYPE.B_FABULOUS_4] = ["1", "3", "5", "7"].includes(r.winResult[5]), Qe[BACCARAT_BET_TYPE.P_FABULOUS_4] = ["2", "4", "6", "8"].includes(r.winResult[5]), Qe[BACCARAT_BET_TYPE.B_PRECIOUS_PAIR] = ["3", "4", "7", "8", "9", "B"].includes(r.winResult[5]), Qe[BACCARAT_BET_TYPE.P_PRECIOUS_PAIR] = ["5", "6", "7", "8", "A", "B"].includes(r.winResult[5]), Qe[BACCARAT_BET_TYPE.B_BLACK] = ["1", "5", "7", "A", "E", "G"].includes(r.winResult[6]), Qe[BACCARAT_BET_TYPE.B_RED] = ["2", "6", "8", "B", "F", "H"].includes(r.winResult[6]), Qe[BACCARAT_BET_TYPE.P_BLACK] = ["3", "6", "7", "C", "F", "G"].includes(r.winResult[6]), Qe[BACCARAT_BET_TYPE.P_RED] = ["4", "5", "8", "D", "E", "H"].includes(r.winResult[6]), Qe[BACCARAT_BET_TYPE.ANY_6] = parseInt(r.winResult[6], 18) >= 9;
        for (const [qe, ze] of Object.entries(Qe)) qe !== "undefined" && ze && (r.roadMap.length >= SIDE_BET_LIMIT_30.rounds && SIDE_BET_LIMIT_30.betTypes.includes(BACCARAT_BET_TYPE_MAP[qe]) || r.roadMap.length >= SIDE_BET_LIMIT_50.rounds && SIDE_BET_LIMIT_50.betTypes.includes(BACCARAT_BET_TYPE_MAP[qe])) && (Qe[qe] = !1);
        ie(Qe)
    }, [r.winResult]);
    const Me = React.useCallback(Qe => {
        if (r.betStatistics[Qe % 3].amounts === 0) return 0;
        let Ze = r.betStatistics.map(ze => ze.amounts), qe = Ze.reduce((ze, De) => ze + De, 0);
        return Qe !== BACCARAT_BET_TYPE.TIE ? Math.round(Ze[Qe % 3] / qe * 100) : 100 - Me(BACCARAT_BET_TYPE.PLAYER) - Me(BACCARAT_BET_TYPE.BANKER)
    }, [r.betStatistics]), ke = React.useCallback((Qe, Ze, qe, ze, De, Xe, He) => jsxs("button", {
        className: `${Qe} main_bet`,
        style: {gridArea: Ze},
        onClick: we.bind(null, ze),
        "aria-checked": ce[ze],
        "aria-disabled": ze === BACCARAT_BET_TYPE.BANKER && !!x[BACCARAT_BET_TYPE.BANKER_NO_COMM] || ze === BACCARAT_BET_TYPE.BANKER_NO_COMM && !!x[BACCARAT_BET_TYPE.BANKER],
        children: [(isDesktop$1 || B === BET_STATE.BETTING) && C.showBettingStatistics && jsxs("div", {
            className: "bet_area_statistcis",
            children: [jsx(Statistic, {
                percentage: Me(ze % 3),
                color: qe,
                size: isDesktop$1 ? 46 : z.includes("portrait") ? 30 : 20 / E
            }), jsx("div", {children: Helper.formatCurrency(D, Helper.formatMoney(r.betStatistics[ze % 3].amounts / 100))}), jsxs("div", {
                className: "bet_total",
                children: [jsx("div", {className: "svg_person"}), r.betStatistics[ze % 3].people]
            })]
        }), He && Ze !== "tie" ? jsx("div", {
            className: "bet_area_results",
            children: B === BET_STATE.NO_BET && jsxs(Fragment, {
                children: [jsx("div", {children: He.some(Ge => !["-3", "-2"].includes(Ge)) && He.reduce((Ge, Le) => Ge + (parseInt(Le) % 100 >= 0 ? parseInt(Le) % 100 > 10 ? 10 : parseInt(Le) % 100 : 0), 0) % 10}), jsx(BaccaratGameResults, {
                    side: Ze,
                    results: He
                })]
            })
        }) : jsx("div", {}), jsxs("div", {
            className: "bet_area_info",
            children: [ze === BACCARAT_BET_TYPE.BANKER_NO_COMM && jsx("div", {
                className: "no_comm_label",
                children: R("game_table.baccarat.no_comm")
            }), jsx("div", {className: "title", children: R(`bet_type.${De}`)}), jsx("div", {
                className: "odds",
                children: Be(Xe)
            }), me(ze)]
        })]
    }), [x, ce, B, me, r.betStatistics, H, N, B, C.showBettingStatistics, E, z]), Fe = Qe => {
        let Ze = payoutArr[GameType.Baccarat].find(qe => qe.betType.toString() === BACCARAT_BET_TYPE_MAP[Qe].toString());
        return Ze == null ? void 0 : Ze.payout
    }, $e = React.useCallback(Qe => {
        const Ze = r.roadMap.length, qe = BACCARAT_BET_TYPE_MAP[Qe];
        let ze = SIDE_BET_LIMIT_50.betTypes.includes(qe) && Ze >= SIDE_BET_LIMIT_50.rounds || SIDE_BET_LIMIT_30.betTypes.includes(qe) && Ze >= SIDE_BET_LIMIT_30.rounds,
            De = Fe(Qe);
        return De && De.includes("-") && (De = void 0), jsxs("button", {
            className: `${BACCARAT_BET_TYPE[Qe].toLowerCase()} ${BACCARAT_BET_TYPE[Qe].startsWith("B_") ? "red" : BACCARAT_BET_TYPE[Qe].startsWith("P_") ? "blue" : "yellow"}`,
            style: {gridArea: BACCARAT_BET_TYPE[Qe].toLowerCase()},
            onClick: we.bind(null, Qe),
            "aria-disabled": ze,
            "aria-checked": !ze && ce[Qe],
            children: [jsx("div", {
                className: "title",
                children: R(`bet_type.${qe}`)
            }), De && jsx("div", {className: "odds", children: Be(De)}), me(Qe)]
        }, Qe)
    }, [ce, B, me, H, N, r.roadMap]), Ve = (Je = BACCARAT_PLAY_TYPE_PRESET.find(Qe => {
        let Ze = 0;
        for (const [qe, ze] of Object.entries(C.baccaratBetTypes)) ze && Ze++;
        return Qe.betAreas.every(qe => C.baccaratBetTypes[qe]) && Qe.betAreas.length === Ze
    })) == null ? void 0 : Je.type;
    return jsx(BetTable, {
        children: jsxs("div", {
            className: `bet_table_container baccarat_bet_table ${Ne(!0)} ${Ve}`,
            children: [jsx("div", {className: "background"}), ke("blue", "player", "#47B8FF59", BACCARAT_BET_TYPE.PLAYER, BetType.B_Player, 1, r.playerCards), ke("green", "tie", "#BCFF8959", BACCARAT_BET_TYPE.TIE, BetType.B_Tie, 8), ke("red", "banker", "#FF9A8959", C.noCommission ? BACCARAT_BET_TYPE.BANKER_NO_COMM : BACCARAT_BET_TYPE.BANKER, C.noCommission ? BetType.B_BankNoComm : BetType.B_Banker, C.noCommission ? 1 : .95, r.bankerCards), Object.entries(C.baccaratBetTypes).filter(Qe => Qe[1]).map(Qe => $e(parseInt(Qe[0]))), Ce && jsx("div", {
                className: "bet_area_warning",
                "aria-hidden": !Ce,
                "data-message": ve
            })]
        })
    })
}, Responsive$A = "", RouletteGameTable$1 = "", Responsive$z = "", DraggableFrame = "";
var DRAGGABLE_FRAME_TRANSFORM = (r => (r.NORMAL = "normal", r.FULL_WIDTH = "fullWidth", r.MINI = "mini", r.CUSTOMIZE = "customize", r.NONE = "none", r))(DRAGGABLE_FRAME_TRANSFORM || {});
let initState$2 = {
    transfromState: "customize",
    frame: {top: 0, left: 0, width: 0, height: 0},
    draggable: !0,
    animate: !0,
    zIndex: 0
};
const useDragVideoFrame = ({
                               handleWidth: r,
                               parentRef: R,
                               bounds: y = {topBound: 0, leftBound: 0, rightBound: 0, bottomBound: 0},
                               status: E = "none",
                               innerAspectRatio: C = {w: 1280, h: 720},
                               setFrameRect: x,
                               onStateChange: B
                           }) => {
    let [N, L] = React.useState(!0);
    const O = (_e = initState$2, Y = {type: "none", payload: {animate: !0, draggable: !0}}) => {
        const H = (me, ce) => {
            if (R == null) return {top: 0, left: 0, width: 0, height: 0};
            if (ce != null) return ce;
            let ie = R.current.getBoundingClientRect();
            switch (me) {
                case"none": {
                    let Be = ie == null ? void 0 : ie.width,
                        ve = Math.min(Be * (C.h / C.w), ie == null ? void 0 : ie.height), Re = ve * (C.w / C.h),
                        Ce = (ie == null ? void 0 : ie.width) / 2;
                    return {top: (ie == null ? void 0 : ie.height) / 2, left: Ce, width: Re, height: ve}
                }
                case"fullWidth": {
                    let Be = ie == null ? void 0 : ie.width,
                        ve = Math.min(Be * (C.h / C.w), ie == null ? void 0 : ie.height), Re = ve * (16 / 9),
                        Ce = (ie == null ? void 0 : ie.width) / 2;
                    return {top: (ie == null ? void 0 : ie.height) / 2, left: Ce, width: Re, height: ve}
                }
                case"normal": {
                    let Be = (ie == null ? void 0 : ie.width) * .8,
                        ve = Math.min(Be * (C.h / C.w), ie == null ? void 0 : ie.height), Re = ve * (C.w / C.h),
                        Ce = (ie == null ? void 0 : ie.width) / 2;
                    return {top: (ie == null ? void 0 : ie.height) / 2, left: Ce, width: Re, height: ve}
                }
                case"mini": {
                    let Be = (ie == null ? void 0 : ie.width) * .4;
                    r && r > 0 && (Be = r);
                    let ve = Math.min(Be * (C.h / C.w), ie == null ? void 0 : ie.height), Re = ve * (C.w / C.h),
                        Ce = Re / 2 + y.leftBound;
                    return {
                        top: (ie == null ? void 0 : ie.height) - ve / 2 - y.bottomBound,
                        left: Ce,
                        width: Re,
                        height: ve
                    }
                }
                default:
                    return {top: 0, left: 0, width: 0, height: 0}
            }
        };
        switch (Y.type) {
            case"normal":
                return Object.assign({..._e}, {
                    transfromState: "normal",
                    frame: H("normal"),
                    draggable: Y.payload.draggable,
                    animate: Y.payload.animate,
                    zIndex: 1
                });
            case"mini":
                return Object.assign({..._e}, {
                    transfromState: "mini",
                    frame: H("mini"),
                    draggable: Y.payload.draggable,
                    animate: Y.payload.animate,
                    zIndex: 1
                });
            case"fullWidth":
                return Object.assign({..._e}, {
                    transfromState: "fullWidth",
                    frame: H("fullWidth"),
                    draggable: Y.payload.draggable,
                    animate: Y.payload.animate,
                    zIndex: 1
                });
            case"none":
                return Object.assign({..._e}, {
                    transfromState: "none",
                    frame: H("none"),
                    draggable: !1,
                    animate: !1,
                    zIndex: 0
                });
            default:
                return _e
        }
    }, [D, z] = React.useReducer(O, initState$2);
    return React.useEffect(() => {
        D.transfromState != "customize" && (B && B(D), x && x({
            animaiton: D.animate,
            frameRect: D.frame,
            zIndex: D.zIndex
        }))
    }, [D]), React.useEffect(() => {
    }, [N]), {
        transform: React.useCallback((_e, Y) => {
            z && z({type: _e, payload: Y})
        }, [z, N]), state: D, setEnable: L
    }
}, DragVideoFrame = ({
                         enable: r = !0,
                         handleWidth: R,
                         status: y = "none",
                         innerAspectRatio: E = {w: 1280, h: 720},
                         bounds: {topBound: C = 0, leftBound: x = 0, bottomBound: B = 0, rightBound: N = 0},
                         children: L
                     }) => {
    let O = React.useRef(), D = React.useRef(), z = React.useRef();
    React.useRef(!0);
    let F = 0, _e = 0, Y = 0, H = React.useRef(!1);
    const me = ({animaiton: $e, frameRect: Ve, zIndex: Je}) => {
        let Qe = O.current;
        Qe != null && ($e && Qe.classList.add("animate"), Qe.style.setProperty("z-index", Je.toString()), $e && Qe.classList.add("fadeIn"), Qe.style.setProperty("width", Ve.width + "px"), (isMobile_1 || isTablet_1) && Qe.style.setProperty("height", Ve.height + "px"), Qe.style.setProperty("top", Ve.top + "px"), Qe.style.setProperty("left", Ve.left + "px"))
    }, ce = $e => {
        switch ($e.transfromState) {
            case"none":
            case"fullWidth": {
                let Ve = z.current.getBoundingClientRect().width;
                O.current.style.setProperty("max-width", Ve + "px")
            }
                break;
            default: {
                let Ve = z.current.getBoundingClientRect().width - x - N;
                O.current.style.setProperty("max-width", Ve + "px")
            }
                break
        }
    };
    let {state: ie, transform: Be, setEnable: ve} = useDragVideoFrame({
        bounds: {
            topBound: C,
            leftBound: x,
            bottomBound: B,
            rightBound: N
        }, parentRef: z, status: y, setFrameRect: me, onStateChange: ce, handleWidth: R
    });
    React.useEffect(() => (ve(r), r && (ke(), Ce(z.current, O.current, D.current, E.w / E.h)), () => {
        document.onmouseup = null, document.onmousemove = null, document.ontouchend = null, document.ontouchmove = null
    }), [r]), React.useEffect(() => {
        r && Ce(z.current, O.current, D.current, E.w / E.h), ie.draggable || Re()
    }, [ie, C, x, B, N]);
    const Re = () => {
        document.onmouseup = null, document.onmousemove = null, document.ontouchend = null, document.ontouchmove = null, O.current.ontouchend = null, O.current.ontouchmove = null
    };
    let Ce = React.useCallback(($e, Ve, Je, Qe) => {
        let Ze = 0, qe = 0, ze = 0, De = 0, Xe = 0, He = 0;
        Je.onmousedown = We, Je.ontouchstart = Ge;

        function Ge(nt) {
            if (!ie.draggable) return;
            if (nt.touches.length === 2) {
                nt = nt || window.event, nt.preventDefault();
                const lt = nt.touches[0], Bt = nt.touches[1];
                F = Math.hypot(Bt.clientX - lt.clientX, Bt.clientY - lt.clientY), _e = Ve.offsetWidth, Y = Ve.offsetHeight
            }
            const tt = nt.touches[0];
            ze = tt.clientX, De = tt.clientY, O.current.ontouchend = et, O.current.ontouchmove = Le
        }

        function Le(nt) {
            if (!ie.draggable) return;
            if (nt.touches.length === 2) {
                const vt = nt.touches[0], ea = nt.touches[1],
                    ta = Math.hypot(ea.clientX - vt.clientX, ea.clientY - vt.clientY) / F, na = _e * ta, Aa = Y * ta;
                if (Xe = na, He = Aa, Qe) {
                    const fa = na / Aa, ca = Qe;
                    fa > ca ? Xe = Aa * ca : He = na / ca
                }
                const Ea = $e.getBoundingClientRect(), Sa = Ea.width;
                Ea.height;
                let Ga = Sa - x - N;
                Xe = Math.min(Ga !== void 0 ? Ga : 1 / 0, Math.max(0, Xe)), Ve.style.width = `${Xe}px`, Ve.style.height = `${Xe * (720 / 1280)}px`
            }
            const tt = nt.touches[0];
            Ze = ze - tt.clientX, qe = De - tt.clientY, ze = tt.clientX, De = tt.clientY;
            let lt = Ve.offsetLeft - Ze, Bt = Ve.offsetTop - qe;
            const kt = $e.getBoundingClientRect(), At = kt.width, zt = kt.height;
            Xe = Ve.getBoundingClientRect().width, He = Ve.getBoundingClientRect().height;
            const oa = At - Xe + Xe / 2, sa = zt - He + He / 2;
            lt = Math.min(Math.max(Xe / 2 + x, lt), oa - N), Bt = Math.min(Math.max(He / 2 + C, Bt), sa - B), Ve.style.left = lt + "px", Ve.style.top = Bt + "px", nt = nt || window.event, nt.preventDefault()
        }

        function We(nt) {
            ie.draggable && (nt = nt || window.event, nt.preventDefault(), ze = nt.clientX, De = nt.clientY, document.onmouseup = et, document.onmousemove = dt)
        }

        function dt(nt) {
            if (!ie.draggable) return;
            Ze = ze - nt.clientX, qe = De - nt.clientY, ze = nt.clientX, De = nt.clientY;
            let tt = Ve.offsetLeft - Ze, lt = Ve.offsetTop - qe;
            const Bt = $e.getBoundingClientRect(), kt = Bt.width, At = Bt.height;
            Xe = Ve.getBoundingClientRect().width, He = Ve.getBoundingClientRect().height;
            const zt = kt - Xe + Xe / 2, oa = At - He + He / 2;
            tt = Math.min(Math.max(Xe / 2 + x, tt), zt - N), lt = Math.min(Math.max(He / 2 + C, lt), oa - B), Ve.style.left = tt + "px", Ve.style.top = lt + "px", nt = nt || window.event, nt.preventDefault()
        }

        function et() {
            document.onmouseup = null, document.onmousemove = null, document.ontouchend = null, document.ontouchmove = null, O.current.ontouchend = null, O.current.ontouchmove = null
        }
    }, [ie, C, x, B, N]);
    const Ne = React.useRef(y), we = React.useCallback(() => {
        if (!r) {
            Be("none", {animate: !1, draggable: !1});
            return
        }
        Ne.current == "none" && ke({animaiton: !1}), Ne.current == "mini" && Me({animaiton: !1}), Ne.current == "normal" && ke({animaiton: !1}), Ne.current == "fullWidth" && Fe({animaiton: !1})
    }, [r]);
    React.useEffect(() => {
        const $e = new ResizeObserver(Ve => {
            for (const Je of Ve) Je.target === z.current && we()
        });
        return z.current && $e.observe(z.current), () => {
            z.current && $e.unobserve(z.current)
        }
    }, [r]), React.useEffect(() => {
        if (!r) return;
        const $e = new ResizeObserver(Ve => {
            for (const Je of Ve) if (Je.target === O.current && isDesktop_1) {
                if (H.current || !r || ie.transfromState == "fullWidth" || ie.transfromState == "none") return;
                let Qe = Je.target, Ze = Qe.offsetLeft, qe = Qe.offsetTop;
                const ze = z.current.getBoundingClientRect(), De = ze.width, Xe = ze.height;
                let He = Qe.getBoundingClientRect().width, Ge = Qe.getBoundingClientRect().height;
                const Le = De - He + He / 2, We = Xe - Ge + Ge / 2;
                Ze = Math.min(Math.max(He / 2 + x, Ze), Le - N), qe = Math.min(Math.max(Ge / 2 + C, qe), We - B), O.current.style.left = Ze + "px", O.current.style.top = qe + "px"
            }
        });
        return O.current && ($e.unobserve(O.current), $e.observe(O.current)), () => {
            O.current && $e.unobserve(O.current)
        }
    }, [ie, C, x, B, N]), React.useEffect(() => {
        switch (y) {
            case"mini":
                Me(), Ne.current = "mini";
                break;
            case"normal":
                ke(), Ne.current = "normal";
                break;
            case"fullWidth":
                Fe(), Ne.current = "fullWidth";
                break
        }
    }, [y]);
    const Me = ({animaiton: $e = !0} = {}) => {
        H.current = !0, Be("mini", {animate: $e, draggable: !0})
    }, ke = ({animaiton: $e = !0, manual: Ve = !0} = {}) => {
        H.current = !0, Be("normal", {animate: $e, draggable: !0})
    }, Fe = ({animaiton: $e = !0} = {}) => {
        H.current = !0, Be("fullWidth", {animate: $e, draggable: !1})
    };
    return jsx(Fragment, {
        children: jsx("main", {
            ref: z,
            id: "draggable-frame-playground",
            children: jsx("article", {
                ref: O, className: "dragVideoContainer", onTransitionEnd: () => {
                    H.current = !1, O.current.classList.remove("animate"), O.current.classList.remove("fadeIn")
                }, children: jsx("section", {ref: D, id: "clickTarget", children: L})
            })
        })
    })
}, PieDisplay$1 = "", PieDisplay = r => {
    const R = React.useRef(null), y = React.useRef(r.start || 0), E = React.useRef(r.start || 0), C = React.useRef(-1),
        x = () => {
            var O;
            return (O = R.current) == null ? void 0 : O.getContext("2d")
        };
    React.useEffect(() => {
        B(), N()
    }, []), React.useEffect(() => {
        cancelAnimationFrame(C.current), E.current = y.current;
        let O = 0;
        const D = r.percentage - E.current;
        let z = F => {
            O || (O = F);
            const _e = F - O;
            if (!_e) {
                C.current = requestAnimationFrame(z);
                return
            }
            O = F;
            const Y = _e / r.speed, H = D * Y;
            y.current = D > 0 ? Math.min(y.current + H, r.percentage) : Math.max(y.current + H, r.percentage), B(), N(), L(y.current), D > 0 && y.current < r.percentage || D < 0 && y.current > r.percentage ? C.current = requestAnimationFrame(z) : E.current = y.current
        };
        return D !== 0 && (C.current = requestAnimationFrame(z)), () => cancelAnimationFrame(C.current)
    }, [r.size, r.percentage, r.speed]);
    const B = () => {
        const O = x();
        O && O.clearRect(0, 0, r.size, r.size)
    }, N = () => {
        const O = x();
        O && (O.beginPath(), O.fillStyle = "#0009", O.arc(r.size / 2, r.size / 2, (r.size - r.thickness) / 2, 0, 2 * Math.PI), O.fill())
    }, L = O => {
        const D = x();
        if (!D) return;
        const z = (F, _e, Y) => {
            const [H, me, ce] = F.replace(/^#+/, "").match(/.{1,2}/g).map(Me => parseInt(Me, 16)), [ie, Be, ve] = _e.replace(/^#+/, "").match(/.{1,2}/g).map(Me => parseInt(Me, 16)),
                Re = Math.round(H + (ie - H) * Math.sin(Math.PI / 2 * Y)),
                Ce = Math.round(me + (Be - me) * Math.sin(Math.PI / 2 * Y)),
                Ne = Math.round(ce + (ve - ce) * Math.sin(Math.PI / 2 * Y));
            return "#" + ("000000" + (Re << 16 | Ce << 8 | Ne).toString(16)).slice(-6)
        };
        D.beginPath(), D.strokeStyle = z("#DC0508", "#54A11B", O / 100), D.lineWidth = r.thickness, D.arc(r.size / 2, r.size / 2, (r.size - r.thickness) / 2, -Math.PI / 2, 2 * Math.PI * O / 100 - Math.PI / 2), D.stroke()
    };
    return jsx("canvas", {ref: R, width: `${r.size}px`, height: `${r.size}px`})
}, Timer = r => {
    const [R, y] = React.useState(0), [E, C] = React.useState(0),
        x = React.useRef(-1), {play: B} = React.useContext(SoundContext);
    return React.useEffect(() => {
        C(r.duration);
        let N = 0, L = O => {
            N || (N = O);
            let D = Math.ceil(r.duration - (O - N) / 1e3);
            C(D), D <= 0 ? (C(0), cancelAnimationFrame(x.current)) : x.current = requestAnimationFrame(L)
        };
        return x.current = requestAnimationFrame(L), () => cancelAnimationFrame(x.current)
    }, [r.duration, r.timestamp]), React.useEffect(() => {
        !r.playSound || E === 0 || (E <= 5 && E > 0 ? B({id: "five_seconds"}) : E <= 10 && B({id: "ten_seconds"}))
    }, [E]), jsx("div", {
        className: "pie_display_container timer",
        children: E > 0 && jsxs(Fragment, {
            children: [jsx(PieDisplay, {
                size: r.size,
                thickness: r.thickness,
                percentage: R,
                speed: r.duration * 1e3,
                start: 100
            }), jsx("div", {className: `pie_display_label ${r.labelClass}`, children: E})]
        })
    })
}, MobileTimer = r => {
    const [R, y] = React.useState("#FFF"), [E, C] = React.useState(0),
        x = React.useRef(-1), {play: B} = React.useContext(SoundContext), N = (L, O, D) => {
            const [z, F, _e] = L.replace(/^#+/, "").match(/.{1,2}/g).map(Re => parseInt(Re, 16)), [Y, H, me] = O.replace(/^#+/, "").match(/.{1,2}/g).map(Re => parseInt(Re, 16)),
                ce = Math.round(z + (Y - z) * Math.sin(Math.PI / 2 * D)),
                ie = Math.round(F + (H - F) * Math.sin(Math.PI / 2 * D)),
                Be = Math.round(_e + (me - _e) * Math.sin(Math.PI / 2 * D));
            return "#" + ("000000" + (ce << 16 | ie << 8 | Be).toString(16)).slice(-6)
        };
    return React.useEffect(() => {
        C(r.duration);
        let L = 0, O = D => {
            L || (L = D);
            let z = Math.ceil(r.duration - (D - L) / 1e3);
            y(N("#54A11B", "#DC0508", (D - L) / 1e3 / r.duration)), C(z), z <= 0 ? (C(0), y("#DC0508"), cancelAnimationFrame(x.current)) : x.current = requestAnimationFrame(O)
        };
        return x.current = requestAnimationFrame(O), () => cancelAnimationFrame(x.current)
    }, [r.duration, r.timestamp]), React.useEffect(() => {
        !r.playSound || E === 0 || (E <= 5 && E > 0 ? B({id: "five_seconds"}) : E <= 10 && B({id: "ten_seconds"}))
    }, [E]), E > 0 ? jsx("div", {
        className: r.timerClass,
        style: {"--color": R},
        children: jsx("div", {className: `label ${r.labelClass}`, children: E})
    }) : jsx("div", {})
}, RouletteFrenchTable$1 = "", Responsive$y = "", consoleLogger = {
    type: "logger", log(r) {
        this.output("log", r)
    }, warn(r) {
        this.output("warn", r)
    }, error(r) {
        this.output("error", r)
    }, output(r, R) {
        console && console[r] && console[r].apply(console, R)
    }
};

class Logger {
    constructor(R) {
        let y = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
        this.init(R, y)
    }

    init(R) {
        let y = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
        this.prefix = y.prefix || "i18next:", this.logger = R || consoleLogger, this.options = y, this.debug = y.debug
    }

    log() {
        for (var R = arguments.length, y = new Array(R), E = 0; E < R; E++) y[E] = arguments[E];
        return this.forward(y, "log", "", !0)
    }

    warn() {
        for (var R = arguments.length, y = new Array(R), E = 0; E < R; E++) y[E] = arguments[E];
        return this.forward(y, "warn", "", !0)
    }

    error() {
        for (var R = arguments.length, y = new Array(R), E = 0; E < R; E++) y[E] = arguments[E];
        return this.forward(y, "error", "")
    }

    deprecate() {
        for (var R = arguments.length, y = new Array(R), E = 0; E < R; E++) y[E] = arguments[E];
        return this.forward(y, "warn", "WARNING DEPRECATED: ", !0)
    }

    forward(R, y, E, C) {
        return C && !this.debug ? null : (typeof R[0] == "string" && (R[0] = `${E}${this.prefix} ${R[0]}`), this.logger[y](R))
    }

    create(R) {
        return new Logger(this.logger, {prefix: `${this.prefix}:${R}:`, ...this.options})
    }

    clone(R) {
        return R = R || this.options, R.prefix = R.prefix || this.prefix, new Logger(this.logger, R)
    }
}

var baseLogger = new Logger;

class EventEmitter {
    constructor() {
        this.observers = {}
    }

    on(R, y) {
        return R.split(" ").forEach(E => {
            this.observers[E] = this.observers[E] || [], this.observers[E].push(y)
        }), this
    }

    off(R, y) {
        if (this.observers[R]) {
            if (!y) {
                delete this.observers[R];
                return
            }
            this.observers[R] = this.observers[R].filter(E => E !== y)
        }
    }

    emit(R) {
        for (var y = arguments.length, E = new Array(y > 1 ? y - 1 : 0), C = 1; C < y; C++) E[C - 1] = arguments[C];
        this.observers[R] && [].concat(this.observers[R]).forEach(B => {
            B(...E)
        }), this.observers["*"] && [].concat(this.observers["*"]).forEach(B => {
            B.apply(B, [R, ...E])
        })
    }
}

function defer() {
    let r, R;
    const y = new Promise((E, C) => {
        r = E, R = C
    });
    return y.resolve = r, y.reject = R, y
}

function makeString(r) {
    return r == null ? "" : "" + r
}

function copy(r, R, y) {
    r.forEach(E => {
        R[E] && (y[E] = R[E])
    })
}

function getLastOfPath(r, R, y) {
    function E(B) {
        return B && B.indexOf("###") > -1 ? B.replace(/###/g, ".") : B
    }

    function C() {
        return !r || typeof r == "string"
    }

    const x = typeof R != "string" ? [].concat(R) : R.split(".");
    for (; x.length > 1;) {
        if (C()) return {};
        const B = E(x.shift());
        !r[B] && y && (r[B] = new y), Object.prototype.hasOwnProperty.call(r, B) ? r = r[B] : r = {}
    }
    return C() ? {} : {obj: r, k: E(x.shift())}
}

function setPath(r, R, y) {
    const {obj: E, k: C} = getLastOfPath(r, R, Object);
    E[C] = y
}

function pushPath(r, R, y, E) {
    const {obj: C, k: x} = getLastOfPath(r, R, Object);
    C[x] = C[x] || [], E && (C[x] = C[x].concat(y)), E || C[x].push(y)
}

function getPath(r, R) {
    const {obj: y, k: E} = getLastOfPath(r, R);
    if (y) return y[E]
}

function getPathWithDefaults(r, R, y) {
    const E = getPath(r, y);
    return E !== void 0 ? E : getPath(R, y)
}

function deepExtend(r, R, y) {
    for (const E in R) E !== "__proto__" && E !== "constructor" && (E in r ? typeof r[E] == "string" || r[E] instanceof String || typeof R[E] == "string" || R[E] instanceof String ? y && (r[E] = R[E]) : deepExtend(r[E], R[E], y) : r[E] = R[E]);
    return r
}

function regexEscape(r) {
    return r.replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g, "\\$&")
}

var _entityMap = {"&": "&amp;", "<": "&lt;", ">": "&gt;", '"': "&quot;", "'": "&#39;", "/": "&#x2F;"};

function escape$1(r) {
    return typeof r == "string" ? r.replace(/[&<>"'\/]/g, R => _entityMap[R]) : r
}

const chars = [" ", ",", "?", "!", ";"];

function looksLikeObjectPath(r, R, y) {
    R = R || "", y = y || "";
    const E = chars.filter(B => R.indexOf(B) < 0 && y.indexOf(B) < 0);
    if (E.length === 0) return !0;
    const C = new RegExp(`(${E.map(B => B === "?" ? "\\?" : B).join("|")})`);
    let x = !C.test(r);
    if (!x) {
        const B = r.indexOf(y);
        B > 0 && !C.test(r.substring(0, B)) && (x = !0)
    }
    return x
}

function deepFind(r, R) {
    let y = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : ".";
    if (!r) return;
    if (r[R]) return r[R];
    const E = R.split(y);
    let C = r;
    for (let x = 0; x < E.length; ++x) {
        if (!C || typeof C[E[x]] == "string" && x + 1 < E.length) return;
        if (C[E[x]] === void 0) {
            let B = 2, N = E.slice(x, x + B).join(y), L = C[N];
            for (; L === void 0 && E.length > x + B;) B++, N = E.slice(x, x + B).join(y), L = C[N];
            if (L === void 0) return;
            if (L === null) return null;
            if (R.endsWith(N)) {
                if (typeof L == "string") return L;
                if (N && typeof L[N] == "string") return L[N]
            }
            const O = E.slice(x + B).join(y);
            return O ? deepFind(L, O, y) : void 0
        }
        C = C[E[x]]
    }
    return C
}

function getCleanedCode(r) {
    return r && r.indexOf("_") > 0 ? r.replace("_", "-") : r
}

class ResourceStore extends EventEmitter {
    constructor(R) {
        let y = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {
            ns: ["translation"],
            defaultNS: "translation"
        };
        super(), this.data = R || {}, this.options = y, this.options.keySeparator === void 0 && (this.options.keySeparator = "."), this.options.ignoreJSONStructure === void 0 && (this.options.ignoreJSONStructure = !0)
    }

    addNamespaces(R) {
        this.options.ns.indexOf(R) < 0 && this.options.ns.push(R)
    }

    removeNamespaces(R) {
        const y = this.options.ns.indexOf(R);
        y > -1 && this.options.ns.splice(y, 1)
    }

    getResource(R, y, E) {
        let C = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : {};
        const x = C.keySeparator !== void 0 ? C.keySeparator : this.options.keySeparator,
            B = C.ignoreJSONStructure !== void 0 ? C.ignoreJSONStructure : this.options.ignoreJSONStructure;
        let N = [R, y];
        E && typeof E != "string" && (N = N.concat(E)), E && typeof E == "string" && (N = N.concat(x ? E.split(x) : E)), R.indexOf(".") > -1 && (N = R.split("."));
        const L = getPath(this.data, N);
        return L || !B || typeof E != "string" ? L : deepFind(this.data && this.data[R] && this.data[R][y], E, x)
    }

    addResource(R, y, E, C) {
        let x = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : {silent: !1};
        const B = x.keySeparator !== void 0 ? x.keySeparator : this.options.keySeparator;
        let N = [R, y];
        E && (N = N.concat(B ? E.split(B) : E)), R.indexOf(".") > -1 && (N = R.split("."), C = y, y = N[1]), this.addNamespaces(y), setPath(this.data, N, C), x.silent || this.emit("added", R, y, E, C)
    }

    addResources(R, y, E) {
        let C = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : {silent: !1};
        for (const x in E) (typeof E[x] == "string" || Object.prototype.toString.apply(E[x]) === "[object Array]") && this.addResource(R, y, x, E[x], {silent: !0});
        C.silent || this.emit("added", R, y, E)
    }

    addResourceBundle(R, y, E, C, x) {
        let B = arguments.length > 5 && arguments[5] !== void 0 ? arguments[5] : {silent: !1}, N = [R, y];
        R.indexOf(".") > -1 && (N = R.split("."), C = E, E = y, y = N[1]), this.addNamespaces(y);
        let L = getPath(this.data, N) || {};
        C ? deepExtend(L, E, x) : L = {...L, ...E}, setPath(this.data, N, L), B.silent || this.emit("added", R, y, E)
    }

    removeResourceBundle(R, y) {
        this.hasResourceBundle(R, y) && delete this.data[R][y], this.removeNamespaces(y), this.emit("removed", R, y)
    }

    hasResourceBundle(R, y) {
        return this.getResource(R, y) !== void 0
    }

    getResourceBundle(R, y) {
        return y || (y = this.options.defaultNS), this.options.compatibilityAPI === "v1" ? {...this.getResource(R, y)} : this.getResource(R, y)
    }

    getDataByLanguage(R) {
        return this.data[R]
    }

    hasLanguageSomeTranslations(R) {
        const y = this.getDataByLanguage(R);
        return !!(y && Object.keys(y) || []).find(C => y[C] && Object.keys(y[C]).length > 0)
    }

    toJSON() {
        return this.data
    }
}

var postProcessor = {
    processors: {}, addPostProcessor(r) {
        this.processors[r.name] = r
    }, handle(r, R, y, E, C) {
        return r.forEach(x => {
            this.processors[x] && (R = this.processors[x].process(R, y, E, C))
        }), R
    }
};
const checkedLoadedFor = {};

class Translator extends EventEmitter {
    constructor(R) {
        let y = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
        super(), copy(["resourceStore", "languageUtils", "pluralResolver", "interpolator", "backendConnector", "i18nFormat", "utils"], R, this), this.options = y, this.options.keySeparator === void 0 && (this.options.keySeparator = "."), this.logger = baseLogger.create("translator")
    }

    changeLanguage(R) {
        R && (this.language = R)
    }

    exists(R) {
        let y = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {interpolation: {}};
        if (R == null) return !1;
        const E = this.resolve(R, y);
        return E && E.res !== void 0
    }

    extractFromKey(R, y) {
        let E = y.nsSeparator !== void 0 ? y.nsSeparator : this.options.nsSeparator;
        E === void 0 && (E = ":");
        const C = y.keySeparator !== void 0 ? y.keySeparator : this.options.keySeparator;
        let x = y.ns || this.options.defaultNS || [];
        const B = E && R.indexOf(E) > -1,
            N = !this.options.userDefinedKeySeparator && !y.keySeparator && !this.options.userDefinedNsSeparator && !y.nsSeparator && !looksLikeObjectPath(R, E, C);
        if (B && !N) {
            const L = R.match(this.interpolator.nestingRegexp);
            if (L && L.length > 0) return {key: R, namespaces: x};
            const O = R.split(E);
            (E !== C || E === C && this.options.ns.indexOf(O[0]) > -1) && (x = O.shift()), R = O.join(C)
        }
        return typeof x == "string" && (x = [x]), {key: R, namespaces: x}
    }

    translate(R, y, E) {
        if (typeof y != "object" && this.options.overloadTranslationOptionHandler && (y = this.options.overloadTranslationOptionHandler(arguments)), typeof y == "object" && (y = {...y}), y || (y = {}), R == null) return "";
        Array.isArray(R) || (R = [String(R)]);
        const C = y.returnDetails !== void 0 ? y.returnDetails : this.options.returnDetails,
            x = y.keySeparator !== void 0 ? y.keySeparator : this.options.keySeparator, {
                key: B,
                namespaces: N
            } = this.extractFromKey(R[R.length - 1], y), L = N[N.length - 1], O = y.lng || this.language,
            D = y.appendNamespaceToCIMode || this.options.appendNamespaceToCIMode;
        if (O && O.toLowerCase() === "cimode") {
            if (D) {
                const ve = y.nsSeparator || this.options.nsSeparator;
                return C ? {res: `${L}${ve}${B}`, usedKey: B, exactUsedKey: B, usedLng: O, usedNS: L} : `${L}${ve}${B}`
            }
            return C ? {res: B, usedKey: B, exactUsedKey: B, usedLng: O, usedNS: L} : B
        }
        const z = this.resolve(R, y);
        let F = z && z.res;
        const _e = z && z.usedKey || B, Y = z && z.exactUsedKey || B, H = Object.prototype.toString.apply(F),
            me = ["[object Number]", "[object Function]", "[object RegExp]"],
            ce = y.joinArrays !== void 0 ? y.joinArrays : this.options.joinArrays,
            ie = !this.i18nFormat || this.i18nFormat.handleAsObject;
        if (ie && F && (typeof F != "string" && typeof F != "boolean" && typeof F != "number") && me.indexOf(H) < 0 && !(typeof ce == "string" && H === "[object Array]")) {
            if (!y.returnObjects && !this.options.returnObjects) {
                this.options.returnedObjectHandler || this.logger.warn("accessing an object - but returnObjects options is not enabled!");
                const ve = this.options.returnedObjectHandler ? this.options.returnedObjectHandler(_e, F, {
                    ...y,
                    ns: N
                }) : `key '${B} (${this.language})' returned an object instead of string.`;
                return C ? (z.res = ve, z) : ve
            }
            if (x) {
                const ve = H === "[object Array]", Re = ve ? [] : {}, Ce = ve ? Y : _e;
                for (const Ne in F) if (Object.prototype.hasOwnProperty.call(F, Ne)) {
                    const we = `${Ce}${x}${Ne}`;
                    Re[Ne] = this.translate(we, {...y, joinArrays: !1, ns: N}), Re[Ne] === we && (Re[Ne] = F[Ne])
                }
                F = Re
            }
        } else if (ie && typeof ce == "string" && H === "[object Array]") F = F.join(ce), F && (F = this.extendTranslation(F, R, y, E)); else {
            let ve = !1, Re = !1;
            const Ce = y.count !== void 0 && typeof y.count != "string", Ne = Translator.hasDefaultValue(y),
                we = Ce ? this.pluralResolver.getSuffix(O, y.count, y) : "",
                Me = y.ordinal && Ce ? this.pluralResolver.getSuffix(O, y.count, {ordinal: !1}) : "",
                ke = y[`defaultValue${we}`] || y[`defaultValue${Me}`] || y.defaultValue;
            !this.isValidLookup(F) && Ne && (ve = !0, F = ke), this.isValidLookup(F) || (Re = !0, F = B);
            const $e = (y.missingKeyNoValueFallbackToKey || this.options.missingKeyNoValueFallbackToKey) && Re ? void 0 : F,
                Ve = Ne && ke !== F && this.options.updateMissing;
            if (Re || ve || Ve) {
                if (this.logger.log(Ve ? "updateKey" : "missingKey", O, L, B, Ve ? ke : F), x) {
                    const qe = this.resolve(B, {...y, keySeparator: !1});
                    qe && qe.res && this.logger.warn("Seems the loaded translations were in flat JSON format instead of nested. Either set keySeparator: false on init or make sure your translations are published in nested format.")
                }
                let Je = [];
                const Qe = this.languageUtils.getFallbackCodes(this.options.fallbackLng, y.lng || this.language);
                if (this.options.saveMissingTo === "fallback" && Qe && Qe[0]) for (let qe = 0; qe < Qe.length; qe++) Je.push(Qe[qe]); else this.options.saveMissingTo === "all" ? Je = this.languageUtils.toResolveHierarchy(y.lng || this.language) : Je.push(y.lng || this.language);
                const Ze = (qe, ze, De) => {
                    const Xe = Ne && De !== F ? De : $e;
                    this.options.missingKeyHandler ? this.options.missingKeyHandler(qe, L, ze, Xe, Ve, y) : this.backendConnector && this.backendConnector.saveMissing && this.backendConnector.saveMissing(qe, L, ze, Xe, Ve, y), this.emit("missingKey", qe, L, ze, F)
                };
                this.options.saveMissing && (this.options.saveMissingPlurals && Ce ? Je.forEach(qe => {
                    this.pluralResolver.getSuffixes(qe, y).forEach(ze => {
                        Ze([qe], B + ze, y[`defaultValue${ze}`] || ke)
                    })
                }) : Ze(Je, B, ke))
            }
            F = this.extendTranslation(F, R, y, z, E), Re && F === B && this.options.appendNamespaceToMissingKey && (F = `${L}:${B}`), (Re || ve) && this.options.parseMissingKeyHandler && (this.options.compatibilityAPI !== "v1" ? F = this.options.parseMissingKeyHandler(this.options.appendNamespaceToMissingKey ? `${L}:${B}` : B, ve ? F : void 0) : F = this.options.parseMissingKeyHandler(F))
        }
        return C ? (z.res = F, z) : F
    }

    extendTranslation(R, y, E, C, x) {
        var B = this;
        if (this.i18nFormat && this.i18nFormat.parse) R = this.i18nFormat.parse(R, {...this.options.interpolation.defaultVariables, ...E}, C.usedLng, C.usedNS, C.usedKey, {resolved: C}); else if (!E.skipInterpolation) {
            E.interpolation && this.interpolator.init({
                ...E,
                interpolation: {...this.options.interpolation, ...E.interpolation}
            });
            const O = typeof R == "string" && (E && E.interpolation && E.interpolation.skipOnVariables !== void 0 ? E.interpolation.skipOnVariables : this.options.interpolation.skipOnVariables);
            let D;
            if (O) {
                const F = R.match(this.interpolator.nestingRegexp);
                D = F && F.length
            }
            let z = E.replace && typeof E.replace != "string" ? E.replace : E;
            if (this.options.interpolation.defaultVariables && (z = {...this.options.interpolation.defaultVariables, ...z}), R = this.interpolator.interpolate(R, z, E.lng || this.language, E), O) {
                const F = R.match(this.interpolator.nestingRegexp), _e = F && F.length;
                D < _e && (E.nest = !1)
            }
            !E.lng && this.options.compatibilityAPI !== "v1" && C && C.res && (E.lng = C.usedLng), E.nest !== !1 && (R = this.interpolator.nest(R, function () {
                for (var F = arguments.length, _e = new Array(F), Y = 0; Y < F; Y++) _e[Y] = arguments[Y];
                return x && x[0] === _e[0] && !E.context ? (B.logger.warn(`It seems you are nesting recursively key: ${_e[0]} in key: ${y[0]}`), null) : B.translate(..._e, y)
            }, E)), E.interpolation && this.interpolator.reset()
        }
        const N = E.postProcess || this.options.postProcess, L = typeof N == "string" ? [N] : N;
        return R != null && L && L.length && E.applyPostProcessor !== !1 && (R = postProcessor.handle(L, R, y, this.options && this.options.postProcessPassResolved ? {i18nResolved: C, ...E} : E, this)), R
    }

    resolve(R) {
        let y = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {}, E, C, x, B, N;
        return typeof R == "string" && (R = [R]), R.forEach(L => {
            if (this.isValidLookup(E)) return;
            const O = this.extractFromKey(L, y), D = O.key;
            C = D;
            let z = O.namespaces;
            this.options.fallbackNS && (z = z.concat(this.options.fallbackNS));
            const F = y.count !== void 0 && typeof y.count != "string",
                _e = F && !y.ordinal && y.count === 0 && this.pluralResolver.shouldUseIntlApi(),
                Y = y.context !== void 0 && (typeof y.context == "string" || typeof y.context == "number") && y.context !== "",
                H = y.lngs ? y.lngs : this.languageUtils.toResolveHierarchy(y.lng || this.language, y.fallbackLng);
            z.forEach(me => {
                this.isValidLookup(E) || (N = me, !checkedLoadedFor[`${H[0]}-${me}`] && this.utils && this.utils.hasLoadedNamespace && !this.utils.hasLoadedNamespace(N) && (checkedLoadedFor[`${H[0]}-${me}`] = !0, this.logger.warn(`key "${C}" for languages "${H.join(", ")}" won't get resolved as namespace "${N}" was not yet loaded`, "This means something IS WRONG in your setup. You access the t function before i18next.init / i18next.loadNamespace / i18next.changeLanguage was done. Wait for the callback or Promise to resolve before accessing it!!!")), H.forEach(ce => {
                    if (this.isValidLookup(E)) return;
                    B = ce;
                    const ie = [D];
                    if (this.i18nFormat && this.i18nFormat.addLookupKeys) this.i18nFormat.addLookupKeys(ie, D, ce, me, y); else {
                        let ve;
                        F && (ve = this.pluralResolver.getSuffix(ce, y.count, y));
                        const Re = `${this.options.pluralSeparator}zero`,
                            Ce = `${this.options.pluralSeparator}ordinal${this.options.pluralSeparator}`;
                        if (F && (ie.push(D + ve), y.ordinal && ve.indexOf(Ce) === 0 && ie.push(D + ve.replace(Ce, this.options.pluralSeparator)), _e && ie.push(D + Re)), Y) {
                            const Ne = `${D}${this.options.contextSeparator}${y.context}`;
                            ie.push(Ne), F && (ie.push(Ne + ve), y.ordinal && ve.indexOf(Ce) === 0 && ie.push(Ne + ve.replace(Ce, this.options.pluralSeparator)), _e && ie.push(Ne + Re))
                        }
                    }
                    let Be;
                    for (; Be = ie.pop();) this.isValidLookup(E) || (x = Be, E = this.getResource(ce, me, Be, y))
                }))
            })
        }), {res: E, usedKey: C, exactUsedKey: x, usedLng: B, usedNS: N}
    }

    isValidLookup(R) {
        return R !== void 0 && !(!this.options.returnNull && R === null) && !(!this.options.returnEmptyString && R === "")
    }

    getResource(R, y, E) {
        let C = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : {};
        return this.i18nFormat && this.i18nFormat.getResource ? this.i18nFormat.getResource(R, y, E, C) : this.resourceStore.getResource(R, y, E, C)
    }

    static hasDefaultValue(R) {
        const y = "defaultValue";
        for (const E in R) if (Object.prototype.hasOwnProperty.call(R, E) && y === E.substring(0, y.length) && R[E] !== void 0) return !0;
        return !1
    }
}

function capitalize(r) {
    return r.charAt(0).toUpperCase() + r.slice(1)
}

class LanguageUtil {
    constructor(R) {
        this.options = R, this.supportedLngs = this.options.supportedLngs || !1, this.logger = baseLogger.create("languageUtils")
    }

    getScriptPartFromCode(R) {
        if (R = getCleanedCode(R), !R || R.indexOf("-") < 0) return null;
        const y = R.split("-");
        return y.length === 2 || (y.pop(), y[y.length - 1].toLowerCase() === "x") ? null : this.formatLanguageCode(y.join("-"))
    }

    getLanguagePartFromCode(R) {
        if (R = getCleanedCode(R), !R || R.indexOf("-") < 0) return R;
        const y = R.split("-");
        return this.formatLanguageCode(y[0])
    }

    formatLanguageCode(R) {
        if (typeof R == "string" && R.indexOf("-") > -1) {
            const y = ["hans", "hant", "latn", "cyrl", "cans", "mong", "arab"];
            let E = R.split("-");
            return this.options.lowerCaseLng ? E = E.map(C => C.toLowerCase()) : E.length === 2 ? (E[0] = E[0].toLowerCase(), E[1] = E[1].toUpperCase(), y.indexOf(E[1].toLowerCase()) > -1 && (E[1] = capitalize(E[1].toLowerCase()))) : E.length === 3 && (E[0] = E[0].toLowerCase(), E[1].length === 2 && (E[1] = E[1].toUpperCase()), E[0] !== "sgn" && E[2].length === 2 && (E[2] = E[2].toUpperCase()), y.indexOf(E[1].toLowerCase()) > -1 && (E[1] = capitalize(E[1].toLowerCase())), y.indexOf(E[2].toLowerCase()) > -1 && (E[2] = capitalize(E[2].toLowerCase()))), E.join("-")
        }
        return this.options.cleanCode || this.options.lowerCaseLng ? R.toLowerCase() : R
    }

    isSupportedCode(R) {
        return (this.options.load === "languageOnly" || this.options.nonExplicitSupportedLngs) && (R = this.getLanguagePartFromCode(R)), !this.supportedLngs || !this.supportedLngs.length || this.supportedLngs.indexOf(R) > -1
    }

    getBestMatchFromCodes(R) {
        if (!R) return null;
        let y;
        return R.forEach(E => {
            if (y) return;
            const C = this.formatLanguageCode(E);
            (!this.options.supportedLngs || this.isSupportedCode(C)) && (y = C)
        }), !y && this.options.supportedLngs && R.forEach(E => {
            if (y) return;
            const C = this.getLanguagePartFromCode(E);
            if (this.isSupportedCode(C)) return y = C;
            y = this.options.supportedLngs.find(x => {
                if (x === C) return x;
                if (!(x.indexOf("-") < 0 && C.indexOf("-") < 0) && x.indexOf(C) === 0) return x
            })
        }), y || (y = this.getFallbackCodes(this.options.fallbackLng)[0]), y
    }

    getFallbackCodes(R, y) {
        if (!R) return [];
        if (typeof R == "function" && (R = R(y)), typeof R == "string" && (R = [R]), Object.prototype.toString.apply(R) === "[object Array]") return R;
        if (!y) return R.default || [];
        let E = R[y];
        return E || (E = R[this.getScriptPartFromCode(y)]), E || (E = R[this.formatLanguageCode(y)]), E || (E = R[this.getLanguagePartFromCode(y)]), E || (E = R.default), E || []
    }

    toResolveHierarchy(R, y) {
        const E = this.getFallbackCodes(y || this.options.fallbackLng || [], R), C = [], x = B => {
            B && (this.isSupportedCode(B) ? C.push(B) : this.logger.warn(`rejecting language code not found in supportedLngs: ${B}`))
        };
        return typeof R == "string" && (R.indexOf("-") > -1 || R.indexOf("_") > -1) ? (this.options.load !== "languageOnly" && x(this.formatLanguageCode(R)), this.options.load !== "languageOnly" && this.options.load !== "currentOnly" && x(this.getScriptPartFromCode(R)), this.options.load !== "currentOnly" && x(this.getLanguagePartFromCode(R))) : typeof R == "string" && x(this.formatLanguageCode(R)), E.forEach(B => {
            C.indexOf(B) < 0 && x(this.formatLanguageCode(B))
        }), C
    }
}

let sets = [{
    lngs: ["ach", "ak", "am", "arn", "br", "fil", "gun", "ln", "mfe", "mg", "mi", "oc", "pt", "pt-BR", "tg", "tl", "ti", "tr", "uz", "wa"],
    nr: [1, 2],
    fc: 1
}, {
    lngs: ["af", "an", "ast", "az", "bg", "bn", "ca", "da", "de", "dev", "el", "en", "eo", "es", "et", "eu", "fi", "fo", "fur", "fy", "gl", "gu", "ha", "hi", "hu", "hy", "ia", "it", "kk", "kn", "ku", "lb", "mai", "ml", "mn", "mr", "nah", "nap", "nb", "ne", "nl", "nn", "no", "nso", "pa", "pap", "pms", "ps", "pt-PT", "rm", "sco", "se", "si", "so", "son", "sq", "sv", "sw", "ta", "te", "tk", "ur", "yo"],
    nr: [1, 2],
    fc: 2
}, {
    lngs: ["ay", "bo", "cgg", "fa", "ht", "id", "ja", "jbo", "ka", "km", "ko", "ky", "lo", "ms", "sah", "su", "th", "tt", "ug", "vi", "wo", "zh"],
    nr: [1],
    fc: 3
}, {lngs: ["be", "bs", "cnr", "dz", "hr", "ru", "sr", "uk"], nr: [1, 2, 5], fc: 4}, {
    lngs: ["ar"],
    nr: [0, 1, 2, 3, 11, 100],
    fc: 5
}, {lngs: ["cs", "sk"], nr: [1, 2, 5], fc: 6}, {lngs: ["csb", "pl"], nr: [1, 2, 5], fc: 7}, {
    lngs: ["cy"],
    nr: [1, 2, 3, 8],
    fc: 8
}, {lngs: ["fr"], nr: [1, 2], fc: 9}, {lngs: ["ga"], nr: [1, 2, 3, 7, 11], fc: 10}, {
    lngs: ["gd"],
    nr: [1, 2, 3, 20],
    fc: 11
}, {lngs: ["is"], nr: [1, 2], fc: 12}, {lngs: ["jv"], nr: [0, 1], fc: 13}, {
    lngs: ["kw"],
    nr: [1, 2, 3, 4],
    fc: 14
}, {lngs: ["lt"], nr: [1, 2, 10], fc: 15}, {lngs: ["lv"], nr: [1, 2, 0], fc: 16}, {
    lngs: ["mk"],
    nr: [1, 2],
    fc: 17
}, {lngs: ["mnk"], nr: [0, 1, 2], fc: 18}, {lngs: ["mt"], nr: [1, 2, 11, 20], fc: 19}, {
    lngs: ["or"],
    nr: [2, 1],
    fc: 2
}, {lngs: ["ro"], nr: [1, 2, 20], fc: 20}, {lngs: ["sl"], nr: [5, 1, 2, 3], fc: 21}, {
    lngs: ["he", "iw"],
    nr: [1, 2, 20, 21],
    fc: 22
}], _rulesPluralsTypes = {
    1: function (r) {
        return +(r > 1)
    }, 2: function (r) {
        return +(r != 1)
    }, 3: function (r) {
        return 0
    }, 4: function (r) {
        return r % 10 == 1 && r % 100 != 11 ? 0 : r % 10 >= 2 && r % 10 <= 4 && (r % 100 < 10 || r % 100 >= 20) ? 1 : 2
    }, 5: function (r) {
        return r == 0 ? 0 : r == 1 ? 1 : r == 2 ? 2 : r % 100 >= 3 && r % 100 <= 10 ? 3 : r % 100 >= 11 ? 4 : 5
    }, 6: function (r) {
        return r == 1 ? 0 : r >= 2 && r <= 4 ? 1 : 2
    }, 7: function (r) {
        return r == 1 ? 0 : r % 10 >= 2 && r % 10 <= 4 && (r % 100 < 10 || r % 100 >= 20) ? 1 : 2
    }, 8: function (r) {
        return r == 1 ? 0 : r == 2 ? 1 : r != 8 && r != 11 ? 2 : 3
    }, 9: function (r) {
        return +(r >= 2)
    }, 10: function (r) {
        return r == 1 ? 0 : r == 2 ? 1 : r < 7 ? 2 : r < 11 ? 3 : 4
    }, 11: function (r) {
        return r == 1 || r == 11 ? 0 : r == 2 || r == 12 ? 1 : r > 2 && r < 20 ? 2 : 3
    }, 12: function (r) {
        return +(r % 10 != 1 || r % 100 == 11)
    }, 13: function (r) {
        return +(r !== 0)
    }, 14: function (r) {
        return r == 1 ? 0 : r == 2 ? 1 : r == 3 ? 2 : 3
    }, 15: function (r) {
        return r % 10 == 1 && r % 100 != 11 ? 0 : r % 10 >= 2 && (r % 100 < 10 || r % 100 >= 20) ? 1 : 2
    }, 16: function (r) {
        return r % 10 == 1 && r % 100 != 11 ? 0 : r !== 0 ? 1 : 2
    }, 17: function (r) {
        return r == 1 || r % 10 == 1 && r % 100 != 11 ? 0 : 1
    }, 18: function (r) {
        return r == 0 ? 0 : r == 1 ? 1 : 2
    }, 19: function (r) {
        return r == 1 ? 0 : r == 0 || r % 100 > 1 && r % 100 < 11 ? 1 : r % 100 > 10 && r % 100 < 20 ? 2 : 3
    }, 20: function (r) {
        return r == 1 ? 0 : r == 0 || r % 100 > 0 && r % 100 < 20 ? 1 : 2
    }, 21: function (r) {
        return r % 100 == 1 ? 1 : r % 100 == 2 ? 2 : r % 100 == 3 || r % 100 == 4 ? 3 : 0
    }, 22: function (r) {
        return r == 1 ? 0 : r == 2 ? 1 : (r < 0 || r > 10) && r % 10 == 0 ? 2 : 3
    }
};
const nonIntlVersions = ["v1", "v2", "v3"], intlVersions = ["v4"],
    suffixesOrder = {zero: 0, one: 1, two: 2, few: 3, many: 4, other: 5};

function createRules() {
    const r = {};
    return sets.forEach(R => {
        R.lngs.forEach(y => {
            r[y] = {numbers: R.nr, plurals: _rulesPluralsTypes[R.fc]}
        })
    }), r
}

class PluralResolver {
    constructor(R) {
        let y = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
        this.languageUtils = R, this.options = y, this.logger = baseLogger.create("pluralResolver"), (!this.options.compatibilityJSON || intlVersions.includes(this.options.compatibilityJSON)) && (typeof Intl > "u" || !Intl.PluralRules) && (this.options.compatibilityJSON = "v3", this.logger.error("Your environment seems not to be Intl API compatible, use an Intl.PluralRules polyfill. Will fallback to the compatibilityJSON v3 format handling.")), this.rules = createRules()
    }

    addRule(R, y) {
        this.rules[R] = y
    }

    getRule(R) {
        let y = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
        if (this.shouldUseIntlApi()) try {
            return new Intl.PluralRules(getCleanedCode(R), {type: y.ordinal ? "ordinal" : "cardinal"})
        } catch {
            return
        }
        return this.rules[R] || this.rules[this.languageUtils.getLanguagePartFromCode(R)]
    }

    needsPlural(R) {
        let y = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
        const E = this.getRule(R, y);
        return this.shouldUseIntlApi() ? E && E.resolvedOptions().pluralCategories.length > 1 : E && E.numbers.length > 1
    }

    getPluralFormsOfKey(R, y) {
        let E = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
        return this.getSuffixes(R, E).map(C => `${y}${C}`)
    }

    getSuffixes(R) {
        let y = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
        const E = this.getRule(R, y);
        return E ? this.shouldUseIntlApi() ? E.resolvedOptions().pluralCategories.sort((C, x) => suffixesOrder[C] - suffixesOrder[x]).map(C => `${this.options.prepend}${y.ordinal ? `ordinal${this.options.prepend}` : ""}${C}`) : E.numbers.map(C => this.getSuffix(R, C, y)) : []
    }

    getSuffix(R, y) {
        let E = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
        const C = this.getRule(R, E);
        return C ? this.shouldUseIntlApi() ? `${this.options.prepend}${E.ordinal ? `ordinal${this.options.prepend}` : ""}${C.select(y)}` : this.getSuffixRetroCompatible(C, y) : (this.logger.warn(`no plural rule found for: ${R}`), "")
    }

    getSuffixRetroCompatible(R, y) {
        const E = R.noAbs ? R.plurals(y) : R.plurals(Math.abs(y));
        let C = R.numbers[E];
        this.options.simplifyPluralSuffix && R.numbers.length === 2 && R.numbers[0] === 1 && (C === 2 ? C = "plural" : C === 1 && (C = ""));
        const x = () => this.options.prepend && C.toString() ? this.options.prepend + C.toString() : C.toString();
        return this.options.compatibilityJSON === "v1" ? C === 1 ? "" : typeof C == "number" ? `_plural_${C.toString()}` : x() : this.options.compatibilityJSON === "v2" || this.options.simplifyPluralSuffix && R.numbers.length === 2 && R.numbers[0] === 1 ? x() : this.options.prepend && E.toString() ? this.options.prepend + E.toString() : E.toString()
    }

    shouldUseIntlApi() {
        return !nonIntlVersions.includes(this.options.compatibilityJSON)
    }
}

function deepFindWithDefaults(r, R, y) {
    let E = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : ".",
        C = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : !0, x = getPathWithDefaults(r, R, y);
    return !x && C && typeof y == "string" && (x = deepFind(r, y, E), x === void 0 && (x = deepFind(R, y, E))), x
}

class Interpolator {
    constructor() {
        let R = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
        this.logger = baseLogger.create("interpolator"), this.options = R, this.format = R.interpolation && R.interpolation.format || (y => y), this.init(R)
    }

    init() {
        let R = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
        R.interpolation || (R.interpolation = {escapeValue: !0});
        const y = R.interpolation;
        this.escape = y.escape !== void 0 ? y.escape : escape$1, this.escapeValue = y.escapeValue !== void 0 ? y.escapeValue : !0, this.useRawValueToEscape = y.useRawValueToEscape !== void 0 ? y.useRawValueToEscape : !1, this.prefix = y.prefix ? regexEscape(y.prefix) : y.prefixEscaped || "{{", this.suffix = y.suffix ? regexEscape(y.suffix) : y.suffixEscaped || "}}", this.formatSeparator = y.formatSeparator ? y.formatSeparator : y.formatSeparator || ",", this.unescapePrefix = y.unescapeSuffix ? "" : y.unescapePrefix || "-", this.unescapeSuffix = this.unescapePrefix ? "" : y.unescapeSuffix || "", this.nestingPrefix = y.nestingPrefix ? regexEscape(y.nestingPrefix) : y.nestingPrefixEscaped || regexEscape("$t("), this.nestingSuffix = y.nestingSuffix ? regexEscape(y.nestingSuffix) : y.nestingSuffixEscaped || regexEscape(")"), this.nestingOptionsSeparator = y.nestingOptionsSeparator ? y.nestingOptionsSeparator : y.nestingOptionsSeparator || ",", this.maxReplaces = y.maxReplaces ? y.maxReplaces : 1e3, this.alwaysFormat = y.alwaysFormat !== void 0 ? y.alwaysFormat : !1, this.resetRegExp()
    }

    reset() {
        this.options && this.init(this.options)
    }

    resetRegExp() {
        const R = `${this.prefix}(.+?)${this.suffix}`;
        this.regexp = new RegExp(R, "g");
        const y = `${this.prefix}${this.unescapePrefix}(.+?)${this.unescapeSuffix}${this.suffix}`;
        this.regexpUnescape = new RegExp(y, "g");
        const E = `${this.nestingPrefix}(.+?)${this.nestingSuffix}`;
        this.nestingRegexp = new RegExp(E, "g")
    }

    interpolate(R, y, E, C) {
        let x, B, N;
        const L = this.options && this.options.interpolation && this.options.interpolation.defaultVariables || {};

        function O(Y) {
            return Y.replace(/\$/g, "$$$$")
        }

        const D = Y => {
            if (Y.indexOf(this.formatSeparator) < 0) {
                const ie = deepFindWithDefaults(y, L, Y, this.options.keySeparator, this.options.ignoreJSONStructure);
                return this.alwaysFormat ? this.format(ie, void 0, E, {...C, ...y, interpolationkey: Y}) : ie
            }
            const H = Y.split(this.formatSeparator), me = H.shift().trim(), ce = H.join(this.formatSeparator).trim();
            return this.format(deepFindWithDefaults(y, L, me, this.options.keySeparator, this.options.ignoreJSONStructure), ce, E, {
                ...C, ...y,
                interpolationkey: me
            })
        };
        this.resetRegExp();
        const z = C && C.missingInterpolationHandler || this.options.missingInterpolationHandler,
            F = C && C.interpolation && C.interpolation.skipOnVariables !== void 0 ? C.interpolation.skipOnVariables : this.options.interpolation.skipOnVariables;
        return [{regex: this.regexpUnescape, safeValue: Y => O(Y)}, {
            regex: this.regexp,
            safeValue: Y => this.escapeValue ? O(this.escape(Y)) : O(Y)
        }].forEach(Y => {
            for (N = 0; x = Y.regex.exec(R);) {
                const H = x[1].trim();
                if (B = D(H), B === void 0) if (typeof z == "function") {
                    const ce = z(R, x, C);
                    B = typeof ce == "string" ? ce : ""
                } else if (C && Object.prototype.hasOwnProperty.call(C, H)) B = ""; else if (F) {
                    B = x[0];
                    continue
                } else this.logger.warn(`missed to pass in variable ${H} for interpolating ${R}`), B = ""; else typeof B != "string" && !this.useRawValueToEscape && (B = makeString(B));
                const me = Y.safeValue(B);
                if (R = R.replace(x[0], me), F ? (Y.regex.lastIndex += B.length, Y.regex.lastIndex -= x[0].length) : Y.regex.lastIndex = 0, N++, N >= this.maxReplaces) break
            }
        }), R
    }

    nest(R, y) {
        let E = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {}, C, x, B;

        function N(L, O) {
            const D = this.nestingOptionsSeparator;
            if (L.indexOf(D) < 0) return L;
            const z = L.split(new RegExp(`${D}[ ]*{`));
            let F = `{${z[1]}`;
            L = z[0], F = this.interpolate(F, B);
            const _e = F.match(/'/g), Y = F.match(/"/g);
            (_e && _e.length % 2 === 0 && !Y || Y.length % 2 !== 0) && (F = F.replace(/'/g, '"'));
            try {
                B = JSON.parse(F), O && (B = {...O, ...B})
            } catch (H) {
                return this.logger.warn(`failed parsing options string in nesting for key ${L}`, H), `${L}${D}${F}`
            }
            return delete B.defaultValue, L
        }

        for (; C = this.nestingRegexp.exec(R);) {
            let L = [];
            B = {...E}, B = B.replace && typeof B.replace != "string" ? B.replace : B, B.applyPostProcessor = !1, delete B.defaultValue;
            let O = !1;
            if (C[0].indexOf(this.formatSeparator) !== -1 && !/{.*}/.test(C[1])) {
                const D = C[1].split(this.formatSeparator).map(z => z.trim());
                C[1] = D.shift(), L = D, O = !0
            }
            if (x = y(N.call(this, C[1].trim(), B), B), x && C[0] === R && typeof x != "string") return x;
            typeof x != "string" && (x = makeString(x)), x || (this.logger.warn(`missed to resolve ${C[1]} for nesting ${R}`), x = ""), O && (x = L.reduce((D, z) => this.format(D, z, E.lng, {
                ...E,
                interpolationkey: C[1].trim()
            }), x.trim())), R = R.replace(C[0], x), this.regexp.lastIndex = 0
        }
        return R
    }
}

function parseFormatStr(r) {
    let R = r.toLowerCase().trim();
    const y = {};
    if (r.indexOf("(") > -1) {
        const E = r.split("(");
        R = E[0].toLowerCase().trim();
        const C = E[1].substring(0, E[1].length - 1);
        R === "currency" && C.indexOf(":") < 0 ? y.currency || (y.currency = C.trim()) : R === "relativetime" && C.indexOf(":") < 0 ? y.range || (y.range = C.trim()) : C.split(";").forEach(B => {
            if (!B) return;
            const [N, ...L] = B.split(":"), O = L.join(":").trim().replace(/^'+|'+$/g, "");
            y[N.trim()] || (y[N.trim()] = O), O === "false" && (y[N.trim()] = !1), O === "true" && (y[N.trim()] = !0), isNaN(O) || (y[N.trim()] = parseInt(O, 10))
        })
    }
    return {formatName: R, formatOptions: y}
}

function createCachedFormatter(r) {
    const R = {};
    return function (E, C, x) {
        const B = C + JSON.stringify(x);
        let N = R[B];
        return N || (N = r(getCleanedCode(C), x), R[B] = N), N(E)
    }
}

class Formatter {
    constructor() {
        let R = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
        this.logger = baseLogger.create("formatter"), this.options = R, this.formats = {
            number: createCachedFormatter((y, E) => {
                const C = new Intl.NumberFormat(y, {...E});
                return x => C.format(x)
            }), currency: createCachedFormatter((y, E) => {
                const C = new Intl.NumberFormat(y, {...E, style: "currency"});
                return x => C.format(x)
            }), datetime: createCachedFormatter((y, E) => {
                const C = new Intl.DateTimeFormat(y, {...E});
                return x => C.format(x)
            }), relativetime: createCachedFormatter((y, E) => {
                const C = new Intl.RelativeTimeFormat(y, {...E});
                return x => C.format(x, E.range || "day")
            }), list: createCachedFormatter((y, E) => {
                const C = new Intl.ListFormat(y, {...E});
                return x => C.format(x)
            })
        }, this.init(R)
    }

    init(R) {
        const E = (arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {interpolation: {}}).interpolation;
        this.formatSeparator = E.formatSeparator ? E.formatSeparator : E.formatSeparator || ","
    }

    add(R, y) {
        this.formats[R.toLowerCase().trim()] = y
    }

    addCached(R, y) {
        this.formats[R.toLowerCase().trim()] = createCachedFormatter(y)
    }

    format(R, y, E) {
        let C = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : {};
        return y.split(this.formatSeparator).reduce((N, L) => {
            const {formatName: O, formatOptions: D} = parseFormatStr(L);
            if (this.formats[O]) {
                let z = N;
                try {
                    const F = C && C.formatParams && C.formatParams[C.interpolationkey] || {},
                        _e = F.locale || F.lng || C.locale || C.lng || E;
                    z = this.formats[O](N, _e, {...D, ...C, ...F})
                } catch (F) {
                    this.logger.warn(F)
                }
                return z
            } else this.logger.warn(`there was no format function for ${O}`);
            return N
        }, R)
    }
}

function removePending(r, R) {
    r.pending[R] !== void 0 && (delete r.pending[R], r.pendingCount--)
}

class Connector extends EventEmitter {
    constructor(R, y, E) {
        let C = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : {};
        super(), this.backend = R, this.store = y, this.services = E, this.languageUtils = E.languageUtils, this.options = C, this.logger = baseLogger.create("backendConnector"), this.waitingReads = [], this.maxParallelReads = C.maxParallelReads || 10, this.readingCalls = 0, this.maxRetries = C.maxRetries >= 0 ? C.maxRetries : 5, this.retryTimeout = C.retryTimeout >= 1 ? C.retryTimeout : 350, this.state = {}, this.queue = [], this.backend && this.backend.init && this.backend.init(E, C.backend, C)
    }

    queueLoad(R, y, E, C) {
        const x = {}, B = {}, N = {}, L = {};
        return R.forEach(O => {
            let D = !0;
            y.forEach(z => {
                const F = `${O}|${z}`;
                !E.reload && this.store.hasResourceBundle(O, z) ? this.state[F] = 2 : this.state[F] < 0 || (this.state[F] === 1 ? B[F] === void 0 && (B[F] = !0) : (this.state[F] = 1, D = !1, B[F] === void 0 && (B[F] = !0), x[F] === void 0 && (x[F] = !0), L[z] === void 0 && (L[z] = !0)))
            }), D || (N[O] = !0)
        }), (Object.keys(x).length || Object.keys(B).length) && this.queue.push({
            pending: B,
            pendingCount: Object.keys(B).length,
            loaded: {},
            errors: [],
            callback: C
        }), {
            toLoad: Object.keys(x),
            pending: Object.keys(B),
            toLoadLanguages: Object.keys(N),
            toLoadNamespaces: Object.keys(L)
        }
    }

    loaded(R, y, E) {
        const C = R.split("|"), x = C[0], B = C[1];
        y && this.emit("failedLoading", x, B, y), E && this.store.addResourceBundle(x, B, E), this.state[R] = y ? -1 : 2;
        const N = {};
        this.queue.forEach(L => {
            pushPath(L.loaded, [x], B), removePending(L, R), y && L.errors.push(y), L.pendingCount === 0 && !L.done && (Object.keys(L.loaded).forEach(O => {
                N[O] || (N[O] = {});
                const D = L.loaded[O];
                D.length && D.forEach(z => {
                    N[O][z] === void 0 && (N[O][z] = !0)
                })
            }), L.done = !0, L.errors.length ? L.callback(L.errors) : L.callback())
        }), this.emit("loaded", N), this.queue = this.queue.filter(L => !L.done)
    }

    read(R, y, E) {
        let C = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : 0,
            x = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : this.retryTimeout,
            B = arguments.length > 5 ? arguments[5] : void 0;
        if (!R.length) return B(null, {});
        if (this.readingCalls >= this.maxParallelReads) {
            this.waitingReads.push({lng: R, ns: y, fcName: E, tried: C, wait: x, callback: B});
            return
        }
        this.readingCalls++;
        const N = (O, D) => {
            if (this.readingCalls--, this.waitingReads.length > 0) {
                const z = this.waitingReads.shift();
                this.read(z.lng, z.ns, z.fcName, z.tried, z.wait, z.callback)
            }
            if (O && D && C < this.maxRetries) {
                setTimeout(() => {
                    this.read.call(this, R, y, E, C + 1, x * 2, B)
                }, x);
                return
            }
            B(O, D)
        }, L = this.backend[E].bind(this.backend);
        if (L.length === 2) {
            try {
                const O = L(R, y);
                O && typeof O.then == "function" ? O.then(D => N(null, D)).catch(N) : N(null, O)
            } catch (O) {
                N(O)
            }
            return
        }
        return L(R, y, N)
    }

    prepareLoading(R, y) {
        let E = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {},
            C = arguments.length > 3 ? arguments[3] : void 0;
        if (!this.backend) return this.logger.warn("No backend was added via i18next.use. Will not load resources."), C && C();
        typeof R == "string" && (R = this.languageUtils.toResolveHierarchy(R)), typeof y == "string" && (y = [y]);
        const x = this.queueLoad(R, y, E, C);
        if (!x.toLoad.length) return x.pending.length || C(), null;
        x.toLoad.forEach(B => {
            this.loadOne(B)
        })
    }

    load(R, y, E) {
        this.prepareLoading(R, y, {}, E)
    }

    reload(R, y, E) {
        this.prepareLoading(R, y, {reload: !0}, E)
    }

    loadOne(R) {
        let y = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "";
        const E = R.split("|"), C = E[0], x = E[1];
        this.read(C, x, "read", void 0, void 0, (B, N) => {
            B && this.logger.warn(`${y}loading namespace ${x} for language ${C} failed`, B), !B && N && this.logger.log(`${y}loaded namespace ${x} for language ${C}`, N), this.loaded(R, B, N)
        })
    }

    saveMissing(R, y, E, C, x) {
        let B = arguments.length > 5 && arguments[5] !== void 0 ? arguments[5] : {},
            N = arguments.length > 6 && arguments[6] !== void 0 ? arguments[6] : () => {
            };
        if (this.services.utils && this.services.utils.hasLoadedNamespace && !this.services.utils.hasLoadedNamespace(y)) {
            this.logger.warn(`did not save key "${E}" as the namespace "${y}" was not yet loaded`, "This means something IS WRONG in your setup. You access the t function before i18next.init / i18next.loadNamespace / i18next.changeLanguage was done. Wait for the callback or Promise to resolve before accessing it!!!");
            return
        }
        if (!(E == null || E === "")) {
            if (this.backend && this.backend.create) {
                const L = {...B, isUpdate: x}, O = this.backend.create.bind(this.backend);
                if (O.length < 6) try {
                    let D;
                    O.length === 5 ? D = O(R, y, E, C, L) : D = O(R, y, E, C), D && typeof D.then == "function" ? D.then(z => N(null, z)).catch(N) : N(null, D)
                } catch (D) {
                    N(D)
                } else O(R, y, E, C, N, L)
            }
            !R || !R[0] || this.store.addResource(R[0], y, E, C)
        }
    }
}

function get() {
    return {
        debug: !1,
        initImmediate: !0,
        ns: ["translation"],
        defaultNS: ["translation"],
        fallbackLng: ["dev"],
        fallbackNS: !1,
        supportedLngs: !1,
        nonExplicitSupportedLngs: !1,
        load: "all",
        preload: !1,
        simplifyPluralSuffix: !0,
        keySeparator: ".",
        nsSeparator: ":",
        pluralSeparator: "_",
        contextSeparator: "_",
        partialBundledLanguages: !1,
        saveMissing: !1,
        updateMissing: !1,
        saveMissingTo: "fallback",
        saveMissingPlurals: !0,
        missingKeyHandler: !1,
        missingInterpolationHandler: !1,
        postProcess: !1,
        postProcessPassResolved: !1,
        returnNull: !1,
        returnEmptyString: !0,
        returnObjects: !1,
        joinArrays: !1,
        returnedObjectHandler: !1,
        parseMissingKeyHandler: !1,
        appendNamespaceToMissingKey: !1,
        appendNamespaceToCIMode: !1,
        overloadTranslationOptionHandler: function (R) {
            let y = {};
            if (typeof R[1] == "object" && (y = R[1]), typeof R[1] == "string" && (y.defaultValue = R[1]), typeof R[2] == "string" && (y.tDescription = R[2]), typeof R[2] == "object" || typeof R[3] == "object") {
                const E = R[3] || R[2];
                Object.keys(E).forEach(C => {
                    y[C] = E[C]
                })
            }
            return y
        },
        interpolation: {
            escapeValue: !0,
            format: (r, R, y, E) => r,
            prefix: "{{",
            suffix: "}}",
            formatSeparator: ",",
            unescapePrefix: "-",
            nestingPrefix: "$t(",
            nestingSuffix: ")",
            nestingOptionsSeparator: ",",
            maxReplaces: 1e3,
            skipOnVariables: !0
        }
    }
}

function transformOptions(r) {
    return typeof r.ns == "string" && (r.ns = [r.ns]), typeof r.fallbackLng == "string" && (r.fallbackLng = [r.fallbackLng]), typeof r.fallbackNS == "string" && (r.fallbackNS = [r.fallbackNS]), r.supportedLngs && r.supportedLngs.indexOf("cimode") < 0 && (r.supportedLngs = r.supportedLngs.concat(["cimode"])), r
}

function noop() {
}

function bindMemberFunctions(r) {
    Object.getOwnPropertyNames(Object.getPrototypeOf(r)).forEach(y => {
        typeof r[y] == "function" && (r[y] = r[y].bind(r))
    })
}

class I18n extends EventEmitter {
    constructor() {
        let R = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {},
            y = arguments.length > 1 ? arguments[1] : void 0;
        if (super(), this.options = transformOptions(R), this.services = {}, this.logger = baseLogger, this.modules = {external: []}, bindMemberFunctions(this), y && !this.isInitialized && !R.isClone) {
            if (!this.options.initImmediate) return this.init(R, y), this;
            setTimeout(() => {
                this.init(R, y)
            }, 0)
        }
    }

    init() {
        var R = this;
        let y = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {},
            E = arguments.length > 1 ? arguments[1] : void 0;
        typeof y == "function" && (E = y, y = {}), !y.defaultNS && y.defaultNS !== !1 && y.ns && (typeof y.ns == "string" ? y.defaultNS = y.ns : y.ns.indexOf("translation") < 0 && (y.defaultNS = y.ns[0]));
        const C = get();
        this.options = {...C, ...this.options, ...transformOptions(y)}, this.options.compatibilityAPI !== "v1" && (this.options.interpolation = {...C.interpolation, ...this.options.interpolation}), y.keySeparator !== void 0 && (this.options.userDefinedKeySeparator = y.keySeparator), y.nsSeparator !== void 0 && (this.options.userDefinedNsSeparator = y.nsSeparator);

        function x(D) {
            return D ? typeof D == "function" ? new D : D : null
        }

        if (!this.options.isClone) {
            this.modules.logger ? baseLogger.init(x(this.modules.logger), this.options) : baseLogger.init(null, this.options);
            let D;
            this.modules.formatter ? D = this.modules.formatter : typeof Intl < "u" && (D = Formatter);
            const z = new LanguageUtil(this.options);
            this.store = new ResourceStore(this.options.resources, this.options);
            const F = this.services;
            F.logger = baseLogger, F.resourceStore = this.store, F.languageUtils = z, F.pluralResolver = new PluralResolver(z, {
                prepend: this.options.pluralSeparator,
                compatibilityJSON: this.options.compatibilityJSON,
                simplifyPluralSuffix: this.options.simplifyPluralSuffix
            }), D && (!this.options.interpolation.format || this.options.interpolation.format === C.interpolation.format) && (F.formatter = x(D), F.formatter.init(F, this.options), this.options.interpolation.format = F.formatter.format.bind(F.formatter)), F.interpolator = new Interpolator(this.options), F.utils = {hasLoadedNamespace: this.hasLoadedNamespace.bind(this)}, F.backendConnector = new Connector(x(this.modules.backend), F.resourceStore, F, this.options), F.backendConnector.on("*", function (_e) {
                for (var Y = arguments.length, H = new Array(Y > 1 ? Y - 1 : 0), me = 1; me < Y; me++) H[me - 1] = arguments[me];
                R.emit(_e, ...H)
            }), this.modules.languageDetector && (F.languageDetector = x(this.modules.languageDetector), F.languageDetector.init && F.languageDetector.init(F, this.options.detection, this.options)), this.modules.i18nFormat && (F.i18nFormat = x(this.modules.i18nFormat), F.i18nFormat.init && F.i18nFormat.init(this)), this.translator = new Translator(this.services, this.options), this.translator.on("*", function (_e) {
                for (var Y = arguments.length, H = new Array(Y > 1 ? Y - 1 : 0), me = 1; me < Y; me++) H[me - 1] = arguments[me];
                R.emit(_e, ...H)
            }), this.modules.external.forEach(_e => {
                _e.init && _e.init(this)
            })
        }
        if (this.format = this.options.interpolation.format, E || (E = noop), this.options.fallbackLng && !this.services.languageDetector && !this.options.lng) {
            const D = this.services.languageUtils.getFallbackCodes(this.options.fallbackLng);
            D.length > 0 && D[0] !== "dev" && (this.options.lng = D[0])
        }
        !this.services.languageDetector && !this.options.lng && this.logger.warn("init: no languageDetector is used and no lng is defined"), ["getResource", "hasResourceBundle", "getResourceBundle", "getDataByLanguage"].forEach(D => {
            this[D] = function () {
                return R.store[D](...arguments)
            }
        }), ["addResource", "addResources", "addResourceBundle", "removeResourceBundle"].forEach(D => {
            this[D] = function () {
                return R.store[D](...arguments), R
            }
        });
        const L = defer(), O = () => {
            const D = (z, F) => {
                this.isInitialized && !this.initializedStoreOnce && this.logger.warn("init: i18next is already initialized. You should call init just once!"), this.isInitialized = !0, this.options.isClone || this.logger.log("initialized", this.options), this.emit("initialized", this.options), L.resolve(F), E(z, F)
            };
            if (this.languages && this.options.compatibilityAPI !== "v1" && !this.isInitialized) return D(null, this.t.bind(this));
            this.changeLanguage(this.options.lng, D)
        };
        return this.options.resources || !this.options.initImmediate ? O() : setTimeout(O, 0), L
    }

    loadResources(R) {
        let E = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : noop;
        const C = typeof R == "string" ? R : this.language;
        if (typeof R == "function" && (E = R), !this.options.resources || this.options.partialBundledLanguages) {
            if (C && C.toLowerCase() === "cimode") return E();
            const x = [], B = N => {
                if (!N) return;
                this.services.languageUtils.toResolveHierarchy(N).forEach(O => {
                    x.indexOf(O) < 0 && x.push(O)
                })
            };
            C ? B(C) : this.services.languageUtils.getFallbackCodes(this.options.fallbackLng).forEach(L => B(L)), this.options.preload && this.options.preload.forEach(N => B(N)), this.services.backendConnector.load(x, this.options.ns, N => {
                !N && !this.resolvedLanguage && this.language && this.setResolvedLanguage(this.language), E(N)
            })
        } else E(null)
    }

    reloadResources(R, y, E) {
        const C = defer();
        return R || (R = this.languages), y || (y = this.options.ns), E || (E = noop), this.services.backendConnector.reload(R, y, x => {
            C.resolve(), E(x)
        }), C
    }

    use(R) {
        if (!R) throw new Error("You are passing an undefined module! Please check the object you are passing to i18next.use()");
        if (!R.type) throw new Error("You are passing a wrong module! Please check the object you are passing to i18next.use()");
        return R.type === "backend" && (this.modules.backend = R), (R.type === "logger" || R.log && R.warn && R.error) && (this.modules.logger = R), R.type === "languageDetector" && (this.modules.languageDetector = R), R.type === "i18nFormat" && (this.modules.i18nFormat = R), R.type === "postProcessor" && postProcessor.addPostProcessor(R), R.type === "formatter" && (this.modules.formatter = R), R.type === "3rdParty" && this.modules.external.push(R), this
    }

    setResolvedLanguage(R) {
        if (!(!R || !this.languages) && !(["cimode", "dev"].indexOf(R) > -1)) for (let y = 0; y < this.languages.length; y++) {
            const E = this.languages[y];
            if (!(["cimode", "dev"].indexOf(E) > -1) && this.store.hasLanguageSomeTranslations(E)) {
                this.resolvedLanguage = E;
                break
            }
        }
    }

    changeLanguage(R, y) {
        var E = this;
        this.isLanguageChangingTo = R;
        const C = defer();
        this.emit("languageChanging", R);
        const x = L => {
            this.language = L, this.languages = this.services.languageUtils.toResolveHierarchy(L), this.resolvedLanguage = void 0, this.setResolvedLanguage(L)
        }, B = (L, O) => {
            O ? (x(O), this.translator.changeLanguage(O), this.isLanguageChangingTo = void 0, this.emit("languageChanged", O), this.logger.log("languageChanged", O)) : this.isLanguageChangingTo = void 0, C.resolve(function () {
                return E.t(...arguments)
            }), y && y(L, function () {
                return E.t(...arguments)
            })
        }, N = L => {
            !R && !L && this.services.languageDetector && (L = []);
            const O = typeof L == "string" ? L : this.services.languageUtils.getBestMatchFromCodes(L);
            O && (this.language || x(O), this.translator.language || this.translator.changeLanguage(O), this.services.languageDetector && this.services.languageDetector.cacheUserLanguage && this.services.languageDetector.cacheUserLanguage(O)), this.loadResources(O, D => {
                B(D, O)
            })
        };
        return !R && this.services.languageDetector && !this.services.languageDetector.async ? N(this.services.languageDetector.detect()) : !R && this.services.languageDetector && this.services.languageDetector.async ? this.services.languageDetector.detect.length === 0 ? this.services.languageDetector.detect().then(N) : this.services.languageDetector.detect(N) : N(R), C
    }

    getFixedT(R, y, E) {
        var C = this;
        const x = function (B, N) {
            let L;
            if (typeof N != "object") {
                for (var O = arguments.length, D = new Array(O > 2 ? O - 2 : 0), z = 2; z < O; z++) D[z - 2] = arguments[z];
                L = C.options.overloadTranslationOptionHandler([B, N].concat(D))
            } else L = {...N};
            L.lng = L.lng || x.lng, L.lngs = L.lngs || x.lngs, L.ns = L.ns || x.ns, L.keyPrefix = L.keyPrefix || E || x.keyPrefix;
            const F = C.options.keySeparator || ".";
            let _e;
            return L.keyPrefix && Array.isArray(B) ? _e = B.map(Y => `${L.keyPrefix}${F}${Y}`) : _e = L.keyPrefix ? `${L.keyPrefix}${F}${B}` : B, C.t(_e, L)
        };
        return typeof R == "string" ? x.lng = R : x.lngs = R, x.ns = y, x.keyPrefix = E, x
    }

    t() {
        return this.translator && this.translator.translate(...arguments)
    }

    exists() {
        return this.translator && this.translator.exists(...arguments)
    }

    setDefaultNamespace(R) {
        this.options.defaultNS = R
    }

    hasLoadedNamespace(R) {
        let y = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
        if (!this.isInitialized) return this.logger.warn("hasLoadedNamespace: i18next was not initialized", this.languages), !1;
        if (!this.languages || !this.languages.length) return this.logger.warn("hasLoadedNamespace: i18n.languages were undefined or empty", this.languages), !1;
        const E = y.lng || this.resolvedLanguage || this.languages[0], C = this.options ? this.options.fallbackLng : !1,
            x = this.languages[this.languages.length - 1];
        if (E.toLowerCase() === "cimode") return !0;
        const B = (N, L) => {
            const O = this.services.backendConnector.state[`${N}|${L}`];
            return O === -1 || O === 2
        };
        if (y.precheck) {
            const N = y.precheck(this, B);
            if (N !== void 0) return N
        }
        return !!(this.hasResourceBundle(E, R) || !this.services.backendConnector.backend || this.options.resources && !this.options.partialBundledLanguages || B(E, R) && (!C || B(x, R)))
    }

    loadNamespaces(R, y) {
        const E = defer();
        return this.options.ns ? (typeof R == "string" && (R = [R]), R.forEach(C => {
            this.options.ns.indexOf(C) < 0 && this.options.ns.push(C)
        }), this.loadResources(C => {
            E.resolve(), y && y(C)
        }), E) : (y && y(), Promise.resolve())
    }

    loadLanguages(R, y) {
        const E = defer();
        typeof R == "string" && (R = [R]);
        const C = this.options.preload || [], x = R.filter(B => C.indexOf(B) < 0);
        return x.length ? (this.options.preload = C.concat(x), this.loadResources(B => {
            E.resolve(), y && y(B)
        }), E) : (y && y(), Promise.resolve())
    }

    dir(R) {
        if (R || (R = this.resolvedLanguage || (this.languages && this.languages.length > 0 ? this.languages[0] : this.language)), !R) return "rtl";
        const y = ["ar", "shu", "sqr", "ssh", "xaa", "yhd", "yud", "aao", "abh", "abv", "acm", "acq", "acw", "acx", "acy", "adf", "ads", "aeb", "aec", "afb", "ajp", "apc", "apd", "arb", "arq", "ars", "ary", "arz", "auz", "avl", "ayh", "ayl", "ayn", "ayp", "bbz", "pga", "he", "iw", "ps", "pbt", "pbu", "pst", "prp", "prd", "ug", "ur", "ydd", "yds", "yih", "ji", "yi", "hbo", "men", "xmn", "fa", "jpr", "peo", "pes", "prs", "dv", "sam", "ckb"],
            E = this.services && this.services.languageUtils || new LanguageUtil(get());
        return y.indexOf(E.getLanguagePartFromCode(R)) > -1 || R.toLowerCase().indexOf("-arab") > 1 ? "rtl" : "ltr"
    }

    static createInstance() {
        let R = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {},
            y = arguments.length > 1 ? arguments[1] : void 0;
        return new I18n(R, y)
    }

    cloneInstance() {
        let R = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {},
            y = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : noop;
        const E = R.forkResourceStore;
        E && delete R.forkResourceStore;
        const C = {...this.options, ...R, isClone: !0}, x = new I18n(C);
        return (R.debug !== void 0 || R.prefix !== void 0) && (x.logger = x.logger.clone(R)), ["store", "services", "language"].forEach(N => {
            x[N] = this[N]
        }), x.services = {...this.services}, x.services.utils = {hasLoadedNamespace: x.hasLoadedNamespace.bind(x)}, E && (x.store = new ResourceStore(this.store.data, C), x.services.resourceStore = x.store), x.translator = new Translator(x.services, C), x.translator.on("*", function (N) {
            for (var L = arguments.length, O = new Array(L > 1 ? L - 1 : 0), D = 1; D < L; D++) O[D - 1] = arguments[D];
            x.emit(N, ...O)
        }), x.init(C, y), x.translator.options = C, x.translator.backendConnector.services.utils = {hasLoadedNamespace: x.hasLoadedNamespace.bind(x)}, x
    }

    toJSON() {
        return {
            options: this.options,
            store: this.store,
            language: this.language,
            languages: this.languages,
            resolvedLanguage: this.resolvedLanguage
        }
    }
}

const instance = I18n.createInstance();
instance.createInstance = I18n.createInstance;
instance.createInstance;
instance.dir;
instance.init;
instance.loadResources;
instance.reloadResources;
instance.use;
instance.changeLanguage;
instance.getFixedT;
const t = instance.t;
instance.exists;
instance.setDefaultNamespace;
instance.hasLoadedNamespace;
instance.loadNamespaces;
instance.loadLanguages;
const TABLE_CONFIG = {landscape: {width: 448.163, height: 126}, portrait: {width: 179.80621, height: 492.00705}},
    FRENCH_TABLE_ORDER = [{
        rBetType: ROULETTE_BET_TYPE.DIRECT_0,
        color: "green",
        type: "path",
        landscape: {
            path: "m 413.687,73.713 c 0,0 0.172,-1.422 2.51,-0.641 l 26.115,10.08 a 2.065,2.065 0 0 1 0.7,2.795 60.131,60.131 0 0 1 -24.857,29.047 c -0.937,0.406 -1.874,0.094 -2.718,-1.094 L 400.415,91.252 a 1.661,1.661 0 0 1 0.459,-2.289 c 6.532,-4.672 10.844,-9.703 12.813,-15.25 z",
            textX: 422,
            textY: 97.5,
            textSpanX: 419,
            textSpanY: 97.5
        },
        portrait: {
            path: "m 74.615,454.156 c 0,0 2.029,0.189 0.914,2.756 l -14.384,28.669 a 3.489,3.489 0 0 1 -3.988,0.772 c 0,0 -25.709,-6.81 -41.451,-27.292 -0.58,-1.029 -0.134,-2.058 1.561,-2.984 l 32.318,-16.491 a 2.832,2.832 0 0 1 3.266,0.5 c 6.669,7.174 13.849,11.908 21.764,14.07 z",
            textX: 42.579334,
            textY: 466.06744,
            textSpanX: 37.579334,
            textSpanY: 466.06744
        }
    }, {
        rBetType: ROULETTE_BET_TYPE.DIRECT_26,
        color: "black",
        type: "path",
        landscape: {
            path: "m 415.171,56.14 a 2.157,2.157 0 0 1 1.7,-2.172 l 26.185,-9.481 a 1.682,1.682 0 0 1 2.162,0.737 c 4.09,12.275 3.75,24.025 0,36.025 -0.222,0.687 -1.258,0.862 -2.25,0.406 L 416.43,71.562 a 1.33,1.33 0 0 1 -1.082,-1.766 c 0.608,-2.374 1.432,-6.124 -0.177,-13.656 z",
            textX: 433,
            textY: 68,
            textSpanX: 425,
            textSpanY: 68
        },
        portrait: {
            path: "m 100.648,455.785 a 3.192,3.192 0 0 1 3.1,1.87 l 13.533,28.75 a 1.663,1.663 0 0 1 -1.051,2.373 c -17.517,4.491 -34.285,4.117 -51.409,0 -0.981,-0.244 -1.23,-1.381 -0.58,-2.47 l 14.4,-29.141 c 0,0 0.223,-1.533 2.52,-1.188 3.389,0.668 8.74,1.573 19.487,-0.194 z",
            textX: 89.57933,
            textY: 480.06744,
            textSpanX: 79.57933,
            textSpanY: 480.06744
        }
    }, {
        rBetType: ROULETTE_BET_TYPE.DIRECT_3,
        color: "red",
        type: "path",
        landscape: {
            path: "m 413.686,51.288 c 0,0 0.172,1.422 2.51,0.641 l 26.115,-10.08 a 2.065,2.065 0 0 0 0.7,-2.795 60.132,60.132 0 0 0 -24.857,-29.047 c -0.937,-0.406 -1.874,-0.094 -2.718,1.094 l -15.021,22.648 a 1.661,1.661 0 0 0 0.459,2.289 c 6.531,4.672 10.844,9.703 12.812,15.25 z",
            textX: 422.021,
            textY: 37.5,
            textSpanX: 417.021,
            textSpanY: 37.5
        },
        portrait: {
            path: "m 106.617,454.155 c 0,0 -2.029,0.189 -0.914,2.755 l 14.385,28.67 a 3.489,3.489 0 0 0 3.988,0.772 c 0,0 25.709,-6.81 41.451,-27.292 0.58,-1.029 0.134,-2.058 -1.561,-2.984 l -32.321,-16.491 a 2.832,2.832 0 0 0 -3.266,0.5 c -6.667,7.174 -13.847,11.909 -21.762,14.07 z",
            textX: 131.57933,
            textY: 468.06744,
            textSpanX: 126.57933,
            textSpanY: 468.06744
        }
    }, {
        rBetType: ROULETTE_BET_TYPE.DIRECT_35,
        color: "black",
        type: "path",
        landscape: {
            path: "m 399.099,33.13 a 2.412,2.412 0 0 1 -2.559,1.219 c -4.333,-0.833 -3,-3.167 -26.9,-2.534 0,0 -1.763,0.211 -1.636,-1.911 L 368.045,2.49 c 0,-1.1 0.554,-2.357 1.636,-2.331 17.192,-0.31 27.109,-0.976 43.442,7.107 1,0.435 1.043,1.588 0.583,2.583 z",
            textX: 388,
            textY: 21,
            textSpanX: 381,
            textSpanY: 21
        },
        portrait: {
            path: "m 132.529,438.145 c -2.29,-1.04 -1.74,-2.813 -1.74,-2.813 1.187,-4.757 4.517,-3.293 3.614,-29.533 0,0 -0.3,-1.935 2.726,-1.8 l 39.128,0.051 c 1.56,0 3.358,0.607 3.321,1.8 0.442,18.874 1.393,29.761 -10.142,47.692 -0.621,1.1 -2.267,1.145 -3.687,0.64 z",
            textX: 157.57933,
            textY: 430.06744,
            textSpanX: 146.57933,
            textSpanY: 430.06744
        }
    }, {
        rBetType: ROULETTE_BET_TYPE.DIRECT_12,
        color: "red",
        type: "rect",
        landscape: {
            width: 32,
            height: 20,
            x: -32,
            y: 345.999,
            rx: 2,
            transform: "rotate(-90)",
            textX: 356,
            textY: 21,
            textSpanX: 347.5,
            textSpanY: 21
        },
        portrait: {
            width: 45.665,
            height: 21.956,
            x: 134.14,
            y: 379.847,
            rx: 2,
            textX: 157.57933,
            textY: 397.06744,
            textSpanX: 146.57933,
            textSpanY: 397.06744
        }
    }, {
        rBetType: ROULETTE_BET_TYPE.DIRECT_28,
        color: "black",
        type: "rect",
        landscape: {
            width: 32,
            height: 20,
            x: -32,
            y: 323.999,
            rx: 2,
            transform: "rotate(-90)",
            textX: 334,
            textY: 21,
            textSpanX: 325.5,
            textSpanY: 21
        },
        portrait: {
            width: 45.665,
            height: 21.956,
            x: 134.14,
            y: 355.695,
            rx: 2,
            textX: 158.57933,
            textY: 372.06744,
            textSpanX: 147.57933,
            textSpanY: 372.06744
        }
    }, {
        rBetType: ROULETTE_BET_TYPE.DIRECT_7,
        color: "red",
        type: "rect",
        landscape: {
            width: 32,
            height: 20,
            x: -32,
            y: 301.999,
            rx: 2,
            transform: "rotate(-90)",
            textX: 312,
            textY: 21,
            textSpanX: 308,
            textSpanY: 21
        },
        portrait: {
            width: 45.665,
            height: 21.956,
            x: 134.14,
            y: 331.543,
            rx: 2,
            textX: 158.57933,
            textY: 348.06744,
            textSpanX: 153.57933,
            textSpanY: 348.06744
        }
    }, {
        rBetType: ROULETTE_BET_TYPE.DIRECT_29,
        color: "black",
        type: "rect",
        landscape: {
            width: 32,
            height: 20,
            x: -32,
            y: 279.999,
            rx: 2,
            transform: "rotate(-90)",
            textX: 290,
            textY: 21,
            textSpanX: 282.5,
            textSpanY: 21
        },
        portrait: {
            width: 45.665,
            height: 21.956,
            x: 134.14,
            y: 307.391,
            rx: 2,
            textX: 158.57933,
            textY: 324.06744,
            textSpanX: 147.57933,
            textSpanY: 324.06744
        }
    }, {
        rBetType: ROULETTE_BET_TYPE.DIRECT_18,
        color: "red",
        type: "rect",
        landscape: {
            width: 32,
            height: 20,
            x: -32,
            y: 257.999,
            rx: 2,
            transform: "rotate(-90)",
            textX: 268,
            textY: 21,
            textSpanX: 259.5,
            textSpanY: 21
        },
        portrait: {
            width: 45.665,
            height: 21.956,
            x: 134.14,
            y: 283.239,
            rx: 2,
            textX: 157.57933,
            textY: 300.06744,
            textSpanX: 146.57933,
            textSpanY: 300.06744
        }
    }, {
        rBetType: ROULETTE_BET_TYPE.DIRECT_22,
        color: "black",
        type: "rect",
        landscape: {
            width: 32,
            height: 20,
            x: -32,
            y: 235.999,
            rx: 2,
            transform: "rotate(-90)",
            textX: 246,
            textY: 21,
            textSpanX: 238.5,
            textSpanY: 21
        },
        portrait: {
            width: 45.665,
            height: 21.956,
            x: 134.14,
            y: 259.086,
            rx: 2,
            textX: 157.57933,
            textY: 275.06744,
            textSpanX: 146.57933,
            textSpanY: 275.06744
        }
    }, {
        rBetType: ROULETTE_BET_TYPE.DIRECT_9,
        color: "red",
        type: "rect",
        landscape: {
            width: 32,
            height: 20,
            x: -32,
            y: 213.999,
            rx: 2,
            transform: "rotate(-90)",
            textX: 224,
            textY: 21,
            textSpanX: 220,
            textSpanY: 21
        },
        portrait: {
            width: 45.665,
            height: 21.956,
            x: 134.14,
            y: 234.934,
            rx: 2,
            textX: 157.57933,
            textY: 251.06743,
            textSpanX: 152.57933,
            textSpanY: 251.06743
        }
    }, {
        rBetType: ROULETTE_BET_TYPE.DIRECT_31,
        color: "black",
        type: "rect",
        landscape: {
            width: 32,
            height: 20,
            x: -32,
            y: 190.999,
            rx: 2,
            transform: "rotate(-90)",
            textX: 201,
            textY: 21,
            textSpanX: 193,
            textSpanY: 21
        },
        portrait: {
            width: 45.665,
            height: 21.956,
            x: 134.14,
            y: 209.684,
            rx: 2,
            textX: 158.57933,
            textY: 227.06743,
            textSpanX: 147.57933,
            textSpanY: 227.06743
        }
    }, {
        rBetType: ROULETTE_BET_TYPE.DIRECT_14,
        color: "red",
        type: "rect",
        landscape: {
            width: 32,
            height: 20,
            x: -32,
            y: 168.999,
            rx: 2,
            transform: "rotate(-90)",
            textX: 179,
            textY: 21,
            textSpanX: 170.5,
            textSpanY: 21
        },
        portrait: {
            width: 45.665,
            height: 21.956,
            x: 134.14,
            y: 185.532,
            rx: 2,
            textX: 156.57933,
            textY: 202.06743,
            textSpanX: 145.57933,
            textSpanY: 202.06743
        }
    }, {
        rBetType: ROULETTE_BET_TYPE.DIRECT_20,
        color: "black",
        type: "rect",
        landscape: {
            width: 32,
            height: 20,
            x: -32,
            y: 146.999,
            rx: 2,
            transform: "rotate(-90)",
            textX: 157,
            textY: 21,
            textSpanX: 149,
            textSpanY: 21
        },
        portrait: {
            width: 45.665,
            height: 21.956,
            x: 134.14,
            y: 161.38,
            rx: 2,
            textX: 157.57933,
            textY: 178.06743,
            textSpanX: 146.57933,
            textSpanY: 178.06743
        }
    }, {
        rBetType: ROULETTE_BET_TYPE.DIRECT_1,
        color: "red",
        type: "rect",
        landscape: {
            width: 32,
            height: 20,
            x: -32,
            y: 124.999,
            rx: 2,
            transform: "rotate(-90)",
            textX: 135,
            textY: 21,
            textSpanX: 130.5,
            textSpanY: 21
        },
        portrait: {
            width: 45.665,
            height: 21.956,
            x: 134.14,
            y: 137.228,
            rx: 2,
            textX: 157.57933,
            textY: 153.06743,
            textSpanX: 152.57933,
            textSpanY: 153.06743
        }
    }, {
        rBetType: ROULETTE_BET_TYPE.DIRECT_33,
        color: "black",
        type: "rect",
        landscape: {
            width: 32,
            height: 20,
            x: -32,
            y: 102.999,
            rx: 2,
            transform: "rotate(-90)",
            textX: 113,
            textY: 21,
            textSpanX: 105.5,
            textSpanY: 21
        },
        portrait: {
            width: 45.665,
            height: 21.956,
            x: 134.14,
            y: 113.076,
            rx: 2,
            textX: 157.57933,
            textY: 129.06743,
            textSpanX: 146.57933,
            textSpanY: 129.06743
        }
    }, {
        rBetType: ROULETTE_BET_TYPE.DIRECT_16,
        color: "red",
        type: "rect",
        landscape: {
            width: 32,
            height: 20,
            x: -32,
            y: 80.999,
            rx: 2,
            transform: "rotate(-90)",
            textX: 91,
            textY: 21,
            textSpanX: 83,
            textSpanY: 21
        },
        portrait: {
            width: 45.665,
            height: 21.956,
            x: 134.14,
            y: 88.924,
            rx: 2,
            textX: 156.57933,
            textY: 105.06743,
            textSpanX: 145.57933,
            textSpanY: 105.06743
        }
    }, {
        rBetType: ROULETTE_BET_TYPE.DIRECT_24,
        color: "black",
        type: "path",
        landscape: {
            path: "m 58.281,30.769 c 0.312,0.844 0.687,1.313 2.562,1.219 0,0 14.569,-0.041 16.219,0 1.65,0.041 1.636,-0.952 1.636,-1.911 L 78.653,2.659 c 0,-1.093 -0.553,-2.353 -1.636,-2.327 -2.3,-0.063 -20.554,-0.625 -27.158,1.354 -1,0.435 -1.043,1.588 -0.583,2.583 z",
            textX: 66,
            textY: 21,
            textSpanX: 59,
            textSpanY: 21
        },
        portrait: {
            path: "m 135.899,63.983 c -1.2,0.343 -1.873,0.754 -1.74,2.813 0,0 0.058,15.995 0,17.805 -0.058,1.81 1.359,1.8 2.726,1.8 l 39.127,-0.043 c 1.56,0 3.358,-0.607 3.321,-1.8 0.089,-2.529 0.892,-22.565 -1.932,-29.815 -0.621,-1.1 -2.267,-1.145 -3.687,-0.64 z",
            textX: 157.57933,
            textY: 79.067429,
            textSpanX: 146.57933,
            textSpanY: 79.067429
        }
    }, {
        rBetType: ROULETTE_BET_TYPE.DIRECT_5,
        color: "red",
        type: "path",
        landscape: {
            path: "m 41.74,40.173 c -0.672,0.594 -1.405,1.159 -2.359,0.594 L 16.96,23.53 A 2.094,2.094 0 0 1 16.288,20.704 C 29.351,7.079 43.476,3.454 44.226,3.329 a 1.934,1.934 0 0 1 2.333,1.115 l 9.787,26.2 a 1.634,1.634 0 0 1 -0.527,2.252 30.872,30.872 0 0 0 -13.187,6.558 z",
            textX: 37.978,
            textY: 27.5,
            textSpanX: 34.978,
            textSpanY: 27.5
        },
        portrait: {
            path: "m 122.478,45.825 c -0.847,-0.738 -1.654,-1.542 -0.847,-2.59 l 24.6,-24.615 a 3.552,3.552 0 0 1 4.033,-0.737 c 19.443,14.34 24.616,29.847 24.795,30.67 0.268,1.166 -0.18,2.057 -1.591,2.561 l -37.385,10.745 a 2.763,2.763 0 0 1 -3.214,-0.578 31.778,31.778 0 0 0 -9.365,-14.475 z",
            textX: 147.57933,
            textY: 47.067429,
            textSpanX: 142.57933,
            textSpanY: 47.067429
        }
    }, {
        rBetType: ROULETTE_BET_TYPE.DIRECT_10,
        color: "black",
        type: "path",
        landscape: {
            path: "m 29.609,61.981 c 1.035,0 2.45,-0.675 2.484,-1.53 0.938,-6.375 2.469,-11.125 6.906,-16.812 0.43,-0.746 -0.266,-1.781 -0.994,-2.251 L 15.099,25.088 A 1.735,1.735 0 0 0 12.75,25.637 C 5.628,34.513 0.312,49.763 0,61.263 c -0.014,0.35 0.25,0.673 1,0.718 0.75,0.045 28.609,0 28.609,0 z",
            textX: 18.978,
            textY: 52.5,
            textSpanX: 11.978,
            textSpanY: 52.5
        },
        portrait: {
            path: "m 91.358,32.507 c 0,1.136 0.964,2.69 2.183,2.727 9.1,1.029 15.876,2.71 23.992,7.582 1.064,0.472 2.542,-0.292 3.212,-1.092 L 144.004,16.577 A 1.67,1.67 0 0 0 143.22,13.998 C 130.555,6.176 108.793,0.344 92.382,0.001 c -0.5,-0.015 -0.961,0.275 -1.024,1.1 -0.063,0.825 0,31.406 0,31.406 z",
            textX: 111.57933,
            textY: 26.067429,
            textSpanX: 100.57933,
            textSpanY: 26.067429
        }
    }, {
        rBetType: ROULETTE_BET_TYPE.DIRECT_23,
        color: "red",
        type: "path",
        landscape: {
            path: "m 29.609,63.876 c 1.035,0 2.45,0.675 2.484,1.53 0.938,6.375 2.469,11.125 6.906,16.812 0.43,0.746 -0.266,1.781 -0.994,2.251 L 15.099,100.768 A 1.735,1.735 0 0 1 12.75,100.219 C 5.628,91.348 0.312,76.093 0,64.593 -0.014,64.243 0.25,63.92 1,63.875 1.75,63.83 29.609,63.876 29.609,63.876 Z",
            textX: 18.978,
            textY: 82.5,
            textSpanX: 11.978,
            textSpanY: 82.5
        },
        portrait: {
            path: "m 88.653,32.507 c 0,1.136 -0.964,2.69 -2.183,2.727 -9.1,1.029 -15.876,2.71 -23.992,7.582 -1.064,0.472 -2.542,-0.292 -3.212,-1.092 L 36.008,16.577 a 1.67,1.67 0 0 1 0.784,-2.579 C 49.456,6.176 71.218,0.344 87.628,0.001 c 0.5,-0.015 0.961,0.275 1.024,1.1 0.063,0.825 0.001,31.406 0.001,31.406 z",
            textX: 66.57933,
            textY: 26.067429,
            textSpanX: 55.579334,
            textSpanY: 26.067429
        }
    }, {
        rBetType: ROULETTE_BET_TYPE.DIRECT_8,
        color: "black",
        type: "path",
        landscape: {
            path: "M 41.74,86.105 C 41.068,85.511 40.335,84.946 39.381,85.511 L 16.96,102.748 a 2.094,2.094 0 0 0 -0.672,2.826 c 13.063,13.625 27.188,17.25 27.938,17.375 a 1.934,1.934 0 0 0 2.333,-1.115 l 9.787,-26.2 A 1.634,1.634 0 0 0 55.819,93.382 30.872,30.872 0 0 1 42.632,86.819 Z",
            textX: 37.978,
            textY: 107.5,
            textSpanX: 34.978,
            textSpanY: 107.5
        },
        portrait: {
            path: "m 56.931,45.825 c 0.847,-0.738 1.654,-1.542 0.847,-2.59 L 33.178,18.62 A 3.552,3.552 0 0 0 29.145,17.883 C 9.706,32.223 4.533,47.73 4.354,48.553 c -0.268,1.166 0.18,2.057 1.591,2.561 l 37.382,10.745 a 2.763,2.763 0 0 0 3.214,-0.578 31.778,31.778 0 0 1 9.365,-14.475 z",
            textX: 30.579332,
            textY: 47.067429,
            textSpanX: 25.579332,
            textSpanY: 47.067429
        }
    }, {
        rBetType: ROULETTE_BET_TYPE.DIRECT_30,
        color: "red",
        type: "path",
        landscape: {
            path: "m 58.281,95.442 c 0.312,-0.844 0.687,-1.313 2.562,-1.219 0,0 14.569,0.041 16.219,0 1.65,-0.041 1.636,0.952 1.636,1.911 l -0.045,27.418 c 0,1.093 -0.553,2.353 -1.636,2.327 -2.299,0.063 -20.549,0.625 -27.153,-1.354 -1,-0.435 -1.043,-1.588 -0.583,-2.583 z",
            textX: 66,
            textY: 115,
            textSpanX: 59,
            textSpanY: 115
        },
        portrait: {
            path: "m 43.607,63.983 c 1.2,0.343 1.873,0.754 1.74,2.813 0,0 -0.058,15.995 0,17.805 0.058,1.81 -1.359,1.8 -2.726,1.8 L 3.493,86.353 c -1.56,0 -3.358,-0.607 -3.321,-1.8 -0.089,-2.525 -0.892,-22.56 1.933,-29.806 0.621,-1.1 2.267,-1.145 3.687,-0.64 z",
            textX: 22.579332,
            textY: 79.067429,
            textSpanX: 11.579333,
            textSpanY: 79.067429
        }
    }, {
        rBetType: ROULETTE_BET_TYPE.DIRECT_11,
        color: "black",
        type: "rect",
        landscape: {
            width: 32,
            height: 20,
            x: -126,
            y: 80.999,
            rx: 3,
            transform: "rotate(-90)",
            textX: 91,
            textY: 115,
            textSpanX: 84,
            textSpanY: 115
        },
        portrait: {
            width: 45.665,
            height: 21.956,
            x: 0,
            y: 88.924,
            rx: 3,
            textX: 22.579332,
            textY: 106.06743,
            textSpanX: 12.579333,
            textSpanY: 106.06743
        }
    }, {
        rBetType: ROULETTE_BET_TYPE.DIRECT_36,
        color: "red",
        type: "rect",
        landscape: {
            width: 32,
            height: 20,
            x: -126,
            y: 102.999,
            rx: 3,
            transform: "rotate(-90)",
            textX: 113,
            textY: 115,
            textSpanX: 105,
            textSpanY: 115
        },
        portrait: {
            width: 45.665,
            height: 21.956,
            x: 0,
            y: 113.076,
            rx: 3,
            textX: 22.579332,
            textY: 130.06743,
            textSpanX: 11.579333,
            textSpanY: 130.06743
        }
    }, {
        rBetType: ROULETTE_BET_TYPE.DIRECT_13,
        color: "black",
        type: "rect",
        landscape: {
            width: 32,
            height: 20,
            x: -126,
            y: 124.999,
            rx: 3,
            transform: "rotate(-90)",
            textX: 135,
            textY: 115,
            textSpanX: 127,
            textSpanY: 115
        },
        portrait: {
            width: 45.665,
            height: 21.956,
            x: 0,
            y: 137.228,
            rx: 3,
            textX: 22.579332,
            textY: 154.06743,
            textSpanX: 11.579333,
            textSpanY: 154.06743
        }
    }, {
        rBetType: ROULETTE_BET_TYPE.DIRECT_27,
        color: "red",
        type: "rect",
        landscape: {
            width: 32,
            height: 20,
            x: -126,
            y: 146.999,
            rx: 3,
            transform: "rotate(-90)",
            textX: 157,
            textY: 115,
            textSpanX: 149,
            textSpanY: 115
        },
        portrait: {
            width: 45.665,
            height: 21.956,
            x: 0,
            y: 161.38,
            rx: 3,
            textX: 22.579332,
            textY: 178.06743,
            textSpanX: 11.579333,
            textSpanY: 178.06743
        }
    }, {
        rBetType: ROULETTE_BET_TYPE.DIRECT_6,
        color: "black",
        type: "rect",
        landscape: {
            width: 32,
            height: 20,
            x: -126,
            y: 168.999,
            rx: 3,
            transform: "rotate(-90)",
            textX: 179,
            textY: 115,
            textSpanX: 175.5,
            textSpanY: 115
        },
        portrait: {
            width: 45.665,
            height: 21.956,
            x: 0,
            y: 185.532,
            rx: 3,
            textX: 22.579332,
            textY: 202.06743,
            textSpanX: 17.579332,
            textSpanY: 202.06743
        }
    }, {
        rBetType: ROULETTE_BET_TYPE.DIRECT_34,
        color: "red",
        type: "rect",
        landscape: {
            width: 32,
            height: 20,
            x: -126,
            y: 190.999,
            rx: 3,
            transform: "rotate(-90)",
            textX: 201,
            textY: 115,
            textSpanX: 193,
            textSpanY: 115
        },
        portrait: {
            width: 45.665,
            height: 21.956,
            x: 0,
            y: 209.684,
            rx: 3,
            textX: 22.579332,
            textY: 226.06743,
            textSpanX: 11.579333,
            textSpanY: 226.06743
        }
    }, {
        rBetType: ROULETTE_BET_TYPE.DIRECT_17,
        color: "black",
        type: "rect",
        landscape: {
            width: 32,
            height: 20,
            x: -126,
            y: 213.999,
            rx: 3,
            transform: "rotate(-90)",
            textX: 224,
            textY: 115,
            textSpanX: 216,
            textSpanY: 115
        },
        portrait: {
            width: 45.665,
            height: 21.956,
            x: 0,
            y: 234.934,
            rx: 3,
            textX: 21.579332,
            textY: 252.06743,
            textSpanX: 10.579333,
            textSpanY: 252.06743
        }
    }, {
        rBetType: ROULETTE_BET_TYPE.DIRECT_25,
        color: "red",
        type: "rect",
        landscape: {
            width: 32,
            height: 20,
            x: -126,
            y: 235.999,
            rx: 3,
            transform: "rotate(-90)",
            textX: 246,
            textY: 115,
            textSpanX: 238,
            textSpanY: 115
        },
        portrait: {
            width: 45.665,
            height: 21.956,
            x: 0,
            y: 259.086,
            rx: 3,
            textX: 22.579332,
            textY: 275.06744,
            textSpanX: 11.579333,
            textSpanY: 275.06744
        }
    }, {
        rBetType: ROULETTE_BET_TYPE.DIRECT_2,
        color: "black",
        type: "rect",
        landscape: {
            width: 32,
            height: 20,
            x: -126,
            y: 257.999,
            rx: 3,
            transform: "rotate(-90)",
            textX: 268,
            textY: 115,
            textSpanX: 263.5,
            textSpanY: 115
        },
        portrait: {
            width: 45.665,
            height: 21.956,
            x: 0,
            y: 283.238,
            rx: 3,
            textX: 22.579332,
            textY: 300.06744,
            textSpanX: 17.579332,
            textSpanY: 300.06744
        }
    }, {
        rBetType: ROULETTE_BET_TYPE.DIRECT_21,
        color: "red",
        type: "rect",
        landscape: {
            width: 32,
            height: 20,
            x: -126,
            y: 279.999,
            rx: 3,
            transform: "rotate(-90)",
            textX: 290,
            textY: 115,
            textSpanX: 282.5,
            textSpanY: 115
        },
        portrait: {
            width: 45.665,
            height: 21.956,
            x: 0,
            y: 307.391,
            rx: 3,
            textX: 22.579332,
            textY: 324.06744,
            textSpanX: 11.579333,
            textSpanY: 324.06744
        }
    }, {
        rBetType: ROULETTE_BET_TYPE.DIRECT_4,
        color: "black",
        type: "rect",
        landscape: {
            width: 32,
            height: 20,
            x: -126,
            y: 301.999,
            rx: 3,
            transform: "rotate(-90)",
            textX: 312,
            textY: 115,
            textSpanX: 308,
            textSpanY: 115
        },
        portrait: {
            width: 45.665,
            height: 21.956,
            x: 0,
            y: 331.543,
            rx: 3,
            textX: 22.579332,
            textY: 348.06744,
            textSpanX: 17.579332,
            textSpanY: 348.06744
        }
    }, {
        rBetType: ROULETTE_BET_TYPE.DIRECT_19,
        color: "red",
        type: "rect",
        landscape: {
            width: 32,
            height: 20,
            x: -126,
            y: 323.999,
            rx: 3,
            transform: "rotate(-90)",
            textX: 334,
            textY: 115,
            textSpanX: 325.5,
            textSpanY: 115
        },
        portrait: {
            width: 45.665,
            height: 21.956,
            x: 0,
            y: 355.695,
            rx: 3,
            textX: 20.579332,
            textY: 372.06744,
            textSpanX: 9.5793333,
            textSpanY: 372.06744
        }
    }, {
        rBetType: ROULETTE_BET_TYPE.DIRECT_15,
        color: "black",
        type: "rect",
        landscape: {
            width: 32,
            height: 20,
            x: -126,
            y: 345.999,
            rx: 3,
            transform: "rotate(-90)",
            textX: 356,
            textY: 115,
            textSpanX: 347.5,
            textSpanY: 115
        },
        portrait: {
            width: 45.665,
            height: 21.956,
            x: 0,
            y: 379.847,
            rx: 3,
            textX: 19.579332,
            textY: 397.06744,
            textSpanX: 8.5793333,
            textSpanY: 397.06744
        }
    }, {
        rBetType: ROULETTE_BET_TYPE.DIRECT_32,
        color: "red",
        type: "path",
        landscape: {
            path: "m 399.102,92.802 a 2.412,2.412 0 0 0 -2.562,-1.219 c -4.333,0.833 -3,3.167 -26.9,2.534 0,0 -1.763,-0.211 -1.636,1.911 l 0.041,27.418 c 0,1.093 0.553,2.353 1.636,2.327 17.192,0.31 27.109,0.977 43.442,-7.107 1,-0.435 1.043,-1.588 0.583,-2.583 z",
            textX: 388,
            textY: 115.5,
            textSpanX: 381,
            textSpanY: 115.5
        },
        portrait: {
            path: "m 47.374,438.145 c 2.29,-1.04 1.74,-2.813 1.74,-2.813 -1.189,-4.757 -4.519,-3.293 -3.616,-29.53 0,0 0.3,-1.935 -2.726,-1.8 l -39.128,0.047 c -1.56,0 -3.358,0.607 -3.321,1.8 -0.442,18.87 -1.393,29.757 10.142,47.688 0.621,1.1 2.267,1.145 3.687,0.64 z",
            textX: 21.579332,
            textY: 430.06744,
            textSpanX: 10.579333,
            textSpanY: 430.06744
        }
    }], FRENCH_BET_AREAS = [{
        betName: "tier",
        type: "path",
        landscape: {
            path: "M 36,63 A 27.962,27.962 0 0 1 63.924,35 H 120.9 a 7.235,7.235 0 0 1 2.6,0.583 4.745,4.745 0 0 1 1.712,1.594 l 38,51.4 c 0,0 0.851,1.045 0.461,1.779 A 1.365,1.365 0 0 1 162.383,91 H 63.924 A 27.962,27.962 0 0 1 36,63 Z",
            textX: 92,
            textY: 68
        },
        portrait: {
            path: "m 89.902,39.522 c 22.068,0 39.957,13.725 39.957,30.656 v 62.544 a 6.4,6.4 0 0 1 -0.832,2.859 6.212,6.212 0 0 1 -2.275,1.879 l -73.353,41.717 c 0,0 -1.491,0.935 -2.539,0.506 a 1.378,1.378 0 0 1 -0.916,-1.415 V 70.178 c 0,-16.931 17.891,-30.656 39.958,-30.656 z",
            textX: 91.57933,
            textY: 107.06743
        },
        color: "french_green",
        highlights: [ROULETTE_BET_TYPE.DIRECT_33, ROULETTE_BET_TYPE.DIRECT_16, ROULETTE_BET_TYPE.DIRECT_24, ROULETTE_BET_TYPE.DIRECT_5, ROULETTE_BET_TYPE.DIRECT_10, ROULETTE_BET_TYPE.DIRECT_23, ROULETTE_BET_TYPE.DIRECT_8, ROULETTE_BET_TYPE.DIRECT_30, ROULETTE_BET_TYPE.DIRECT_11, ROULETTE_BET_TYPE.DIRECT_36, ROULETTE_BET_TYPE.DIRECT_13, ROULETTE_BET_TYPE.DIRECT_27],
        rBetTypes: [ROULETTE_BET_TYPE.SEPARATE_5_8, ROULETTE_BET_TYPE.SEPARATE_10_11, ROULETTE_BET_TYPE.SEPARATE_13_16, ROULETTE_BET_TYPE.SEPARATE_23_24, ROULETTE_BET_TYPE.SEPARATE_27_30, ROULETTE_BET_TYPE.SEPARATE_33_36]
    }, {
        betName: "orphelins",
        type: "path",
        landscape: {
            path: "M 235.375,90.562 A 2.662,2.662 0 0 1 233.9,91 H 169.343 A 5.216,5.216 0 0 1 167.5,90.625 3.192,3.192 0 0 1 166.3,89.548 L 127.308,36.771 c 0,0 -0.608,-0.724 -0.355,-1.255 A 1.089,1.089 0 0 1 127.91,35 h 104.665 a 3.922,3.922 0 0 1 2.487,0.625 3.988,3.988 0 0 1 0.938,2.4 v 51.199 a 2.33,2.33 0 0 1 -0.625,1.338 z",
            textX: 193,
            textY: 68
        },
        portrait: {
            path: "m 50.57,258.401 a 2.43,2.43 0 0 1 -0.624,-1.624 v -70.863 a 4.578,4.578 0 0 1 0.535,-2.023 4.122,4.122 0 0 1 1.536,-1.319 l 75.315,-42.8 a 2.5,2.5 0 0 1 1.791,-0.39 1.122,1.122 0 0 1 0.736,1.051 v 114.9 a 3.526,3.526 0 0 1 -0.892,2.73 6.829,6.829 0 0 1 -3.428,1.029 H 52.48 a 3.884,3.884 0 0 1 -1.91,-0.691 z",
            textX: 89.57933,
            textY: 221.06743
        },
        color: "french_green",
        highlights: [ROULETTE_BET_TYPE.DIRECT_1, ROULETTE_BET_TYPE.DIRECT_20, ROULETTE_BET_TYPE.DIRECT_14, ROULETTE_BET_TYPE.DIRECT_31, ROULETTE_BET_TYPE.DIRECT_9, ROULETTE_BET_TYPE.DIRECT_6, ROULETTE_BET_TYPE.DIRECT_34, ROULETTE_BET_TYPE.DIRECT_17],
        rBetTypes: [ROULETTE_BET_TYPE.SEPARATE_6_9, ROULETTE_BET_TYPE.SEPARATE_14_17, ROULETTE_BET_TYPE.SEPARATE_17_20, ROULETTE_BET_TYPE.SEPARATE_31_34, ROULETTE_BET_TYPE.DIRECT_1]
    }, {
        betName: "voisins",
        type: "rect",
        landscape: {width: 56, height: 104, x: -91, y: 238, rx: 3, transform: "rotate(-90)", textX: 290, textY: 68},
        portrait: {width: 79.913, height: 114.174, x: 49.946, y: 261.282, rx: 3, textX: 90.57933, textY: 319.06744},
        color: "french_green",
        highlights: [ROULETTE_BET_TYPE.DIRECT_4, ROULETTE_BET_TYPE.DIRECT_7, ROULETTE_BET_TYPE.DIRECT_12, ROULETTE_BET_TYPE.DIRECT_15, ROULETTE_BET_TYPE.DIRECT_18, ROULETTE_BET_TYPE.DIRECT_21, ROULETTE_BET_TYPE.DIRECT_19, ROULETTE_BET_TYPE.DIRECT_22, ROULETTE_BET_TYPE.DIRECT_32, ROULETTE_BET_TYPE.DIRECT_35, ROULETTE_BET_TYPE.DIRECT_0, ROULETTE_BET_TYPE.DIRECT_2, ROULETTE_BET_TYPE.DIRECT_3, ROULETTE_BET_TYPE.DIRECT_25, ROULETTE_BET_TYPE.DIRECT_26, ROULETTE_BET_TYPE.DIRECT_28, ROULETTE_BET_TYPE.DIRECT_29],
        rBetTypes: [ROULETTE_BET_TYPE.SEPARATE_4_7, ROULETTE_BET_TYPE.SEPARATE_12_15, ROULETTE_BET_TYPE.SEPARATE_18_21, ROULETTE_BET_TYPE.SEPARATE_19_22, ROULETTE_BET_TYPE.SEPARATE_32_35, ROULETTE_BET_TYPE.THREE_0_2_3, ROULETTE_BET_TYPE.THREE_0_2_3, ROULETTE_BET_TYPE.CORNER_25_29, ROULETTE_BET_TYPE.CORNER_25_29]
    }, {
        betName: "zero",
        type: "path",
        landscape: {
            path: "M 411.602,63 A 27.962,27.962 0 0 0 383.678,35 h -37.051 a 2.6,2.6 0 0 0 -2.127,0.812 3.569,3.569 0 0 0 -0.5,2.3 v 50.515 a 3.316,3.316 0 0 0 0.625,1.748 3.123,3.123 0 0 0 1.935,0.625 h 37.118 a 27.962,27.962 0 0 0 27.924,-28 z",
            textX: 375,
            textY: 68
        },
        portrait: {
            path: "m 89.903,451.867 c 22.067,0 39.957,-13.725 39.957,-30.656 v -40.675 a 2.483,2.483 0 0 0 -1.159,-2.335 6.419,6.419 0 0 0 -3.281,-0.549 H 53.333 a 5.75,5.75 0 0 0 -2.495,0.686 2.894,2.894 0 0 0 -0.892,2.125 v 40.749 c 0,16.93 17.889,30.655 39.957,30.655 z",
            textX: 91.57933,
            textY: 416.06744
        },
        color: "french_green",
        highlights: [ROULETTE_BET_TYPE.DIRECT_12, ROULETTE_BET_TYPE.DIRECT_35, ROULETTE_BET_TYPE.DIRECT_3, ROULETTE_BET_TYPE.DIRECT_0, ROULETTE_BET_TYPE.DIRECT_26, ROULETTE_BET_TYPE.DIRECT_32, ROULETTE_BET_TYPE.DIRECT_15],
        rBetTypes: [ROULETTE_BET_TYPE.SEPARATE_0_3, ROULETTE_BET_TYPE.SEPARATE_12_15, ROULETTE_BET_TYPE.SEPARATE_32_35, ROULETTE_BET_TYPE.DIRECT_26],
        exception: [ROULETTE_BET_TYPE.SEPARATE_4_7, ROULETTE_BET_TYPE.SEPARATE_12_15, ROULETTE_BET_TYPE.SEPARATE_18_21, ROULETTE_BET_TYPE.SEPARATE_19_22, ROULETTE_BET_TYPE.SEPARATE_32_35, ROULETTE_BET_TYPE.THREE_0_2_3, ROULETTE_BET_TYPE.THREE_0_2_3, ROULETTE_BET_TYPE.CORNER_25_29, ROULETTE_BET_TYPE.CORNER_25_29]
    }], RouletteFrenchTable = () => {
        const {isForceLandscape: r} = useDeviceOrientation(), {rerender: R} = useRerender(),
            y = useAvailableChips(), [E, C] = React.useState(2), [x, B] = React.useState("landscape"), [N, L] = React.useContext(HighlightedContext),
            O = React.useContext(GameTableBetStateContext), D = React.useContext(GameTableBetAmountContext),
            z = React.useContext(GameTableBetContext), F = React.useContext(GameTablePayoutContext),
            _e = React.useContext(GameTablePendingBetAmountContext), [Y, H] = React.useState(Object.values(ROULETTE_BET_TYPE).map(Ve => ({
                color: y[0].color,
                amount: Helper.formatAbbrMoney(D[Ve])
            }))), [me, ce] = React.useState(FRENCH_BET_AREAS.map(Ve => ({
                color: y[0].color,
                amount: Helper.formatAbbrMoney(Array.from(new Set(Ve.rBetTypes.filter(Je => Je > ROULETTE_BET_TYPE.DIRECT_36))).reduce((Je, Qe) => Je + D[Qe], 0))
            }))), ie = useChips({chipAttrs: Y}), Be = useChips({chipAttrs: me}), ve = useBet(D, O, ROULETTE_BET_TYPE_MAP, z),
            Re = useBetChip(F, D, _e, ie), Ce = useCumulativeBetChip(ROULETTE_BET_TYPE_MAP, F, D, _e, Be);
        useBetAmountUpdateChipEffect(D, _e, Y, H), React.useEffect(() => {
            B(r ? "landscape" : "portrait")
        }, [r]), React.useEffect(() => {
            let Ve = [];
            for (let Je = 0; Je < FRENCH_BET_AREAS.length; Je++) {
                let Qe = Array.from(new Set(FRENCH_BET_AREAS[Je].rBetTypes.filter(De => De > ROULETTE_BET_TYPE.DIRECT_36)));
                if (FRENCH_BET_AREAS[Je].exception) {
                    let De = Object.keys(D).reduce((Xe, He) => (Xe[He] = D[He] + _e[He], Xe), {});
                    if (FRENCH_BET_AREAS[Je].rBetTypes.some(Xe => De[Xe] === 0) && FRENCH_BET_AREAS[Je].rBetTypes.some(Xe => !F.find(He => He.betType === Xe))) break;
                    (FRENCH_BET_AREAS[Je].exception.every(Xe => De[Xe] !== 0) || FRENCH_BET_AREAS[Je].exception.every(Xe => F.find(He => He.betType === Xe))) && (Qe = Qe.filter(Xe => !FRENCH_BET_AREAS[Je].exception.includes(Xe)))
                }
                let Ze, qe = F.filter((De, Xe) => Qe.includes(ROULETTE_BET_TYPE_MAP.indexOf(De.betType)));
                qe.length > 0 ? (Ze = qe.reduce((De, Xe) => De + Xe.betAmount + Xe.payoutAmount, 0) / 100, Ze <= 0 && (Ze = Math.abs(qe.reduce((De, Xe) => De + Xe.payoutAmount, 0) / 100))) : Ze = Qe.reduce((De, Xe) => De + D[Xe] + _e[Xe], 0);
                let ze = y.findLastIndex(De => De.amount <= Ze);
                if (ze === -1 && (ze = 0), Ze > 1 && (Ze = Math.trunc(Ze)), Ze >= 1e4) {
                    const De = y[ze].amount;
                    Ze > De ? Ze = Helper.formatAbbrMoney(De) + "+" : Ze = Helper.formatAbbrMoney(Ze)
                }
                Ve[Je] = {color: y[ze].color, amount: Ze}
            }
            ce(Ve)
        }, [D, _e, F]);
        const Ne = React.useCallback((Ve, Je) => {
            if (O === BET_STATE.NO_BET) return;
            let Qe = Ve.slice(), Ze = FRENCH_TABLE_ORDER.findIndex(qe => qe.rBetType === Qe[0]);
            for (let qe = 1; qe <= Je; qe++) Qe.push(FRENCH_TABLE_ORDER[(Ze + qe) % FRENCH_TABLE_ORDER.length].rBetType), Qe.push(FRENCH_TABLE_ORDER[(Ze + FRENCH_TABLE_ORDER.length - qe) % FRENCH_TABLE_ORDER.length].rBetType);
            L(Qe)
        }, [O]), we = React.useCallback(() => {
            L([])
        }, []), Me = React.useCallback(Ve => {
            let Je;
            switch (Ve.type) {
                case"path":
                    return Je = Ve[x], jsx("path", {
                        className: Ve.color,
                        onClick: () => ve(N),
                        onMouseOver: Ne.bind(null, [Ve.rBetType], E),
                        onTouchStart: Ne.bind(null, [Ve.rBetType], E),
                        onMouseLeave: we,
                        id: `rb_${Ve.rBetType - ROULETTE_BET_TYPE.DIRECT_0}`,
                        d: Je.path,
                        "aria-checked": N.includes(Ve.rBetType)
                    }, Ve.rBetType);
                case"rect":
                    return Je = Ve[x], jsx("rect", {
                        className: Ve.color,
                        onClick: () => ve(N),
                        onMouseOver: Ne.bind(null, [Ve.rBetType], E),
                        onTouchStart: Ne.bind(null, [Ve.rBetType], E),
                        onMouseLeave: we,
                        id: `rb_${Ve.rBetType - ROULETTE_BET_TYPE.DIRECT_0}`,
                        width: Je.width,
                        height: Je.height,
                        rx: Je.rx,
                        x: Je.x,
                        y: Je.y,
                        transform: Je.transform,
                        "aria-checked": N.includes(Ve.rBetType)
                    }, Ve.rBetType)
            }
        }, [ve, N, E, x]), ke = React.useCallback(Ve => {
            let Je;
            switch (Ve.type) {
                case"path":
                    return Je = Ve[x], jsx("path", {
                        className: Ve.color,
                        onClick: () => ve(Ve.rBetTypes),
                        onMouseOver: Ne.bind(null, Ve.highlights, 0),
                        onTouchStart: Ne.bind(null, Ve.highlights, E),
                        onMouseLeave: we,
                        id: `rb_${Ve.betName}`,
                        d: Je.path
                    }, Ve.betName);
                case"rect":
                    return Je = Ve[x], jsx("rect", {
                        className: Ve.color,
                        onClick: () => ve(Ve.rBetTypes),
                        onMouseOver: Ne.bind(null, Ve.highlights, 0),
                        onTouchStart: Ne.bind(null, Ve.highlights, E),
                        onMouseLeave: we,
                        id: `rb_${Ve.betName}`,
                        width: Je.width,
                        height: Je.height,
                        rx: Je.rx,
                        x: Je.x,
                        y: Je.y,
                        transform: Je.transform
                    }, Ve.betName)
            }
        }, [ve, N, E, x]), Fe = React.useCallback(Ve => {
            const Je = Ve[x];
            return jsx("text", {
                x: Je.textX,
                y: Je.textY,
                textAnchor: "middle",
                children: Ve.rBetType - ROULETTE_BET_TYPE.DIRECT_0
            }, Ve.rBetType)
        }, [x]), $e = React.useCallback(Ve => {
            const Je = Ve[x];
            return jsx("text", {
                x: Je.textX,
                y: Je.textY,
                textAnchor: "middle",
                children: t(`game_table.roulette.${Ve.betName}`).toUpperCase()
            }, Ve.betName)
        }, [x]);
        return jsxs("div", {
            id: "roulette_french_table", children: [jsxs("div", {
                id: "roulette_french_table_container",
                children: [jsxs("svg", {
                    id: "roulette_french_bet_table",
                    xmlns: "http://www.w3.org/2000/svg",
                    width: TABLE_CONFIG[x].width,
                    height: TABLE_CONFIG[x].height,
                    viewBox: `0 0 ${TABLE_CONFIG[x].width} ${TABLE_CONFIG[x].height}`,
                    "aria-disabled": O === BET_STATE.NO_BET,
                    children: [jsx("g", {
                        id: "betAreaNumbers",
                        children: FRENCH_TABLE_ORDER.map(Ve => Me(Ve))
                    }), FRENCH_BET_AREAS.map(Ve => ke(Ve)), jsx("g", {children: FRENCH_TABLE_ORDER.map(Ve => Fe(Ve))}), FRENCH_BET_AREAS.map(Ve => $e(Ve))]
                }), !r && jsxs("div", {
                    id: "roulette_french_bet_table_chips",
                    children: [FRENCH_TABLE_ORDER.map(Ve => jsx("div", {
                        className: `direct_${Ve.rBetType - ROULETTE_BET_TYPE.DIRECT_0}`,
                        style: {gridArea: `direct_${Ve.rBetType - ROULETTE_BET_TYPE.DIRECT_0}`},
                        children: Re(Ve.rBetType)
                    }, Ve.rBetType)), FRENCH_BET_AREAS.map((Ve, Je) => jsx("div", {
                        className: Ve.betName,
                        style: {gridArea: Ve.betName},
                        children: Ce(Array.from(new Set(Ve.rBetTypes.filter(Qe => Qe > ROULETTE_BET_TYPE.DIRECT_36))), Je, Ve.exception ? Array.from(new Set(Ve.exception.filter(Qe => Qe > ROULETTE_BET_TYPE.DIRECT_36))) : void 0)
                    }, Ve.betName))]
                })]
            }), jsxs("div", {
                id: "neighbour_setting",
                children: [jsx("button", {
                    "aria-hidden": E >= 9,
                    onClick: C.bind(null, E + 1),
                    children: "+"
                }), jsx("div", {children: E}), jsx("button", {
                    "aria-hidden": E <= 0,
                    onClick: C.bind(null, E - 1),
                    children: "-"
                })]
            })]
        }, R)
    }, RouletteResultRoad$1 = "", RouletteResultRoad = r => {
        let {hasToggleButton: R = !0, showPanalDesription: y = !0, betable: E = !0} = r;
        const {isForceLandscape: C} = useDeviceOrientation(), {t: x} = useTranslation(), [B, N] = React.useContext(HighlightedContext),
            L = React.useContext(GameTableBetStateContext), O = React.useContext(GameTableBetAmountContext),
            D = React.useContext(GameTableBetContext),
            z = useBet(O, L, ROULETTE_BET_TYPE_MAP, D), [F, _e] = React.useState(!1), [Y, H] = React.useState(!0);
        React.useEffect(() => {
            C || (_e(!1), H(!1))
        }, [C]), React.useEffect(() => {
            C && H(L === BET_STATE.NO_BET)
        }, [L, C]);
        const me = React.useCallback(ve => {
            E && (L === BET_STATE.NO_BET || !C || N([ve + ROULETTE_BET_TYPE.DIRECT_0]))
        }, [L]), ce = React.useCallback(() => {
            E && N([])
        }, []), ie = React.useCallback(() => R ? jsxs("button", {
            id: "history_toggle",
            onClick: _e.bind(null, !F),
            "aria-hidden": !1,
            children: [jsx("div", {}), jsx("div", {children: x("roadmap.history")}), jsx("div", {className: `svg_arrow_${F ? "down" : "up"}`})]
        }) : null, [F, R]), Be = React.useCallback(() => {
            E && z.bind(null, B)()
        }, [z, B]);
        return jsxs("div", {
            id: "roulette_result_road",
            children: [C && ie(), jsxs("div", {
                id: "history_container",
                "aria-hidden": R && !F,
                "aria-disabled": Y,
                children: [jsxs("article", {
                    id: "history_panel",
                    children: [r.results.slice().reverse().map((ve, Re) => jsx("div", {
                        onClick: Be,
                        onMouseOver: me.bind(null, ve),
                        onMouseLeave: ce,
                        className: RED.includes(ve) ? "red" : BLACK.includes(ve) ? "black" : "green",
                        children: ve
                    }, Re)), y && jsx("div", {className: "description", children: x("roadmap.last_50_rounds")})]
                }), R && jsxs("article", {
                    className: "result_road roulette",
                    "aria-disabled": Y,
                    "aria-hidden": F,
                    children: [r.results.length > 0 && r.results.slice(-r.size).reverse().map((ve, Re) => jsx("div", {
                        onClick: () => z(B),
                        onMouseOver: me.bind(null, ve),
                        onMouseLeave: ce,
                        className: RED.includes(ve) ? "red" : BLACK.includes(ve) ? "black" : "green",
                        children: ve
                    }, Re)), Array(Math.max(r.size - r.results.length, 0)).fill(void 0).map((ve, Re) => jsx("div", {}, Re))]
                })]
            })]
        })
    }, RoulettePieChart$2 = "", RoulettePieChart = ({roadMap: r, mouseOver: R, onClick: y, hoverNum: E}) => {
        const x = "rgba(175, 16, 7, 0.879)", B = "rgba(44, 215, 75, 0.834)", N = "rgba(240, 240, 240,0.9)",
            L = React.useRef([]), [O, D] = React.useState(), [z, F] = React.useState(), [_e, Y] = React.useState(0);
        let {setData: H, pathsData: me, numLabels: ce} = usePieChart(), ie = React.useRef(0);
        const Be = React.useContext(GameTableBetStateContext);
        React.useMemo(() => {
            let De = ce.findIndex(Xe => Xe == E);
            F(De > 0 ? De : null)
        }, [E]);
        const ve = useDebounce(() => {
            H(r)
        }, 300), Re = React.useCallback(De => {
            isMobile$1 || isTablet_1 || F(null)
        }, [r, Be]), Ce = De => {
            isMobile$1 || isTablet_1 || (y && y(ce[De]), D(De))
        }, Ne = React.useCallback(De => {
            isMobile$1 || isTablet_1 || (R && R(ce[De]), F(De))
        }, [r, Be]), we = React.useCallback(De => {
            F(De)
        }, [r]), Me = React.useCallback(De => {
            F(null)
        }, [r]), ke = De => {
            y && y(ce[De]), F(null)
        };
        React.useEffect(() => {
            (isIOS_1 || isSafari_1) && Je()
        }, [me]), React.useMemo(() => {
            if (!(r.length <= 0)) return ie.current == 0 ? (H(r), ie.current += 1) : ve(), r
        }, [r]);
        const Fe = React.useCallback((De, Xe, He = !1) => Xe == 0 ? B : De <= 12 ? De >> 0 & 1 ? x : N : De >> 0 & 1 ? N : x, [r, z]),
            $e = React.useMemo(() => Array.from(Array(ce.length)).fill({label: "", value: 1}), [r]),
            Ve = $e.reduce((De, Xe) => De + Xe.value, 0), Je = () => {
                L.current && L.current.forEach(De => {
                    De && typeof De.beginElement == "function" && De.beginElement()
                })
            };
        React.useEffect(() => {
            const De = () => {
                (() => {
                    isAndroid_1 ? setTimeout(() => {
                        Y(He => He += 1)
                    }, 100) : Y(He => He += 1)
                })()
            };
            return window.addEventListener("resize", De), () => {
                window.removeEventListener("resize", De)
            }
        }, []);
        const Qe = React.useMemo(() => {
            if (me.length != 0) return $e.map((De, Xe) => jsx("g", {
                className: "us",
                children: jsx("path", {
                    id: "pie-chart-layer",
                    d: me[0][Xe],
                    fill: Fe(Xe, ce[Xe]),
                    stroke: "grey",
                    strokeWidth: .3,
                    className: "changed us",
                    style: {cursor: "pointer"},
                    children: isIOS_1 || isSafari_1 ? jsx("animate", {
                        ref: He => {
                            He && !L.current.includes(He) && L.current.push(He)
                        },
                        attributeName: "d",
                        dur: "0.5s",
                        values: `${me.length > 1 ? me[1][Xe] + ";" : null} ${me[0][Xe]}`,
                        fill: "freeze",
                        calcMode: "spline",
                        keyTimes: "0; 1",
                        keySplines: ".42 0 1 1"
                    }) : null
                })
            }, Xe))
        }, [me]), Ze = React.useMemo(() => {
            let De = 0;
            return Array.from(new Array(ce.length)).map((Xe, He) => {
                const Ge = 360 / Ve, Le = De + Ge, We = svgUtils().describeArc(200, 200, 150, De, Le);
                return De = Le, jsx("g", {
                    className: "us",
                    children: jsx("path", {
                        id: "pie-chart-frame",
                        d: We,
                        fill: "rgba(0, 0, 0, 0.0)",
                        stroke: "grey",
                        strokeWidth: .3,
                        style: {cursor: "pointer"},
                        className: "us"
                    })
                }, He)
            })
        }, [ce]), qe = React.useMemo(() => {
            let De = 0;
            return Array.from(new Array(ce.length)).map((Xe, He) => {
                const Ge = 360 / Ve, Le = De + Ge;
                De = Le;
                const We = (De + Le - 10) / 2, dt = 200 + 165 * Math.cos((We - 90) * Math.PI / 180),
                    et = 200 + 165 * Math.sin((We - 90) * Math.PI / 180);
                return jsx("g", {
                    className: "us",
                    children: jsx("text", {
                        id: "bet-label",
                        transform: `rotate(${We}, ${dt}, ${et})`,
                        x: dt,
                        y: et,
                        textAnchor: "middle",
                        dominantBaseline: "central",
                        fill: Fe(He, ce[He]),
                        fontSize: "15px",
                        fontWeight: "bold",
                        className: "us",
                        children: ce[He]
                    }, _e)
                }, He)
            })
        }, [_e, ce]), ze = React.useMemo(() => {
            let De = 0;
            return Array.from(new Array(ce.length)).map((Xe, He) => {
                const Ge = 360 / Ve, Le = De + Ge, We = svgUtils().describeArc(200, 200, 180, De, Le);
                return De = Le, jsx("g", {
                    className: "us",
                    children: jsx("path", {
                        id: "highlight-layer",
                        d: We,
                        fill: "rgba(0, 0, 0, 0.0)",
                        stroke: "grey",
                        strokeWidth: .3,
                        onTouchStart: () => we(He),
                        onTouchCancel: Me,
                        onTouchEnd: () => ke(He),
                        onMouseDown: () => Ce(He),
                        onMouseOver: () => Ne(He),
                        onMouseLeave: Re,
                        style: isDesktop$1 ? {cursor: "pointer"} : {},
                        className: z === He ? "hovered-white us" : "us"
                    })
                }, He)
            })
        }, [z, y]);
        return jsx("div", {
            id: "pie-chart",
            className: "us",
            children: jsxs("svg", {
                className: "svg-element us",
                xmlns: "http://www.w3.org/2000/svg",
                viewBox: "0 0 400 400",
                children: [jsx("circle", {
                    cx: "200",
                    cy: "200",
                    r: "180",
                    stroke: "rgba(227, 227, 227, 1)",
                    strokeWidth: 1.5,
                    className: "us"
                }), Ze, qe, Qe, ze]
            })
        })
    }, RoulettePieChart$1 = React.memo(RoulettePieChart);

function useDebounce(r, R) {
    const y = React.useRef(null);
    React.useEffect(() => () => {
        y.current && clearTimeout(y.current)
    }, []);

    function E(...C) {
        y.current && clearTimeout(y.current), y.current = setTimeout(() => {
            r(...C)
        }, R)
    }

    return E
}

const svgUtils = () => {
        const r = (y, E, C, x, B) => {
            const N = R(y, E, C, B), L = R(y, E, C, x), O = B - x <= 180 ? "0" : "1";
            return ["M", N.x, N.y, "A", C, C, 0, O, 0, L.x, L.y, "L", y, E, "Z"].join(" ")
        }, R = (y, E, C, x) => {
            const B = (x - 90) * Math.PI / 180;
            return {x: y + C * Math.cos(B), y: E + C * Math.sin(B)}
        };
        return {describeArc: r}
    }, usePieChart = () => {
        const r = React.useMemo(() => [20, 14, 31, 9, 22, 18, 29, 7, 28, 12, 35, 3, 26, 0, 32, 15, 19, 4, 21, 2, 25, 17, 34, 6, 27, 13, 36, 11, 30, 8, 23, 10, 5, 24, 16, 33, 1], []),
            R = 150, [y, E] = React.useState([]), [C, x] = React.useState(), B = React.useMemo(() => C, [C]), N = D => {
                let z = {}, F = 0, _e = 0;
                for (let Y = 0; Y < D.length; Y++) {
                    let H = D[Y];
                    z[H] == null ? z[H] = 1 : z[H] += 1, z[H] > F && (F = z[H], _e = 0), z[H] == F && (_e += 1)
                }
                return _e > 1 && (F += F / _e), {biggestValue: F, statistics: z}
            }, L = (D, z) => {
                let F = D.statistics[z] == null ? 0 : D.statistics[z];
                return {value: parseFloat((F / D.biggestValue).toFixed(1)) * R}
            }, O = (D, z) => {
                let F = 0;
                const _e = 360 / D;
                let Y = {};
                for (let H = 0; H < D; H++) {
                    const me = F + _e, ce = svgUtils().describeArc(200, 200, z[H].value, F, me);
                    Y[H] = ce, F = me
                }
                return {...Y}
            };
        return React.useMemo(() => {
            if (B) {
                let D = B && N(B), z = Array.from(Array(r.length)).map((_e, Y) => L(D, r[Y])), F = O(r.length, z);
                E(_e => _e.length > 0 ? [F, _e[0]] : [F])
            }
            return y
        }, [B]), {setData: x, pathsData: y, numLabels: r}
    }, RouletteStatistics$1 = "", RouletteStatistics = r => {
        const {t: R} = useTranslation(), [y, E] = React.useContext(HighlightedContext),
            C = React.useContext(GameTableBetStateContext), x = React.useContext(GameTableBetAmountContext),
            B = React.useContext(GameTableBetContext),
            N = useBet(x, C, ROULETTE_BET_TYPE_MAP, B), [L, O] = React.useState([]), [D, z] = React.useState([]), [F, _e] = React.useState([]), [Y, H] = React.useState([]),
            me = React.useCallback(Re => {
                isMobile$1 || C === BET_STATE.NO_BET || E(Re)
            }, [C]), ce = React.useCallback(() => {
                E([])
            }, []);
        React.useEffect(() => {
            r.roadMap.length > 0 && (O(r.roadMap.map(Re => parseInt(Re.match(REGEX.LAST_NUMBER)[0]))), z(r.roadMap.map(Re => Re[0])), _e(r.roadMap.map(Re => Re[1])), H(r.roadMap.map(Re => Re[2])))
        }, [r.roadMap]);
        const ie = React.useCallback(Re => {
                let Ce = [Re];
                switch (Re) {
                    case ROULETTE_BET_TYPE.SMALL:
                        return Ce.concat(Array(18).fill(void 0).map((Ne, we) => ROULETTE_BET_TYPE.DIRECT_0 + (we + 1)));
                    case ROULETTE_BET_TYPE.BIG:
                        return Ce.concat(Array(18).fill(void 0).map((Ne, we) => ROULETTE_BET_TYPE.DIRECT_0 + (we + 19)));
                    case ROULETTE_BET_TYPE.EVEN:
                        return Ce.concat(Array(18).fill(void 0).map((Ne, we) => ROULETTE_BET_TYPE.DIRECT_0 + (we + 1) * 2));
                    case ROULETTE_BET_TYPE.ODD:
                        return Ce.concat(Array(18).fill(void 0).map((Ne, we) => ROULETTE_BET_TYPE.DIRECT_0 + we * 2 + 1));
                    case ROULETTE_BET_TYPE.RED:
                        return Ce.concat(RED.map(Ne => ROULETTE_BET_TYPE.DIRECT_0 + Ne));
                    case ROULETTE_BET_TYPE.BLACK:
                        return Ce.concat(BLACK.map(Ne => ROULETTE_BET_TYPE.DIRECT_0 + Ne));
                    default:
                        return Ce
                }
            }, []), Be = React.useCallback(Re => isDesktop$1 && N([ROULETTE_BET_TYPE.DIRECT_0 + Re]), [isDesktop$1, N]),
            ve = React.useCallback(Re => isDesktop$1 && N([Re]), [isDesktop$1, N]);
        return L && L.length > 0 ? jsxs("section", {
            id: "roulette_statistics",
            children: [jsx(RoulettePieChart$1, {
                hoverNum: -1,
                roadMap: L,
                mouseOver: Re => me([ROULETTE_BET_TYPE.DIRECT_0 + Re]),
                onClick: Be
            }), jsxs("section", {
                id: "ratios",
                children: [jsxs("button", {
                    className: "grey",
                    onClick: ve.bind(null, ROULETTE_BET_TYPE.SMALL),
                    onMouseOver: me.bind(null, ie(ROULETTE_BET_TYPE.SMALL)),
                    onMouseLeave: ce,
                    onTouchEnd: ce,
                    children: [jsx("div", {children: R(`bet_type.${ROULETTE_BET_TYPE_MAP[ROULETTE_BET_TYPE.SMALL]}`)}), jsx("div", {
                        className: "percentage",
                        style: {height: `${Math.round(D.filter(Re => Re === "S").length / D.length * 100)}%`},
                        children: `${Math.round(D.filter(Re => Re === "S").length / D.length * 100)}%`
                    })]
                }), jsxs("button", {
                    className: "yellow",
                    onClick: ve.bind(null, ROULETTE_BET_TYPE.EVEN),
                    onMouseOver: me.bind(null, ie(ROULETTE_BET_TYPE.EVEN)),
                    onMouseLeave: ce,
                    onTouchEnd: ce,
                    children: [jsx("div", {children: R(`bet_type.${ROULETTE_BET_TYPE_MAP[ROULETTE_BET_TYPE.EVEN]}`)}), jsx("div", {
                        className: "percentage",
                        style: {height: `${Math.round(F.filter(Re => Re === "E").length / F.length * 100)}%`},
                        children: `${Math.round(F.filter(Re => Re === "E").length / F.length * 100)}%`
                    })]
                }), jsxs("button", {
                    className: "red",
                    onClick: ve.bind(null, ROULETTE_BET_TYPE.RED),
                    onMouseOver: me.bind(null, ie(ROULETTE_BET_TYPE.RED)),
                    onMouseLeave: ce,
                    onTouchEnd: ce,
                    children: [jsx("div", {className: "svg_table_roulette_red"}), jsx("div", {
                        className: "percentage",
                        style: {height: `${Math.round(Y.filter(Re => Re === "r").length / Y.length * 100)}%`},
                        children: `${Math.round(Y.filter(Re => Re === "r").length / Y.length * 100)}%`
                    })]
                }), jsxs("button", {
                    className: "black",
                    onClick: ve.bind(null, ROULETTE_BET_TYPE.BLACK),
                    onMouseOver: me.bind(null, ie(ROULETTE_BET_TYPE.BLACK)),
                    onMouseLeave: ce,
                    onTouchEnd: ce,
                    children: [jsx("div", {className: "svg_table_roulette_black"}), jsx("div", {
                        className: "percentage",
                        style: {height: `${Math.round(Y.filter(Re => Re === "b").length / Y.length * 100)}%`},
                        children: `${Math.round(Y.filter(Re => Re === "b").length / Y.length * 100)}%`
                    })]
                }), jsxs("button", {
                    className: "yellow",
                    onClick: ve.bind(null, ROULETTE_BET_TYPE.ODD),
                    onMouseOver: me.bind(null, ie(ROULETTE_BET_TYPE.ODD)),
                    onMouseLeave: ce,
                    onTouchEnd: ce,
                    children: [jsx("div", {children: R(`bet_type.${ROULETTE_BET_TYPE_MAP[ROULETTE_BET_TYPE.ODD]}`)}), jsx("div", {
                        className: "percentage",
                        style: {height: `${Math.round(F.filter(Re => Re === "O").length / F.length * 100)}%`},
                        children: `${Math.round(F.filter(Re => Re === "O").length / F.length * 100)}%`
                    })]
                }), jsxs("button", {
                    className: "grey",
                    onClick: ve.bind(null, ROULETTE_BET_TYPE.BIG),
                    onMouseOver: me.bind(null, ie(ROULETTE_BET_TYPE.BIG)),
                    onMouseLeave: ce,
                    onTouchEnd: ce,
                    children: [jsx("div", {children: R(`bet_type.${ROULETTE_BET_TYPE_MAP[ROULETTE_BET_TYPE.BIG]}`)}), jsx("div", {
                        className: "percentage",
                        style: {height: `${Math.round(D.filter(Re => Re === "B").length / D.length * 100)}%`},
                        children: `${Math.round(D.filter(Re => Re === "B").length / D.length * 100)}%`
                    })]
                })]
            }), jsx("div", {children: R("roadmap.last_50_rounds")})]
        }) : null
    }, StatisticPanel = "", StatisticsPanel = r => {
        const {t: R} = useTranslation();
        return jsxs("aside", {
            id: "statistics_panel",
            children: [jsxs("div", {
                className: "title",
                children: [jsx("div", {className: "svg_statistic"}), jsx("div", {children: R("roadmap.statistics")})]
            }), r.children]
        })
    }, RouletteHistory = r => {
        const {t: R} = useTranslation(), {orientation: y} = useDeviceOrientation(), [E, C] = React.useContext(HighlightedContext),
            x = React.useContext(GameTableBetStateContext), B = React.useContext(GameTableBetAmountContext),
            N = React.useContext(GameTableBetContext), L = useBet(B, x, ROULETTE_BET_TYPE_MAP, N),
            O = React.useCallback(z => {
                x !== BET_STATE.NO_BET && y === "large-landscape" && C([z + ROULETTE_BET_TYPE.DIRECT_0])
            }, [x]), D = React.useCallback(() => {
                C([])
            }, []);
        return jsxs("article", {
            id: "history_panel",
            children: [r.results.slice().reverse().map((z, F) => jsx("div", {
                onClick: () => L(E),
                onMouseOver: O.bind(null, z),
                onMouseLeave: D,
                className: RED.includes(z) ? "red" : BLACK.includes(z) ? "black" : "green",
                children: z
            }, F)), jsx("div", {children: R("roadmap.last_50_rounds")})]
        })
    }, useToggle = r => {
        const [R, y] = React.useState(r);
        return [R, () => y(C => !C)]
    }, ROtoggleButton = ({onSvg: r, offSvg: R, onClick: y, style: E, classname: C, toggled: x = !1}) => {
        const [B, N] = useToggle(!1);
        React.useEffect(() => {
            x && !B && N()
        }, [x, B]);
        const L = React.useMemo(() => ({style: E, classname: C}), [E, C]), O = React.useCallback(D => {
            D.preventDefault(), N(), y && y(B)
        }, [B, y]);
        return jsx("button", {
            className: L.classname,
            style: L.style,
            onClick: O,
            children: jsx("div", {style: {width: "100%", height: "100%"}, className: B ? r : R})
        })
    }, ROtoggleButton$1 = React.memo(ROtoggleButton), GameTableMenuButton$1 = "", GameTablePopUp$1 = "",
    GameTablePopUpContext = React.createContext({
        popup: "", setPopup: () => {
        }
    }), GameTablePopUpContextProvider = r => {
        const [R, y] = React.useState("");
        return jsx(GameTablePopUpContext.Provider, {value: {popup: R, setPopup: y}, children: r.children})
    }, useGameTablePopups = r => {
        const [R, y] = React.useContext(PopupContext), {
                popup: E,
                setPopup: C
            } = React.useContext(GameTablePopUpContext), [x, B] = React.useState(!1), [N, L] = React.useState(r || ""),
            O = React.useCallback(z => {
                B(!x), L(z)
            }, [x]), D = React.useCallback(() => {
                B(!1), L(""), y(""), C("")
            }, []);
        return React.useEffect(() => () => {
            C("")
        }, []), React.useEffect(() => {
            C(N)
        }, [N]), React.useEffect(() => {
        }, [x]), React.useEffect(() => {
            E === "" && (B(!1), L(""))
        }, [E]), {isPopupVisible: x, setPopupAppearance: L, togglePopup: O, forceClose: D}
    }, GameTablePopUp = r => {
        let {enable: R = !0, block: y = !1} = r;
        const [E, C] = React.useState(!1), {popup: x, setPopup: B} = React.useContext(GameTablePopUpContext);
        return React.useEffect(() => {
            E || B("")
        }, [E]), React.useEffect(() => {
            !E && r.function && x == r.function && C(!0)
        }, [x]), jsxs("div", {
            className: `game_table_popup_container ${r.function}`,
            children: [jsxs(Fragment, {children: [E && y && jsx("div", {className: "block"}), " "]}), jsx(Fragment, {children: E && r.children && React.cloneElement(r.children, {onClose: () => C(!1)})}), " "]
        })
    }, VipBaccaratGameTable$1 = "", Responsive$x = "", useRoadMovedListener = r => {
        const {orientation: R} = useDeviceOrientation(), [y, E] = React.useState(!1);
        return React.useEffect(() => {
            var D, z;
            E(!1);
            let C = {left: 0, x: 0};
            const x = F => {
                r.current && (E(!1), C = {
                    left: r.current.scrollLeft,
                    x: F.clientX
                }, window.addEventListener("mousemove", N), window.addEventListener("mouseup", O))
            }, B = F => {
                r.current && (E(!1), C = {
                    left: r.current.scrollLeft,
                    x: F.touches[0].clientX
                }, window.addEventListener("touchmove", L), window.addEventListener("touchend", O))
            }, N = F => {
                if (r.current) {
                    E(!0);
                    const _e = F.clientX - C.x;
                    r.current.scrollLeft = C.left - _e
                }
            }, L = F => {
                if (r.current) {
                    E(!0);
                    const _e = F.touches[0].clientX - C.x;
                    r.current.scrollLeft = C.left - _e
                }
            }, O = () => {
                r.current && (window.removeEventListener("mousemove", N), window.removeEventListener("mouseup", O), window.removeEventListener("touchmove", L), window.removeEventListener("touchend", O))
            };
            return R.includes("short-portrait") && ((D = r.current) == null || D.addEventListener("mousedown", x)), R.includes("short-portrait") && ((z = r.current) == null || z.addEventListener("touchstart", B)), () => {
                var F, _e, Y;
                (F = r.current) == null || F.removeEventListener("mousedown", x), (_e = r.current) == null || _e.removeEventListener("touchend", B), (Y = r.current) == null || Y.removeEventListener("touchmove", L)
            }
        }, [R]), y
    }, Responsive$w = "";
var PANEL_STATE = (r => (r[r.OPEN = 0] = "OPEN", r[r.STAGE_1_CLOSING = 1] = "STAGE_1_CLOSING", r[r.STAGE_2_CLOSING = 2] = "STAGE_2_CLOSING", r[r.CLOSED = 3] = "CLOSED", r))(PANEL_STATE || {});
const CARD_ORIENTATION = {PORTRAIT: !0, LANDSCAPE: !1};
var SEEING_SIDE = (r => (r.NONE = "none", r.BANKER = "banker", r.PLAYER = "player", r))(SEEING_SIDE || {});
const SeeCardContext = React.createContext({
        seeingSide: "none",
        setSeeingSide: () => {
        },
        rotateCard: () => {
        },
        onOpenedCard: () => {
        },
        playerCardsOrientation: [!1, !1, !1],
        bankerCardsOrientation: [!1, !1, !1],
        openedPlayerCards: [!1, !1, !1],
        setOpenedPlayerCards: () => {
        },
        openedBankerCards: [!1, !1, !1],
        setOpenedBankerCards: () => {
        },
        seeingCardIndex: 0,
        setSeeingCardIndex: () => {
        },
        panelState: 3
    }), useSeeCard = (r, R, y, E) => {
        const {gameStatus: C, countDown: x} = React.useContext(GameTableStatusContext),
            B = React.useRef(-1), [N, L] = React.useState([!1, !1, !1]), [O, D] = React.useState([!1, !1, !1]), [z, F] = React.useState([CARD_ORIENTATION.PORTRAIT, CARD_ORIENTATION.PORTRAIT, CARD_ORIENTATION.PORTRAIT]), [_e, Y] = React.useState([CARD_ORIENTATION.PORTRAIT, CARD_ORIENTATION.PORTRAIT, CARD_ORIENTATION.PORTRAIT]), [H, me] = React.useState("none"), [ce, ie] = React.useState(0), [Be, ve] = React.useState(3);
        React.useEffect(() => {
            r.some(Ne => parseInt(Ne) > 0) && R.some(Ne => parseInt(Ne) > 0) && ve(0)
        }, [R, r]), React.useEffect(() => {
            if (Be === 0) switch (E) {
                case GameType.VIP:
                    !x || x.dynamicCountDown <= 0 || r.filter(Ne => parseInt(Ne) > 0).length === N.filter(Ne => Ne).length && R.filter(Ne => parseInt(Ne) > 0).length === O.filter(Ne => Ne).length ? ve(2) : [TableStatus.BetOver, TableStatus.BoCard, TableStatus.BoBCard, TableStatus.BoPCard].includes(C.tableStatus) || ve(2);
                    break;
                case GameType.See:
                    [TableStatus.BetOver, TableStatus.BoCard, TableStatus.BoBCard, TableStatus.BoPCard].includes(C.tableStatus) && r.filter(Ne => parseInt(Ne) > 0).length === N.filter(Ne => Ne).length && R.filter(Ne => parseInt(Ne) > 0).length === O.filter(Ne => Ne).length ? ve(1) : [TableStatus.BetOver, TableStatus.BoCard, TableStatus.BoBCard, TableStatus.BoPCard].includes(C.tableStatus) || ve(2);
                    break
            }
        }, [Be, x, r, R, C.tableStatus, O, N]), React.useEffect(() => {
            Be === 2 && setTimeout(() => ve(3), 1e3)
        }, [Be]), React.useEffect(() => {
            if ((x == null ? void 0 : x.dynamicCountDown) > 0 && B.current === -1) switch (C.tableStatus) {
                case TableStatus.BetOver:
                    r.length > 0 && R.length > 0 && (clearTimeout(B.current), r.length > 2 || R.length > 2 ? (D([!0, !0, !1].map((Ne, we) => Ne || O[we])), L([!0, !0, !1].map((Ne, we) => Ne || N[we])), (y[BACCARAT_BET_TYPE.PLAYER] || y[BACCARAT_BET_TYPE.BANKER] || y[BACCARAT_BET_TYPE.BANKER_NO_COMM]) && me(y[BACCARAT_BET_TYPE.PLAYER] && r.length > 2 ? "player" : "banker"), ie(2), B.current = window.setTimeout(() => {
                        D(R.map(Ne => !0)), L(r.map(Ne => !0)), Y([!0, !0, !0]), F([!0, !0, !0]), B.current = -1
                    }, x.dynamicCountDown * 1e3)) : ((y[BACCARAT_BET_TYPE.PLAYER] || y[BACCARAT_BET_TYPE.BANKER] || y[BACCARAT_BET_TYPE.BANKER_NO_COMM]) && me(y[BACCARAT_BET_TYPE.PLAYER] ? "player" : "banker"), ie(0), B.current = window.setTimeout(() => {
                        D([!0, !0, !1]), L([!0, !0, !1]), Y([!0, !0, !0]), F([!0, !0, !0]), B.current = -1
                    }, x.dynamicCountDown * 1e3)));
                    break;
                case TableStatus.BoBCard:
                    D([!0, !0, !1]), L(r.map(Ne => !0)), (y[BACCARAT_BET_TYPE.PLAYER] || y[BACCARAT_BET_TYPE.BANKER] || y[BACCARAT_BET_TYPE.BANKER_NO_COMM]) && me("banker"), ie(2), clearTimeout(B.current), B.current = window.setTimeout(() => {
                        D([!0, !0, !0]), Y([!0, !0, !0]), F([!0, !0, !0]), B.current = -1
                    }, x.dynamicCountDown * 1e3);
                    break;
                case TableStatus.BoPCard:
                    D(R.map(Ne => !0)), L([!0, !0, !1]), (y[BACCARAT_BET_TYPE.PLAYER] || y[BACCARAT_BET_TYPE.BANKER] || y[BACCARAT_BET_TYPE.BANKER_NO_COMM]) && me("player"), ie(2), clearTimeout(B.current), B.current = window.setTimeout(() => {
                        L([!0, !0, !0]), Y([!0, !0, !0]), F([!0, !0, !0]), B.current = -1
                    }, x.dynamicCountDown * 1e3);
                    break;
                case TableStatus.BoCard:
                    D([!0, !0, !1]), L([!0, !0, !1]), (y[BACCARAT_BET_TYPE.PLAYER] || y[BACCARAT_BET_TYPE.BANKER] || y[BACCARAT_BET_TYPE.BANKER_NO_COMM]) && me(y[BACCARAT_BET_TYPE.PLAYER] ? "player" : "banker"), ie(2), clearTimeout(B.current), B.current = window.setTimeout(() => {
                        D([!0, !0, !0]), L([!0, !0, !0]), Y([!0, !0, !0]), F([!0, !0, !0]), B.current = -1
                    }, x.dynamicCountDown * 1e3);
                    break
            }
            return C.tableStatus === TableStatus.PayOut && (D(R.map(Ne => !0)), L(r.map(Ne => !0)), E === GameType.See && ve(2)), () => {
                clearTimeout(B.current), B.current = -1
            }
        }, [x, C.tableStatus, r, R]), React.useEffect(() => {
            const Ne = (ke, Fe) => {
                me(ke), ie(Fe)
            }, we = r.map((ke, Fe) => Fe).filter(ke => !N[ke]), Me = R.map((ke, Fe) => Fe).filter(ke => !O[ke]);
            switch (H) {
                case"player":
                    if (we.includes(ce)) return;
                    we.length ? Ne("player", we[0]) : Me.length && Ne("banker", Me[0]);
                    break;
                case"banker":
                    if (Me.includes(ce)) return;
                    Me.length ? Ne("banker", Me[0]) : we.length && Ne("player", we[0]);
                    break
            }
        }, [R, r, O, N, H, ce]), React.useEffect(() => {
            isMobile$1 && (Y([CARD_ORIENTATION.PORTRAIT, CARD_ORIENTATION.PORTRAIT, CARD_ORIENTATION.PORTRAIT]), F([CARD_ORIENTATION.PORTRAIT, CARD_ORIENTATION.PORTRAIT, CARD_ORIENTATION.PORTRAIT]))
        }, [H, ce]), React.useEffect(() => {
            O.filter(Ne => Ne).length === R.length && Y([CARD_ORIENTATION.PORTRAIT, CARD_ORIENTATION.PORTRAIT, CARD_ORIENTATION.PORTRAIT]), N.filter(Ne => Ne).length === r.length && F([CARD_ORIENTATION.PORTRAIT, CARD_ORIENTATION.PORTRAIT, CARD_ORIENTATION.PORTRAIT])
        }, [O, N]), React.useEffect(() => {
            C.tableStatus === TableStatus.CanBet && (B.current = -1, me("none"), ie(0), L([!1, !1, !1]), D([!1, !1, !1]), F([!0, !0, !0]), Y([!0, !0, !0]))
        }, [C.tableStatus]);
        const Re = (Ne, we, Me) => {
            const ke = (Ne === "player" ? z : _e).slice();
            ke[we] = Me !== void 0 ? Me : !ke[we], (Ne === "player" ? F : Y)(ke)
        };
        return {
            seeingSide: H,
            setSeeingSide: me,
            rotateCard: Re,
            onOpenedCard: (Ne, we) => {
                const Me = (Ne === "player" ? N : O).slice();
                Me[we] = !0, (Ne === "player" ? L : D)(Me), Re(Ne, we, !0)
            },
            playerCardsOrientation: z,
            bankerCardsOrientation: _e,
            openedPlayerCards: N,
            setOpenedPlayerCards: L,
            openedBankerCards: O,
            setOpenedBankerCards: D,
            seeingCardIndex: ce,
            setSeeingCardIndex: ie,
            panelState: Be,
            setPanelState: ve
        }
    }, VipBaccaratBetTable = r => {
        var Xe, He, Ge, Le, We, dt;
        const {t: R} = useTranslation(), y = useAvailableChips(), {
                openedPlayerCards: E,
                openedBankerCards: C
            } = React.useContext(SeeCardContext),
            x = React.useContext(ScalableContainerScaleContext), {settings: B} = React.useContext(SettingsContext), [N] = React.useContext(UserInfoContext),
            L = React.useContext(GameTableBetContext), O = React.useContext(GameTableBetStateContext),
            D = React.useContext(GameTablePendingBetAmountContext), z = React.useContext(GameTableBetAmountContext),
            F = React.useContext(GameTablePayoutContext), {
                gameStatus: _e,
                countDown: Y
            } = React.useContext(GameTableStatusContext), {gameTableInfo: H} = React.useContext(GameTableContext),
            me = useDisplayCurrency(), {
                orientation: ce,
                isForceLandscape: ie
            } = useDeviceOrientation(), [Be, ve] = React.useState(Object.values(BACCARAT_BET_TYPE).map(et => ({
                color: y[0].color,
                amount: Helper.formatAbbrMoney(z[et])
            }))), Re = useChips({chipAttrs: Be, flat: ie && O === BET_STATE.NO_BET}), Ce = useBetChip(F, z, D, Re);
        useVipOwner();
        const {
                message: Ne,
                showToast: we,
                visible: Me
            } = useToastMessage("", 2e3), [ke, Fe] = React.useState(Object.fromEntries(Object.keys(BACCARAT_BET_TYPE).filter(et => !Number.isNaN(parseInt(et))).map(et => [et, !1]))),
            $e = Helper.useOdds(), Ve = React.useCallback(et => {
                let nt = [];
                if (et) switch (O) {
                    case BET_STATE.BETTING:
                        nt.push("betting");
                        break;
                    case BET_STATE.NO_BET:
                        nt.push("no_bet");
                        break
                }
                return nt.join(" ")
            }, [O]);
        useBetAmountUpdateChipEffect(z, D, Be, ve), usePayoutUpdateChipEffect(z, D, F, Be, ve);
        const Je = et => {
            if (O === BET_STATE.NO_BET) return;
            if (r.roadMap.length >= SIDE_BET_LIMIT_30.rounds && SIDE_BET_LIMIT_30.betTypes.includes(BACCARAT_BET_TYPE_MAP[et])) {
                we(R("bet_type.tips.no_bet_after").replaceAll("%1", "30").replaceAll("%2", R(`bet_type.${BACCARAT_BET_TYPE_MAP[et]}`)));
                return
            }
            if (r.roadMap.length >= SIDE_BET_LIMIT_50.rounds && SIDE_BET_LIMIT_50.betTypes.includes(BACCARAT_BET_TYPE_MAP[et])) {
                we(R("bet_type.tips.no_bet_after").replaceAll("%1", "50").replaceAll("%2", R(`bet_type.${BACCARAT_BET_TYPE_MAP[et]}`)));
                return
            }
            const nt = z[BACCARAT_BET_TYPE.BANKER] ? COMM_TYPE.COMM : z[BACCARAT_BET_TYPE.BANKER_NO_COMM] ? COMM_TYPE.NO_COMM : COMM_TYPE.NONE;
            if (nt === COMM_TYPE.COMM && et === BACCARAT_BET_TYPE.BANKER_NO_COMM || nt === COMM_TYPE.NO_COMM && et === BACCARAT_BET_TYPE.BANKER) {
                const tt = R(`bet_type.tips.${z[BACCARAT_BET_TYPE.BANKER] ? "comm" : "no_comm"}_betted`);
                we(tt);
                return
            }
            L([BACCARAT_BET_TYPE_MAP[et]])
        };
        React.useEffect(() => {
            let et = Object.fromEntries(Object.keys(BACCARAT_BET_TYPE).filter(tt => !Number.isNaN(parseInt(tt))).map(tt => [tt, !1]));
            const nt = {0: BACCARAT_BET_TYPE.TIE, 1: BACCARAT_BET_TYPE.BANKER, 2: BACCARAT_BET_TYPE.PLAYER};
            et[nt[r.winResult[0]]] = !0, et[BACCARAT_BET_TYPE.BANKER_NO_COMM] = r.winResult[0] === "1", et[BACCARAT_BET_TYPE.B_PAIR] = ["1", "3", "4", "6"].includes(r.winResult[3]), et[BACCARAT_BET_TYPE.P_PAIR] = ["2", "3", "5", "6"].includes(r.winResult[3]), et[BACCARAT_BET_TYPE.EITHER_PAIR] = parseInt(r.winResult[3]) >= 1, et[BACCARAT_BET_TYPE.PERFECT_PAIR] = parseInt(r.winResult[3]) >= 4, et[BACCARAT_BET_TYPE.TIGER_PAIR] = parseInt(r.winResult[3]) >= 1, et[BACCARAT_BET_TYPE.B_BONUS] = ["3", "4", "5", "6"].includes(r.winResult[4]), et[BACCARAT_BET_TYPE.P_BONUS] = ["7", "8"].includes(r.winResult[4]), et[BACCARAT_BET_TYPE.TIGER] = ["1", "2", "3", "4"].includes(r.winResult[4]), et[BACCARAT_BET_TYPE.TIGER_BIG] = ["1", "3"].includes(r.winResult[4]), et[BACCARAT_BET_TYPE.TIGER_SMALL] = ["2", "4"].includes(r.winResult[4]), et[BACCARAT_BET_TYPE.TIGER_TIE] = r.winResult[4] === "9", et[BACCARAT_BET_TYPE.B_FABULOUS_4] = ["1", "3", "5", "7"].includes(r.winResult[5]), et[BACCARAT_BET_TYPE.P_FABULOUS_4] = ["2", "4", "6", "8"].includes(r.winResult[5]), et[BACCARAT_BET_TYPE.B_PRECIOUS_PAIR] = ["3", "4", "7", "8", "9", "B"].includes(r.winResult[5]), et[BACCARAT_BET_TYPE.P_PRECIOUS_PAIR] = ["5", "6", "7", "8", "A", "B"].includes(r.winResult[5]), et[BACCARAT_BET_TYPE.B_BLACK] = ["1", "5", "7", "A", "E", "G"].includes(r.winResult[6]), et[BACCARAT_BET_TYPE.B_RED] = ["2", "6", "8", "B", "F", "H"].includes(r.winResult[6]), et[BACCARAT_BET_TYPE.P_BLACK] = ["3", "6", "7", "C", "F", "G"].includes(r.winResult[6]), et[BACCARAT_BET_TYPE.P_RED] = ["4", "5", "8", "D", "E", "H"].includes(r.winResult[6]), et[BACCARAT_BET_TYPE.ANY_6] = parseInt(r.winResult[6], 18) >= 9;
            for (const [tt, lt] of Object.entries(et)) tt !== "undefined" && lt && (r.roadMap.length >= SIDE_BET_LIMIT_30.rounds && SIDE_BET_LIMIT_30.betTypes.includes(BACCARAT_BET_TYPE_MAP[tt]) || r.roadMap.length >= SIDE_BET_LIMIT_50.rounds && SIDE_BET_LIMIT_50.betTypes.includes(BACCARAT_BET_TYPE_MAP[tt])) && (et[tt] = !1);
            Fe(et)
        }, [r.winResult]);
        const Qe = React.useCallback(et => {
            if (r.betStatistics[et % 3].amounts === 0) return 0;
            let nt = r.betStatistics.map(lt => lt.amounts), tt = nt.reduce((lt, Bt) => lt + Bt, 0);
            return et !== BACCARAT_BET_TYPE.TIE ? Math.round(nt[et % 3] / tt * 100) : 100 - Qe(BACCARAT_BET_TYPE.PLAYER) - Qe(BACCARAT_BET_TYPE.BANKER)
        }, [r.betStatistics]), Ze = React.useCallback((et, nt, tt, lt, Bt, kt, At, zt) => jsxs("button", {
            className: `${et} main_bet`,
            style: {gridArea: nt},
            onClick: Je.bind(null, lt),
            "aria-checked": ke[lt],
            "aria-disabled": lt === BACCARAT_BET_TYPE.BANKER && !!z[BACCARAT_BET_TYPE.BANKER_NO_COMM] || lt === BACCARAT_BET_TYPE.BANKER_NO_COMM && !!z[BACCARAT_BET_TYPE.BANKER],
            children: [B.showBettingStatistics && jsxs("div", {
                className: "bet_area_statistcis",
                children: [jsx(Statistic, {
                    percentage: Qe(lt % 3),
                    color: tt,
                    size: isDesktop$1 ? 46 : ce.includes("portrait") ? 30 : 20 / x
                }), jsx("div", {children: Helper.formatCurrency(me, Helper.formatMoney(r.betStatistics[lt % 3].amounts / 100))}), jsxs("div", {
                    className: "bet_total",
                    children: [jsx("div", {className: "svg_person"}), r.betStatistics[lt % 3].people]
                })]
            }), At && nt !== "tie" ? jsx("div", {
                className: "bet_area_results",
                children: O === BET_STATE.NO_BET && jsxs(Fragment, {
                    children: [jsx("div", {children: At.some(oa => oa !== "-2") && At.reduce((oa, sa, vt) => oa + (zt[vt] && parseInt(sa) % 100 >= 0 ? parseInt(sa) % 100 > 10 ? 10 : parseInt(sa) % 100 : 0), 0) % 10}), jsx(BaccaratGameResults, {
                        side: nt,
                        results: At.map((oa, sa) => zt[sa] ? oa : "-2"),
                        showBackface: !0
                    })]
                })
            }) : jsx("div", {}), jsxs("div", {
                className: "bet_area_info",
                children: [lt === BACCARAT_BET_TYPE.BANKER_NO_COMM && jsx("div", {
                    className: "no_comm_label",
                    children: R("game_table.baccarat.no_comm")
                }), jsx("div", {className: "title", children: R(`bet_type.${Bt}`)}), jsx("div", {
                    className: "odds",
                    children: $e(kt)
                }), Ce(lt)]
            })]
        }), [z, ke, O, Ce, r.betStatistics, Re, L, B.showBettingStatistics, x, ce]), qe = et => {
            let nt = payoutArr[GameType.Baccarat].find(tt => tt.betType.toString() === BACCARAT_BET_TYPE_MAP[et].toString());
            return nt == null ? void 0 : nt.payout
        }, ze = React.useCallback(et => {
            const nt = r.roadMap.length, tt = BACCARAT_BET_TYPE_MAP[et];
            let lt = SIDE_BET_LIMIT_50.betTypes.includes(tt) && nt >= SIDE_BET_LIMIT_50.rounds || SIDE_BET_LIMIT_30.betTypes.includes(tt) && nt >= SIDE_BET_LIMIT_30.rounds,
                Bt = qe(et);
            return Bt && Bt.includes("-") && (Bt = void 0), jsxs("button", {
                className: `${BACCARAT_BET_TYPE[et].toLowerCase()} ${BACCARAT_BET_TYPE[et].startsWith("B_") ? "red" : BACCARAT_BET_TYPE[et].startsWith("P_") ? "blue" : "yellow"}`,
                style: {gridArea: BACCARAT_BET_TYPE[et].toLowerCase()},
                onClick: Je.bind(null, et),
                "aria-disabled": lt,
                "aria-checked": !lt && ke[et],
                children: [jsx("div", {
                    className: "title",
                    children: R(`bet_type.${tt}`)
                }), Bt && jsx("div", {className: "odds", children: $e(Bt)}), Ce(et)]
            }, et)
        }, [ke, O, Ce, Re, L, r.roadMap]), De = (Xe = BACCARAT_PLAY_TYPE_PRESET.find(et => {
            let nt = 0;
            for (const [tt, lt] of Object.entries(B.baccaratBetTypes)) lt && nt++;
            return et.betAreas.every(tt => B.baccaratBetTypes[tt]) && et.betAreas.length === nt
        })) == null ? void 0 : Xe.type;
        return jsx(BetTable, {
            children: jsxs("div", {
                className: `bet_table_container vip_baccarat_bet_table ${Ve(!0)} ${De}`,
                children: [jsx("div", {className: "background"}), Ze("blue", "player", "#47B8FF59", BACCARAT_BET_TYPE.PLAYER, BetType.B_Player, 1, r.playerCards, E), Ze("green", "tie", "#BCFF8959", BACCARAT_BET_TYPE.TIE, BetType.B_Tie, 8), Ze("red", "banker", "#FF9A8959", B.noCommission ? BACCARAT_BET_TYPE.BANKER_NO_COMM : BACCARAT_BET_TYPE.BANKER, B.noCommission ? BetType.B_BankNoComm : BetType.B_Banker, B.noCommission ? 1 : .95, r.bankerCards, C), Object.entries(B.baccaratBetTypes).filter(et => et[1]).map(et => ze(parseInt(et[0]))), Me && jsx("div", {
                    className: "bet_area_warning",
                    "aria-hidden": !Me,
                    "data-message": Ne
                }), _e.tableStatus === TableStatus.BetOver && Y && ((He = H.tableInfo.additionalTableInfo) == null ? void 0 : He.vipTableReserveStatus) === VipTableStatus.Reserved && ((Ge = H.tableInfo.additionalTableInfo) == null ? void 0 : Ge.vipTableOwner) && ((Le = H.tableInfo.additionalTableInfo) == null ? void 0 : Le.vipTableOwner) !== N.player.userId && r.bankerCards.some(et => parseInt(et) > 0) && r.playerCards.some(et => parseInt(et) > 0) && jsx("div", {
                    className: "non_see_warning",
                    "aria-hidden": !1,
                    children: R("game_table.vip.owner_squeezing")
                }), ((We = H.tableInfo.additionalTableInfo) == null ? void 0 : We.vipTableReserveStatus) === VipTableStatus.Reserved && !((dt = H.tableInfo.additionalTableInfo) != null && dt.vipTableOwner) && H.tableInfo.additionalTableInfo.nextOwner === N.player.userId && jsx("div", {
                    className: "non_see_warning",
                    "aria-hidden": !1,
                    children: R("game_table.vip.reserve_request")
                })]
            })
        })
    }, SeePanel$1 = "", Responsive$v = "", PokerFlipper$1 = "", Poker$1 = "",
    POINTS = [[13], [11, 15], [11, 13, 15], [1, 2, 9, 10], [1, 2, 9, 10, 13], [1, 2, 5, 6, 9, 10], [1, 2, 5, 6, 9, 10, 12], [1, 2, 5, 6, 9, 10, 12, 14], [1, 2, 3, 4, 7, 8, 9, 10, 13], [1, 2, 3, 4, 7, 8, 9, 10, 12, 14]],
    INVERSE = [7, 8, 9, 10, 14, 15], Poker = r => {
        const R = React.useRef(null), [y, E] = React.useState(0);
        React.useEffect(() => {
            const B = new ResizeObserver(N => N.forEach(L => E(Math.max(L.contentRect.width, L.contentRect.height) / 10 / 2)));
            return R.current && B.observe(R.current), () => B.disconnect()
        }, []);
        const C = React.useCallback(B => Math.floor(B / 100) * 100, []), x = React.useCallback(B => {
            const N = ["suit", `svg_poker_${r.rotated ? "horizontal" : "vertical"}_${C(r.cardValue)}`, `p_${B}`];
            return INVERSE.includes(B) && N.push("inverse"), N.join(" ")
        }, [r.cardValue, r.rotated]);
        return jsxs("article", {
            className: `custom_poker ${Math.floor(r.cardValue / 100) % 2 === 1 ? "black" : "red"}`,
            style: {"--corner": `${y}px`},
            "aria-orientation": r.rotated ? "horizontal" : "vertical",
            ref: R,
            children: [jsxs("div", {
                className: "corner",
                children: [jsx("div", {className: `rank svg_poker_${r.rotated ? "horizontal" : "vertical"}_${r.cardValue % 100}`}), jsx("div", {className: `suit svg_poker_${r.rotated ? "horizontal" : "vertical"}_${C(r.cardValue)}`})]
            }), jsx("div", {
                className: `suit_display ${r.cardValue % 100 <= 10 ? "number" : "face"}`,
                children: r.cardValue % 100 <= 10 ? POINTS[r.cardValue % 100 - 1].map((B, N) => jsx("div", {className: x(B)}, N)) : jsx("div", {className: `png_poker_${r.rotated ? "horizontal" : "vertical"}_${r.cardValue}`})
            }), jsxs("div", {
                className: "corner inverse",
                children: [jsx("div", {className: `rank svg_poker_${r.rotated ? "horizontal" : "vertical"}_${r.cardValue % 100}`}), jsx("div", {className: `suit svg_poker_${r.rotated ? "horizontal" : "vertical"}_${C(r.cardValue)}`})]
            })]
        })
    }, defaultStartingSides = {left: !1, top: !1, right: !1, bottom: !1}, PokerFlipper = r => {
        const [R, y] = React.useState({
                x: 0,
                y: 0
            }), [E, C] = React.useState({...defaultStartingSides}), [x, B] = React.useState({}), [N, L] = React.useState(""), [O, D] = React.useState(0), [z, F] = React.useState(""), [_e, Y] = React.useState(""), [H, me] = React.useState({
                top_left: !1,
                top_right: !1,
                bottom_left: !1,
                bottom_right: !1
            }), ce = React.useRef(null), [ie, Be] = React.useState(5 / 7),
            ve = {horizontal: r.horizontalCenterSize || 40, vertical: r.verticalCenterSize || 60};
        React.useEffect(() => {
            const ze = new ResizeObserver(De => De.forEach(Xe => Be(Xe.contentRect.width / Xe.contentRect.height)));
            return ce.current && ze.observe(ce.current), () => ze.disconnect()
        }, []);
        const Re = React.useCallback(ze => {
            if (ce.current) {
                const De = Ne(ze);
                if (!De) return;
                const Xe = {...defaultStartingSides};
                De.x < -ve.horizontal / 2 && (Xe.left = !0), De.x > ve.horizontal / 2 && (Xe.right = !0), De.y < -ve.vertical / 2 && (Xe.top = !0), De.y > ve.vertical / 2 && (Xe.bottom = !0), Object.values(Xe).includes(!0) && (C(Xe), window.addEventListener("mousemove", Ne), window.addEventListener("touchmove", Ne))
            }
        }, []), Ce = () => {
            window.removeEventListener("mousemove", Ne), window.removeEventListener("touchmove", Ne), C({...defaultStartingSides})
        }, Ne = ze => {
            if (ze.preventDefault(), !ce.current) {
                console.warn("something went wrong, removing listener"), Ce();
                return
            }
            const De = ce.current.getBoundingClientRect(), Xe = {x: De.width / 2, y: De.height / 2},
                He = "touches" in ze ? {x: ze.touches[0].clientX, y: ze.touches[0].clientY} : {
                    x: ze.clientX,
                    y: ze.clientY
                }, Ge = {x: He.x - De.left - Xe.x, y: He.y - De.top - Xe.y},
                Le = {x: (Ge.x + Xe.x) / De.width * 100, y: (Ge.y + Xe.y) / De.height * 100},
                We = {x: ke(Le.x - 50, 49.999, -49.999), y: ke(Le.y - 50, 49.999, -49.999)};
            return y({...We}), {...We}
        };
        React.useEffect(() => (ce.current && !r.opened && (ce.current.addEventListener("mousedown", Re, {passive: !0}), ce.current.addEventListener("touchstart", Re, {passive: !0}), window.addEventListener("mouseup", Ce), window.addEventListener("touchend", Ce), window.addEventListener("touchcancel", Ce)), () => {
            ce.current && (ce.current.removeEventListener("mousedown", Re), ce.current.removeEventListener("touchstart", Re), window.removeEventListener("mouseup", Ce), window.removeEventListener("touchend", Ce), window.removeEventListener("touchcancel", Ce)), window.removeEventListener("mousemove", Ne), window.removeEventListener("touchmove", Ne)
        }), [Re, r.opened]);
        const we = ze => ze / ie, Me = ze => ze * ie, ke = (ze, De, Xe) => Math.max(Math.min(ze, De), Xe), Fe = () => {
            const ze = {};
            E.top && (ze.bottom = `${50 - R.y}%`), E.bottom && (ze.top = `${R.y + 50}%`), E.left && (E.top || E.bottom ? ze.left = `${R.x + 50}%` : ze.right = `${50 - R.x}%`), E.right && (E.top || E.bottom ? ze.right = `${50 - R.x}%` : ze.left = `${50 + R.x}%`), (E.left || E.right) && !(E.top || E.bottom) && (ze.top = "0%"), B({...ze})
        }, $e = () => {
            let ze = new Set;
            E.top && ze.add("bottom"), E.bottom && ze.add("top"), E.left && ze.add("left"), E.right && ze.add("right"), L(Array.from(ze).join(" "))
        }, Ve = () => {
            const ze = {x: E.left ? -50 : E.right ? 50 : R.x, y: E.top ? -50 : E.bottom ? 50 : R.y}, De = R.x - ze.x,
                Xe = R.y - ze.y, He = we(Xe) / De, Ge = Math.atan(He) * (180 / Math.PI) * 2 + 180 * Math.sign(-He);
            return D(Ge), Ge
        }, Je = (ze, De, Xe) => {
            ze.splice(De, 1, ...Xe.map(He => `${He[0]}% ${He[1]}%`))
        }, Qe = ze => {
            const De = ["0% 0%", "100% 0%", "100% 100%", "0% 100%"], [Xe, He] = [50 - R.x, 50 + R.y],
                Ge = Math.abs(ze) * Math.PI / 180;
            if (E.top && E.right) {
                const Le = Xe + we(He) / Math.tan(Ge), We = (we(He) - Xe / Math.tan(Ge)) * ie;
                Je(De, 0, [[0, We], [Le, 0]])
            } else if (E.top && E.left) {
                const Le = Xe - we(He) / Math.tan(Ge), We = (we(He) - (100 - Xe) / Math.tan(Ge)) * ie;
                Je(De, 1, [[Le, 0], [100, We]])
            } else if (E.bottom && E.left) {
                const Le = Xe - we(100 - He) / Math.tan(Ge), We = (we(He) + (100 - Xe) / Math.tan(Ge)) * ie;
                Je(De, 2, [[100, We], [Le, 100]])
            } else if (E.bottom && E.right) {
                const Le = Xe + we(100 - He) / Math.tan(Ge), We = (we(He) + Xe / Math.tan(Ge)) * ie;
                Je(De, 3, [[Le, 100], [0, We]])
            } else if (E.right) {
                const Le = Xe / 2;
                Je(De, 0, [[Le, 0]]), Je(De, 3, [[Le, 100]])
            } else if (E.left) {
                const Le = 50 + Xe / 2;
                Je(De, 1, [[Le, 0]]), Je(De, 2, [[Le, 100]])
            } else if (E.top) {
                const Le = He / 2;
                Je(De, 0, [[0, Le]]), Je(De, 1, [[100, Le]])
            } else if (E.bottom) {
                const Le = 50 + He / 2;
                Je(De, 2, [[100, Le]]), Je(De, 3, [[0, Le]])
            }
            F(De.join())
        }, Ze = ze => {
            const De = ["0% 0%", "100% 0%", "100% 100%", "0% 100%"], [Xe, He] = [50 - R.x, 50 + R.y],
                Ge = Math.abs(ze) * Math.PI / 180;
            if (E.top && E.right) {
                const Le = 100 - we(He) / Math.sin(Ge), We = 100 - Me(100 - Le) * Math.tan(Ge / 2);
                Je(De, 0, [[Le, 100]]), Je(De, 1, [[100, We]])
            } else if (E.top && E.left) {
                const Le = we(He) / Math.sin(Ge), We = 100 - Me(Le) * Math.tan(Ge / 2);
                Je(De, 1, [[0, We]]), Je(De, 2, [[Le, 100]])
            } else if (E.bottom && E.left) {
                const Le = we(100 - He) / Math.sin(Ge), We = Me(Le) * Math.tan(Ge / 2);
                Je(De, 2, [[Le, 0]]), Je(De, 3, [[0, We]])
            } else if (E.bottom && E.right) {
                const Le = 100 - we(100 - He) / Math.sin(Ge), We = Me(100 - Le) * Math.tan(Ge / 2);
                Je(De, 3, [[100, We]]), Je(De, 0, [[Le, 0]])
            } else if (E.left) {
                const Le = 50 + Xe / 2;
                Je(De, 0, [[Le, 0]]), Je(De, 3, [[Le, 100]])
            } else if (E.right) {
                const Le = Xe / 2;
                Je(De, 1, [[Le, 0]]), Je(De, 2, [[Le, 100]])
            } else if (E.top) {
                const Le = 100 - He / 2;
                Je(De, 0, [[0, Le]]), Je(De, 1, [[100, Le]])
            } else if (E.bottom) {
                const Le = 50 - He / 2;
                Je(De, 2, [[100, Le]]), Je(De, 3, [[0, Le]])
            }
            Y(De.join())
        };
        React.useEffect(() => {
            r.opened && (Ce(), ce.current.removeEventListener("mousedown", Re), ce.current.removeEventListener("touchstart", Re))
        }, [r.opened]);
        const qe = () => {
            const ze = () => {
                r.onOpenedCard(), r.vipOpendCard && r.vipOpendCard()
            };
            (E.left && R.x === 49.999 || E.right && R.x === -49.999 || E.top && R.y === 49.999 || E.bottom && R.y === -49.999) && ze()
        };
        return React.useEffect(() => {
            Fe(), $e();
            const ze = Ve();
            Qe(ze), Ze(ze), qe()
        }, [E, R]), React.useEffect(() => {
            const ze = (He, Ge) => parseInt(z.split(",")[He].split(" ")[Ge === "x" ? 0 : 1]) - 50,
                De = {top_left: !1, top_right: !1, bottom_left: !1, bottom_right: !1}, Xe = 50;
            if (E.top && E.left && (De.top_left = !0, ze(1, "x") <= -Xe && (De.top_right = !0), ze(2, "y") >= Xe && (De.bottom_left = !0)), E.top && E.right && (De.top_right = !0, ze(1, "x") >= Xe && (De.top_left = !0), ze(0, "y") >= Xe && (De.bottom_right = !0)), E.bottom && E.left && (De.bottom_left = !0, ze(3, "x") <= -Xe && (De.bottom_right = !0), ze(2, "y") <= -Xe && (De.top_left = !0)), E.bottom && E.right && (De.bottom_right = !0, ze(3, "x") >= Xe && (De.bottom_left = !0), z.split(",")[4] && ze(4, "y") <= -Xe && (De.top_right = !0)), Object.values(E).filter(He => He).length === 1) switch (Object.entries(E).find(He => He[1])[0]) {
                case"top":
                    De.top_left = !0, De.top_right = !0;
                    break;
                case"bottom":
                    De.bottom_left = !0, De.bottom_right = !0;
                    break;
                case"left":
                    De.top_right = !0, De.bottom_right = !0;
                    break;
                case"right":
                    De.top_left = !0, De.bottom_left = !0;
                    break
            }
            me(De)
        }, [E, z]), jsxs("div", {
            className: "poker_flipper",
            ref: ce,
            children: [r.opened ? jsx("div", {
                className: "revealed_frontface",
                children: jsx(Poker, {cardValue: r.cardValue})
            }) : jsx("div", {
                className: "poker_backface",
                style: {"--clip": z},
                children: jsx("div", {className: "background", children: jsx("div", {className: "pattern"})})
            }), !isNaN(O) && jsx("div", {
                className: ["poker_frontface", E.top || E.bottom ? "flip" : void 0].join(" "),
                style: Object.assign({}, x, {transformOrigin: N}, {"--angle": O, "--clip": _e}),
                children: r.children
            }), !isNaN(O) && jsxs("div", {
                className: "fingers",
                style: Object.assign({}, x, {transformOrigin: N}, {"--angle": O, "--clip": _e}),
                children: [H.top_left && jsx("div", {className: "png_finger top_left"}), H.bottom_left && jsx("div", {className: "png_finger bottom_left"}), H.top_right && jsx("div", {className: "png_finger top_right"}), H.bottom_right && jsx("div", {className: "png_finger bottom_right"})]
            }), r.onRotate && !r.opened && !Object.values(E).includes(!0) && jsx("button", {
                className: "poker_rotate",
                onClick: r.onRotate,
                children: jsx("div", {className: "svg_rotate"})
            })]
        })
    }, SeeBaccaratGameResults$1 = "", SeeBaccaratGameResults = r => {
        const {seeingSide: R, seeingCardIndex: y} = React.useContext(SeeCardContext), E = React.useCallback(() => {
            let C = r.results;
            return r.side === "player" && C.length < 3 && C.push("-3"), C
        }, [r.results]);
        return jsx("div", {
            className: `card_results ${r.side}`,
            children: E().map((C, x) => jsxs("button", {
                className: `template_${x === 2 ? "horizontal" : "vertical"}_card`,
                style: {order: r.side === "player" ? x === 2 ? 1 : 2 + x : x + 1},
                onClick: () => r.onClickCard(x),
                "aria-checked": R === r.side && y === x,
                children: [C !== "-3" && jsx(Poker$2, {value: parseInt(C)}), R === r.side && y === x && jsx("div", {className: "svg_selected_arrow"})]
            }, x))
        })
    }, usePrinterMessageRequest = () => {
        const {gameStatus: r} = React.useContext(GameTableStatusContext), R = React.useCallback(E => {
            const {table: C, playerId: x} = E || {};
            return {op_code: "GC01", table: C, playerId: x}
        }, []), y = React.useCallback(({sc: E, place: C, table: x, dealsType: B, playerId: N}) => ({
            op_code: "GC02",
            playerId: N,
            dealsType: B,
            card: {sc: E, game: r.gameRoundId, cardCount: E.length.toString(), place: C, table: x, Seq: 1760, value: "0"}
        }), [r]);
        return {getPrinterMessageRequestGC01: R, getPrinterMessageRequestGC02: y}
    };
var Ct = r => {
        switch (r) {
            case"success":
                return $t;
            case"info":
                return _t;
            case"warning":
                return Wt;
            case"error":
                return Ut;
            default:
                return null
        }
    }, Ft = Array(12).fill(0), It = ({visible: r}) => React.createElement("div", {
        className: "sonner-loading-wrapper",
        "data-visible": r
    }, React.createElement("div", {className: "sonner-spinner"}, Ft.map((R, y) => React.createElement("div", {
        className: "sonner-loading-bar",
        key: `spinner-bar-${y}`
    })))), $t = React.createElement("svg", {
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 20 20",
        fill: "currentColor",
        height: "20",
        width: "20"
    }, React.createElement("path", {
        fillRule: "evenodd",
        d: "M10 18a8 8 0 100-16 8 8 0 000 16zm3.857-9.809a.75.75 0 00-1.214-.882l-3.483 4.79-1.88-1.88a.75.75 0 10-1.06 1.061l2.5 2.5a.75.75 0 001.137-.089l4-5.5z",
        clipRule: "evenodd"
    })), Wt = React.createElement("svg", {
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 24 24",
        fill: "currentColor",
        height: "20",
        width: "20"
    }, React.createElement("path", {
        fillRule: "evenodd",
        d: "M9.401 3.003c1.155-2 4.043-2 5.197 0l7.355 12.748c1.154 2-.29 4.5-2.599 4.5H4.645c-2.309 0-3.752-2.5-2.598-4.5L9.4 3.003zM12 8.25a.75.75 0 01.75.75v3.75a.75.75 0 01-1.5 0V9a.75.75 0 01.75-.75zm0 8.25a.75.75 0 100-1.5.75.75 0 000 1.5z",
        clipRule: "evenodd"
    })), _t = React.createElement("svg", {
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 20 20",
        fill: "currentColor",
        height: "20",
        width: "20"
    }, React.createElement("path", {
        fillRule: "evenodd",
        d: "M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a.75.75 0 000 1.5h.253a.25.25 0 01.244.304l-.459 2.066A1.75 1.75 0 0010.747 15H11a.75.75 0 000-1.5h-.253a.25.25 0 01-.244-.304l.459-2.066A1.75 1.75 0 009.253 9H9z",
        clipRule: "evenodd"
    })), Ut = React.createElement("svg", {
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 20 20",
        fill: "currentColor",
        height: "20",
        width: "20"
    }, React.createElement("path", {
        fillRule: "evenodd",
        d: "M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-8-5a.75.75 0 01.75.75v4.5a.75.75 0 01-1.5 0v-4.5A.75.75 0 0110 5zm0 10a1 1 0 100-2 1 1 0 000 2z",
        clipRule: "evenodd"
    })), Dt = () => {
        let [r, R] = React.useState(document.hidden);
        return React.useEffect(() => {
            let y = () => {
                R(document.hidden)
            };
            return document.addEventListener("visibilitychange", y), () => window.removeEventListener("visibilitychange", y)
        }, []), r
    }, ct$1 = 1, ut = class {
        constructor() {
            this.subscribe = r => (this.subscribers.push(r), () => {
                let R = this.subscribers.indexOf(r);
                this.subscribers.splice(R, 1)
            }), this.publish = r => {
                this.subscribers.forEach(R => R(r))
            }, this.addToast = r => {
                this.publish(r), this.toasts = [...this.toasts, r]
            }, this.create = r => {
                var R;
                let {message: y, ...E} = r,
                    C = typeof (r == null ? void 0 : r.id) == "number" || ((R = r.id) == null ? void 0 : R.length) > 0 ? r.id : ct$1++,
                    x = this.toasts.find(N => N.id === C), B = r.dismissible === void 0 ? !0 : r.dismissible;
                return x ? this.toasts = this.toasts.map(N => N.id === C ? (this.publish({
                    ...N, ...r,
                    id: C,
                    title: y
                }), {...N, ...r, id: C, dismissible: B, title: y}) : N) : this.addToast({
                    title: y, ...E,
                    dismissible: B,
                    id: C
                }), C
            }, this.dismiss = r => (r || this.toasts.forEach(R => {
                this.subscribers.forEach(y => y({id: R.id, dismiss: !0}))
            }), this.subscribers.forEach(R => R({id: r, dismiss: !0})), r), this.message = (r, R) => this.create({
                ...R,
                message: r
            }), this.error = (r, R) => this.create({
                ...R,
                message: r,
                type: "error"
            }), this.success = (r, R) => this.create({
                ...R,
                type: "success",
                message: r
            }), this.info = (r, R) => this.create({
                ...R,
                type: "info",
                message: r
            }), this.warning = (r, R) => this.create({
                ...R,
                type: "warning",
                message: r
            }), this.loading = (r, R) => this.create({...R, type: "loading", message: r}), this.promise = (r, R) => {
                if (!R) return;
                let y;
                R.loading !== void 0 && (y = this.create({
                    ...R,
                    promise: r,
                    type: "loading",
                    message: R.loading,
                    description: typeof R.description != "function" ? R.description : void 0
                }));
                let E = r instanceof Promise ? r : r(), C = y !== void 0;
                return E.then(async x => {
                    if (Ot(x) && !x.ok) {
                        C = !1;
                        let B = typeof R.error == "function" ? await R.error(`HTTP error! status: ${x.status}`) : R.error,
                            N = typeof R.description == "function" ? await R.description(`HTTP error! status: ${x.status}`) : R.description;
                        this.create({id: y, type: "error", message: B, description: N})
                    } else if (R.success !== void 0) {
                        C = !1;
                        let B = typeof R.success == "function" ? await R.success(x) : R.success,
                            N = typeof R.description == "function" ? await R.description(x) : R.description;
                        this.create({id: y, type: "success", message: B, description: N})
                    }
                }).catch(async x => {
                    if (R.error !== void 0) {
                        C = !1;
                        let B = typeof R.error == "function" ? await R.error(x) : R.error,
                            N = typeof R.description == "function" ? await R.description(x) : R.description;
                        this.create({id: y, type: "error", message: B, description: N})
                    }
                }).finally(() => {
                    var x;
                    C && (this.dismiss(y), y = void 0), (x = R.finally) == null || x.call(R)
                }), y
            }, this.custom = (r, R) => {
                let y = (R == null ? void 0 : R.id) || ct$1++;
                return this.create({jsx: r(y), id: y, ...R}), y
            }, this.subscribers = [], this.toasts = []
        }
    }, v$1 = new ut, Vt = (r, R) => {
        let y = (R == null ? void 0 : R.id) || ct$1++;
        return v$1.addToast({title: r, ...R, id: y}), y
    },
    Ot = r => r && typeof r == "object" && "ok" in r && typeof r.ok == "boolean" && "status" in r && typeof r.status == "number",
    Kt = Vt, Xt = () => v$1.toasts, Jt = Object.assign(Kt, {
        success: v$1.success,
        info: v$1.info,
        warning: v$1.warning,
        error: v$1.error,
        custom: v$1.custom,
        message: v$1.message,
        promise: v$1.promise,
        dismiss: v$1.dismiss,
        loading: v$1.loading
    }, {getHistory: Xt});

function ft(r, {insertAt: R} = {}) {
    if (!r || typeof document > "u") return;
    let y = document.head || document.getElementsByTagName("head")[0], E = document.createElement("style");
    E.type = "text/css", R === "top" && y.firstChild ? y.insertBefore(E, y.firstChild) : y.appendChild(E), E.styleSheet ? E.styleSheet.cssText = r : E.appendChild(document.createTextNode(r))
}

ft(`:where(html[dir="ltr"]),:where([data-sonner-toaster][dir="ltr"]){--toast-icon-margin-start: -3px;--toast-icon-margin-end: 4px;--toast-svg-margin-start: -1px;--toast-svg-margin-end: 0px;--toast-button-margin-start: auto;--toast-button-margin-end: 0;--toast-close-button-start: 0;--toast-close-button-end: unset;--toast-close-button-transform: translate(-35%, -35%)}:where(html[dir="rtl"]),:where([data-sonner-toaster][dir="rtl"]){--toast-icon-margin-start: 4px;--toast-icon-margin-end: -3px;--toast-svg-margin-start: 0px;--toast-svg-margin-end: -1px;--toast-button-margin-start: 0;--toast-button-margin-end: auto;--toast-close-button-start: unset;--toast-close-button-end: 0;--toast-close-button-transform: translate(35%, -35%)}:where([data-sonner-toaster]){position:fixed;width:var(--width);font-family:ui-sans-serif,system-ui,-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Helvetica Neue,Arial,Noto Sans,sans-serif,Apple Color Emoji,Segoe UI Emoji,Segoe UI Symbol,Noto Color Emoji;--gray1: hsl(0, 0%, 99%);--gray2: hsl(0, 0%, 97.3%);--gray3: hsl(0, 0%, 95.1%);--gray4: hsl(0, 0%, 93%);--gray5: hsl(0, 0%, 90.9%);--gray6: hsl(0, 0%, 88.7%);--gray7: hsl(0, 0%, 85.8%);--gray8: hsl(0, 0%, 78%);--gray9: hsl(0, 0%, 56.1%);--gray10: hsl(0, 0%, 52.3%);--gray11: hsl(0, 0%, 43.5%);--gray12: hsl(0, 0%, 9%);--border-radius: 8px;box-sizing:border-box;padding:0;margin:0;list-style:none;outline:none;z-index:999999999}:where([data-sonner-toaster][data-x-position="right"]){right:max(var(--offset),env(safe-area-inset-right))}:where([data-sonner-toaster][data-x-position="left"]){left:max(var(--offset),env(safe-area-inset-left))}:where([data-sonner-toaster][data-x-position="center"]){left:50%;transform:translate(-50%)}:where([data-sonner-toaster][data-y-position="top"]){top:max(var(--offset),env(safe-area-inset-top))}:where([data-sonner-toaster][data-y-position="bottom"]){bottom:max(var(--offset),env(safe-area-inset-bottom))}:where([data-sonner-toast]){--y: translateY(100%);--lift-amount: calc(var(--lift) * var(--gap));z-index:var(--z-index);position:absolute;opacity:0;transform:var(--y);filter:blur(0);touch-action:none;transition:transform .4s,opacity .4s,height .4s,box-shadow .2s;box-sizing:border-box;outline:none;overflow-wrap:anywhere}:where([data-sonner-toast][data-styled="true"]){padding:16px;background:var(--normal-bg);border:1px solid var(--normal-border);color:var(--normal-text);border-radius:var(--border-radius);box-shadow:0 4px 12px #0000001a;width:var(--width);font-size:13px;display:flex;align-items:center;gap:6px}:where([data-sonner-toast]:focus-visible){box-shadow:0 4px 12px #0000001a,0 0 0 2px #0003}:where([data-sonner-toast][data-y-position="top"]){top:0;--y: translateY(-100%);--lift: 1;--lift-amount: calc(1 * var(--gap))}:where([data-sonner-toast][data-y-position="bottom"]){bottom:0;--y: translateY(100%);--lift: -1;--lift-amount: calc(var(--lift) * var(--gap))}:where([data-sonner-toast]) :where([data-description]){font-weight:400;line-height:1.4;color:inherit}:where([data-sonner-toast]) :where([data-title]){font-weight:500;line-height:1.5;color:inherit}:where([data-sonner-toast]) :where([data-icon]){display:flex;height:16px;width:16px;position:relative;justify-content:flex-start;align-items:center;flex-shrink:0;margin-left:var(--toast-icon-margin-start);margin-right:var(--toast-icon-margin-end)}:where([data-sonner-toast][data-promise="true"]) :where([data-icon])>svg{opacity:0;transform:scale(.8);transform-origin:center;animation:sonner-fade-in .3s ease forwards}:where([data-sonner-toast]) :where([data-icon])>*{flex-shrink:0}:where([data-sonner-toast]) :where([data-icon]) svg{margin-left:var(--toast-svg-margin-start);margin-right:var(--toast-svg-margin-end)}:where([data-sonner-toast]) :where([data-content]){display:flex;flex-direction:column;gap:2px}[data-sonner-toast][data-styled=true] [data-button]{border-radius:4px;padding-left:8px;padding-right:8px;height:24px;font-size:12px;color:var(--normal-bg);background:var(--normal-text);margin-left:var(--toast-button-margin-start);margin-right:var(--toast-button-margin-end);border:none;cursor:pointer;outline:none;display:flex;align-items:center;flex-shrink:0;transition:opacity .4s,box-shadow .2s}:where([data-sonner-toast]) :where([data-button]):focus-visible{box-shadow:0 0 0 2px #0006}:where([data-sonner-toast]) :where([data-button]):first-of-type{margin-left:var(--toast-button-margin-start);margin-right:var(--toast-button-margin-end)}:where([data-sonner-toast]) :where([data-cancel]){color:var(--normal-text);background:rgba(0,0,0,.08)}:where([data-sonner-toast][data-theme="dark"]) :where([data-cancel]){background:rgba(255,255,255,.3)}:where([data-sonner-toast]) :where([data-close-button]){position:absolute;left:var(--toast-close-button-start);right:var(--toast-close-button-end);top:0;height:20px;width:20px;display:flex;justify-content:center;align-items:center;padding:0;background:var(--gray1);color:var(--gray12);border:1px solid var(--gray4);transform:var(--toast-close-button-transform);border-radius:50%;cursor:pointer;z-index:1;transition:opacity .1s,background .2s,border-color .2s}:where([data-sonner-toast]) :where([data-close-button]):focus-visible{box-shadow:0 4px 12px #0000001a,0 0 0 2px #0003}:where([data-sonner-toast]) :where([data-disabled="true"]){cursor:not-allowed}:where([data-sonner-toast]):hover :where([data-close-button]):hover{background:var(--gray2);border-color:var(--gray5)}:where([data-sonner-toast][data-swiping="true"]):before{content:"";position:absolute;left:0;right:0;height:100%;z-index:-1}:where([data-sonner-toast][data-y-position="top"][data-swiping="true"]):before{bottom:50%;transform:scaleY(3) translateY(50%)}:where([data-sonner-toast][data-y-position="bottom"][data-swiping="true"]):before{top:50%;transform:scaleY(3) translateY(-50%)}:where([data-sonner-toast][data-swiping="false"][data-removed="true"]):before{content:"";position:absolute;inset:0;transform:scaleY(2)}:where([data-sonner-toast]):after{content:"";position:absolute;left:0;height:calc(var(--gap) + 1px);bottom:100%;width:100%}:where([data-sonner-toast][data-mounted="true"]){--y: translateY(0);opacity:1}:where([data-sonner-toast][data-expanded="false"][data-front="false"]){--scale: var(--toasts-before) * .05 + 1;--y: translateY(calc(var(--lift-amount) * var(--toasts-before))) scale(calc(-1 * var(--scale)));height:var(--front-toast-height)}:where([data-sonner-toast])>*{transition:opacity .4s}:where([data-sonner-toast][data-expanded="false"][data-front="false"][data-styled="true"])>*{opacity:0}:where([data-sonner-toast][data-visible="false"]){opacity:0;pointer-events:none}:where([data-sonner-toast][data-mounted="true"][data-expanded="true"]){--y: translateY(calc(var(--lift) * var(--offset)));height:var(--initial-height)}:where([data-sonner-toast][data-removed="true"][data-front="true"][data-swipe-out="false"]){--y: translateY(calc(var(--lift) * -100%));opacity:0}:where([data-sonner-toast][data-removed="true"][data-front="false"][data-swipe-out="false"][data-expanded="true"]){--y: translateY(calc(var(--lift) * var(--offset) + var(--lift) * -100%));opacity:0}:where([data-sonner-toast][data-removed="true"][data-front="false"][data-swipe-out="false"][data-expanded="false"]){--y: translateY(40%);opacity:0;transition:transform .5s,opacity .2s}:where([data-sonner-toast][data-removed="true"][data-front="false"]):before{height:calc(var(--initial-height) + 20%)}[data-sonner-toast][data-swiping=true]{transform:var(--y) translateY(var(--swipe-amount, 0px));transition:none}[data-sonner-toast][data-swipe-out=true][data-y-position=bottom],[data-sonner-toast][data-swipe-out=true][data-y-position=top]{animation:swipe-out .2s ease-out forwards}@keyframes swipe-out{0%{transform:translateY(calc(var(--lift) * var(--offset) + var(--swipe-amount)));opacity:1}to{transform:translateY(calc(var(--lift) * var(--offset) + var(--swipe-amount) + var(--lift) * -100%));opacity:0}}@media (max-width: 600px){[data-sonner-toaster]{position:fixed;--mobile-offset: 16px;right:var(--mobile-offset);left:var(--mobile-offset);width:100%}[data-sonner-toaster] [data-sonner-toast]{left:0;right:0;width:calc(100% - var(--mobile-offset) * 2)}[data-sonner-toaster][data-x-position=left]{left:var(--mobile-offset)}[data-sonner-toaster][data-y-position=bottom]{bottom:20px}[data-sonner-toaster][data-y-position=top]{top:20px}[data-sonner-toaster][data-x-position=center]{left:var(--mobile-offset);right:var(--mobile-offset);transform:none}}[data-sonner-toaster][data-theme=light]{--normal-bg: #fff;--normal-border: var(--gray4);--normal-text: var(--gray12);--success-bg: hsl(143, 85%, 96%);--success-border: hsl(145, 92%, 91%);--success-text: hsl(140, 100%, 27%);--info-bg: hsl(208, 100%, 97%);--info-border: hsl(221, 91%, 91%);--info-text: hsl(210, 92%, 45%);--warning-bg: hsl(49, 100%, 97%);--warning-border: hsl(49, 91%, 91%);--warning-text: hsl(31, 92%, 45%);--error-bg: hsl(359, 100%, 97%);--error-border: hsl(359, 100%, 94%);--error-text: hsl(360, 100%, 45%)}[data-sonner-toaster][data-theme=light] [data-sonner-toast][data-invert=true]{--normal-bg: #000;--normal-border: hsl(0, 0%, 20%);--normal-text: var(--gray1)}[data-sonner-toaster][data-theme=dark] [data-sonner-toast][data-invert=true]{--normal-bg: #fff;--normal-border: var(--gray3);--normal-text: var(--gray12)}[data-sonner-toaster][data-theme=dark]{--normal-bg: #000;--normal-border: hsl(0, 0%, 20%);--normal-text: var(--gray1);--success-bg: hsl(150, 100%, 6%);--success-border: hsl(147, 100%, 12%);--success-text: hsl(150, 86%, 65%);--info-bg: hsl(215, 100%, 6%);--info-border: hsl(223, 100%, 12%);--info-text: hsl(216, 87%, 65%);--warning-bg: hsl(64, 100%, 6%);--warning-border: hsl(60, 100%, 12%);--warning-text: hsl(46, 87%, 65%);--error-bg: hsl(358, 76%, 10%);--error-border: hsl(357, 89%, 16%);--error-text: hsl(358, 100%, 81%)}[data-rich-colors=true][data-sonner-toast][data-type=success],[data-rich-colors=true][data-sonner-toast][data-type=success] [data-close-button]{background:var(--success-bg);border-color:var(--success-border);color:var(--success-text)}[data-rich-colors=true][data-sonner-toast][data-type=info],[data-rich-colors=true][data-sonner-toast][data-type=info] [data-close-button]{background:var(--info-bg);border-color:var(--info-border);color:var(--info-text)}[data-rich-colors=true][data-sonner-toast][data-type=warning],[data-rich-colors=true][data-sonner-toast][data-type=warning] [data-close-button]{background:var(--warning-bg);border-color:var(--warning-border);color:var(--warning-text)}[data-rich-colors=true][data-sonner-toast][data-type=error],[data-rich-colors=true][data-sonner-toast][data-type=error] [data-close-button]{background:var(--error-bg);border-color:var(--error-border);color:var(--error-text)}.sonner-loading-wrapper{--size: 16px;height:var(--size);width:var(--size);position:absolute;inset:0;z-index:10}.sonner-loading-wrapper[data-visible=false]{transform-origin:center;animation:sonner-fade-out .2s ease forwards}.sonner-spinner{position:relative;top:50%;left:50%;height:var(--size);width:var(--size)}.sonner-loading-bar{animation:sonner-spin 1.2s linear infinite;background:var(--gray11);border-radius:6px;height:8%;left:-10%;position:absolute;top:-3.9%;width:24%}.sonner-loading-bar:nth-child(1){animation-delay:-1.2s;transform:rotate(.0001deg) translate(146%)}.sonner-loading-bar:nth-child(2){animation-delay:-1.1s;transform:rotate(30deg) translate(146%)}.sonner-loading-bar:nth-child(3){animation-delay:-1s;transform:rotate(60deg) translate(146%)}.sonner-loading-bar:nth-child(4){animation-delay:-.9s;transform:rotate(90deg) translate(146%)}.sonner-loading-bar:nth-child(5){animation-delay:-.8s;transform:rotate(120deg) translate(146%)}.sonner-loading-bar:nth-child(6){animation-delay:-.7s;transform:rotate(150deg) translate(146%)}.sonner-loading-bar:nth-child(7){animation-delay:-.6s;transform:rotate(180deg) translate(146%)}.sonner-loading-bar:nth-child(8){animation-delay:-.5s;transform:rotate(210deg) translate(146%)}.sonner-loading-bar:nth-child(9){animation-delay:-.4s;transform:rotate(240deg) translate(146%)}.sonner-loading-bar:nth-child(10){animation-delay:-.3s;transform:rotate(270deg) translate(146%)}.sonner-loading-bar:nth-child(11){animation-delay:-.2s;transform:rotate(300deg) translate(146%)}.sonner-loading-bar:nth-child(12){animation-delay:-.1s;transform:rotate(330deg) translate(146%)}@keyframes sonner-fade-in{0%{opacity:0;transform:scale(.8)}to{opacity:1;transform:scale(1)}}@keyframes sonner-fade-out{0%{opacity:1;transform:scale(1)}to{opacity:0;transform:scale(.8)}}@keyframes sonner-spin{0%{opacity:1}to{opacity:.15}}@media (prefers-reduced-motion){[data-sonner-toast],[data-sonner-toast]>*,.sonner-loading-bar{transition:none!important;animation:none!important}}.sonner-loader{position:absolute;top:50%;left:50%;transform:translate(-50%,-50%);transform-origin:center;transition:opacity .2s,transform .2s}.sonner-loader[data-visible=false]{opacity:0;transform:scale(.8) translate(-50%,-50%)}
`);

function U(r) {
    return r.label !== void 0
}

var qt = 3, Qt = "32px", Zt = 4e3, te = 356, ee = 14, oe = 20, ae = 200;

function ne(...r) {
    return r.filter(Boolean).join(" ")
}

var se$1 = r => {
    var R, y, E, C, x, B, N, L, O, D;
    let {
            invert: z,
            toast: F,
            unstyled: _e,
            interacting: Y,
            setHeights: H,
            visibleToasts: me,
            heights: ce,
            index: ie,
            toasts: Be,
            expanded: ve,
            removeToast: Re,
            defaultRichColors: Ce,
            closeButton: Ne,
            style: we,
            cancelButtonStyle: Me,
            actionButtonStyle: ke,
            className: Fe = "",
            descriptionClassName: $e = "",
            duration: Ve,
            position: Je,
            gap: Qe,
            loadingIcon: Ze,
            expandByDefault: qe,
            classNames: ze,
            icons: De,
            closeButtonAriaLabel: Xe = "Close toast",
            pauseWhenPageIsHidden: He,
            cn: Ge
        } = r, [Le, We] = React.useState(!1), [dt, et] = React.useState(!1), [nt, tt] = React.useState(!1), [lt, Bt] = React.useState(!1), [kt, At] = React.useState(0), [zt, oa] = React.useState(0),
        sa = React.useRef(null), vt = React.useRef(null), ea = ie === 0, _a = ie + 1 <= me, ta = F.type,
        na = F.dismissible !== !1, Aa = F.className || "", Ea = F.descriptionClassName || "",
        Sa = React.useMemo(() => ce.findIndex(Ue => Ue.toastId === F.id) || 0, [ce, F.id]), Ga = React.useMemo(() => {
            var Ue;
            return (Ue = F.closeButton) != null ? Ue : Ne
        }, [F.closeButton, Ne]), Ta = React.useMemo(() => F.duration || Ve || Zt, [F.duration, Ve]), fa = React.useRef(0),
        ca = React.useRef(0), Ia = React.useRef(0), Ma = React.useRef(null), [Fa, va] = Je.split("-"),
        ha = React.useMemo(() => ce.reduce((Ue, Ke, mt) => mt >= Sa ? Ue : Ue + Ke.height, 0), [ce, Sa]), Ua = Dt(),
        xt = F.invert || z, K = ta === "loading";
    ca.current = React.useMemo(() => Sa * Qe + ha, [Sa, ha]), React.useEffect(() => {
        We(!0)
    }, []), React.useLayoutEffect(() => {
        if (!Le) return;
        let Ue = vt.current, Ke = Ue.style.height;
        Ue.style.height = "auto";
        let mt = Ue.getBoundingClientRect().height;
        Ue.style.height = Ke, oa(mt), H(Tt => Tt.find(jt => jt.toastId === F.id) ? Tt.map(jt => jt.toastId === F.id ? {
            ...jt,
            height: mt
        } : jt) : [{toastId: F.id, height: mt, position: F.position}, ...Tt])
    }, [Le, F.title, F.description, H, F.id]);
    let Pe = React.useCallback(() => {
        et(!0), At(ca.current), H(Ue => Ue.filter(Ke => Ke.toastId !== F.id)), setTimeout(() => {
            Re(F)
        }, ae)
    }, [F, Re, H, ca]);
    React.useEffect(() => {
        if (F.promise && ta === "loading" || F.duration === 1 / 0 || F.type === "loading") return;
        let Ue, Ke = Ta;
        return ve || Y || He && Ua ? (() => {
            if (Ia.current < fa.current) {
                let mt = new Date().getTime() - fa.current;
                Ke = Ke - mt
            }
            Ia.current = new Date().getTime()
        })() : Ke !== 1 / 0 && (fa.current = new Date().getTime(), Ue = setTimeout(() => {
            var mt;
            (mt = F.onAutoClose) == null || mt.call(F, F), Pe()
        }, Ke)), () => clearTimeout(Ue)
    }, [ve, Y, qe, F, Ta, Pe, F.promise, ta, He, Ua]), React.useEffect(() => {
        let Ue = vt.current;
        if (Ue) {
            let Ke = Ue.getBoundingClientRect().height;
            return oa(Ke), H(mt => [{
                toastId: F.id,
                height: Ke,
                position: F.position
            }, ...mt]), () => H(mt => mt.filter(Tt => Tt.toastId !== F.id))
        }
    }, [H, F.id]), React.useEffect(() => {
        F.delete && Pe()
    }, [Pe, F.delete]);

    function Oe() {
        return De != null && De.loading ? React.createElement("div", {
            className: "sonner-loader",
            "data-visible": ta === "loading"
        }, De.loading) : Ze ? React.createElement("div", {
            className: "sonner-loader",
            "data-visible": ta === "loading"
        }, Ze) : React.createElement(It, {visible: ta === "loading"})
    }

    return React.createElement("li", {
        "aria-live": F.important ? "assertive" : "polite",
        "aria-atomic": "true",
        role: "status",
        tabIndex: 0,
        ref: vt,
        className: Ge(Fe, Aa, ze == null ? void 0 : ze.toast, (R = F == null ? void 0 : F.classNames) == null ? void 0 : R.toast, ze == null ? void 0 : ze.default, ze == null ? void 0 : ze[ta], (y = F == null ? void 0 : F.classNames) == null ? void 0 : y[ta]),
        "data-sonner-toast": "",
        "data-rich-colors": (E = F.richColors) != null ? E : Ce,
        "data-styled": !(F.jsx || F.unstyled || _e),
        "data-mounted": Le,
        "data-promise": !!F.promise,
        "data-removed": dt,
        "data-visible": _a,
        "data-y-position": Fa,
        "data-x-position": va,
        "data-index": ie,
        "data-front": ea,
        "data-swiping": nt,
        "data-dismissible": na,
        "data-type": ta,
        "data-invert": xt,
        "data-swipe-out": lt,
        "data-expanded": !!(ve || qe && Le),
        style: {
            "--index": ie,
            "--toasts-before": ie,
            "--z-index": Be.length - ie,
            "--offset": `${dt ? kt : ca.current}px`,
            "--initial-height": qe ? "auto" : `${zt}px`, ...we, ...F.style
        },
        onPointerDown: Ue => {
            K || !na || (sa.current = new Date, At(ca.current), Ue.target.setPointerCapture(Ue.pointerId), Ue.target.tagName !== "BUTTON" && (tt(!0), Ma.current = {
                x: Ue.clientX,
                y: Ue.clientY
            }))
        },
        onPointerUp: () => {
            var Ue, Ke, mt, Tt;
            if (lt || !na) return;
            Ma.current = null;
            let jt = Number(((Ue = vt.current) == null ? void 0 : Ue.style.getPropertyValue("--swipe-amount").replace("px", "")) || 0),
                ia = new Date().getTime() - ((Ke = sa.current) == null ? void 0 : Ke.getTime()), aa = Math.abs(jt) / ia;
            if (Math.abs(jt) >= oe || aa > .11) {
                At(ca.current), (mt = F.onDismiss) == null || mt.call(F, F), Pe(), Bt(!0);
                return
            }
            (Tt = vt.current) == null || Tt.style.setProperty("--swipe-amount", "0px"), tt(!1)
        },
        onPointerMove: Ue => {
            var Ke;
            if (!Ma.current || !na) return;
            let mt = Ue.clientY - Ma.current.y, Tt = Ue.clientX - Ma.current.x,
                jt = (Fa === "top" ? Math.min : Math.max)(0, mt), ia = Ue.pointerType === "touch" ? 10 : 2;
            Math.abs(jt) > ia ? (Ke = vt.current) == null || Ke.style.setProperty("--swipe-amount", `${mt}px`) : Math.abs(Tt) > ia && (Ma.current = null)
        }
    }, Ga && !F.jsx ? React.createElement("button", {
        "aria-label": Xe,
        "data-disabled": K,
        "data-close-button": !0,
        onClick: K || !na ? () => {
        } : () => {
            var Ue;
            Pe(), (Ue = F.onDismiss) == null || Ue.call(F, F)
        },
        className: Ge(ze == null ? void 0 : ze.closeButton, (C = F == null ? void 0 : F.classNames) == null ? void 0 : C.closeButton)
    }, React.createElement("svg", {
        xmlns: "http://www.w3.org/2000/svg",
        width: "12",
        height: "12",
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: "currentColor",
        strokeWidth: "1.5",
        strokeLinecap: "round",
        strokeLinejoin: "round"
    }, React.createElement("line", {x1: "18", y1: "6", x2: "6", y2: "18"}), React.createElement("line", {
        x1: "6",
        y1: "6",
        x2: "18",
        y2: "18"
    }))) : null, F.jsx || React.isValidElement(F.title) ? F.jsx || F.title : React.createElement(React.Fragment, null, ta || F.icon || F.promise ? React.createElement("div", {
        "data-icon": "",
        className: Ge(ze == null ? void 0 : ze.icon, (x = F == null ? void 0 : F.classNames) == null ? void 0 : x.icon)
    }, F.promise || F.type === "loading" && !F.icon ? F.icon || Oe() : null, F.type !== "loading" ? F.icon || (De == null ? void 0 : De[ta]) || Ct(ta) : null) : null, React.createElement("div", {
        "data-content": "",
        className: Ge(ze == null ? void 0 : ze.content, (B = F == null ? void 0 : F.classNames) == null ? void 0 : B.content)
    }, React.createElement("div", {
        "data-title": "",
        className: Ge(ze == null ? void 0 : ze.title, (N = F == null ? void 0 : F.classNames) == null ? void 0 : N.title)
    }, F.title), F.description ? React.createElement("div", {
        "data-description": "",
        className: Ge($e, Ea, ze == null ? void 0 : ze.description, (L = F == null ? void 0 : F.classNames) == null ? void 0 : L.description)
    }, F.description) : null), React.isValidElement(F.cancel) ? F.cancel : F.cancel && U(F.cancel) ? React.createElement("button", {
        "data-button": !0,
        "data-cancel": !0,
        style: F.cancelButtonStyle || Me,
        onClick: Ue => {
            var Ke, mt;
            U(F.cancel) && na && ((mt = (Ke = F.cancel).onClick) == null || mt.call(Ke, Ue), Pe())
        },
        className: Ge(ze == null ? void 0 : ze.cancelButton, (O = F == null ? void 0 : F.classNames) == null ? void 0 : O.cancelButton)
    }, F.cancel.label) : null, React.isValidElement(F.action) ? F.action : F.action && U(F.action) ? React.createElement("button", {
        "data-button": !0,
        "data-action": !0,
        style: F.actionButtonStyle || ke,
        onClick: Ue => {
            var Ke, mt;
            U(F.action) && (Ue.defaultPrevented || ((mt = (Ke = F.action).onClick) == null || mt.call(Ke, Ue), Pe()))
        },
        className: Ge(ze == null ? void 0 : ze.actionButton, (D = F == null ? void 0 : F.classNames) == null ? void 0 : D.actionButton)
    }, F.action.label) : null))
};

function Ht() {
    if (typeof window > "u" || typeof document > "u") return "ltr";
    let r = document.documentElement.getAttribute("dir");
    return r === "auto" || !r ? window.getComputedStyle(document.documentElement).direction : r
}

var Te$1 = r => {
    let {
            invert: R,
            position: y = "bottom-right",
            hotkey: E = ["altKey", "KeyT"],
            expand: C,
            closeButton: x,
            className: B,
            offset: N,
            theme: L = "light",
            richColors: O,
            duration: D,
            style: z,
            visibleToasts: F = qt,
            toastOptions: _e,
            dir: Y = Ht(),
            gap: H = ee,
            loadingIcon: me,
            icons: ce,
            containerAriaLabel: ie = "Notifications",
            pauseWhenPageIsHidden: Be,
            cn: ve = ne
        } = r, [Re, Ce] = React.useState([]),
        Ne = React.useMemo(() => Array.from(new Set([y].concat(Re.filter(He => He.position).map(He => He.position)))), [Re, y]), [we, Me] = React.useState([]), [ke, Fe] = React.useState(!1), [$e, Ve] = React.useState(!1), [Je, Qe] = React.useState(L !== "system" ? L : typeof window < "u" && window.matchMedia && window.matchMedia("(prefers-color-scheme: dark)").matches ? "dark" : "light"),
        Ze = React.useRef(null), qe = E.join("+").replace(/Key/g, "").replace(/Digit/g, ""), ze = React.useRef(null),
        De = React.useRef(!1), Xe = React.useCallback(He => {
            var Ge;
            (Ge = Re.find(Le => Le.id === He.id)) != null && Ge.delete || v$1.dismiss(He.id), Ce(Le => Le.filter(({id: We}) => We !== He.id))
        }, [Re]);
    return React.useEffect(() => v$1.subscribe(He => {
        if (He.dismiss) {
            Ce(Ge => Ge.map(Le => Le.id === He.id ? {...Le, delete: !0} : Le));
            return
        }
        setTimeout(() => {
            ReactDOM.flushSync(() => {
                Ce(Ge => {
                    let Le = Ge.findIndex(We => We.id === He.id);
                    return Le !== -1 ? [...Ge.slice(0, Le), {...Ge[Le], ...He}, ...Ge.slice(Le + 1)] : [He, ...Ge]
                })
            })
        })
    }), []), React.useEffect(() => {
        if (L !== "system") {
            Qe(L);
            return
        }
        L === "system" && (window.matchMedia && window.matchMedia("(prefers-color-scheme: dark)").matches ? Qe("dark") : Qe("light")), typeof window < "u" && window.matchMedia("(prefers-color-scheme: dark)").addEventListener("change", ({matches: He}) => {
            Qe(He ? "dark" : "light")
        })
    }, [L]), React.useEffect(() => {
        Re.length <= 1 && Fe(!1)
    }, [Re]), React.useEffect(() => {
        let He = Ge => {
            var Le, We;
            E.every(dt => Ge[dt] || Ge.code === dt) && (Fe(!0), (Le = Ze.current) == null || Le.focus()), Ge.code === "Escape" && (document.activeElement === Ze.current || (We = Ze.current) != null && We.contains(document.activeElement)) && Fe(!1)
        };
        return document.addEventListener("keydown", He), () => document.removeEventListener("keydown", He)
    }, [E]), React.useEffect(() => {
        if (Ze.current) return () => {
            ze.current && (ze.current.focus({preventScroll: !0}), ze.current = null, De.current = !1)
        }
    }, [Ze.current]), Re.length ? React.createElement("section", {
        "aria-label": `${ie} ${qe}`,
        tabIndex: -1
    }, Ne.map((He, Ge) => {
        var Le;
        let [We, dt] = He.split("-");
        return React.createElement("ol", {
            key: He,
            dir: Y === "auto" ? Ht() : Y,
            tabIndex: -1,
            ref: Ze,
            className: B,
            "data-sonner-toaster": !0,
            "data-theme": Je,
            "data-y-position": We,
            "data-x-position": dt,
            style: {
                "--front-toast-height": `${((Le = we[0]) == null ? void 0 : Le.height) || 0}px`,
                "--offset": typeof N == "number" ? `${N}px` : N || Qt,
                "--width": `${te}px`,
                "--gap": `${H}px`, ...z
            },
            onBlur: et => {
                De.current && !et.currentTarget.contains(et.relatedTarget) && (De.current = !1, ze.current && (ze.current.focus({preventScroll: !0}), ze.current = null))
            },
            onFocus: et => {
                et.target instanceof HTMLElement && et.target.dataset.dismissible === "false" || De.current || (De.current = !0, ze.current = et.relatedTarget)
            },
            onMouseEnter: () => Fe(!0),
            onMouseMove: () => Fe(!0),
            onMouseLeave: () => {
                $e || Fe(!1)
            },
            onPointerDown: et => {
                et.target instanceof HTMLElement && et.target.dataset.dismissible === "false" || Ve(!0)
            },
            onPointerUp: () => Ve(!1)
        }, Re.filter(et => !et.position && Ge === 0 || et.position === He).map((et, nt) => {
            var tt, lt;
            return React.createElement(se$1, {
                key: et.id,
                icons: ce,
                index: nt,
                toast: et,
                defaultRichColors: O,
                duration: (tt = _e == null ? void 0 : _e.duration) != null ? tt : D,
                className: _e == null ? void 0 : _e.className,
                descriptionClassName: _e == null ? void 0 : _e.descriptionClassName,
                invert: R,
                visibleToasts: F,
                closeButton: (lt = _e == null ? void 0 : _e.closeButton) != null ? lt : x,
                interacting: $e,
                position: He,
                style: _e == null ? void 0 : _e.style,
                unstyled: _e == null ? void 0 : _e.unstyled,
                classNames: _e == null ? void 0 : _e.classNames,
                cancelButtonStyle: _e == null ? void 0 : _e.cancelButtonStyle,
                actionButtonStyle: _e == null ? void 0 : _e.actionButtonStyle,
                removeToast: Xe,
                toasts: Re.filter(Bt => Bt.position == et.position),
                heights: we.filter(Bt => Bt.position == et.position),
                setHeights: Me,
                expandByDefault: C,
                gap: H,
                loadingIcon: me,
                expanded: ke,
                pauseWhenPageIsHidden: Be,
                cn: ve
            })
        }))
    })) : null
}, dist = {}, useWebsocket = {}, constants = {};
(function (r) {
    Object.defineProperty(r, "__esModule", {value: !0}), r.isEventSourceSupported = r.isReactNative = r.ReadyState = r.DEFAULT_HEARTBEAT = r.UNPARSABLE_JSON_OBJECT = r.DEFAULT_RECONNECT_INTERVAL_MS = r.DEFAULT_RECONNECT_LIMIT = r.SOCKET_IO_PING_CODE = r.SOCKET_IO_PATH = r.SOCKET_IO_PING_INTERVAL = r.DEFAULT_EVENT_SOURCE_OPTIONS = r.EMPTY_EVENT_HANDLERS = r.DEFAULT_OPTIONS = void 0;
    var R = 1, y = 1e3 * R;
    r.DEFAULT_OPTIONS = {}, r.EMPTY_EVENT_HANDLERS = {}, r.DEFAULT_EVENT_SOURCE_OPTIONS = {
        withCredentials: !1,
        events: r.EMPTY_EVENT_HANDLERS
    }, r.SOCKET_IO_PING_INTERVAL = 25 * y, r.SOCKET_IO_PATH = "/socket.io/?EIO=3&transport=websocket", r.SOCKET_IO_PING_CODE = "2", r.DEFAULT_RECONNECT_LIMIT = 20, r.DEFAULT_RECONNECT_INTERVAL_MS = 5e3, r.UNPARSABLE_JSON_OBJECT = {}, r.DEFAULT_HEARTBEAT = {
        message: "ping",
        timeout: 6e4,
        interval: 25e3
    }, function (C) {
        C[C.UNINSTANTIATED = -1] = "UNINSTANTIATED", C[C.CONNECTING = 0] = "CONNECTING", C[C.OPEN = 1] = "OPEN", C[C.CLOSING = 2] = "CLOSING", C[C.CLOSED = 3] = "CLOSED"
    }(r.ReadyState || (r.ReadyState = {}));
    var E = function () {
        try {
            return "EventSource" in globalThis
        } catch {
            return !1
        }
    };
    r.isReactNative = typeof navigator < "u" && navigator.product === "ReactNative", r.isEventSourceSupported = !r.isReactNative && E()
})(constants);
var createOrJoin = {}, globals = {};
(function (r) {
    Object.defineProperty(r, "__esModule", {value: !0}), r.resetWebSockets = r.sharedWebSockets = void 0, r.sharedWebSockets = {};
    var R = function (y) {
        if (y && r.sharedWebSockets.hasOwnProperty(y)) delete r.sharedWebSockets[y];
        else for (var E in r.sharedWebSockets) r.sharedWebSockets.hasOwnProperty(E) && delete r.sharedWebSockets[E]
    };
    r.resetWebSockets = R
})(globals);
var attachListener = {}, socketIo = {};
Object.defineProperty(socketIo, "__esModule", {value: !0});
socketIo.setUpSocketIOPing = socketIo.appendQueryParams = socketIo.parseSocketIOUrl = void 0;
var constants_1$7 = constants, parseSocketIOUrl = function (r) {
    if (r) {
        var R = /^https|wss/.test(r), y = r.replace(/^(https?|wss?)(:\/\/)?/, ""), E = y.replace(/\/$/, ""),
            C = R ? "wss" : "ws";
        return "".concat(C, "://").concat(E).concat(constants_1$7.SOCKET_IO_PATH)
    } else if (r === "") {
        var R = /^https/.test(window.location.protocol), C = R ? "wss" : "ws",
            x = window.location.port ? ":".concat(window.location.port) : "";
        return "".concat(C, "://").concat(window.location.hostname).concat(x).concat(constants_1$7.SOCKET_IO_PATH)
    }
    return r
};
socketIo.parseSocketIOUrl = parseSocketIOUrl;
var appendQueryParams = function (r, R) {
    R === void 0 && (R = {});
    var y = /\?([\w]+=[\w]+)/, E = y.test(r), C = "".concat(Object.entries(R).reduce(function (x, B) {
        var N = B[0], L = B[1];
        return x + "".concat(N, "=").concat(L, "&")
    }, "").slice(0, -1));
    return "".concat(r).concat(E ? "&" : "?").concat(C)
};
socketIo.appendQueryParams = appendQueryParams;
var setUpSocketIOPing = function (r, R) {
    R === void 0 && (R = constants_1$7.SOCKET_IO_PING_INTERVAL);
    var y = function () {
        return r(constants_1$7.SOCKET_IO_PING_CODE)
    };
    return window.setInterval(y, R)
};
socketIo.setUpSocketIOPing = setUpSocketIOPing;
var heartbeat$1 = {};
Object.defineProperty(heartbeat$1, "__esModule", {value: !0});
heartbeat$1.heartbeat = void 0;
var constants_1$6 = constants;

function heartbeat(r, R) {
    var y = R || {}, E = y.interval, C = E === void 0 ? constants_1$6.DEFAULT_HEARTBEAT.interval : E, x = y.timeout,
        B = x === void 0 ? constants_1$6.DEFAULT_HEARTBEAT.timeout : x, N = y.message,
        L = N === void 0 ? constants_1$6.DEFAULT_HEARTBEAT.message : N, O = !1, D = setInterval(function () {
            try {
                typeof L == "function" ? r.send(L()) : r.send(L)
            } catch {
            }
        }, C), z = setInterval(function () {
            O ? O = !1 : r.close()
        }, B);
    return r.addEventListener("close", function () {
        clearInterval(D), clearInterval(z)
    }), function () {
        O = !0
    }
}

heartbeat$1.heartbeat = heartbeat;
var util = {}, manageSubscribers = {};
(function (r) {
    Object.defineProperty(r, "__esModule", {value: !0}), r.resetSubscribers = r.removeSubscriber = r.addSubscriber = r.hasSubscribers = r.getSubscribers = void 0;
    var R = {}, y = [], E = function (L) {
        return (0, r.hasSubscribers)(L) ? Array.from(R[L]) : y
    };
    r.getSubscribers = E;
    var C = function (L) {
        var O;
        return ((O = R[L]) === null || O === void 0 ? void 0 : O.size) > 0
    };
    r.hasSubscribers = C;
    var x = function (L, O) {
        R[L] = R[L] || new Set, R[L].add(O)
    };
    r.addSubscriber = x;
    var B = function (L, O) {
        R[L].delete(O)
    };
    r.removeSubscriber = B;
    var N = function (L) {
        if (L && R.hasOwnProperty(L)) delete R[L]; else for (var O in R) R.hasOwnProperty(O) && delete R[O]
    };
    r.resetSubscribers = N
})(manageSubscribers);
Object.defineProperty(util, "__esModule", {value: !0});
util.resetGlobalState = util.assertIsWebSocket = void 0;
var globals_1$2 = globals, manage_subscribers_1$2 = manageSubscribers;

function assertIsWebSocket(r, R) {
    if (!R && !(r instanceof WebSocket)) throw new Error("")
}

util.assertIsWebSocket = assertIsWebSocket;

function resetGlobalState(r) {
    (0, manage_subscribers_1$2.resetSubscribers)(r), (0, globals_1$2.resetWebSockets)(r)
}

util.resetGlobalState = resetGlobalState;
var __assign$4 = commonjsGlobal && commonjsGlobal.__assign || function () {
    return __assign$4 = Object.assign || function (r) {
        for (var R, y = 1, E = arguments.length; y < E; y++) {
            R = arguments[y];
            for (var C in R) Object.prototype.hasOwnProperty.call(R, C) && (r[C] = R[C])
        }
        return r
    }, __assign$4.apply(this, arguments)
};
Object.defineProperty(attachListener, "__esModule", {value: !0});
attachListener.attachListeners = void 0;
var socket_io_1$1 = socketIo, heartbeat_1$1 = heartbeat$1, constants_1$5 = constants, util_1$1 = util,
    bindMessageHandler$1 = function (r, R, y) {
        var E;
        if (R.current.heartbeat && r instanceof WebSocket) {
            var C = typeof R.current.heartbeat == "boolean" ? void 0 : R.current.heartbeat;
            E = (0, heartbeat_1$1.heartbeat)(r, C)
        }
        r.onmessage = function (x) {
            var B;
            E == null || E(), R.current.onMessage && R.current.onMessage(x), !(typeof R.current.filter == "function" && R.current.filter(x) !== !0) && (R.current.heartbeat && typeof R.current.heartbeat != "boolean" && ((B = R.current.heartbeat) === null || B === void 0 ? void 0 : B.returnMessage) === x.data || y(x))
        }
    }, bindOpenHandler$1 = function (r, R, y, E) {
        r.onopen = function (C) {
            R.current.onOpen && R.current.onOpen(C), E.current = 0, y(constants_1$5.ReadyState.OPEN)
        }
    }, bindCloseHandler$1 = function (r, R, y, E, C) {
        if (constants_1$5.isEventSourceSupported && r instanceof EventSource) return function () {
        };
        (0, util_1$1.assertIsWebSocket)(r, R.current.skipAssert);
        var x;
        return r.onclose = function (B) {
            var N;
            if (R.current.onClose && R.current.onClose(B), y(constants_1$5.ReadyState.CLOSED), R.current.shouldReconnect && R.current.shouldReconnect(B)) {
                var L = (N = R.current.reconnectAttempts) !== null && N !== void 0 ? N : constants_1$5.DEFAULT_RECONNECT_LIMIT;
                if (C.current < L) {
                    var O = typeof R.current.reconnectInterval == "function" ? R.current.reconnectInterval(C.current) : R.current.reconnectInterval;
                    x = window.setTimeout(function () {
                        C.current++, E()
                    }, O ?? constants_1$5.DEFAULT_RECONNECT_INTERVAL_MS)
                } else R.current.onReconnectStop && R.current.onReconnectStop(L), console.warn("Max reconnect attempts of ".concat(L, " exceeded"))
            }
        }, function () {
            return x && window.clearTimeout(x)
        }
    }, bindErrorHandler$1 = function (r, R, y, E, C) {
        var x;
        return r.onerror = function (B) {
            var N;
            if (R.current.onError && R.current.onError(B), constants_1$5.isEventSourceSupported && r instanceof EventSource && (R.current.onClose && R.current.onClose(__assign$4(__assign$4({}, B), {
                code: 1006,
                reason: "An error occurred with the EventSource: ".concat(B),
                wasClean: !1
            })), y(constants_1$5.ReadyState.CLOSED), r.close()), R.current.retryOnError) if (C.current < ((N = R.current.reconnectAttempts) !== null && N !== void 0 ? N : constants_1$5.DEFAULT_RECONNECT_LIMIT)) {
                var L = typeof R.current.reconnectInterval == "function" ? R.current.reconnectInterval(C.current) : R.current.reconnectInterval;
                x = window.setTimeout(function () {
                    C.current++, E()
                }, L ?? constants_1$5.DEFAULT_RECONNECT_INTERVAL_MS)
            } else R.current.onReconnectStop && R.current.onReconnectStop(R.current.reconnectAttempts), console.warn("Max reconnect attempts of ".concat(R.current.reconnectAttempts, " exceeded"))
        }, function () {
            return x && window.clearTimeout(x)
        }
    }, attachListeners = function (r, R, y, E, C, x) {
        var B = R.setLastMessage, N = R.setReadyState, L, O, D;
        return y.current.fromSocketIO && (L = (0, socket_io_1$1.setUpSocketIOPing)(x)), bindMessageHandler$1(r, y, B), bindOpenHandler$1(r, y, N, C), O = bindCloseHandler$1(r, y, N, E, C), D = bindErrorHandler$1(r, y, N, E, C), function () {
            N(constants_1$5.ReadyState.CLOSING), O(), D(), r.close(), L && clearInterval(L)
        }
    };
attachListener.attachListeners = attachListeners;
var attachSharedListeners$1 = {}, __assign$3 = commonjsGlobal && commonjsGlobal.__assign || function () {
    return __assign$3 = Object.assign || function (r) {
        for (var R, y = 1, E = arguments.length; y < E; y++) {
            R = arguments[y];
            for (var C in R) Object.prototype.hasOwnProperty.call(R, C) && (r[C] = R[C])
        }
        return r
    }, __assign$3.apply(this, arguments)
};
Object.defineProperty(attachSharedListeners$1, "__esModule", {value: !0});
attachSharedListeners$1.attachSharedListeners = void 0;
var globals_1$1 = globals, constants_1$4 = constants, manage_subscribers_1$1 = manageSubscribers,
    socket_io_1 = socketIo, heartbeat_1 = heartbeat$1, bindMessageHandler = function (r, R, y) {
        var E;
        y && r instanceof WebSocket && (E = (0, heartbeat_1.heartbeat)(r, typeof y == "boolean" ? void 0 : y)), r.onmessage = function (C) {
            E == null || E(), (0, manage_subscribers_1$1.getSubscribers)(R).forEach(function (x) {
                x.optionsRef.current.onMessage && x.optionsRef.current.onMessage(C), !(typeof x.optionsRef.current.filter == "function" && x.optionsRef.current.filter(C) !== !0) && (y && typeof y != "boolean" && (y == null ? void 0 : y.returnMessage) === C.data || x.setLastMessage(C))
            })
        }
    }, bindOpenHandler = function (r, R) {
        r.onopen = function (y) {
            (0, manage_subscribers_1$1.getSubscribers)(R).forEach(function (E) {
                E.reconnectCount.current = 0, E.optionsRef.current.onOpen && E.optionsRef.current.onOpen(y), E.setReadyState(constants_1$4.ReadyState.OPEN)
            })
        }
    }, bindCloseHandler = function (r, R) {
        r instanceof WebSocket && (r.onclose = function (y) {
            (0, manage_subscribers_1$1.getSubscribers)(R).forEach(function (E) {
                E.optionsRef.current.onClose && E.optionsRef.current.onClose(y), E.setReadyState(constants_1$4.ReadyState.CLOSED)
            }), delete globals_1$1.sharedWebSockets[R], (0, manage_subscribers_1$1.getSubscribers)(R).forEach(function (E) {
                var C;
                if (E.optionsRef.current.shouldReconnect && E.optionsRef.current.shouldReconnect(y)) {
                    var x = (C = E.optionsRef.current.reconnectAttempts) !== null && C !== void 0 ? C : constants_1$4.DEFAULT_RECONNECT_LIMIT;
                    if (E.reconnectCount.current < x) {
                        var B = typeof E.optionsRef.current.reconnectInterval == "function" ? E.optionsRef.current.reconnectInterval(E.reconnectCount.current) : E.optionsRef.current.reconnectInterval;
                        setTimeout(function () {
                            E.reconnectCount.current++, E.reconnect.current()
                        }, B ?? constants_1$4.DEFAULT_RECONNECT_INTERVAL_MS)
                    } else E.optionsRef.current.onReconnectStop && E.optionsRef.current.onReconnectStop(E.optionsRef.current.reconnectAttempts), console.warn("Max reconnect attempts of ".concat(x, " exceeded"))
                }
            })
        })
    }, bindErrorHandler = function (r, R) {
        r.onerror = function (y) {
            (0, manage_subscribers_1$1.getSubscribers)(R).forEach(function (E) {
                E.optionsRef.current.onError && E.optionsRef.current.onError(y), constants_1$4.isEventSourceSupported && r instanceof EventSource && (E.optionsRef.current.onClose && E.optionsRef.current.onClose(__assign$3(__assign$3({}, y), {
                    code: 1006,
                    reason: "An error occurred with the EventSource: ".concat(y),
                    wasClean: !1
                })), E.setReadyState(constants_1$4.ReadyState.CLOSED))
            }), constants_1$4.isEventSourceSupported && r instanceof EventSource && r.close()
        }
    }, attachSharedListeners = function (r, R, y, E) {
        var C;
        return y.current.fromSocketIO && (C = (0, socket_io_1.setUpSocketIOPing)(E)), bindMessageHandler(r, R, y.current.heartbeat), bindCloseHandler(r, R), bindOpenHandler(r, R), bindErrorHandler(r, R), function () {
            C && clearInterval(C)
        }
    };
attachSharedListeners$1.attachSharedListeners = attachSharedListeners;
Object.defineProperty(createOrJoin, "__esModule", {value: !0});
createOrJoin.createOrJoinSocket = void 0;
var globals_1 = globals, constants_1$3 = constants, attach_listener_1 = attachListener,
    attach_shared_listeners_1 = attachSharedListeners$1, manage_subscribers_1 = manageSubscribers,
    cleanSubscribers = function (r, R, y, E, C) {
        return function () {
            if ((0, manage_subscribers_1.removeSubscriber)(r, R), !(0, manage_subscribers_1.hasSubscribers)(r)) {
                try {
                    var x = globals_1.sharedWebSockets[r];
                    x instanceof WebSocket && (x.onclose = function (B) {
                        y.current.onClose && y.current.onClose(B), E(constants_1$3.ReadyState.CLOSED)
                    }), x.close()
                } catch {
                }
                C && C(), delete globals_1.sharedWebSockets[r]
            }
        }
    }, createOrJoinSocket = function (r, R, y, E, C, x, B, N) {
        if (!constants_1$3.isEventSourceSupported && E.current.eventSourceOptions) throw constants_1$3.isReactNative ? new Error("EventSource is not supported in ReactNative") : new Error("EventSource is not supported");
        if (E.current.share) {
            var L = null;
            globals_1.sharedWebSockets[R] === void 0 ? (globals_1.sharedWebSockets[R] = E.current.eventSourceOptions ? new EventSource(R, E.current.eventSourceOptions) : new WebSocket(R, E.current.protocols), r.current = globals_1.sharedWebSockets[R], y(constants_1$3.ReadyState.CONNECTING), L = (0, attach_shared_listeners_1.attachSharedListeners)(globals_1.sharedWebSockets[R], R, E, N)) : (r.current = globals_1.sharedWebSockets[R], y(globals_1.sharedWebSockets[R].readyState));
            var O = {setLastMessage: C, setReadyState: y, optionsRef: E, reconnectCount: B, reconnect: x};
            return (0, manage_subscribers_1.addSubscriber)(R, O), cleanSubscribers(R, O, E, y, L)
        } else {
            if (r.current = E.current.eventSourceOptions ? new EventSource(R, E.current.eventSourceOptions) : new WebSocket(R, E.current.protocols), y(constants_1$3.ReadyState.CONNECTING), !r.current) throw new Error("WebSocket failed to be created");
            return (0, attach_listener_1.attachListeners)(r.current, {
                setLastMessage: C,
                setReadyState: y
            }, E, x.current, B, N)
        }
    };
createOrJoin.createOrJoinSocket = createOrJoinSocket;
var getUrl = {};
(function (r) {
    var R = commonjsGlobal && commonjsGlobal.__awaiter || function (N, L, O, D) {
        function z(F) {
            return F instanceof O ? F : new O(function (_e) {
                _e(F)
            })
        }

        return new (O || (O = Promise))(function (F, _e) {
            function Y(ce) {
                try {
                    me(D.next(ce))
                } catch (ie) {
                    _e(ie)
                }
            }

            function H(ce) {
                try {
                    me(D.throw(ce))
                } catch (ie) {
                    _e(ie)
                }
            }

            function me(ce) {
                ce.done ? F(ce.value) : z(ce.value).then(Y, H)
            }

            me((D = D.apply(N, L || [])).next())
        })
    }, y = commonjsGlobal && commonjsGlobal.__generator || function (N, L) {
        var O = {
            label: 0, sent: function () {
                if (F[0] & 1) throw F[1];
                return F[1]
            }, trys: [], ops: []
        }, D, z, F, _e;
        return _e = {
            next: Y(0),
            throw: Y(1),
            return: Y(2)
        }, typeof Symbol == "function" && (_e[Symbol.iterator] = function () {
            return this
        }), _e;

        function Y(me) {
            return function (ce) {
                return H([me, ce])
            }
        }

        function H(me) {
            if (D) throw new TypeError("Generator is already executing.");
            for (; O;) try {
                if (D = 1, z && (F = me[0] & 2 ? z.return : me[0] ? z.throw || ((F = z.return) && F.call(z), 0) : z.next) && !(F = F.call(z, me[1])).done) return F;
                switch (z = 0, F && (me = [me[0] & 2, F.value]), me[0]) {
                    case 0:
                    case 1:
                        F = me;
                        break;
                    case 4:
                        return O.label++, {value: me[1], done: !1};
                    case 5:
                        O.label++, z = me[1], me = [0];
                        continue;
                    case 7:
                        me = O.ops.pop(), O.trys.pop();
                        continue;
                    default:
                        if (F = O.trys, !(F = F.length > 0 && F[F.length - 1]) && (me[0] === 6 || me[0] === 2)) {
                            O = 0;
                            continue
                        }
                        if (me[0] === 3 && (!F || me[1] > F[0] && me[1] < F[3])) {
                            O.label = me[1];
                            break
                        }
                        if (me[0] === 6 && O.label < F[1]) {
                            O.label = F[1], F = me;
                            break
                        }
                        if (F && O.label < F[2]) {
                            O.label = F[2], O.ops.push(me);
                            break
                        }
                        F[2] && O.ops.pop(), O.trys.pop();
                        continue
                }
                me = L.call(N, O)
            } catch (ce) {
                me = [6, ce], z = 0
            } finally {
                D = F = 0
            }
            if (me[0] & 5) throw me[1];
            return {value: me[0] ? me[1] : void 0, done: !0}
        }
    };
    Object.defineProperty(r, "__esModule", {value: !0}), r.getUrl = void 0;
    var E = socketIo, C = constants, x = function (N) {
        return new Promise(function (L) {
            return window.setTimeout(L, N)
        })
    }, B = function (N, L, O) {
        return O === void 0 && (O = 0), R(void 0, void 0, void 0, function () {
            var D, z, F, _e, Y, H, me, ce;
            return y(this, function (ie) {
                switch (ie.label) {
                    case 0:
                        if (typeof N != "function") return [3, 10];
                        ie.label = 1;
                    case 1:
                        return ie.trys.push([1, 3, , 9]), [4, N()];
                    case 2:
                        return D = ie.sent(), [3, 9];
                    case 3:
                        return ie.sent(), L.current.retryOnError ? (z = (H = L.current.reconnectAttempts) !== null && H !== void 0 ? H : C.DEFAULT_RECONNECT_LIMIT, O < z ? (F = typeof L.current.reconnectInterval == "function" ? L.current.reconnectInterval(O) : L.current.reconnectInterval, [4, x(F ?? C.DEFAULT_RECONNECT_INTERVAL_MS)]) : [3, 5]) : [3, 7];
                    case 4:
                        return ie.sent(), [2, (0, r.getUrl)(N, L, O + 1)];
                    case 5:
                        return (ce = (me = L.current).onReconnectStop) === null || ce === void 0 || ce.call(me, O), [2, null];
                    case 6:
                        return [3, 8];
                    case 7:
                        return [2, null];
                    case 8:
                        return [3, 9];
                    case 9:
                        return [3, 11];
                    case 10:
                        D = N, ie.label = 11;
                    case 11:
                        return _e = L.current.fromSocketIO ? (0, E.parseSocketIOUrl)(D) : D, Y = L.current.queryParams ? (0, E.appendQueryParams)(_e, L.current.queryParams) : _e, [2, Y]
                }
            })
        })
    };
    r.getUrl = B
})(getUrl);
var proxy = {};
(function (r) {
    Object.defineProperty(r, "__esModule", {value: !0}), r.websocketWrapper = void 0;
    var R = function (y, E) {
        return new Proxy(y, {
            get: function (C, x) {
                var B = C[x];
                return x === "reconnect" ? E : typeof B == "function" ? (console.error("Calling methods directly on the websocket is not supported at this moment. You must use the methods returned by useWebSocket."), function () {
                }) : B
            }, set: function (C, x, B) {
                return /^on/.test(x) ? (console.warn("The websocket's event handlers should be defined through the options object passed into useWebSocket."), !1) : (C[x] = B, !0)
            }
        })
    };
    r.websocketWrapper = R, r.default = r.websocketWrapper
})(proxy);
var __assign$2 = commonjsGlobal && commonjsGlobal.__assign || function () {
    return __assign$2 = Object.assign || function (r) {
        for (var R, y = 1, E = arguments.length; y < E; y++) {
            R = arguments[y];
            for (var C in R) Object.prototype.hasOwnProperty.call(R, C) && (r[C] = R[C])
        }
        return r
    }, __assign$2.apply(this, arguments)
}, __awaiter = commonjsGlobal && commonjsGlobal.__awaiter || function (r, R, y, E) {
    function C(x) {
        return x instanceof y ? x : new y(function (B) {
            B(x)
        })
    }

    return new (y || (y = Promise))(function (x, B) {
        function N(D) {
            try {
                O(E.next(D))
            } catch (z) {
                B(z)
            }
        }

        function L(D) {
            try {
                O(E.throw(D))
            } catch (z) {
                B(z)
            }
        }

        function O(D) {
            D.done ? x(D.value) : C(D.value).then(N, L)
        }

        O((E = E.apply(r, R || [])).next())
    })
}, __generator = commonjsGlobal && commonjsGlobal.__generator || function (r, R) {
    var y = {
        label: 0, sent: function () {
            if (x[0] & 1) throw x[1];
            return x[1]
        }, trys: [], ops: []
    }, E, C, x, B;
    return B = {
        next: N(0),
        throw: N(1),
        return: N(2)
    }, typeof Symbol == "function" && (B[Symbol.iterator] = function () {
        return this
    }), B;

    function N(O) {
        return function (D) {
            return L([O, D])
        }
    }

    function L(O) {
        if (E) throw new TypeError("Generator is already executing.");
        for (; y;) try {
            if (E = 1, C && (x = O[0] & 2 ? C.return : O[0] ? C.throw || ((x = C.return) && x.call(C), 0) : C.next) && !(x = x.call(C, O[1])).done) return x;
            switch (C = 0, x && (O = [O[0] & 2, x.value]), O[0]) {
                case 0:
                case 1:
                    x = O;
                    break;
                case 4:
                    return y.label++, {value: O[1], done: !1};
                case 5:
                    y.label++, C = O[1], O = [0];
                    continue;
                case 7:
                    O = y.ops.pop(), y.trys.pop();
                    continue;
                default:
                    if (x = y.trys, !(x = x.length > 0 && x[x.length - 1]) && (O[0] === 6 || O[0] === 2)) {
                        y = 0;
                        continue
                    }
                    if (O[0] === 3 && (!x || O[1] > x[0] && O[1] < x[3])) {
                        y.label = O[1];
                        break
                    }
                    if (O[0] === 6 && y.label < x[1]) {
                        y.label = x[1], x = O;
                        break
                    }
                    if (x && y.label < x[2]) {
                        y.label = x[2], y.ops.push(O);
                        break
                    }
                    x[2] && y.ops.pop(), y.trys.pop();
                    continue
            }
            O = R.call(r, y)
        } catch (D) {
            O = [6, D], C = 0
        } finally {
            E = x = 0
        }
        if (O[0] & 5) throw O[1];
        return {value: O[0] ? O[1] : void 0, done: !0}
    }
}, __importDefault = commonjsGlobal && commonjsGlobal.__importDefault || function (r) {
    return r && r.__esModule ? r : {default: r}
};
Object.defineProperty(useWebsocket, "__esModule", {value: !0});
useWebsocket.useWebSocket = void 0;
var react_1$2 = _global_React, react_dom_1 = _global_ReactDOM, constants_1$2 = constants,
    create_or_join_1 = createOrJoin, get_url_1 = getUrl, proxy_1 = __importDefault(proxy), util_1 = util,
    useWebSocket$1 = function (r, R, y) {
        R === void 0 && (R = constants_1$2.DEFAULT_OPTIONS), y === void 0 && (y = !0);
        var E = (0, react_1$2.useState)(null), C = E[0], x = E[1], B = (0, react_1$2.useState)({}), N = B[0], L = B[1],
            O = (0, react_1$2.useMemo)(function () {
                if (C) try {
                    return JSON.parse(C.data)
                } catch {
                    return constants_1$2.UNPARSABLE_JSON_OBJECT
                }
                return null
            }, [C]), D = (0, react_1$2.useRef)(null), z = (0, react_1$2.useRef)(null),
            F = (0, react_1$2.useRef)(function () {
            }), _e = (0, react_1$2.useRef)(0), Y = (0, react_1$2.useRef)([]), H = (0, react_1$2.useRef)(null),
            me = (0, react_1$2.useRef)(R);
        me.current = R;
        var ce = D.current && N[D.current] !== void 0 ? N[D.current] : r !== null && y === !0 ? constants_1$2.ReadyState.CONNECTING : constants_1$2.ReadyState.UNINSTANTIATED,
            ie = R.queryParams ? JSON.stringify(R.queryParams) : null,
            Be = (0, react_1$2.useCallback)(function (Ce, Ne) {
                var we;
                if (Ne === void 0 && (Ne = !0), constants_1$2.isEventSourceSupported && z.current instanceof EventSource) {
                    console.warn("Unable to send a message from an eventSource");
                    return
                }
                ((we = z.current) === null || we === void 0 ? void 0 : we.readyState) === constants_1$2.ReadyState.OPEN ? ((0, util_1.assertIsWebSocket)(z.current, me.current.skipAssert), z.current.send(Ce)) : Ne && Y.current.push(Ce)
            }, []), ve = (0, react_1$2.useCallback)(function (Ce, Ne) {
                Ne === void 0 && (Ne = !0), Be(JSON.stringify(Ce), Ne)
            }, [Be]), Re = (0, react_1$2.useCallback)(function () {
                return me.current.share !== !0 || constants_1$2.isEventSourceSupported && z.current instanceof EventSource ? z.current : (H.current === null && z.current && ((0, util_1.assertIsWebSocket)(z.current, me.current.skipAssert), H.current = (0, proxy_1.default)(z.current, F)), H.current)
            }, []);
        return (0, react_1$2.useEffect)(function () {
            if (r !== null && y === !0) {
                var Ce, Ne = !1, we = !0, Me = function () {
                    return __awaiter(void 0, void 0, void 0, function () {
                        var ke, Fe, $e;
                        return __generator(this, function (Ve) {
                            switch (Ve.label) {
                                case 0:
                                    return ke = D, [4, (0, get_url_1.getUrl)(r, me)];
                                case 1:
                                    return ke.current = Ve.sent(), D.current === null ? (console.error("Failed to get a valid URL. WebSocket connection aborted."), D.current = "ABORTED", (0, react_dom_1.flushSync)(function () {
                                        return L(function (Je) {
                                            return __assign$2(__assign$2({}, Je), {ABORTED: constants_1$2.ReadyState.CLOSED})
                                        })
                                    }), [2]) : (Fe = function (Je) {
                                        Ne || (0, react_dom_1.flushSync)(function () {
                                            return x(Je)
                                        })
                                    }, $e = function (Je) {
                                        Ne || (0, react_dom_1.flushSync)(function () {
                                            return L(function (Qe) {
                                                var Ze;
                                                return __assign$2(__assign$2({}, Qe), D.current && (Ze = {}, Ze[D.current] = Je, Ze))
                                            })
                                        })
                                    }, we && (Ce = (0, create_or_join_1.createOrJoinSocket)(z, D.current, $e, me, Fe, F, _e, Be)), [2])
                            }
                        })
                    })
                };
                return F.current = function () {
                    Ne || (H.current && (H.current = null), Ce == null || Ce(), Me())
                }, Me(), function () {
                    Ne = !0, we = !1, H.current && (H.current = null), Ce == null || Ce(), x(null)
                }
            } else (r === null || y === !1) && (_e.current = 0, L(function (ke) {
                var Fe;
                return __assign$2(__assign$2({}, ke), D.current && (Fe = {}, Fe[D.current] = constants_1$2.ReadyState.CLOSED, Fe))
            }))
        }, [r, y, ie, Be]), (0, react_1$2.useEffect)(function () {
            ce === constants_1$2.ReadyState.OPEN && Y.current.splice(0).forEach(function (Ce) {
                Be(Ce)
            })
        }, [ce]), {
            sendMessage: Be,
            sendJsonMessage: ve,
            lastMessage: C,
            lastJsonMessage: O,
            readyState: ce,
            getWebSocket: Re
        }
    };
useWebsocket.useWebSocket = useWebSocket$1;
var useSocketIo = {}, __assign$1 = commonjsGlobal && commonjsGlobal.__assign || function () {
    return __assign$1 = Object.assign || function (r) {
        for (var R, y = 1, E = arguments.length; y < E; y++) {
            R = arguments[y];
            for (var C in R) Object.prototype.hasOwnProperty.call(R, C) && (r[C] = R[C])
        }
        return r
    }, __assign$1.apply(this, arguments)
};
Object.defineProperty(useSocketIo, "__esModule", {value: !0});
useSocketIo.useSocketIO = void 0;
var react_1$1 = _global_React, use_websocket_1$1 = useWebsocket, constants_1$1 = constants,
    emptyEvent = {type: "empty", payload: null}, getSocketData = function (r) {
        if (!r || !r.data) return emptyEvent;
        var R = r.data.match(/\[.*]/);
        if (!R) return emptyEvent;
        var y = JSON.parse(R);
        return !Array.isArray(y) || !y[1] ? emptyEvent : {type: y[0], payload: y[1]}
    }, useSocketIO = function (r, R, y) {
        R === void 0 && (R = constants_1$1.DEFAULT_OPTIONS), y === void 0 && (y = !0);
        var E = (0, react_1$1.useMemo)(function () {
                return __assign$1(__assign$1({}, R), {fromSocketIO: !0})
            }, []), C = (0, use_websocket_1$1.useWebSocket)(r, E, y), x = C.sendMessage, B = C.sendJsonMessage,
            N = C.lastMessage, L = C.readyState, O = C.getWebSocket, D = (0, react_1$1.useMemo)(function () {
                return getSocketData(N)
            }, [N]);
        return {sendMessage: x, sendJsonMessage: B, lastMessage: D, lastJsonMessage: D, readyState: L, getWebSocket: O}
    };
useSocketIo.useSocketIO = useSocketIO;
var useEventSource$1 = {}, __assign = commonjsGlobal && commonjsGlobal.__assign || function () {
    return __assign = Object.assign || function (r) {
        for (var R, y = 1, E = arguments.length; y < E; y++) {
            R = arguments[y];
            for (var C in R) Object.prototype.hasOwnProperty.call(R, C) && (r[C] = R[C])
        }
        return r
    }, __assign.apply(this, arguments)
}, __rest = commonjsGlobal && commonjsGlobal.__rest || function (r, R) {
    var y = {};
    for (var E in r) Object.prototype.hasOwnProperty.call(r, E) && R.indexOf(E) < 0 && (y[E] = r[E]);
    if (r != null && typeof Object.getOwnPropertySymbols == "function") for (var C = 0, E = Object.getOwnPropertySymbols(r); C < E.length; C++) R.indexOf(E[C]) < 0 && Object.prototype.propertyIsEnumerable.call(r, E[C]) && (y[E[C]] = r[E[C]]);
    return y
};
Object.defineProperty(useEventSource$1, "__esModule", {value: !0});
useEventSource$1.useEventSource = void 0;
var react_1 = _global_React, use_websocket_1 = useWebsocket, constants_1 = constants,
    useEventSource = function (r, R, y) {
        R === void 0 && (R = constants_1.DEFAULT_EVENT_SOURCE_OPTIONS);
        var E = R.withCredentials, C = R.events, x = __rest(R, ["withCredentials", "events"]);
        y === void 0 && (y = !0);
        var B = __assign(__assign({}, x), {eventSourceOptions: {withCredentials: E}}),
            N = (0, react_1.useRef)(constants_1.EMPTY_EVENT_HANDLERS);
        C && (N.current = C);
        var L = (0, use_websocket_1.useWebSocket)(r, B, y), O = L.lastMessage, D = L.readyState, z = L.getWebSocket;
        return (0, react_1.useEffect)(function () {
            O != null && O.type && Object.entries(N.current).forEach(function (F) {
                var _e = F[0], Y = F[1];
                _e === O.type && Y(O)
            })
        }, [O]), {lastEvent: O, readyState: D, getEventSource: z}
    };
useEventSource$1.useEventSource = useEventSource;
(function (r) {
    Object.defineProperty(r, "__esModule", {value: !0}), r.resetGlobalState = r.useEventSource = r.ReadyState = r.useSocketIO = r.default = void 0;
    var R = useWebsocket;
    Object.defineProperty(r, "default", {
        enumerable: !0, get: function () {
            return R.useWebSocket
        }
    });
    var y = useSocketIo;
    Object.defineProperty(r, "useSocketIO", {
        enumerable: !0, get: function () {
            return y.useSocketIO
        }
    });
    var E = constants;
    Object.defineProperty(r, "ReadyState", {
        enumerable: !0, get: function () {
            return E.ReadyState
        }
    });
    var C = useEventSource$1;
    Object.defineProperty(r, "useEventSource", {
        enumerable: !0, get: function () {
            return C.useEventSource
        }
    });
    var x = util;
    Object.defineProperty(r, "resetGlobalState", {
        enumerable: !0, get: function () {
            return x.resetGlobalState
        }
    })
})(dist);
const useWebSocket = getDefaultExportFromCjs(dist), PRINTER_PORT = 47080, printerStateMapper = {
    [PrinterState.NORMAL]: "normal",
    [PrinterState.PAPER_JAM]: "paper jam",
    [PrinterState.NOT_CONNECTED]: "not connected",
    [PrinterState.UNAVAILABLE_PLAYER]: "unavailable player"
}, paperStateMapper = {
    [PaperState.PLENTY_OF_PAPER]: "plenty of paper",
    [PaperState.LOW_ON_PAPER]: "low on paper",
    [PaperState.EMPTY_OF_PAPER]: "empty of paper"
}, PrinterResponseErrorCodeMapper = {
    [PrinterResponseErrorCode.SUCCESS]: "Success",
    [PrinterResponseErrorCode.INVALID_MESSAGE_FORMAT]: "Invalid message format",
    [PrinterResponseErrorCode.UNSUPPORTED_OPERATION]: "Unsupported operation",
    [PrinterResponseErrorCode.MISSING_REQUIRED_KEY_OP_CODE]: "Missing required key “op_code”",
    [PrinterResponseErrorCode.MISSING_REQUIRED_KEY_SC]: "Missing required key “sc”",
    [PrinterResponseErrorCode.INVALID_DATA_FORMAT_FOR_SC]: "Value in the “sc” key must be in array format",
    [PrinterResponseErrorCode.INVALUE_VALUE_FOR_SC]: "Invalid value in the “sc” key",
    [PrinterResponseErrorCode.CLIENT_INTERNAL_ERROR]: "Client internal error",
    [PrinterResponseErrorCode.PRINTER_IS_NOT_CONNECTED]: "Printer is not connected",
    [PrinterResponseErrorCode.PRINTER_JAM]: "Paper jam",
    [PrinterResponseErrorCode.EMPTY_OF_PAPER]: "Empty of paper",
    [PrinterResponseErrorCode.PRINTER_INTERNAL_ERROR]: "Printer internal error"
}, getPrinterErrorMessage = r => {
    let R, y;
    return "paper_state" in r &&
            "printer_state" in r &&
            (R = paperStateMapper[r.paper_state], y = printerStateMapper[r.printer_state]),
            !R &&
            !y ? `${PrinterResponseErrorCodeMapper[r.error_code]}[Squeezer]` : `Printer is ${y} and ${R}`
}, usePrinterConnection = () => {
    const {preloadConfig: r} = React.useContext(ServerConfigContext),
        {gameTableInfo: R} = React.useContext(GameTableContext),
        [y] = React.useContext(UserInfoContext),
        [E] = React.useState(r != null && r.whiteLabel.isSupportSqueezer &&
        !isMobile$1 ? `ws://localhost:${PRINTER_PORT}` : null),
        {getPrinterMessageRequestGC01: C} = usePrinterMessageRequest(), {
        sendMessage: x,
        lastMessage: B,
        readyState: N
    } = useWebSocket(E, {
        share: !0, onOpen: () => {
            Logger$1.log("On Open: send msg"), x(JSON.stringify(C({
                playerId: String(y.player.userId),
                table: R.tableInfo.tableName
            })))
        }
    });
    return React.useEffect(() => {
        if (!B) return;
        const L = JSON.parse(B.data);
        let O = getPrinterErrorMessage(L.response);
        switch (L.op_code) {
            case"GC01":
                Jt(O);
            case"GC02":
                if (L.response.error_code === PrinterResponseErrorCode.SUCCESS)
                    return;
                Jt(O);
                break
        }
    }, [B]), {readyState: N, lastMessage: B, sendMessage: x}
}, CardTypeMapper = {1: "S", 2: "H", 3: "C", 4: "D"}, CardNumberMapper = {
    "01": "1",
    "02": "2",
    "03": "3",
    "04": "4",
    "05": "5",
    "06": "6",
    "07": "7",
    "08": "8",
    "09": "9",
    10: "0",
    11: "J",
    12: "Q",
    13: "K"
}, getCardFormatForPrinter = r => {
    if (!r) return;
    const R = r.slice(0, 1), y = r.slice(1);
    return `${CardNumberMapper[y]}${CardTypeMapper[R]}`
}, useSendPrinterMessageRequest = () => {
    const {gameTableInfo: r} = React.useContext(GameTableContext), [R] = React.useContext(UserInfoContext),
        y = React.useContext(GameTableBetAmountContext), {getPrinterMessageRequestGC02: E} = usePrinterMessageRequest(), {sendMessage: C} = usePrinterConnection(),
        x = r.tableInfo.tableName;
    return {
        sendPrinterRequestGC02: React.useCallback(({
                                                       bankerCards: N,
                                                       playerCards: L,
                                                       bSeeIndexes: O,
                                                       pSeeIndexes: D,
                                                       dealsType: z,
                                                       onSend: F
                                                   }) => {
            let _e = [], Y;
            if (y[BACCARAT_BET_TYPE.BANKER] && O.length > 0 && (O.forEach(me => {
                _e.push(N[me])
            }), Y = "banker"), y[BACCARAT_BET_TYPE.PLAYER] && D.length > 0 && (D.forEach(me => {
                _e.push(L[me])
            }), Y = "player"), y[BACCARAT_BET_TYPE.BANKER] && y[BACCARAT_BET_TYPE.PLAYER] && (_e = []), _e = _e.map(getCardFormatForPrinter).filter(me => me !== void 0), _e.length === 0) return;
            const H = E({sc: _e, place: Y, playerId: String(R.player.userId), dealsType: z, table: x});
            C(JSON.stringify(H)), F && F()
        }, [y, R.player.userId, E, C])
    }
}, PrintCard = ({disable: r, bankerCards: R = [], playerCards: y = [], bSeeIndexes: E = [], pSeeIndexes: C = []}) => {
    const {sendPrinterRequestGC02: x} = useSendPrinterMessageRequest(), B = React.useRef({});
    return React.useEffect(() => {
        if (r) return;
        (R.length === 0 || y.length === 0) && (B.current = {});
        const N = R.length + y.length === 4 ? 0 : C.length > 0 && E.length > 0 ? 3 : E.length > 0 ? 2 : 1;
        B.current[N] || x({
            bankerCards: R,
            playerCards: y,
            bSeeIndexes: E,
            pSeeIndexes: C,
            dealsType: N === 0 ? "INITIAL" : "EXTRA",
            onSend: () => B.current[N] = 1
        })
    }, [R, y, E, C, B.current, x]), null
}, SeePanel = r => {
    const {
            gameStatus: R,
            countDown: y
        } = React.useContext(GameTableStatusContext), {orientation: E} = useDeviceOrientation(), {
            seeingSide: C,
            setSeeingSide: x,
            rotateCard: B,
            onOpenedCard: N,
            playerCardsOrientation: L,
            bankerCardsOrientation: O,
            openedPlayerCards: D,
            setOpenedPlayerCards: z,
            openedBankerCards: F,
            setOpenedBankerCards: _e,
            seeingCardIndex: Y,
            setSeeingCardIndex: H
        } = React.useContext(SeeCardContext),
        me = r.betAmounts[BACCARAT_BET_TYPE.BANKER] || r.betAmounts[BACCARAT_BET_TYPE.BANKER_NO_COMM] || r.betAmounts[BACCARAT_BET_TYPE.PLAYER],
        ce = r.playerCards.length === 2 && r.bankerCards.length === 2 ? [0, 1] : [TableStatus.BoPCard, TableStatus.BoCard].includes(R.tableStatus) || R.tableStatus === TableStatus.BetOver && r.playerCards.length === 3 ? [2] : [],
        ie = r.bankerCards.length === 2 && r.playerCards.length === 2 ? [0, 1] : [TableStatus.BoBCard, TableStatus.BoCard].includes(R.tableStatus) || R.tableStatus === TableStatus.BetOver && r.bankerCards.length === 3 ? [2] : [],
        Be = !me || !r.printCards;
    if (r.panelState === PANEL_STATE.CLOSED) return null;
    const ve = (Re, Ce) => {
        H(Re), x(Ce)
    };
    return jsxs("section", {
        className: `see_panel ${PANEL_STATE[r.panelState].toLowerCase()}`,
        children: [!Be && jsx(PrintCard, {
            disable: Be,
            bankerCards: r.bankerCards,
            playerCards: r.playerCards,
            bSeeIndexes: ie,
            pSeeIndexes: ce
        }), me ? isMobile$1 && E.includes("portrait") ? jsxs("article", {
            className: C, children: [jsxs("section", {
                className: "thumbnail_cards",
                children: [jsxs("div", {
                    className: "card_container player",
                    children: [jsx(SeeBaccaratGameResults, {
                        side: "player",
                        results: r.playerCards.map((Re, Ce) => D[Ce] ? Re : "-2"),
                        onClickCard: Re => !D[Re] && ve(Re, SEEING_SIDE.PLAYER)
                    }), jsxs("div", {children: [jsx("div", {children: "P"}), jsx("div", {children: r.playerCards.reduce((Re, Ce, Ne) => Re + (D[Ne] && parseInt(Ce) % 100 >= 0 ? parseInt(Ce) % 100 > 10 ? 10 : parseInt(Ce) % 100 : 0), 0) % 10})]})]
                }), jsx("div", {}), jsxs("div", {
                    className: "card_container banker",
                    children: [jsxs("div", {children: [jsx("div", {children: "B"}), jsx("div", {children: r.bankerCards.reduce((Re, Ce, Ne) => Re + (F[Ne] && parseInt(Ce) % 100 >= 0 ? parseInt(Ce) % 100 > 10 ? 10 : parseInt(Ce) % 100 : 0), 0) % 10})]}), jsx(SeeBaccaratGameResults, {
                        side: "banker",
                        results: r.bankerCards.map((Re, Ce) => F[Ce] ? Re : "-2"),
                        onClickCard: Re => !F[Re] && ve(Re, SEEING_SIDE.BANKER)
                    })]
                }), jsx("button", {
                    className: "reveal player",
                    "aria-disabled": D.filter(Re => Re).length === r.playerCards.length,
                    onClick: () => {
                        z(r.playerCards.map(Re => !0)), r.openVipCards && r.openVipCards(r.playerCards.map((Re, Ce) => Ce + 4))
                    },
                    children: jsx("div", {className: "svg_reveal_card"})
                }), jsx("div", {}), jsx("button", {
                    className: "reveal banker",
                    "aria-disabled": F.filter(Re => Re).length === r.bankerCards.length,
                    onClick: () => {
                        _e(r.bankerCards.map(Re => !0)), r.openVipCards && r.openVipCards(r.bankerCards.map((Re, Ce) => Ce + 1))
                    },
                    children: jsx("div", {className: "svg_reveal_card"})
                })]
            }), jsx("div", {
                className: "poker_container",
                "aria-orientation": (C === SEEING_SIDE.PLAYER ? L : O)[Y] === CARD_ORIENTATION.PORTRAIT ? "vertical" : "horizontal",
                children: jsx(PokerFlipper, {
                    onRotate: () => B(C, Y),
                    opened: (C === SEEING_SIDE.PLAYER ? D : F)[Y],
                    onOpenedCard: () => N(C, Y),
                    cardValue: parseInt((C === SEEING_SIDE.PLAYER ? r.playerCards : r.bankerCards)[Y]),
                    vipOpendCard: () => r.openVipCards && r.openVipCards([Y + (C === "banker" ? 1 : 4)]),
                    children: jsx(Poker, {
                        rotated: (C === SEEING_SIDE.PLAYER ? L : O)[Y] === CARD_ORIENTATION.LANDSCAPE,
                        cardValue: parseInt((C === SEEING_SIDE.PLAYER ? r.playerCards : r.bankerCards)[Y])
                    })
                })
            })]
        }) : jsxs(Fragment, {
            children: [jsxs("article", {
                className: "player",
                children: [jsxs("div", {
                    className: "cards",
                    children: [jsx("div", {
                        className: "watermark",
                        children: "P"
                    }), ce.map(Re => jsx("div", {
                        className: `poker_container card_${Re}`,
                        "aria-orientation": L[Re] === CARD_ORIENTATION.PORTRAIT ? "vertical" : "horizontal",
                        children: jsx(PokerFlipper, {
                            onRotate: () => B("player", Re),
                            opened: D[Re],
                            onOpenedCard: () => N("player", Re),
                            cardValue: parseInt(r.playerCards[Re]),
                            vipOpendCard: () => r.openVipCards && r.openVipCards([Re + 4]),
                            children: jsx(Poker, {
                                rotated: L[Re] === CARD_ORIENTATION.LANDSCAPE,
                                cardValue: parseInt(r.playerCards[Re])
                            })
                        })
                    }, Re))]
                }), jsx("button", {
                    onClick: () => {
                        z(r.playerCards.map(Re => !0)), r.openVipCards && r.openVipCards(r.playerCards.map((Re, Ce) => Ce + 4))
                    },
                    "aria-hidden": r.playerCards.every((Re, Ce) => D[Ce]),
                    children: jsx("div", {className: "svg_reveal_card"})
                })]
            }), jsxs("article", {
                className: "banker",
                children: [jsxs("div", {
                    className: "cards",
                    children: [jsx("div", {
                        className: "watermark",
                        children: "B"
                    }), ie.map(Re => jsx("div", {
                        className: `poker_container card_${Re}`,
                        "aria-orientation": O[Re] === CARD_ORIENTATION.PORTRAIT ? "vertical" : "horizontal",
                        children: jsx(PokerFlipper, {
                            onRotate: () => B("banker", Re),
                            opened: F[Re],
                            onOpenedCard: () => N("banker", Re),
                            cardValue: parseInt(r.bankerCards[Re]),
                            vipOpendCard: () => r.openVipCards && r.openVipCards([Re + 1]),
                            children: jsx(Poker, {
                                rotated: O[Re] === CARD_ORIENTATION.LANDSCAPE,
                                cardValue: parseInt(r.bankerCards[Re])
                            })
                        })
                    }, Re))]
                }), jsx("button", {
                    onClick: () => {
                        _e(r.bankerCards.map(Re => !0)), r.openVipCards && r.openVipCards(r.bankerCards.map((Re, Ce) => Ce + 1))
                    },
                    "aria-hidden": r.bankerCards.every((Re, Ce) => F[Ce]),
                    children: jsx("div", {className: "svg_reveal_card"})
                })]
            })]
        }) : void 0, jsx(Timer, {
            duration: y.dynamicCountDown,
            size: isMobile$1 && E.includes("portrait") ? 48 : 100,
            thickness: isMobile$1 && E.includes("portrait") ? 2 : 6,
            timestamp: y.timestamp,
            playSound: !0,
            labelClass: "gametable_timer_label"
        })]
    })
}, RoadMapMovedContext$4 = React.createContext(!1), AskingRoadContext$4 = React.createContext(""), useVipOwner = () => {
    var B;
    const {gameTableInfo: r} = React.useContext(GameTableContext), [R] = React.useContext(UserInfoContext), [y, E] = React.useState(!1), [C, x] = React.useState(((B = r.tableInfo.additionalTableInfo) == null ? void 0 : B.vipTableReserveStatus) === VipTableStatus.Reserved);
    return React.useEffect(() => {
        if (r.tableInfo.additionalTableInfo) {
            let N = r.tableInfo.additionalTableInfo;
            E(N.vipTableOwner === R.player.userId), x(N.vipTableReserveStatus === VipTableStatus.Reserved)
        } else E(!1), x(!1)
    }, [r.tableInfo.additionalTableInfo]), {isOwner: y, isReserved: C}
}, VipBaccaratGameTable = () => {
    var zt, oa, sa;
    const {t: r} = useTranslation(), {
            gameTableInfo: R,
            getUpdatedBetStatistics: y
        } = React.useContext(GameTableContext), {
            setPlayerAction: E,
            openVipCards: C
        } = React.useContext(SFSCoreContext), {gameStatus: x} = React.useContext(GameTableStatusContext), {addMessage: B} = React.useContext(ToastContext), {
            play: N,
            sound: L
        } = React.useContext(SoundContext), O = React.useContext(GameTableBetStateContext),
        D = React.useContext(GameTableBetAmountContext), {
            orientation: z,
            isForceLandscape: F
        } = useDeviceOrientation(), [_e, Y] = React.useState(""), [H, me] = React.useState([]), [ce, ie] = React.useState([]), {
            seeingSide: Be,
            setSeeingSide: ve,
            rotateCard: Re,
            onOpenedCard: Ce,
            playerCardsOrientation: Ne,
            bankerCardsOrientation: we,
            openedPlayerCards: Me,
            setOpenedPlayerCards: ke,
            openedBankerCards: Fe,
            setOpenedBankerCards: $e,
            seeingCardIndex: Ve,
            setSeeingCardIndex: Je,
            panelState: Qe,
            setPanelState: Ze
        } = useSeeCard(H, ce, D, GameType.VIP), [qe, ze] = React.useState(Array(4).fill({
            people: 0,
            amounts: 0
        })), [De, Xe] = React.useState(!1), {isOwner: He, isReserved: Ge} = useVipOwner(), [Le, We] = React.useState(!1),
        dt = React.useRef(-1),
        et = useRoadMap(R.tableInfo.tableId, R.tableInfo.currentShoeGameResult, parseBaccaratRoadData), [nt, tt] = React.useState(""),
        lt = React.useRef(null), Bt = useRoadMovedListener(lt), kt = React.useMemo(() => {
            let vt = et.join("").replace(/[\drbG]/g, "").match(REGEX.GROUP_SIDE);
            return vt ? vt.reduce((ea, _a) => (ea.push({side: _a[0], wins: _a.length}), ea), []) : []
        }, [et]);
    React.useEffect(() => {
        me([]), ie([])
    }, [R.tableInfo.tableId]), React.useEffect(() => {
        if (R.tableInfo.tableId !== -1) {
            let vt = y();
            vt ? (vt[BACCARAT_BET_TYPE.BANKER].people += vt[BACCARAT_BET_TYPE.BANKER_NO_COMM].people, vt[BACCARAT_BET_TYPE.BANKER].amounts += vt[BACCARAT_BET_TYPE.BANKER_NO_COMM].amounts, vt = vt.filter((ea, _a) => [0, 1, 2].includes(_a))) : vt = qe.map(ea => ({
                people: 0,
                amounts: 0
            })), JSON.stringify(vt) !== JSON.stringify(qe) && ze(vt)
        }
    }, [R]), React.useEffect(() => {
        if (x.tableId !== -1) {
            if (x.rawGameResult) {
                if (JSON.stringify(x.rawGameResult[0]) !== JSON.stringify(ce) && (x.rawGameResult[0].some(vt => vt !== "-2") && N({id: "card_flip"}), ie(x.rawGameResult[0].slice())), JSON.stringify(x.rawGameResult[1]) !== JSON.stringify(H)) {
                    x.rawGameResult[1].some(ea => ea !== "-2") && N({id: "card_flip"});
                    let vt = x.rawGameResult[1].slice();
                    me(vt)
                }
            } else O === BET_STATE.BETTING && (me([]), ie([]));
            if (x.currentGameRoundWinResult) {
                let vt = x.currentGameRoundWinResult[0][0];
                if (vt === "-1") Y(""); else {
                    const ea = {0: r("bet_type.1003"), 1: r("bet_type.1001"), 2: r("bet_type.1002")},
                        _a = {0: TOAST_COLOR.GREEN, 1: TOAST_COLOR.RED, 2: TOAST_COLOR.BLUE};
                    Y(vt), B(ea[vt[0]], _a[vt[0]], 4), (async () => {
                        switch (N({id: `banker_${vt[1]}`}), await new Promise(na => setTimeout(na, L.sound._sprite[`banker_${vt[1]}`][1] + 250)), N({id: `player_${vt[2]}`}), await new Promise(na => setTimeout(na, L.sound._sprite[`player_${vt[2]}`][1] + 250)), vt[0]) {
                            case"0":
                                N({id: "tie"});
                                break;
                            case"1":
                                N({id: "banker_win"});
                                break;
                            case"2":
                                N({id: "player_win"});
                                break
                        }
                    })()
                }
            }
        }
    }, [x, O]), React.useEffect(() => {
        var vt;
        switch (O) {
            case BET_STATE.NO_BET:
                window.clearTimeout(dt.current), We(!1);
                break;
            case BET_STATE.BETTING:
                Xe(!1), window.clearTimeout(dt.current), (vt = R.tableInfo.additionalTableInfo) != null && vt.vipTableBufferTime && (We(!0), setTimeout(() => We(!1), R.tableInfo.additionalTableInfo.vipTableBufferTime * 1e3));
                break
        }
    }, [O]), React.useEffect(() => {
        var vt, ea;
        if ((vt = R.vipInfo) != null && vt.brandsId && !He) {
            const _a = (ea = R.vipInfo) == null ? void 0 : ea.brandsId;
            $e(ce.map((ta, na) => _a.includes(na + 1))), ke(H.map((ta, na) => _a.includes(na + 4)))
        }
    }, [R.vipInfo, He]);
    const At = (vt, ea) => {
        tt(nt !== vt ? vt : "")
    };
    return React.useEffect(() => {
        Qe === PANEL_STATE.OPEN && (D[BACCARAT_BET_TYPE.BANKER] || D[BACCARAT_BET_TYPE.BANKER_NO_COMM]) && D[BACCARAT_BET_TYPE.PLAYER] && Ze(PANEL_STATE.CLOSED)
    }, [Qe, D]), jsxs(Fragment, {
        children: [jsxs(AskingRoadContext$4.Provider, {
            value: nt, children: [jsxs(SeeCardContext.Provider, {
                value: {
                    seeingSide: Be,
                    setSeeingSide: ve,
                    rotateCard: Re,
                    onOpenedCard: Ce,
                    playerCardsOrientation: Ne,
                    bankerCardsOrientation: we,
                    openedPlayerCards: Me,
                    setOpenedPlayerCards: ke,
                    openedBankerCards: Fe,
                    setOpenedBankerCards: $e,
                    seeingCardIndex: Ve,
                    setSeeingCardIndex: Je,
                    panelState: Qe
                },
                children: [He && jsx(SeePanel, {
                    panelState: Qe,
                    betAmounts: D,
                    playerCards: H,
                    bankerCards: ce,
                    openVipCards: C
                }), Ge && jsx("div", {
                    className: `svg_vip_${He ? "owner" : "reserved"}`,
                    children: jsx(Tooltip, {
                        className: "vip_tooltip",
                        children: r(He ? "game_table.vip.owner_tooltip" : "game_table.vip.reserved_tooltip")
                    })
                }), isMobile$1 && ((zt = R.tableInfo.additionalTableInfo) == null ? void 0 : zt.vipTableReserveStatus) !== VipTableStatus.Reserved && jsx("div", {
                    className: "reserve_info",
                    children: ((oa = R.vipInfo) == null ? void 0 : oa.limits) && jsxs("div", {children: [jsx("div", {children: r("game_table.vip.reserve_betlimit")}), jsx("div", {children: `${Helper.formatAbbrMoney(R.vipInfo.limits.betLimitLow)} - ${Helper.formatAbbrMoney(R.vipInfo.limits.betLimitHigh)}`}), jsx("div", {children: r("game_table.vip.reserve_min_enter")}), jsx("div", {children: `${Helper.formatAbbrMoney(R.vipInfo.limits.enterLimit[0] / 100)}`})]})
                }), !F && jsx("div", {
                    id: "road_stats",
                    children: jsx(VipBaccaratRoadStatistics, {roadMap: et, onAsk: At, bigRoadConsecutiveList: kt})
                }), isMobile$1 && z.includes("short-portrait") && jsx(RoadMapMovedContext$4.Provider, {
                    value: Bt,
                    children: jsxs("div", {
                        id: "roads_list",
                        ref: lt,
                        children: [jsx(VipBaccaratBeadRoad, {
                            size: {x: 23, y: 6},
                            roadMap: et
                        }), jsx(VipBaccaratDetailedRoads, {roadMap: et, onAsk: At, bigRoadConsecutiveList: kt})]
                    })
                }), jsxs("div", {
                    id: "bet_area",
                    children: [jsx(GameTableName, {}), jsx(VipBaccaratBetTable, {
                        betStatistics: qe,
                        roadMap: et,
                        playerCards: H,
                        bankerCards: ce,
                        winResult: _e
                    })]
                }), (isDesktop$1 || !z.includes("short-portrait")) && jsxs(Fragment, {
                    children: [jsx("div", {
                        id: "bead_road",
                        children: jsx(VipBaccaratBeadRoad, {
                            size: {
                                x: isDesktop$1 ? 16 : z === "small-landscape" ? 11 : 23,
                                y: 6
                            }, roadMap: et
                        })
                    }), jsx("div", {
                        id: "detailed_road",
                        children: jsx(VipBaccaratDetailedRoads, {roadMap: et, onAsk: At, bigRoadConsecutiveList: kt})
                    })]
                })]
            }), jsxs("div", {
                className: "vip_buttons",
                children: [!Ge && jsxs("button", {
                    onClick: () => E(R.tableInfo.tableId, void 0, PLAYER_ACTION.VIP_RESERVE, GameType.VIP),
                    children: [jsx("div", {className: "svg_vip_reserve_table"}), jsx(Tooltip, {
                        className: "vip_tooltip",
                        children: jsxs("div", {
                            className: "reserve_info",
                            children: [jsx("div", {children: r("game_table.vip.reserve_action_tooltip")}), ((sa = R.vipInfo) == null ? void 0 : sa.limits) && jsxs("div", {children: [jsx("div", {children: r("game_table.vip.reserve_betlimit")}), jsx("div", {children: `${Helper.formatAbbrMoney(R.vipInfo.limits.betLimitLow)} - ${Helper.formatAbbrMoney(R.vipInfo.limits.betLimitHigh)}`}), jsx("div", {children: r("game_table.vip.reserve_min_enter")}), jsx("div", {children: `${Helper.formatAbbrMoney(R.vipInfo.limits.enterLimit[0] / 100)}`})]})]
                        })
                    })]
                }), He && !Le && O === BET_STATE.BETTING && Object.values(D).every(vt => !vt) && jsxs("button", {
                    onClick: () => E(R.tableInfo.tableId, void 0, PLAYER_ACTION.VIP_SKIP, GameType.VIP),
                    children: [jsx("div", {className: "svg_vip_skip"}), jsx(Tooltip, {
                        className: "vip_tooltip",
                        children: r("game_table.vip.skip_tooltip")
                    })]
                }), He && !Le && O === BET_STATE.BETTING && Object.values(D).some(vt => vt) && jsxs("button", {
                    onClick: () => E(R.tableInfo.tableId, void 0, PLAYER_ACTION.VIP_START, GameType.VIP),
                    children: [jsx("div", {className: "svg_vip_start"}), jsx(Tooltip, {
                        className: "vip_tooltip",
                        children: r("game_table.vip.start_tooltip")
                    })]
                }), He && et.length >= 30 && !De && O === BET_STATE.BETTING && jsxs("button", {
                    children: [jsx("div", {
                        className: "svg_vip_shuffle",
                        onClick: () => {
                            O === BET_STATE.BETTING && (E(R.tableInfo.tableId, void 0, PLAYER_ACTION.VIP_SHUFFLE, GameType.VIP), Xe(!0))
                        }
                    }), jsx(Tooltip, {className: "vip_tooltip", children: r("game_table.vip.shuffle_tooltip")})]
                })]
            })]
        }), jsx(BaccaratPlayType, {}), isMobile$1 && jsx(CommissionToggle, {})]
    })
}, BullBullPlayType$1 = "", Responsive$u = "", PLAY_TYPE = ["equal", "double", "super"], BullBullPlayType = r => {
    const {
            settings: R,
            changeSetting: y
        } = React.useContext(SettingsContext), {t: E} = useTranslation(), [C, x] = React.useState(!1),
        B = useEasyClosePopup(() => x(!1)), [N, L] = React.useState([BB_PLAY_TYPE.EQUAL, BB_PLAY_TYPE.DOUBLE, BB_PLAY_TYPE.SUPER].filter(O => O !== R.bullbullPlayType));
    return React.useEffect(() => {
        L([BB_PLAY_TYPE.EQUAL, BB_PLAY_TYPE.DOUBLE, BB_PLAY_TYPE.SUPER].filter(O => O !== R.bullbullPlayType)), x(!1)
    }, [R.bullbullPlayType]), jsxs("div", {
        className: "bb_play_type",
        ref: B,
        children: [jsxs("button", {
            className: "selected",
            onClick: () => x(!C),
            "aria-checked": C,
            children: [E(`settings.bullbull.${PLAY_TYPE[R.bullbullPlayType]}`), jsx("div", {className: `svg_arrow_${r.direction === 0 ? "down" : "up"}_triangle`})]
        }), C && jsxs("div", {
            className: `play_type_options ${r.direction === 0 ? "downward" : "upward"}`,
            children: [jsxs("button", {
                onClick: () => y("bullbullPlayType", N[0 + r.direction]),
                children: [r.showIcon && PLAY_TYPE[N[0 + r.direction]] !== "equal" && jsx("div", {className: `svg_bull_${PLAY_TYPE[N[0 + r.direction]]}`}), E(`settings.bullbull.${PLAY_TYPE[N[0 + r.direction]]}`)]
            }), jsx("div", {className: "divider"}), jsxs("button", {
                onClick: () => y("bullbullPlayType", N[(1 + r.direction) % 2]),
                children: [r.showIcon && PLAY_TYPE[N[(1 + r.direction) % 2]] !== "equal" && jsx("div", {className: `svg_bull_${PLAY_TYPE[N[(1 + r.direction) % 2]]}`}), E(`settings.bullbull.${PLAY_TYPE[N[(1 + r.direction) % 2]]}`)]
            })]
        })]
    })
}, getUsername = (r, R = 0, y, E) => {
    var O, D;
    if (!r || !r.player) return null;
    const {suffix: C = "", player: x} = r, {nickname: B, userName: N} = x;
    let L = "";
    return (D = (O = y == null ? void 0 : y.whiteLabel) == null ? void 0 : O.usernameBlacklist) != null && D.includes(C) ? L = B : L = B.length > 0 ? B : N, R > 0 && L.length > R ? E === "nickname" ? L.substring(0, R) + "..." : E === "username" ? N.substring(0, R) + "..." : L.substring(0, R) + "..." : E ? E === "nickname" ? L : N : L
}, useUsername = (r = 0) => {
    const [R] = React.useContext(UserInfoContext), {preloadConfig: y} = React.useContext(ServerConfigContext),
        E = React.useMemo(() => getUsername(R, r, y, "username"), [R, y, r]),
        C = React.useMemo(() => getUsername(R, r, y, "nickname"), [R, y, r]),
        x = React.useMemo(() => getUsername(R, r, y), [R, y, r]), B = React.useMemo(() => getUsername(R, 0, y), [R, y]),
        N = React.useMemo(() => getUsername(R, 0, y, "username"), [R, y]);
    return {username: E, nickname: C, name: x, fullname: B, fullUsername: N}
}, statisticButton = "";
let keyCount = 0;

function atom(r, R) {
    const y = `atom${++keyCount}`, E = {
        toString() {
            return y
        }
    };
    return typeof r == "function" ? E.read = r : (E.init = r, E.read = defaultRead, E.write = defaultWrite), R && (E.write = R), E
}

function defaultRead(r) {
    return r(this)
}

function defaultWrite(r, R, y) {
    return R(this, typeof y == "function" ? y(r(this)) : y)
}

const isSelfAtom = (r, R) => r.unstable_is ? r.unstable_is(R) : R === r, hasInitialValue = r => "init" in r,
    isActuallyWritableAtom = r => !!r.write, CONTINUE_PROMISE = Symbol(""), PENDING = "pending",
    FULFILLED = "fulfilled", REJECTED = "rejected",
    isContinuablePromise = r => typeof r == "object" && r !== null && CONTINUE_PROMISE in r,
    continuablePromiseMap = new WeakMap, createContinuablePromise = (r, R, y) => {
        if (!continuablePromiseMap.has(r)) {
            let E;
            const C = new Promise((x, B) => {
                let N = r;
                const L = D => z => {
                    N === D && (C.status = FULFILLED, C.value = z, x(z), y())
                }, O = D => z => {
                    N === D && (C.status = REJECTED, C.reason = z, B(z), y())
                };
                r.then(L(r), O(r)), E = (D, z) => {
                    D && (continuablePromiseMap.set(D, C), N = D, D.then(L(D), O(D)), R(), R = z)
                }
            });
            C.status = PENDING, C[CONTINUE_PROMISE] = E, continuablePromiseMap.set(r, C)
        }
        return continuablePromiseMap.get(r)
    }, isPromiseLike$1 = r => typeof (r == null ? void 0 : r.then) == "function",
    isAtomStateInitialized = r => "v" in r || "e" in r, returnAtomValue = r => {
        if ("e" in r) throw r.e;
        return r.v
    }, getPendingContinuablePromise = r => {
        const R = r.v;
        return isContinuablePromise(R) && R.status === PENDING ? R : null
    }, addPendingContinuablePromiseToDependency = (r, R, y) => {
        y.p.has(r) || (y.p.add(r), R.then(() => {
            y.p.delete(r)
        }, () => {
            y.p.delete(r)
        }))
    }, addDependency = (r, R, y, E, C) => {
        var x;
        y.d.set(E, C.n);
        const B = getPendingContinuablePromise(y);
        B && addPendingContinuablePromiseToDependency(R, B, C), (x = C.m) == null || x.t.add(R), r && addPendingDependent(r, E, R)
    }, createPending = () => [new Map, new Map, new Set], addPendingAtom = (r, R, y) => {
        r[0].has(R) || r[0].set(R, new Set), r[1].set(R, y)
    }, addPendingDependent = (r, R, y) => {
        const E = r[0].get(R);
        E && E.add(y)
    }, getPendingDependents = (r, R) => r[0].get(R), addPendingFunction = (r, R) => {
        r[2].add(R)
    }, flushPending = r => {
        for (; r[1].size || r[2].size;) {
            r[0].clear();
            const R = new Set(r[1].values());
            r[1].clear();
            const y = new Set(r[2]);
            r[2].clear(), R.forEach(E => {
                var C;
                return (C = E.m) == null ? void 0 : C.l.forEach(x => x())
            }), y.forEach(E => E())
        }
    }, buildStore = r => {
        let R;
        const y = (H, me, ce, ie = () => {
        }, Be = () => {
        }) => {
            const ve = "v" in me, Re = me.v, Ce = getPendingContinuablePromise(me);
            if (isPromiseLike$1(ce)) if (Ce) Ce !== ce && (Ce[CONTINUE_PROMISE](ce, ie), ++me.n); else {
                const Ne = createContinuablePromise(ce, ie, Be);
                if (Ne.status === PENDING) for (const we of me.d.keys()) addPendingContinuablePromiseToDependency(H, Ne, r(we, me));
                me.v = Ne, delete me.e
            } else Ce && Ce[CONTINUE_PROMISE](Promise.resolve(ce), ie), me.v = ce, delete me.e;
            (!ve || !Object.is(Re, me.v)) && ++me.n
        }, E = (H, me, ce, ie) => {
            if (!(ie != null && ie(me)) && isAtomStateInitialized(ce) && (ce.m || Array.from(ce.d).every(([we, Me]) => E(H, we, r(we, ce), ie).n === Me))) return ce;
            ce.d.clear();
            let Be = !0;
            const ve = we => {
                if (isSelfAtom(me, we)) {
                    const ke = r(we, ce);
                    if (!isAtomStateInitialized(ke)) if (hasInitialValue(we)) y(we, ke, we.init); else throw new Error("no atom init");
                    return returnAtomValue(ke)
                }
                const Me = E(H, we, r(we, ce), ie);
                if (Be) addDependency(H, me, ce, we, Me); else {
                    const ke = createPending();
                    addDependency(ke, me, ce, we, Me), O(ke, me, ce), flushPending(ke)
                }
                return returnAtomValue(Me)
            };
            let Re, Ce;
            const Ne = {
                get signal() {
                    return Re || (Re = new AbortController), Re.signal
                }, get setSelf() {
                    return !Ce && isActuallyWritableAtom(me) && (Ce = (...we) => {
                        if (!Be) return L(me, ...we)
                    }), Ce
                }
            };
            try {
                const we = me.read(ve, Ne);
                return y(me, ce, we, () => Re == null ? void 0 : Re.abort(), () => {
                    if (ce.m) {
                        const Me = createPending();
                        O(Me, me, ce), flushPending(Me)
                    }
                }), ce
            } catch (we) {
                return delete ce.v, ce.e = we, ++ce.n, ce
            } finally {
                Be = !1
            }
        }, C = H => returnAtomValue(E(void 0, H, r(H))), x = (H, me, ce) => {
            var ie, Be;
            const ve = new Map;
            for (const Re of ((ie = ce.m) == null ? void 0 : ie.t) || []) ve.set(Re, r(Re, ce));
            for (const Re of ce.p) ve.set(Re, r(Re, ce));
            return (Be = getPendingDependents(H, me)) == null || Be.forEach(Re => {
                ve.set(Re, r(Re, ce))
            }), ve
        }, B = (H, me, ce) => {
            const ie = [], Be = new Set, ve = (Ne, we) => {
                if (!Be.has(Ne)) {
                    Be.add(Ne);
                    for (const [Me, ke] of x(H, Ne, we)) Ne !== Me && ve(Me, ke);
                    ie.push([Ne, we, we.n])
                }
            };
            ve(me, ce);
            const Re = new Set([me]), Ce = Ne => Be.has(Ne);
            for (let Ne = ie.length - 1; Ne >= 0; --Ne) {
                const [we, Me, ke] = ie[Ne];
                let Fe = !1;
                for (const $e of Me.d.keys()) if ($e !== we && Re.has($e)) {
                    Fe = !0;
                    break
                }
                Fe && (E(H, we, Me, Ce), O(H, we, Me), ke !== Me.n && (addPendingAtom(H, we, Me), Re.add(we))), Be.delete(we)
            }
        }, N = (H, me, ce, ...ie) => {
            const Be = Ce => returnAtomValue(E(H, Ce, r(Ce, ce))), ve = (Ce, ...Ne) => {
                const we = r(Ce, ce);
                let Me;
                if (isSelfAtom(me, Ce)) {
                    if (!hasInitialValue(Ce)) throw new Error("atom not writable");
                    const ke = "v" in we, Fe = we.v, $e = Ne[0];
                    y(Ce, we, $e), O(H, Ce, we), (!ke || !Object.is(Fe, we.v)) && (addPendingAtom(H, Ce, we), B(H, Ce, we))
                } else Me = N(H, Ce, we, ...Ne);
                return flushPending(H), Me
            };
            return me.write(Be, ve, ...ie)
        }, L = (H, ...me) => {
            const ce = createPending(), ie = N(ce, H, r(H), ...me);
            return flushPending(ce), ie
        }, O = (H, me, ce) => {
            if (ce.m && !getPendingContinuablePromise(ce)) {
                for (const ie of ce.d.keys()) ce.m.d.has(ie) || (D(H, ie, r(ie, ce)).t.add(me), ce.m.d.add(ie));
                for (const ie of ce.m.d || []) if (!ce.d.has(ie)) {
                    ce.m.d.delete(ie);
                    const Be = z(H, ie, r(ie, ce));
                    Be == null || Be.t.delete(me)
                }
            }
        }, D = (H, me, ce) => {
            if (!ce.m) {
                E(H, me, ce);
                for (const ie of ce.d.keys()) D(H, ie, r(ie, ce)).t.add(me);
                if (ce.m = {l: new Set, d: new Set(ce.d.keys()), t: new Set}, isActuallyWritableAtom(me) && me.onMount) {
                    const ie = ce.m, {onMount: Be} = me;
                    addPendingFunction(H, () => {
                        const ve = Be((...Re) => N(H, me, ce, ...Re));
                        ve && (ie.u = ve)
                    })
                }
            }
            return ce.m
        }, z = (H, me, ce) => {
            if (ce.m && !ce.m.l.size && !Array.from(ce.m.t).some(ie => {
                var Be;
                return (Be = r(ie, ce).m) == null ? void 0 : Be.d.has(me)
            })) {
                const ie = ce.m.u;
                ie && addPendingFunction(H, ie), delete ce.m;
                for (const ve of ce.d.keys()) {
                    const Re = z(H, ve, r(ve, ce));
                    Re == null || Re.t.delete(me)
                }
                const Be = getPendingContinuablePromise(ce);
                Be && Be[CONTINUE_PROMISE](void 0, () => {
                });
                return
            }
            return ce.m
        };
        return {
            get: C, set: L, sub: (H, me) => {
                const ce = createPending(), ie = r(H), Be = D(ce, H, ie);
                flushPending(ce);
                const ve = Be.l;
                return ve.add(me), () => {
                    ve.delete(me);
                    const Re = createPending();
                    z(Re, H, ie), flushPending(Re)
                }
            }, unstable_derive: H => buildStore(...H(r))
        }
    }, createStore = () => {
        const r = new WeakMap;
        return buildStore(y => {
            let E = r.get(y);
            return E || (E = {d: new Map, p: new Set, n: 0}, r.set(y, E)), E
        })
    };
let defaultStore;
const getDefaultStore = () => (defaultStore || (defaultStore = createStore()), defaultStore),
    StoreContext = React.createContext(void 0), useStore = r => {
        const R = React.useContext(StoreContext);
        return (r == null ? void 0 : r.store) || R || getDefaultStore()
    }, isPromiseLike = r => typeof (r == null ? void 0 : r.then) == "function", use = React.use || (r => {
        if (r.status === "pending") throw r;
        if (r.status === "fulfilled") return r.value;
        throw r.status === "rejected" ? r.reason : (r.status = "pending", r.then(R => {
            r.status = "fulfilled", r.value = R
        }, R => {
            r.status = "rejected", r.reason = R
        }), r)
    });

function useAtomValue(r, R) {
    const y = useStore(R), [[E, C, x], B] = React.useReducer(O => {
        const D = y.get(r);
        return Object.is(O[0], D) && O[1] === y && O[2] === r ? O : [D, y, r]
    }, void 0, () => [y.get(r), y, r]);
    let N = E;
    (C !== y || x !== r) && (B(), N = y.get(r));
    const L = R == null ? void 0 : R.delay;
    return React.useEffect(() => {
        const O = y.sub(r, () => {
            if (typeof L == "number") {
                setTimeout(B, L);
                return
            }
            B()
        });
        return B(), O
    }, [y, r, L]), React.useDebugValue(N), isPromiseLike(N) ? use(N) : N
}

function useSetAtom(r, R) {
    const y = useStore(R);
    return React.useCallback((...C) => y.set(r, ...C), [y, r])
}

function useAtom(r, R) {
    return [useAtomValue(r, R), useSetAtom(r, R)]
}

const XocDiaStatistics$1 = "", XocDiaStatistics = React.memo(({roadMap: r}) => {
    var B, N, L, O;
    const {t: R} = useTranslation();
    let y = [], E = [];
    r.length > 0 && (y = r.map(D => D.slice(-1)), E = r.map(D => D.slice(0, 1)));
    const C = D => Math.round(y.filter(z => parseInt(z) % 2 === D).length / y.length * 100) || 0,
        x = D => Math.round(E.filter(z => z === D).length / E.length * 100) || 0;
    return r && r.length > 0 ? jsxs("section", {
        id: "xocdia_statistics",
        children: [jsxs("section", {
            className: "ratios_weight",
            children: [jsxs("article", {
                id: "ratios",
                style: {"--even": `${C(0)}%`, "--odd": `${C(1)}%`},
                children: [jsxs("div", {
                    className: "even",
                    children: [`${C(0)}%`, jsx("div", {children: R("roadmap.xocdia.even")})]
                }), jsxs("div", {
                    className: "odd",
                    children: [`${C(1)}%`, jsx("div", {children: R("roadmap.xocdia.odd")})]
                })]
            }), jsx("hr", {className: "divider"}), jsxs("article", {
                id: "ratios_tie_small_big",
                style: {"--big": `${x("R")}%`, "--small": `${x("B")}%`, "--tie": `${x("G")}%`},
                children: [jsxs("div", {
                    className: "big",
                    children: [`${x("R")}%`, jsx("div", {children: R("roadmap.xocdia.big")})]
                }), jsx("div", {
                    className: "tie",
                    "data-content": `${x("G")}%`,
                    children: jsx("div", {children: R("roadmap.xocdia.tie")})
                }), jsxs("div", {
                    className: "small",
                    children: [`${x("B")}%`, jsx("div", {children: R("roadmap.xocdia.small")})]
                })]
            })]
        }), jsxs("section", {
            id: "point_records",
            children: [jsxs("div", {
                className: "point_record point_0",
                children: [jsx(Dots, {points: 0}), jsx("div", {children: ((B = y.join("").match(/0/g)) == null ? void 0 : B.length) || 0})]
            }), jsxs("div", {
                className: "point_record point_1",
                children: [jsx(Dots, {points: 1}), jsx("div", {children: ((N = y.join("").match(/1/g)) == null ? void 0 : N.length) || 0})]
            }), jsxs("div", {
                className: "point_record point_3",
                children: [jsx(Dots, {points: 3}), jsx("div", {children: ((L = y.join("").match(/3/g)) == null ? void 0 : L.length) || 0})]
            }), jsxs("div", {
                className: "point_record point_4",
                children: [jsx(Dots, {points: 4}), jsx("div", {children: ((O = y.join("").match(/4/g)) == null ? void 0 : O.length) || 0})]
            })]
        }), jsx("div", {className: "last_50_rounds", children: R("roadmap.last_50_rounds")})]
    }) : null
});
XocDiaStatistics.displayName = "XocDiaStatistics";
const XocDiaStatisticsLite = React.memo(({roadMap: r}) => {
    var N, L, O, D;
    const [R, y] = React.useState([]), [E, C] = React.useState([]);
    console.log("XocDiaStatistics"), React.useEffect(() => {
        r.length > 0 && (y(r.map(z => z.slice(-1))), C(r.map(z => z.slice(0, 1))))
    }, [r]);
    const x = z => Math.round(R.filter(F => parseInt(F) % 2 === z).length / R.length * 100) || 0,
        B = z => Math.round(E.filter(F => F === z).length / E.length * 100) || 0;
    return r && r.length > 0 ? jsxs("section", {
        id: "xocdia_statistics_lite",
        children: [jsxs("section", {
            id: "ratios_tie_small_big",
            children: [jsxs("div", {
                children: [jsx("div", {
                    className: "circle red",
                    children: "B"
                }), jsx("div", {children: `${B("R")}%`})]
            }), jsxs("div", {
                children: [jsx("div", {
                    className: "circle green",
                    children: "T"
                }), jsx("div", {children: `${B("G")}%`})]
            }), jsxs("div", {
                children: [jsx("div", {
                    className: "circle blue",
                    children: "S"
                }), jsx("div", {children: `${B("B")}%`})]
            })]
        }), jsxs("section", {
            id: "ratios",
            children: [jsxs("div", {
                children: [jsx("div", {
                    className: "circle red",
                    children: "E"
                }), jsx("div", {children: `${x(0)}%`})]
            }), jsxs("div", {
                children: [jsx("div", {
                    className: "circle blue",
                    children: "O"
                }), jsx("div", {children: `${x(1)}%`})]
            })]
        }), jsxs("section", {
            id: "point_records",
            children: [jsxs("div", {
                children: [jsx("div", {
                    className: "circle",
                    children: "0"
                }), jsx("div", {children: ((N = R.join("").match(/0/g)) == null ? void 0 : N.length) || 0})]
            }), jsxs("div", {
                children: [jsx("div", {
                    className: "circle red",
                    children: "1"
                }), jsx("div", {children: ((L = R.join("").match(/1/g)) == null ? void 0 : L.length) || 0})]
            }), jsxs("div", {
                children: [jsx("div", {
                    className: "circle",
                    children: "3"
                }), jsx("div", {children: ((O = R.join("").match(/3/g)) == null ? void 0 : O.length) || 0})]
            }), jsxs("div", {
                children: [jsx("div", {
                    className: "circle red",
                    children: "4"
                }), jsx("div", {children: ((D = R.join("").match(/4/g)) == null ? void 0 : D.length) || 0})]
            })]
        })]
    }) : null
});
XocDiaStatisticsLite.displayName = "XocDiaStatisticsLite";
const showStatisticPanelAtom = atom(!1);

function parseRoadDataFunction(r) {
    switch (r) {
        case GameType.XocDia:
            return parseXicDiaRoadData
    }
}

const GameStatistic = ({gameTableInfo: r}) => {
        const [R] = useAtom(showStatisticPanelAtom), {isForceLandscape: y} = useDeviceOrientation(),
            E = useRoadMap(r.tableInfo.tableId, r.tableInfo.currentShoeGameResult, parseRoadDataFunction(r.tableInfo.gameType) ?? (() => [])),
            C = () => {
                switch (r.tableInfo.gameType) {
                    case GameType.XocDia:
                        return jsx(XocDiaStatistics, {roadMap: E});
                    default:
                        return
                }
            };
        return r.tableInfo.tableId ? jsx(Fragment, {children: y && R ? jsx(StatisticsPanel, {children: C()}) : null}) : null
    }, StatisticButton = ({children: r}) => {
        const [R, y] = useAtom(showStatisticPanelAtom);
        return React.useEffect(() => () => {
            y(!1)
        }, []), jsx("button", {onClick: y.bind(null, !R), children: jsx("div", {className: "svg_statistic"})})
    }, GameTableBottomRightMenu = r => {
        let {togglePopup: R} = useGameTablePopups("");
        const {gameTableInfo: y} = React.useContext(GameTableContext);
        useVipOwner();
        const {username: E, nickname: C, name: x, fullUsername: B} = useUsername(), {t: N} = useTranslation(), L = () => {
            switch (y.tableInfo.gameType) {
                case GameType.Baccarat:
                case GameType.Quick:
                case GameType.InsuredBaccarat:
                case GameType.VIP:
                    return jsx(CommissionToggle, {});
                case GameType.BullBull:
                    return jsx(BullBullPlayType, {showIcon: !0, direction: 1})
            }
        };
        return jsx(Fragment, {
            children: r.enable && jsxs("section", {
                id: "more_tables",
                children: [!isMobile$1 && jsxs(Fragment, {
                    children: [!!(x != null && x.length) && jsxs("button", {
                        className: "username",
                        children: [jsx("div", {className: "svg_person"}), jsx("div", {
                            className: "username_text",
                            children: x || ""
                        }), jsx(Tooltip, {className: "username_tooltip", children: B || ""})]
                    }), L(), jsxs("button", {
                        className: "fast_bet",
                        onClick: O => R("fast_bet"),
                        children: [jsx("div", {className: "svg_menu_fast_bet"}), N("fast_bet.title")]
                    }), r.showStatistic && jsx(StatisticButton, {})]
                }), r.children]
            })
        })
    }, GradientBg$1 = "",
    GradientBg = () => jsx("div", {className: "gradient_wrapper", children: jsx("div", {className: "bg_gradient"})}),
    HighlightedContext = React.createContext([[], () => {
    }]), RouletteGameTable = () => {
        const {t: r} = useTranslation(), {
                orientation: R,
                isForceLandscape: y
            } = useDeviceOrientation(), {settings: E} = React.useContext(SettingsContext), {
                play: C,
                sound: x
            } = React.useContext(SoundContext), {playingMessage: B} = React.useContext(ToastContext), {
                gameTableInfo: N,
                betTypeMap: L
            } = React.useContext(GameTableContext), {
                gameStatus: O,
                countDown: D
            } = React.useContext(GameTableStatusContext), {
                setUpClassName: z,
                isEnable: F,
                setEnable: _e
            } = React.useContext(GamesLayoutContainerContext), [Y, H] = React.useState(""),
            me = useRoadMap(N.tableInfo.tableId, N.tableInfo.currentShoeGameResult, parseRouletteRoadData), [ce, ie] = React.useState([]), [Be, ve] = React.useState(!1), [Re, Ce] = React.useState(DRAGGABLE_FRAME_TRANSFORM.NONE), [Ne, we] = React.useState(138), [Me, ke] = React.useState({
                topBound: 60,
                leftBound: 10,
                bottomBound: 50,
                rightBound: 25
            }), [Fe, $e] = React.useState(y ? 0 : 1), [Ve, Je] = React.useState(!0), [Qe, Ze] = React.useState("statistic"),
            qe = React.useRef(null), ze = () => {
                throw new Promise(() => {
                })
            };
        let {isLoading: De} = useSplashScreenControl(N.tableInfo.tableName);
        const {url: Xe, changeLine: He, nextLine: Ge} = useGameTableVideoContext(), {
            bets: Le,
            toggleTimer: We,
            betState: dt,
            payoutToast: et,
            betAmounts: nt,
            pendingBetAmounts: tt,
            gameTablePayout: lt,
            financialInfos: Bt,
            chipSelector: kt
        } = useGameTableEssentials({betTypeMap: L, gameType: N.tableInfo.gameType});
        React.useEffect(() => {
            isMobile$1 && (R.includes("landscape") && Fe !== 0 && $e(0), R.includes("portrait") && Fe === 0 && $e(1))
        }, [R, Fe]), React.useEffect(() => {
            O.tableStatus == TableStatus.PayOut && Ce(DRAGGABLE_FRAME_TRANSFORM.MINI)
        }, [O]), React.useEffect(() => {
            dt === BET_STATE.NO_BET && (ie([]), Ce(DRAGGABLE_FRAME_TRANSFORM.FULL_WIDTH))
        }, [dt]), React.useEffect(() => {
            isMobile$1 && ve(!1)
        }, [R]), React.useEffect(() => {
            var vt;
            Be && !y && ((vt = qe.current) == null || vt.onOpen(), Je(!1))
        }, [Be, R]), React.useEffect(() => {
            Ve && ve(!1)
        }, [Ve]), React.useEffect(() => {
            if (O.tableId !== -1 && O.currentGameRoundWinResult) {
                let vt = O.currentGameRoundWinResult[0][0];
                H(vt === "-1" ? "" : vt)
            }
        }, [O.tableId, O.currentGameRoundWinResult, x.sound]);
        const At = React.useRef(null);
        React.useEffect(() => {
            if (At.current) {
                const vt = At.current.offsetWidth, ea = window.innerWidth - vt - Me.leftBound;
                ke(_a => ({..._a, rightBound: ea}))
            }
        }, [At.current]);
        const zt = O.tableStatus == TableStatus.Maintenance, oa = React.useMemo(() => {
            if (!y) return jsx("div", {
                style: {width: "100%", height: "100%", position: "absolute", pointerEvents: "none"},
                children: jsxs(DragVideoFrame, {
                    status: Re,
                    handleWidth: 134,
                    bounds: Me,
                    innerAspectRatio: {w: 1280, h: 720},
                    enable: !y,
                    children: [jsx(StreamsVideoPlayerComponent$1, {
                        forceStop: zt,
                        zoomable: !1,
                        miniPlayer: !y,
                        url: Xe,
                        videoPlayer: LIVE_STREAMS_PLAYERS.FLV_PLAYER,
                        betState: dt,
                        onNextLine: He
                    }), jsxs("aside", {
                        className: "video-control-panel",
                        children: [jsx(ROtoggleButton$1, {
                            classname: Re == DRAGGABLE_FRAME_TRANSFORM.MINI ? "full-frame" : "align-top-left",
                            onSvg: "",
                            offSvg: "svg_video_minimized",
                            toggled: Re == DRAGGABLE_FRAME_TRANSFORM.MINI,
                            onClick: vt => {
                                Ce(vt ? DRAGGABLE_FRAME_TRANSFORM.NORMAL : DRAGGABLE_FRAME_TRANSFORM.MINI)
                            }
                        }), Re != DRAGGABLE_FRAME_TRANSFORM.MINI && jsxs(Fragment, {
                            children: [jsx(ROtoggleButton$1, {
                                classname: "align-bottom-right-video-refresh",
                                onSvg: "svg_video_refresh",
                                offSvg: "svg_video_refresh",
                                toggled: Re == DRAGGABLE_FRAME_TRANSFORM.FULL_WIDTH,
                                onClick: vt => {
                                    Ge()
                                }
                            }), jsx(ROtoggleButton$1, {
                                classname: "align-bottom-right",
                                onSvg: "svg_video_windowed",
                                offSvg: "svg_video_fullscreen",
                                toggled: Re == DRAGGABLE_FRAME_TRANSFORM.FULL_WIDTH,
                                onClick: vt => {
                                    Ce(vt ? DRAGGABLE_FRAME_TRANSFORM.NORMAL : DRAGGABLE_FRAME_TRANSFORM.FULL_WIDTH)
                                }
                            })]
                        })]
                    })]
                })
            })
        }, [y, Re, Ne, dt, Xe, Me, zt]);
        let sa = "";
        if (Y) {
            let vt = Y.charCodeAt(0);
            vt <= "9".charCodeAt(0) ? vt = vt - 48 : vt <= "Z".charCodeAt(0) ? vt -= 55 : vt <= "n".charCodeAt(0) && (vt -= 61), sa = String(vt)
        }
        return jsx("div", {
            id: "game_table_page",
            className: `${gameTypeTitle()}_game_table video_draggable_game`,
            children: jsxs(React.Suspense, {
                fallback: jsx(LoadingPage, {animaiton: !0, gameSplashScreen: !0}),
                children: [De ? jsx(ze, {}) : null, jsxs("div", {
                    className: z(GLC_CLASS_NAME_TYPE.FULL_FILL, {
                        appendedClasses: "inner_container",
                        dyAppendedClasses: y ? "inner_container_media" : "inner_container_mobile_media",
                        blend: !1
                    }),
                    children: [y && jsx(StreamsVideoPlayerComponent$1, {
                        forceStop: zt,
                        zoomable: !1,
                        miniPlayer: !1,
                        url: Xe,
                        videoPlayer: LIVE_STREAMS_PLAYERS.FLV_PLAYER,
                        betState: dt,
                        onNextLine: He
                    }), jsxs(ScablableContainer, {
                        fixScale: F, children: [jsx(HighlightedContext.Provider, {
                            value: [ce, ie], children: jsx(GameTableEssentailContext, {
                                gameTablePayout: lt,
                                betState: dt,
                                betAmounts: nt,
                                pendingBetAmounts: tt,
                                bets: Le,
                                children: jsxs("div", {
                                    className: "gametable_ui_container",
                                    children: [jsx(GameTableMenu, {}), y && Be && jsx(StatisticsPanel, {children: jsx(RouletteStatistics, {roadMap: me})}), jsx("div", {
                                        className: "gametable_timer",
                                        children: We && D && jsx(Timer, {
                                            size: isMobile$1 ? 75 : 100,
                                            thickness: isMobile$1 && R === "small-landscape" ? 12 : 6,
                                            duration: D.dynamicCountDown,
                                            playSound: !0,
                                            labelClass: "gametable_timer_label"
                                        })
                                    }), jsxs("div", {
                                        id: "bottom_container",
                                        className: E.scorecards,
                                        "aria-hidden": dt === BET_STATE.NO_BET,
                                        children: [isDesktop$1 && jsx(GameTypeLogo, {}), B && jsx("div", {
                                            className: "gametable_toast",
                                            style: {"--toast_color": B.color, "--duration": `${B.duration}s`},
                                            children: B.message
                                        }), et, jsx("div", {
                                            id: "focused_result",
                                            children: jsx(RoulettedFocusedResult, {winResult: sa})
                                        }), jsx("section", {
                                            id: "detailed_road",
                                            children: jsx(RouletteResultRoad, {
                                                size: 10,
                                                results: me.map(vt => parseInt(vt.match(REGEX.LAST_NUMBER)[0]))
                                            })
                                        }), jsxs("div", {
                                            ref: At,
                                            id: "bet_area",
                                            children: [jsx(GameTableName, {showVidoeReloadBtn: !1}), Fe !== 2 && jsx(RouletteBetTable, {winResult: Y})]
                                        }), Fe !== 1 && jsx("section", {
                                            id: "french_table",
                                            children: jsx(RouletteFrenchTable, {})
                                        }), Bt, kt({
                                            mobileType: "vertical",
                                            allBetAreaLimitMatched: !1,
                                            undo: !0
                                        }), jsxs(GameTableBottomRightMenu, {
                                            enable: !0,
                                            children: [jsx("button", {
                                                onClick: ve.bind(null, !Be),
                                                children: jsx("div", {className: "svg_statistic"})
                                            }), !y && jsx("button", {
                                                onClick: $e.bind(null, Fe === 1 ? 2 : 1),
                                                children: jsx("div", {className: "svg_change_bet"})
                                            })]
                                        })]
                                    }), jsx(Drawer, {
                                        ref: qe,
                                        dragContentToClose: !0,
                                        initialHeight: DRAWER_INITIAL_HEIGHT_LEVELS.HIGH,
                                        setDrawerHidden: Je,
                                        children: y ? void 0 : jsxs(Fragment, {
                                            children: [jsxs("div", {
                                                className: "title",
                                                children: [jsx("div", {className: "svg_statistic"}), jsx("div", {children: r("roadmap.statistics")})]
                                            }), jsxs("div", {
                                                className: "drawer_stat_types",
                                                children: [jsx("button", {
                                                    onClick: Ze.bind(null, "statistic"),
                                                    "aria-checked": Qe === "statistic",
                                                    children: r("roadmap.roulette.hot_cold")
                                                }), jsx("button", {
                                                    onClick: Ze.bind(null, "history"),
                                                    "aria-checked": Qe === "history",
                                                    children: r("roadmap.history")
                                                })]
                                            }), Be && Qe === "statistic" && jsx(RouletteStatistics, {roadMap: me}), Be && Qe === "history" && jsx(RouletteHistory, {
                                                size: 10,
                                                results: me.map(vt => parseInt(vt.match(REGEX.LAST_NUMBER)[0]))
                                            })]
                                        })
                                    }), oa]
                                })
                            })
                        }), jsx(GradientBg, {})]
                    })]
                })]
            })
        })
    }, RED = [1, 3, 5, 7, 9, 12, 14, 16, 18, 19, 21, 23, 25, 27, 30, 32, 34, 36],
    BLACK = [2, 4, 6, 8, 10, 11, 13, 15, 17, 20, 22, 24, 26, 28, 29, 31, 33, 35], AREA_LENGTH = 148,
    RouletteBetTable = r => {
        const {t: R, i18n: y} = useTranslation(),
            E = useAvailableChips(), {settings: C} = React.useContext(SettingsContext),
            x = React.useContext(GameTablePayoutContext), B = React.useContext(GameTableBetStateContext),
            N = React.useContext(GameTableBetAmountContext), L = React.useContext(GameTableBetContext),
            O = React.useContext(GameTablePendingBetAmountContext), {isForceLandscape: D} = useDeviceOrientation(), [z, F] = React.useState(Object.values(ROULETTE_BET_TYPE).map(Le => ({
                color: E[0].color,
                amount: Helper.formatAbbrMoney(N[Le])
            }))), _e = useChips({chipAttrs: z, flat: D && B === BET_STATE.NO_BET}),
            Y = useBetChip(x, N, O, _e), [H, me] = React.useState(Object.fromEntries(Object.keys(ROULETTE_BET_TYPE).filter(Le => !Number.isNaN(parseInt(Le))).map(Le => [Le, !1]))), [ce, ie] = React.useContext(HighlightedContext),
            Be = React.useCallback(() => {
                let Le = [];
                switch (B) {
                    case BET_STATE.BETTING:
                        Le.push("betting");
                        break;
                    case BET_STATE.NO_BET:
                        Le.push("no_bet");
                        break
                }
                switch (C.showConfirmedBetAmounts) {
                    case!0:
                        Le.push("show_bet_amount");
                        break;
                    case!1:
                        Le.push("hide_bet_amount");
                        break
                }
                return Le.join(" ")
            }, [B, C.showConfirmedBetAmounts]);
        useBetAmountUpdateChipEffect(N, O, z, F), usePayoutUpdateChipEffect(N, O, x, z, F);
        const ve = useBet(N, B, ROULETTE_BET_TYPE_MAP, L), Re = React.useCallback(Le => {
            B !== BET_STATE.NO_BET && ie(Le)
        }, [B]), Ce = React.useCallback(() => {
            ie([])
        }, []);
        React.useEffect(() => {
            let Le = Object.fromEntries(Object.keys(ROULETTE_BET_TYPE).filter(We => !Number.isNaN(parseInt(We))).map(We => [We, !1]));
            if (r.winResult !== "") {
                let We = r.winResult[0].charCodeAt(0);
                We <= "9".charCodeAt(0) ? We = We - 48 : We <= "Z".charCodeAt(0) ? We -= 55 : We <= "n".charCodeAt(0) && (We -= 61), Le[We + ROULETTE_BET_TYPE.DIRECT_0] = !0, Le[ROULETTE_BET_TYPE.SMALL] = ["1", "2"].includes(r.winResult[1]), Le[ROULETTE_BET_TYPE.BIG] = ["3", "4"].includes(r.winResult[1]), Le[ROULETTE_BET_TYPE.EVEN] = ["2", "4"].includes(r.winResult[1]), Le[ROULETTE_BET_TYPE.ODD] = ["1", "3"].includes(r.winResult[1]), Le[ROULETTE_BET_TYPE.DOZEN_1_12] = ["1", "2", "3"].includes(r.winResult[2]), Le[ROULETTE_BET_TYPE.DOZEN_13_24] = ["4", "5", "6"].includes(r.winResult[2]), Le[ROULETTE_BET_TYPE.DOZEN_25_36] = ["7", "8", "9"].includes(r.winResult[2]), Le[ROULETTE_BET_TYPE.COLUMN_1] = ["1", "4", "7"].includes(r.winResult[2]), Le[ROULETTE_BET_TYPE.COLUMN_2] = ["2", "5", "8"].includes(r.winResult[2]), Le[ROULETTE_BET_TYPE.COLUMN_3] = ["3", "6", "9"].includes(r.winResult[2]), Le[ROULETTE_BET_TYPE.RED] = We !== 0 && [1, 3, 5, 7, 9, 12, 14, 18, 19, 21, 23, 25, 27, 30, 32, 34, 36].includes(We), Le[ROULETTE_BET_TYPE.BLACK] = We !== 0 && !Le[ROULETTE_BET_TYPE.RED]
            }
            me(Le)
        }, [r.winResult]);
        const Ne = (Le, We, dt, et, nt) => {
            let tt = Le % dt * et + We + Math.floor(Le / dt) * nt;
            return D ? tt : AREA_LENGTH - tt
        }, we = React.useCallback(() => {
            const Le = ROULETTE_BET_TYPE.DIRECT_0;
            return jsxs("div", {
                className: "bet_area_direct_0",
                style: {"--z_index": 0, gridArea: "direct_0"},
                children: [jsx("button", {
                    className: "green",
                    onMouseOver: Re.bind(null, [Le]),
                    onTouchStart: Re.bind(null, [Le]),
                    onMouseLeave: Ce,
                    onTouchEnd: Ce,
                    onClick: () => ve([Le]),
                    "aria-checked": H[Le],
                    "aria-hidden": !ce.includes(Le),
                    children: jsx("div", {className: "highlight"})
                }, Le), jsx("div", {className: "title", children: "0"})]
            })
        }, [H, B, L, ce]), Me = React.useCallback(Le => {
            const We = Le + ROULETTE_BET_TYPE.DIRECT_0, dt = Le === 0 ? 0 : Ne(Le - 1, 7, 3, 2, 12);
            return jsxs("button", {
                className: RED.includes(Le) ? "red" : BLACK.includes(Le) ? "black" : "green",
                style: {"--z_index": dt, gridArea: `direct_${Le}`},
                onMouseOver: Re.bind(null, [We]),
                onTouchStart: Re.bind(null, [We]),
                onMouseLeave: Ce,
                onTouchEnd: Ce,
                onClick: () => ve([We]),
                "aria-checked": H[We],
                "aria-hidden": !ce.includes(We),
                children: [jsx("div", {className: "highlight"}), jsx("div", {className: "title", children: Le})]
            }, We)
        }, [H, B, L, ce]), ke = React.useCallback(Le => {
            const We = `column_${Le + 1}`, dt = Le + ROULETTE_BET_TYPE.COLUMN_1;
            let et = [dt], nt = dt % ROULETTE_BET_TYPE.COLUMN_1 + 1;
            const tt = !(y.language === "sc" || y.language === "tc"), lt = R(`bet_type.${ROULETTE_BET_TYPE_MAP[dt]}`);
            for (let kt = nt; kt <= 36; kt += 3) et.push(kt + ROULETTE_BET_TYPE.DIRECT_0);
            const Bt = Ne(Le, 145, 3, 1, 0);
            return jsx("button", {
                className: "black",
                style: {"--z_index": Bt, gridArea: We},
                onMouseOver: Re.bind(null, et),
                onTouchStart: Re.bind(null, et),
                onMouseLeave: Ce,
                onTouchEnd: Ce,
                onClick: () => ve([dt]),
                "aria-checked": H[dt],
                "aria-hidden": !ce.includes(dt),
                children: tt ? jsxs("div", {
                    className: "title",
                    children: ["2", jsx("sup", {children: "TO"}), "1"]
                }) : jsx("div", {className: "titleSmall", children: lt})
            }, dt)
        }, [H, B, L, ce]), Fe = React.useCallback(Le => {
            const We = `dozen_${Le * 12 + 1}_${(Le + 1) * 12}`, dt = Le + ROULETTE_BET_TYPE.DOZEN_1_12;
            let et = [dt], nt = dt % ROULETTE_BET_TYPE.DOZEN_1_12 * 12 + 1;
            for (let kt = nt; kt < nt + 12; kt++) et.push(kt + ROULETTE_BET_TYPE.DIRECT_0);
            const tt = !(y.language === "sc" || y.language === "tc"), lt = R(`bet_type.${ROULETTE_BET_TYPE_MAP[dt]}`),
                Bt = R(`bet_type.${ROULETTE_BET_TYPE_MAP[dt]}`);
            return jsx("button", {
                className: "black",
                style: {"--z_index": -1e3, gridArea: We},
                onMouseOver: Re.bind(null, et),
                onTouchStart: Re.bind(null, et),
                onMouseLeave: Ce,
                onTouchEnd: Ce,
                onClick: () => ve([dt]),
                "aria-checked": H[dt],
                "aria-hidden": !ce.includes(dt),
                children: tt ? jsxs("div", {
                    className: "title",
                    children: [Le + 1, jsx("sup", {children: lt}), !D && jsx("br", {}), " 12"]
                }) : jsx("div", {className: "titleSmall", children: Bt})
            }, dt)
        }, [H, B, L, ce, D]), $e = React.useCallback((Le, We) => {
            let dt = [We], et = We * 18 + 1;
            for (let nt = et; nt < et + 18; nt++) dt.push(nt + ROULETTE_BET_TYPE.DIRECT_0);
            return jsx("button", {
                className: "black",
                style: {"--z_index": -2e3, gridArea: Le},
                onMouseOver: Re.bind(null, dt),
                onTouchStart: Re.bind(null, dt),
                onMouseLeave: Ce,
                onTouchEnd: Ce,
                onClick: () => ve([We]),
                "aria-checked": H[We],
                "aria-hidden": !ce.includes(We),
                children: jsx("div", {className: "title", children: R(`bet_type.${ROULETTE_BET_TYPE_MAP[We]}`)})
            }, We)
        }, [H, B, L, ce]), Ve = React.useCallback((Le, We) => {
            let dt = [We], et = (We + 1) % 2 + 1;
            for (let nt = et; nt <= 36; nt += 2) dt.push(nt + ROULETTE_BET_TYPE.DIRECT_0);
            return jsx("button", {
                className: "black",
                style: {"--z_index": -2e3, gridArea: Le},
                onMouseOver: Re.bind(null, dt),
                onTouchStart: Re.bind(null, dt),
                onMouseLeave: Ce,
                onTouchEnd: Ce,
                onClick: () => ve([We]),
                "aria-checked": H[We],
                "aria-hidden": !ce.includes(We),
                children: jsx("div", {
                    className: "title",
                    children: jsx("span", {children: R(`bet_type.${ROULETTE_BET_TYPE_MAP[We]}`)})
                })
            }, We)
        }, [H, B, L, ce]), Je = React.useCallback((Le, We) => {
            let dt = [We], et = We === ROULETTE_BET_TYPE.RED ? RED : BLACK;
            for (let nt = 1; nt <= 36; nt++) et.includes(nt) && dt.push(nt + ROULETTE_BET_TYPE.DIRECT_0);
            return jsx("button", {
                className: "black",
                style: {"--z_index": -2e3, gridArea: Le},
                onMouseOver: Re.bind(null, dt),
                onTouchStart: Re.bind(null, dt),
                onMouseLeave: Ce,
                onTouchEnd: Ce,
                onClick: () => ve([We]),
                "aria-checked": H[We],
                "aria-hidden": !ce.includes(We),
                children: jsx("div", {className: `svg_table_roulette_${Le}`})
            }, We)
        }, [H, B, L, ce]), Qe = React.useCallback(Le => {
            const We = [Le + Math.floor(Le / 2) + 1, Le + Math.floor(Le / 2) + 2, Le + Math.floor(Le / 2) + 4, Le + Math.floor(Le / 2) + 5],
                dt = Le + ROULETTE_BET_TYPE.CORNER_1_5;
            let et = We.map(lt => lt + ROULETTE_BET_TYPE.DIRECT_0), nt = D ? [We[1], We[2]] : [We[0], We[3]];
            const tt = Ne(Le, 14, 2, 2, 12);
            return jsx("button", {
                className: "corner",
                style: {
                    "--z_index": tt,
                    gridArea: `direct_${nt[0]} / direct_${nt[0]} / direct_${nt[1]} / direct_${nt[1]}`
                },
                onMouseOver: Re.bind(null, et),
                onTouchStart: Re.bind(null, et),
                onMouseLeave: Ce,
                onTouchEnd: Ce,
                onClick: () => ve([dt])
            }, dt)
        }, [B, L, D]), Ze = React.useCallback(Le => {
            const We = Le[1] - 1 + ROULETTE_BET_TYPE.SEPARATE_0_1;
            let dt = Le.map(nt => nt + ROULETTE_BET_TYPE.DIRECT_0);
            const et = Ne(Le[1] - 1, 1, 3, 2, 0);
            return jsx("button", {
                className: "separate_0 horizontal",
                style: {"--z_index": et, "--column": 3 - Le[1] + 1, "--area": `direct_${Le[1]}`},
                onMouseOver: Re.bind(null, dt),
                onTouchStart: Re.bind(null, dt),
                onMouseLeave: Ce,
                onTouchEnd: Ce,
                onClick: () => ve([We])
            }, We)
        }, [B, L]), qe = React.useCallback((Le, We) => {
            const dt = We[1] - We[0], et = dt === 1 ? "horizontal" : "vertical",
                nt = dt === 1 ? Le + ROULETTE_BET_TYPE.SEPARATE_1_2 : (Le + 2) % 3 * 11 + Math.floor((Le - 1) / 3) + ROULETTE_BET_TYPE.SEPARATE_1_4;
            let tt = We.map(At => At + ROULETTE_BET_TYPE.DIRECT_0), lt = et === "vertical" || !D ? We[0] : We[1],
                Bt = et === "vertical" || !D ? We[1] : We[0],
                kt = et === "vertical" ? Ne(Le - 1, 13, 3, 2, 12) : Ne(Le, 8, 2, 2, 12);
            return jsx("button", {
                className: `separate ${et}`,
                style: {"--z_index": kt, gridArea: `direct_${lt} / direct_${lt} / direct_${Bt} / direct_${Bt}`},
                onMouseOver: Re.bind(null, tt),
                onTouchStart: Re.bind(null, tt),
                onMouseLeave: Ce,
                onTouchEnd: Ce,
                onClick: () => ve([nt])
            }, nt)
        }, [B, L, D]), ze = React.useCallback(Le => {
            const We = Le[1] - 1 + ROULETTE_BET_TYPE.THREE_0_1_2;
            let dt = Le.map(nt => nt + ROULETTE_BET_TYPE.DIRECT_0);
            const et = Ne(Le[1] - 1, 2, 2, 2, 0);
            return jsx("button", {
                className: "three",
                style: {"--z_index": et, "--column": 3 - Le[1] + 1, "--area": `direct_${Le[1]}`},
                onMouseOver: Re.bind(null, dt),
                onTouchStart: Re.bind(null, dt),
                onMouseLeave: Ce,
                onTouchEnd: Ce,
                onClick: () => ve([We])
            }, We)
        }, [B, L]), De = React.useCallback(() => {
            const Le = ROULETTE_BET_TYPE.FOUR_0_1_2_3;
            let We = [0, 1, 2, 3].map(dt => dt + ROULETTE_BET_TYPE.DIRECT_0);
            return jsx("button", {
                className: "four",
                style: {"--z_index": 6},
                onMouseOver: Re.bind(null, We),
                onTouchStart: Re.bind(null, We),
                onMouseLeave: Ce,
                onTouchEnd: Ce,
                onClick: () => ve([Le])
            })
        }, [B, L]), Xe = React.useCallback(Le => {
            const We = [Le * 3 + 1, Le * 3 + 2, Le * 3 + 3], dt = Le + ROULETTE_BET_TYPE.STREET_1_3;
            let et = We.map(tt => tt + ROULETTE_BET_TYPE.DIRECT_0);
            const nt = Ne(Le, 12, 1, 2, 12);
            return jsx("button", {
                className: "street",
                style: {"--z_index": nt, gridArea: `direct_${We[2]}`},
                onMouseOver: Re.bind(null, et),
                onTouchStart: Re.bind(null, et),
                onMouseLeave: Ce,
                onTouchEnd: Ce,
                onClick: () => ve([dt])
            }, dt)
        }, [B, L]), He = React.useCallback(Le => {
            const We = [Le * 3 + 1, Le * 3 + 2, Le * 3 + 3, Le * 3 + 4, Le * 3 + 5, Le * 3 + 6],
                dt = Le + ROULETTE_BET_TYPE.LINE_1_6;
            let et = We.map(lt => lt + ROULETTE_BET_TYPE.DIRECT_0);
            const nt = Ne(Le, 18, 1, 2, 12);
            let tt = D ? [We[5], We[0], We[0], We[5]] : [We[0], We[0], We[5], We[5]];
            return jsx("button", {
                className: "line",
                style: {
                    "--z_index": nt,
                    gridArea: `direct_${tt[0]} / direct_${tt[1]} / direct_${tt[2]} / direct_${tt[3]}`
                },
                onMouseOver: Re.bind(null, et),
                onTouchStart: Re.bind(null, et),
                onMouseLeave: Ce,
                onTouchEnd: Ce,
                onClick: () => ve([dt])
            }, dt)
        }, [B, L]), Ge = React.useCallback(Le => {
            let et = ROULETTE_BET_TYPE.DIRECT_0;
            if (Le >= AREA_LENGTH - 3) {
                const nt = 3 - (AREA_LENGTH - Le), tt = nt + ROULETTE_BET_TYPE.COLUMN_1;
                return z[tt].amount ? jsx("div", {style: {gridArea: `column_${nt + 1}`}, children: Y(tt)}, tt) : void 0
            }
            if (!(Le < 7 || Le >= AREA_LENGTH - 3)) {
                let nt = (Le - 7) % 12;
                switch (nt) {
                    case 0:
                    case 2:
                    case 4:
                        const tt = Math.floor((Le - 7) / 12) * 3 + nt % 12 / 2 + 1;
                        return et = tt + ROULETTE_BET_TYPE.DIRECT_0, z[et].amount ? jsx("div", {
                            style: {gridArea: `direct_${tt}`},
                            children: Y(et)
                        }, et) : void 0;
                    case 1:
                    case 3:
                        const lt = Math.floor((Le - 7) / 12) * 2 + (nt - 1) % 12 / 2,
                            Bt = lt + Math.floor(lt / 2) + (D ? 2 : 1), kt = lt + Math.floor(lt / 2) + (D ? 1 : 2);
                        return et = lt + ROULETTE_BET_TYPE.SEPARATE_1_2, z[et].amount ? jsx("div", {
                            style: {gridArea: `direct_${Bt} / direct_${Bt} / direct_${kt} / direct_${kt}`},
                            children: Y(et)
                        }, et) : void 0;
                    case 5:
                        const At = Math.floor((Le - 7) / 12), zt = At * 3 + 3;
                        return et = At + ROULETTE_BET_TYPE.STREET_1_3, z[et].amount ? jsx("div", {
                            className: "street",
                            style: {gridArea: `direct_${zt}`},
                            children: Y(et)
                        }, et) : void 0;
                    case 6:
                    case 8:
                    case 10:
                        const oa = Math.floor((Le - 7) / 12) * 3 + (nt - 6) % 12 / 2 + 1, sa = oa, vt = oa + 3;
                        return et = (oa + 2) % 3 * 11 + Math.floor((oa - 1) / 3) + ROULETTE_BET_TYPE.SEPARATE_1_4, z[et].amount ? jsx("div", {
                            style: {gridArea: `direct_${sa} / direct_${sa} / direct_${vt} / direct_${vt}`},
                            children: Y(et)
                        }, et) : void 0;
                    case 7:
                    case 9:
                        const ea = Math.floor((Le - 7) / 12) * 2 + (nt - 7) % 12 / 2,
                            _a = [ea + Math.floor(ea / 2) + 1, ea + Math.floor(ea / 2) + 2, ea + Math.floor(ea / 2) + 4, ea + Math.floor(ea / 2) + 5];
                        et = ea + ROULETTE_BET_TYPE.CORNER_1_5;
                        const ta = D ? [_a[1], _a[2]] : [_a[0], _a[3]];
                        return z[et].amount ? jsx("div", {
                            style: {gridArea: `direct_${ta[0]} / direct_${ta[0]} / direct_${ta[1]} / direct_${ta[1]}`},
                            children: Y(et)
                        }, et) : void 0;
                    case 11:
                        const na = Math.floor((Le - 7) / 12), Aa = na * 3 + 1, Ea = na * 3 + 6;
                        et = na + ROULETTE_BET_TYPE.LINE_1_6;
                        const Sa = D ? [Ea, Aa, Aa, Ea] : [Aa, Aa, Ea, Ea];
                        return z[et].amount ? jsx("div", {
                            className: "line",
                            style: {gridArea: `direct_${Sa[0]} / direct_${Sa[1]} / direct_${Sa[2]} / direct_${Sa[3]}`},
                            children: Y(et)
                        }, et) : void 0
                }
            }
            if (Le < 7) {
                let nt = ROULETTE_BET_TYPE.DIRECT_0;
                switch (Le) {
                    case 0:
                        return z[nt].amount ? jsx("div", {style: {gridArea: "direct_0"}, children: Y(nt)}, nt) : void 0;
                    case 1:
                    case 3:
                    case 5:
                        const tt = Math.floor(Le / 2) + 1;
                        return nt = tt - 1 + ROULETTE_BET_TYPE.SEPARATE_0_1, jsx("div", {
                            className: "separate_0",
                            "aria-details": `${tt}`,
                            style: {"--column": 3 - tt + 1, "--area": `direct_${tt}`},
                            children: Y(nt)
                        }, nt);
                    case 2:
                    case 4:
                        const lt = Le / 2;
                        return nt = lt - 1 + ROULETTE_BET_TYPE.THREE_0_1_2, z[nt].amount ? jsx("div", {
                            className: "three",
                            style: {"--column": 3 - lt + 1, "--area": `direct_${lt}`},
                            children: Y(nt)
                        }, nt) : void 0;
                    case 6:
                        return nt = ROULETTE_BET_TYPE.FOUR_0_1_2_3, z[nt].amount ? jsx("div", {
                            className: "four",
                            children: Y(nt)
                        }, nt) : void 0
                }
            }
        }, [D, Y, z]);
        return jsx(BetTable, {
            children: jsxs("div", {
                className: `bet_table_container roulette_bet_table ${Be()}`,
                style: {"--area_length": AREA_LENGTH},
                children: [we(), Array(36).fill(void 0).map((Le, We) => Me(We + 1)), Array(3).fill(void 0).map((Le, We) => Fe(We)), Array(12).fill(void 0).map((Le, We) => Xe(We)), Array(11).fill(void 0).map((Le, We) => He(We)), Array(22).fill(void 0).map((Le, We) => Qe(We)), Array(3).fill(void 0).map((Le, We) => Ze([0, We + 1])), Array(24).fill(void 0).map((Le, We) => qe(We, [We + Math.floor(We / 2) + 1, We + Math.floor(We / 2) + 2])), Array(34).fill(void 0).map((Le, We) => We !== 0 && qe(We, [We, We + 3])), Array(2).fill(void 0).map((Le, We) => ze([0, We + 1, We + 2])), De(), Array(3).fill(void 0).map((Le, We) => ke(We)), $e("small", ROULETTE_BET_TYPE.SMALL), Ve("even", ROULETTE_BET_TYPE.EVEN), Je("red", ROULETTE_BET_TYPE.RED), Je("black", ROULETTE_BET_TYPE.BLACK), Ve("odd", ROULETTE_BET_TYPE.ODD), $e("big", ROULETTE_BET_TYPE.BIG), jsxs("div", {
                    id: "roulette_bet_table_chips",
                    children: [Array(AREA_LENGTH).fill(void 0).map((Le, We) => Ge(D ? AREA_LENGTH - 1 - We : We)), Array(3).fill(void 0).map((Le, We) => {
                        const dt = 3 - We - 1;
                        return z[ROULETTE_BET_TYPE.DOZEN_1_12 + dt].amount ? jsx("div", {
                            style: {gridArea: `dozen_${dt * 12 + 1}_${(dt + 1) * 12}`},
                            children: Y(ROULETTE_BET_TYPE.DOZEN_1_12 + dt)
                        }, dt) : void 0
                    }), z[ROULETTE_BET_TYPE.SMALL].amount ? jsx("div", {
                        style: {gridArea: "small"},
                        children: Y(ROULETTE_BET_TYPE.SMALL)
                    }) : void 0, z[ROULETTE_BET_TYPE.EVEN].amount ? jsx("div", {
                        style: {gridArea: "even"},
                        children: Y(ROULETTE_BET_TYPE.EVEN)
                    }) : void 0, z[ROULETTE_BET_TYPE.RED].amount ? jsx("div", {
                        style: {gridArea: "red"},
                        children: Y(ROULETTE_BET_TYPE.RED)
                    }) : void 0, z[ROULETTE_BET_TYPE.BLACK].amount ? jsx("div", {
                        style: {gridArea: "black"},
                        children: Y(ROULETTE_BET_TYPE.BLACK)
                    }) : void 0, z[ROULETTE_BET_TYPE.ODD].amount ? jsx("div", {
                        style: {gridArea: "odd"},
                        children: Y(ROULETTE_BET_TYPE.ODD)
                    }) : void 0, z[ROULETTE_BET_TYPE.BIG].amount ? jsx("div", {
                        style: {gridArea: "big"},
                        children: Y(ROULETTE_BET_TYPE.BIG)
                    }) : void 0]
                })]
            })
        })
    }, REGEX = {
        LAST_CHAR_OR_NUM: RegExp(/[a-zA-Z]$|\d+$/),
        SINGLE_CHAR_OR_NUM: RegExp(/[a-zA-Z]|\d+/g),
        NUM: RegExp(/\d+/g),
        GROUP_SIDE: RegExp(/(B+|R+)/g),
        LAST_NUMBER: /\d+$/,
        SINGLE_ZERO: /^\D*0$/
    }, reset = r => {
        var R, y;
        (R = r.empty) == null || R.forEach(E => E.splice(0, E.length)), (y = r.nonEmpty) == null || y.forEach(E => E.forEach((C, x) => E[x] = -1))
    }, addTie = (r, R) => {
        const [y, E] = r;
        let C = R.current[y][E], x = C.match(REGEX.LAST_CHAR_OR_NUM)[0];
        C.slice(-1) === "G" ? C = C.concat("2") : Number.isNaN(parseInt(x)) ? C = C.concat("G") : C = C.match(/^\D+/)[0].concat(JSON.stringify(parseInt(x) + 1)), R.current[y].splice(E, 1, C)
    }, addRoadToBigRoadMap = (r, R, y, E, C, x, B, N) => {
        const L = x.slice(0, y).findLast(O => O !== "G");
        if (!B.current.flat(2).length) addToCol({
            roadMap: B.current,
            col: 0,
            road: R,
            sizeX: r.x,
            lastGrid: C
        }); else if (R === "G") addTie(C, B); else if (L) {
            if (R !== L) {
                let O = B.current.map(D => D[0]).findLastIndex(D => D !== void 0);
                addToCol({roadMap: B.current, col: O + 1, road: R, sizeX: r.x, lastGrid: C})
            } else if (R === L) {
                const [O, D] = C;
                let z = D < r.y - 1 && !B.current[O][D + 1];
                !(O > 0 && (O !== B.current.map(_e => _e[0]).findLastIndex(_e => _e && _e.includes(R)) || D === 0 && B.current[O][D] === B.current[O - 1][D])) && z ? addToCol({
                    roadMap: B.current,
                    col: O,
                    road: R,
                    sizeX: r.x,
                    lastGrid: C
                }) : addToColBottom({roadMap: B.current, col: O + 1, road: R, sizeY: r.y, lastGrid: C})
            }
        } else {
            addToCol({roadMap: B.current, col: 0, road: R, sizeX: r.x, lastGrid: C});
            for (let O = 0; O <= x.slice(0, y).findLastIndex(D => D === "G"); O++) addTie(C, B)
        }
        E && y === x.length - 1 || N.current.push(C.slice())
    }, addRoadToDetailedRoadMap = (r, R, y, E, C, x, B, N, L) => {
        let O = D => {
            const z = B[0] !== -1 && B[1] !== -1 ? N.current[B[0]][B[1]] : void 0;
            if (!N.current.flat(2).length) addToCol({
                roadMap: N.current,
                col: 0,
                road: D,
                sizeX: r.x,
                lastGrid: B
            }); else if (z !== D) {
                const F = N.current.map(_e => _e[0]).findLastIndex(_e => _e !== void 0);
                addToCol({roadMap: N.current, col: F + 1, road: D, sizeX: r.x, lastGrid: B})
            } else {
                const [F, _e] = B;
                let Y = _e < r.y - 1 && !N.current[F][_e + 1];
                !(F > 0 && (F !== N.current.map(me => me[0]).findLastIndex(me => me && me.includes(D)) || _e === 0 && N.current[F][_e] === N.current[F - 1][_e])) && Y ? addToCol({
                    roadMap: N.current,
                    col: F,
                    road: D,
                    sizeX: r.x,
                    lastGrid: B
                }) : addToColBottom({roadMap: N.current, col: F + 1, road: D, sizeY: r.y, lastGrid: B})
            }
        };
        x[R - E].wins === y - 1 || y === 1 && x[R - (E + 1)].wins !== x[R - 1].wins ? O("B") : O("R"), C && R === x.length - 1 && y === x[R].wins || L.current.push(B.slice())
    }, initBigRoadMap = (r, R, y, E, C, x) => {
        reset({empty: [C.current, x.current], nonEmpty: [E.current]});
        let B = JSON.parse(JSON.stringify(R));
        y && B.push(y), B.forEach((N, L) => addRoadToBigRoadMap(r, N, L, y, E.current, R, C, x))
    }, initDetailedRoadMap = (r, R, y, E, C, x, B) => {
        reset({empty: [C.current, x.current], nonEmpty: [E.current]});
        const N = JSON.parse(JSON.stringify(B));
        if (y) {
            let L = N.length - 1;
            L >= 0 && y === N[L].side ? N[L].wins = N[L].wins + 1 : N.push({side: y, wins: 1})
        }
        N.forEach((L, O) => {
            if (!(O < R)) for (let D = 1; D <= L.wins; D++) O === R && D === 1 || addRoadToDetailedRoadMap(r, O, D, R, !!y, B, E.current, C, x)
        })
    }, addToCol = r => {
        var y;
        let R = r.roadMap[r.col];
        if (R) {
            let E = 0;
            for (; E + 1 < r.sizeX && ((y = r.roadMap[r.col][E]) != null && y.includes(r.road));) E++;
            R.splice(E, 1, r.road), r.lastGrid[0] = r.col, r.lastGrid[1] = E
        } else r.roadMap.push([r.road]), r.lastGrid[0] = r.col, r.lastGrid[1] = 0
    }, addToColBottom = r => {
        if (r.roadMap[r.col]) r.roadMap[r.col].splice(r.lastGrid[1], 1, r.road), r.lastGrid[0] = r.col; else {
            let R = Array(r.sizeY);
            R[r.lastGrid[1]] = r.road, r.roadMap.push(R), r.lastGrid[0] = r.col
        }
    }, useRenderRoadMapWithCanvas = r => {
        var D, z, F, _e;
        const R = React.useMemo(() => r, [r]),
            y = React.useMemo(() => JSON.parse(JSON.stringify(R.displayRoadMap)), [r.displayRoadMap]);
        let {rerender: E} = useRerender();
        const C = window.devicePixelRatio * 1.5 || 1, x = React.useRef(null), B = React.useRef(null);
        React.useEffect(() => {
            setTimeout(() => {
                N()
            }, 20)
        }, [y]), React.useEffect(() => {
            B.current, x.current, setTimeout(() => {
                N()
            }, 10)
        }, [E]);
        const N = React.useCallback(() => {
            const Y = B.current;
            if (!Y) return;
            const H = Y.getContext("2d"), me = C, ce = Y.width / R.size.x, ie = Y.height / R.size.y;
            let Be = y.slice(Math.max(0, y.length - (R.size.x - 1))), ve = y.length - Be.length;
            H.clearRect(0, 0, Y.width, Y.height);
            for (let Re = 0; Re < R.size.x; Re++) for (let Ce = 0; Ce < R.size.y; Ce++) {
                const Ne = Be[Re] && Be[Re][Ce], we = Re, Me = Ce, ke = we * ce, Fe = Me * ie, $e = ke + ce / 2,
                    Ve = Fe + ie / 2, Je = ce / 3 / (isMobile$1 ? 1.2 : 1), Qe = 1.5 * me;
                H.font = `${6 * me}px Arial`, Ne ? R.blinking ? O(H, Ne, Je, $e, Ve, Qe, !0, me, R.roadType) : JSON.stringify([Re + ve, Ce]) === JSON.stringify(R.lastGrid) && R.asking || O(H, Ne, Je, $e, Ve, Qe, !0, me, R.roadType) : (H.fillStyle = "#707070", H.fillText(".", $e, Ve))
            }
        }, [y]);

        function L(Y, H, me, ce, ie, Be, ve, Re, Ce) {
            let Ne;
            if (me.match(REGEX.NUM) && (Ne = me.match(REGEX.NUM)[0]), Re) {
                Y.strokeStyle = H, Y.beginPath();
                const we = ce * 1.2;
                Y.moveTo(ie + we, Be - we), Y.lineTo(ie - we, Be + we), Y.lineWidth = ve, Y.stroke(), Ne && (Y.fillStyle = "white", Y.textAlign = "center", Y.textBaseline = "middle", Y.fillText(Ne, ie, Be))
            }
        }

        function O(Y, H, me, ce, ie, Be, ve, Re, Ce) {
            let Ne = "green";
            ve = !1;
            let we = "#0090ff", Me = "#ff4949", ke = "#13ce66";
            H.match(REGEX.NUM) && H.match(REGEX.NUM)[0];

            function Fe($e) {
                return $e.replace(/\d+/g, "")
            }

            switch (H = Fe(H), H) {
                case"B":
                    Ne = we, ve = !1;
                    break;
                case"R":
                    Ne = Me, ve = !1;
                    break;
                case"G":
                    Ne = ke, ve = !1;
                    break;
                case"BG":
                    Ne = we, ve = !0;
                    break;
                case"RG":
                    Ne = Me, ve = !0;
                    break;
                default:
                    ve = !1;
                    break
            }
            if (Ce == "cockroach_road") {
                L(Y, Ne, H, me * .7, ce, ie, Be, !0);
                return
            }
            Y.strokeStyle = Ne, Y.beginPath(), Y.arc(ce, ie, me, 0, 2 * Math.PI), Ce == "small_road" && (Y.fillStyle = Ne, Y.fill()), Y.lineWidth = Be, Y.stroke(), isIOS_1 ? (Y.save(), L(Y, ke, H, me, ce, ie, Be, ve), Y.restore()) : L(Y, ke, H, me, ce, ie, Be, ve)
        }

        return jsx("div", {
            ref: x,
            className: `canvas_container ${R.blinking ? "blinking" : ""}`,
            children: jsx("canvas", {
                ref: B,
                width: x.current ? ((D = x.current) == null ? void 0 : D.clientWidth) * C : 0,
                height: x.current ? ((z = x.current) == null ? void 0 : z.clientHeight) * C : 0,
                style: {
                    width: (F = x.current) == null ? void 0 : F.clientWidth,
                    height: (_e = x.current) == null ? void 0 : _e.clientHeight
                }
            })
        })
    }, useRenderRoadmap = r => {
        const R = React.useMemo(() => r, [r]),
            y = React.useMemo(() => JSON.parse(JSON.stringify(R.displayRoadMap)), [r.displayRoadMap]);
        return React.useMemo(() => {
            let C = y.slice(Math.max(0, y.length - (R.size.x - 1))), x = y.length - C.length;
            return Array(R.size.x * R.size.y).fill(void 0).map((B, N) => {
                let L = Math.floor(N / R.size.y), O = N % R.size.y, D = C[L] && C[L][O];
                return jsx("div", {
                    children: D && jsx("div", {
                        "data-text": D.match(REGEX.NUM),
                        className: `${D}${JSON.stringify([L + x, O]) === JSON.stringify(R.lastGrid) && R.asking ? " asking" : ""}`
                    })
                }, N)
            })
        }, [y])
    };

function useRenderRoadMapWithStrategy(r, R) {
    if (r === "canvas") return useRenderRoadMapWithCanvas(R);
    if (r === "dom") return useRenderRoadmap(R)
}

const parseBaccaratRoadData = r => {
        if (r.length === 0) return [];
        let R = r[0];
        const y = {0: "G", 1: "R", 2: "B"};
        return R.map(C => {
            let x = C.charAt(0), B = C.charAt(3), N = y[x], L = C.charAt(N === "B" ? 2 : 1),
                O = `${["1", "3", "4", "6"].includes(B) ? "r" : ""}${["2", "3", "5", "6"].includes(B) ? "b" : ""}`;
            return `${L}${N}${O}`
        })
    }, parseDragonTigerRoadData = r => {
        if (r.length === 0) return [];
        let R = r[0];
        const y = {0: "G", 1: "R", 2: "B"};
        return R.map(C => {
            let x = C.charAt(0), B = y[x];
            return `${C.charAt(B === "B" ? 2 : 1)}${B}`
        })
    }, parseWin3CardsRoadData = r => {
        if (r.length === 0) return [];
        let R = r[0];
        const y = {0: "G", 1: "B", 2: "R"};
        return R.map(C => {
            let x = C.charAt(0), B = y[x], N = C.charAt(1), L = C.charAt(2), O = C.charAt(3), D = C.charAt(4);
            return `${B}${N}${L}${O}${D}`
        })
    }, parseThreePicturesRoadData = r => {
        if (r.length < 2) return [];
        let R = r[1];
        const y = {0: "G", 1: "B", 2: "R"};
        return R.map(C => {
            let x = C.charAt(0), B = y[x], N = C.charAt(1), L = C.charAt(2), O = C.charAt(3), D = C.charAt(4);
            return `${B}${N}${L}${O}${D}`
        })
    }, parseTeenPattiRoadData = (r, R = 0) => {
        if (r.length === 0) return [];
        let y = r[R];
        const E = {0: "G", 1: "B", 2: "R"};
        return y.map(x => {
            let B = x.charAt(0), N = E[B], L = x.charAt(1), O = x.charAt(2), D = x.charAt(3);
            return `${N}${L}${O}${D}`
        })
    }, parseBullBullRoadData = r => {
        if (r.length === 0) return [];
        let R = r[0];
        const y = {[0]: "111", [1]: "000", [2]: "100", [3]: "110", [4]: "101", [5]: "010", [6]: "011", [7]: "001"};
        return R.map(C => {
            let x = parseInt(y[C.charAt(0)], 2), B = C.charAt(1), N = C.charAt(2), L = C.charAt(3), O = C.charAt(4);
            return `${x}${B}${N}${L}${O}`
        })
    }, parseAndarBaharRoadData = r => {
        if (r.length === 0) return [];
        let R = r[0];
        const y = {0: "B", 1: "R"};
        return R.map(C => {
            let x = C.charAt(0), B = y[x], N = C.charAt(1) === "0" ? "" : "F", L = C.charCodeAt(4);
            return L <= "9".charCodeAt(0) ? L = L - 48 : L <= "Z".charCodeAt(0) ? L -= 55 : L <= "n".charCodeAt(0) && (L -= 61), `${B}${N}${L}`
        })
    }, parseRouletteRoadData = r => r.length === 0 ? [] : r[0].map(E => {
        let C = E.charCodeAt(0);
        C <= "9".charCodeAt(0) ? C = C - 48 : C <= "Z".charCodeAt(0) ? C -= 55 : C <= "a".charCodeAt(0) && (C -= 61);
        let x = ["1", "2"].includes(E[1]) ? "S" : "B", B = ["2", "4"].includes(E[1]) ? "E" : "O",
            N = RED.includes(C) ? "r" : "b";
        return `${x}${B}${N}${C}`
    }), parsePokdengRoadData = r => {
        if (r.length === 0) return [];
        let R = r[0];
        const y = {0: "G", 1: "B", 2: "R"}, E = x => {
            switch (x) {
                case"1":
                    return "P";
                case"2":
                    return "F";
                case"3":
                    return "A";
                default:
                    return "N"
            }
        };
        return R.map(x => {
            let B = x.charAt(0), N = E(x.charAt(1)), L = [];
            for (let O = 0; O < 5; O++) {
                let D = y[x.charAt(O * 3 + 2)], z = x.charAt(O * 3 + 3), F = E(x.charAt(O * 3 + 4));
                L.push(`${D}${z}${F}`)
            }
            return `${B}${N},${L.join()}`
        })
    }, parseSicboRoadData = r => {
        if (r.length === 0) return [];
        let R = r[0];
        const y = ["T", "S", "S", "B", "B"];
        return R.map(C => `${C[1]}${C[2]}${C[3]}${y[parseInt(C[4])]}`)
    }, parseHiLoRoadData = r => {
        if (r.length === 0) return [];
        let R = r[1];
        const y = ["L", "E", "H"];
        return R.map(C => `${C[1]}${C[2]}${C[3]}${y[parseInt(C[4]) - 1]}`)
    }, parseSictanRoadData = r => r.length === 0 ? [] : r[2].map(E => `${E[1]}${E[2]}${E[3]}${E[5]}`),
    parseXicDiaRoadData = r => r.length === 0 ? [] : r[0].map(E => `${XOC_DIA_TIE_SMALL_BIG[parseInt(E[0])]}${E[1]}${E[2]}`),
    parseCasinoWarRoadData = r => {
        if (r.length === 0) return [];
        let R = r[0];
        const y = {0: "B", 1: "R", 2: "B", 3: "B", 4: "R"}, E = B => {
            switch (B) {
                case"0":
                case"1":
                    return 0;
                case"2":
                case"4":
                    return 1;
                case"3":
                    return 2;
                default:
                    return 0
            }
        }, C = (B, N) => `${y[B.charAt(N)]}${E(B.charAt(N))}`;
        return R.map(B => `${C(B, 0)}${C(B, 1)}${C(B, 2)}${B.slice(3)}`)
    }, parseFPCRoadData = r => {
        if (r.length === 0) return [];
        let R = r[0];
        const y = ["R", "G", "B"];
        return R.map(C => `${C[0]}${C[1]}${C[2]}${y[C[3]]}${y[C[4]]}${y[C[5]]}`)
    };
var ROAD_COLOR = (r => (r.R = "R", r.B = "B", r))(ROAD_COLOR || {}),
    BACCARAT_WINNER = (r => (r.T = "G", r.B = "R", r.P = "B", r))(BACCARAT_WINNER || {}),
    BACCARAT_PAIR = (r => (r.B = "r", r.P = "b", r))(BACCARAT_PAIR || {}),
    DRAGON_TIGER_WINNER = (r => (r.T = "G", r.D = "R", r.TR = "B", r))(DRAGON_TIGER_WINNER || {}),
    WIN3CARDS_WINNER = (r => (r.T = "G", r.P = "R", r.D = "B", r))(WIN3CARDS_WINNER || {}),
    THREE_PICTURES_WINNER = (r => (r.T = "G", r.P = "R", r.D = "B", r))(THREE_PICTURES_WINNER || {}),
    TEEN_PATTI_WINNER = (r => (r.T = "G", r.B = "R", r.A = "B", r))(TEEN_PATTI_WINNER || {}),
    ANDAR_BAHAR_WINNER = (r => (r.A = "B", r.B = "R", r))(ANDAR_BAHAR_WINNER || {}),
    XOC_DIA_TIE_SMALL_BIG = (r => (r[r.G = 0] = "G", r[r.B = 1] = "B", r[r.R = 2] = "R", r))(XOC_DIA_TIE_SMALL_BIG || {});
const useDtBigRoadmap = (r, R, y) => {
        const [E, C] = React.useState([]), x = React.useRef([-1, -1]), B = React.useRef([]), N = React.useRef([]),
            L = useRenderRoadMapWithStrategy(r.renderWithCanvas ? "canvas" : "dom", {
                size: r.size,
                displayRoadMap: E,
                lastGrid: x.current,
                asking: !!R,
                blinking: y
            });
        return React.useEffect(() => {
            y && R.length < 0 || (initBigRoadMap(r.size, r.roadMap, R, x, B, N), C(JSON.parse(JSON.stringify(B.current))))
        }, [r.roadMap]), React.useEffect(() => {
            R == "" && (initBigRoadMap(r.size, r.roadMap, R, x, B, N), C(JSON.parse(JSON.stringify(B.current))))
        }, [R]), L
    }, useBaccaratBigRoadmap = (r, R, y) => {
        const [E, C] = React.useState([]), x = React.useRef([-1, -1]), B = React.useRef([]), N = React.useRef([]),
            L = useRenderRoadMapWithStrategy(r.renderWithCanvas ? "canvas" : "dom", {
                size: r.size,
                displayRoadMap: E,
                lastGrid: x.current,
                asking: !!R,
                blinking: y
            });
        return React.useEffect(() => {
            y && R.length < 0 || (initBigRoadMap(r.size, r.roadMap, R, x, B, N), C(JSON.parse(JSON.stringify(B.current))))
        }, [r.roadMap]), React.useEffect(() => {
            R == "" && (initBigRoadMap(r.size, r.roadMap, R, x, B, N), C(JSON.parse(JSON.stringify(B.current))))
        }, [R]), L
    }, BaccaratGameTable$1 = "", Responsive$t = "", RoadMapMovedContext$3 = React.createContext(!1),
    AskingRoadContext$3 = React.createContext(""), BaccaratGameTable = () => {
        const {t: r} = useTranslation(), {
                gameTableInfo: R,
                getUpdatedBetStatistics: y
            } = React.useContext(GameTableContext), {gameStatus: E} = React.useContext(GameTableStatusContext), {addMessage: C} = React.useContext(ToastContext), {
                play: x,
                sound: B
            } = React.useContext(SoundContext), N = React.useContext(GameTableBetStateContext), {
                orientation: L,
                isForceLandscape: O
            } = useDeviceOrientation(), [D, z] = React.useState(""), [F, _e] = React.useState([]), [Y, H] = React.useState([]), [me, ce] = React.useState(Array(4).fill({
                people: 0,
                amounts: 0
            })),
            ie = useRoadMap(R.tableInfo.tableId, R.tableInfo.currentShoeGameResult, parseBaccaratRoadData), [Be, ve] = React.useState(""),
            Re = React.useRef(null), Ce = useRoadMovedListener(Re), Ne = React.useMemo(() => {
                let Me = ie.join("").replace(/[\drbG]/g, "").match(REGEX.GROUP_SIDE);
                return Me ? Me.reduce((ke, Fe) => (ke.push({side: Fe[0], wins: Fe.length}), ke), []) : []
            }, [ie]);
        React.useEffect(() => {
            _e([]), H([])
        }, [R.tableInfo.tableId]), React.useEffect(() => {
            if (R.tableInfo.tableId !== -1) {
                let Me = y();
                Me ? (Me[BACCARAT_BET_TYPE.BANKER].people += Me[BACCARAT_BET_TYPE.BANKER_NO_COMM].people, Me[BACCARAT_BET_TYPE.BANKER].amounts += Me[BACCARAT_BET_TYPE.BANKER_NO_COMM].amounts, Me = Me.filter((ke, Fe) => [0, 1, 2].includes(Fe))) : Me = me.map(ke => ({
                    people: 0,
                    amounts: 0
                })), JSON.stringify(Me) !== JSON.stringify(me) && ce(Me)
            }
        }, [R]), React.useEffect(() => {
            if (E.tableId !== -1) {
                if (E.rawGameResult) {
                    if (JSON.stringify(E.rawGameResult[0]) !== JSON.stringify(Y) && (E.rawGameResult[0].some(Me => Me !== "-2") && x({id: "card_flip"}), H(E.rawGameResult[0].slice())), JSON.stringify(E.rawGameResult[1]) !== JSON.stringify(F)) {
                        E.rawGameResult[1].some(ke => ke !== "-2") && x({id: "card_flip"});
                        let Me = E.rawGameResult[1].slice();
                        _e(Me)
                    }
                } else N === BET_STATE.BETTING && (H([]), _e([]));
                if (E.currentGameRoundWinResult) {
                    let Me = E.currentGameRoundWinResult[0][0];
                    if (Me === "-1") z(""); else {
                        const ke = {0: r("bet_type.1003"), 1: r("bet_type.1001"), 2: r("bet_type.1002")},
                            Fe = {0: TOAST_COLOR.GREEN, 1: TOAST_COLOR.RED, 2: TOAST_COLOR.BLUE};
                        z(Me), C(ke[Me[0]], Fe[Me[0]], 4), (async () => {
                            switch (x({id: `banker_${Me[1]}`}), await new Promise(Ve => setTimeout(Ve, B.sound._sprite[`banker_${Me[1]}`][1] + 250)), x({id: `player_${Me[2]}`}), await new Promise(Ve => setTimeout(Ve, B.sound._sprite[`player_${Me[2]}`][1] + 250)), Me[0]) {
                                case"0":
                                    x({id: "tie"});
                                    break;
                                case"1":
                                    x({id: "banker_win"});
                                    break;
                                case"2":
                                    x({id: "player_win"});
                                    break
                            }
                        })()
                    }
                }
            }
        }, [E, N]);
        const we = (Me, ke) => {
            ve(Be !== Me ? Me : "")
        };
        return jsxs(Fragment, {
            children: [jsxs(AskingRoadContext$3.Provider, {
                value: Be,
                children: [!O && jsx("div", {
                    id: "road_stats",
                    children: jsx(BaccaratRoadStatistics, {roadMap: ie, onAsk: we, bigRoadConsecutiveList: Ne})
                }), isMobile$1 && L.includes("short-portrait") && jsx(RoadMapMovedContext$3.Provider, {
                    value: Ce,
                    children: jsxs("div", {
                        id: "roads_list",
                        ref: Re,
                        children: [jsx(BaccaratBeadRoad, {
                            size: {x: 23, y: 6},
                            roadMap: ie
                        }), jsx(BaccaratDetailedRoads, {roadMap: ie, onAsk: we, bigRoadConsecutiveList: Ne})]
                    })
                }), jsxs("div", {
                    id: "bet_area",
                    children: [jsx(GameTableName, {}), jsx(BaccaratBetTable, {
                        betStatistics: me,
                        roadMap: ie,
                        playerCards: F,
                        bankerCards: Y,
                        winResult: D
                    })]
                }), (isDesktop$1 || !L.includes("short-portrait")) && jsxs(Fragment, {
                    children: [jsx("div", {
                        id: "bead_road",
                        children: jsx(BaccaratBeadRoad, {
                            size: {
                                x: isDesktop$1 ? 16 : L === "small-landscape" ? 11 : 23,
                                y: 6
                            }, roadMap: ie
                        })
                    }), jsx("div", {
                        id: "detailed_road",
                        children: jsx(BaccaratDetailedRoads, {roadMap: ie, onAsk: we, bigRoadConsecutiveList: Ne})
                    })]
                })]
            }), jsx(BaccaratPlayType, {}), isMobile$1 && jsx(CommissionToggle, {})]
        })
    }, map$4 = {G: "tie", R: "banker", B: "player"}, BaccaratBeadRoad = r => {
        const {t: R} = useTranslation(), [y, E] = React.useState(0), C = React.useContext(AskingRoadContext$3);
        return jsx(Fragment, {
            children: jsxs("article", {
                className: "bead_road",
                style: {"--columns": r.size.x, "--rows": r.size.y},
                onClick: () => E((y + 1) % 2),
                children: [r.roadMap.slice(Math.max(0, r.roadMap.length - (r.size.x - 1) * r.size.y)).map((x, B) => jsx("div", {
                    children: jsx("div", {
                        className: x,
                        children: jsx("svg", {
                            viewBox: "0 0 10 10",
                            children: jsx("text", {
                                x: "50%",
                                y: "50%",
                                children: y === 0 ? R(`roadmap.baccarat.${map$4[x[1]]}`) : x[0]
                            })
                        })
                    })
                }, B)), C && jsx("div", {
                    children: jsx("div", {
                        className: `${C} asking`,
                        children: y === 0 && jsx("svg", {
                            viewBox: "0 0 10 10",
                            children: jsx("text", {x: "50%", y: "50%", children: R(`roadmap.baccarat.${map$4[C]}`)})
                        })
                    })
                }), Array(r.size.x * r.size.y - Math.min(r.roadMap.length + (C ? 1 : 0), (r.size.x - 1) * r.size.y)).fill(void 0).map((x, B) => jsx("div", {}, B))]
            })
        })
    }, BaccaratBigRoad = r => {
        const [R, y] = React.useContext(ZoomContext$4), E = React.useContext(AskingRoadContext$3),
            C = React.useContext(RoadMapMovedContext$3);
        let {rerender: x} = useRerender();
        const B = useBaccaratBigRoadmap(r, E, !1),
            N = r.renderWithCanvas ? useBaccaratBigRoadmap(r, E, !0) : jsx(Fragment, {});
        return jsx(Fragment, {
            children: jsxs("article", {
                className: "big_road",
                style: {"--columns": r.size.x, "--rows": r.size.y},
                onClick: () => !C && y(R === "Big" ? void 0 : "Big"),
                "aria-checked": R === "Big",
                children: [r.allowZoom && isDesktop$1 && jsx(Tooltip, {
                    className: "roads_layout_tooltip",
                    children: jsx("div", {className: R === "Big" ? "svg_zoom_out" : "svg_zoom_in"})
                }), !!E && N, B]
            }, x)
        })
    }, offsetCol$e = 1, BaccaratBigEyeRoad = r => {
        const [R, y] = React.useContext(ZoomContext$4), E = React.useContext(AskingRoadContext$3),
            C = React.useContext(RoadMapMovedContext$3), [x, B] = React.useState([]), N = React.useRef([]),
            L = React.useRef([-1, -1]), O = React.useRef([]),
            D = useRenderRoadmap({size: r.size, displayRoadMap: x, lastGrid: L.current, asking: !!E});
        return React.useEffect(() => {
            initDetailedRoadMap(r.size, offsetCol$e, E, L, N, O, r.bigRoadConsecutiveList), B(JSON.parse(JSON.stringify(N.current)))
        }, [r.bigRoadConsecutiveList, E]), jsxs("article", {
            className: "big_eye_road",
            style: {"--columns": r.size.x, "--rows": r.size.y},
            onClick: () => !C && y(R === "Big_Eye" ? void 0 : "Big_Eye"),
            "aria-checked": R === "Big_Eye",
            children: [r.allowZoom && isDesktop$1 && jsx(Tooltip, {
                className: "roads_layout_tooltip",
                children: jsx("div", {className: R === "Big_Eye" ? "svg_zoom_out" : "svg_zoom_in"})
            }), D]
        })
    }, offsetCol$d = 2, BaccaratSmallRoad = r => {
        const [R, y] = React.useContext(ZoomContext$4), E = React.useContext(AskingRoadContext$3),
            C = React.useContext(RoadMapMovedContext$3), [x, B] = React.useState([]), N = React.useRef([]),
            L = React.useRef([-1, -1]), O = React.useRef([]),
            D = useRenderRoadmap({size: r.size, displayRoadMap: x, lastGrid: L.current, asking: !!E});
        return React.useEffect(() => {
            initDetailedRoadMap(r.size, offsetCol$d, E, L, N, O, r.bigRoadConsecutiveList), B(JSON.parse(JSON.stringify(N.current)))
        }, [r.bigRoadConsecutiveList, E]), jsxs("article", {
            className: "small_road",
            style: {"--columns": r.size.x, "--rows": r.size.y},
            onClick: () => !C && y(R === "Small" ? void 0 : "Small"),
            "aria-checked": R === "Small",
            children: [r.allowZoom && isDesktop$1 && jsx(Tooltip, {
                className: "roads_layout_tooltip",
                children: jsx("div", {className: R === "Small" ? "svg_zoom_out" : "svg_zoom_in"})
            }), D]
        })
    }, offsetCol$c = 3, BaccaratCockroachRoad = r => {
        const [R, y] = React.useContext(ZoomContext$4), E = React.useContext(AskingRoadContext$3),
            C = React.useContext(RoadMapMovedContext$3), [x, B] = React.useState([]), N = React.useRef([]),
            L = React.useRef([-1, -1]), O = React.useRef([]),
            D = useRenderRoadmap({size: r.size, displayRoadMap: x, lastGrid: L.current, asking: !!E});
        return React.useEffect(() => {
            initDetailedRoadMap(r.size, offsetCol$c, E, L, N, O, r.bigRoadConsecutiveList), B(JSON.parse(JSON.stringify(N.current)))
        }, [r.bigRoadConsecutiveList, E]), jsxs("article", {
            className: "cockroach_road",
            style: {"--columns": r.size.x, "--rows": r.size.y},
            onClick: () => !C && y(R === "Cockroach" ? void 0 : "Cockroach"),
            "aria-checked": R === "Cockroach",
            children: [r.allowZoom && isDesktop$1 && jsx(Tooltip, {
                className: "roads_layout_tooltip",
                children: jsx("div", {className: R === "Cockroach" ? "svg_zoom_out" : "svg_zoom_in"})
            }), D]
        })
    }, Responsive$s = "", BaccaratRoadStatistics = r => {
        var B, N, L, O, D, z;
        const {t: R} = useTranslation(), y = React.useContext(AskingRoadContext$3),
            E = React.useCallback(F => r.roadMap.filter(Y => Y.includes(F)).length, [r.roadMap]),
            C = React.useCallback((F, _e) => {
                const Y = [-1, -1], H = [], me = (Be, ve) => {
                    let Re = Ce => {
                        if (!H.flat(2).length) addToCol({roadMap: H, col: 0, road: Ce, sizeX: 16, lastGrid: Y}); else {
                            const Ne = H.map(we => we[0]).findLastIndex(we => we !== void 0);
                            addToCol({roadMap: H, col: Ne + 1, road: Ce, sizeX: 16, lastGrid: Y})
                        }
                    };
                    r.bigRoadConsecutiveList[Be - _e].wins === ve - 1 || ve === 1 && r.bigRoadConsecutiveList[Be - (_e + 1)].wins !== r.bigRoadConsecutiveList[Be - 1].wins ? Re(ROAD_COLOR.B) : Re(ROAD_COLOR.R)
                };
                let ce = JSON.parse(JSON.stringify(r.bigRoadConsecutiveList)), ie = ce.length - 1;
                return ie >= 0 && F === ce[ie].side ? ce[ie].wins = ce[ie].wins + 1 : ce.push({
                    side: F,
                    wins: 1
                }), ce.forEach((Be, ve) => {
                    if (!(ve < _e)) for (let Re = 1; Re <= Be.wins; Re++) ve === _e && Re === 1 || me(ve, Re)
                }), H
            }, [r.bigRoadConsecutiveList]), x = React.useCallback(F => {
                switch (F) {
                    case"B":
                        return "blue";
                    case"R":
                        return "red";
                    default:
                        return "none"
                }
            }, []);
        return jsxs("section", {
            className: "road_statistics",
            id: "baccarat_road_statistics",
            children: [jsxs("div", {
                children: [jsx("div", {children: "#"}), jsx("div", {children: r.roadMap.length}), jsx(Tooltip, {
                    className: "road_statistics_tooltip",
                    children: R("roadmap.round_num")
                })]
            }), jsxs("div", {
                children: [jsx("div", {
                    className: "player",
                    children: R("roadmap.baccarat.player")
                }), jsx("div", {children: E(BACCARAT_WINNER.P)}), jsx(Tooltip, {
                    className: "road_statistics_tooltip",
                    children: R("detailed_bet_type.1002")
                })]
            }), jsxs("div", {
                children: [jsx("div", {
                    className: "banker",
                    children: R("roadmap.baccarat.banker")
                }), jsx("div", {children: E(BACCARAT_WINNER.B)}), jsx(Tooltip, {
                    className: "road_statistics_tooltip",
                    children: R("detailed_bet_type.1001")
                })]
            }), jsxs("div", {
                children: [jsx("div", {
                    className: "tie",
                    children: R("roadmap.baccarat.tie")
                }), jsx("div", {children: E(BACCARAT_WINNER.T)}), jsx(Tooltip, {
                    className: "road_statistics_tooltip",
                    children: R("detailed_bet_type.1003")
                })]
            }), jsxs("div", {
                children: [jsx("div", {className: "player pair"}), jsx("div", {children: E(BACCARAT_PAIR.P)}), jsx(Tooltip, {
                    className: "road_statistics_tooltip",
                    children: R("detailed_bet_type.1007")
                })]
            }), jsxs("div", {
                children: [jsx("div", {className: "banker pair"}), jsx("div", {children: E(BACCARAT_PAIR.B)}), jsx(Tooltip, {
                    className: "road_statistics_tooltip",
                    children: R("detailed_bet_type.1006")
                })]
            }), jsxs("button", {
                className: "ask_road blue",
                onClick: () => r.onAsk(y === BACCARAT_WINNER.P ? "" : BACCARAT_WINNER.P),
                onMouseLeave: () => r.onAsk(""),
                children: [jsx("div", {children: "?"}), jsx("div", {className: `ring ${x((B = C(BACCARAT_WINNER.P, 1).slice(-1)[0]) == null ? void 0 : B.pop())}`}), jsx("div", {className: `dot ${x((N = C(BACCARAT_WINNER.P, 2).slice(-1)[0]) == null ? void 0 : N.pop())}`}), jsx("div", {className: `slash ${x((L = C(BACCARAT_WINNER.P, 3).slice(-1)[0]) == null ? void 0 : L.pop())}`}), jsx(Tooltip, {
                    className: "road_statistics_tooltip",
                    children: R("roadmap.baccarat.predict_player")
                })]
            }), jsxs("button", {
                className: "ask_road red",
                onClick: () => r.onAsk(y === BACCARAT_WINNER.B ? "" : BACCARAT_WINNER.B),
                onMouseLeave: () => r.onAsk(""),
                children: [jsx("div", {children: "?"}), jsx("div", {className: `ring ${x((O = C(BACCARAT_WINNER.B, 1).slice(-1)[0]) == null ? void 0 : O.pop())}`}), jsx("div", {className: `dot ${x((D = C(BACCARAT_WINNER.B, 2).slice(-1)[0]) == null ? void 0 : D.pop())}`}), jsx("div", {className: `slash ${x((z = C(BACCARAT_WINNER.B, 3).slice(-1)[0]) == null ? void 0 : z.pop())}`}), jsx(Tooltip, {
                    className: "road_statistics_tooltip",
                    children: R("roadmap.baccarat.predict_banker")
                })]
            })]
        })
    }, ZoomContext$3 = React.createContext([void 0, () => {
    }]), DragonTigerDetailedRoads = r => {
        const [R, y] = React.useState([]);
        React.useEffect(() => {
            let B = r.roadMap.slice();
            JSON.stringify(R) !== JSON.stringify(B) && y(B)
        }, [r.roadMap]);
        const {orientation: E} = useDeviceOrientation(), [C, x] = React.useState();
        return jsxs("div", {
            className: "detailed_roads",
            children: [(isDesktop$1 || E.includes("landscape")) && jsx(DragonTigerRoadStatistics, {
                roadMap: r.roadMap,
                onAsk: r.onAsk,
                bigRoadConsecutiveList: r.bigRoadConsecutiveList
            }), jsx("section", {
                className: "roads_layout",
                "aria-checked": !!C,
                children: jsxs(ZoomContext$3.Provider, {
                    value: [C, x],
                    children: [(C === "Big" || !C) && jsx(DragonTigerBigRoad, {
                        size: {
                            x: isMobile$1 && E === "small-landscape" ? 15 : C === "Big" ? 18 : 28,
                            y: 6
                        }, roadMap: R.map(B => B[1]), allowZoom: !0
                    }), (C === "Big_Eye" || !C) && jsx(DragonTigerBigEyeRoad, {
                        size: {
                            x: E === "small-landscape" ? 16 : 18,
                            y: 6
                        }, bigRoadConsecutiveList: r.bigRoadConsecutiveList
                    }), (C === "Small" || !C) && jsx(DragonTigerSmallRoad, {
                        size: {
                            x: E === "small-landscape" ? 16 : 18,
                            y: 6
                        }, bigRoadConsecutiveList: r.bigRoadConsecutiveList
                    }), (C === "Cockroach" || !C) && jsx(DragonTigerCockroachRoad, {
                        size: {
                            x: E === "small-landscape" ? 16 : 18,
                            y: 6
                        }, bigRoadConsecutiveList: r.bigRoadConsecutiveList
                    })]
                })
            })]
        })
    }, Responsive$r = "", DragonTigerBetTable = r => {
        const {t: R} = useTranslation(), y = useAvailableChips(), {settings: E} = React.useContext(SettingsContext),
            C = React.useContext(GameTableBetContext), x = React.useContext(GameTableBetStateContext),
            B = React.useContext(GameTablePendingBetAmountContext), N = React.useContext(GameTableBetAmountContext),
            L = React.useContext(GameTablePayoutContext), O = React.useContext(ScalableContainerScaleContext),
            D = useDisplayCurrency(), {
                orientation: z,
                isForceLandscape: F
            } = useDeviceOrientation(), [_e, Y] = React.useState(Object.values(DRAGON_TIGER_BET_TYPE).map(we => ({
                color: y[0].color,
                amount: Helper.formatAbbrMoney(N[we])
            }))), H = useChips({chipAttrs: _e, flat: F && x === BET_STATE.NO_BET}),
            me = useBetChip(L, N, B, H), [ce, ie] = React.useState(Object.fromEntries(Object.keys(DRAGON_TIGER_BET_TYPE).filter(we => !Number.isNaN(parseInt(we))).map(we => [we, !1]))),
            Be = Helper.useOdds(), ve = React.useCallback(() => {
                switch (x) {
                    case BET_STATE.BETTING:
                        return "betting";
                    case BET_STATE.NO_BET:
                        return "no_bet"
                }
            }, [x]);
        useBetAmountUpdateChipEffect(N, B, _e, Y), usePayoutUpdateChipEffect(N, B, L, _e, Y);
        const Re = useBet(N, x, DRAGON_TIGER_BET_TYPE_MAP, C);
        React.useEffect(() => {
            let we = Object.fromEntries(Object.keys(DRAGON_TIGER_BET_TYPE).filter(ke => !Number.isNaN(parseInt(ke))).map(ke => [ke, !1]));
            const Me = {0: DRAGON_TIGER_BET_TYPE.TIE, 1: DRAGON_TIGER_BET_TYPE.DRAGON, 2: DRAGON_TIGER_BET_TYPE.TIGER};
            we[Me[r.winResult[0]]] = !0, ie(we)
        }, [r.winResult]);
        const Ce = React.useCallback(we => {
            if (r.betStatistics[we].amounts === 0) return 0;
            let Me = r.betStatistics.map(Fe => Fe.amounts), ke = Me.reduce((Fe, $e) => Fe + $e, 0);
            return we !== DRAGON_TIGER_BET_TYPE.TIE ? Math.round(Me[we] / ke * 100) : 100 - Ce(DRAGON_TIGER_BET_TYPE.TIGER) - Ce(DRAGON_TIGER_BET_TYPE.DRAGON)
        }, [r.betStatistics]), Ne = React.useCallback((we, Me, ke, Fe, $e, Ve, Je) => jsxs("button", {
            className: `${we} main_bet`,
            style: {gridArea: Me},
            onClick: () => Re([Fe]),
            "aria-checked": ce[Fe],
            children: [Me !== "tie" && jsx("div", {className: `svg_table_${Me}`}), (isDesktop$1 || x === BET_STATE.BETTING) && E.showBettingStatistics && jsxs("div", {
                className: "bet_area_statistcis",
                children: [jsx(Statistic, {
                    percentage: Ce(Fe),
                    color: ke,
                    size: isDesktop$1 ? 46 : z.includes("portrait") ? 30 : 20 / O
                }), jsx("div", {children: Helper.formatCurrency(D, Helper.formatMoney(r.betStatistics[Fe].amounts / 100))}), jsxs("div", {
                    className: "bet_total",
                    children: [jsx("div", {className: "svg_person"}), r.betStatistics[Fe].people]
                })]
            }), Je && Me !== "tie" ? jsx("div", {
                className: "bet_area_results",
                children: x === BET_STATE.NO_BET && jsx(DragonTigerGameResults, {side: Me, result: Je[0]})
            }) : jsx("div", {}), jsxs("div", {
                className: "bet_area_info",
                children: [jsx("div", {className: "title", children: R(`bet_type.${$e}`)}), jsx("div", {
                    className: "odds",
                    children: Be(Ve)
                })]
            }), me(Fe)]
        }), [ce, x, me, r.betStatistics, H, C, x, E.showBettingStatistics, O, z]);
        return jsx(BetTable, {
            children: jsxs("div", {
                className: `bet_table_container dragon_tiger_bet_table ${ve()}`,
                children: [jsx("div", {className: "background"}), Ne("red", "dragon", "#FF9A8959", DRAGON_TIGER_BET_TYPE.DRAGON, BetType.DT_Dragon, 1, r.dragonCards), Ne("green", "tie", "#BCFF8959", DRAGON_TIGER_BET_TYPE.TIE, BetType.DT_Tie, 8), Ne("blue", "tiger", "#47B8FF59", DRAGON_TIGER_BET_TYPE.TIGER, BetType.DT_Tiger, 1, r.tigerCards)]
            })
        })
    }, DragonTigerGameTable$1 = "", Responsive$q = "", RoadMapMovedContext$2 = React.createContext(!1),
    AskingRoadContext$2 = React.createContext(""), DragonTigerGameTable = () => {
        const {t: r} = useTranslation(), {
                gameTableInfo: R,
                getUpdatedBetStatistics: y
            } = React.useContext(GameTableContext), {gameStatus: E} = React.useContext(GameTableStatusContext), {addMessage: C} = React.useContext(ToastContext), {
                play: x,
                sound: B
            } = React.useContext(SoundContext), N = React.useContext(GameTableBetStateContext), {
                orientation: L,
                isForceLandscape: O,
                aspectRatio: D
            } = useDeviceOrientation(), [z, F] = React.useState(""), [_e, Y] = React.useState([]), [H, me] = React.useState([]), [ce, ie] = React.useState(Array(3).fill({
                people: 0,
                amounts: 0
            })),
            Be = useRoadMap(R.tableInfo.tableId, R.tableInfo.currentShoeGameResult, parseDragonTigerRoadData), [ve, Re] = React.useState(""),
            Ce = React.useRef(null), Ne = useRoadMovedListener(Ce), we = React.useMemo(() => {
                let Fe = Be.map($e => $e[1]).join("").replace(DRAGON_TIGER_WINNER.T, "").match(REGEX.GROUP_SIDE);
                return Fe ? Fe.reduce(($e, Ve) => ($e.push({side: Ve[0], wins: Ve.length}), $e), []) : []
            }, [Be]);
        React.useEffect(() => {
            Y([]), me([])
        }, [R.tableInfo.tableId]), React.useEffect(() => {
            if (R.tableInfo.tableId !== -1) {
                let Fe = y();
                Fe ? Fe = Fe.filter(($e, Ve) => [0, 1, 2].includes(Ve)) : Fe = ce.map($e => ({
                    people: 0,
                    amounts: 0
                })), JSON.stringify(Fe) !== JSON.stringify(ce) && ie(Fe)
            }
        }, [R]), React.useEffect(() => {
            if (E.tableId !== -1) {
                const [Fe, $e] = [0, 1];
                if (E.rawGameResult) {
                    const Ve = `dragon_${parseInt(E.rawGameResult[Fe][0]) % 100}`,
                        Je = `tiger_${parseInt(E.rawGameResult[$e][0]) % 100}`;
                    JSON.stringify(E.rawGameResult[Fe]) !== JSON.stringify(H) && (E.rawGameResult[Fe].some(Qe => Qe !== "-2") && x({id: "card_flip"}), E.rawGameResult[Fe][0] !== "-2" && x({id: Ve}), me(E.rawGameResult[Fe].slice())), JSON.stringify(E.rawGameResult[$e]) !== JSON.stringify(_e) && (E.rawGameResult[$e].some(Qe => Qe !== "-2") && x({id: "card_flip"}), E.rawGameResult[$e][0] !== "-2" && setTimeout(() => x({id: Je}), B.sound._sprite[Ve][1] + 50), Y(E.rawGameResult[$e].slice()))
                } else N === BET_STATE.BETTING && (Y([]), me([]));
                if (E.currentGameRoundWinResult) {
                    let Ve = E.currentGameRoundWinResult[0][0];
                    if (Ve === "-1") F(""); else {
                        const Je = {0: r("bet_type.2003"), 1: r("bet_type.2001"), 2: r("bet_type.2002")},
                            Qe = {0: TOAST_COLOR.GREEN, 1: TOAST_COLOR.RED, 2: TOAST_COLOR.BLUE};
                        F(Ve), C(Je[Ve[0]], Qe[Ve[0]], 2), (async () => {
                            switch (Ve[0]) {
                                case"0":
                                    x({id: "tie"});
                                    break;
                                case"1":
                                    x({id: "dragon_win"});
                                    break;
                                case"2":
                                    x({id: "tiger_win"});
                                    break
                            }
                        })()
                    }
                }
            }
        }, [E, N]);
        const Me = (Fe, $e) => {
            Re(ve !== Fe ? Fe : "")
        }, ke = () => D() > 13 / 25;
        return jsx(Fragment, {
            children: jsxs(AskingRoadContext$2.Provider, {
                value: ve,
                children: [!O && jsx("div", {
                    id: "road_stats",
                    children: jsx(DragonTigerRoadStatistics, {roadMap: Be, onAsk: Me, bigRoadConsecutiveList: we})
                }), jsxs("div", {
                    id: "bet_area",
                    children: [jsx(GameTableName, {}), jsx(DragonTigerBetTable, {
                        betStatistics: ce,
                        tigerCards: _e,
                        dragonCards: H,
                        winResult: z
                    })]
                }), !isDesktop$1 && ke() && jsx(RoadMapMovedContext$2.Provider, {
                    value: Ne,
                    children: jsxs("div", {
                        id: "roads_list",
                        ref: Ce,
                        children: [jsx(DragonTigerBeadRoad, {
                            size: {
                                x: isDesktop$1 ? 16 : L === "small-landscape" ? 11 : 23,
                                y: 6
                            }, roadMap: Be
                        }), jsx(DragonTigerDetailedRoads, {roadMap: Be, onAsk: Me, bigRoadConsecutiveList: we})]
                    })
                }), (isDesktop$1 || !ke()) && jsxs(Fragment, {
                    children: [jsx("div", {
                        id: "bead_road",
                        children: jsx(DragonTigerBeadRoad, {
                            size: {
                                x: isDesktop$1 ? 16 : L === "small-landscape" ? 11 : 23,
                                y: 6
                            }, roadMap: Be
                        })
                    }), jsx("div", {
                        id: "detailed_road",
                        children: jsx(DragonTigerDetailedRoads, {roadMap: Be, onAsk: Me, bigRoadConsecutiveList: we})
                    })]
                })]
            })
        })
    }, map$3 = {G: "tie", R: "dragon", B: "tiger"}, DragonTigerBeadRoad = r => {
        const {t: R} = useTranslation(), [y, E] = React.useState(0), C = React.useContext(AskingRoadContext$2);
        return jsx(Fragment, {
            children: jsxs("article", {
                className: "bead_road",
                style: {"--columns": r.size.x, "--rows": r.size.y},
                onClick: () => E((y + 1) % 2),
                children: [r.roadMap.slice(Math.max(0, r.roadMap.length - (r.size.x - 1) * r.size.y)).map((x, B) => jsx("div", {
                    children: jsx("div", {
                        className: x[1],
                        children: jsx("svg", {
                            viewBox: "0 0 10 10",
                            children: jsx("text", {
                                x: "50%",
                                y: "50%",
                                children: y === 0 ? R(`roadmap.dragon_tiger.${map$3[x[1]]}`) : Helper.mapValueToPoker(x[0])
                            })
                        })
                    })
                }, B)), C && jsx("div", {
                    children: jsx("div", {
                        className: `${C} asking`,
                        children: y === 0 && jsx("svg", {
                            viewBox: "0 0 10 10",
                            children: jsx("text", {x: "50%", y: "50%", children: R(`roadmap.dragon_tiger.${map$3[C]}`)})
                        })
                    })
                }), Array(r.size.x * r.size.y - Math.min(r.roadMap.length + (C ? 1 : 0), (r.size.x - 1) * r.size.y)).fill(void 0).map((x, B) => jsx("div", {}, B))]
            })
        })
    }, DragonTigerBigRoad = r => {
        const [R, y] = React.useContext(ZoomContext$3), E = React.useContext(AskingRoadContext$2),
            C = React.useContext(RoadMapMovedContext$2);
        let {rerender: x} = useRerender();
        const B = useDtBigRoadmap(r, E, !1), N = r.renderWithCanvas ? useDtBigRoadmap(r, E, !0) : jsx(Fragment, {});
        return jsx(Fragment, {
            children: jsxs("article", {
                className: "big_road",
                style: {"--columns": r.size.x, "--rows": r.size.y},
                onClick: () => !C && y(R === "Big" ? void 0 : "Big"),
                "aria-checked": R === "Big",
                children: [r.allowZoom && isDesktop$1 && jsx(Tooltip, {
                    className: "roads_layout_tooltip",
                    children: jsx("div", {className: R === "Big" ? "svg_zoom_out" : "svg_zoom_in"})
                }), !!E && N, B]
            }, x)
        })
    }, offsetCol$b = 1, DragonTigerBigEyeRoad = r => {
        const [R, y] = React.useContext(ZoomContext$3), E = React.useContext(AskingRoadContext$2),
            C = React.useContext(RoadMapMovedContext$2), [x, B] = React.useState([]), N = React.useRef([]),
            L = React.useRef([-1, -1]), O = React.useRef([]),
            D = useRenderRoadmap({size: r.size, displayRoadMap: x, lastGrid: L.current, asking: !!E});
        return React.useEffect(() => {
            initDetailedRoadMap(r.size, offsetCol$b, E, L, N, O, r.bigRoadConsecutiveList), B(JSON.parse(JSON.stringify(N.current)))
        }, [r.bigRoadConsecutiveList, E]), jsxs("article", {
            className: "big_eye_road",
            style: {"--columns": r.size.x, "--rows": r.size.y},
            onClick: () => !C && y(R === "Big_Eye" ? void 0 : "Big_Eye"),
            "aria-checked": R === "Big_Eye",
            children: [isDesktop$1 && jsx(Tooltip, {
                className: "roads_layout_tooltip",
                children: jsx("div", {className: R === "Big_Eye" ? "svg_zoom_out" : "svg_zoom_in"})
            }), D]
        })
    }, offsetCol$a = 2, DragonTigerSmallRoad = r => {
        const [R, y] = React.useContext(ZoomContext$3), E = React.useContext(AskingRoadContext$2),
            C = React.useContext(RoadMapMovedContext$2), [x, B] = React.useState([]), N = React.useRef([]),
            L = React.useRef([-1, -1]), O = React.useRef([]),
            D = useRenderRoadmap({size: r.size, displayRoadMap: x, lastGrid: L.current, asking: !!E});
        return React.useEffect(() => {
            initDetailedRoadMap(r.size, offsetCol$a, E, L, N, O, r.bigRoadConsecutiveList), B(JSON.parse(JSON.stringify(N.current)))
        }, [r.bigRoadConsecutiveList, E]), jsxs("article", {
            className: "small_road",
            style: {"--columns": r.size.x, "--rows": r.size.y},
            onClick: () => !C && y(R === "Small" ? void 0 : "Small"),
            "aria-checked": R === "Small",
            children: [isDesktop$1 && jsx(Tooltip, {
                className: "roads_layout_tooltip",
                children: jsx("div", {className: R === "Small" ? "svg_zoom_out" : "svg_zoom_in"})
            }), D]
        })
    }, offsetCol$9 = 3, DragonTigerCockroachRoad = r => {
        const [R, y] = React.useContext(ZoomContext$3), E = React.useContext(AskingRoadContext$2),
            C = React.useContext(RoadMapMovedContext$2), [x, B] = React.useState([]), N = React.useRef([]),
            L = React.useRef([-1, -1]), O = React.useRef([]),
            D = useRenderRoadmap({size: r.size, displayRoadMap: x, lastGrid: L.current, asking: !!E});
        return React.useEffect(() => {
            initDetailedRoadMap(r.size, offsetCol$9, E, L, N, O, r.bigRoadConsecutiveList), B(JSON.parse(JSON.stringify(N.current)))
        }, [r.bigRoadConsecutiveList, E]), jsxs("article", {
            className: "cockroach_road",
            style: {"--columns": r.size.x, "--rows": r.size.y},
            onClick: () => !C && y(R === "Cockroach" ? void 0 : "Cockroach"),
            "aria-checked": R === "Cockroach",
            children: [isDesktop$1 && jsx(Tooltip, {
                className: "roads_layout_tooltip",
                children: jsx("div", {className: R === "Cockroach" ? "svg_zoom_out" : "svg_zoom_in"})
            }), D]
        })
    }, Responsive$p = "", DragonTigerRoadStatistics = r => {
        var B, N, L, O, D, z;
        const {t: R} = useTranslation(), y = React.useContext(AskingRoadContext$2),
            E = React.useCallback(F => r.roadMap.filter(Y => Y[1] === F).length, [r.roadMap]),
            C = React.useCallback((F, _e) => {
                const Y = [-1, -1], H = [], me = (Be, ve) => {
                    let Re = Ce => {
                        const Ne = Y[0] !== -1 && Y[1] !== -1 ? H[Y[0]][Y[1]] : void 0;
                        if (!H.flat(2).length) addToCol({
                            roadMap: H,
                            col: 0,
                            road: Ce,
                            sizeX: 16,
                            lastGrid: Y
                        }); else if (Ne !== Ce) {
                            const we = H.map(Me => Me[0]).findLastIndex(Me => Me !== void 0);
                            addToCol({roadMap: H, col: we + 1, road: Ce, sizeX: 16, lastGrid: Y})
                        } else {
                            const [we, Me] = Y;
                            let ke = Me < 6 - 1 && !H[we][Me + 1];
                            !(we > 0 && (we !== H.map($e => $e[0]).findLastIndex($e => $e && $e.includes(Ce)) || Me === 0 && H[we][Me] === H[we - 1][Me])) && ke ? addToCol({
                                roadMap: H,
                                col: we,
                                road: Ce,
                                sizeX: 16,
                                lastGrid: Y
                            }) : addToColBottom({roadMap: H, col: we + 1, road: Ce, sizeY: 6, lastGrid: Y})
                        }
                    };
                    r.bigRoadConsecutiveList[Be - _e].wins === ve - 1 || ve === 1 && r.bigRoadConsecutiveList[Be - (_e + 1)].wins !== r.bigRoadConsecutiveList[Be - 1].wins ? Re(ROAD_COLOR.B) : Re(ROAD_COLOR.R)
                };
                let ce = JSON.parse(JSON.stringify(r.bigRoadConsecutiveList)), ie = ce.length - 1;
                return ie >= 0 && F === ce[ie].side ? ce[ie].wins = ce[ie].wins + 1 : ce.push({
                    side: F,
                    wins: 1
                }), ce.forEach((Be, ve) => {
                    if (!(ve < _e)) for (let Re = 1; Re <= Be.wins; Re++) ve === _e && Re === 1 || me(ve, Re)
                }), H
            }, [r.bigRoadConsecutiveList]), x = React.useCallback(F => {
                switch (F) {
                    case"B":
                        return "blue";
                    case"R":
                        return "red";
                    default:
                        return "none"
                }
            }, []);
        return jsxs("section", {
            className: "road_statistics",
            id: "dragon_tiger_road_statistics",
            children: [jsxs("div", {
                children: [jsx("div", {children: "#"}), jsx("div", {children: r.roadMap.length}), jsx(Tooltip, {
                    className: "road_statistics_tooltip",
                    children: R("roadmap.round_num")
                })]
            }), jsxs("div", {
                children: [jsx("div", {
                    className: "player",
                    children: R("roadmap.dragon_tiger.tiger")
                }), jsx("div", {children: E(DRAGON_TIGER_WINNER.TR)}), jsx(Tooltip, {
                    className: "road_statistics_tooltip",
                    children: R("detailed_bet_type.2002")
                })]
            }), jsxs("div", {
                children: [jsx("div", {
                    className: "banker",
                    children: R("roadmap.dragon_tiger.dragon")
                }), jsx("div", {children: E(DRAGON_TIGER_WINNER.D)}), jsx(Tooltip, {
                    className: "road_statistics_tooltip",
                    children: R("detailed_bet_type.2001")
                })]
            }), jsxs("div", {
                children: [jsx("div", {
                    className: "tie",
                    children: R("roadmap.dragon_tiger.tie")
                }), jsx("div", {children: E(DRAGON_TIGER_WINNER.T)}), jsx(Tooltip, {
                    className: "road_statistics_tooltip",
                    children: R("detailed_bet_type.2003")
                })]
            }), jsxs("button", {
                className: "ask_road red",
                onClick: () => r.onAsk(y === DRAGON_TIGER_WINNER.D ? "" : DRAGON_TIGER_WINNER.D),
                onMouseLeave: () => r.onAsk(""),
                children: [jsx("div", {children: "?"}), jsx("div", {className: `ring ${x((B = C(DRAGON_TIGER_WINNER.D, 1).slice(-1)[0]) == null ? void 0 : B.pop())}`}), jsx("div", {className: `dot ${x((N = C(DRAGON_TIGER_WINNER.D, 2).slice(-1)[0]) == null ? void 0 : N.pop())}`}), jsx("div", {className: `slash ${x((L = C(DRAGON_TIGER_WINNER.D, 3).slice(-1)[0]) == null ? void 0 : L.pop())}`}), jsx(Tooltip, {
                    className: "road_statistics_tooltip",
                    children: R("roadmap.dragon_tiger.predict_dragon")
                })]
            }), jsxs("button", {
                className: "ask_road blue",
                onClick: () => r.onAsk(y === DRAGON_TIGER_WINNER.TR ? "" : DRAGON_TIGER_WINNER.TR),
                onMouseLeave: () => r.onAsk(""),
                children: [jsx("div", {children: "?"}), jsx("div", {className: `ring ${x((O = C(DRAGON_TIGER_WINNER.TR, 1).slice(-1)[0]) == null ? void 0 : O.pop())}`}), jsx("div", {className: `dot ${x((D = C(DRAGON_TIGER_WINNER.TR, 2).slice(-1)[0]) == null ? void 0 : D.pop())}`}), jsx("div", {className: `slash ${x((z = C(DRAGON_TIGER_WINNER.TR, 3).slice(-1)[0]) == null ? void 0 : z.pop())}`}), jsx(Tooltip, {
                    className: "road_statistics_tooltip",
                    children: R("roadmap.dragon_tiger.predict_tiger")
                })]
            })]
        })
    }, Win3CardsResultRoad = r => {
        const {t: R} = useTranslation();
        return jsx(Fragment, {
            children: jsxs("article", {
                className: "result_road",
                style: {"--columns": 1, "--rows": 2},
                children: [jsxs("div", {
                    className: "blue",
                    style: {"--columns": r.size},
                    children: [jsx("div", {children: R("roadmap.win3cards.dragon")}), r.dragonResults.slice(-r.size).map((y, E) => jsx("div", {
                        className: r.winner.slice(-r.size)[E] === WIN3CARDS_WINNER.D ? "win" : "lose",
                        children: `${R(`roadmap.win3cards.${y.split(" ")[0]}`)}${y.split(" ")[1] ? ` ${y.split(" ")[1]}` : ""}`
                    }, E)), Array(Math.max(r.size - r.dragonResults.length, 0)).fill(void 0).map((y, E) => jsx("div", {}, E))]
                }), jsxs("div", {
                    className: "red",
                    style: {"--columns": r.size},
                    children: [jsx("div", {children: R("roadmap.win3cards.phoenix")}), r.phoenixResults.slice(-r.size).map((y, E) => jsx("div", {
                        className: r.winner.slice(-r.size)[E] === WIN3CARDS_WINNER.P ? "win" : "lose",
                        children: `${R(`roadmap.win3cards.${y.split(" ")[0]}`)}${y.split(" ")[1] ? ` ${y.split(" ")[1]}` : ""}`
                    }, E)), Array(Math.max(r.size - r.phoenixResults.length, 0)).fill(void 0).map((y, E) => jsx("div", {}, E))]
                })]
            })
        })
    }, Win3CardsRoadStatistics = r => {
        const {t: R} = useTranslation(),
            y = React.useCallback(C => r.roadMap.map(B => B[0]).filter(B => B.includes(C)).length, [r.roadMap]),
            E = React.useMemo(() => r.roadMap.reduce((C, x) => {
                const B = (N, L) => {
                    switch (N) {
                        case"2":
                        case"3":
                        case"4":
                        case"5":
                        case"6":
                            return !0;
                        case"1":
                            return parseInt(L, 16) > 8 || parseInt(L, 16) === 1;
                        default:
                            return !1
                    }
                };
                return (B(x[1], x[2]) || B(x[3], x[4])) && C++, C
            }, 0), [r.roadMap]);
        return jsxs("section", {
            className: "road_statistics",
            id: "win3cards_road_statistics",
            children: [jsxs("div", {
                children: [jsx("div", {children: "#"}), jsx("div", {children: r.roadMap.length}), jsx(Tooltip, {
                    className: "road_statistics_tooltip",
                    children: R("roadmap.round_num")
                })]
            }), jsxs("div", {
                children: [jsx("div", {
                    className: "player",
                    children: R("roadmap.win3cards.dragon")
                }), jsx("div", {children: y(WIN3CARDS_WINNER.D)}), jsx(Tooltip, {
                    className: "road_statistics_tooltip",
                    children: R("detailed_bet_type.9001")
                })]
            }), jsxs("div", {
                children: [jsx("div", {
                    className: "banker",
                    children: R("roadmap.win3cards.phoenix")
                }), jsx("div", {children: y(WIN3CARDS_WINNER.P)}), jsx(Tooltip, {
                    className: "road_statistics_tooltip",
                    children: R("detailed_bet_type.9002")
                })]
            }), jsxs("div", {
                children: [jsx("div", {
                    className: "p8",
                    children: R("roadmap.win3cards.p8+")
                }), jsx("div", {children: E}), jsx(Tooltip, {
                    className: "road_statistics_tooltip",
                    children: R("detailed_bet_type.9003")
                })]
            })]
        })
    }, Win3CardsBigRoad = r => {
        const [R, y] = React.useState([]), E = React.useRef([]), C = React.useRef([-1, -1]), x = React.useRef([]),
            B = useRenderRoadMapWithStrategy(r.renderWithCanvas ? "canvas" : "dom", {
                size: r.size,
                displayRoadMap: R,
                lastGrid: C.current,
                asking: !1
            });
        let {rerender: N} = useRerender();
        return React.useEffect(() => {
            initBigRoadMap(r.size, r.roadMap, "", C, E, x), y(JSON.parse(JSON.stringify(E.current)))
        }, [r.roadMap]), jsx("article", {
            className: "big_road",
            style: {"--columns": r.size.x, "--rows": r.size.y},
            children: B
        }, N)
    }, ThreePicturesResultRoad = r => {
        const {t: R} = useTranslation();
        return jsx(Fragment, {
            children: jsxs("article", {
                className: "result_road",
                style: {"--columns": 1, "--rows": 2},
                children: [jsxs("div", {
                    className: "blue",
                    style: {"--columns": r.size},
                    children: [jsx("div", {children: R("roadmap.three_pictures.dragon")}), r.dragonResults.slice(-r.size).map((y, E) => jsx("div", {
                        className: r.winner.slice(-r.size)[E] === THREE_PICTURES_WINNER.D ? "win" : r.winner.slice(-r.size)[E] === THREE_PICTURES_WINNER.P ? "lose" : "tie",
                        children: `${y.split(" ").length === 2 ? `${R(`roadmap.three_pictures.${y.split(" ")[0]}`)} ${y.split(" ")[1]}` : y === "triple_pictures" ? R(`detailed_bet_type.additional_result.${y}`) : y}`
                    }, E)), Array(Math.max(r.size - r.dragonResults.length, 0)).fill(void 0).map((y, E) => jsx("div", {}, E))]
                }), jsxs("div", {
                    className: "red",
                    style: {"--columns": r.size},
                    children: [jsx("div", {children: R("roadmap.three_pictures.phoenix")}), r.phoenixResults.slice(-r.size).map((y, E) => jsx("div", {
                        className: r.winner.slice(-r.size)[E] === THREE_PICTURES_WINNER.P ? "win" : r.winner.slice(-r.size)[E] === THREE_PICTURES_WINNER.D ? "lose" : "tie",
                        children: `${y.split(" ").length === 2 ? `${R(`roadmap.three_pictures.${y.split(" ")[0]}`)} ${y.split(" ")[1]}` : y === "triple_pictures" ? R(`detailed_bet_type.additional_result.${y}`) : y}`
                    }, E)), Array(Math.max(r.size - r.phoenixResults.length, 0)).fill(void 0).map((y, E) => jsx("div", {}, E))]
                })]
            })
        })
    }, ThreePicturesRoadStatistics = r => {
        const {t: R} = useTranslation(),
            y = React.useCallback(E => r.roadMap.map(x => x[0]).filter(x => x.includes(E)).length, [r.roadMap]);
        return jsxs("section", {
            className: "road_statistics",
            id: "three_pictures_road_statistics",
            children: [jsxs("div", {
                children: [jsx("div", {children: "#"}), jsx("div", {children: r.roadMap.length}), jsx(Tooltip, {
                    className: "road_statistics_tooltip",
                    children: R("roadmap.round_num")
                })]
            }), jsxs("div", {
                children: [jsx("div", {
                    className: "player",
                    children: R("roadmap.three_pictures.dragon")
                }), jsx("div", {children: y(THREE_PICTURES_WINNER.D)}), jsx(Tooltip, {
                    className: "road_statistics_tooltip",
                    children: R("detailed_bet_type.9101")
                })]
            }), jsxs("div", {
                children: [jsx("div", {
                    className: "banker",
                    children: R("roadmap.three_pictures.phoenix")
                }), jsx("div", {children: y(THREE_PICTURES_WINNER.P)}), jsx(Tooltip, {
                    className: "road_statistics_tooltip",
                    children: R("detailed_bet_type.9102")
                })]
            }), jsxs("div", {
                children: [jsx("div", {
                    className: "tie",
                    children: R("roadmap.three_pictures.tie")
                }), jsx("div", {children: y(THREE_PICTURES_WINNER.T)}), jsx(Tooltip, {
                    className: "road_statistics_tooltip",
                    children: R("detailed_bet_type.9103")
                })]
            })]
        })
    }, ThreePicturesBigRoad = r => {
        const [R, y] = React.useState([]), E = React.useRef([]), C = React.useRef([-1, -1]), x = React.useRef([]),
            B = useRenderRoadMapWithStrategy(r.renderWithCanvas ? "canvas" : "dom", {
                size: r.size,
                displayRoadMap: R,
                lastGrid: C.current,
                asking: !1
            });
        let {rerender: N} = useRerender();
        return React.useEffect(() => {
            initBigRoadMap(r.size, r.roadMap, "", C, E, x), y(JSON.parse(JSON.stringify(E.current)))
        }, [r.roadMap]), jsx("article", {
            className: "big_road",
            style: {"--columns": r.size.x, "--rows": r.size.y},
            children: B
        }, N)
    }, TeenPattiResultRoad = r => {
        const {t: R} = useTranslation();
        return jsx(Fragment, {
            children: jsxs("article", {
                className: "result_road",
                style: {"--columns": 1, "--rows": 2},
                children: [jsxs("div", {
                    className: "blue",
                    style: {"--columns": r.size},
                    children: [jsx("div", {children: R("roadmap.teen_patti.player_a")}), r.playerAResults.slice(-(r.size - 1)).map((y, E) => jsx("div", {
                        className: r.winner.slice(-(r.size - 1))[E] === TEEN_PATTI_WINNER.A ? "win" : r.winner.slice(-(r.size - 1))[E] === TEEN_PATTI_WINNER.B ? "lose" : "tie",
                        children: R(`roadmap.teen_patti.${y}`)
                    }, E)), Array(Math.max(r.size - 1 - r.playerAResults.length, 1)).fill(void 0).map((y, E) => jsx("div", {}, E))]
                }), jsxs("div", {
                    className: "red",
                    style: {"--columns": r.size},
                    children: [jsx("div", {children: R("roadmap.teen_patti.player_b")}), r.playerBResults.slice(-(r.size - 1)).map((y, E) => jsx("div", {
                        className: r.winner.slice(-(r.size - 1))[E] === TEEN_PATTI_WINNER.B ? "win" : r.winner.slice(-(r.size - 1))[E] === TEEN_PATTI_WINNER.A ? "lose" : "tie",
                        children: R(`roadmap.teen_patti.${y}`)
                    }, E)), Array(Math.max(r.size - 1 - r.playerBResults.length, 1)).fill(void 0).map((y, E) => jsx("div", {}, E))]
                })]
            })
        })
    }, TeenPattiRoadStatistics = r => {
        const {t: R} = useTranslation(),
            y = React.useCallback((E, C, x) => r.roadMap.map(N => N[C]).filter(N => x ? !N.includes(E) : N.includes(E)).length, [r.roadMap]);
        return jsxs("section", {
            className: "road_statistics",
            id: "teen_patti_road_statistics",
            children: [jsxs("div", {
                children: [jsx("div", {children: "#"}), jsx("div", {children: r.roadMap.length}), jsx(Tooltip, {
                    className: "road_statistics_tooltip",
                    children: R("roadmap.round_num")
                })]
            }), jsxs("div", {
                children: [jsx("div", {
                    className: "player",
                    children: R("roadmap.teen_patti.player_a")
                }), jsx("div", {children: y(TEEN_PATTI_WINNER.A, 0)}), jsx(Tooltip, {
                    className: "road_statistics_tooltip",
                    children: R("detailed_bet_type.6301")
                })]
            }), jsxs("div", {
                children: [jsx("div", {
                    className: "banker",
                    children: R("roadmap.teen_patti.player_b")
                }), jsx("div", {children: y(TEEN_PATTI_WINNER.B, 0)}), jsx(Tooltip, {
                    className: "road_statistics_tooltip",
                    children: R("detailed_bet_type.6302")
                })]
            }), jsxs("div", {
                children: [jsx("div", {
                    className: "tie",
                    children: R("roadmap.teen_patti.tie")
                }), jsx("div", {children: y(TEEN_PATTI_WINNER.T, 0)}), jsx(Tooltip, {
                    className: "road_statistics_tooltip",
                    children: R("detailed_bet_type.6303")
                })]
            }), jsxs("div", {
                children: [jsx("div", {className: "player pair"}), jsx("div", {children: y("0", 1, !0)}), jsx(Tooltip, {
                    className: "road_statistics_tooltip",
                    children: R("detailed_bet_type.6304")
                })]
            }), jsxs("div", {
                children: [jsx("div", {className: "banker pair"}), jsx("div", {children: y("0", 2, !0)}), jsx(Tooltip, {
                    className: "road_statistics_tooltip",
                    children: R("detailed_bet_type.6305")
                })]
            }), jsxs("div", {
                children: [jsx("div", {className: "star svg_star"}), jsx("div", {children: y("0", 3, !0)}), jsx(Tooltip, {
                    className: "road_statistics_tooltip",
                    children: R("detailed_bet_type.6306")
                })]
            })]
        })
    }, TeenPattiBigRoad = r => {
        const [R, y] = React.useState([]), E = React.useRef([]), C = React.useRef([-1, -1]), x = React.useRef([]),
            B = useRenderRoadMapWithStrategy(r.renderWithCanvas ? "canvas" : "dom", {
                size: r.size,
                displayRoadMap: R,
                lastGrid: C.current,
                asking: !1
            });
        let {rerender: N} = useRerender();
        return React.useEffect(() => {
            initBigRoadMap(r.size, r.roadMap, "", C, E, x), y(JSON.parse(JSON.stringify(E.current)))
        }, [r.roadMap]), jsx("article", {
            className: "big_road",
            style: {"--columns": r.size.x, "--rows": r.size.y},
            children: B
        }, N)
    }, ZoomContext$2 = React.createContext([void 0, () => {
    }]), InsuranceBaccaratDetailedRoads = r => {
        const [R, y] = React.useState([]);
        React.useEffect(() => {
            let B = r.roadMap.slice();
            JSON.stringify(R) !== JSON.stringify(B) && y(B)
        }, [r.roadMap]);
        const {orientation: E} = useDeviceOrientation(), [C, x] = React.useState();
        return jsxs("div", {
            className: "detailed_roads",
            children: [(isDesktop$1 || E.includes("landscape")) && jsx(InsuranceBaccaratRoadStatistics, {
                roadMap: r.roadMap,
                onAsk: r.onAsk,
                bigRoadConsecutiveList: r.bigRoadConsecutiveList
            }), jsx("section", {
                className: "roads_layout",
                "aria-checked": !!C,
                children: jsxs(ZoomContext$2.Provider, {
                    value: [C, x],
                    children: [(C === "Big" || !C) && jsx(InsuranceBaccaratBigRoad, {
                        size: {
                            x: isMobile$1 && E === "small-landscape" ? 15 : C === "Big" ? 18 : 28,
                            y: 6
                        }, roadMap: R.map(B => B[1]), allowZoom: !0
                    }), (C === "Big_Eye" || !C) && jsx(InsuranceBaccaratBigEyeRoad, {
                        size: {
                            x: E === "small-landscape" ? 16 : 18,
                            y: 6
                        }, bigRoadConsecutiveList: r.bigRoadConsecutiveList
                    }), (C === "Small" || !C) && jsx(InsuranceBaccaratSmallRoad, {
                        size: {
                            x: E === "small-landscape" ? 16 : 18,
                            y: 6
                        }, bigRoadConsecutiveList: r.bigRoadConsecutiveList
                    }), (C === "Cockroach" || !C) && jsx(InsuranceBaccaratCockroachRoad, {
                        size: {
                            x: E === "small-landscape" ? 16 : 18,
                            y: 6
                        }, bigRoadConsecutiveList: r.bigRoadConsecutiveList
                    })]
                })
            })]
        })
    }, InsuranceBaccaratGameTable$1 = "", Responsive$o = "", InsurancePanel$1 = "", Responsive$n = "",
    InsurancePanel = r => {
        const {t: R} = useTranslation(), {gameBet: y} = React.useContext(SFSCoreContext), [E, C] = React.useState([]), [x, B] = React.useState([]),
            N = useChips({chipAttrs: E}), L = useDisplayCurrency(), [O, D] = React.useState(0),
            z = React.useRef(0), [F, _e] = React.useState(z.current),
            Y = React.useRef(-1), [H, me] = React.useState({width: 0, height: 0}), ce = React.useRef(null);
        return React.useEffect(() => (r.countdown && (z.current = r.countdown, _e(z.current), Y.current = window.setInterval(() => {
            z.current--, _e(z.current), z.current === 0 && clearInterval(Y.current)
        }, 1e3)), () => clearInterval(Y.current)), [r.countdown]), React.useEffect(() => {
            let Be = [20, 25, 33, 50, 75, 100].map(ve => ({
                display: ve,
                amount: Math.trunc(r.betAmount * (ve / 100) / r.odds - (ve === 100 ? 1 : 0))
            }));
            Be = Be.filter(ve => ve.amount > 1);
            for (let ve = Be.length - 1; ve > 0; ve--) Be[ve].amount === Be[ve - 1].amount && Be.splice(ve, 1);
            B(Be.map(ve => ve.amount)), C(Be.map(ve => ({
                color: "#B79B00",
                amount: ve.display === 100 ? "MAX" : `${ve.display}%`
            })))
        }, []), React.useEffect(() => {
            const ie = (ve, Re) => me({width: ve, height: Re}), Be = new ResizeObserver(ve => {
                ve.forEach(Re => N.length > 0 && ie(Re.contentRect.width + Re.contentRect.x * 2, Re.contentRect.height + Re.contentRect.y * 2))
            });
            return ce.current && Be.observe(ce.current), () => Be.disconnect()
        }, [N]), jsxs("article", {
            id: "insurance_panel",
            ref: ce,
            children: [jsxs("div", {
                className: `title ${r.insurance}`,
                children: [jsx("div", {className: `svg_${r.insurance}_insurance`}), jsx("div", {children: R(`detailed_bet_type.${r.betType}`).split(" ").slice(0, -1).join(" ")})]
            }), jsxs("section", {
                id: "insurance_info",
                children: [jsxs("div", {children: [jsx("div", {children: "Odds"}), jsx("span", {children: `${r.odds} : 1`})]}), jsxs("div", {children: [jsx("div", {children: `Bet Amount on ${r.insurance}`}), jsx("span", {children: r.betAmount})]}), jsxs("div", {children: [jsx("div", {children: "Insurance Payout"}), jsx("span", {children: x[O] * r.odds})]})]
            }), jsx("div", {id: "insurance_line"}), jsx("section", {
                id: "bet_selector",
                style: {"--columns": E.length},
                children: N.map((ie, Be) => jsxs("button", {
                    onClick: () => D(Be),
                    "aria-selected": O === Be,
                    children: [jsxs("div", {
                        className: "chip",
                        children: [jsx("div", {
                            className: "svg_insurance_chip",
                            children: E[Be].amount
                        }), O === Be && jsx("div", {id: "chip_selected"})]
                    }), L && jsx("div", {children: Currency[L]}), jsx("div", {children: x[Be]})]
                }, Be))
            }), jsxs("section", {
                className: "bet_buttons",
                children: [jsxs("button", {
                    className: "confirm",
                    onClick: () => y([r.betType], [x[O]], BET_METHOD.NORMAL),
                    children: [jsx("div", {className: "svg_confirm"}), jsx("div", {children: `(${F})`})]
                }), jsx("button", {
                    className: "cancel",
                    onClick: r.onClose,
                    children: jsx("div", {className: "svg_cancel"})
                })]
            }), H.width > 0 && H.height > 0 && jsx("svg", {
                width: "100%",
                height: "100%",
                style: {"--duration": `${r.countdown}s`, "--size": `${(H.width + H.height) * 2}`},
                children: jsx("rect", {x: "8", y: "8", fill: "none", strokeWidth: "6", rx: "8"})
            })]
        })
    }, Responsive$m = "", InsuranceBaccaratBetTable = r => {
        var ze;
        const {t: R} = useTranslation(), y = useAvailableChips(),
            E = React.useContext(ScalableContainerScaleContext), {settings: C} = React.useContext(SettingsContext),
            x = React.useContext(GameTableBetContext), B = React.useContext(GameTableBetStateContext),
            N = React.useContext(GameTablePendingBetAmountContext), L = React.useContext(GameTableBetAmountContext),
            O = React.useContext(GameTablePayoutContext), D = useDisplayCurrency(), {
                orientation: z,
                isForceLandscape: F
            } = useDeviceOrientation(), [_e, Y] = React.useState(Object.values(INSURANCE_BACCARAT_BET_TYPE).map(De => ({
                color: y[0].color,
                amount: Helper.formatAbbrMoney(L[De])
            }))), H = useChips({chipAttrs: _e, flat: F && r.view === BET_STATE.NO_BET}), me = useBetChip(O, L, N, H), {
                message: ce,
                showToast: ie,
                visible: Be
            } = useToastMessage("", 2e3), [ve, Re] = React.useState(new Set([r.insurance])), [Ce, Ne] = React.useState(r.insurance), [we, Me] = React.useState(Object.fromEntries(Object.keys(INSURANCE_BACCARAT_BET_TYPE).filter(De => !Number.isNaN(parseInt(De))).map(De => [De, !1]))),
            ke = Helper.useOdds(), Fe = React.useCallback(De => {
                let Xe = [];
                if (De) switch (r.view) {
                    case BET_STATE.BETTING:
                        Xe.push("betting");
                        break;
                    case BET_STATE.NO_BET:
                        Xe.push("no_bet");
                        break
                }
                return Xe.join(" ")
            }, [r.view]);
        React.useEffect(() => {
            if (r.view === BET_STATE.BETTING && Re(new Set), r.insurance !== INSURANCE.NONE) {
                let De = new Set(ve);
                De.add(r.insurance), Re(De), Ne(r.insurance)
            }
        }, [r.view, r.insurance]), useBetAmountUpdateChipEffect(L, N, _e, Y), usePayoutUpdateChipEffect(L, N, O, _e, Y);
        const $e = De => {
            if (B === BET_STATE.NO_BET) return;
            if (r.roadMap.length >= SIDE_BET_LIMIT_30.rounds && SIDE_BET_LIMIT_30.betTypes.includes(INSURANCE_BACCARAT_BET_TYPE_MAP[De])) {
                ie(R("bet_type.tips.no_bet_after").replaceAll("%1", "30").replaceAll("%2", R(`bet_type.${INSURANCE_BACCARAT_BET_TYPE_MAP[De]}`)));
                return
            }
            if (r.roadMap.length >= SIDE_BET_LIMIT_50.rounds && SIDE_BET_LIMIT_50.betTypes.includes(INSURANCE_BACCARAT_BET_TYPE_MAP[De])) {
                ie(R("bet_type.tips.no_bet_after").replaceAll("%1", "50").replaceAll("%2", R(`bet_type.${INSURANCE_BACCARAT_BET_TYPE_MAP[De]}`)));
                return
            }
            const Xe = L[INSURANCE_BACCARAT_BET_TYPE.BANKER] ? COMM_TYPE.COMM : L[INSURANCE_BACCARAT_BET_TYPE.BANKER_NO_COMM] ? COMM_TYPE.NO_COMM : COMM_TYPE.NONE;
            if (Xe === COMM_TYPE.COMM && De === INSURANCE_BACCARAT_BET_TYPE.BANKER_NO_COMM || Xe === COMM_TYPE.NO_COMM && De === INSURANCE_BACCARAT_BET_TYPE.BANKER) {
                ie(R(`bet_type.tips.${L[INSURANCE_BACCARAT_BET_TYPE.BANKER] ? "comm" : "no_comm"}_betted`));
                return
            }
            x([INSURANCE_BACCARAT_BET_TYPE_MAP[De]])
        };
        React.useEffect(() => {
            let De = Object.fromEntries(Object.keys(INSURANCE_BACCARAT_BET_TYPE).filter(He => !Number.isNaN(parseInt(He))).map(He => [He, !1]));
            const Xe = {
                0: INSURANCE_BACCARAT_BET_TYPE.TIE,
                1: INSURANCE_BACCARAT_BET_TYPE.BANKER,
                2: INSURANCE_BACCARAT_BET_TYPE.PLAYER
            };
            De[Xe[r.winResult[0]]] = !0, De[INSURANCE_BACCARAT_BET_TYPE.BANKER_NO_COMM] = r.winResult[0] === "1", De[INSURANCE_BACCARAT_BET_TYPE.B_PAIR] = ["1", "3", "4", "6"].includes(r.winResult[3]), De[INSURANCE_BACCARAT_BET_TYPE.P_PAIR] = ["2", "3", "5", "6"].includes(r.winResult[3]), De[INSURANCE_BACCARAT_BET_TYPE.EITHER_PAIR] = parseInt(r.winResult[3]) >= 1, De[INSURANCE_BACCARAT_BET_TYPE.PERFECT_PAIR] = parseInt(r.winResult[3]) >= 4, De[INSURANCE_BACCARAT_BET_TYPE.TIGER_PAIR] = parseInt(r.winResult[3]) >= 1, De[INSURANCE_BACCARAT_BET_TYPE.B_BONUS] = ["3", "4", "5", "6"].includes(r.winResult[4]), De[INSURANCE_BACCARAT_BET_TYPE.P_BONUS] = ["7", "8"].includes(r.winResult[4]), De[INSURANCE_BACCARAT_BET_TYPE.TIGER] = ["1", "2", "3", "4"].includes(r.winResult[4]), De[INSURANCE_BACCARAT_BET_TYPE.TIGER_BIG] = ["1", "3"].includes(r.winResult[4]), De[INSURANCE_BACCARAT_BET_TYPE.TIGER_SMALL] = ["2", "4"].includes(r.winResult[4]), De[INSURANCE_BACCARAT_BET_TYPE.TIGER_TIE] = r.winResult[4] === "9", De[INSURANCE_BACCARAT_BET_TYPE.B_FABULOUS_4] = ["1", "3", "5", "7"].includes(r.winResult[5]), De[INSURANCE_BACCARAT_BET_TYPE.P_FABULOUS_4] = ["2", "4", "6", "8"].includes(r.winResult[5]), De[INSURANCE_BACCARAT_BET_TYPE.B_PRECIOUS_PAIR] = ["3", "4", "7", "8", "9", "B"].includes(r.winResult[5]), De[INSURANCE_BACCARAT_BET_TYPE.P_PRECIOUS_PAIR] = ["5", "6", "7", "8", "A", "B"].includes(r.winResult[5]), De[INSURANCE_BACCARAT_BET_TYPE.B_BLACK] = ["1", "5", "7", "A", "E", "G"].includes(r.winResult[6]), De[INSURANCE_BACCARAT_BET_TYPE.B_RED] = ["2", "6", "8", "B", "F", "H"].includes(r.winResult[6]), De[INSURANCE_BACCARAT_BET_TYPE.P_BLACK] = ["3", "6", "7", "C", "F", "G"].includes(r.winResult[6]), De[INSURANCE_BACCARAT_BET_TYPE.P_RED] = ["4", "5", "8", "D", "E", "H"].includes(r.winResult[6]), De[INSURANCE_BACCARAT_BET_TYPE.ANY_6] = parseInt(r.winResult[6], 18) >= 9;
            for (const [He, Ge] of Object.entries(De)) He !== "undefined" && Ge && (r.roadMap.length >= SIDE_BET_LIMIT_30.rounds && SIDE_BET_LIMIT_30.betTypes.includes(INSURANCE_BACCARAT_BET_TYPE_MAP[He]) || r.roadMap.length >= SIDE_BET_LIMIT_50.rounds && SIDE_BET_LIMIT_50.betTypes.includes(INSURANCE_BACCARAT_BET_TYPE_MAP[He])) && (De[He] = !1);
            Me(De)
        }, [r.winResult]);
        const Ve = React.useCallback(De => {
            if (r.betStatistics[De].amounts === 0) return 0;
            let Xe = r.betStatistics.map(Ge => Ge.amounts), He = Xe.reduce((Ge, Le) => Ge + Le, 0);
            return De !== INSURANCE_BACCARAT_BET_TYPE.TIE ? Math.round(Xe[De % 3] / He * 100) : 100 - Ve(INSURANCE_BACCARAT_BET_TYPE.PLAYER) - Ve(INSURANCE_BACCARAT_BET_TYPE.BANKER)
        }, [r.betStatistics]), Je = React.useCallback((De, Xe, He, Ge, Le, We, dt, et, nt) => jsxs("button", {
            className: `${De} main_bet`,
            style: {gridArea: Xe},
            onClick: $e.bind(null, Ge),
            "aria-checked": we[Ge],
            "aria-disabled": Ge === INSURANCE_BACCARAT_BET_TYPE.BANKER && !!L[INSURANCE_BACCARAT_BET_TYPE.BANKER_NO_COMM] || Ge === INSURANCE_BACCARAT_BET_TYPE.BANKER_NO_COMM && !!L[INSURANCE_BACCARAT_BET_TYPE.BANKER],
            children: [C.showBettingStatistics && r.view === BET_STATE.BETTING && jsxs("div", {
                className: "bet_area_statistcis",
                children: [jsx(Statistic, {
                    percentage: Ve(Ge % 3),
                    color: He,
                    size: isDesktop$1 ? 46 : z.includes("portrait") ? 30 : 20 / E
                }), jsx("div", {children: Helper.formatCurrency(D, Helper.formatMoney(r.betStatistics[Ge % 3].amounts / 100))}), jsxs("div", {
                    className: "bet_total",
                    children: [jsx("div", {className: "svg_person"}), r.betStatistics[Ge % 3].people]
                })]
            }), dt && Xe !== "tie" ? jsx("div", {
                className: "bet_area_results",
                children: r.view === BET_STATE.NO_BET && jsxs(Fragment, {
                    children: [jsx("div", {children: dt.some(tt => !["-2", "-3"].includes(tt)) && dt.reduce((tt, lt) => tt + (parseInt(lt) % 100 >= 0 ? parseInt(lt) % 100 > 10 ? 10 : parseInt(lt) % 100 : 0), 0) % 10}), jsx(BaccaratGameResults, {
                        side: Xe,
                        results: dt
                    })]
                })
            }) : jsx("div", {}), jsxs("div", {
                className: "bet_area_info",
                children: [Ge === INSURANCE_BACCARAT_BET_TYPE.BANKER_NO_COMM && jsx("div", {
                    className: "no_comm_label",
                    children: R("game_table.baccarat.no_comm")
                }), jsx("div", {className: "title", children: R(`bet_type.${Le}`)}), jsx("div", {
                    className: "odds",
                    children: ke(We)
                }), me(Ge)]
            }), Xe !== "tie" && et && jsxs("div", {
                className: "bet_area_insurance",
                "aria-checked": ve.has(et),
                children: [jsx("div", {className: `svg_${Xe}_insurance`}), jsx("div", {children: R(`bet_type.${nt}`)}), me(INSURANCE_BACCARAT_BET_TYPE[`${Xe[0].toUpperCase()}_INSURANCE_1`]), me(INSURANCE_BACCARAT_BET_TYPE[`${Xe[0].toUpperCase()}_INSURANCE_2`])]
            })]
        }), [L, we, r.view, me, r.betStatistics, H, x, C.showBettingStatistics, E, z, ve]), Qe = De => {
            let Xe = payoutArr[GameType.Baccarat].find(He => He.betType.toString() === INSURANCE_BACCARAT_BET_TYPE_MAP[De].toString());
            return Xe == null ? void 0 : Xe.payout
        }, Ze = React.useCallback(De => {
            const Xe = r.roadMap.length, He = INSURANCE_BACCARAT_BET_TYPE_MAP[De];
            let Ge = SIDE_BET_LIMIT_50.betTypes.includes(He) && Xe >= SIDE_BET_LIMIT_50.rounds || SIDE_BET_LIMIT_30.betTypes.includes(He) && Xe >= SIDE_BET_LIMIT_30.rounds,
                Le = Qe(De);
            return Le && Le.includes("-") && (Le = void 0), jsxs("button", {
                className: `${INSURANCE_BACCARAT_BET_TYPE[De].toLowerCase()} ${INSURANCE_BACCARAT_BET_TYPE[De].startsWith("B_") ? "red" : INSURANCE_BACCARAT_BET_TYPE[De].startsWith("P_") ? "blue" : "yellow"}`,
                style: {gridArea: INSURANCE_BACCARAT_BET_TYPE[De].toLowerCase()},
                onClick: $e.bind(null, De),
                "aria-disabled": Ge,
                "aria-checked": !Ge && we[De],
                children: [jsx("div", {
                    className: "title",
                    children: R(`bet_type.${He}`)
                }), Le && jsx("div", {className: "odds", children: ke(Le)}), me(De)]
            }, De)
        }, [we, B, me, H, x, r.roadMap]), qe = (ze = BACCARAT_PLAY_TYPE_PRESET.find(De => {
            let Xe = 0;
            for (const [He, Ge] of Object.entries(C.baccaratBetTypes)) Ge && Xe++;
            return De.betAreas.every(He => C.baccaratBetTypes[He]) && De.betAreas.length === Xe
        })) == null ? void 0 : ze.type;
        return jsx(BetTable, {
            children: jsxs("div", {
                className: `bet_table_container insurance_baccarat_bet_table ${Fe(!0)} ${qe}`,
                children: [jsx("div", {className: "background"}), Je("blue", "player", "#47B8FF59", INSURANCE_BACCARAT_BET_TYPE.PLAYER, BetType.B_Player, 1, r.playerCards, INSURANCE.PLAYER, BetType.B_PInsurance1), Je("green", "tie", "#BCFF8959", INSURANCE_BACCARAT_BET_TYPE.TIE, BetType.B_Tie, 8), Je("red", "banker", "#FF9A8959", C.noCommission ? INSURANCE_BACCARAT_BET_TYPE.BANKER_NO_COMM : INSURANCE_BACCARAT_BET_TYPE.BANKER, C.noCommission ? BetType.B_BankNoComm : BetType.B_Banker, C.noCommission ? 1 : .95, r.bankerCards, INSURANCE.BANKER, BetType.B_BInsurance1), Object.entries(C.baccaratBetTypes).filter(De => De[1]).map(De => Ze(parseInt(De[0]))), Be && jsx("div", {
                    className: "bet_area_warning",
                    "aria-hidden": !Be,
                    "data-message": ce
                }), jsxs("div", {
                    className: "insurance_alert",
                    "aria-hidden": r.insurance === INSURANCE.NONE,
                    children: [jsx("div", {className: `svg_${Ce}_insurance`}), R(`bet_type.tips.${Ce}_insurance`)]
                })]
            })
        })
    }, RoadMapMovedContext$1 = React.createContext(!1), AskingRoadContext$1 = React.createContext("");
var INSURANCE = (r => (r.NONE = "", r.BANKER = "banker", r.PLAYER = "player", r))(INSURANCE || {});
const InsuranceBaccaratGameTable = () => {
        const {t: r} = useTranslation(), {
                gameTableInfo: R,
                getUpdatedBetStatistics: y
            } = React.useContext(GameTableContext), {
                gameStatus: E,
                countDown: C
            } = React.useContext(GameTableStatusContext), {addMessage: x} = React.useContext(ToastContext), {
                play: B,
                sound: N
            } = React.useContext(SoundContext), L = React.useContext(GameTableBetStateContext),
            O = React.useContext(GameTableBetAmountContext), {
                orientation: D,
                isForceLandscape: z
            } = useDeviceOrientation(), [F, _e] = React.useState(""), [Y, H] = React.useState(""), [me, ce] = React.useState([]), [ie, Be] = React.useState([]), [ve, Re] = React.useState(Array(4).fill({
                people: 0,
                amounts: 0
            })),
            Ce = useRoadMap(R.tableInfo.tableId, R.tableInfo.currentShoeGameResult, parseBaccaratRoadData), [Ne, we] = React.useState(""),
            Me = React.useRef(null), ke = useRoadMovedListener(Me), Fe = React.useMemo(() => {
                let Ze = Ce.join("").replace(/[\drbG]/g, "").match(REGEX.GROUP_SIDE);
                return Ze ? Ze.reduce((qe, ze) => (qe.push({side: ze[0], wins: ze.length}), qe), []) : []
            }, [Ce]), [$e, Ve] = React.useState(!1);
        React.useEffect(() => {
            ce([]), Be([])
        }, [R.tableInfo.tableId]), React.useEffect(() => {
            if (R.tableInfo.tableId !== -1) {
                let Ze = y();
                Ze ? (Ze[INSURANCE_BACCARAT_BET_TYPE.BANKER].people += Ze[INSURANCE_BACCARAT_BET_TYPE.BANKER_NO_COMM].people, Ze[INSURANCE_BACCARAT_BET_TYPE.BANKER].amounts += Ze[INSURANCE_BACCARAT_BET_TYPE.BANKER_NO_COMM].amounts, Ze = Ze.filter((qe, ze) => [0, 1, 2].includes(ze))) : Ze = ve.map(qe => ({
                    people: 0,
                    amounts: 0
                })), JSON.stringify(Ze) !== JSON.stringify(ve) && Re(Ze)
            }
        }, [R]), React.useEffect(() => {
            if (E.tableId !== -1) {
                if (E.stageBettingType) switch (E.additionalBetDetail.AAA) {
                    case BetType.B_BInsurance1:
                    case BetType.B_BInsurance2:
                        H("banker");
                        break;
                    case BetType.B_PInsurance1:
                    case BetType.B_PInsurance2:
                        H("player");
                        break
                } else H("");
                if (E.rawGameResult) {
                    if (JSON.stringify(E.rawGameResult[0]) !== JSON.stringify(ie) && (E.rawGameResult[0].some(Ze => Ze !== "-2") && B({id: "card_flip"}), Be(E.rawGameResult[0].slice())), JSON.stringify(E.rawGameResult[1]) !== JSON.stringify(me)) {
                        E.rawGameResult[1].some(qe => qe !== "-2") && B({id: "card_flip"});
                        let Ze = E.rawGameResult[1].slice();
                        for (; Ze.length < 3;) Ze.push("-2");
                        ce(Ze)
                    }
                } else L === BET_STATE.BETTING && (ce([]), Be([]));
                if (E.currentGameRoundWinResult) {
                    let Ze = E.currentGameRoundWinResult[0][0];
                    if (Ze === "-1") _e(""); else {
                        const qe = {0: r("bet_type.1003"), 1: r("bet_type.1001"), 2: r("bet_type.1002")},
                            ze = {0: TOAST_COLOR.GREEN, 1: TOAST_COLOR.RED, 2: TOAST_COLOR.BLUE};
                        _e(Ze), x(qe[Ze[0]], ze[Ze[0]], 4), (async () => {
                            switch (B({id: `banker_${Ze[1]}`}), await new Promise(Xe => setTimeout(Xe, N.sound._sprite[`banker_${Ze[1]}`][1] + 250)), B({id: `player_${Ze[2]}`}), await new Promise(Xe => setTimeout(Xe, N.sound._sprite[`player_${Ze[2]}`][1] + 250)), Ze[0]) {
                                case"0":
                                    B({id: "tie"});
                                    break;
                                case"1":
                                    B({id: "banker_win"});
                                    break;
                                case"2":
                                    B({id: "player_win"});
                                    break
                            }
                        })(), Ve(!1)
                    }
                }
            }
        }, [E, L]), React.useEffect(() => {
            Qe && Math.trunc((Y === "banker" ? O[INSURANCE_BACCARAT_BET_TYPE.BANKER] || O[INSURANCE_BACCARAT_BET_TYPE.BANKER_NO_COMM] : O[INSURANCE_BACCARAT_BET_TYPE.PLAYER]) / (E.additionalBetDetail.BBB / 100)) - 1 < 2 && x(`Bet amount is not enough to trigger ${Y} Insurance`, TOAST_COLOR.BLACK, 2)
        }, [Y]);
        const Je = (Ze, qe) => {
                we(Ne !== Ze ? Ze : "")
            },
            Qe = E.tableStatus === TableStatus.AdditionBet && (O[INSURANCE_BACCARAT_BET_TYPE.PLAYER] && Y === "player" && !(O[INSURANCE_BACCARAT_BET_TYPE.P_INSURANCE_1] || O[INSURANCE_BACCARAT_BET_TYPE.P_INSURANCE_2]) || (O[INSURANCE_BACCARAT_BET_TYPE.BANKER] || O[INSURANCE_BACCARAT_BET_TYPE.BANKER_NO_COMM]) && Y === "banker" && !(O[INSURANCE_BACCARAT_BET_TYPE.B_INSURANCE_1] || O[INSURANCE_BACCARAT_BET_TYPE.B_INSURANCE_2]));
        return jsxs(Fragment, {
            children: [jsxs(AskingRoadContext$1.Provider, {
                value: Ne,
                children: [!z && jsx("div", {
                    id: "road_stats",
                    children: jsx(InsuranceBaccaratRoadStatistics, {roadMap: Ce, onAsk: Je, bigRoadConsecutiveList: Fe})
                }), isMobile$1 && D.includes("short-portrait") && jsx(RoadMapMovedContext$1.Provider, {
                    value: ke,
                    children: jsxs("div", {
                        id: "roads_list",
                        ref: Me,
                        children: [jsx(InsuranceBaccaratBeadRoad, {
                            size: {x: 23, y: 6},
                            roadMap: Ce
                        }), jsx(InsuranceBaccaratDetailedRoads, {roadMap: Ce, onAsk: Je, bigRoadConsecutiveList: Fe})]
                    })
                }), jsxs("div", {
                    id: "bet_area",
                    children: [jsx(GameTableName, {}), jsx(InsuranceBaccaratBetTable, {
                        betStatistics: ve,
                        insurance: Y,
                        view: L,
                        roadMap: Ce,
                        playerCards: me,
                        bankerCards: ie,
                        winResult: F
                    })]
                }), (isDesktop$1 || !D.includes("short-portrait")) && jsxs(Fragment, {
                    children: [jsx("div", {
                        id: "bead_road",
                        children: jsx(InsuranceBaccaratBeadRoad, {
                            size: {
                                x: isDesktop$1 ? 16 : D === "small-landscape" ? 11 : 23,
                                y: 6
                            }, roadMap: Ce
                        })
                    }), jsx("div", {
                        id: "detailed_road",
                        children: jsx(InsuranceBaccaratDetailedRoads, {roadMap: Ce, onAsk: Je, bigRoadConsecutiveList: Fe})
                    })]
                })]
            }), jsx(BaccaratPlayType, {}), isMobile$1 && jsx(CommissionToggle, {}), Qe && !$e && Math.trunc((Y === "banker" ? O[INSURANCE_BACCARAT_BET_TYPE.BANKER] || O[INSURANCE_BACCARAT_BET_TYPE.BANKER_NO_COMM] : O[INSURANCE_BACCARAT_BET_TYPE.PLAYER]) / (E.additionalBetDetail.BBB / 100)) - 1 >= 2 && jsx(InsurancePanel, {
                onClose: () => Ve(!0),
                insurance: Y,
                betType: E.additionalBetDetail.AAA,
                odds: E.additionalBetDetail.BBB / 100,
                betAmount: Y === "banker" ? O[INSURANCE_BACCARAT_BET_TYPE.BANKER] || O[INSURANCE_BACCARAT_BET_TYPE.BANKER_NO_COMM] : O[INSURANCE_BACCARAT_BET_TYPE.PLAYER],
                countdown: C.dynamicCountDown
            })]
        })
    }, map$2 = {G: "tie", R: "banker", B: "player"}, InsuranceBaccaratBeadRoad = r => {
        const {t: R} = useTranslation(), [y, E] = React.useState(0), C = React.useContext(AskingRoadContext$1);
        return jsx(Fragment, {
            children: jsxs("article", {
                className: "bead_road",
                style: {"--columns": r.size.x, "--rows": r.size.y},
                onClick: () => E((y + 1) % 2),
                children: [r.roadMap.slice(Math.max(0, r.roadMap.length - (r.size.x - 1) * r.size.y)).map((x, B) => jsx("div", {
                    children: jsx("div", {
                        className: x,
                        children: jsx("svg", {
                            viewBox: "0 0 10 10",
                            children: jsx("text", {
                                x: "50%",
                                y: "50%",
                                children: y === 0 ? R(`roadmap.baccarat.${map$2[x[1]]}`) : x[0]
                            })
                        })
                    })
                }, B)), C && jsx("div", {
                    children: jsx("div", {
                        className: `${C} asking`,
                        children: y === 0 && jsx("svg", {
                            viewBox: "0 0 10 10",
                            children: jsx("text", {x: "50%", y: "50%", children: R(`roadmap.baccarat.${map$2[C]}`)})
                        })
                    })
                }), Array(r.size.x * r.size.y - Math.min(r.roadMap.length + (C ? 1 : 0), (r.size.x - 1) * r.size.y)).fill(void 0).map((x, B) => jsx("div", {}, B))]
            })
        })
    }, InsuranceBaccaratBigRoad = r => {
        const [R, y] = React.useContext(ZoomContext$2), E = React.useContext(AskingRoadContext$1),
            C = React.useContext(RoadMapMovedContext$1), [x, B] = React.useState([]), N = React.useRef([]),
            L = React.useRef([-1, -1]), O = React.useRef([]),
            D = useRenderRoadmap({size: r.size, displayRoadMap: x, lastGrid: L.current, asking: !!E});
        return React.useEffect(() => {
            initBigRoadMap(r.size, r.roadMap, E, L, N, O), B(JSON.parse(JSON.stringify(N.current)))
        }, [r.roadMap, E]), jsxs("article", {
            className: "big_road",
            style: {"--columns": r.size.x, "--rows": r.size.y},
            onClick: () => !C && y(R === "Big" ? void 0 : "Big"),
            "aria-checked": R === "Big",
            children: [r.allowZoom && isDesktop$1 && jsx(Tooltip, {
                className: "roads_layout_tooltip",
                children: jsx("div", {className: R === "Big" ? "svg_zoom_out" : "svg_zoom_in"})
            }), D]
        })
    }, offsetCol$8 = 1, InsuranceBaccaratBigEyeRoad = r => {
        const [R, y] = React.useContext(ZoomContext$2), E = React.useContext(AskingRoadContext$1),
            C = React.useContext(RoadMapMovedContext$1), [x, B] = React.useState([]), N = React.useRef([]),
            L = React.useRef([-1, -1]), O = React.useRef([]),
            D = useRenderRoadmap({size: r.size, displayRoadMap: x, lastGrid: L.current, asking: !!E});
        return React.useEffect(() => {
            initDetailedRoadMap(r.size, offsetCol$8, E, L, N, O, r.bigRoadConsecutiveList), B(JSON.parse(JSON.stringify(N.current)))
        }, [r.bigRoadConsecutiveList, E]), jsxs("article", {
            className: "big_eye_road",
            style: {"--columns": r.size.x, "--rows": r.size.y},
            onClick: () => !C && y(R === "Big_Eye" ? void 0 : "Big_Eye"),
            "aria-checked": R === "Big_Eye",
            children: [isDesktop$1 && jsx(Tooltip, {
                className: "roads_layout_tooltip",
                children: jsx("div", {className: R === "Big_Eye" ? "svg_zoom_out" : "svg_zoom_in"})
            }), D]
        })
    }, offsetCol$7 = 2, InsuranceBaccaratSmallRoad = r => {
        const [R, y] = React.useContext(ZoomContext$2), E = React.useContext(AskingRoadContext$1),
            C = React.useContext(RoadMapMovedContext$1), [x, B] = React.useState([]), N = React.useRef([]),
            L = React.useRef([-1, -1]), O = React.useRef([]),
            D = useRenderRoadmap({size: r.size, displayRoadMap: x, lastGrid: L.current, asking: !!E});
        return React.useEffect(() => {
            initDetailedRoadMap(r.size, offsetCol$7, E, L, N, O, r.bigRoadConsecutiveList), B(JSON.parse(JSON.stringify(N.current)))
        }, [r.bigRoadConsecutiveList, E]), jsxs("article", {
            className: "small_road",
            style: {"--columns": r.size.x, "--rows": r.size.y},
            onClick: () => !C && y(R === "Small" ? void 0 : "Small"),
            "aria-checked": R === "Small",
            children: [isDesktop$1 && jsx(Tooltip, {
                className: "roads_layout_tooltip",
                children: jsx("div", {className: R === "Small" ? "svg_zoom_out" : "svg_zoom_in"})
            }), D]
        })
    }, offsetCol$6 = 3, InsuranceBaccaratCockroachRoad = r => {
        const [R, y] = React.useContext(ZoomContext$2), E = React.useContext(AskingRoadContext$1),
            C = React.useContext(RoadMapMovedContext$1), [x, B] = React.useState([]), N = React.useRef([]),
            L = React.useRef([-1, -1]), O = React.useRef([]),
            D = useRenderRoadmap({size: r.size, displayRoadMap: x, lastGrid: L.current, asking: !!E});
        return React.useEffect(() => {
            initDetailedRoadMap(r.size, offsetCol$6, E, L, N, O, r.bigRoadConsecutiveList), B(JSON.parse(JSON.stringify(N.current)))
        }, [r.bigRoadConsecutiveList, E]), jsxs("article", {
            className: "cockroach_road",
            style: {"--columns": r.size.x, "--rows": r.size.y},
            onClick: () => !C && y(R === "Cockroach" ? void 0 : "Cockroach"),
            "aria-checked": R === "Cockroach",
            children: [isDesktop$1 && jsx(Tooltip, {
                className: "roads_layout_tooltip",
                children: jsx("div", {className: R === "Cockroach" ? "svg_zoom_out" : "svg_zoom_in"})
            }), D]
        })
    }, Responsive$l = "", InsuranceBaccaratRoadStatistics = r => {
        var B, N, L, O, D, z;
        const {t: R} = useTranslation(), y = React.useContext(AskingRoadContext$1),
            E = React.useCallback(F => r.roadMap.filter(Y => Y.includes(F)).length, [r.roadMap]),
            C = React.useCallback((F, _e) => {
                const Y = [-1, -1], H = [], me = (Be, ve) => {
                    let Re = Ce => {
                        const Ne = Y[0] !== -1 && Y[1] !== -1 ? H[Y[0]][Y[1]] : void 0;
                        if (!H.flat(2).length) addToCol({
                            roadMap: H,
                            col: 0,
                            road: Ce,
                            sizeX: 16,
                            lastGrid: Y
                        }); else if (Ne !== Ce) {
                            const we = H.map(Me => Me[0]).findLastIndex(Me => Me !== void 0);
                            addToCol({roadMap: H, col: we + 1, road: Ce, sizeX: 16, lastGrid: Y})
                        } else {
                            const [we, Me] = Y;
                            let ke = Me < 6 - 1 && !H[we][Me + 1];
                            !(we > 0 && (we !== H.map($e => $e[0]).findLastIndex($e => $e && $e.includes(Ce)) || Me === 0 && H[we][Me] === H[we - 1][Me])) && ke ? addToCol({
                                roadMap: H,
                                col: we,
                                road: Ce,
                                sizeX: 16,
                                lastGrid: Y
                            }) : addToColBottom({roadMap: H, col: we + 1, road: Ce, sizeY: 6, lastGrid: Y})
                        }
                    };
                    r.bigRoadConsecutiveList[Be - _e].wins === ve - 1 || ve === 1 && r.bigRoadConsecutiveList[Be - (_e + 1)].wins !== r.bigRoadConsecutiveList[Be - 1].wins ? Re(ROAD_COLOR.B) : Re(ROAD_COLOR.R)
                };
                let ce = JSON.parse(JSON.stringify(r.bigRoadConsecutiveList)), ie = ce.length - 1;
                return ie >= 0 && F === ce[ie].side ? ce[ie].wins = ce[ie].wins + 1 : ce.push({
                    side: F,
                    wins: 1
                }), ce.forEach((Be, ve) => {
                    if (!(ve < _e)) for (let Re = 1; Re <= Be.wins; Re++) ve === _e && Re === 1 || me(ve, Re)
                }), H
            }, [r.bigRoadConsecutiveList]), x = React.useCallback(F => {
                switch (F) {
                    case"B":
                        return "blue";
                    case"R":
                        return "red";
                    default:
                        return "none"
                }
            }, []);
        return jsxs("section", {
            className: "road_statistics",
            id: "insurance_baccarat_road_statistics",
            children: [jsxs("div", {
                children: [jsx("div", {children: "#"}), jsx("div", {children: r.roadMap.length}), jsx(Tooltip, {
                    className: "road_statistics_tooltip",
                    children: R("roadmap.round_num")
                })]
            }), jsxs("div", {
                children: [jsx("div", {
                    className: "player",
                    children: R("roadmap.baccarat.player")
                }), jsx("div", {children: E(BACCARAT_WINNER.P)}), jsx(Tooltip, {
                    className: "road_statistics_tooltip",
                    children: R("detailed_bet_type.1002")
                })]
            }), jsxs("div", {
                children: [jsx("div", {
                    className: "banker",
                    children: R("roadmap.baccarat.banker")
                }), jsx("div", {children: E(BACCARAT_WINNER.B)}), jsx(Tooltip, {
                    className: "road_statistics_tooltip",
                    children: R("detailed_bet_type.1001")
                })]
            }), jsxs("div", {
                children: [jsx("div", {
                    className: "tie",
                    children: R("roadmap.baccarat.tie")
                }), jsx("div", {children: E(BACCARAT_WINNER.T)}), jsx(Tooltip, {
                    className: "road_statistics_tooltip",
                    children: R("detailed_bet_type.1003")
                })]
            }), jsxs("div", {
                children: [jsx("div", {className: "player pair"}), jsx("div", {children: E(BACCARAT_PAIR.P)}), jsx(Tooltip, {
                    className: "road_statistics_tooltip",
                    children: R("detailed_bet_type.1007")
                })]
            }), jsxs("div", {
                children: [jsx("div", {className: "banker pair"}), jsx("div", {children: E(BACCARAT_PAIR.B)}), jsx(Tooltip, {
                    className: "road_statistics_tooltip",
                    children: R("detailed_bet_type.1006")
                })]
            }), jsxs("button", {
                className: "ask_road blue",
                onClick: () => r.onAsk(y === BACCARAT_WINNER.P ? "" : BACCARAT_WINNER.P),
                onMouseLeave: () => r.onAsk(""),
                children: [jsx("div", {children: "?"}), jsx("div", {className: `ring ${x((B = C(BACCARAT_WINNER.P, 1).slice(-1)[0]) == null ? void 0 : B.pop())}`}), jsx("div", {className: `dot ${x((N = C(BACCARAT_WINNER.P, 2).slice(-1)[0]) == null ? void 0 : N.pop())}`}), jsx("div", {className: `slash ${x((L = C(BACCARAT_WINNER.P, 3).slice(-1)[0]) == null ? void 0 : L.pop())}`}), jsx(Tooltip, {
                    className: "road_statistics_tooltip",
                    children: R("roadmap.baccarat.predict_player")
                })]
            }), jsxs("button", {
                className: "ask_road red",
                onClick: () => r.onAsk(y === BACCARAT_WINNER.B ? "" : BACCARAT_WINNER.B),
                onMouseLeave: () => r.onAsk(""),
                children: [jsx("div", {children: "?"}), jsx("div", {className: `ring ${x((O = C(BACCARAT_WINNER.B, 1).slice(-1)[0]) == null ? void 0 : O.pop())}`}), jsx("div", {className: `dot ${x((D = C(BACCARAT_WINNER.B, 2).slice(-1)[0]) == null ? void 0 : D.pop())}`}), jsx("div", {className: `slash ${x((z = C(BACCARAT_WINNER.B, 3).slice(-1)[0]) == null ? void 0 : z.pop())}`}), jsx(Tooltip, {
                    className: "road_statistics_tooltip",
                    children: R("roadmap.baccarat.predict_banker")
                })]
            })]
        })
    }, Responsive$k = "", AndarBaharBeadRoad = r => jsx(Fragment, {
        children: jsxs("article", {
            className: "andar_bahar bead_road",
            style: {"--columns": r.size.x, "--rows": r.size.y},
            children: [r.roadMap.slice(Math.max(0, r.roadMap.length - (r.size.x - 1) * r.size.y)).map((R, y) => jsx("div", {
                children: jsx("div", {
                    className: R,
                    children: jsx("svg", {
                        viewBox: "0 0 10 10",
                        children: jsx("text", {
                            x: "50%",
                            y: "50%",
                            children: R.match(REGEX.LAST_NUMBER) ? R.match(REGEX.LAST_NUMBER)[0] : ""
                        })
                    })
                })
            }, y)), Array(r.size.x * r.size.y - Math.min(r.roadMap.length, (r.size.x - 1) * r.size.y)).fill(void 0).map((R, y) => jsx("div", {}, y))]
        })
    }), ZoomContext$1 = React.createContext([void 0, () => {
    }]), SeeBaccaratDetailedRoads = r => {
        const [R, y] = React.useState([]);
        React.useEffect(() => {
            let B = r.roadMap.slice();
            JSON.stringify(R) !== JSON.stringify(B) && y(B)
        }, [r.roadMap]);
        const {orientation: E} = useDeviceOrientation(), [C, x] = React.useState();
        return jsxs("div", {
            className: "detailed_roads",
            children: [(isDesktop$1 || E.includes("landscape")) && jsx(SeeBaccaratRoadStatistics, {
                roadMap: r.roadMap,
                onAsk: r.onAsk,
                bigRoadConsecutiveList: r.bigRoadConsecutiveList
            }), jsx("section", {
                className: "roads_layout",
                "aria-checked": !!C,
                children: jsxs(ZoomContext$1.Provider, {
                    value: [C, x],
                    children: [(C === "Big" || !C) && jsx(SeeBaccaratBigRoad, {
                        size: {
                            x: isMobile$1 && E === "small-landscape" ? 15 : C === "Big" ? 18 : 28,
                            y: 6
                        }, roadMap: R.map(B => B[1]), allowZoom: !0
                    }), (C === "Big_Eye" || !C) && jsx(SeeBaccaratBigEyeRoad, {
                        size: {
                            x: E === "small-landscape" ? 16 : 18,
                            y: 6
                        }, bigRoadConsecutiveList: r.bigRoadConsecutiveList, allowZoom: !0
                    }), (C === "Small" || !C) && jsx(SeeBaccaratSmallRoad, {
                        size: {
                            x: E === "small-landscape" ? 16 : 18,
                            y: 6
                        }, bigRoadConsecutiveList: r.bigRoadConsecutiveList, allowZoom: !0
                    }), (C === "Cockroach" || !C) && jsx(SeeBaccaratCockroachRoad, {
                        size: {
                            x: E === "small-landscape" ? 16 : 18,
                            y: 6
                        }, bigRoadConsecutiveList: r.bigRoadConsecutiveList, allowZoom: !0
                    })]
                })
            })]
        })
    }, SeeBaccaratGameTable$1 = "", Responsive$j = "", Responsive$i = "", SeeBaccaratBetTable = r => {
        var ze;
        const {t: R} = useTranslation(), y = useAvailableChips(), {
                openedPlayerCards: E,
                openedBankerCards: C
            } = React.useContext(SeeCardContext),
            x = React.useContext(ScalableContainerScaleContext), {settings: B} = React.useContext(SettingsContext), {
                gameStatus: N,
                countDown: L
            } = React.useContext(GameTableStatusContext), O = React.useContext(GameTableBetContext),
            D = React.useContext(GameTableBetStateContext), z = React.useContext(GameTablePendingBetAmountContext),
            F = React.useContext(GameTableBetAmountContext), _e = React.useContext(GameTablePayoutContext),
            Y = useDisplayCurrency(), {
                orientation: H,
                isForceLandscape: me
            } = useDeviceOrientation(), [ce, ie] = React.useState(Object.values(BACCARAT_BET_TYPE).map(De => ({
                color: y[0].color,
                amount: Helper.formatAbbrMoney(F[De])
            }))), Be = useChips({chipAttrs: ce, flat: me && D === BET_STATE.NO_BET}), ve = useBetChip(_e, F, z, Be), {
                message: Re,
                showToast: Ce,
                visible: Ne
            } = useToastMessage("", 2e3), [we, Me] = React.useState(Object.fromEntries(Object.keys(BACCARAT_BET_TYPE).filter(De => !Number.isNaN(parseInt(De))).map(De => [De, !1]))),
            ke = Helper.useOdds(), Fe = React.useCallback(De => {
                let Xe = [];
                if (De) switch (D) {
                    case BET_STATE.BETTING:
                        Xe.push("betting");
                        break;
                    case BET_STATE.NO_BET:
                        Xe.push("no_bet");
                        break
                }
                return Xe.join(" ")
            }, [D]);
        useBetAmountUpdateChipEffect(F, z, ce, ie), usePayoutUpdateChipEffect(F, z, _e, ce, ie);
        const $e = De => {
            if (D !== BET_STATE.NO_BET) {
                if (r.roadMap.length >= SIDE_BET_LIMIT_30.rounds && SIDE_BET_LIMIT_30.betTypes.includes(BACCARAT_BET_TYPE_MAP[De])) {
                    Ce(R("bet_type.tips.no_bet_after").replaceAll("%1", "30").replaceAll("%2", R(`bet_type.${BACCARAT_BET_TYPE_MAP[De]}`)));
                    return
                }
                if (r.roadMap.length >= SIDE_BET_LIMIT_50.rounds && SIDE_BET_LIMIT_50.betTypes.includes(BACCARAT_BET_TYPE_MAP[De])) {
                    Ce(R("bet_type.tips.no_bet_after").replaceAll("%1", "50").replaceAll("%2", R(`bet_type.${BACCARAT_BET_TYPE_MAP[De]}`)));
                    return
                }
                O([BACCARAT_BET_TYPE_MAP[De]])
            }
        };
        React.useEffect(() => {
            let De = Object.fromEntries(Object.keys(BACCARAT_BET_TYPE).filter(He => !Number.isNaN(parseInt(He))).map(He => [He, !1]));
            const Xe = {0: BACCARAT_BET_TYPE.TIE, 1: BACCARAT_BET_TYPE.BANKER, 2: BACCARAT_BET_TYPE.PLAYER};
            De[Xe[r.winResult[0]]] = !0, De[BACCARAT_BET_TYPE.B_PAIR] = ["1", "3", "4", "6"].includes(r.winResult[3]), De[BACCARAT_BET_TYPE.P_PAIR] = ["2", "3", "5", "6"].includes(r.winResult[3]), De[BACCARAT_BET_TYPE.EITHER_PAIR] = parseInt(r.winResult[3]) >= 1, De[BACCARAT_BET_TYPE.PERFECT_PAIR] = parseInt(r.winResult[3]) >= 4, De[BACCARAT_BET_TYPE.TIGER_PAIR] = parseInt(r.winResult[3]) >= 1, De[BACCARAT_BET_TYPE.B_BONUS] = ["3", "4", "5", "6"].includes(r.winResult[4]), De[BACCARAT_BET_TYPE.P_BONUS] = ["7", "8"].includes(r.winResult[4]), De[BACCARAT_BET_TYPE.TIGER] = ["1", "2", "3", "4"].includes(r.winResult[4]), De[BACCARAT_BET_TYPE.TIGER_BIG] = ["1", "3"].includes(r.winResult[4]), De[BACCARAT_BET_TYPE.TIGER_SMALL] = ["2", "4"].includes(r.winResult[4]), De[BACCARAT_BET_TYPE.TIGER_TIE] = r.winResult[4] === "9", De[BACCARAT_BET_TYPE.B_FABULOUS_4] = ["1", "3", "5", "7"].includes(r.winResult[5]), De[BACCARAT_BET_TYPE.P_FABULOUS_4] = ["2", "4", "6", "8"].includes(r.winResult[5]), De[BACCARAT_BET_TYPE.B_PRECIOUS_PAIR] = ["3", "4", "7", "8", "9", "B"].includes(r.winResult[5]), De[BACCARAT_BET_TYPE.P_PRECIOUS_PAIR] = ["5", "6", "7", "8", "A", "B"].includes(r.winResult[5]), De[BACCARAT_BET_TYPE.B_BLACK] = ["1", "5", "7", "A", "E", "G"].includes(r.winResult[6]), De[BACCARAT_BET_TYPE.B_RED] = ["2", "6", "8", "B", "F", "H"].includes(r.winResult[6]), De[BACCARAT_BET_TYPE.P_BLACK] = ["3", "6", "7", "C", "F", "G"].includes(r.winResult[6]), De[BACCARAT_BET_TYPE.P_RED] = ["4", "5", "8", "D", "E", "H"].includes(r.winResult[6]), De[BACCARAT_BET_TYPE.ANY_6] = parseInt(r.winResult[6], 18) >= 9;
            for (const [He, Ge] of Object.entries(De)) He !== "undefined" && Ge && (r.roadMap.length >= SIDE_BET_LIMIT_30.rounds && SIDE_BET_LIMIT_30.betTypes.includes(BACCARAT_BET_TYPE_MAP[He]) || r.roadMap.length >= SIDE_BET_LIMIT_50.rounds && SIDE_BET_LIMIT_50.betTypes.includes(BACCARAT_BET_TYPE_MAP[He])) && (De[He] = !1);
            Me(De)
        }, [r.winResult]);
        const Ve = React.useCallback(De => {
            if (r.betStatistics[De].amounts === 0) return 0;
            let Xe = r.betStatistics.map(Ge => Ge.amounts), He = Xe.reduce((Ge, Le) => Ge + Le, 0);
            return De !== BACCARAT_BET_TYPE.TIE ? Math.round(Xe[De] / He * 100) : 100 - Ve(BACCARAT_BET_TYPE.PLAYER) - Ve(BACCARAT_BET_TYPE.BANKER)
        }, [r.betStatistics]), Je = React.useCallback((De, Xe, He, Ge, Le, We, dt, et) => jsxs("button", {
            className: `${De} main_bet`,
            style: {gridArea: Xe},
            onClick: $e.bind(null, Ge),
            "aria-checked": we[Ge],
            children: [B.showBettingStatistics && jsxs("div", {
                className: "bet_area_statistcis",
                children: [jsx(Statistic, {
                    percentage: Ve(Ge),
                    color: He,
                    size: isDesktop$1 ? 46 : H.includes("portrait") ? 30 : 20 / x
                }), jsx("div", {children: Helper.formatCurrency(Y, Helper.formatMoney(r.betStatistics[Ge].amounts / 100))}), jsxs("div", {
                    className: "bet_total",
                    children: [jsx("div", {className: "svg_person"}), r.betStatistics[Ge].people]
                })]
            }), dt && Xe !== "tie" ? jsx("div", {
                className: "bet_area_results",
                children: D === BET_STATE.NO_BET && jsxs(Fragment, {
                    children: [jsx("div", {children: dt.some(nt => nt !== "-2") && dt.reduce((nt, tt, lt) => nt + (et[lt] && parseInt(tt) % 100 >= 0 ? parseInt(tt) % 100 > 10 ? 10 : parseInt(tt) % 100 : 0), 0) % 10}), jsx(BaccaratGameResults, {
                        side: Xe,
                        results: dt.map((nt, tt) => et[tt] ? nt : "-2"),
                        showBackface: !0
                    }), " "]
                })
            }) : jsx("div", {}), jsxs("div", {
                className: "bet_area_info",
                children: [jsx("div", {className: "title", children: R(`bet_type.${Le}`)}), jsx("div", {
                    className: "odds",
                    children: ke(We)
                }), ve(Ge)]
            })]
        }), [we, D, ve, r.betStatistics, Be, O, B.showBettingStatistics, x, H]), Qe = De => {
            let Xe = payoutArr[GameType.Baccarat].find(He => He.betType.toString() === BACCARAT_BET_TYPE_MAP[De].toString());
            return Xe == null ? void 0 : Xe.payout
        }, Ze = React.useCallback(De => {
            const Xe = r.roadMap.length, He = BACCARAT_BET_TYPE_MAP[De];
            let Ge = SIDE_BET_LIMIT_50.betTypes.includes(He) && Xe >= SIDE_BET_LIMIT_50.rounds || SIDE_BET_LIMIT_30.betTypes.includes(He) && Xe >= SIDE_BET_LIMIT_30.rounds,
                Le = Qe(De);
            return Le && Le.includes("-") && (Le = void 0), jsxs("button", {
                className: `${BACCARAT_BET_TYPE[De].toLowerCase()} ${BACCARAT_BET_TYPE[De].startsWith("B_") ? "red" : BACCARAT_BET_TYPE[De].startsWith("P_") ? "blue" : "yellow"}`,
                style: {gridArea: BACCARAT_BET_TYPE[De].toLowerCase()},
                onClick: $e.bind(null, De),
                "aria-disabled": Ge,
                "aria-checked": !Ge && we[De],
                children: [jsx("div", {
                    className: "title",
                    children: R(`bet_type.${He}`)
                }), Le && jsx("div", {className: "odds", children: ke(Le)}), ve(De)]
            }, De)
        }, [we, D, ve, Be, O, r.roadMap]), qe = (ze = BACCARAT_PLAY_TYPE_PRESET.find(De => {
            let Xe = 0;
            for (const [He, Ge] of Object.entries(B.baccaratBetTypes)) Ge && Xe++;
            return De.betAreas.every(He => B.baccaratBetTypes[He]) && De.betAreas.length === Xe
        })) == null ? void 0 : ze.type;
        return jsx(BetTable, {
            children: jsxs("div", {
                className: `bet_table_container see_baccarat_bet_table ${Fe(!0)} ${qe}`,
                children: [jsx("div", {className: "background"}), Je("blue", "player", "#47B8FF59", BACCARAT_BET_TYPE.PLAYER, BetType.B_Player, 1, r.playerCards, E), Je("green", "tie", "#BCFF8959", BACCARAT_BET_TYPE.TIE, BetType.B_Tie, 8), Je("red", "banker", "#FF9A8959", BACCARAT_BET_TYPE.BANKER, BetType.B_Banker, .95, r.bankerCards, C), Object.entries(B.baccaratBetTypes).filter(De => De[1]).map(De => Ze(parseInt(De[0]))), Ne && jsx("div", {
                    className: "bet_area_warning",
                    "aria-hidden": !Ne,
                    "data-message": Re
                }), [TableStatus.BetOver, TableStatus.BoBCard, TableStatus.BoPCard, TableStatus.BoCard].includes(N.tableStatus) && !(F[BACCARAT_BET_TYPE.BANKER] || F[BACCARAT_BET_TYPE.PLAYER]) && L && (E.filter(De => De).length !== r.playerCards.filter(De => parseInt(De) > 0).length || C.filter(De => De).length !== r.bankerCards.filter(De => parseInt(De) > 0).length) && jsx("div", {
                    className: "non_see_warning",
                    "aria-hidden": !1,
                    children: R("game_table.seecard.other_squeezing")
                })]
            })
        })
    }, RoadMapMovedContext = React.createContext(!1), AskingRoadContext = React.createContext(""),
    SeeBaccaratGameTable = () => {
        const {t: r} = useTranslation(), {
            gameTableInfo: R,
            getUpdatedBetStatistics: y
        } = React.useContext(GameTableContext), {gameStatus: E} = React.useContext(GameTableStatusContext), {addMessage: C} = React.useContext(ToastContext), {
            play: x,
            sound: B
        } = React.useContext(SoundContext);
        React.useContext(GameTablePayoutContext);
        const N = React.useContext(GameTableBetStateContext), L = React.useContext(GameTableBetAmountContext), {
            orientation: O,
            isForceLandscape: D
        } = useDeviceOrientation(), [z, F] = React.useState("");
        usePrinterConnection();
        const [_e, Y] = React.useState([]), [H, me] = React.useState([]), {
                seeingSide: ce,
                setSeeingSide: ie,
                rotateCard: Be,
                onOpenedCard: ve,
                playerCardsOrientation: Re,
                bankerCardsOrientation: Ce,
                openedPlayerCards: Ne,
                setOpenedPlayerCards: we,
                openedBankerCards: Me,
                setOpenedBankerCards: ke,
                seeingCardIndex: Fe,
                setSeeingCardIndex: $e,
                panelState: Ve
            } = useSeeCard(_e, H, L, GameType.See), [Je, Qe] = React.useState(Array(3).fill({people: 0, amounts: 0})),
            Ze = useRoadMap(R.tableInfo.tableId, R.tableInfo.currentShoeGameResult, parseBaccaratRoadData), [qe, ze] = React.useState(""),
            De = React.useRef(null), Xe = useRoadMovedListener(De), He = React.useMemo(() => {
                let Le = Ze.join("").replace(/[\drbG]/g, "").match(REGEX.GROUP_SIDE);
                return Le ? Le.reduce((We, dt) => (We.push({side: dt[0], wins: dt.length}), We), []) : []
            }, [Ze]);
        React.useEffect(() => {
            me([]), Y([])
        }, [R.tableInfo.tableId]), React.useEffect(() => {
            if (R.tableInfo.tableId !== -1) {
                let Le = y();
                Le ? Le = Le.filter((We, dt) => [0, 1, 2].includes(dt)) : Le = Je.map(We => ({
                    people: 0,
                    amounts: 0
                })), JSON.stringify(Le) !== JSON.stringify(Je) && Qe(Le)
            }
        }, [R]), React.useEffect(() => {
            if (E.tableId !== -1) {
                if (E.rawGameResult) {
                    if (JSON.stringify(E.rawGameResult[0]) !== JSON.stringify(H) && (E.rawGameResult[0].some(Le => Le !== "-2") && x({id: "card_flip"}), me(E.rawGameResult[0].slice())), JSON.stringify(E.rawGameResult[1]) !== JSON.stringify(_e)) {
                        E.rawGameResult[1].some(We => We !== "-2") && x({id: "card_flip"});
                        let Le = E.rawGameResult[1].slice();
                        Y(Le)
                    }
                } else N === BET_STATE.BETTING && (Y([]), me([]));
                if (E.currentGameRoundWinResult) {
                    let Le = E.currentGameRoundWinResult[0][0];
                    if (Le === "-1") F(""); else {
                        const We = {0: r("bet_type.1003"), 1: r("bet_type.1001"), 2: r("bet_type.1002")},
                            dt = {0: TOAST_COLOR.GREEN, 1: TOAST_COLOR.RED, 2: TOAST_COLOR.BLUE};
                        F(Le), C(We[Le[0]], dt[Le[0]], 4), (async () => {
                            switch (x({id: `banker_${Le[1]}`}), await new Promise(nt => setTimeout(nt, B.sound._sprite[`banker_${Le[1]}`][1] + 250)), x({id: `player_${Le[2]}`}), await new Promise(nt => setTimeout(nt, B.sound._sprite[`player_${Le[2]}`][1] + 250)), Le[0]) {
                                case"0":
                                    x({id: "tie"});
                                    break;
                                case"1":
                                    x({id: "banker_win"});
                                    break;
                                case"2":
                                    x({id: "player_win"});
                                    break
                            }
                        })()
                    }
                }
            }
        }, [E, N]);
        const Ge = (Le, We) => {
            ze(qe !== Le ? Le : "")
        };
        return jsxs(Fragment, {
            children: [jsx(AskingRoadContext.Provider, {
                value: qe, children: jsxs(SeeCardContext.Provider, {
                    value: {
                        seeingSide: ce,
                        setSeeingSide: ie,
                        rotateCard: Be,
                        onOpenedCard: ve,
                        playerCardsOrientation: Re,
                        bankerCardsOrientation: Ce,
                        openedPlayerCards: Ne,
                        setOpenedPlayerCards: we,
                        openedBankerCards: Me,
                        setOpenedBankerCards: ke,
                        seeingCardIndex: Fe,
                        setSeeingCardIndex: $e,
                        panelState: Ve
                    },
                    children: [jsx(SeePanel, {
                        panelState: Ve,
                        betAmounts: L,
                        playerCards: _e,
                        bankerCards: H,
                        printCards: !0
                    }), !D && jsx("div", {
                        id: "road_stats",
                        children: jsx(SeeBaccaratRoadStatistics, {roadMap: Ze, onAsk: Ge, bigRoadConsecutiveList: He})
                    }), isMobile$1 && O.includes("short-portrait") && jsx(RoadMapMovedContext.Provider, {
                        value: Xe,
                        children: jsxs("div", {
                            id: "roads_list",
                            ref: De,
                            children: [jsx(SeeBaccaratBeadRoad, {
                                size: {x: 23, y: 6},
                                roadMap: Ze
                            }), jsx(SeeBaccaratDetailedRoads, {roadMap: Ze, onAsk: Ge, bigRoadConsecutiveList: He})]
                        })
                    }), jsxs("div", {
                        id: "bet_area",
                        children: [jsx(GameTableName, {}), jsx(SeeBaccaratBetTable, {
                            betStatistics: Je,
                            roadMap: Ze,
                            playerCards: _e,
                            bankerCards: H,
                            winResult: z
                        })]
                    }), (isDesktop$1 || !O.includes("short-portrait")) && jsxs(Fragment, {
                        children: [jsx("div", {
                            id: "bead_road",
                            children: jsx(SeeBaccaratBeadRoad, {
                                size: {
                                    x: isDesktop$1 ? 16 : O === "small-landscape" ? 11 : 23,
                                    y: 6
                                }, roadMap: Ze
                            })
                        }), jsx("div", {
                            id: "detailed_road",
                            children: jsx(SeeBaccaratDetailedRoads, {
                                roadMap: Ze,
                                onAsk: Ge,
                                bigRoadConsecutiveList: He
                            })
                        })]
                    })]
                })
            }), jsx(BaccaratPlayType, {})]
        })
    }, map$1 = {G: "tie", R: "banker", B: "player"}, SeeBaccaratBeadRoad = r => {
        const {t: R} = useTranslation(), [y, E] = React.useState(0), C = React.useContext(AskingRoadContext);
        return jsx(Fragment, {
            children: jsxs("article", {
                className: "bead_road",
                style: {"--columns": r.size.x, "--rows": r.size.y},
                onClick: () => E((y + 1) % 2),
                children: [r.roadMap.slice(Math.max(0, r.roadMap.length - (r.size.x - 1) * r.size.y)).map((x, B) => jsx("div", {
                    children: jsx("div", {
                        className: x,
                        children: jsx("svg", {
                            viewBox: "0 0 10 10",
                            children: jsx("text", {
                                x: "50%",
                                y: "50%",
                                children: y === 0 ? R(`roadmap.baccarat.${map$1[x[1]]}`) : x[0]
                            })
                        })
                    })
                }, B)), C && jsx("div", {
                    children: jsx("div", {
                        className: `${C} asking`,
                        children: y === 0 && jsx("svg", {
                            viewBox: "0 0 10 10",
                            children: jsx("text", {x: "50%", y: "50%", children: R(`roadmap.baccarat.${map$1[C]}`)})
                        })
                    })
                }), Array(r.size.x * r.size.y - Math.min(r.roadMap.length + (C ? 1 : 0), (r.size.x - 1) * r.size.y)).fill(void 0).map((x, B) => jsx("div", {}, B))]
            })
        })
    }, SeeBaccaratBigRoad = r => {
        const [R, y] = React.useContext(ZoomContext$1), E = React.useContext(AskingRoadContext),
            C = React.useContext(RoadMapMovedContext);
        let {rerender: x} = useRerender();
        const B = useBaccaratBigRoadmap(r, E, !1),
            N = r.renderWithCanvas ? useBaccaratBigRoadmap(r, E, !0) : jsx(Fragment, {});
        return jsx(Fragment, {
            children: jsxs("article", {
                className: "big_road",
                style: {"--columns": r.size.x, "--rows": r.size.y},
                onClick: () => !C && y(R === "Big" ? void 0 : "Big"),
                "aria-checked": R === "Big",
                children: [r.allowZoom && isDesktop$1 && jsx(Tooltip, {
                    className: "roads_layout_tooltip",
                    children: jsx("div", {className: R === "Big" ? "svg_zoom_out" : "svg_zoom_in"})
                }), !!E && N, B]
            }, x)
        })
    }, offsetCol$5 = 1, SeeBaccaratBigEyeRoad = r => {
        const [R, y] = React.useContext(ZoomContext$1), E = React.useContext(AskingRoadContext),
            C = React.useContext(RoadMapMovedContext), [x, B] = React.useState([]), N = React.useRef([]),
            L = React.useRef([-1, -1]), O = React.useRef([]),
            D = useRenderRoadmap({size: r.size, displayRoadMap: x, lastGrid: L.current, asking: !!E});
        return React.useEffect(() => {
            initDetailedRoadMap(r.size, offsetCol$5, E, L, N, O, r.bigRoadConsecutiveList), B(JSON.parse(JSON.stringify(N.current)))
        }, [r.bigRoadConsecutiveList, E]), jsxs("article", {
            className: "big_eye_road",
            style: {"--columns": r.size.x, "--rows": r.size.y},
            onClick: () => !C && y(R === "Big_Eye" ? void 0 : "Big_Eye"),
            "aria-checked": R === "Big_Eye",
            children: [r.allowZoom && isDesktop$1 && jsx(Tooltip, {
                className: "roads_layout_tooltip",
                children: jsx("div", {className: R === "Big_Eye" ? "svg_zoom_out" : "svg_zoom_in"})
            }), D]
        })
    }, offsetCol$4 = 2, SeeBaccaratSmallRoad = r => {
        const [R, y] = React.useContext(ZoomContext$1), E = React.useContext(AskingRoadContext),
            C = React.useContext(RoadMapMovedContext), [x, B] = React.useState([]), N = React.useRef([]),
            L = React.useRef([-1, -1]), O = React.useRef([]),
            D = useRenderRoadmap({size: r.size, displayRoadMap: x, lastGrid: L.current, asking: !!E});
        return React.useEffect(() => {
            initDetailedRoadMap(r.size, offsetCol$4, E, L, N, O, r.bigRoadConsecutiveList), B(JSON.parse(JSON.stringify(N.current)))
        }, [r.bigRoadConsecutiveList, E]), jsxs("article", {
            className: "small_road",
            style: {"--columns": r.size.x, "--rows": r.size.y},
            onClick: () => !C && y(R === "Small" ? void 0 : "Small"),
            "aria-checked": R === "Small",
            children: [r.allowZoom && isDesktop$1 && jsx(Tooltip, {
                className: "roads_layout_tooltip",
                children: jsx("div", {className: R === "Small" ? "svg_zoom_out" : "svg_zoom_in"})
            }), D]
        })
    }, offsetCol$3 = 3, SeeBaccaratCockroachRoad = r => {
        const [R, y] = React.useContext(ZoomContext$1), E = React.useContext(AskingRoadContext),
            C = React.useContext(RoadMapMovedContext), [x, B] = React.useState([]), N = React.useRef([]),
            L = React.useRef([-1, -1]), O = React.useRef([]),
            D = useRenderRoadmap({size: r.size, displayRoadMap: x, lastGrid: L.current, asking: !!E});
        return React.useEffect(() => {
            initDetailedRoadMap(r.size, offsetCol$3, E, L, N, O, r.bigRoadConsecutiveList), B(JSON.parse(JSON.stringify(N.current)))
        }, [r.bigRoadConsecutiveList, E]), jsxs("article", {
            className: "cockroach_road",
            style: {"--columns": r.size.x, "--rows": r.size.y},
            onClick: () => !C && y(R === "Cockroach" ? void 0 : "Cockroach"),
            "aria-checked": R === "Cockroach",
            children: [r.allowZoom && isDesktop$1 && jsx(Tooltip, {
                className: "roads_layout_tooltip",
                children: jsx("div", {className: R === "Cockroach" ? "svg_zoom_out" : "svg_zoom_in"})
            }), D]
        })
    }, Responsive$h = "", SeeBaccaratRoadStatistics = r => {
        var B, N, L, O, D, z;
        const {t: R} = useTranslation(), y = React.useContext(AskingRoadContext),
            E = React.useCallback(F => r.roadMap.filter(Y => Y.includes(F)).length, [r.roadMap]),
            C = React.useCallback((F, _e) => {
                const Y = [-1, -1], H = [], me = (Be, ve) => {
                    let Re = Ce => {
                        const Ne = Y[0] !== -1 && Y[1] !== -1 ? H[Y[0]][Y[1]] : void 0;
                        if (!H.flat(2).length) addToCol({
                            roadMap: H,
                            col: 0,
                            road: Ce,
                            sizeX: 16,
                            lastGrid: Y
                        }); else if (Ne !== Ce) {
                            const we = H.map(Me => Me[0]).findLastIndex(Me => Me !== void 0);
                            addToCol({roadMap: H, col: we + 1, road: Ce, sizeX: 16, lastGrid: Y})
                        } else {
                            const [we, Me] = Y;
                            let ke = Me < 6 - 1 && !H[we][Me + 1];
                            !(we > 0 && (we !== H.map($e => $e[0]).findLastIndex($e => $e && $e.includes(Ce)) || Me === 0 && H[we][Me] === H[we - 1][Me])) && ke ? addToCol({
                                roadMap: H,
                                col: we,
                                road: Ce,
                                sizeX: 16,
                                lastGrid: Y
                            }) : addToColBottom({roadMap: H, col: we + 1, road: Ce, sizeY: 6, lastGrid: Y})
                        }
                    };
                    r.bigRoadConsecutiveList[Be - _e].wins === ve - 1 || ve === 1 && r.bigRoadConsecutiveList[Be - (_e + 1)].wins !== r.bigRoadConsecutiveList[Be - 1].wins ? Re(ROAD_COLOR.B) : Re(ROAD_COLOR.R)
                };
                let ce = JSON.parse(JSON.stringify(r.bigRoadConsecutiveList)), ie = ce.length - 1;
                return ie >= 0 && F === ce[ie].side ? ce[ie].wins = ce[ie].wins + 1 : ce.push({
                    side: F,
                    wins: 1
                }), ce.forEach((Be, ve) => {
                    if (!(ve < _e)) for (let Re = 1; Re <= Be.wins; Re++) ve === _e && Re === 1 || me(ve, Re)
                }), H
            }, [r.bigRoadConsecutiveList]), x = React.useCallback(F => {
                switch (F) {
                    case"B":
                        return "blue";
                    case"R":
                        return "red";
                    default:
                        return "none"
                }
            }, []);
        return jsxs("section", {
            className: "road_statistics",
            id: "baccarat_road_statistics",
            children: [jsxs("div", {
                children: [jsx("div", {children: "#"}), jsx("div", {children: r.roadMap.length}), jsx(Tooltip, {
                    className: "road_statistics_tooltip",
                    children: R("roadmap.round_num")
                })]
            }), jsxs("div", {
                children: [jsx("div", {
                    className: "player",
                    children: R("roadmap.baccarat.player")
                }), jsx("div", {children: E(BACCARAT_WINNER.P)}), jsx(Tooltip, {
                    className: "road_statistics_tooltip",
                    children: R("detailed_bet_type.1002")
                })]
            }), jsxs("div", {
                children: [jsx("div", {
                    className: "banker",
                    children: R("roadmap.baccarat.banker")
                }), jsx("div", {children: E(BACCARAT_WINNER.B)}), jsx(Tooltip, {
                    className: "road_statistics_tooltip",
                    children: R("detailed_bet_type.1001")
                })]
            }), jsxs("div", {
                children: [jsx("div", {
                    className: "tie",
                    children: R("roadmap.baccarat.tie")
                }), jsx("div", {children: E(BACCARAT_WINNER.T)}), jsx(Tooltip, {
                    className: "road_statistics_tooltip",
                    children: R("detailed_bet_type.1003")
                })]
            }), jsxs("div", {
                children: [jsx("div", {className: "player pair"}), jsx("div", {children: E(BACCARAT_PAIR.P)}), jsx(Tooltip, {
                    className: "road_statistics_tooltip",
                    children: R("detailed_bet_type.1007")
                })]
            }), jsxs("div", {
                children: [jsx("div", {className: "banker pair"}), jsx("div", {children: E(BACCARAT_PAIR.B)}), jsx(Tooltip, {
                    className: "road_statistics_tooltip",
                    children: R("detailed_bet_type.1006")
                })]
            }), jsxs("button", {
                className: "ask_road blue",
                onClick: () => r.onAsk(y === BACCARAT_WINNER.P ? "" : BACCARAT_WINNER.P),
                onMouseLeave: () => r.onAsk(""),
                children: [jsx("div", {children: "?"}), jsx("div", {className: `ring ${x((B = C(BACCARAT_WINNER.P, 1).slice(-1)[0]) == null ? void 0 : B.pop())}`}), jsx("div", {className: `dot ${x((N = C(BACCARAT_WINNER.P, 2).slice(-1)[0]) == null ? void 0 : N.pop())}`}), jsx("div", {className: `slash ${x((L = C(BACCARAT_WINNER.P, 3).slice(-1)[0]) == null ? void 0 : L.pop())}`}), jsx(Tooltip, {
                    className: "road_statistics_tooltip",
                    children: R("roadmap.baccarat.predict_player")
                })]
            }), jsxs("button", {
                className: "ask_road red",
                onClick: () => r.onAsk(y === BACCARAT_WINNER.B ? "" : BACCARAT_WINNER.B),
                onMouseLeave: () => r.onAsk(""),
                children: [jsx("div", {children: "?"}), jsx("div", {className: `ring ${x((O = C(BACCARAT_WINNER.B, 1).slice(-1)[0]) == null ? void 0 : O.pop())}`}), jsx("div", {className: `dot ${x((D = C(BACCARAT_WINNER.B, 2).slice(-1)[0]) == null ? void 0 : D.pop())}`}), jsx("div", {className: `slash ${x((z = C(BACCARAT_WINNER.B, 3).slice(-1)[0]) == null ? void 0 : z.pop())}`}), jsx(Tooltip, {
                    className: "road_statistics_tooltip",
                    children: R("roadmap.baccarat.predict_banker")
                })]
            })]
        })
    }, ZoomContext = React.createContext([void 0, () => {
    }]), VipBaccaratDetailedRoads = r => {
        const [R, y] = React.useState([]);
        React.useEffect(() => {
            let B = r.roadMap.slice();
            JSON.stringify(R) !== JSON.stringify(B) && y(B)
        }, [r.roadMap]);
        const {orientation: E} = useDeviceOrientation(), [C, x] = React.useState();
        return jsxs("div", {
            className: "detailed_roads",
            children: [(isDesktop$1 || E.includes("landscape")) && jsx(VipBaccaratRoadStatistics, {
                roadMap: r.roadMap,
                onAsk: r.onAsk,
                bigRoadConsecutiveList: r.bigRoadConsecutiveList
            }), jsx("section", {
                className: "roads_layout",
                "aria-checked": !!C,
                children: jsxs(ZoomContext.Provider, {
                    value: [C, x],
                    children: [(C === "Big" || !C) && jsx(VipBaccaratBigRoad, {
                        size: {
                            x: isMobile$1 && E === "small-landscape" ? 15 : C === "Big" ? 18 : 28,
                            y: 6
                        }, roadMap: R.map(B => B[1]), allowZoom: !0
                    }), (C === "Big_Eye" || !C) && jsx(VipBaccaratBigEyeRoad, {
                        size: {
                            x: E === "small-landscape" ? 16 : 18,
                            y: 6
                        }, bigRoadConsecutiveList: r.bigRoadConsecutiveList, allowZoom: !0
                    }), (C === "Small" || !C) && jsx(VipBaccaratSmallRoad, {
                        size: {
                            x: E === "small-landscape" ? 16 : 18,
                            y: 6
                        }, bigRoadConsecutiveList: r.bigRoadConsecutiveList, allowZoom: !0
                    }), (C === "Cockroach" || !C) && jsx(VipBaccaratCockroachRoad, {
                        size: {
                            x: E === "small-landscape" ? 16 : 18,
                            y: 6
                        }, bigRoadConsecutiveList: r.bigRoadConsecutiveList, allowZoom: !0
                    })]
                })
            })]
        })
    }, map = {G: "tie", R: "banker", B: "player"}, VipBaccaratBeadRoad = r => {
        const {t: R} = useTranslation(), [y, E] = React.useState(0), C = React.useContext(AskingRoadContext$4);
        return jsx(Fragment, {
            children: jsxs("article", {
                className: "bead_road",
                style: {"--columns": r.size.x, "--rows": r.size.y},
                onClick: () => E((y + 1) % 2),
                children: [r.roadMap.slice(Math.max(0, r.roadMap.length - (r.size.x - 1) * r.size.y)).map((x, B) => jsx("div", {
                    children: jsx("div", {
                        className: x,
                        children: jsx("svg", {
                            viewBox: "0 0 10 10",
                            children: jsx("text", {
                                x: "50%",
                                y: "50%",
                                children: y === 0 ? R(`roadmap.baccarat.${map[x[1]]}`) : x[0]
                            })
                        })
                    })
                }, B)), C && jsx("div", {
                    children: jsx("div", {
                        className: `${C} asking`,
                        children: y === 0 && jsx("svg", {
                            viewBox: "0 0 10 10",
                            children: jsx("text", {x: "50%", y: "50%", children: R(`roadmap.baccarat.${map[C]}`)})
                        })
                    })
                }), Array(r.size.x * r.size.y - Math.min(r.roadMap.length + (C ? 1 : 0), (r.size.x - 1) * r.size.y)).fill(void 0).map((x, B) => jsx("div", {}, B))]
            })
        })
    }, VipBaccaratBigRoad = r => {
        const [R, y] = React.useContext(ZoomContext), E = React.useContext(AskingRoadContext$4),
            C = React.useContext(RoadMapMovedContext$4);
        let {rerender: x} = useRerender();
        const B = useBaccaratBigRoadmap(r, E, !1),
            N = r.renderWithCanvas ? useBaccaratBigRoadmap(r, E, !0) : jsx(Fragment, {});
        return jsx(Fragment, {
            children: jsxs("article", {
                className: "big_road",
                style: {"--columns": r.size.x, "--rows": r.size.y},
                onClick: () => !C && y(R === "Big" ? void 0 : "Big"),
                "aria-checked": R === "Big",
                children: [r.allowZoom && isDesktop$1 && jsx(Tooltip, {
                    className: "roads_layout_tooltip",
                    children: jsx("div", {className: R === "Big" ? "svg_zoom_out" : "svg_zoom_in"})
                }), !!E && N, B]
            }, x)
        })
    }, offsetCol$2 = 1, VipBaccaratBigEyeRoad = r => {
        const [R, y] = React.useContext(ZoomContext), E = React.useContext(AskingRoadContext$4),
            C = React.useContext(RoadMapMovedContext$4), [x, B] = React.useState([]), N = React.useRef([]),
            L = React.useRef([-1, -1]), O = React.useRef([]),
            D = useRenderRoadmap({size: r.size, displayRoadMap: x, lastGrid: L.current, asking: !!E});
        return React.useEffect(() => {
            initDetailedRoadMap(r.size, offsetCol$2, E, L, N, O, r.bigRoadConsecutiveList), B(JSON.parse(JSON.stringify(N.current)))
        }, [r.bigRoadConsecutiveList, E]), jsxs("article", {
            className: "big_eye_road",
            style: {"--columns": r.size.x, "--rows": r.size.y},
            onClick: () => !C && y(R === "Big_Eye" ? void 0 : "Big_Eye"),
            "aria-checked": R === "Big_Eye",
            children: [r.allowZoom && isDesktop$1 && jsx(Tooltip, {
                className: "roads_layout_tooltip",
                children: jsx("div", {className: R === "Big_Eye" ? "svg_zoom_out" : "svg_zoom_in"})
            }), D]
        })
    }, offsetCol$1 = 2, VipBaccaratSmallRoad = r => {
        const [R, y] = React.useContext(ZoomContext), E = React.useContext(AskingRoadContext$4),
            C = React.useContext(RoadMapMovedContext$4), [x, B] = React.useState([]), N = React.useRef([]),
            L = React.useRef([-1, -1]), O = React.useRef([]),
            D = useRenderRoadmap({size: r.size, displayRoadMap: x, lastGrid: L.current, asking: !!E});
        return React.useEffect(() => {
            initDetailedRoadMap(r.size, offsetCol$1, E, L, N, O, r.bigRoadConsecutiveList), B(JSON.parse(JSON.stringify(N.current)))
        }, [r.bigRoadConsecutiveList, E]), jsxs("article", {
            className: "small_road",
            style: {"--columns": r.size.x, "--rows": r.size.y},
            onClick: () => !C && y(R === "Small" ? void 0 : "Small"),
            "aria-checked": R === "Small",
            children: [r.allowZoom && isDesktop$1 && jsx(Tooltip, {
                className: "roads_layout_tooltip",
                children: jsx("div", {className: R === "Small" ? "svg_zoom_out" : "svg_zoom_in"})
            }), D]
        })
    }, offsetCol = 3, VipBaccaratCockroachRoad = r => {
        const [R, y] = React.useContext(ZoomContext), E = React.useContext(AskingRoadContext$4),
            C = React.useContext(RoadMapMovedContext$4), [x, B] = React.useState([]), N = React.useRef([]),
            L = React.useRef([-1, -1]), O = React.useRef([]),
            D = useRenderRoadmap({size: r.size, displayRoadMap: x, lastGrid: L.current, asking: !!E});
        return React.useEffect(() => {
            initDetailedRoadMap(r.size, offsetCol, E, L, N, O, r.bigRoadConsecutiveList), B(JSON.parse(JSON.stringify(N.current)))
        }, [r.bigRoadConsecutiveList, E]), jsxs("article", {
            className: "cockroach_road",
            style: {"--columns": r.size.x, "--rows": r.size.y},
            onClick: () => !C && y(R === "Cockroach" ? void 0 : "Cockroach"),
            "aria-checked": R === "Cockroach",
            children: [r.allowZoom && isDesktop$1 && jsx(Tooltip, {
                className: "roads_layout_tooltip",
                children: jsx("div", {className: R === "Cockroach" ? "svg_zoom_out" : "svg_zoom_in"})
            }), D]
        })
    }, Responsive$g = "", VipBaccaratRoadStatistics = r => {
        var B, N, L, O, D, z;
        const {t: R} = useTranslation(), y = React.useContext(AskingRoadContext$4),
            E = React.useCallback(F => r.roadMap.filter(Y => Y.includes(F)).length, [r.roadMap]),
            C = React.useCallback((F, _e) => {
                const Y = [-1, -1], H = [], me = (Be, ve) => {
                    let Re = Ce => {
                        const Ne = Y[0] !== -1 && Y[1] !== -1 ? H[Y[0]][Y[1]] : void 0;
                        if (!H.flat(2).length) addToCol({
                            roadMap: H,
                            col: 0,
                            road: Ce,
                            sizeX: 16,
                            lastGrid: Y
                        }); else if (Ne !== Ce) {
                            const we = H.map(Me => Me[0]).findLastIndex(Me => Me !== void 0);
                            addToCol({roadMap: H, col: we + 1, road: Ce, sizeX: 16, lastGrid: Y})
                        } else {
                            const [we, Me] = Y;
                            let ke = Me < 6 - 1 && !H[we][Me + 1];
                            !(we > 0 && (we !== H.map($e => $e[0]).findLastIndex($e => $e && $e.includes(Ce)) || Me === 0 && H[we][Me] === H[we - 1][Me])) && ke ? addToCol({
                                roadMap: H,
                                col: we,
                                road: Ce,
                                sizeX: 16,
                                lastGrid: Y
                            }) : addToColBottom({roadMap: H, col: we + 1, road: Ce, sizeY: 6, lastGrid: Y})
                        }
                    };
                    r.bigRoadConsecutiveList[Be - _e].wins === ve - 1 || ve === 1 && r.bigRoadConsecutiveList[Be - (_e + 1)].wins !== r.bigRoadConsecutiveList[Be - 1].wins ? Re(ROAD_COLOR.B) : Re(ROAD_COLOR.R)
                };
                let ce = JSON.parse(JSON.stringify(r.bigRoadConsecutiveList)), ie = ce.length - 1;
                return ie >= 0 && F === ce[ie].side ? ce[ie].wins = ce[ie].wins + 1 : ce.push({
                    side: F,
                    wins: 1
                }), ce.forEach((Be, ve) => {
                    if (!(ve < _e)) for (let Re = 1; Re <= Be.wins; Re++) ve === _e && Re === 1 || me(ve, Re)
                }), H
            }, [r.bigRoadConsecutiveList]), x = React.useCallback(F => {
                switch (F) {
                    case"B":
                        return "blue";
                    case"R":
                        return "red";
                    default:
                        return "none"
                }
            }, []);
        return jsxs("section", {
            className: "road_statistics",
            id: "baccarat_road_statistics",
            children: [jsxs("div", {
                children: [jsx("div", {children: "#"}), jsx("div", {children: r.roadMap.length}), jsx(Tooltip, {
                    className: "road_statistics_tooltip",
                    children: R("roadmap.round_num")
                })]
            }), jsxs("div", {
                children: [jsx("div", {
                    className: "player",
                    children: R("roadmap.baccarat.player")
                }), jsx("div", {children: E(BACCARAT_WINNER.P)}), jsx(Tooltip, {
                    className: "road_statistics_tooltip",
                    children: R("detailed_bet_type.1002")
                })]
            }), jsxs("div", {
                children: [jsx("div", {
                    className: "banker",
                    children: R("roadmap.baccarat.banker")
                }), jsx("div", {children: E(BACCARAT_WINNER.B)}), jsx(Tooltip, {
                    className: "road_statistics_tooltip",
                    children: R("detailed_bet_type.1001")
                })]
            }), jsxs("div", {
                children: [jsx("div", {
                    className: "tie",
                    children: R("roadmap.baccarat.tie")
                }), jsx("div", {children: E(BACCARAT_WINNER.T)}), jsx(Tooltip, {
                    className: "road_statistics_tooltip",
                    children: R("detailed_bet_type.1003")
                })]
            }), jsxs("div", {
                children: [jsx("div", {className: "player pair"}), jsx("div", {children: E(BACCARAT_PAIR.P)}), jsx(Tooltip, {
                    className: "road_statistics_tooltip",
                    children: R("detailed_bet_type.1007")
                })]
            }), jsxs("div", {
                children: [jsx("div", {className: "banker pair"}), jsx("div", {children: E(BACCARAT_PAIR.B)}), jsx(Tooltip, {
                    className: "road_statistics_tooltip",
                    children: R("detailed_bet_type.1006")
                })]
            }), jsxs("button", {
                className: "ask_road blue",
                onClick: () => r.onAsk(y === BACCARAT_WINNER.P ? "" : BACCARAT_WINNER.P),
                onMouseLeave: () => r.onAsk(""),
                children: [jsx("div", {children: "?"}), jsx("div", {className: `ring ${x((B = C(BACCARAT_WINNER.P, 1).slice(-1)[0]) == null ? void 0 : B.pop())}`}), jsx("div", {className: `dot ${x((N = C(BACCARAT_WINNER.P, 2).slice(-1)[0]) == null ? void 0 : N.pop())}`}), jsx("div", {className: `slash ${x((L = C(BACCARAT_WINNER.P, 3).slice(-1)[0]) == null ? void 0 : L.pop())}`}), jsx(Tooltip, {
                    className: "road_statistics_tooltip",
                    children: R("roadmap.baccarat.predict_player")
                })]
            }), jsxs("button", {
                className: "ask_road red",
                onClick: () => r.onAsk(y === BACCARAT_WINNER.B ? "" : BACCARAT_WINNER.B),
                onMouseLeave: () => r.onAsk(""),
                children: [jsx("div", {children: "?"}), jsx("div", {className: `ring ${x((O = C(BACCARAT_WINNER.B, 1).slice(-1)[0]) == null ? void 0 : O.pop())}`}), jsx("div", {className: `dot ${x((D = C(BACCARAT_WINNER.B, 2).slice(-1)[0]) == null ? void 0 : D.pop())}`}), jsx("div", {className: `slash ${x((z = C(BACCARAT_WINNER.B, 3).slice(-1)[0]) == null ? void 0 : z.pop())}`}), jsx(Tooltip, {
                    className: "road_statistics_tooltip",
                    children: R("roadmap.baccarat.predict_banker")
                })]
            })]
        })
    }, Settings$1 = "", Responsive$f = "", Settings = r => {
        const R = [BACCARAT_WINNER.T, BACCARAT_WINNER.T, BACCARAT_WINNER.B, BACCARAT_WINNER.B, BACCARAT_WINNER.T, BACCARAT_WINNER.B, BACCARAT_WINNER.P, BACCARAT_WINNER.B, BACCARAT_WINNER.B, BACCARAT_WINNER.B, BACCARAT_WINNER.B, BACCARAT_WINNER.B, BACCARAT_WINNER.B, BACCARAT_WINNER.B, BACCARAT_WINNER.B, BACCARAT_WINNER.B, BACCARAT_WINNER.B, BACCARAT_WINNER.P, BACCARAT_WINNER.P, BACCARAT_WINNER.P, BACCARAT_WINNER.P, BACCARAT_WINNER.B, BACCARAT_WINNER.B, BACCARAT_WINNER.P, BACCARAT_WINNER.P, BACCARAT_WINNER.P, BACCARAT_WINNER.P, BACCARAT_WINNER.P, BACCARAT_WINNER.P, BACCARAT_WINNER.B, BACCARAT_WINNER.B, BACCARAT_WINNER.P, BACCARAT_WINNER.P, BACCARAT_WINNER.P, BACCARAT_WINNER.B, BACCARAT_WINNER.B, BACCARAT_WINNER.B, BACCARAT_WINNER.B, BACCARAT_WINNER.B, BACCARAT_WINNER.P, BACCARAT_WINNER.B, BACCARAT_WINNER.B, BACCARAT_WINNER.B];
        let {movable: y = !0} = r;
        const {t: E, i18n: C} = useTranslation(), {gameTableInfo: x} = React.useContext(GameTableContext), {
                settings: B,
                changeSetting: N
            } = React.useContext(SettingsContext), {sound: L} = React.useContext(SoundContext), [O, D] = React.useState(0),
            z = React.useRef(null), F = isMobile$1, _e = React.useRef(null), Y = (Be, ve) => N(Be, ve),
            H = React.useCallback((Be, ve) => jsxs("div", {
                className: "check_row",
                "aria-checked": B[Be],
                children: [jsx("label", {htmlFor: Be, children: ve}), jsx(Toggle, {
                    toggleKey: Be,
                    checked: B[Be],
                    onChange: Re => Y(Be, Re)
                })]
            }), [B]), me = React.useMemo(() => jsxs("section", {
                className: "setting",
                children: [jsxs("div", {
                    className: "check_row",
                    children: [jsx("label", {children: E("settings.general.languages")}), jsx(LanguageSelector, {
                        title: !0,
                        width: "11rem"
                    })]
                }), x.tableInfo.tableId !== HALL_TYPE.MULTI && x.tableInfo.gameType && ![GameType.FPC, GameType.Blackjack, GameType.CasinoWar, GameType.Roulette, GameType.UTH, GameType.Pokdeng, GameType.Sicbo].includes(x.tableInfo.gameType) && H("showBettingStatistics", E("settings.general.statistics")), x.tableInfo.tableId !== HALL_TYPE.MULTI && x.tableInfo.gameType && [GameType.Roulette, GameType.Sicbo, GameType.FPC].includes(x.tableInfo.gameType) && H("showConfirmedBetAmounts", E("settings.general.confirmed_bet_amounts"))]
            }), [B, C.language]), ce = React.useMemo(() => jsxs("section", {
                className: "setting",
                children: [H("systemSoundOn", E("settings.sound.system")), H("liveSoundOn", E("settings.sound.live"))]
            }), [B, C.language]);
        React.useEffect(() => {
            !B.systemSoundOn && L.stop()
        }, [B.systemSoundOn]);
        const ie = React.useMemo(() => jsxs("section", {
            className: "setting road",
            children: [jsxs("label", {
                htmlFor: "light",
                className: "light",
                "aria-checked": B.scorecards === THEME.LIGHT,
                children: [jsx("input", {
                    id: "light",
                    type: "radio",
                    name: "road",
                    value: "light",
                    checked: B.scorecards === THEME.LIGHT,
                    onChange: Be => N("scorecards", Be.currentTarget.value)
                }), jsx("div", {
                    className: "example",
                    children: jsx(BaccaratBigRoad, {size: {x: 12, y: 6}, roadMap: R})
                }), E("settings.scorecards.classic")]
            }), jsxs("label", {
                htmlFor: "dark",
                className: "dark",
                "aria-checked": B.scorecards === THEME.DARK,
                children: [jsx("input", {
                    id: "dark",
                    type: "radio",
                    name: "road",
                    value: "dark",
                    checked: B.scorecards === THEME.DARK,
                    onChange: Be => N("scorecards", Be.currentTarget.value)
                }), jsx("div", {
                    className: "example",
                    children: jsx(BaccaratBigRoad, {size: {x: 12, y: 6}, roadMap: R})
                }), E("settings.scorecards.immersive")]
            })]
        }), [B, R, C.language]);
        return jsx(ToggleMovablePopup, {
            movable: y,
            headerRef: z,
            childRef: _e,
            onClose: () => {
            },
            align: "right",
            children: jsxs("article", {
                id: "settings",
                ref: _e,
                children: [jsxs("section", {
                    className: "header",
                    ref: z,
                    children: [jsx("div", {}), jsxs("h2", {children: [jsx("div", {className: "svg_settings"}), E("settings.title")]}), jsx("button", {
                        className: "svg_close extended-button",
                        onClick: r.onClose
                    })]
                }), jsxs("section", {
                    className: "title",
                    style: {"--section": O},
                    children: [jsx("button", {
                        "aria-selected": O === 0,
                        onClick: () => D(0),
                        children: E("settings.general.title")
                    }), F && me, jsx("button", {
                        "aria-selected": O === 1,
                        onClick: () => D(1),
                        children: E("settings.sound.title")
                    }), F && ce, jsx("button", {
                        "aria-selected": O === 2,
                        onClick: () => D(2),
                        children: E("settings.scorecards.title")
                    }), F && ie]
                }), !F && O === 0 && me, !F && O === 1 && ce, !F && O === 2 && ie]
            })
        })
    }, GameRules$1 = "", Responsive$e = "", GAME_TYPE_MAP = {
        [GameType.Baccarat]: "Baccarat",
        [GameType.Quick]: "Baccarat",
        [GameType.See]: "SeeBaccarat",
        [GameType.VIP]: "VIPBaccarat",
        [GameType.InsuredBaccarat]: "InsuranceBaccarat",
        [GameType.DT]: "DragonTiger",
        [GameType.Win3Card]: "Win3Cards",
        [AltGameType.ThreePictures]: "ThreePictures",
        [AltGameType.TeenPatti]: "TeenPatti",
        [GameType.TeenPatti]: "TeenPatti",
        [GameType.Roulette]: "Roulette",
        [GameType.Sicbo]: "SicBo",
        [GameType.BullBull]: "BullBull",
        [GameType.AndarBahar]: "AndarBahar",
        [GameType.UTH]: "UTH",
        [GameType.Pokdeng]: "Pokdeng",
        [AltGameType.TwoSidesPokdeng]: "TwoSidesPokdeng",
        [AltGameType.HiLo]: "HiLo",
        [GameType.CasinoWar]: "CasinoWar",
        [GameType.Blackjack]: "BlackJack",
        [GameType.FPC]: "FishPrawnCrab",
        [AltGameType.SicTan]: "SicTan",
        [GameType.XocDia]: "XocDia"
    }, GameRules = r => {
        const {t: R, i18n: y} = useTranslation();
        let {movable: E = !0} = r;
        const C = React.useRef(null), x = React.useRef(null),
            B = React.useRef([]), [N, L] = React.useState(!1), [O, D] = React.useState(0), [z, F] = React.useState([]), {gameTableInfo: _e} = React.useContext(GameTableContext),
            Y = React.useRef(null), [H] = React.useState(GAME_TYPE_MAP[_e.altGameType === AltGameType.None ? _e.tableInfo.gameType : _e.altGameType]);
        return React.useEffect(() => {
            const me = () => {
                L(!0);
                const ce = x.current.contentDocument.getElementsByTagName("article");
                Array.from(ce).forEach(ie => B.current.push(ie)), F(B.current.map(ie => ({
                    top: ie.getBoundingClientRect().top,
                    bottom: ie.getBoundingClientRect().bottom
                })))
            };
            x.current.addEventListener("load", me)
        }, []), React.useEffect(() => {
            const me = () => {
                const ce = x.current.getBoundingClientRect();
                let ie = 0;
                const Be = B.current.map((ve, Re) => {
                    const Ce = ve.getBoundingClientRect();
                    return {top: Ce.top, bottom: Ce.bottom}
                });
                Be[0].bottom >= 0 ? ie = 0 : Be[3].top <= ce.bottom - ce.top ? ie = 3 : ie = Be.findIndex(ve => ve.bottom >= ce.bottom - ce.top), D(ie)
            };
            return N && x.current.contentDocument.addEventListener("scroll", me), () => {
                var ce, ie;
                return (ie = (ce = x.current) == null ? void 0 : ce.contentDocument) == null ? void 0 : ie.removeEventListener("scroll", me)
            }
        }, [N]), jsx(ToggleMovablePopup, {
            movable: E, headerRef: C, childRef: Y, onClose: r.onClose, align: "right", children: jsxs("article", {
                id: "game_rules",
                ref: Y,
                children: [jsxs("section", {
                    className: "header",
                    ref: C,
                    children: [jsx("div", {}), jsxs("h2", {
                        children: [jsx("div", {
                            className: "arc-bg",
                            style: {width: "1em", height: "1em"},
                            children: jsx("div", {className: "svg_help wH100pc"})
                        }), R("game_rules.title")]
                    }), jsx("button", {className: "svg_close extended-button", onClick: r.onClose})]
                }), jsxs("section", {
                    id: "rules_content",
                    children: [jsx("section", {
                        id: "table_of_content",
                        children: jsxs("ul", {
                            children: [jsx("li", {
                                "aria-selected": O === 0,
                                onClick: () => x.current.contentWindow.scrollTo({top: z[0].top}),
                                children: R("game_rules.introduction")
                            }), jsx("li", {
                                "aria-selected": O === 1,
                                onClick: () => x.current.contentWindow.scrollTo({top: z[1].top}),
                                children: R("game_rules.game_rules")
                            }), jsx("li", {
                                "aria-selected": O === 2,
                                onClick: () => x.current.contentWindow.scrollTo({top: z[2].top}),
                                children: R("game_rules.payoff")
                            }), jsx("li", {
                                "aria-selected": O === 3,
                                onClick: () => x.current.contentWindow.scrollTo({top: z[3].top}),
                                children: R("game_rules.attention")
                            })]
                        })
                    }), jsx("section", {
                        className: "content",
                        children: jsx("iframe", {
                            src: `rulesHtml/${["en", "tc", "sc"].includes(y.language) ? y.language : "en"}/${H}.html`,
                            ref: x
                        })
                    })]
                })]
            })
        })
    }, GameTableMenu$1 = "", Responsive$d = "", MenuPortrait$1 = "", useCustomerService = () => {
        let [r] = React.useContext(UserInfoContext), {preloadConfig: R} = React.useContext(ServerConfigContext);
        const y = r.suffix, E = R == null ? void 0 : R.whiteLabel.customerService.isSupportCustomerService,
            C = React.useMemo(() => E ? y && R ? (R == null ? void 0 : R.whiteLabel.customerService.customerServiceBlacklist).includes(y) : !1 : !0, [R, E, y]),
            x = React.useMemo(() => {
                if (!E || C) return null;
                if (R) {
                    const N = R == null ? void 0 : R.whiteLabel.customerService.customerServiceWhitelist[0];
                    return y && Object.prototype.hasOwnProperty.call(N, y) ? N[y] : N.default
                }
                return null
            }, [R, E, y, C, E]), B = React.useCallback(() => {
                x && window.open(x, "_blank")
            }, [y, E, C, x]);
        return {csUrl: x, customerServiceAction: B}
    }, useDeepLink = r => {
        const R = `?sessionId=${r.sessionId}&username=${r.username}&appType=${AppType.erv_android_app}`,
            y = `${r.appScheme}://auth${R}`;
        return {
            openApp: React.useCallback(() => {
                const x = document.createElement("a");
                x.href = y;
                const B = new MouseEvent("click", {bubbles: !0, cancelable: !0, view: window});
                x.dispatchEvent(B), setTimeout(() => {
                    document.visibilityState === "visible" && document.hidden === !1 && r.apkUrl && (window.location.href = r.apkUrl)
                }, 1e3)
            }, [r]), downloadApk: () => {
                r.apkUrl && (window.location.href = r.apkUrl)
            }
        }
    };
var POPUP = (r => (r.NONE = "none", r.MENU = "menu", r.FAST_BET = "fast_bet", r.PROFILE = "profile", r.BET_RECORD = " bet_record", r.GUIDE = "guide", r.SETTINGS = "settings", r.PAYOUT = "payout", r.PWA_VIDEO = "", r.ADD_TO_HOME_SCREEN = "add_to_home_screen", r.PWA = "pwa", r.CUSTOM_CHIP = "custom_chip", r.DISMISS = "dimiss", r))(POPUP || {});
const useMenuPortrait = (r = USER_CURRENT_SCENE.GAME_HALL) => {
        const [R, y] = React.useState(!1), [E, C] = React.useState(r), x = () => {
            y(!R)
        }, B = N => {
            C(N)
        };
        return React.useEffect(() => {
            B(r)
        }, [r]), {isMenuVisible: R, toggleMenu: x, menuAppearance: E, changeAppearance: B}
    }, StandardMenu = ({
                           onClose: r,
                           clickMenu: R,
                           menuAppearance: y
                       }) => jsxs(Fragment, {
        children: [jsxs("section", {
            className: "menu_header",
            children: [jsx("div", {}), jsx("h2", {children: t("menu.title")})]
        }), jsx(Menu, {
            clickMenu: E => {
                E == "dimiss" && r(), R(E)
            }, appearance: y
        }), jsxs("div", {id: "menu_version", children: [t("header.Version"), " ", "v1.3.1.0"]})]
    }), useDeepL = () => {
        const {httpState: r} = React.useContext(HttpContext), [R] = React.useContext(UserInfoContext), {preloadConfig: y} = React.useContext(ServerConfigContext),
            E = r.sessionId, C = R.player.userName, x = y == null ? void 0 : y.whiteLabel.appDownload.appScheme,
            B = y == null ? void 0 : y.whiteLabel.appDownload.android.url;
        return {...useDeepLink({sessionId: E, username: C, appScheme: x, apkUrl: B})}
    }, MenuPortrait = ({onClose: r, clickMenu: R}) => {
        const {gameSessionContext: y, update: E} = React.useContext(GameSessionContext);
        let C = React.useMemo(() => y.gameSessionInfos.userCurrentScene, [y.gameSessionInfos.userCurrentScene]);
        const {isMenuVisible: x, toggleMenu: B, menuAppearance: N, changeAppearance: L} = useMenuPortrait(C);
        return jsx("section", {
            id: "menu_in_drawer",
            children: jsx(StandardMenu, {onClose: r, clickMenu: R, menuAppearance: N})
        })
    }, MenuPopButton = r => jsx("button", {
        className: "button menuPopButton extended-button",
        onClick: r.onClick,
        children: jsx("div", {className: "svg_arrow_left wH100pc"})
    }), Menu = ({appearance: r, clickMenu: R}) => {
        const {
            isTrial: y,
            hasReturnUrl: E,
            isNormalLoginType: C,
            isShowAppDownload: x
        } = React.useContext(GameSessionContext), {verificationEnable: B} = React.useContext(GameTableStatusContext), {t: N} = useTranslation(), [L, O] = React.useState(!!document.fullscreenElement), {orientation: D} = useDeviceOrientation(), {
            logoutGameTable: z,
            verifyGame: F,
            logout: _e
        } = React.useContext(SFSCoreContext), Y = D !== "large-landscape";
        let {
            forceShowPWA: H,
            isAppleMobile: me,
            isStandalone: ce
        } = React.useContext(PwaContext), {customerServiceAction: ie, csUrl: Be} = useCustomerService();
        const {preloadConfig: ve} = React.useContext(ServerConfigContext);
        let {getIOSpwaMobileConfig: Re} = useGameHttpService(), {openApp: Ce, downloadApk: Ne} = useDeepL();
        const we = React.useCallback(() => {
                setTimeout(() => {
                    L ? document.exitFullscreen() : document.documentElement.requestFullscreen()
                }, 200)
            }, [L]),
            Me = (ve == null ? void 0 : ve.whiteLabel.isShowLogout) == null || (ve == null ? void 0 : ve.whiteLabel.isShowLogout),
            ke = Ve => {
                var ze;
                const Je = [{
                    icon: "person",
                    function: "person",
                    size: "big",
                    label: "header.profile",
                    tooltip: "menu.profile",
                    tooltipType: "right",
                    onClick: () => {
                        R("profile")
                    },
                    isShown: !y.current
                }, {
                    icon: "menu_record",
                    function: "bet_record",
                    size: "big",
                    label: "menu.history",
                    tooltip: "menu.history",
                    tooltipType: "right",
                    onClick: () => {
                        R(" bet_record")
                    },
                    isShown: !0
                }, {
                    icon: "header_services",
                    function: "bet_record",
                    size: "big",
                    label: "header.services",
                    tooltip: "menu.services",
                    tooltipType: "right",
                    onClick: () => {
                        R("dimiss"), ie()
                    },
                    isShown: Be && Be.length > 0
                }, {
                    icon: `menu_${L ? "exit" : ""}fullscreen`,
                    size: "big",
                    label: L ? "header.exitfullscreen" : "header.fullscreen",
                    tooltip: L ? "menu.exitfullscreen" : "menu.fullscreen",
                    tooltipType: "right",
                    onClick: () => {
                        R("dimiss"), we()
                    },
                    isShown: document.documentElement.requestFullscreen
                }, {
                    icon: "header_logout",
                    function: "bet_record",
                    size: "big",
                    label: "header.logout",
                    tooltip: "menu.history",
                    tooltipType: "right",
                    onClick: () => {
                        y.current ? location.reload() : _e()
                    },
                    isShown: (E || C || ce()) && Me
                }, {
                    icon: "menu_pwa",
                    size: "big",
                    label: "menu.addToHomeScreenForIOS",
                    tooltip: "menu.back",
                    tooltipType: "right",
                    onClick: () => {
                        R("add_to_home_screen"), Re()
                    },
                    isShown: !ce() && me()
                }, {
                    icon: "menu_login_app",
                    size: "big",
                    label: "menu.loginApp",
                    tooltip: "menu.back",
                    tooltipType: "right",
                    onClick: () => {
                        Ce()
                    },
                    isShown: !ce() && !isIOS_1 && (isAndroid_1 || isHonor || isDesktop$1) && x
                }, {
                    icon: "menu_download_app",
                    size: "big",
                    label: "menu.downloadApp",
                    tooltip: "menu.back",
                    tooltipType: "right",
                    onClick: () => {
                        Ne()
                    },
                    isShown: !ce() && !isIOS_1 && (isAndroid_1 || isHonor || isDesktop$1) && x
                }], Qe = [{
                    icon: "menu_back_portrait",
                    size: "big",
                    label: "menu.lobby",
                    tooltip: "menu.back",
                    tooltipType: "right",
                    onClick: z,
                    isShown: Y
                }, {
                    icon: "menu_record",
                    function: "bet_record",
                    size: "big",
                    label: "menu.history",
                    tooltip: "menu.history",
                    tooltipType: "right",
                    onClick: () => {
                        R(" bet_record")
                    },
                    isShown: !0
                }, {
                    icon: "menu_settings",
                    function: "settings",
                    size: "big",
                    label: "menu.settings",
                    tooltip: "menu.settings",
                    tooltipType: "right",
                    onClick: () => {
                        R("settings")
                    },
                    isShown: !0
                }, {
                    icon: "menu_help_arc",
                    function: "guide",
                    size: "big",
                    label: "menu.guide",
                    tooltip: "menu.guide",
                    tooltipType: "right",
                    onClick: () => {
                        R("guide")
                    },
                    isShown: !0
                }, {
                    icon: "menu_verification",
                    size: "big",
                    label: "menu.verification",
                    tooltip: "menu.verification",
                    tooltipType: "right",
                    onClick: () => {
                        R("dimiss"), setTimeout(() => {
                            F()
                        }, 200)
                    },
                    isShown: !0,
                    enable: B
                }, {
                    icon: `menu_${L ? "exit" : ""}fullscreen`,
                    size: "big",
                    label: L ? "menu.exitfullscreen" : "menu.fullscreen",
                    tooltip: L ? "menu.exitfullscreen" : "menu.fullscreen",
                    tooltipType: "right",
                    onClick: () => {
                        R("dimiss"), we()
                    },
                    isShown: document.documentElement.requestFullscreen
                }, {
                    icon: "menu_pwa",
                    size: "big",
                    label: "menu.addToHomeScreenForIOS",
                    tooltip: "menu.back",
                    tooltipType: "right",
                    onClick: () => {
                        R("add_to_home_screen"), Re()
                    },
                    isShown: !ce() && me()
                }, {
                    icon: "menu_login_app",
                    size: "big",
                    label: "menu.loginApp",
                    tooltip: "menu.back",
                    tooltipType: "right",
                    onClick: () => {
                        Ce()
                    },
                    isShown: !ce() && !isIOS_1 && (isAndroid_1 || isDesktop$1) && x
                }, {
                    icon: "menu_download_app",
                    size: "big",
                    label: "menu.downloadApp",
                    tooltip: "menu.back",
                    tooltipType: "right",
                    onClick: () => {
                        Ne()
                    },
                    isShown: !ce() && !isIOS_1 && (isAndroid_1 || isDesktop$1) && x
                }], Ze = [{
                    icon: "menu_back_portrait",
                    size: "big",
                    label: "menu.lobby",
                    tooltip: "menu.back",
                    tooltipType: "right",
                    onClick: z,
                    isShown: Y
                }, {
                    icon: "menu_record",
                    function: "bet_record",
                    size: "big",
                    label: "menu.history",
                    tooltip: "menu.history",
                    tooltipType: "right",
                    onClick: () => {
                        R(" bet_record")
                    },
                    isShown: !0
                }, {
                    icon: "menu_settings",
                    function: "settings",
                    size: "big",
                    label: "menu.settings",
                    tooltip: "menu.settings",
                    tooltipType: "right",
                    onClick: () => {
                        R("settings")
                    },
                    isShown: !0
                }, {
                    icon: "menu_help_arc",
                    function: "guide",
                    size: "big",
                    label: "menu.guide",
                    tooltip: "menu.guide",
                    tooltipType: "right",
                    onClick: () => {
                        R("guide")
                    },
                    isShown: !0
                }, {
                    icon: `menu_${L ? "exit" : ""}fullscreen`,
                    size: "big",
                    label: L ? "menu.exitfullscreen" : "menu.fullscreen",
                    tooltip: L ? "menu.exitfullscreen" : "menu.fullscreen",
                    tooltipType: "right",
                    onClick: () => {
                        R("dimiss"), we()
                    },
                    isShown: document.documentElement.requestFullscreen
                }, {
                    icon: "menu_pwa",
                    size: "big",
                    label: "menu.addToHomeScreenForIOS",
                    tooltip: "menu.back",
                    tooltipType: "right",
                    onClick: () => {
                        R("add_to_home_screen"), Re()
                    },
                    isShown: !ce() && me()
                }, {
                    icon: "menu_login_app",
                    size: "big",
                    label: "menu.loginApp",
                    tooltip: "menu.back",
                    tooltipType: "right",
                    onClick: () => {
                        Ce()
                    },
                    isShown: !ce() && !isIOS_1 && (isAndroid_1 || isDesktop$1) && x
                }, {
                    icon: "menu_download_app",
                    size: "big",
                    label: "menu.downloadApp",
                    tooltip: "menu.back",
                    tooltipType: "right",
                    onClick: () => {
                        Ne()
                    },
                    isShown: !ce() && !isIOS_1 && (isAndroid_1 || isDesktop$1) && x
                }], qe = {
                    [USER_CURRENT_SCENE.GAME_HALL]: Je,
                    [USER_CURRENT_SCENE.GAME_PAGE]: Qe,
                    [USER_CURRENT_SCENE.MUlTI_HALL]: Ze
                };
                return jsx("section", {
                    id: "game_table_options",
                    children: (ze = qe[Ve.type]) == null ? void 0 : ze.map((De, Xe) => De.isShown && jsx(GameTableMenuButton, {
                        enable: De.enable && !0,
                        onClick: De.onClick,
                        icon: De.icon,
                        function: De.function,
                        size: De.size,
                        label: N(De.label),
                        tooltip: N(De.tooltip),
                        tooltipType: De.tooltipType
                    }, Xe))
                })
            }, Fe = {
                [USER_CURRENT_SCENE.MUlTI_HALL]: jsx(ke, {type: USER_CURRENT_SCENE.MUlTI_HALL}),
                [USER_CURRENT_SCENE.GAME_HALL]: jsx(ke, {type: USER_CURRENT_SCENE.GAME_HALL}),
                [USER_CURRENT_SCENE.GAME_PAGE]: jsx(ke, {type: USER_CURRENT_SCENE.GAME_PAGE})
            }, $e = React.useMemo(() => Fe[r] || Fe[USER_CURRENT_SCENE.GAME_HALL], [r, B]);
        return jsx(Fragment, {children: $e})
    }, Profile$1 = "", Responsive$c = "", useVirtualKeyboardDetection = r => {
        const R = React.useRef(window.innerHeight);
        let {isVirtualKeyboardOpen: y, setVirtualKeyboardOpen: E} = React.useContext(GamesLayoutContainerContext);
        const C = React.useRef(!1), x = React.useCallback(() => {
            const B = window.innerHeight;
            R.current - B, E(!0)
        }, [window.innerHeight]);
        return React.useEffect(() => {
            const B = r == null ? void 0 : r.current;
            if (B) {
                if (!C.current) {
                    C.current = !0;
                    const N = () => {
                        x()
                    }, L = () => {
                        setTimeout(() => {
                            E(!1)
                        }, 500)
                    };
                    B.addEventListener("focus", N), B.addEventListener("blur", L)
                }
                return () => {
                    B.removeEventListener("focus", focus), B.removeEventListener("blur", blur)
                }
            }
        }, [r]), {isVirtualKeyboardOpen: y, setVirtualKeyboardOpen: E}
    }, Profile = r => {
        let {movable: R = !0, onChangePage: y} = r;
        const {t: E} = useTranslation(),
            C = React.useRef(null), [x] = React.useContext(UserInfoContext), [B, N] = React.useState(0), [L, O] = React.useState(x.player.pendingNickname || x.player.nickname), [D, z] = React.useState(!1), {
                getNicknameApprovalState: F,
                updateNickname: _e,
                resetPassword: Y
            } = React.useContext(SFSCoreContext), H = React.useRef(null), me = React.useRef(null), ce = React.useRef(null),
            ie = React.useRef(null), Be = React.useRef(null);
        isHonor && (useVirtualKeyboardDetection(me), useVirtualKeyboardDetection(ce), useVirtualKeyboardDetection(ie), useVirtualKeyboardDetection(Be));
        const [ve, Re] = React.useState(""), [Ce, Ne] = React.useState(""), [we, Me] = React.useState(""), [ke, Fe] = React.useState(!0), [$e, Ve] = React.useState(!0), [Je, Qe] = React.useState(!0), [Ze, qe] = React.useState(""), [ze, De] = React.useState(""),
            Xe = ve.length <= 0 || Ce.length <= 0 || we.length <= 0, He = L.length <= 0;
        React.useEffect(() => {
            F()
        }, []), React.useEffect(() => {
            var et;
            D && ((et = Be.current) == null || et.focus())
        }, [D]), React.useEffect(() => {
            z(!1), Fe(!0), Ve(!0), Qe(!0), qe(""), De(""), y && y(!!B)
        }, [B]);
        const Ge = () => {
            qe(""), De(""), Ce.length < 6 || Ce.length > 10 ? (qe("new"), De(E("error_code.6011"))) : ve === Ce ? (qe("new"), De(E("error_code.6087"))) : Ce !== we ? (qe("confirm"), De("Password not match")) : Y(ve, Ce)
        }, Le = React.useMemo(() => jsxs("section", {
            className: "view",
            id: "profile_main",
            children: [jsx("section", {
                className: "profile_inputs",
                children: jsxs("div", {
                    className: "profile_input",
                    children: [jsx("div", {className: "svg_person"}), jsxs("div", {
                        children: [jsx("input", {
                            id: "input_nickname",
                            maxLength: 6,
                            ref: Be,
                            type: "text",
                            disabled: !D,
                            value: L,
                            placeholder: E("profile.main_view.nickname"),
                            onChange: et => O(et.currentTarget.value)
                        }), x.player.approveNicknameStatus === 2 && jsx("span", {children: `(${E("profile.main_view.pending")})`})]
                    }), !D && jsx("button", {className: "svg_edit", onClick: () => z(!0)})]
                })
            }), D && jsx("button", {
                className: `${He ? "erv_diabled_button" : ""} profile_save`,
                disabled: He,
                onClick: () => {
                    _e(L), z(!1)
                },
                children: E("profile.save")
            })]
        }), [L, D, x]), We = React.useMemo(() => jsxs("section", {
            className: "view", id: "profile_password", children: [jsxs("section", {
                className: "profile_inputs",
                "aria-errormessage": Ze,
                children: [jsxs("div", {
                    className: "profile_input",
                    children: [jsx("div", {className: "svg_lock"}), jsx("input", {
                        ref: me,
                        maxLength: 10,
                        type: ke ? "password" : "text",
                        value: ve,
                        placeholder: E("profile.password_view.current_password"),
                        onChange: et => Re(et.currentTarget.value)
                    }), jsx("button", {type: "button", className: `svg_eye_${ke ? "on" : "off"}`, onClick: () => Fe(!ke)})]
                }), jsxs("div", {
                    className: "profile_input",
                    id: "new_password",
                    children: [jsx("div", {className: "svg_lock"}), jsx("input", {
                        ref: ce,
                        maxLength: 10,
                        type: $e ? "password" : "text",
                        value: Ce,
                        placeholder: E("profile.password_view.new_password"),
                        onChange: et => Ne(et.currentTarget.value)
                    }), jsx("button", {type: "button", className: `svg_eye_${$e ? "on" : "off"}`, onClick: () => Ve(!$e)})]
                }), jsxs("div", {
                    className: "profile_input",
                    id: "confirm_password",
                    children: [jsx("div", {className: "svg_lock"}), jsx("input", {
                        ref: ie,
                        maxLength: 10,
                        type: Je ? "password" : "text",
                        value: we,
                        placeholder: E("profile.password_view.confirm_password"),
                        onChange: et => Me(et.currentTarget.value)
                    }), jsx("button", {type: "button", className: `svg_eye_${Je ? "on" : "off"}`, onClick: () => Qe(!Je)})]
                }), ze !== "" ? jsxs("div", {
                    id: "error",
                    children: [jsx("div", {className: "svg_alert"}), jsx("div", {children: ze})]
                }) : jsx("div", {id: "hints", children: E("profile.password_view.hints")})]
            }), jsx("button", {
                disabled: Xe,
                className: `${Xe ? "erv_diabled_button" : ""} profile_save`,
                onClick: Ge,
                children: E("profile.save")
            })]
        }), [ve, Ce, we, ke, $e, Je, ze]), dt = React.useCallback(() => {
            B === 1 ? N(0) : r.popMenu && r.popMenu()
        }, [B, r.popMenu]);
        return jsx(MovablePopup, {
            movable: !1,
            headerRef: C,
            childRef: H,
            onClose: () => {
            },
            align: "right",
            children: jsxs("article", {
                id: "profile",
                ref: H,
                children: [jsxs("section", {
                    className: "header",
                    ref: C,
                    children: [jsx("button", {
                        className: "button extended-button",
                        onClick: dt,
                        children: jsx("div", {className: "svg_arrow_left"})
                    }), jsxs("h2", {children: [jsx("div", {className: "svg_settings"}), E("profile.title")]}), jsx("button", {
                        className: "svg_close extended-button",
                        onClick: r.onClose
                    })]
                }), B === 0 && Le, B === 1 && We]
            })
        })
    }, GameHallFeatureTable$1 = "", MovedContext = React.createContext(!1), useHorizontalDrag = r => {
        const R = React.useRef(null), [y, E] = React.useState(!1);
        return React.useEffect(() => {
            var C;
            if (!r) {
                let x = {left: 0, x: 0};
                const B = O => {
                    R.current && (E(!1), x = {
                        left: R.current.scrollLeft,
                        x: O.clientX
                    }, window.addEventListener("mousemove", N), window.addEventListener("mouseup", L))
                }, N = O => {
                    if (R.current) {
                        const D = O.clientX - x.x;
                        Math.abs(D) > 10 && E(!0), R.current.scrollLeft = x.left - D
                    }
                }, L = O => {
                    R.current && (window.removeEventListener("mousemove", N), window.removeEventListener("mouseup", L))
                };
                return (C = R.current) == null || C.addEventListener("mousedown", B), () => {
                    var O;
                    return (O = R.current) == null ? void 0 : O.removeEventListener("mousedown", B)
                }
            }
        }, [R.current]), {moved: y, movableRef: R}
    }, GameHallFeatureTable = r => {
        const R = React.useContext(MovedContext), [y, E] = React.useState(r.tableInfo.tableName), [C, x] = React.useState(r.tableInfo.tableId), [B, N] = React.useState(r.tableInfo.gameType);
        let {imgPath: L} = useFeatureImagesLoader(y, B);
        const [O, D] = React.useState(!1);
        return React.useEffect(() => {
            r.tableInfo && (E(r.tableInfo.tableName), x(r.tableInfo.tableId), N(r.tableInfo.gameType))
        }, [r.tableInfo]), jsxs("article", {
            className: "gamehall_table feature",
            onClick: () => !R && r.onEnter({tableId: C, gameType: B}),
            children: [jsxs("div", {
                className: "gamehall_table_container",
                children: [jsx("img", {
                    src: L || "",
                    onLoad: () => D(!0)
                }), (!O || L == "") && jsx("div", {className: "loading", children: jsx("div", {})})]
            }), jsx("div", {className: "feature_table_info", children: useGameTableTitle(B, y, !0)})]
        })
    }, GameTableCollection$1 = "", useColumns = (r, R, y = 0, E = 2) => {
        const [C, x] = React.useState(0), [B, N] = React.useState(0);
        return React.useEffect(() => {
            r.current && x(r.current.clientWidth)
        }, [r.current]), React.useEffect(() => {
            const L = new ResizeObserver(O => O.forEach(D => x(D.contentRect.width)));
            return r.current && L.observe(r.current), () => L.disconnect()
        }, []), React.useEffect(() => {
            if (C > 0) {
                let L = Math.floor(C / (R + y));
                E && (L = Math.max(E, L)), N(L)
            }
        }, [C, E]), B
    }, HallGameSubType$1 = "", Responsive$b = "", HallGameSubType = r => jsx("button", {
        className: "hall_game_subtype",
        onClick: r.onChange,
        "aria-selected": r.currentSubtype === r.subtype,
        children: r.label
    }), HallGameType$1 = "", HallGameType = r => {
        const {t: R} = useTranslation(), [y, E] = React.useContext(GameTypeContext), C = React.useContext(MovedContext),
            x = React.useRef(null);
        return React.useEffect(() => {
            var B;
            r.type === y && ((B = x.current) == null || B.scrollIntoView({block: "center"}))
        }, []), jsxs("button", {
            ref: x,
            className: "hall_game_type",
            "aria-selected": y === r.type,
            onClick: () => !C && E(r.type),
            children: [jsx("div", {
                className: "icon",
                children: jsx("div", {className: `svg_gamehall_${GAMES[r.type]}${y === r.type ? "" : "_disabled"}`})
            }), jsx("div", {className: "game_name", children: R(`game_types.${r.type}`)})]
        })
    }, LiveGameHall$1 = "", Responsive$a = "", OutOfVwContext = React.createContext(new Set), useOutOfVW = r => {
        const [R, y] = React.useState(new Set(r.refs.current.filter(E => E).map(E => E.table)));
        return React.useEffect(() => {
            let E = new IntersectionObserver(C => {
                y(x => {
                    const B = new Set(x);
                    return C.forEach(N => N.isIntersecting ? B.delete(N.target) : B.add(N.target)), B
                })
            }, {root: r.root.current, threshold: 0, rootMargin: `${r.verticalThershold} ${r.horizontalThershold}`});
            return r.root.current && r.refs.current.forEach(C => C && E.observe(C.table)), () => {
                E.disconnect()
            }
        }, r.refershDependency), R
    }, GameHallCollectionTablesRefContext = React.createContext({current: []}), useGameHallGridConfig = r => {
        const {isDeskCol: R = 5, isIpadCol: y = 3, isMobCol: E = 2} = r;
        return {handleMaxColumns: React.useCallback(x => isIPad ? x > y ? y : x : isDesktop$1 ? x > R ? R : x : isMobile$1 && x > E ? E : x, [isDesktop$1, isMobile$1, isIPad])}
    }, GameTypeContext = React.createContext([GameType.Baccarat, () => {
    }]), SUB_TYPE_MAP = {
        [GameType.Baccarat]: [{key: "all", label: "all"}, {key: "sexyGames", label: "sexy"}, {
            key: "classicBaccaratGames",
            label: "classic"
        }, {key: "103", label: "quick"}, {key: "104", label: "see"}, {key: "110", label: "insurance"}, {
            key: "111",
            label: "vip"
        }],
        [GameType.DT]: [{key: "all", label: "all"}],
        [GameType.Sicbo]: [{key: "all", label: "all"}],
        [GameType.Roulette]: [{key: "all", label: "all"}],
        [GameType.Win3Card]: [{key: "all", label: "all"}],
        [AltGameType.ThreePictures]: [{key: "all", label: "all"}],
        [GameType.BullBull]: [{key: "all", label: "all"}],
        [AltGameType.TeenPatti]: [{key: "all", label: "all"}],
        [GameType.TeenPatti]: [{key: "all", label: "all"}],
        [GameType.AndarBahar]: [{key: "all", label: "all"}],
        [GameType.UTH]: [{key: "all", label: "all"}],
        [GameType.Pokdeng]: [{key: "all", label: "all"}],
        [AltGameType.TwoSidesPokdeng]: [{key: "all", label: "all"}],
        [AltGameType.HiLo]: [{key: "all", label: "all"}],
        [AltGameType.SicTan]: [{key: "all", label: "all"}],
        [GameType.CasinoWar]: [{key: "all", label: "all"}],
        [GameType.Blackjack]: [{key: "all", label: "all"}],
        [GameType.FPC]: [{key: "all", label: "all"}],
        [GameType.XocDia]: [{key: "all", label: "all"}]
    }, useLiveGameHall = () => {
        const {supportGameTypesValue: r} = React.useContext(GameHallContext),
            R = [GameType.Baccarat, GameType.DT, GameType.Sicbo, GameType.Roulette, GameType.Win3Card, GameType.BullBull, AltGameType.ThreePictures, AltGameType.HiLo, GameType.Pokdeng, AltGameType.TeenPatti, GameType.AndarBahar, GameType.UTH, AltGameType.TwoSidesPokdeng, GameType.CasinoWar, GameType.Blackjack, GameType.FPC, AltGameType.SicTan, GameType.XocDia];
        return {subLiveGameTypeOrder: React.useMemo(() => r.reduce((E, C) => (R.includes(C) && E.push(C), E), []), [r])}
    }, LiveGameHall = r => {
        const {t: R} = useTranslation(), {subLiveGameTypeOrder: y} = useLiveGameHall(), {orientation: E} = useDeviceOrientation(),
            C = useColumns(r.scrollRef, E !== "large-landscape" ? 250 : window.screen.width * (window.screen.width > 1366 ? .13 : .2)), {
                filteredGameHallInfo: x,
                gametypeSelected: B,
                supportGameTypesValue: N
            } = React.useContext(GameHallContext), {
                gameTableInfo: L,
                setGameTableInfo: O
            } = React.useContext(GameTableContext), [D, z] = React.useState(r.gameType), [F, _e] = React.useState(!1);
        let {preloadConfig: Y} = React.useContext(ServerConfigContext);
        const [H, me] = React.useState(["all"]), [ce, ie] = React.useState(H[0]), {
            movableRef: Be,
            moved: ve
        } = useHorizontalDrag();
        let {getCountDownByTableId: Re} = React.useContext(SFSCoreContext);
        const {handleMaxColumns: Ce} = useGameHallGridConfig({}), Ne = React.useRef([]), we = useOutOfVW({
            root: r.scrollRef,
            refs: Ne,
            verticalThershold: "25%",
            horizontalThershold: "0%",
            refershDependency: [r.gameType, x]
        }), Me = React.useMemo(() => {
            let ke = N.map(Fe => Fe.toString());
            return Object.entries(SUB_TYPE_MAP).reduce((Fe, [$e, Ve]) => {
                if ($e == GameType.Baccarat.toString()) {
                    let Je = Ve.filter(({
                                            key: Qe,
                                            label: Ze
                                        }) => Qe == "all" ? !0 : Qe == "classicBaccaratGames" || Qe == "sexyGames" ? ke.includes(GameType.Baccarat.toString()) : ke.includes(Qe));
                    return {...Fe, [$e]: Je}
                } else return {...Fe, [$e]: Ve}
            }, {})
        }, [N]);
        return React.useEffect(() => sessionStorage.setItem("hall_sub_type", D.toString()), []), React.useEffect(() => {
            Re([...x.tableInfos.map(ke => ke.tableId)])
        }, [ce, D]), React.useEffect(() => {
            z(r.gameType), B(r.gameType)
        }, [r.gameType]), React.useEffect(() => {
            switch (D && B(D), D) {
                case GameType.Baccarat:
                    let ke = ["all"];
                    Y && (ke.push("sexyGames"), ke.push("classicBaccaratGames")), ke.push(GameType.Quick.toString()), ke.push(GameType.See.toString()), ke.push(GameType.InsuredBaccarat.toString()), ke.push(GameType.VIP.toString()), me(ke), sessionStorage.getItem("hall_minor_type") && ke.includes(sessionStorage.getItem("hall_minor_type")) && ie(sessionStorage.getItem("hall_minor_type"));
                    break;
                default:
                    sessionStorage.removeItem("hall_minor_type"), ie("all"), me(["all"]);
                    break
            }
        }, [D, Y]), React.useEffect(() => {
            _e(!1)
        }, [E]), jsx("section", {
            id: "live_gamehall", children: jsxs(GameTypeContext.Provider, {
                value: [D, ke => {
                    r.setGameType(ke), ie(H[0]), sessionStorage.setItem("hall_sub_type", ke.toString()), sessionStorage.removeItem("hall_minor_type")
                }],
                children: [E === "large-landscape" && jsx("div", {
                    id: "game_types_container",
                    children: jsx(MovedContext.Provider, {
                        value: ve,
                        children: jsx("section", {
                            id: "game_types",
                            style: {"--columns": y.length},
                            ref: Be,
                            children: y.map(ke => jsx(HallGameType, {type: ke}, ke))
                        })
                    })
                }), jsxs("section", {
                    id: "live_game_content",
                    ref: r.scrollRef,
                    children: [jsxs("section", {
                        id: "hall_info",
                        style: {"--size_columns": C},
                        ref: r.scrollTopRef,
                        children: [jsx("h3", {children: R(`game_types.${D}`)}), Me[D].length > 1 && jsxs("section", {
                            id: "game_subtypes",
                            children: [jsxs("button", {
                                className: "dropdown_selected",
                                onClick: () => _e(!F),
                                "aria-expanded": F,
                                children: [jsx("div", {}), R(`game_hall.subtypes.${Me[D].find(ke => ke.key === ce).label}`), jsx("div", {className: "svg_arrow_down_triangle"})]
                            }), jsx("div", {
                                className: "list",
                                "aria-expanded": F,
                                children: Me[D].map(ke => jsx(HallGameSubType, {
                                    subtype: ke.key,
                                    label: R(`game_hall.subtypes.${ke.label}`),
                                    currentSubtype: ce,
                                    onChange: () => {
                                        ie(ke.key), sessionStorage.setItem("hall_minor_type", ke.key), _e(!1)
                                    }
                                }, ke.key))
                            })]
                        })]
                    }), jsx(GameHallCollectionTablesRefContext.Provider, {
                        value: Ne,
                        children: jsx(OutOfVwContext.Provider, {
                            value: we,
                            children: C && x && jsx(GameTableCollection, {
                                tableInfos: (() => {
                                    let ke = x.tableInfos.filter(Fe => {
                                        const $e = `${D}`[0], Ve = `${Fe.gameType}`[0];
                                        return $e === "1" ? Ve === $e : SupportedGamesTypesMapping[Fe.gameType] === SupportedGamesTypesMapping[D]
                                    });
                                    return ke = ke.filter(Fe => {
                                        var $e;
                                        return ce === "all" ? Fe : (($e = Y == null ? void 0 : Y.whiteLabel[ce]) == null ? void 0 : $e.includes(Fe.tableName)) || JSON.stringify(Fe.gameType) === ce
                                    }), ke
                                })(), columns: Ce(C), enterGameTable: ke => {
                                    O(Object.assign({...L}, {altGameType: Object.values(AltGameType).includes(D) ? D : AltGameType.None})), r.enterGameTable(ke.tableId, ke.gameType, ke.enterType)
                                }, tableType: TABLE_TYPE.NORMAL, scrollable: !1
                            })
                        })
                    })]
                })]
            })
        })
    }, GameHallTable$1 = "", Responsive$9 = "", fontSize$1 = r => 60 - (r.split("").length - 1) * 3,
    svgTextConfig$1 = {x: 50, y: 55}, BullBullResultRoad = r => {
        const {t: R} = useTranslation();
        return jsx(Fragment, {
            children: jsx("article", {
                className: "bull_bull result_road",
                style: {"--columns": 1, "--rows": 4},
                children: [{className: "red", hand: "banker", results: r.bankerResults}, {
                    className: "blue",
                    hand: "player_1",
                    results: r.player1Results
                }, {className: "blue", hand: "player_2", results: r.player2Results}, {
                    className: "blue",
                    hand: "player_3",
                    results: r.player3Results
                }].map((y, E) => jsxs("div", {
                    className: y.className,
                    style: {"--columns": r.size},
                    children: [jsx("div", {
                        children: jsx("svg", {
                            viewBox: "0 0 100 100",
                            xmlnsXlink: "http://www.w3.org/1999/xlink",
                            xmlns: "http://www.w3.org/2000/svg",
                            children: jsx("text", {
                                x: svgTextConfig$1.x,
                                y: svgTextConfig$1.y,
                                textAnchor: "middle",
                                dominantBaseline: "middle",
                                fontSize: fontSize$1(R(`roadmap.bull_bull.${r.gameHall ? "game_hall" : "game_table"}.${y.hand}`)),
                                fontFamily: "Arial",
                                children: R(`roadmap.bull_bull.${r.gameHall ? "game_hall" : "game_table"}.${y.hand}`)
                            })
                        })
                    }), y.results.slice(-(r.size - 1)).map((C, x) => jsx("div", {
                        className: (y.hand === "banker" ? r.winner.slice(-(r.size - 1))[x] === "000" : r.winner.slice(-(r.size - 1))[x][E - 1] === "1") ? "win" : "lose",
                        children: jsx("svg", {
                            viewBox: "0 0 100 100",
                            xmlnsXlink: "http://www.w3.org/1999/xlink",
                            xmlns: "http://www.w3.org/2000/svg",
                            children: jsx("text", {
                                x: svgTextConfig$1.x,
                                y: svgTextConfig$1.y,
                                textAnchor: "middle",
                                dominantBaseline: "middle",
                                fontSize: fontSize$1(R(`roadmap.bull_bull.${r.gameHall ? "game_hall" : "game_table"}.${C}`)),
                                fontFamily: "Arial",
                                children: R(`roadmap.bull_bull.${r.gameHall ? "game_hall" : "game_table"}.${C}`)
                            })
                        })
                    }, x)), Array(Math.max(r.size - 1 - y.results.length, 1)).fill(void 0).map((C, x) => jsx("div", {}, x))]
                }, E))
            })
        })
    };
var Et = Object.create, Ye = Object.defineProperty, bt = Object.getOwnPropertyDescriptor,
    gt = Object.getOwnPropertyNames, yt = Object.getPrototypeOf, wt = Object.prototype.hasOwnProperty,
    Lt = (r, R) => () => (R || r((R = {exports: {}}).exports, R), R.exports), Pt = (r, R, y, E) => {
        if (R && typeof R == "object" || typeof R == "function") for (let C of gt(R)) !wt.call(r, C) && C !== y && Ye(r, C, {
            get: () => R[C],
            enumerable: !(E = bt(R, C)) || E.enumerable
        });
        return r
    }, St = (r, R, y) => (y = r != null ? Et(yt(r)) : {}, Pt(R || !r || !r.__esModule ? Ye(y, "default", {
        value: r,
        enumerable: !0
    }) : y, r)), je = Lt((r, R) => {
        (function (y, E) {
            typeof r == "object" && typeof R < "u" ? E(r) : typeof define == "function" && define.amd ? define(["exports"], E) : (y = typeof globalThis < "u" ? globalThis : y || self, E(y.fastUniqueNumbers = {}))
        })(r, function (y) {
            var E = function (_e) {
                    return function (Y) {
                        var H = _e(Y);
                        return Y.add(H), H
                    }
                }, C = function (_e) {
                    return function (Y, H) {
                        return _e.set(Y, H), H
                    }
                }, x = Number.MAX_SAFE_INTEGER === void 0 ? 9007199254740991 : Number.MAX_SAFE_INTEGER, B = 536870912,
                N = B * 2, L = function (_e, Y) {
                    return function (H) {
                        var me = Y.get(H), ce = me === void 0 ? H.size : me < N ? me + 1 : 0;
                        if (!H.has(ce)) return _e(H, ce);
                        if (H.size < B) {
                            for (; H.has(ce);) ce = Math.floor(Math.random() * N);
                            return _e(H, ce)
                        }
                        if (H.size > x) throw new Error("Congratulations, you created a collection of unique numbers which uses all available integers!");
                        for (; H.has(ce);) ce = Math.floor(Math.random() * x);
                        return _e(H, ce)
                    }
                }, O = new WeakMap, D = C(O), z = L(D, O), F = E(z);
            y.addUniqueNumber = F, y.generateUniqueNumber = z
        })
    });
(class extends React.Component {
});
St(je());
var M = (typeof window > "u" ? "undefined" : typeof window) == "object", I = {
    setTimeout: M ? setTimeout.bind(window) : setTimeout,
    clearTimeout: M ? clearTimeout.bind(window) : clearTimeout,
    setInterval: M ? setInterval.bind(window) : setInterval,
    clearInterval: M ? clearInterval.bind(window) : clearInterval
};

function it(r) {
    I.setTimeout = r.setTimeout, I.clearTimeout = r.clearTimeout, I.setInterval = r.setInterval, I.clearInterval = r.clearInterval
}

var Q = {}, Ae = class {
    constructor(r) {
        Ha(this, "name");
        Ha(this, "closed", !1);
        Ha(this, "mc", new MessageChannel);
        this.name = r, Q[r] = Q[r] || [], Q[r].push(this), this.mc.port1.start(), this.mc.port2.start(), this.onStorage = this.onStorage.bind(this), window.addEventListener("storage", this.onStorage)
    }

    onStorage(r) {
        if (r.storageArea !== window.localStorage || r.key.substring(0, this.name.length) !== this.name || r.newValue === null) return;
        let R = JSON.parse(r.newValue);
        this.mc.port2.postMessage(R)
    }

    postMessage(r) {
        if (this.closed) throw new Error("InvalidStateError");
        let R = JSON.stringify(r), y = `${this.name}:${String(Date.now())}${String(Math.random())}`;
        window.localStorage.setItem(y, R), I.setTimeout(() => {
            window.localStorage.removeItem(y)
        }, 500), Q[this.name].forEach(E => {
            E !== this && E.mc.port2.postMessage(JSON.parse(R))
        })
    }

    close() {
        if (this.closed) return;
        this.closed = !0, this.mc.port1.close(), this.mc.port2.close(), window.removeEventListener("storage", this.onStorage);
        let r = Q[this.name].indexOf(this);
        Q[this.name].splice(r, 1)
    }

    get onmessage() {
        return this.mc.port1.onmessage
    }

    set onmessage(r) {
        this.mc.port1.onmessage = r
    }

    get onmessageerror() {
        return this.mc.port1.onmessageerror
    }

    set onmessageerror(r) {
        this.mc.port1.onmessageerror = r
    }

    addEventListener(r, R) {
        return this.mc.port1.addEventListener(r, R)
    }

    removeEventListener(r, R) {
        return this.mc.port1.removeEventListener(r, R)
    }

    dispatchEvent(r) {
        return this.mc.port1.dispatchEvent(r)
    }
}, st = typeof window > "u" ? void 0 : typeof window.BroadcastChannel == "function" ? window.BroadcastChannel : Ae;

function ot(r = 0) {
    return new Promise(R => I.setTimeout(R, r))
}

function Te() {
    return Math.random().toString(36).substring(2)
}

var Ie = class {
        constructor(r, R) {
            Ha(this, "options");
            Ha(this, "channel");
            Ha(this, "token", Te());
            Ha(this, "isLeader", !1);
            Ha(this, "isDead", !1);
            Ha(this, "isApplying", !1);
            Ha(this, "reApply", !1);
            Ha(this, "intervals", []);
            Ha(this, "listeners", []);
            Ha(this, "deferred");
            this.channel = r, this.options = R, this.apply = this.apply.bind(this), this.awaitLeadership = this.awaitLeadership.bind(this), this.sendAction = this.sendAction.bind(this)
        }

        async apply() {
            if (this.isLeader || this.isDead) return !1;
            if (this.isApplying) return this.reApply = !0, !1;
            this.isApplying = !0;
            let r = !1, R = y => {
                let {token: E, action: C} = y.data;
                E !== this.token && (C === 0 && E > this.token && (r = !0), C === 1 && (r = !0))
            };
            this.channel.addEventListener("message", R);
            try {
                return this.sendAction(0), await ot(this.options.responseTime), this.channel.removeEventListener("message", R), this.isApplying = !1, r ? this.reApply ? this.apply() : !1 : (this.assumeLead(), !0)
            } catch {
                return !1
            }
        }

        awaitLeadership() {
            if (this.isLeader) return Promise.resolve();
            let r = !1, R = null;
            return new Promise(y => {
                let E = () => {
                    if (r) return;
                    r = !0;
                    try {
                        I.clearInterval(R)
                    } catch {
                    }
                    let x = this.intervals.indexOf(R);
                    x >= 0 && this.intervals.splice(x, 1), this.channel.removeEventListener("message", C), y()
                };
                R = I.setInterval(() => {
                    this.apply().then(() => {
                        this.isLeader && E()
                    })
                }, this.options.fallbackInterval), this.intervals.push(R);
                let C = x => {
                    let {action: B} = x.data;
                    B === 2 && this.apply().then(() => {
                        this.isLeader && E()
                    })
                };
                this.channel.addEventListener("message", C)
            })
        }

        sendAction(r) {
            this.channel.postMessage({action: r, token: this.token})
        }

        assumeLead() {
            this.isLeader = !0;
            let r = R => {
                let {action: y} = R.data;
                y === 0 && this.sendAction(1)
            };
            return this.channel.addEventListener("message", r), this.listeners.push(r), this.sendAction(1)
        }

        waitForLeadership() {
            return this.deferred ? this.deferred : (this.deferred = this.awaitLeadership(), this.deferred)
        }

        close() {
            if (!this.isDead) {
                this.isDead = !0, this.isLeader = !1, this.sendAction(2);
                try {
                    this.listeners.forEach(r => this.channel.removeEventListener("message", r)), this.intervals.forEach(r => I.clearInterval(r))
                } catch {
                }
            }
        }
    }, Ee = class {
        constructor(r) {
            Ha(this, "channel");
            Ha(this, "options");
            Ha(this, "elector");
            Ha(this, "token", Te());
            Ha(this, "registry", new Map);
            Ha(this, "allIdle", !1);
            Ha(this, "isLastActive", !1);
            let {channelName: R} = r;
            if (this.options = r, this.channel = new st(R), this.registry.set(this.token, 1), r.leaderElection) {
                let y = {fallbackInterval: 2e3, responseTime: 100};
                this.elector = new Ie(this.channel, y), this.elector.waitForLeadership()
            }
            this.channel.addEventListener("message", y => {
                let {action: E, token: C, data: x} = y.data;
                switch (E) {
                    case 3:
                        this.registry.set(C, 2);
                        break;
                    case 4:
                        this.registry.delete(C);
                        break;
                    case 5:
                        this.idle(C);
                        break;
                    case 6:
                        this.active(C);
                        break;
                    case 7:
                        this.prompt(C);
                        break;
                    case 8:
                        this.start(C);
                        break;
                    case 9:
                        this.reset(C);
                        break;
                    case 10:
                        this.activate(C);
                        break;
                    case 11:
                        this.pause(C);
                        break;
                    case 12:
                        this.resume(C);
                        break;
                    case 13:
                        this.options.onMessage(x);
                        break
                }
            }), this.send(3)
        }

        get isLeader() {
            if (!this.elector) throw new Error('❌ Leader election is not enabled. To Enable it set the "leaderElection" property to true.');
            return this.elector.isLeader
        }

        prompt(r = this.token) {
            this.registry.set(r, 0);
            let R = [...this.registry.values()].every(y => y === 0);
            r === this.token && this.send(7), R && this.options.onPrompt()
        }

        idle(r = this.token) {
            this.registry.set(r, 2);
            let R = [...this.registry.values()].every(y => y === 2);
            r === this.token && this.send(5), !this.allIdle && R && (this.allIdle = !0, this.options.onIdle())
        }

        active(r = this.token) {
            this.allIdle = !1, this.registry.set(r, 1);
            let R = [...this.registry.values()].some(y => y === 1);
            r === this.token && this.send(6), R && this.options.onActive(), this.isLastActive = r === this.token
        }

        start(r = this.token) {
            this.allIdle = !1, this.registry.set(r, 1), r === this.token ? this.send(8) : this.options.start(!0), this.isLastActive = r === this.token
        }

        reset(r = this.token) {
            this.allIdle = !1, this.registry.set(r, 1), r === this.token ? this.send(9) : this.options.reset(!0), this.isLastActive = r === this.token
        }

        activate(r = this.token) {
            this.allIdle = !1, this.registry.set(r, 1), r === this.token ? this.send(10) : this.options.activate(!0), this.isLastActive = r === this.token
        }

        pause(r = this.token) {
            r === this.token ? this.send(11) : this.options.pause(!0)
        }

        resume(r = this.token) {
            r === this.token ? this.send(12) : this.options.resume(!0)
        }

        message(r) {
            try {
                this.channel.postMessage({action: 13, token: this.token, data: r})
            } catch {
            }
        }

        send(r) {
            try {
                this.channel.postMessage({action: r, token: this.token})
            } catch {
            }
        }

        close() {
            this.options.leaderElection && this.elector.close(), this.send(4), this.channel.close()
        }
    }, at = M ? document : null,
    xe = ["mousemove", "keydown", "wheel", "DOMMouseScroll", "mousewheel", "mousedown", "touchstart", "touchmove", "MSPointerDown", "MSPointerMove", "visibilitychange", "focus"];

function ct(r, R) {
    let y;

    function E(...C) {
        y && clearTimeout(y), y = setTimeout(() => {
            r(...C), y = null
        }, R)
    }

    return E.cancel = function () {
        clearTimeout(y)
    }, E
}

function be(r, R) {
    let y = 0;
    return function (...E) {
        let C = new Date().getTime();
        if (!(C - y < R)) return y = C, r(...E)
    }
}

var v = () => Date.now(), Z = 2147483647;

function se({
                timeout: r = 1e3 * 60 * 20,
                promptTimeout: R = 0,
                promptBeforeIdle: y = 0,
                element: E = at,
                events: C = xe,
                timers: x = void 0,
                immediateEvents: B = [],
                onPresenceChange: N = () => {
                },
                onPrompt: L = () => {
                },
                onIdle: O = () => {
                },
                onActive: D = () => {
                },
                onAction: z = () => {
                },
                onMessage: F = () => {
                },
                debounce: _e = 0,
                throttle: Y = 0,
                eventsThrottle: H = 200,
                startOnMount: me = !0,
                startManually: ce = !1,
                stopOnIdle: ie = !1,
                crossTab: Be = !1,
                name: ve = "idle-timer",
                syncTimers: Re = 0,
                leaderElection: Ce = !1,
                disabled: Ne = !1
            } = {}) {
    let we = React.useRef(v()), Me = React.useRef(v()), ke = React.useRef(null), Fe = React.useRef(null),
        $e = React.useRef(0), Ve = React.useRef(0), Je = React.useRef(0), Qe = React.useRef(0), Ze = React.useRef(!1),
        qe = React.useRef(!1), ze = React.useRef(!1), De = React.useRef(!0), Xe = React.useRef(!1),
        He = React.useRef(null), Ge = React.useRef(null), Le = React.useRef(r), We = React.useRef(0);
    React.useEffect(() => {
        if (R && console.warn("⚠️ IdleTimer -- The `promptTimeout` property has been deprecated in favor of `promptBeforeIdle`. It will be removed in the next major release."), y && R) throw new Error("❌ Both promptTimeout and promptBeforeIdle can not be set. The promptTimeout property will be deprecated in a future version.");
        if (r >= Z) throw new Error(`❌ The value for the timeout property must fit in a 32 bit signed integer, ${Z}.`);
        if (R >= Z) throw new Error(`❌ The value for the promptTimeout property must fit in a 32 bit signed integer, ${Z}.`);
        if (y >= Z) throw new Error(`❌ The value for the promptBeforeIdle property must fit in a 32 bit signed integer, ${Z}.`);
        if (y >= r) throw new Error(`❌ The value for the promptBeforeIdle property must be less than the timeout property, ${r}.`);
        if (y ? (Le.current = r - y, We.current = y) : (Le.current = r, We.current = R), !De.current) {
            if (ce || Ne) return;
            Ze.current && (zt.current(null, da), Ge.current && Ge.current.active()), Ia()
        }
    }, [r, R, y, ce, Ne]);
    let dt = React.useRef(ie);
    React.useEffect(() => {
        dt.current = ie
    }, [ie]);
    let et = React.useRef(B), nt = React.useRef(E), tt = React.useRef([...new Set([...C, ...B]).values()]),
        lt = React.useRef(Ne);
    React.useEffect(() => {
        lt.current = Ne, !De.current && (Ne ? va() : ce || Ia())
    }, [Ne]);
    let Bt = React.useRef(N);
    React.useEffect(() => {
        Bt.current = N
    }, [N]);
    let kt = React.useRef(L);
    React.useEffect(() => {
        kt.current = L
    }, [L]);
    let At = React.useRef(O);
    React.useEffect(() => {
        At.current = O
    }, [O]);
    let zt = React.useRef(D);
    React.useEffect(() => {
        zt.current = D
    }, [D]);
    let oa = React.useRef(z);
    React.useEffect(() => {
        oa.current = z
    }, [z]);
    let sa = React.useRef(F);
    React.useEffect(() => {
        sa.current = F
    }, [F]);
    let vt = React.useMemo(() => {
        let Gt = (ra, Ca) => oa.current(ra, Ca);
        return _e > 0 ? ct(Gt, _e) : Y > 0 ? be(Gt, Y) : Gt
    }, [Y, _e]), ea = React.useRef();
    React.useEffect(() => {
        Be && Re && (ea.current = be(() => {
            Ge.current.active()
        }, Re))
    }, [Be, Re]);
    let _a = () => {
        He.current !== null && (I.clearTimeout(He.current), He.current = null)
    }, ta = (Gt, ra = !0) => {
        _a(), He.current = I.setTimeout(Sa, Gt || Le.current), ra && (Fe.current = v())
    }, na = Gt => {
        !qe.current && !Ze.current && (kt.current(Gt, da), Bt.current({
            type: "active",
            prompted: !0
        }, da)), Qe.current = 0, Je.current = v(), qe.current = !0, ta(We.current, !1)
    }, Aa = () => {
        _a(), Ze.current || (At.current(null, da), Bt.current({type: "idle"}, da)), Ze.current = !0, ke.current = v(), dt.current ? ca() : qe.current && (Je.current = 0, qe.current = !1)
    }, Ea = Gt => {
        _a(), (Ze.current || qe.current) && (zt.current(Gt, da), Bt.current({
            type: "active",
            prompted: !1
        }, da)), qe.current = !1, Je.current = 0, Ze.current = !1, $e.current += v() - ke.current, Ve.current += v() - ke.current, fa(), ta()
    }, Sa = Gt => {
        if (!Ze.current) {
            vt.cancel && vt.cancel();
            let ra = v() - Fe.current;
            if (!(Le.current + We.current < ra) && We.current > 0 && !qe.current) {
                Ge.current ? Ge.current.prompt() : na(Gt);
                return
            }
            Ge.current ? Ge.current.idle() : Aa();
            return
        }
        Ge.current ? Ge.current.active() : Ea(Gt)
    }, Ga = Gt => {
        if (!me && !Fe.current && (Fe.current = v(), zt.current(null, da)), vt(Gt, da), qe.current) return;
        if (_a(), !Ze.current && et.current.includes(Gt.type)) {
            Sa(Gt);
            return
        }
        let ra = v() - Fe.current;
        if (Ze.current && !ie || !Ze.current && ra >= Le.current) {
            Sa(Gt);
            return
        }
        ze.current = !1, Qe.current = 0, Je.current = 0, ta(), Be && Re && ea.current()
    }, Ta = React.useRef(Ga);
    React.useEffect(() => {
        let Gt = Xe.current;
        Gt && ca(), H > 0 ? Ta.current = be(Ga, H) : Ta.current = Ga, Gt && fa()
    }, [H, Y, _e, oa, Be, Re]);
    let fa = () => {
            M && nt.current && (Xe.current || (tt.current.forEach(Gt => {
                nt.current.addEventListener(Gt, Ta.current, {capture: !0, passive: !0})
            }), Xe.current = !0))
        }, ca = (Gt = !1) => {
            M && nt.current && (Xe.current || Gt) && (tt.current.forEach(ra => {
                nt.current.removeEventListener(ra, Ta.current, {capture: !0})
            }), Xe.current = !1)
        },
        Ia = React.useCallback(Gt => lt.current ? !1 : (_a(), fa(), Ze.current = !1, qe.current = !1, ze.current = !1, Qe.current = 0, Je.current = 0, Ge.current && !Gt && Ge.current.start(), ta(), !0), [He, Ze, lt, Le, Ge]),
        Ma = React.useCallback(Gt => lt.current ? !1 : (_a(), fa(), Me.current = v(), $e.current += v() - ke.current, Ve.current += v() - ke.current, $e.current = 0, Ze.current = !1, qe.current = !1, ze.current = !1, Qe.current = 0, Je.current = 0, Ge.current && !Gt && Ge.current.reset(), ce || ta(), !0), [He, Ze, Le, ce, lt, Ge]),
        Fa = React.useCallback(Gt => lt.current ? !1 : (_a(), fa(), (Ze.current || qe.current) && Ea(), Ze.current = !1, qe.current = !1, ze.current = !1, Qe.current = 0, Je.current = 0, Me.current = v(), Ge.current && !Gt && Ge.current.activate(), ta(), !0), [He, Ze, qe, lt, Le, Ge]),
        va = React.useCallback((Gt = !1) => lt.current || ze.current ? !1 : (Qe.current = Ke(), ze.current = !0, ca(), _a(), Ge.current && !Gt && Ge.current.pause(), !0), [He, lt, Ge]),
        ha = React.useCallback((Gt = !1) => lt.current || !ze.current ? !1 : (ze.current = !1, qe.current || fa(), Ze.current || ta(Qe.current), Je.current && (Je.current = v()), Ge.current && !Gt && Ge.current.resume(), !0), [He, Le, lt, Qe, Ge]),
        Ua = React.useCallback((Gt, ra) => (Ge.current ? (ra && sa.current(Gt, da), Ge.current.message(Gt)) : ra && sa.current(Gt, da), !0), [F]),
        xt = React.useCallback(() => Ze.current, [Ze]), K = React.useCallback(() => qe.current, [qe]),
        Pe = React.useCallback(() => Ge.current ? Ge.current.isLeader : null, [Ge]),
        Oe = React.useCallback(() => Ge.current ? Ge.current.isLastActive : null, [Ge]),
        Ue = React.useCallback(() => Ge.current ? Ge.current.token : null, [Ge]), Ke = React.useCallback(() => {
            if (ze.current) return Qe.current;
            let Gt = Qe.current ? Qe.current : We.current + Le.current, ra = Fe.current ? v() - Fe.current : 0,
                Ca = Math.floor(Gt - ra);
            return Ca < 0 ? 0 : Math.abs(Ca)
        }, [Le, We, qe, Qe, Fe]), mt = React.useCallback(() => Math.round(v() - Me.current), [Me]),
        Tt = React.useCallback(() => Math.round(v() - we.current), [we]),
        jt = React.useCallback(() => ke.current ? new Date(ke.current) : null, [ke]),
        ia = React.useCallback(() => Fe.current ? new Date(Fe.current) : null, [Fe]),
        aa = React.useCallback(() => Ze.current ? Math.round(v() - ke.current + $e.current) : Math.round($e.current), [ke, $e]),
        pa = React.useCallback(() => Ze.current ? Math.round(v() - ke.current + Ve.current) : Math.round(Ve.current), [ke, Ve]),
        ma = React.useCallback(() => {
            let Gt = Math.round(mt() - aa());
            return Gt >= 0 ? Gt : 0
        }, [ke, $e]), ba = React.useCallback(() => {
            let Gt = Math.round(Tt() - pa());
            return Gt >= 0 ? Gt : 0
        }, [ke, $e]);
    React.useEffect(() => {
        if (_e > 0 && Y > 0) throw new Error("❌ onAction can either be throttled or debounced, not both.");
        x && it(x);
        let Gt = () => {
            Ge.current && Ge.current.close(), vt.cancel && vt.cancel(), _a(), ca(!0)
        };
        return M && window.addEventListener("beforeunload", Gt), () => {
            M && window.removeEventListener("beforeunload", Gt), Ge.current && Ge.current.close(), vt.cancel && vt.cancel(), _a(), ca(!0)
        }
    }, []), React.useEffect(() => {
        Ge.current && Ge.current.close(), Be ? Ge.current = new Ee({
            channelName: ve,
            leaderElection: Ce,
            onPrompt: () => {
                na()
            },
            onIdle: () => {
                Aa()
            },
            onActive: () => {
                Ea()
            },
            onMessage: Gt => {
                sa.current(Gt, da)
            },
            start: Ia,
            reset: Ma,
            activate: Fa,
            pause: va,
            resume: ha
        }) : Ge.current = null
    }, [Be, ve, Ce, kt, At, zt, sa, Ia, Ma, va, ha]), React.useEffect(() => {
        De.current || (_a(), ca(!0)), !(ce || Ne) && (me ? Ia() : fa())
    }, [ce, me, Ne, De]), React.useEffect(() => {
        if (!De.current) {
            let Gt = [...new Set([...C, ...B]).values()];
            if (ca(), tt.current = Gt, nt.current = E, et.current = B, ce || Ne) return;
            me ? Ia() : fa()
        }
    }, [E, JSON.stringify(C), JSON.stringify(B), De, Ne, ce, me]), React.useEffect(() => {
        De.current && (De.current = !1)
    }, [De]);
    let da = {
        message: Ua,
        start: Ia,
        reset: Ma,
        activate: Fa,
        pause: va,
        resume: ha,
        isIdle: xt,
        isPrompted: K,
        isLeader: Pe,
        isLastActiveTab: Oe,
        getTabId: Ue,
        getRemainingTime: Ke,
        getElapsedTime: mt,
        getTotalElapsedTime: Tt,
        getLastIdleTime: jt,
        getLastActiveTime: ia,
        getIdleTime: aa,
        getTotalIdleTime: pa,
        getActiveTime: ma,
        getTotalActiveTime: ba,
        setOnPresenceChange: Gt => {
            N = Gt, Bt.current = Gt
        },
        setOnPrompt: Gt => {
            L = Gt, kt.current = Gt
        },
        setOnIdle: Gt => {
            O = Gt, At.current = Gt
        },
        setOnActive: Gt => {
            D = Gt, zt.current = Gt
        },
        setOnAction: Gt => {
            z = Gt, oa.current = Gt
        },
        setOnMessage: Gt => {
            F = Gt, sa.current = Gt
        }
    };
    return da
}

var ge = React.createContext(null);
ge.Consumer;
const useAspectRatio = () => {
        const [r, R] = React.useState(), {orientation: y} = useDeviceOrientation(), [E, C] = React.useState();
        return React.useEffect(() => {
            const x = () => {
                let B = y.includes("landscape") ? "landscape" : "portrait";
                const {width: N, height: L} = window.screen;
                B == "landscape" ? R(N / L) : R(L / N)
            };
            return x(), window.addEventListener("resize", x), () => window.removeEventListener("resize", x)
        }, []), React.useEffect(() => {
        }, [E]), {aspectRatio: r, setScale: C}
    }, useStreamsVideoPlayer = ({
                                    videoPlayer: r,
                                    url: R,
                                    onNextLine: y,
                                    videoResFactor: E,
                                    scaleOffset: C,
                                    onPlayerState: x
                                }, B = {}) => {
        const {zoomable: N = !0, miniPlayer: L = !1, yOffset: O} = B, D = React.useRef(null), z = React.useCallback(() => {
            var ve, Re;
            N && isMobile$1 && ((ve = D.current) == null || ve.zoom(SCALE_RATE.LARGE), (Re = D.current) == null || Re.move(-2))
        }, []), F = React.useCallback(() => {
            var ve, Re;
            N && isMobile$1 && ((ve = D.current) == null || ve.zoom(SCALE_RATE.NORMAL), (Re = D.current) == null || Re.move(0))
        }, []), _e = React.useCallback(() => {
            var ve;
            (ve = D.current) == null || ve.mute()
        }, []), Y = React.useCallback(() => {
            var ve, Re;
            (ve = D.current) == null || ve.audioResume(), (Re = D.current) == null || Re.unMute()
        }, []), H = React.useCallback(() => {
            var ve;
            (ve = D.current) == null || ve.pause()
        }, []), me = React.useCallback(() => {
            var ve;
            (ve = D.current) == null || ve.resume()
        }, []), ce = React.useCallback(ve => {
            var Re;
            (Re = D.current) == null || Re.yOffset(ve || 0)
        }, []), ie = React.useCallback(() => {
            var ve;
            return (ve = D.current) == null ? void 0 : ve.getPlayingUrl()
        }, []);
        React.useEffect(() => {
            O && O != 0 && ce(O)
        }, [O]);
        const Be = React.useCallback(() => {
            switch (r) {
                case LIVE_STREAMS_PLAYERS.FLV_PLAYER:
                    return R ? jsx(FlvplayerComponent$1, {
                        ref: D,
                        videoFactor: E,
                        scaleOffset: C,
                        videoUrl: R,
                        onPlayerState: ve => {
                            x && x(ve)
                        },
                        fallBack: ve => y && y(),
                        miniPlayer: L
                    }) : null;
                default:
                    return null
            }
        }, [R, r, y, L]);
        return {
            zoomIn: z,
            zoomOut: F,
            mute: _e,
            unMute: Y,
            pause: H,
            resume: me,
            player: Be,
            setYoffset: ce,
            videoControlRef: D,
            getPlayingUrl: ie
        }
    }, StreamsVideoPlayerComponent = r => {
        const {
            zoomable: R = !0,
            miniPlayer: y = !1,
            videoPlayer: E,
            url: C,
            betState: x,
            onNextLine: B,
            videoResFactor: N,
            scaleOffset: L,
            yOffset: O,
            isMute: D = !1,
            forceStop: z = !1,
            onPlayerState: F
        } = r, {settings: _e} = React.useContext(SettingsContext), {gameSessionContext: Y} = React.useContext(GameSessionContext), {t: H} = useTranslation(), {preloadConfig: me} = React.useContext(ServerConfigContext), [ce, ie] = React.useState(!1);
        let {aspectRatio: Be, setScale: ve} = useAspectRatio(), {
            unMute: Re,
            mute: Ce,
            pause: Ne,
            resume: we,
            zoomIn: Me,
            zoomOut: ke,
            player: Fe,
            getPlayingUrl: $e,
            videoControlRef: Ve
        } = useStreamsVideoPlayer({
            videoPlayer: E,
            url: C,
            onNextLine: B,
            videoResFactor: N,
            scaleOffset: L,
            onPlayerState: F
        }, {zoomable: R, miniPlayer: y, yOffset: O});
        React.useEffect(() => {
            $e() !== C && we()
        }, [C]), React.useEffect(() => {
            z && ie(!0)
        }, [z]);
        const Je = () => {
        }, Qe = () => {
        }, Ze = 1e3 * 60 * 5, qe = 4e3;
        let {onSystemToast: ze} = useToast();
        const De = me != null && me.whiteLabel.isKioskMode ? me == null ? void 0 : me.whiteLabel.isKioskMode : !1,
            Xe = () => {
                Y.gameSessionInfos.gameSessionState == GAME_SESSION_STATE.ONLINE && !De && !isDesktop$1 && (Ne(), ze({
                    duration: Math.ceil(He() / 1e3),
                    content: H("messages.idle_video"),
                    cb: () => {
                        we()
                    }
                }))
            }, {getRemainingTime: He, activate: Ge} = se({
                onIdle: Xe,
                onActive: Je,
                onPrompt: Qe,
                timeout: Ze,
                promptBeforeIdle: qe,
                throttle: 500
            });
        return React.useEffect(() => {
            _e.liveSoundOn ? Re() : Ce()
        }, [_e]), React.useEffect(() => {
            r.betState == BET_STATE.NO_BET ? Me() : ke()
        }, [x]), React.useEffect(() => {
            if (Be && Be > 0) {
                const Le = document.documentElement, dt = Be / 1.77778 * .955;
                Le.style.setProperty("--mobile--video-scale", dt.toString()), ve(1.25), Be <= 2.1 && (Le.style.setProperty("--mobile--video-scale", 1.225.toString()), ve(1.225))
            }
        }, [Be]), ce ? null : Fe()
    }, StreamsVideoPlayerComponent$1 = React.memo(StreamsVideoPlayerComponent),
    VideoPlayingTableIdContext = React.createContext([{tableId: -1, gameType: ""}, () => {
    }]), useToggleVideo = (r, R) => {
        const [y, E] = React.useState(!1);
        let {systemJsonData: C, allReady: x} = React.useContext(ServerConfigContext);
        const [B, N] = React.useState(0), [L] = React.useContext(VideoPlayingTableIdContext), [O, D] = React.useState(!0),
            z = React.useRef(!0);
        React.useEffect(() => {
            y ? (z.current = !1, _e(!0)) : z.current = !0
        }, [y]);
        const F = React.useMemo(() => {
            var ce;
            if (B === 0) return null;
            let H = (ce = C == null ? void 0 : C.videos.find(ie => ie.id == r)) == null ? void 0 : ce.name;
            return H ? `${C == null ? void 0 : C.videoUrls[B - 1].url}${H}` : (Logger$1.warn(`Game table: ${r} live video not available from system json`), null)
        }, [C, x, r, B]);
        React.useEffect(() => {
            L.tableId === -1 && (z.current = !0)
        }, [L]);
        const _e = React.useCallback(H => {
            if (!C) {
                N(0);
                return
            }
            let me = C == null ? void 0 : C.videoUrls.length;
            N(ce => {
                if (z.current) return 0;
                let ie = ce;
                return ie += 1, H && (ie = 1), ie > me ? (Logger$1.warn(`
`), Logger$1.warn("No more line can be selected"), 1) : (Logger$1.warn(`
`), Logger$1.warn("Auto change to a new line:", ie), ie)
            })
        }, [C, x, z.current]), Y = React.useCallback(H => {
            D(!0), E(H)
        }, [y]);
        return React.useEffect(() => () => {
        }, []), {hiddenVideo: O, setHiddenVideo: D, isVideoVisible: y, toggleVideo: Y, videoUrl: F, changeLine: _e}
    }, MaintenancePanel$1 = "", MaintenancePanel = r => {
        const {t: R} = useTranslation();
        return jsxs("div", {
            className: [r.className, "maintenance"].join(" "),
            children: [jsx("img", {src: IMAGES.MAINTENANCE_BG}), jsx("div", {className: "svg_maintenance"}), jsx("div", {children: R("gamehall_table.maintaining")})]
        })
    }, GameHallTable = r => {
        var We, dt, et;
        const {t: R, i18n: y} = useTranslation(),
            E = React.useContext(MovedContext), [C] = React.useContext(GameTypeContext);
        let {preloadConfig: x, systemJsonData: B} = React.useContext(ServerConfigContext);
        const N = React.useContext(GameHallCollectionTablesRefContext), L = React.useContext(OutOfVwContext),
            O = React.useMemo(() => {
                var nt;
                return !!L.has((nt = N.current[r.tableIndex]) == null ? void 0 : nt.table)
            }, [L]), [D, z] = React.useState(), [F, _e] = React.useState(r.tableInfo.tableName), [Y, H] = React.useState(r.tableInfo.tableId), [me, ce] = React.useState(GameType.Baccarat), [ie, Be] = React.useState(r.tableInfo ? r.tableInfo.dealerName : ""), [ve, Re] = React.useState(!1);
        let {setUpDealerImg: Ce} = useDealerLoader(z), {
            isVideoVisible: Ne,
            toggleVideo: we,
            videoUrl: Me,
            changeLine: ke,
            setHiddenVideo: Fe,
            hiddenVideo: $e
        } = useToggleVideo(F);
        const Ve = React.useRef(null), [Je, Qe] = React.useContext(VideoPlayingTableIdContext), [Ze] = React.useContext(UserInfoContext), [qe, ze] = React.useState("en");
        let {onSystemToast: De} = useToast();
        React.useEffect(() => {
            Object.keys(GAME_LOGO).includes(y.language) ? ze(y.language) : ze("en")
        }, [y.language]), React.useEffect(() => {
            r.tableInfo.tableId != -1 && z(void 0)
        }, [r.tableInfo.tableId]), React.useEffect(() => {
            r.tableInfo && (_e(r.tableInfo.tableName), H(r.tableInfo.tableId), ce(r.tableInfo.gameType), Be(r.tableInfo.dealerName), Ce(r.tableInfo.tableName, r.tableInfo.tableId, r.tableInfo.dealerName))
        }, [r.tableInfo]);
        const Xe = () => {
            switch (r.tableInfo.gameType) {
                case GameType.Baccarat:
                    const nt = x == null ? void 0 : x.whiteLabel.sexyGames.includes(F),
                        tt = x == null ? void 0 : x.whiteLabel.classicBaccaratGames.includes(F);
                    let lt = GAME_LOGO[qe].classic_baccarat_logo;
                    return nt ? lt = GAME_LOGO[qe].sexy_baccarat_logo : tt ? lt = GAME_LOGO[qe].classic_baccarat_logo : lt = GAME_LOGO[qe].baccarat_logo, jsx("img", {
                        src: lt,
                        className: "game_logo"
                    });
                case GameType.Quick:
                    return jsx("img", {src: GAME_LOGO[qe].quick_baccarat_logo, className: "game_logo"});
                case GameType.InsuredBaccarat:
                    return jsx("img", {src: GAME_LOGO[qe].insurance_baccarat_logo, className: "game_logo"});
                case GameType.VIP:
                    return jsx("img", {src: GAME_LOGO[qe].vip_baccarat_logo, className: "game_logo"});
                case GameType.See:
                    return jsx("img", {src: GAME_LOGO[qe].see_baccarat_logo, className: "game_logo"});
                case void 0:
                    return;
                default:
                    return jsx("img", {src: GAME_LOGO[qe][`${GAMES[r.tableInfo.gameType]}_logo`], className: "game_logo"})
            }
        }, He = () => {
            switch (parseInt(C.toString()) === me ? C : me) {
                case GameType.Baccarat:
                case GameType.Quick:
                case GameType.InsuredBaccarat:
                case GameType.See:
                case GameType.VIP:
                    return jsx(BaccaratBigRoad, {
                        renderWithCanvas: !0,
                        size: {x: 33, y: 6},
                        roadMap: parseBaccaratRoadData(r.tableInfo.currentShoeGameResult || [[]]).map(na => na[1])
                    });
                case GameType.DT:
                    return jsx(DragonTigerBigRoad, {
                        renderWithCanvas: !0,
                        size: {x: 33, y: 6},
                        roadMap: parseDragonTigerRoadData(r.tableInfo.currentShoeGameResult || [[]]).map(na => na[1])
                    });
                case GameType.Win3Card:
                    return jsx(Win3CardsBigRoad, {
                        renderWithCanvas: !0,
                        size: {x: 33, y: 6},
                        roadMap: parseWin3CardsRoadData(r.tableInfo.currentShoeGameResult || [[]]).map(na => na[0])
                    });
                case GameType.TeenPatti:
                    return jsx(TeenPattiBigRoad, {
                        renderWithCanvas: !0,
                        size: {x: 33, y: 6},
                        roadMap: parseTeenPattiRoadData(r.tableInfo.currentShoeGameResult || [[]], 0).map(na => na[0])
                    });
                case AltGameType.TeenPatti:
                    return jsx(TeenPattiBigRoad, {
                        renderWithCanvas: !0,
                        size: {x: 33, y: 6},
                        roadMap: parseTeenPattiRoadData(r.tableInfo.currentShoeGameResult || [[], [], []], 2).map(na => na[0], 2)
                    });
                case GameType.BullBull:
                    const tt = parseBullBullRoadData(r.tableInfo.currentShoeGameResult || [[]]);
                    return jsx(BullBullResultRoad, {
                        size: 6,
                        winner: tt.map(na => parseInt(na[0]).toString(2).padStart(3, "0")),
                        bankerResults: tt.map(na => na[1]),
                        player1Results: tt.map(na => na[2]),
                        player2Results: tt.map(na => na[3]),
                        player3Results: tt.map(na => na[4]),
                        gameHall: !0
                    });
                case GameType.AndarBahar:
                    const lt = 9, Bt = parseAndarBaharRoadData(r.tableInfo.currentShoeGameResult || [[]]).map(na => na[0]);
                    return Bt.length === 0 ? jsx(Fragment, {}) : jsxs("article", {
                        className: "result_road andar_bahar",
                        children: [Bt.slice(-lt).reverse().map((na, Aa) => jsx("div", {className: na}, Aa)), Array(Math.max(lt - Bt.length, 0)).fill(void 0).map((na, Aa) => jsx("div", {}, Aa))]
                    });
                case GameType.Roulette:
                    const kt = 9,
                        At = parseRouletteRoadData(r.tableInfo.currentShoeGameResult || [[]]).map(na => parseInt(na.match(REGEX.LAST_NUMBER)[0]));
                    return At.length === 0 ? jsx(Fragment, {}) : jsxs("article", {
                        className: "result_road roulette",
                        children: [At.slice(-kt).reverse().map((na, Aa) => jsx("div", {
                            className: RED.includes(na) ? "red" : BLACK.includes(na) ? "black" : "green",
                            children: na
                        }, Aa)), Array(Math.max(kt - At.length, 0)).fill(void 0).map((na, Aa) => jsx("div", {}, Aa))]
                    });
                case GameType.Sicbo:
                    const zt = 9, oa = parseSicboRoadData(r.tableInfo.currentShoeGameResult || [[]]);
                    return oa.length === 0 ? jsx(Fragment, {}) : jsxs("article", {
                        className: "result_road sicbo",
                        children: [oa.slice(-zt).reverse().map((na, Aa) => jsx("div", {
                            className: na[3],
                            children: parseInt(na[0]) + parseInt(na[1]) + parseInt(na[2])
                        }, Aa)), Array(Math.max(zt - oa.length, 0)).fill(void 0).map((na, Aa) => jsx("div", {}, Aa))]
                    });
                case AltGameType.ThreePictures:
                    return jsx(ThreePicturesBigRoad, {
                        renderWithCanvas: !0,
                        size: {x: 33, y: 6},
                        roadMap: parseThreePicturesRoadData(r.tableInfo.currentShoeGameResult && r.tableInfo.currentShoeGameResult[1] ? r.tableInfo.currentShoeGameResult : [[], []]).map(na => na[0])
                    });
                case AltGameType.HiLo:
                    const sa = 8,
                        vt = parseHiLoRoadData(r.tableInfo.currentShoeGameResult && r.tableInfo.currentShoeGameResult[1] ? r.tableInfo.currentShoeGameResult : [[], []]),
                        ea = {L: "LO", E: "11", H: "HI"};
                    return vt.length === 0 ? jsx(Fragment, {}) : jsxs("article", {
                        className: "result_road hi_lo",
                        children: [vt.slice(-sa).reverse().map((na, Aa) => jsx("div", {
                            className: na[3],
                            children: ea[na[3]]
                        }, Aa)), Array(Math.max(sa - vt.length, 0)).fill(void 0).map((na, Aa) => jsx("div", {}, Aa))]
                    });
                case AltGameType.SicTan:
                    const _a = 8,
                        ta = parseSictanRoadData(r.tableInfo.currentShoeGameResult && r.tableInfo.currentShoeGameResult[2] ? r.tableInfo.currentShoeGameResult : [[], [], []]);
                    return ta.length === 0 ? jsx(Fragment, {}) : jsxs("article", {
                        className: "result_road sictan",
                        children: [ta.slice(-_a).reverse().map((na, Aa) => jsx("div", {
                            className: `fan_${na[3]}`,
                            children: jsx("div", {children: na[3]})
                        }, Aa)), Array(Math.max(_a - ta.length, 0)).fill(void 0).map((na, Aa) => jsx("div", {}, Aa))]
                    });
                case GameType.XocDia: {
                    const Aa = parseXicDiaRoadData(r.tableInfo.currentShoeGameResult || [[]]);
                    return Aa.length === 0 ? jsx(Fragment, {}) : jsxs("article", {
                        className: "result_road xoc_dia",
                        children: [Aa.slice(-8).reverse().map((Ea, Sa) => jsx("div", {
                            className: `${Ea[0]}`,
                            children: jsx("div", {children: Ea[2]})
                        }, Sa)), Array(Math.max(8 - Aa.length, 0)).fill(void 0).map((Ea, Sa) => jsx("div", {}, Sa))]
                    })
                }
                default:
                    return jsx(Fragment, {})
            }
        };
        React.useEffect(() => {
            const nt = () => Re(!0), tt = lt => {
                var Bt;
                if (!((Bt = Ve.current) != null && Bt.contains(lt.target))) {
                    const kt = (At, zt) => {
                        let oa = At.parentNode;
                        for (; oa !== null;) {
                            if (oa === zt) return !0;
                            oa = oa.parentNode
                        }
                        return !1
                    };
                    Ve.current && !kt(lt.target, Ve.current.parentElement) && Re(!1)
                }
            };
            return isMobile$1 && Ve.current && (Ve.current.addEventListener("click", nt), window.addEventListener("click", tt)), () => {
                isMobile$1 && Ve.current && (Ve.current.removeEventListener("click", nt), window.removeEventListener("click", tt))
            }
        }, []);
        const Ge = useGameTableTitle(me, F, !0), Le = nt => {
            var tt;
            if (nt === EnterType.VIPSideReserve) {
                const lt = ((tt = r.tableInfo.limits) == null ? void 0 : tt.enterLimit[0]) ?? 0;
                if (Ze.amount < lt) {
                    De({duration: 2, content: R("messages.insufficient_vip_balance")});
                    return
                }
            }
            r.onEnter({tableId: Y, gameType: me, enterType: nt})
        };
        return jsxs("article", {
            className: `gamehall_table${O ? " outOfView" : ""}`,
            onMouseEnter: nt => {
                isDesktop$1 && (Qe({tableId: r.tableInfo.tableId, gameType: me}), we(!0)), nt.preventDefault()
            },
            onMouseLeave: nt => {
                isDesktop$1 && (Qe({tableId: -1, gameType: me}), we(!1)), nt.preventDefault()
            },
            onClick: () => !E && r.tableInfo.tableStatus !== TableStatus.Maintenance && me !== GameType.VIP && r.onEnter({
                tableId: Y,
                gameType: me
            }),
            ref: nt => N.current[r.tableIndex] = nt ? {table: nt} : null,
            children: [r.tableInfo.tableStatus !== TableStatus.Maintenance ? jsxs("div", {
                className: "gamehall_table_container ",
                style: {backgroundImage: D ? `url(${D})` : "unset", scale: 2},
                "aria-checked": ve,
                ref: Ve,
                children: [!D && jsx("div", {
                    className: "loading",
                    children: jsx("div", {})
                }), !O && Ne && Me ? jsx("section", {
                    style: {opacity: $e ? 0 : 1},
                    className: "video_container",
                    children: jsx(StreamsVideoPlayerComponent$1, {
                        videoResFactor: .1,
                        url: Me,
                        videoPlayer: LIVE_STREAMS_PLAYERS.FLV_PLAYER,
                        onNextLine: ke,
                        onPlayerState: nt => {
                            Fe(nt !== "playing")
                        }
                    })
                }) : null, r.tableInfo.tableStatus === TableStatus.Shuffle ? jsx("div", {
                    className: "shuffle",
                    children: jsx("div", {className: "svg_shuffle"})
                }) : (We = r.tableInfo) != null && We.countDown && r.tableInfo.countDown !== -1 && r.tableInfo.gameStatus.tableStatus === TableStatus.CanBet ? jsx(Timer, {
                    thickness: 2,
                    size: 30,
                    duration: r.tableInfo.countDown - Math.round((Date.now() - r.tableInfo.gameStatus.timestamp) / 1e3),
                    labelClass: "gamehall_table_timer"
                }) : jsx("div", {}), !O && Xe(), !O && jsx("div", {
                    className: "gamehall_roadmap",
                    children: He()
                }), me === GameType.VIP && ((dt = r.tableInfo.additionalTableInfo) == null ? void 0 : dt.vipTableReserveStatus) === VipTableStatus.Reserved && jsx("svg", {
                    viewBox: "0 0 66 12",
                    className: "reserved",
                    children: jsx("text", {
                        x: "33",
                        y: "7.5",
                        textAnchor: "middle",
                        dominantBaseline: "middle",
                        children: R("game_hall.vip_occupied")
                    })
                }), me === GameType.VIP && jsxs("div", {
                    className: "vip_buttons",
                    children: [((et = r.tableInfo.additionalTableInfo) == null ? void 0 : et.vipTableReserveStatus) === 100 && jsx("button", {
                        onClick: () => Le(EnterType.VIPSideReserve),
                        children: R("game_hall.vip_reserve")
                    }), jsx("button", {onClick: () => Le(EnterType.Side), children: R("game_hall.vip_enter")})]
                })]
            }) : jsx(MaintenancePanel, {className: "gamehall_table_container"}), r.goodRoad !== void 0 && [GoodRoadType.LongBanker, GoodRoadType.LongPlayer, GoodRoadType.BigRoadJump, GoodRoadType.SinglePlayerDoubleBanker, GoodRoadType.SingleBankerDoublePlayer, GoodRoadType.Chi, GoodRoadType.ChiEveryBanker, GoodRoadType.ChiEveryPlayer, GoodRoadType.ChiEveryOtherBanker, GoodRoadType.ChiEveryOtherPlayer].includes(r.goodRoad) && R(`gamehall_table.good_road.${r.goodRoad}`).length > 0 && jsx("div", {
                className: "good_road_label",
                children: R(`gamehall_table.good_road.${r.goodRoad}`)
            }), jsxs("div", {
                children: [jsx("div", {
                    className: "table_info",
                    children: Ge
                }), jsx("div", {
                    className: "limit_info",
                    children: r.tableInfo.limits && jsxs(Fragment, {children: [jsxs("div", {children: [R("game_hall.vip_betlimit"), ": ", jsx("span", {children: `${Helper.formatAbbrMoney(r.tableInfo.limits.betLimitLow)} - ${Helper.formatAbbrMoney(r.tableInfo.limits.betLimitHigh)}`})]}), jsx("div", {}), jsxs("div", {children: [R("game_hall.vip_min_enter"), ": ", jsx("span", {children: Helper.formatAbbrMoney((r.tableInfo.limits.enterLimit[0] || 0) / 100, !1)})]})]})
                })]
            })]
        })
    }, MultiHallTable$1 = "", Responsive$8 = "", MultiTableResults = "", SicboFocusedResult$1 = "", DELAY_HIDE$3 = 2e3,
    CSS_TRANSITION_TIME$1 = 250, SicboFocusedResult = r => {
        let {animate: R = !0} = r;
        const {t: y} = useTranslation(),
            E = React.useContext(GameTableBetStateContext), [C, x] = React.useState(""), [B, N] = React.useState(""), [L, O] = React.useState(0), [D, z] = React.useState("hidden");
        React.useRef("000");
        const F = React.useRef(-1), _e = React.useRef(-1);
        return React.useEffect(() => {
            switch (E) {
                case BET_STATE.BETTING:
                    clearInterval(F.current), _e.current = window.setTimeout(() => {
                        z("hidden")
                    }, DELAY_HIDE$3);
                    break;
                case BET_STATE.NO_BET:
                    clearTimeout(_e.current), r.winResult && (z("hidden"), setTimeout(() => {
                        clearInterval(F.current), N(["1", "2"].includes(r.winResult[4]) ? "small" : ["3", "4"].includes(r.winResult[4]) ? "big" : "triple"), O(parseInt(r.winResult[0], 19)), x(r.winResult.slice(1, 4)), z("fixed")
                    }, R ? CSS_TRANSITION_TIME$1 : 0));
                    break
            }
        }, [r.winResult, E]), jsxs("section", {
            id: "sicbo_focused_result",
            className: D,
            children: [jsx("div", {
                className: "dices",
                children: C.split("").map((Y, H) => jsx("div", {className: `svg_dice_${Y}`}, H))
            }), B && jsx("div", {className: B, children: `${L} ${y(`roadmap.sicbo.${B}`)}`})]
        })
    }, HiLoFocusedResult$1 = "", DELAY_HIDE$2 = 2e3, HiLoFocusedResult = r => {
        let {animate: R = !0} = r;
        const {t: y} = useTranslation(),
            E = React.useContext(GameTableBetStateContext), [C, x] = React.useState(""), [B, N] = React.useState(""), [L, O] = React.useState("hidden");
        React.useRef("000");
        const D = React.useRef(-1), z = React.useRef(-1), F = 250;
        return React.useEffect(() => {
            switch (E) {
                case BET_STATE.BETTING:
                    clearInterval(D.current), z.current = window.setTimeout(() => {
                        O("hidden")
                    }, DELAY_HIDE$2);
                    break;
                case BET_STATE.NO_BET:
                    clearTimeout(z.current), r.winResult && (O("hidden"), setTimeout(() => {
                        clearInterval(D.current), N(r.winResult[4] === "1" ? "lo" : r.winResult[4] === "3" ? "hi" : "hi_lo"), x(r.winResult.slice(1, 4)), O("fixed")
                    }, R ? F : 0));
                    break
            }
        }, [r.winResult, E]), jsxs("section", {
            id: "hi_lo_focused_result",
            className: L,
            children: [jsx("div", {
                className: "dices",
                children: C.split("").map((_e, Y) => jsx("div", {className: `svg_dice_${_e}`}, Y))
            }), B && jsx("div", {className: B, children: y(`roadmap.hi_lo.${B}`)})]
        })
    }, FPCFocusedResult$1 = "", DELAY_HIDE$1 = 2e3, CSS_TRANSITION_TIME = 250, FPCFocusedResult = r => {
        let {animate: R = !0} = r;
        const y = React.useContext(GameTableBetStateContext), [E, C] = React.useState(""), [x, B] = React.useState("hidden"),
            N = React.useRef(-1);
        return React.useEffect(() => {
            switch (y) {
                case BET_STATE.BETTING:
                    N.current = window.setTimeout(() => {
                        B("hidden")
                    }, DELAY_HIDE$1);
                    break;
                case BET_STATE.NO_BET:
                    clearTimeout(N.current), r.winResult && (B("hidden"), setTimeout(() => {
                        C(r.winResult.slice(0, 3)), B("fixed")
                    }, R ? CSS_TRANSITION_TIME : 0));
                    break
            }
        }, [r.winResult, y]), jsx("section", {
            id: "fpc_focused_result",
            className: x,
            children: jsx("div", {
                className: "dices",
                children: E.split("").map((L, O) => jsx("div", {
                    className: `dice ${FPC_COLOR[parseInt(L) - 1]}`,
                    children: jsx("div", {className: `svg_table_fpc_${FPC_DICE[L]}`})
                }, O))
            })
        })
    }, SictanFocusedResult$1 = "", DELAY_HIDE = 2e3, SictanFocusedResult = r => {
        let {animate: R = !0} = r;
        useTranslation();
        const y = React.useContext(GameTableBetStateContext), [E, C] = React.useState(""), [x, B] = React.useState(""), [N, L] = React.useState("hidden");
        React.useRef("000");
        const O = React.useRef(-1), D = React.useRef(-1), z = 250;
        return React.useEffect(() => {
            switch (y) {
                case BET_STATE.BETTING:
                    clearInterval(O.current), D.current = window.setTimeout(() => {
                        L("hidden")
                    }, DELAY_HIDE);
                    break;
                case BET_STATE.NO_BET:
                    clearTimeout(D.current), r.winResult && (L("hidden"), setTimeout(() => {
                        clearInterval(O.current), B(r.winResult[5]), C(r.winResult.slice(1, 4)), L("fixed")
                    }, R ? z : 0));
                    break
            }
        }, [r.winResult, y]), jsxs("section", {
            id: "sictan_focused_result",
            className: N,
            children: [jsx("div", {
                className: "dices",
                children: E.split("").map((F, _e) => jsx("div", {className: `svg_dice_${F}`}, _e))
            }), x && jsx("div", {className: `fan fan_${x}`, children: x})]
        })
    }, XocDiaCoinsSet$1 = "";
var XD_COIN_SET = (r => (r.XD0 = "0000", r.XD1 = "0001", r.XD2 = "0011", r.XD3 = "1110", r.XD4 = "1111", r))(XD_COIN_SET || {});
const XocDiaCoinsSet = ({value: r}) => {
    if (r === "" || r == null) return jsx(Fragment, {});
    const R = r.split("");
    return jsx("div", {
        className: "xoc_dia_coins_set",
        children: [...R].map((y, E) => jsx("div", {
            className: `coin ${y == "0" ? "white" : "red"}`,
            children: E == 3 ? r.split("1").length - 1 : jsx(Fragment, {})
        }, E))
    })
}, BaccaratResults = r => {
    const [R, y] = React.useState([]), [E, C] = React.useState([]), [x, B] = React.useState(), {t: N} = useTranslation();
    return React.useEffect(() => {
        if (r.gameResults) {
            if (JSON.stringify(r.gameResults[0]) !== JSON.stringify(E) && C(r.gameResults[0].slice()), JSON.stringify(r.gameResults[1]) !== JSON.stringify(R)) {
                let L = r.gameResults[1].slice();
                for (; L.length < 3;) L.push("-2");
                y(L)
            }
        } else r.betState === BET_STATE.BETTING && (C([]), y([]))
    }, [r.gameResults]), React.useEffect(() => {
        if (r.winResult) {
            let L = r.winResult[0][0];
            if (L !== "-1") {
                const O = {0: N("bet_type.1003"), 1: N("bet_type.1001"), 2: N("bet_type.1002")},
                    D = {0: "19, 206, 102", 1: "255, 73, 73", 2: "0, 144, 255"};
                B({winner: O[L[0]], color: D[L[0]]})
            }
        } else B(void 0)
    }, [r.winResult]), jsxs(Fragment, {
        children: [jsx("div", {className: "background"}), jsxs("div", {
            className: "results baccarat",
            children: [jsxs("div", {
                children: [jsx(BaccaratGameResults, {
                    side: "player",
                    results: R
                }), jsx("div", {children: R.some(L => !["-2", "-3"].includes(L)) && R.reduce((L, O) => L + (parseInt(O) % 100 >= 0 ? parseInt(O) % 100 > 10 ? 10 : parseInt(O) % 100 : 0), 0) % 10})]
            }), jsxs("div", {
                children: [jsx("div", {children: E.some(L => !["-2", "-3"].includes(L)) && E.reduce((L, O) => L + (parseInt(O) % 100 >= 0 ? parseInt(O) % 100 > 10 ? 10 : parseInt(O) % 100 : 0), 0) % 10}), jsx(BaccaratGameResults, {
                    side: "banker",
                    results: E
                })]
            })]
        }), x && jsx("div", {className: "win_result", style: {"--color": x.color}, children: x.winner})]
    })
}, DtResults = r => {
    const [R, y] = React.useState([]), [E, C] = React.useState([]), [x, B] = React.useState(), {t: N} = useTranslation();
    return React.useEffect(() => {
        const [L, O] = [0, 1];
        r.gameResults ? (parseInt(r.gameResults[L][0]) % 100, parseInt(r.gameResults[O][0]) % 100, JSON.stringify(r.gameResults[L]) !== JSON.stringify(E) && (r.gameResults[L].some(D => D !== "-2"), r.gameResults[L][0], C(r.gameResults[L].slice())), JSON.stringify(r.gameResults[O]) !== JSON.stringify(R) && (r.gameResults[O].some(D => D !== "-2"), r.gameResults[O][0], y(r.gameResults[O].slice()))) : r.betState === BET_STATE.BETTING && (y([]), C([]))
    }, [r.winResult, r.gameResults, r.betState]), React.useEffect(() => {
        if (r.winResult) {
            let L = r.winResult[0][0];
            if (L !== "-1") {
                const O = {0: N("bet_type.2003"), 1: N("bet_type.2001"), 2: N("bet_type.2002")},
                    D = {0: "19, 206, 102", 1: "255, 73, 73", 2: "0, 144, 255"};
                B({winner: O[L[0]], color: D[L[0]]})
            }
        } else B(void 0)
    }, [r.winResult]), jsxs(Fragment, {
        children: [jsx("div", {className: "background"}), jsxs("div", {
            className: "results dt",
            children: [jsx("div", {
                className: "left",
                children: jsx(DragonTigerGameResults, {side: "dragon", result: E[0]})
            }), jsx("div", {className: "right", children: jsx(DragonTigerGameResults, {side: "tiger", result: R[0]})})]
        }), x && jsx("div", {className: "win_result", style: {"--color": x.color}, children: x.winner})]
    })
}, Win3CardsResults = r => {
    const [R, y] = React.useState(), [E, C] = React.useState(), [x, B] = React.useState([]), [N, L] = React.useState([]), [O, D] = React.useState(), {t: z} = useTranslation();
    return React.useEffect(() => {
        r.gameResults ? (JSON.stringify(r.gameResults[0]) !== JSON.stringify(x) && (r.gameResults[0].some(F => F !== "-2"), B(r.gameResults[0].slice())), JSON.stringify(r.gameResults[1]) !== JSON.stringify(N) && (r.gameResults[1].some(F => F !== "-2"), L(r.gameResults[1].slice()))) : r.betState === BET_STATE.BETTING && (B([]), L([]))
    }, [r.gameResults, r.betState]), React.useEffect(() => {
        if (!r.winResult) return;
        let F = r.winResult[0][0];
        if (F === "-1") y(void 0), C(void 0); else {
            const _e = (Y, H) => {
                switch (Y) {
                    case"0":
                        return `high_card ${Helper.mapValueToPoker(H)}`;
                    case"1":
                        return `pair ${Helper.mapValueToPoker(H)}`;
                    case"2":
                        return "straight";
                    case"3":
                        return "flush";
                    case"4":
                        return "straight_flush";
                    case"5":
                        return "three_of_a_kind";
                    case"6":
                        return "235";
                    default:
                        return
                }
            };
            y(_e(F[1], F[2])), C(_e(F[3], F[4]))
        }
    }, [r.winResult, r.gameResults, r.betState]), React.useEffect(() => {
        if (r.winResult) {
            let F = r.winResult[0][0];
            if (F !== "-1") {
                const _e = {0: z("bet_type.9103"), 1: z("bet_type.9001"), 2: z("bet_type.9002")},
                    Y = {0: "19, 206, 102", 1: "0, 144, 255", 2: "255, 73, 73"};
                D({winner: _e[F[0]], color: Y[F[0]]})
            }
        } else D(void 0)
    }, [r.winResult]), jsxs(Fragment, {
        children: [jsx("div", {className: "background"}), jsxs("div", {
            className: "results w3c",
            children: [jsxs("div", {
                className: "left",
                children: [jsxs("div", {
                    className: "card_type",
                    children: [R && z(`detailed_bet_type.additional_result.${R.split(" ")[0]}`), R && R.split(" ")[1] && jsx("span", {children: R.split(" ")[1]})]
                }), jsx(Win3CardsGameResults, {side: "dragon", results: x})]
            }), jsxs("div", {
                className: "right",
                children: [jsxs("div", {
                    className: "card_type",
                    children: [E && z(`detailed_bet_type.additional_result.${E.split(" ")[0]}`), E && E.split(" ")[1] && jsx("span", {children: E.split(" ")[1]}), " "]
                }), jsx(Win3CardsGameResults, {side: "phoenix", results: N})]
            })]
        }), O && jsx("div", {className: "win_result", style: {"--color": O.color}, children: O.winner})]
    })
}, ThreePictureResults = r => {
    const [R, y] = React.useState(), [E, C] = React.useState(), [x, B] = React.useState([]), [N, L] = React.useState([]), [O, D] = React.useState(), {t: z} = useTranslation();
    return React.useEffect(() => {
        r.gameResults ? (JSON.stringify(r.gameResults[0]) !== JSON.stringify(x) && (r.gameResults[0].some(F => F !== "-2"), B(r.gameResults[0].slice())), JSON.stringify(r.gameResults[1]) !== JSON.stringify(N) && (r.gameResults[1].some(F => F !== "-2"), L(r.gameResults[1].slice()))) : r.betState === BET_STATE.BETTING && (B([]), L([]))
    }, [r.gameResults, r.betState]), React.useEffect(() => {
        if (!r.winResult) return;
        let F = r.winResult[0][0];
        if (F === "-1") y(void 0), C(void 0); else {
            F = r.winResult[1][0];
            const _e = (Y, H) => {
                switch (Y) {
                    case"0":
                        return H;
                    case"1":
                        return `single_picture ${H}`;
                    case"2":
                        return `double_pictures ${H}`;
                    case"3":
                        return "triple_pictures";
                    default:
                        return
                }
            };
            y(_e(F[1], F[2])), C(_e(F[3], F[4]))
        }
    }, [r.winResult, r.gameResults, r.betState]), React.useEffect(() => {
        if (r.winResult) {
            let F = r.winResult[0][0];
            if (F !== "-1") {
                F = r.winResult[1][0];
                const _e = {0: z("bet_type.9103"), 1: z("bet_type.9101"), 2: z("bet_type.9102")},
                    Y = {0: "19, 206, 102", 1: "0, 144, 255", 2: "255, 73, 73"};
                D({winner: _e[F[0]], color: Y[F[0]]})
            }
        } else D(void 0)
    }, [r.winResult]), jsxs(Fragment, {
        children: [jsx("div", {className: "background"}), jsxs("div", {
            className: "results three_picture",
            children: [jsxs("div", {
                className: "left",
                children: [jsxs("div", {
                    className: "card_type",
                    children: [jsx("div", {children: R && R.split(" ")[0].includes("picture") && z(`detailed_bet_type.additional_result.${R.split(" ")[0]}`)}), jsx("div", {children: R && (!R.split(" ")[0].includes("picture") || R.split(" ").length === 2) && R.split(" ").pop()})]
                }), jsx(ThreePicturesGameResults, {side: "dragon", results: x})]
            }), jsxs("div", {
                className: "right",
                children: [jsxs("div", {
                    className: "card_type",
                    children: [jsx("div", {children: E && E.split(" ")[0].includes("picture") && z(`detailed_bet_type.additional_result.${E.split(" ")[0]}`)}), jsx("div", {children: E && (!E.split(" ")[0].includes("picture") || E.split(" ").length === 2) && E.split(" ").pop()})]
                }), jsx(ThreePicturesGameResults, {side: "phoenix", results: N})]
            })]
        }), O && jsx("div", {className: "win_result", style: {"--color": O.color}, children: O.winner})]
    })
}, TeenPattiResults = r => {
    const [R, y] = React.useState([]), [E, C] = React.useState([]), [x, B] = React.useState(""), [N, L] = React.useState(), [O, D] = React.useState(), [z, F] = React.useState(), {t: _e} = useTranslation(),
        Y = React.useRef();
    return React.useEffect(() => {
        r.specialWinResultRawCards && (Y.current = [...r.specialWinResultRawCards[0]])
    }, [r.specialWinResultRawCards]), React.useEffect(() => {
        r.gameResults ? (JSON.stringify(r.gameResults[0]) !== JSON.stringify(R) && (r.gameResults[0].some(H => H !== "-2"), y(r.gameResults[0].slice())), JSON.stringify(r.gameResults[1]) !== JSON.stringify(E) && (r.gameResults[1].some(H => H !== "-2"), C(r.gameResults[1].slice()))) : r.betState === BET_STATE.BETTING && (y([]), C([]))
    }, [r.gameResults, r.betState]), React.useEffect(() => {
        if (!r.winResult) return;
        let H = r.winResult[0][0];
        if (H === "-1") B(""); else {
            H = r.winResult[r.shoeGameResultIndex][0];
            const me = ce => {
                switch (ce) {
                    case"0":
                        return "high_card";
                    case"1":
                        return "pair";
                    case"2":
                        return "flush";
                    case"3":
                        return "straight";
                    case"4":
                        return "straight_flush";
                    case"5":
                    case"6":
                        return "three_of_a_kind";
                    default:
                        return
                }
            };
            L(me(H[1])), D(me(H[2]))
        }
    }, [r.winResult, r.gameResults, r.betState]), React.useEffect(() => {
        if (r.winResult) {
            let H = r.winResult[0][0];
            if (H !== "-1") {
                const me = {0: _e("bet_type.6303"), 1: _e("bet_type.6301"), 2: _e("bet_type.6302")},
                    ce = {0: "19, 206, 102", 1: "0, 144, 255", 2: "255, 73, 73"};
                switch (F({winner: me[H[0]], color: ce[H[0]]}), H[3]) {
                    case"0":
                        B("not_qualified");
                        break;
                    case"1":
                        B("three_of_a_kind");
                        break;
                    case"2":
                        B("straight");
                        break;
                    case"3":
                        B("flush");
                        break;
                    case"4":
                        B("full_house");
                        break;
                    case"5":
                        B("four_of_a_kind");
                        break;
                    case"6":
                        B("straight_flush");
                        break;
                    case"7":
                        B("royal_flush");
                        break
                }
            }
        } else F(void 0)
    }, [r.winResult, r.specialWinResultRawCards]), jsxs(Fragment, {
        children: [jsx("div", {className: "background"}), jsxs("div", {
            className: "results teen_patti",
            children: [jsxs("div", {
                className: "left",
                children: [jsx("div", {
                    className: "card_type",
                    children: N && _e(`detailed_bet_type.additional_result.${N}`)
                }), jsx(TeenPattiGameResults, {side: "player_a", results: R})]
            }), jsxs("div", {
                className: "center",
                children: [jsx("div", {
                    className: "six_card_bonus_results",
                    children: jsxs("div", {
                        className: "svg_table_six_card_bonus six_card_bonus_result",
                        children: [x && jsx("div", {
                            className: "card_type",
                            children: _e(`detailed_bet_type.additional_result.${x}`)
                        }), x.length > 0 && x !== "not_qualified" && jsx(TeenPattiSixCardResults, {results: Y.current || []}), jsx("div", {className: "decor_line"})]
                    })
                }), jsx("div", {className: "title", children: _e(`bet_type.${BetType.TPa_SixCardsBonus}`)})]
            }), jsxs("div", {
                className: "right",
                children: [jsx("div", {
                    className: "card_type",
                    children: O && _e(`detailed_bet_type.additional_result.${O}`)
                }), jsx(TeenPattiGameResults, {side: "player_b", results: E})]
            })]
        }), z && jsx("div", {className: "win_result", style: {"--color": z.color}, children: z.winner})]
    })
}, SiboResults = r => {
    const [R, y] = React.useState("");
    return React.useEffect(() => {
        if (!r.winResult) return;
        let E = r.winResult[0][0];
        y(E === "-1" ? "" : E)
    }, [r.winResult, r.gameResults, r.betState]), jsxs(Fragment, {
        children: [jsx("div", {className: "background sicbo"}), jsx("div", {
            className: "results sicbo",
            children: jsx("section", {
                id: "focused_result",
                children: jsx(SicboFocusedResult, {winResult: R, animate: !1})
            })
        })]
    })
}, HiloResults = r => {
    const [R, y] = React.useState("");
    return React.useEffect(() => {
        if (!r.winResult) return;
        if (r.winResult[0][0] === "-1") y(""); else {
            let C = r.winResult[1][0];
            y(C)
        }
    }, [r.winResult, r.gameResults, r.betState]), jsxs(Fragment, {
        children: [jsx("div", {className: "background hi_lo"}), jsx("div", {
            className: "results hi_lo",
            children: jsx("section", {
                id: "focused_result",
                children: jsx(HiLoFocusedResult, {winResult: R, animate: !1})
            })
        })]
    })
}, SictanResults = r => {
    const [R, y] = React.useState("");
    return React.useEffect(() => {
        if (!r.winResult) return;
        if (r.winResult[0][0] === "-1") y(""); else {
            let C = r.winResult[2][0];
            y(C)
        }
    }, [r.winResult, r.gameResults, r.betState]), jsxs(Fragment, {
        children: [jsx("div", {className: "background sictan"}), jsx("div", {
            className: "results sictan",
            children: jsx("section", {
                id: "focused_result",
                children: jsx(SictanFocusedResult, {winResult: R, animate: !1})
            })
        })]
    })
}, RouletteResults = r => {
    const [R, y] = React.useState();
    useTranslation();
    const [E, C] = React.useState(""), [x, B] = React.useState("");
    return React.useEffect(() => {
        if (!r.winResult) return;
        if (r.winResult[0][0] === "-1") C(""), B(""); else {
            let L = r.winResult[0][0], O = L.charCodeAt(0);
            O <= "9".charCodeAt(0) ? O = O - 48 : O <= "Z".charCodeAt(0) ? O -= 55 : O <= "n".charCodeAt(0) && (O -= 61);
            let D = String(O);
            B(D), C(L)
        }
    }, [r.winResult, r.gameResults, r.betState]), jsxs(Fragment, {
        children: [jsx("div", {className: "background hi_lo"}), jsxs("div", {
            className: "results roulette",
            children: [jsx("div", {className: "left"}), jsx("div", {
                className: "center",
                children: jsx("section", {
                    id: "focused_result",
                    children: x != "" && jsx(RoulettedFocusedResult, {winResult: x})
                })
            }), jsx("div", {className: "right"})]
        }), R && jsx("div", {className: "win_result", style: {"--color": R.color}, children: R.winner})]
    })
}, FPCResults = r => {
    const [R, y] = React.useState();
    useTranslation();
    const [E, C] = React.useState("");
    return React.useEffect(() => {
        if (!r.winResult) return;
        let x = r.winResult[0][0];
        C(x === "-1" ? "" : x)
    }, [r.winResult, r.gameResults, r.betState]), jsxs(Fragment, {
        children: [jsx("div", {className: "background fpc"}), jsxs("div", {
            className: "results fpc",
            children: [jsx("div", {className: "left"}), jsx("div", {
                className: "center",
                children: jsx("section", {
                    id: "focused_result",
                    children: jsx(FPCFocusedResult, {winResult: E, animate: !1})
                })
            }), jsx("div", {className: "right"})]
        }), R && jsx("div", {className: "win_result", style: {"--color": R.color}, children: R.winner})]
    })
}, AndarBaharResults = r => {
    const [R, y] = React.useState(), {t: E} = useTranslation(), [C, x] = React.useState(""), [B, N] = React.useState(r.fristCard || "-2"), [L, O] = React.useState([]), [D, z] = React.useState([]), [F, _e] = React.useState(0);
    return React.useEffect(() => {
        _e(L.concat(D).filter(Y => Number(Y) > 0).length)
    }, [L, D]), React.useEffect(() => {
        if (r.gameResults) {
            const Y = r.gameResults;
            Y[0][0] !== B && N(Y[0][0]), JSON.stringify(Y[1]) !== JSON.stringify(L) && (Y[1].some(H => H !== "-2"), O(Y[1].slice())), JSON.stringify(Y[2]) !== JSON.stringify(D) && (Y[2].some(H => H !== "-2"), z(Y[2].slice()))
        } else r.betState === BET_STATE.BETTING && (O([]), z([]))
    }, [r.gameResults]), React.useEffect(() => {
        if (!r.winResult) return;
        let Y = r.winResult[0][0];
        if (Y === "-1") x(""); else {
            const H = {0: E("bet_type.6201"), 1: E("bet_type.6202")}, me = {0: "0, 144, 255", 1: "255, 73, 73"};
            y({winner: H[Y[0]], color: me[Y[0]]}), x(Y)
        }
    }, [r.winResult, r.gameResults, r.betState]), React.useMemo(() => !R && F > 0, [R, F]), jsxs(Fragment, {
        children: [jsx("div", {className: "background andar_bahar"}), jsx("div", {
            className: "results andar_bahar", children: jsxs("div", {
                className: "multi_play_result_panel",
                children: [jsx("div", {
                    className: "andar blue",
                    "data-win": parseInt(C[0]) === ANDAR_BAHAR_BET_TYPE.ANDAR,
                    children: jsx("div", {
                        className: "title",
                        dangerouslySetInnerHTML: {__html: E(`bet_type.${BetType.AB_Andar}`)}
                    })
                }), jsx("div", {
                    className: "bahar red",
                    "data-win": parseInt(C[0]) === ANDAR_BAHAR_BET_TYPE.BAHAR,
                    children: jsx("div", {
                        className: "title",
                        dangerouslySetInnerHTML: {__html: E(`bet_type.${BetType.AB_Bahar}`)}
                    })
                }), jsx("div", {
                    className: "andar_card_results",
                    children: !L.includes("-2") && jsx(AndarBaharGameResults, {
                        side: "andar",
                        results: L,
                        isWinner: parseInt(C[0]) === ANDAR_BAHAR_BET_TYPE.ANDAR
                    })
                }), jsx("div", {
                    className: "bahar_card_results",
                    children: !D.includes("-2") && jsx(AndarBaharGameResults, {
                        side: "bahar",
                        results: D,
                        isWinner: parseInt(C[0]) === ANDAR_BAHAR_BET_TYPE.BAHAR
                    })
                }), jsx("div", {
                    id: "house_card_container",
                    "data-winner": C != "" ? parseInt(C[0]) === ANDAR_BAHAR_BET_TYPE.ANDAR ? "blue" : "red" : "",
                    children: B && B !== "-2" ? jsx("div", {
                        className: "house_card",
                        children: jsx(Poker$2, {value: parseInt(B)})
                    }) : jsx("div", {className: "house_card", id: "unopened_house_card", children: "?"})
                })]
            })
        }), jsx("div", {className: "andar_bahar_cards_dealt", children: `${E("bet_type.tips.cards_dealt")} ${F}`})]
    })
}, PokDengResults = r => {
    React.useState(), useTranslation();
    const [R, y] = React.useState(""), [E, C] = React.useState([{
        title: "P1",
        color: "blue",
        cards: [],
        cardType: void 0
    }, {title: "P2", color: "blue", cards: [], cardType: void 0}, {
        title: "P3",
        color: "blue",
        cards: [],
        cardType: void 0
    }, {title: "P4", color: "blue", cards: [], cardType: void 0}, {
        title: "P5",
        color: "blue",
        cards: [],
        cardType: void 0
    }]), [x, B] = React.useState({title: "", color: "red", cards: [], cardType: void 0});
    React.useEffect(() => {
        if (r.gameResults) {
            const L = r.gameResults;
            JSON.stringify(L[0]) !== JSON.stringify(x.cards) && (L[0].some(O => O !== "-2"), B(O => ({
                ...O,
                cards: L[0].slice()
            }))), C(O => O.map((D, z) => (JSON.stringify(L[z + 1]) !== JSON.stringify(D.cards) && (L[z + 1].some(F => F !== "-2"), D.cards = L[z + 1].slice()), D)))
        } else r.betState === BET_STATE.BETTING && (C(L => L.map((O, D) => (O.cards = [], O))), B(L => ({
            ...L,
            cards: []
        })))
    }, [r.gameResults]), React.useEffect(() => {
        if (R === "") B(L => ({...L, cardType: void 0})), C(L => L.map((O, D) => (O.cardType = void 0, O))); else {
            const L = O => {
                switch (O) {
                    case"8":
                        return "7.1";
                    case"9":
                        return "7.2";
                    case"A":
                        return "7.3";
                    case"B":
                        return "7.4";
                    case"C":
                        return "7.5";
                    case"D":
                        return "8";
                    case"E":
                        return "9";
                    default:
                        return O
                }
            };
            B(O => ({...O, cardType: L(R[0])})), C(O => O.map((D, z) => (D.cardType = L(R[3 * (z + 1)]), D)))
        }
    }, [R]), React.useEffect(() => {
        if (!r.winResult) return;
        let L = r.winResult[0][0];
        y(L === "-1" ? "" : L)
    }, [r.winResult]);
    const N = React.useCallback((L, O, D, z, F) => jsxs("div", {
        className: `card_display ${O}`,
        children: [jsx("div", {className: "svg_pokdeng_cards"}), D && jsx(PokdengGameResults, {results: D}), z && jsx("div", {
            className: "card_type",
            children: z
        }), !z && F && jsx("div", {className: "title", children: F})]
    }, L), []);
    return jsxs(Fragment, {
        children: [jsx("div", {className: "background pok_deng"}), jsxs("div", {
            className: "results pok_deng",
            children: [jsx("section", {
                className: "player",
                children: E.map((L, O) => N(O, "player", L.cards, L.cardType, L.title))
            }), jsx("section", {className: "banker", children: N(1, "banker", x.cards, x.cardType, x.title)})]
        })]
    })
}, BullBullResults = r => {
    const [R, y] = React.useState(), {t: E} = useTranslation(), [C, x] = React.useState(""), [B, N] = React.useState(), [L, O] = React.useState([{
        gridArea: "p1",
        color: "blue",
        cards: ["-2", "-2", "-2", "-2", "-2"],
        cardType: void 0
    }, {gridArea: "p2", color: "blue", cards: ["-2", "-2", "-2", "-2", "-2"], cardType: void 0}, {
        gridArea: "p3",
        color: "blue",
        cards: ["-2", "-2", "-2", "-2", "-2"],
        cardType: void 0
    }]), [D, z] = React.useState({gridArea: "b1", color: "red", cards: [], cardType: void 0});
    React.useEffect(() => {
        if (r.gameResults) {
            const _e = r.gameResults;
            _e[0][0] !== B && N(_e[0][0]), JSON.stringify(_e[1]) !== JSON.stringify(D.cards) && (_e[0].some(Y => Y !== "-2"), z(Y => ({
                ...Y,
                cards: _e[1].slice()
            }))), O(Y => Y.map((H, me) => (JSON.stringify(_e[me + 2]) !== JSON.stringify(H.cards) && (_e[me + 2].some(ce => ce !== "-2"), H.cards = _e[me + 2].slice()), H)))
        } else r.betState === BET_STATE.BETTING && (N(void 0), z(_e => ({
            ..._e,
            cards: []
        })), O(_e => _e.map((Y, H) => (Y.cards = ["-2", "-2", "-2", "-2", "-2"], Y))))
    }, [r.gameResults]), React.useEffect(() => {
        if (C === "") z(_e => ({..._e, cardType: void 0})), O(_e => _e.map((Y, H) => (Y.cardType = void 0, Y))); else {
            const _e = Y => {
                switch (Y) {
                    case"0":
                        return "no_bull";
                    case"A":
                        return "bull_bull";
                    case"B":
                        return "five_dukes";
                    default:
                        return `bull_${Y}`
                }
            };
            z(Y => ({
                ...Y,
                cardType: E(`detailed_bet_type.additional_result.${_e(C[1])}`)
            })), O(Y => Y.map((H, me) => (H.cardType = E(`detailed_bet_type.additional_result.${_e(C[me + 2])}`), H)))
        }
    }, [C]), React.useEffect(() => {
        if (r.winResult) {
            let _e = r.winResult[0][0];
            if (_e !== "-1") {
                const Y = {0: E("game_table.bullbull.player_allwin"), 1: E("game_table.bullbull.banker_allwin")},
                    H = {0: "0, 144, 255", 1: "255, 73, 73"};
                x(_e), y({winner: Y[_e[0]], color: H[_e[0]]})
            }
        } else y(void 0)
    }, [r.winResult]);
    const F = React.useCallback((_e, Y, H, me, ce, ie) => jsxs("div", {
        style: ce ? {gridArea: ce} : {},
        className: `card_display ${Y}`,
        children: [H.map((Be, ve) => Be !== "-2" ? jsx(Poker$2, {value: parseInt(Be)}, ve) : jsx("div", {}, ve)), me && jsx("div", {
            className: `card_type ${Y}`,
            children: me
        }), ie && jsx("div", {className: "title", children: ie})]
    }, _e), []);
    return jsxs(Fragment, {
        children: [jsx("div", {className: "background bull_bull"}), jsxs("div", {
            className: "results bull_bull",
            children: [jsxs("section", {
                className: "banker",
                children: [F(100, "banker", ["-2", "-2", B || "-2", "-2", "-2"], void 0, "f"), F(101, "banker", [], void 0, "nil"), F(102, "banker", D.cards, D.cardType, "b1", E("roadmap.bull_bull.game_table.banker"))]
            }), jsx("section", {
                className: "players",
                children: L.map((_e, Y) => F(Y, "player", _e.cards, _e.cardType, _e.gridArea))
            })]
        }), R && jsx("div", {className: "win_result bull_bull", style: {"--color": R.color}, children: R.winner})]
    })
}, XocDiaResults = ({gameResults: r, betState: R, winResult: y}) => {
    const [E, C] = React.useState(""), [x, B] = React.useState(), [N, L] = React.useState(), {t: O} = useTranslation();
    React.useEffect(() => {
        if (!y || y.length === 0) return;
        if (y[0][0] === "-1") C(""), B(void 0), L(void 0); else {
            let F = y[0][0];
            C(F), B(F[1] == "0" ? "odd" : "even"), L(F[0] == "0" ? "tie" : F[0] == "1" ? "small" : "big")
        }
    }, [y, r, R]);
    const D = React.useCallback(() => E ? jsxs("section", {
        id: "focused_result",
        children: [jsx(XocDiaCoinsSet, {value: XD_COIN_SET[`XD${E[2]}`]}), jsxs("div", {
            className: "result",
            children: [jsx("span", {
                className: `message left ${N}`,
                children: `${N ? O(`bet_type.${BetType[`XD_${Helper.capitalizeFirstCharacter(N)}`]}`) : ""}`
            }), jsx("span", {
                className: `message right ${x}`,
                children: `${x ? O(`bet_type.${BetType[`XD_${Helper.capitalizeFirstCharacter(x)}`]}`) : ""}`
            })]
        })]
    }) : null, [E, N, x, O]);
    return jsxs(Fragment, {
        children: [jsx("div", {className: "background xoc_dia"}), jsx("div", {
            className: "results xoc_dia",
            children: D()
        })]
    })
}, MultiHallBetAreas = "", BaccaratBetAreas = r => {
    const R = React.useContext(GameTableBetContext), y = useAvailableChips(),
        E = useBet(r.betAmounts, r.view, BACCARAT_BET_TYPE_MAP, R), {settings: C} = React.useContext(SettingsContext), [x, B] = React.useState(Object.values(BACCARAT_BET_TYPE).map(H => ({
            color: y[0].color,
            amount: Helper.formatAbbrMoney(r.betAmounts[H])
        }))), N = useChips({chipAttrs: x});
    useBetAmountUpdateChipEffect(r.betAmounts, r.pendingBetAmounts, x, B), usePayoutUpdateChipEffect(r.betAmounts, r.pendingBetAmounts, r.payouts, x, B);
    const L = useBetChip(r.payouts, r.betAmounts, r.pendingBetAmounts, N), [O, D] = React.useState(r.betAmounts[BACCARAT_BET_TYPE.BANKER] ? COMM_TYPE.COMM : r.betAmounts[BACCARAT_BET_TYPE.BANKER_NO_COMM] ? COMM_TYPE.NO_COMM : COMM_TYPE.NONE), [z, F] = React.useState(Object.fromEntries(Object.keys(BACCARAT_BET_TYPE).filter(H => !Number.isNaN(parseInt(H))).map(H => [H, !1]))), {t: _e} = useTranslation(),
        Y = Helper.useOdds();
    return React.useEffect(() => {
        D(r.betAmounts[BACCARAT_BET_TYPE.BANKER] ? COMM_TYPE.COMM : r.betAmounts[BACCARAT_BET_TYPE.BANKER_NO_COMM] ? COMM_TYPE.NO_COMM : COMM_TYPE.NONE)
    }, [r.betAmounts[BACCARAT_BET_TYPE.BANKER], r.betAmounts[BACCARAT_BET_TYPE.BANKER_NO_COMM]]), React.useEffect(() => {
        let H = Object.fromEntries(Object.keys(BACCARAT_BET_TYPE).filter(ce => !Number.isNaN(parseInt(ce))).map(ce => [ce, !1]));
        const me = {0: BACCARAT_BET_TYPE.TIE, 1: BACCARAT_BET_TYPE.BANKER, 2: BACCARAT_BET_TYPE.PLAYER};
        H[me[r.winResult[0]]] = !0, H[BACCARAT_BET_TYPE.BANKER_NO_COMM] = r.winResult[0] === "1", H[BACCARAT_BET_TYPE.B_PAIR] = ["1", "3", "4", "6"].includes(r.winResult[3]), H[BACCARAT_BET_TYPE.P_PAIR] = ["2", "3", "5", "6"].includes(r.winResult[3]), H[BACCARAT_BET_TYPE.EITHER_PAIR] = parseInt(r.winResult[3]) >= 1, H[BACCARAT_BET_TYPE.PERFECT_PAIR] = parseInt(r.winResult[3]) >= 4, H[BACCARAT_BET_TYPE.B_BONUS] = ["3", "4", "5", "6"].includes(r.winResult[4]), H[BACCARAT_BET_TYPE.P_BONUS] = ["7", "8"].includes(r.winResult[4]);
        for (const [ce, ie] of Object.entries(H)) ce !== "undefined" && ie && (r.roadMap.length >= SIDE_BET_LIMIT_30.rounds && SIDE_BET_LIMIT_30.betTypes.includes(BACCARAT_BET_TYPE_MAP[ce]) || r.roadMap.length >= SIDE_BET_LIMIT_50.rounds && SIDE_BET_LIMIT_50.betTypes.includes(BACCARAT_BET_TYPE_MAP[ce])) && (H[ce] = !1);
        F(H)
    }, [r.winResult]), jsxs("div", {
        className: `bet_areas ${r.view === BET_STATE.BETTING ? "betting" : "no_bet"} baccarat`,
        children: [jsxs("button", {
            className: "blue",
            style: {gridArea: "player"},
            onClick: () => E([BACCARAT_BET_TYPE.PLAYER]),
            "aria-checked": z[BACCARAT_BET_TYPE.PLAYER],
            "aria-disabled": r.disabled,
            children: [jsx("div", {
                className: "title",
                children: _e(`bet_type.${BetType.B_Player}`)
            }), jsx("div", {className: "odds", children: Y(1)}), jsx("div", {
                className: "bet_chips_container",
                children: L(BACCARAT_BET_TYPE.PLAYER)
            })]
        }), jsxs("button", {
            className: "green",
            style: {gridArea: "tie"},
            onClick: () => E([BACCARAT_BET_TYPE.TIE]),
            "aria-checked": z[BACCARAT_BET_TYPE.TIE],
            "aria-disabled": r.disabled,
            children: [jsx("div", {
                className: "title",
                children: _e(`bet_type.${BetType.B_Tie}`)
            }), jsx("div", {className: "odds", children: Y(8)}), jsx("div", {
                className: "bet_chips_container",
                children: L(BACCARAT_BET_TYPE.TIE)
            })]
        }), jsxs("button", {
            className: "red",
            style: {gridArea: "banker"},
            onClick: () => E([C.noCommission ? BACCARAT_BET_TYPE.BANKER_NO_COMM : BACCARAT_BET_TYPE.BANKER]),
            "aria-checked": z[BACCARAT_BET_TYPE.BANKER] || z[BACCARAT_BET_TYPE.BANKER_NO_COMM],
            "aria-disabled": r.disabled || !C.noCommission && O === COMM_TYPE.NO_COMM || C.noCommission && O === COMM_TYPE.COMM,
            disabled: r.disabled || !C.noCommission && O === COMM_TYPE.NO_COMM || C.noCommission && O === COMM_TYPE.COMM,
            children: [C.noCommission && jsx("div", {
                className: "no_comm_label",
                children: _e("game_table.baccarat.no_comm")
            }), jsx("div", {
                className: "title",
                children: _e(`bet_type.${C.noCommission ? BetType.B_BankNoComm : BetType.B_Banker}`)
            }), jsx("div", {
                className: "odds",
                children: Y(C.noCommission ? 1 : .95)
            }), jsxs("div", {
                className: "bet_chips_container",
                children: [" ", L(C.noCommission ? BACCARAT_BET_TYPE.BANKER_NO_COMM : BACCARAT_BET_TYPE.BANKER)]
            })]
        }), jsxs("button", {
            className: "blue bottom_left",
            style: {gridArea: "player_pair"},
            onClick: () => r.roadMap.length < SIDE_BET_LIMIT_50.rounds && E([BACCARAT_BET_TYPE.P_PAIR]),
            "aria-checked": z[BACCARAT_BET_TYPE.P_PAIR],
            "aria-disabled": r.disabled || r.roadMap.length >= SIDE_BET_LIMIT_50.rounds,
            children: [jsx("div", {
                className: "title",
                children: _e(`bet_type.${BetType.B_PPair}`)
            }), jsx("div", {className: "odds", children: Y(11)}), jsxs("div", {
                className: "bet_chips_container",
                children: [" ", L(BACCARAT_BET_TYPE.P_PAIR)]
            })]
        }), jsxs("button", {
            className: "red bottom_right",
            style: {gridArea: "banker_pair"},
            onClick: () => r.roadMap.length < SIDE_BET_LIMIT_50.rounds && E([BACCARAT_BET_TYPE.B_PAIR]),
            "aria-checked": z[BACCARAT_BET_TYPE.B_PAIR],
            "aria-disabled": r.disabled || r.roadMap.length >= SIDE_BET_LIMIT_50.rounds,
            children: [jsx("div", {
                className: "title",
                children: _e(`bet_type.${BetType.B_BPair}`)
            }), jsx("div", {className: "odds", children: Y(11)}), jsxs("div", {
                className: "bet_chips_container",
                children: [" ", L(BACCARAT_BET_TYPE.B_PAIR)]
            })]
        })]
    })
}, DragonTigerBetAreas = r => {
    const R = React.useContext(GameTableBetContext), y = useAvailableChips(),
        E = useBet(r.betAmounts, r.view, DRAGON_TIGER_BET_TYPE_MAP, R), [C, x] = React.useState(Object.values(DRAGON_TIGER_BET_TYPE).map(me => ({
            color: y[0].color,
            amount: Helper.formatAbbrMoney(r.betAmounts[me])
        }))), B = useChips({chipAttrs: C});
    useBetAmountUpdateChipEffect(r.betAmounts, r.pendingBetAmounts, C, x), usePayoutUpdateChipEffect(r.betAmounts, r.pendingBetAmounts, r.payouts, C, x);
    const N = useBetChip(r.payouts, r.betAmounts, r.pendingBetAmounts, B), {orientation: L} = useDeviceOrientation(), {t: O} = useTranslation(), [D, z] = React.useState(Object.fromEntries(Object.keys(DRAGON_TIGER_BET_TYPE).filter(me => !Number.isNaN(parseInt(me))).map(me => [me, !1]))),
        F = React.useContext(ScalableContainerScaleContext), _e = Helper.useOdds();
    React.useEffect(() => {
        let me = Object.fromEntries(Object.keys(DRAGON_TIGER_BET_TYPE).filter(ie => !Number.isNaN(parseInt(ie))).map(ie => [ie, !1]));
        const ce = {0: DRAGON_TIGER_BET_TYPE.TIE, 1: DRAGON_TIGER_BET_TYPE.DRAGON, 2: DRAGON_TIGER_BET_TYPE.TIGER};
        me[ce[r.winResult[0]]] = !0, z(me)
    }, [r.winResult]);
    const Y = React.useCallback((me, ce, ie, Be, ve, Re, Ce, Ne) => jsxs("button", {
        className: `${me} main_bet ${ie || ""}`,
        style: {gridArea: ce},
        onClick: () => E([ve]),
        "aria-checked": D[ve],
        children: [ce !== "tie" && jsx("div", {className: `svg_table_${ce}`}), jsxs("div", {
            className: "bet_area_info",
            children: [jsx("div", {className: "title", children: O(`bet_type.${Re}`)}), jsx("div", {
                className: "odds",
                children: _e(Ce)
            })]
        }), jsxs("div", {className: "bet_chips_container", children: [" ", N(ve)]})]
    }), [D, r.view, N, B, R, F, L]), H = React.useCallback(() => {
        switch (r.view) {
            case BET_STATE.BETTING:
                return "betting";
            case BET_STATE.NO_BET:
                return "no_bet"
        }
    }, [r.view]);
    return jsxs("div", {
        className: `bet_areas dragon_tiger_bet_table ${H()}`,
        children: [Y("red", "dragon", "bottom_left", "#FF9A8959", DRAGON_TIGER_BET_TYPE.DRAGON, BetType.DT_Dragon, 1), Y("green", "tie", "bottom_center", "#BCFF8959", DRAGON_TIGER_BET_TYPE.TIE, BetType.DT_Tie, 8), Y("blue", "tiger", "bottom_right", "#47B8FF59", DRAGON_TIGER_BET_TYPE.TIGER, BetType.DT_Tiger, 1)]
    })
}, Win3CardsBetAreas = r => {
    const {t: R} = useTranslation(), y = useAvailableChips(),
        E = React.useContext(GameTableBetContext), {isForceLandscape: C} = useDeviceOrientation(), [x, B] = React.useState(Object.values(WIN3CARDS_BET_TYPE).map(ve => ({
            color: y[0].color,
            amount: Helper.formatAbbrMoney(r.betAmounts[ve])
        }))), N = useChips({
            chipAttrs: x,
            flat: C && r.view === BET_STATE.NO_BET
        }), [L, O] = React.useState(), [D, z] = React.useState(), [F, _e] = React.useState(Object.fromEntries(Object.keys(WIN3CARDS_BET_TYPE).filter(ve => !Number.isNaN(parseInt(ve))).map(ve => [ve, !1]))),
        Y = Helper.useOdds(), H = React.useCallback(() => {
            switch (r.view) {
                case BET_STATE.BETTING:
                    return "betting";
                case BET_STATE.NO_BET:
                    return "no_bet"
            }
        }, [r.view]);
    useBetAmountUpdateChipEffect(r.betAmounts, r.pendingBetAmounts, x, B), usePayoutUpdateChipEffect(r.betAmounts, r.pendingBetAmounts, r.payouts, x, B);
    const me = useBet(r.betAmounts, r.view, WIN3CARDS_BET_TYPE_MAP, E),
        ce = useBetChip(r.payouts, r.betAmounts, r.pendingBetAmounts, N);
    React.useEffect(() => {
        let ve = Object.fromEntries(Object.keys(WIN3CARDS_BET_TYPE).filter(we => !Number.isNaN(parseInt(we))).map(we => [we, !1]));
        if (r.winResult === "") {
            _e(ve);
            return
        }
        const Re = (we, Me, ke) => {
            switch (Me) {
                case"1":
                    (parseInt(ke, 16) > 8 || parseInt(ke, 16) === 1) && (we[WIN3CARDS_BET_TYPE.PAIR_8_PLUS] = !0);
                    break;
                case"2":
                    we[WIN3CARDS_BET_TYPE.STRAIGHT] = !0, we[WIN3CARDS_BET_TYPE.PAIR_8_PLUS] = !0;
                    break;
                case"3":
                    we[WIN3CARDS_BET_TYPE.FLUSH] = !0, we[WIN3CARDS_BET_TYPE.PAIR_8_PLUS] = !0;
                    break;
                case"4":
                    we[WIN3CARDS_BET_TYPE.STRAIGHT_FLUSH] = !0, we[WIN3CARDS_BET_TYPE.PAIR_8_PLUS] = !0;
                    break;
                case"5":
                    we[WIN3CARDS_BET_TYPE.THREE_OF_A_KIND] = !0, we[WIN3CARDS_BET_TYPE.PAIR_8_PLUS] = !0;
                    break
            }
            return we
        }, Ce = {1: WIN3CARDS_BET_TYPE.DRAGON, 2: WIN3CARDS_BET_TYPE.PHOENIX}, Ne = r.winResult[0];
        Ne !== "0" && (ve[Ce[Ne]] = !0, Ne === "1" ? ve = Re(Object.assign({}, ve), r.winResult[1], r.winResult[2]) : ve = Re(Object.assign({}, ve), r.winResult[3], r.winResult[4])), _e(ve)
    }, [r.winResult]);
    const ie = React.useCallback((ve, Re, Ce, Ne, we, Me, ke, Fe, $e) => jsxs("button", {
        className: `${ve} main_bet ${Ce || ""}`,
        style: {gridArea: Re},
        onClick: () => me([we]),
        "aria-checked": F[we],
        children: [jsx("div", {className: `svg_table_${Re}`}), jsxs("div", {
            className: "bet_area_info",
            children: [jsx("div", {className: "title", children: R(`bet_type.${Me}`)}), jsx("div", {
                className: "odds",
                children: Y(ke)
            })]
        }), jsxs("div", {className: "bet_chips_container", children: [" ", ce(we)]})]
    }), [F, r.view, ce, N, E, me]), Be = React.useCallback((ve, Re, Ce, Ne, we) => jsxs("button", {
        className: "yellow bottom_center",
        style: {gridArea: ve},
        onClick: () => me([Re]),
        "aria-checked": F[Re],
        children: [jsx("div", {className: "title", children: R(`bet_type.${Ce}`)}), jsx("div", {
            className: "odds",
            children: Y(Ne)
        }), jsxs("div", {className: "bet_chips_container", children: [" ", ce(Re)]})]
    }), [F, r.view, ce, N, E, me, R, Y]);
    return jsxs("div", {
        className: `bet_areas win3cards_bet_table ${H()}`,
        children: [ie("blue", "dragon", "bottom_left", "#47B8FF59", WIN3CARDS_BET_TYPE.DRAGON, BetType.WC_Dragon, .95, [], L), Be("three_of_a_kind", WIN3CARDS_BET_TYPE.THREE_OF_A_KIND, BetType.WC_ThreeOfAKind, 120), Be("straight_flush", WIN3CARDS_BET_TYPE.STRAIGHT_FLUSH, BetType.WC_StraightFlush, 100), Be("flush", WIN3CARDS_BET_TYPE.FLUSH, BetType.WC_Flush, 8), Be("pair_8_plus", WIN3CARDS_BET_TYPE.PAIR_8_PLUS, BetType.WC_Pair8Plus, 2, R(`bet_type.tips.${BetType.WC_Pair8Plus}`)), Be("straight", WIN3CARDS_BET_TYPE.STRAIGHT, BetType.WC_Straight, 7), ie("red", "phoenix", "bottom_right", "#FF9A8959", WIN3CARDS_BET_TYPE.PHOENIX, BetType.WC_Phoenix, .95, [], D)]
    })
}, ThreePictureBetAreas = r => {
    const {t: R} = useTranslation(), y = useAvailableChips(), E = React.useContext(GameTableBetContext), {
            orientation: C,
            isForceLandscape: x
        } = useDeviceOrientation(), [B, N] = React.useState(Object.values(THREE_PICTURES_BET_TYPE).map(Ce => ({
            color: y[0].color,
            amount: Helper.formatAbbrMoney(r.betAmounts[Ce])
        }))), L = useChips({chipAttrs: B, flat: x && r.view === BET_STATE.NO_BET}),
        O = React.useContext(ScalableContainerScaleContext), [D, z] = React.useState(), [F, _e] = React.useState(), [Y, H] = React.useState(Object.fromEntries(Object.keys(THREE_PICTURES_BET_TYPE).filter(Ce => !Number.isNaN(parseInt(Ce))).map(Ce => [Ce, !1]))),
        me = Helper.useOdds(), ce = React.useCallback(() => {
            switch (r.view) {
                case BET_STATE.BETTING:
                    return "betting";
                case BET_STATE.NO_BET:
                    return "no_bet"
            }
        }, [r.view]);
    useBetAmountUpdateChipEffect(r.betAmounts, r.pendingBetAmounts, B, N), usePayoutUpdateChipEffect(r.betAmounts, r.pendingBetAmounts, r.payouts, B, N);
    const ie = useBet(r.betAmounts, r.view, THREE_PICTURES_BET_TYPE_MAP, E),
        Be = useBetChip(r.payouts, r.betAmounts, r.pendingBetAmounts, L);
    React.useEffect(() => {
        let Ce = Object.fromEntries(Object.keys(THREE_PICTURES_BET_TYPE).filter(we => !Number.isNaN(parseInt(we))).map(we => [we, !1]));
        const Ne = {
            0: THREE_PICTURES_BET_TYPE.TIE,
            1: THREE_PICTURES_BET_TYPE.DRAGON,
            2: THREE_PICTURES_BET_TYPE.PHOENIX
        };
        Ce[Ne[r.winResult[0]]] = !0, r.winResult[1] === "3" && (Ce[THREE_PICTURES_BET_TYPE.DRAGON_THREE_PICTURES] = !0), r.winResult[3] === "3" && (Ce[THREE_PICTURES_BET_TYPE.PHOENIX_THREE_PICTURES] = !0), H(Ce)
    }, [r.winResult]);
    const ve = React.useCallback((Ce, Ne, we, Me, ke, Fe, $e, Ve, Je, Qe) => jsxs("button", {
        className: `${Ce}${we ? " main_bet" : ""} ${Ne || ""}`,
        style: {gridArea: Me},
        onClick: () => ie([Fe]),
        "aria-checked": Y[Fe],
        children: [Me !== "tie" && jsx("div", {
            className: "clip",
            children: jsx("div", {className: `svg_table_${Me}`})
        }), jsxs("div", {
            className: "bet_area_info",
            children: [jsx("div", {className: "title", children: R(`bet_type.${$e}`)}), jsx("div", {
                className: "odds",
                children: me(Ve)
            })]
        }), jsxs("div", {className: "bet_chips_container", children: [" ", Be(Fe)]})]
    }), [Y, r.view, Be, L, E, ie, O, C]), Re = React.useCallback((Ce, Ne, we, Me, ke, Fe) => jsxs("button", {
        className: `${Ce} ${Ne || ""}`,
        style: {gridArea: we},
        onClick: () => ie([Me]),
        "aria-checked": Y[Me],
        children: [jsx("div", {className: "title", children: R(`bet_type.${ke}`)}), jsx("div", {
            className: "odds",
            children: me(Fe)
        }), jsxs("div", {className: "bet_chips_container", children: [" ", Be(Me)]})]
    }), [Y, r.view, Be, L, E, ie, O, R, me]);
    return jsxs("div", {
        className: `bet_areas three_pictures_bet_table ${ce()}`,
        children: [Re("blue", "", "dragon_three_pictures", THREE_PICTURES_BET_TYPE.DRAGON_THREE_PICTURES, BetType.TP_DragonThreePictures, 70), ve("green", "", !1, "tie", "#BCFF8959", THREE_PICTURES_BET_TYPE.TIE, BetType.TP_Tie, 24), ve("blue", "bottom_left", !0, "dragon", "#47B8FF59", THREE_PICTURES_BET_TYPE.DRAGON, BetType.TP_Dragon, 1, D), ve("red", "bottom_right", !0, "phoenix", "#FF9A8959", THREE_PICTURES_BET_TYPE.PHOENIX, BetType.TP_Phoenix, 1, F), Re("red", "", "phoenix_three_pictures", THREE_PICTURES_BET_TYPE.PHOENIX_THREE_PICTURES, BetType.TP_PhoenixThreePictures, 70)]
    })
}, TeenPattiBetAreas = r => {
    const R = React.useContext(GameTableBetContext), y = useAvailableChips(), {t: E} = useTranslation(),
        C = r.pendingBetAmounts, {orientation: x} = useDeviceOrientation(), [B, N] = React.useState(Object.values(TEEN_PATTI_BET_TYPE).map(Ne => ({
            color: y[0].color,
            amount: Helper.formatAbbrMoney(r.betAmounts[Ne])
        }))), {isForceLandscape: L} = useDeviceOrientation(), O = useChips({
            chipAttrs: B,
            flat: L && r.view === BET_STATE.NO_BET
        }), [D, z] = React.useState(), [F, _e] = React.useState(),
        Y = React.useContext(ScalableContainerScaleContext), [H, me] = React.useState(Object.fromEntries(Object.keys(TEEN_PATTI_BET_TYPE).filter(Ne => !Number.isNaN(parseInt(Ne))).map(Ne => [Ne, !1]))),
        ce = Helper.useOdds(), ie = React.useCallback(() => {
            switch (r.view) {
                case BET_STATE.BETTING:
                    return "betting";
                case BET_STATE.NO_BET:
                    return "no_bet"
            }
        }, [r.view]);
    React.useEffect(() => {
        let Ne = Object.fromEntries(Object.keys(TEEN_PATTI_BET_TYPE).filter(Me => !Number.isNaN(parseInt(Me))).map(Me => [Me, !1]));
        if (r.winResult == "-1") {
            me(Ne);
            return
        }
        const we = {0: TEEN_PATTI_BET_TYPE.TIE, 1: TEEN_PATTI_BET_TYPE.PLAYER_A, 2: TEEN_PATTI_BET_TYPE.PLAYER_B};
        r.winResult[0] == "0" && (Ne[we[r.winResult[0]]] = !0), parseInt(r.winResult[1]) >= 1 && (Ne[TEEN_PATTI_BET_TYPE.PLAYER_A_PAIR_PLUS] = !0), parseInt(r.winResult[2]) >= 1 && (Ne[TEEN_PATTI_BET_TYPE.PLAYER_B_PAIR_PLUS] = !0), r.winResult[3] && r.winResult[3] !== "0" && (Ne[TEEN_PATTI_BET_TYPE.SIX_CARD_BONUS] = !0), me(Ne)
    }, [r.winResult]), useBetAmountUpdateChipEffect(r.betAmounts, C, B, N), usePayoutUpdateChipEffect(r.betAmounts, r.pendingBetAmounts, r.payouts, B, N);
    const Be = useBet(r.betAmounts, r.view, TEEN_PATTI_BET_TYPE_MAP, R), ve = useBetChip(r.payouts, r.betAmounts, C, O),
        Re = React.useCallback((Ne, we, Me, ke, Fe, $e, Ve, Je, Qe, Ze) => jsxs("button", {
            className: `${Ne}${Me ? " main_bet" : ""} ${we || ""}`,
            style: {gridArea: ke},
            onClick: () => Be([$e]),
            "aria-checked": H[$e],
            children: [jsxs("div", {
                className: "bet_area_info",
                children: [jsx("div", {
                    className: "title",
                    children: E(`bet_type.${Ve}`)
                }), jsx("div", {className: "odds", children: ce(Je)})]
            }), jsx("div", {className: "bet_chips_container", children: ve($e)})]
        }), [H, r.view, ve, O, R, Y, x, E, ce]), Ce = React.useCallback((Ne, we, Me, ke, Fe) => jsxs("button", {
            className: Ne,
            style: {gridArea: we},
            onClick: () => Be([Me]),
            "aria-checked": H[Me],
            children: [jsxs("div", {
                className: "bet_area_info",
                children: [jsx("div", {className: "title", children: E(`bet_type.${Fe}`)}), jsx("div", {
                    className: "odds",
                    children: E("game_table.teen_patti.pair_plus")
                })]
            }), jsx("div", {className: "bet_chips_container", children: ve(Me)})]
        }), [H, r.view, ve, O, R, Be, Y, x, E, ce]);
    return jsxs("div", {
        className: `bet_areas teen_patti_bet_table ${ie()}`,
        children: [Re("blue", "bottom_left", !0, "player_a", "#47B8FF59", TEEN_PATTI_BET_TYPE.PLAYER_A, BetType.TPa_PlayerA, .95, [], D), Ce("blue", "player_a_pair_plus", TEEN_PATTI_BET_TYPE.PLAYER_A_PAIR_PLUS, BetType.TPa_PlayerAPairPlus, BetType.TPa_PlayerA), Re("green", "", !1, "tie", "#BCFF8959", TEEN_PATTI_BET_TYPE.TIE, BetType.TPa_Tie, 50), jsxs("button", {
            className: "yellow six_card_bonus",
            style: {gridArea: "six_card_bonus"},
            onClick: () => Be([TEEN_PATTI_BET_TYPE.SIX_CARD_BONUS]),
            "aria-checked": H[TEEN_PATTI_BET_TYPE.SIX_CARD_BONUS],
            children: [jsx("div", {
                className: "title",
                children: E(`bet_type.${BetType.TPa_SixCardsBonus}`)
            }), jsxs("div", {
                className: "bet_chips_container",
                children: [" ", ve(TEEN_PATTI_BET_TYPE.SIX_CARD_BONUS)]
            })]
        }), Ce("red", "player_b_pair_plus", TEEN_PATTI_BET_TYPE.PLAYER_B_PAIR_PLUS, BetType.TPa_PlayerBPairPlus, BetType.TPa_PlayerB), Re("red", "bottom_right", !0, "player_b", "#FF9A8959", TEEN_PATTI_BET_TYPE.PLAYER_B, BetType.TPa_PlayerB, .95, [], F)]
    })
}, SicboBetAreas = r => {
    const {t: R} = useTranslation(), y = useAvailableChips(), E = React.useContext(GameTableBetContext), {
            orientation: C,
            isForceLandscape: x
        } = useDeviceOrientation(), [B, N] = React.useState(Object.values(SICBO_BET_TYPE).map(Re => ({
            color: y[0].color,
            amount: Helper.formatAbbrMoney(r.betAmounts[Re])
        }))), L = useChips({chipAttrs: B, flat: x && r.view === BET_STATE.NO_BET}),
        O = React.useContext(ScalableContainerScaleContext), [D, z] = React.useState(), [F, _e] = React.useState(), [Y, H] = React.useState(Object.fromEntries(Object.keys(SICBO_BET_TYPE).filter(Re => !Number.isNaN(parseInt(Re))).map(Re => [Re, !1]))),
        me = Helper.useOdds(), ce = React.useCallback(() => {
            let Re = [];
            switch (r.view) {
                case BET_STATE.BETTING:
                    Re.push("betting");
                    break;
                case BET_STATE.NO_BET:
                    Re.push("no_bet");
                    break
            }
            return Re.push("show_bet_amount"), Re.join(" ")
        }, [r.view]);
    useBetAmountUpdateChipEffect(r.betAmounts, r.pendingBetAmounts, B, N), usePayoutUpdateChipEffect(r.betAmounts, r.pendingBetAmounts, r.payouts, B, N);
    const ie = useBet(r.betAmounts, r.view, SICBO_BET_TYPE_MAP, E),
        Be = useBetChip(r.payouts, r.betAmounts, r.pendingBetAmounts, L);
    React.useEffect(() => {
        let Re = Object.fromEntries(Object.keys(SICBO_BET_TYPE).filter(Ce => !Number.isNaN(parseInt(Ce))).map(Ce => [Ce, !1]));
        if (r.winResult == "-1") {
            H(Re);
            return
        }
        if (r.winResult !== "") {
            const Ce = `SUM_${parseInt(r.winResult[0], 19)}`;
            let Ne = Array.from(new Set(r.winResult.slice(1, 4))).sort();
            Re[SICBO_BET_TYPE[Ce]] = !0;
            for (let we = 0; we < Ne.length; we++) {
                Re[SICBO_BET_TYPE[`SINGLE_${Ne[we]}`]] = !0;
                for (let Me = we + 1; Me < Ne.length; Me++) Re[SICBO_BET_TYPE[`FORMAT_${Ne[we]}${Ne[Me]}`]] = !0;
                Re[SICBO_BET_TYPE[`PAIR_${Ne[we]}`]] = r.winResult.slice(1, 4).split("").filter(Me => Me === Ne[we]).length === 2, Re[SICBO_BET_TYPE[`TRIPLE_${Ne[we]}`]] = r.winResult.slice(1, 4).split("").filter(Me => Me === Ne[we]).length === 3
            }
            Re[SICBO_BET_TYPE.TRIPLE] = Ne.length === 1, Re[SICBO_BET_TYPE.SMALL] = ["1", "2"].includes(r.winResult[4]), Re[SICBO_BET_TYPE.BIG] = ["3", "4"].includes(r.winResult[4]), Re[SICBO_BET_TYPE.ODD] = ["1", "3"].includes(r.winResult[4]), Re[SICBO_BET_TYPE.EVEN] = ["2", "4"].includes(r.winResult[4])
        }
        H(Re)
    }, [r.winResult]);
    const ve = React.useCallback((Re, Ce, Ne, we, Me, ke, Fe, $e, Ve, Je) => jsxs("button", {
        className: `${Re} ${Ce || ""}`,
        style: {gridArea: we},
        onClick: () => ie([ke]),
        "aria-checked": Y[ke],
        children: [jsxs("div", {
            className: "bet_area_info",
            children: [jsx("div", {className: "title", children: R(`bet_type.${Fe}`)}), jsx("div", {
                className: "odds",
                children: me($e)
            })]
        }), jsxs("div", {className: "bet_chips_container", children: [" ", Be(ke)]})]
    }), [Y, r.view, Be, L, E, O, C]);
    return jsxs("div", {
        className: `bet_areas mult_sicbo_bet_table ${ce()}`,
        children: [ve("blue", "", !0, "small", "#47B8FF59", SICBO_BET_TYPE.SMALL, BetType.S_Small, 1, D), ve("red", "", !0, "big", "#47B8FF59", SICBO_BET_TYPE.BIG, BetType.S_Big, 1, D), ve("green", "bottom_left", !0, "odd", "#47B8FF59", SICBO_BET_TYPE.ODD, BetType.S_Odd, 1, D), ve("green", "", !1, "any_triple", "#BCFF8959", SICBO_BET_TYPE.TRIPLE, BetType.S_Triple, 24), ve("green", "bottom_right", !0, "even", "#FF9A8959", SICBO_BET_TYPE.EVEN, BetType.S_Even, 1, F)]
    })
}, HiloBetAreas = r => {
    const {t: R} = useTranslation(), y = useAvailableChips(), E = React.useContext(GameTableBetContext), {
            orientation: C,
            isForceLandscape: x
        } = useDeviceOrientation(), [B, N] = React.useState(Object.values(HI_LO_BET_TYPE).map(Ce => ({
            color: y[0].color,
            amount: Helper.formatAbbrMoney(r.betAmounts[Ce])
        }))), L = useChips({chipAttrs: B, flat: x && r.view === BET_STATE.NO_BET}),
        O = React.useContext(ScalableContainerScaleContext), [D, z] = React.useState(), [F, _e] = React.useState(), [Y, H] = React.useState(Object.fromEntries(Object.keys(HI_LO_BET_TYPE).filter(Ce => !Number.isNaN(parseInt(Ce))).map(Ce => [Ce, !1]))),
        me = Helper.useOdds(), ce = React.useCallback(() => {
            let Ce = [];
            switch (r.view) {
                case BET_STATE.BETTING:
                    Ce.push("betting");
                    break;
                case BET_STATE.NO_BET:
                    Ce.push("no_bet");
                    break
            }
            return Ce.push("show_bet_amount"), Ce.join(" ")
        }, [r.view]);
    useBetAmountUpdateChipEffect(r.betAmounts, r.pendingBetAmounts, B, N), usePayoutUpdateChipEffect(r.betAmounts, r.pendingBetAmounts, r.payouts, B, N);
    const ie = useBet(r.betAmounts, r.view, HI_LO_BET_TYPE_MAP, E),
        Be = useBetChip(r.payouts, r.betAmounts, r.pendingBetAmounts, L);
    React.useEffect(() => {
        let Ce = Object.fromEntries(Object.keys(HI_LO_BET_TYPE).filter(Ne => !Number.isNaN(parseInt(Ne))).map(Ne => [Ne, !1]));
        if (r.winResult == "-1") {
            H(Ce);
            return
        }
        if (r.winResult !== "") {
            let Ne = Array.from(new Set(r.winResult.slice(1, 4))).sort();
            for (let Me = 0; Me < Ne.length; Me++) {
                Ce[HI_LO_BET_TYPE[`SINGLE_${Ne[Me]}`]] = !0;
                for (let ke = Me + 1; ke < Ne.length; ke++) Ce[HI_LO_BET_TYPE[`FORMAT_${Ne[Me]}${Ne[ke]}`]] = !0
            }
            Ce[HI_LO_BET_TYPE.FORMAT_123] = JSON.stringify(Ne) === JSON.stringify(["1", "2", "3"]), Ce[HI_LO_BET_TYPE.FORMAT_456] = JSON.stringify(Ne) === JSON.stringify(["4", "5", "6"]);
            const we = r.winResult[4] === "1" ? "LO" : r.winResult[4] === "3" ? "HI" : "HILO";
            we === "HILO" ? Ce[HI_LO_BET_TYPE.HILO] = !0 : (Ce[HI_LO_BET_TYPE[we]] = !0, we === "LO" && (Ce[HI_LO_BET_TYPE[`${we}_1`]] = Ne.includes("1"), Ce[HI_LO_BET_TYPE[`${we}_2`]] = Ne.includes("2")), Ce[HI_LO_BET_TYPE[`${we}_3`]] = Ne.includes("3"), Ce[HI_LO_BET_TYPE[`${we}_4`]] = Ne.includes("4"), Ce[HI_LO_BET_TYPE[`${we}_5`]] = Ne.includes("5"), Ce[HI_LO_BET_TYPE[`${we}_6`]] = Ne.includes("6"))
        }
        H(Ce)
    }, [r.winResult]);
    const ve = React.useCallback(() => {
        const Ce = HI_LO_BET_TYPE.HILO;
        return jsxs("button", {
            className: "hi_lo green",
            style: {gridArea: "hi_lo"},
            onClick: () => ie([Ce]),
            "aria-checked": Y[Ce],
            children: [jsx("div", {
                className: "hi",
                children: R(`bet_type.${HI_LO_BET_TYPE_MAP[HI_LO_BET_TYPE.HI]}`)
            }), jsx("div", {className: "hi_lo_11", children: "11"}), jsx("div", {
                className: "lo",
                children: R(`bet_type.${HI_LO_BET_TYPE_MAP[HI_LO_BET_TYPE.LO]}`)
            }), jsxs("div", {className: "bet_chips_container", children: [" ", Be(Ce)]})]
        })
    }, [Y, r.view, E, Be, R, me]), Re = React.useCallback((Ce, Ne, we, Me, ke, Fe, $e, Ve, Je, Qe) => jsxs("button", {
        className: `${Ce} ${Ne || ""}`,
        style: {gridArea: Me},
        onClick: () => ie([Fe]),
        "aria-checked": Y[Fe],
        children: [jsxs("div", {
            className: "bet_area_info",
            children: [jsx("div", {className: "range", children: Ve}), jsx("div", {
                className: "title",
                children: R(`bet_type.${$e}`)
            })]
        }), jsxs("div", {className: "bet_chips_container", children: [" ", Be(Fe)]})]
    }), [Y, r.view, Be, L, E, O, C]);
    return jsxs("div", {
        className: `bet_areas mult_hilo_bet_table ${ce()}`,
        children: [Re("green", "bottom_left lo", !0, "lo", "#47B8FF59", HI_LO_BET_TYPE.LO, BetType.HL_Lo, "(3-10)", D), ve(), Re("green", "bottom_right hi", !0, "hi", "#FF9A8959", HI_LO_BET_TYPE.HI, BetType.HL_Hi, "(12-18)", F)]
    })
}, SictanBetAreas = r => {
    const {t: R} = useTranslation(), y = useAvailableChips(), E = React.useContext(GameTableBetContext), {
            orientation: C,
            isForceLandscape: x
        } = useDeviceOrientation(), [B, N] = React.useState(Object.values(SICTAN_BET_TYPE).map(ie => ({
            color: y[0].color,
            amount: Helper.formatAbbrMoney(r.betAmounts[ie])
        }))), L = useChips({chipAttrs: B, flat: x && r.view === BET_STATE.NO_BET}),
        O = React.useContext(ScalableContainerScaleContext), [D, z] = React.useState(Object.fromEntries(Object.keys(SICTAN_BET_TYPE).filter(ie => !Number.isNaN(parseInt(ie))).map(ie => [ie, !1]))),
        F = Helper.useOdds(), _e = React.useCallback(() => {
            let ie = [];
            switch (r.view) {
                case BET_STATE.BETTING:
                    ie.push("betting");
                    break;
                case BET_STATE.NO_BET:
                    ie.push("no_bet");
                    break
            }
            return ie.push("show_bet_amount"), ie.join(" ")
        }, [r.view]);
    useBetAmountUpdateChipEffect(r.betAmounts, r.pendingBetAmounts, B, N), usePayoutUpdateChipEffect(r.betAmounts, r.pendingBetAmounts, r.payouts, B, N);
    const Y = useBet(r.betAmounts, r.view, SICTAN_BET_TYPE_MAP, E),
        H = useBetChip(r.payouts, r.betAmounts, r.pendingBetAmounts, L);
    React.useEffect(() => {
        let ie = Object.fromEntries(Object.keys(SICTAN_BET_TYPE).filter(Be => !Number.isNaN(parseInt(Be))).map(Be => [Be, !1]));
        if (r.winResult == "-1") {
            z(ie);
            return
        }
        r.winResult !== "" && (ie[SICTAN_BET_TYPE[`FAN_${r.winResult[5]}`]] = !0, ie[SICTAN_BET_TYPE.ODD] = parseInt(r.winResult[4]) === 1, ie[SICTAN_BET_TYPE.EVEN] = parseInt(r.winResult[4]) === 2), z(ie)
    }, [r.winResult]);
    const me = React.useCallback((ie, Be) => jsxs("button", {
        className: "oe green",
        style: {gridArea: ie},
        onClick: () => Y([Be]),
        "aria-checked": D[Be],
        children: [jsx("div", {
            className: ie,
            children: R(`bet_type.${SICTAN_BET_TYPE_MAP[Be]}`)
        }), jsx("div", {className: "odds", children: F(.95)}), jsxs("div", {
            className: "bet_chips_container",
            children: [" ", H(Be)]
        })]
    }), [D, r.view, E, H, R, F]), ce = React.useCallback((ie, Be, ve) => {
        const Re = {
            fan_1: {
                viewBox: "0 0 597.278 63.225",
                path: "M597.278,63.225 L2.242,63.225 l 0,0 L128.808,0 l 342.834,0 Z"
            },
            fan_2: {viewBox: "0 0 125.129 197.41", path: "M125.129,192.41 L0,130.901 L0,69.352 L125.129,5 Z"},
            fan_3: {viewBox: "0 0 597.278 63.225", path: "M 0,0 L 597.278,0 l 0,0 L 470.47,63.225 l -342.834,0 Z"},
            fan_4: {viewBox: "0 0 125.129 197.41", path: "M0,5 L125.129,69.352 L125.129,130.901 L0,192.41 Z"}
        };
        return jsxs("div", {
            className: `fan fan_${ie}`,
            style: {gridArea: `${ve[0]} / ${ve[0]} / ${ve[1]} / ${ve[1]}`},
            "aria-checked": D[Be],
            children: [jsx("svg", {
                viewBox: Re[`fan_${ie}`].viewBox,
                preserveAspectRatio: "none",
                children: jsx("path", {d: Re[`fan_${ie}`].path, strokeWidth: "1", onClick: () => Y([Be])})
            }), jsx("div", {
                className: "title",
                children: R(`bet_type.${SICTAN_BET_TYPE_MAP[Be]}`)
            }), jsx("div", {
                className: "odds",
                children: F(2.85)
            }), r.view === BET_STATE.NO_BET && !D[Be] && jsx("svg", {
                className: "no_bet_cover",
                viewBox: Re[`fan_${ie}`].viewBox,
                preserveAspectRatio: "none",
                children: jsx("path", {d: Re[`fan_${ie}`].path, fill: "#0009"})
            }), H(Be)]
        })
    }, [D, r.view, H, L, E, O, C]);
    return jsxs("div", {
        className: `bet_areas mult_sictan_bet_table ${_e()}`,
        children: [ce(1, SICTAN_BET_TYPE.FAN_1, ["bottom_left", "bottom_right"]), ce(2, SICTAN_BET_TYPE.FAN_2, ["top_right", "bottom_right"]), ce(3, SICTAN_BET_TYPE.FAN_3, ["top_left", "top_right"]), ce(4, SICTAN_BET_TYPE.FAN_4, ["top_left", "bottom_left"]), me("odd", SICTAN_BET_TYPE.ODD), me("even", SICTAN_BET_TYPE.EVEN)]
    })
}, RouletteBetAreas = r => {
    const {t: R} = useTranslation(), y = useAvailableChips(), E = React.useContext(GameTableBetContext), {
            orientation: C,
            isForceLandscape: x
        } = useDeviceOrientation(), [B, N] = React.useState(Object.values(ROULETTE_BET_TYPE).map(ie => ({
            color: y[0].color,
            amount: Helper.formatAbbrMoney(r.betAmounts[ie])
        }))), L = useChips({chipAttrs: B, flat: x && r.view === BET_STATE.NO_BET}),
        O = React.useContext(ScalableContainerScaleContext), [D, z] = React.useState(Object.fromEntries(Object.keys(ROULETTE_BET_TYPE).filter(ie => !Number.isNaN(parseInt(ie))).map(ie => [ie, !1]))),
        F = React.useCallback(() => {
            let ie = [];
            switch (r.view) {
                case BET_STATE.BETTING:
                    ie.push("betting");
                    break;
                case BET_STATE.NO_BET:
                    ie.push("no_bet");
                    break
            }
            return ie.push("show_bet_amount"), ie.join(" ")
        }, [r.view]);
    useBetAmountUpdateChipEffect(r.betAmounts, r.pendingBetAmounts, B, N), usePayoutUpdateChipEffect(r.betAmounts, r.pendingBetAmounts, r.payouts, B, N);
    const _e = useBet(r.betAmounts, r.view, ROULETTE_BET_TYPE_MAP, E),
        Y = useBetChip(r.payouts, r.betAmounts, r.pendingBetAmounts, L);
    React.useEffect(() => {
        let ie = Object.fromEntries(Object.keys(ROULETTE_BET_TYPE).filter(Be => !Number.isNaN(parseInt(Be))).map(Be => [Be, !1]));
        if (r.winResult == "-1") {
            z(ie);
            return
        }
        if (r.winResult !== "") {
            let Be = r.winResult[0].charCodeAt(0);
            Be <= "9".charCodeAt(0) ? Be = Be - 48 : Be <= "Z".charCodeAt(0) ? Be -= 55 : Be <= "n".charCodeAt(0) && (Be -= 61), ie[Be + ROULETTE_BET_TYPE.DIRECT_0] = !0, ie[ROULETTE_BET_TYPE.SMALL] = ["1", "2"].includes(r.winResult[1]), ie[ROULETTE_BET_TYPE.BIG] = ["3", "4"].includes(r.winResult[1]), ie[ROULETTE_BET_TYPE.EVEN] = ["2", "4"].includes(r.winResult[1]), ie[ROULETTE_BET_TYPE.ODD] = ["1", "3"].includes(r.winResult[1]), ie[ROULETTE_BET_TYPE.DOZEN_1_12] = ["1", "2", "3"].includes(r.winResult[2]), ie[ROULETTE_BET_TYPE.DOZEN_13_24] = ["4", "5", "6"].includes(r.winResult[2]), ie[ROULETTE_BET_TYPE.DOZEN_25_36] = ["7", "8", "9"].includes(r.winResult[2]), ie[ROULETTE_BET_TYPE.COLUMN_1] = ["1", "4", "7"].includes(r.winResult[2]), ie[ROULETTE_BET_TYPE.COLUMN_2] = ["2", "5", "8"].includes(r.winResult[2]), ie[ROULETTE_BET_TYPE.COLUMN_3] = ["3", "6", "9"].includes(r.winResult[2]), ie[ROULETTE_BET_TYPE.RED] = Be !== 0 && [1, 3, 5, 7, 9, 12, 14, 18, 19, 21, 23, 25, 27, 30, 32, 34, 36].includes(Be), ie[ROULETTE_BET_TYPE.BLACK] = Be !== 0 && !ie[ROULETTE_BET_TYPE.RED]
        }
        z(ie)
    }, [r.winResult]);
    const H = React.useCallback((ie, Be, ve, Re, Ce) => jsxs("button", {
        className: `${ie} ${Be || ""}`,
        style: {gridArea: ve},
        onClick: () => _e([Re]),
        "aria-checked": D[Re],
        children: [jsx("div", {
            className: "bet_area_info",
            children: jsx("div", {className: "title", children: R(`bet_type.${Ce}`)})
        }), jsxs("div", {className: "bet_chips_container", children: [" ", Y(Re)]})]
    }), [D, r.view, Y, L, E, O, C]), me = React.useCallback((ie, Be, ve, Re, Ce) => jsxs("button", {
        className: `${ie} ${Be || ""}`,
        style: {gridArea: ve},
        onClick: () => _e([Re]),
        "aria-checked": D[Re],
        children: [jsx("div", {
            className: "bet_area_info",
            children: jsx("div", {className: "title", children: `${Ce}`})
        }), jsxs("div", {className: "bet_chips_container", children: [" ", Y(Re)]})]
    }), [D, r.view, Y, L, E, O, C]), ce = React.useCallback((ie, Be, ve, Re) => jsxs("button", {
        className: `${ie} main_bet ${ve || ""}`,
        style: {gridArea: Be},
        onClick: () => _e([Re]),
        "aria-checked": D[Re],
        children: [jsx("div", {className: `svg_table_${Be}`}), jsxs("div", {
            className: "bet_chips_container",
            children: [" ", Y(Re)]
        })]
    }), [D, r.view, Y, L, E, O, C]);
    return jsxs("div", {
        className: `bet_areas mult_roulette_bet_table ${F()}`,
        children: [ce("green", "roulette_black", "center", ROULETTE_BET_TYPE.BLACK), ce("green", "roulette_red", "center", ROULETTE_BET_TYPE.RED), me("green", "", "1_18", ROULETTE_BET_TYPE.SMALL, "1 - 18"), me("green", "", "19_36", ROULETTE_BET_TYPE.BIG, "19 - 36"), H("green", "", "even", ROULETTE_BET_TYPE.EVEN, BetType.R_Even), H("green", "", "odd", ROULETTE_BET_TYPE.ODD, BetType.R_Odd)]
    })
}, FPCbetAreas = r => {
    useTranslation();
    const R = useAvailableChips(), y = React.useContext(GameTableBetContext), {
            orientation: E,
            isForceLandscape: C
        } = useDeviceOrientation(), [x, B] = React.useState(Object.values(FPC_BET_TYPE).map(H => ({
            color: R[0].color,
            amount: Helper.formatAbbrMoney(r.betAmounts[H])
        }))), N = useChips({chipAttrs: x, flat: C && r.view === BET_STATE.NO_BET}),
        L = React.useContext(ScalableContainerScaleContext), [O, D] = React.useState(Object.fromEntries(Object.keys(FPC_BET_TYPE).filter(H => !Number.isNaN(parseInt(H))).map(H => [H, !1]))),
        z = React.useCallback(() => {
            let H = [];
            switch (r.view) {
                case BET_STATE.BETTING:
                    H.push("betting");
                    break;
                case BET_STATE.NO_BET:
                    H.push("no_bet");
                    break
            }
            return H.push("show_bet_amount"), H.join(" ")
        }, [r.view]);
    useBetAmountUpdateChipEffect(r.betAmounts, r.pendingBetAmounts, x, B), usePayoutUpdateChipEffect(r.betAmounts, r.pendingBetAmounts, r.payouts, x, B);
    const F = useBet(r.betAmounts, r.view, FPC_BET_TYPE_MAP, y),
        _e = useBetChip(r.payouts, r.betAmounts, r.pendingBetAmounts, N);
    React.useEffect(() => {
        let H = Object.fromEntries(Object.keys(FPC_BET_TYPE).filter(me => !Number.isNaN(parseInt(me))).map(me => [me, !1]));
        if (r.winResult == "-1") {
            D(H);
            return
        }
        if (r.winResult !== "") {
            const me = ["FISH", "PRAWN", "CALABASH", "COIN", "CRAB", "CHICKEN"], ce = ["RED", "GREEN", "BLUE"],
                ie = ["CALABASH", "PRAWN", "FISH", "CHICKEN", "CRAB", "COIN"], Be = r.winResult.slice(3, 6),
                ve = Array.from(new Set(r.winResult.slice(0, 3))).map(Ce => parseInt(Ce) - 1).sort((Ce, Ne) => ie.findIndex(we => we === me[Ce]) - ie.findIndex(we => we === me[Ne])),
                Re = Array.from(new Set(r.winResult.slice(3, 6)));
            for (let Ce = 0; Ce < ve.length; Ce++) {
                H[FPC_BET_TYPE[me[ve[Ce]]]] = !0;
                for (let Ne = Ce + 1; Ne < ve.length; Ne++) H[FPC_BET_TYPE[`${me[ve[Ce]]}_${me[ve[Ne]]}`]] = !0
            }
            for (let Ce = 0; Ce < Re.length; Ce++) H[FPC_BET_TYPE[`SINGLE_${ce[Re[Ce]]}`]] = !0, H[FPC_BET_TYPE[`DOUBLE_${ce[Re[Ce]]}`]] = Be.split("").filter(Ne => Ne === Re[Ce]).length === 2, H[FPC_BET_TYPE[`TRIPLE_${ce[Re[Ce]]}`]] = Be.split("").filter(Ne => Ne === Re[Ce]).length === 3;
            H[FPC_BET_TYPE.ANY_TRIPLE] = ve.length === 1
        }
        D(H)
    }, [r.winResult]);
    const Y = React.useCallback((H, me, ce, ie) => jsxs("button", {
        className: `${H} main_bet ${ce || ""}`,
        style: {gridArea: me},
        onClick: () => F([ie]),
        "aria-checked": O[ie],
        children: [jsx("div", {className: `svg_table_fpc_${me}`}), jsxs("div", {
            className: "bet_chips_container",
            children: [" ", _e(ie)]
        })]
    }), [O, r.view, _e, N, y, L, E]);
    return jsxs("div", {
        className: `bet_areas mult_fpc_bet_table ${z()}`,
        children: [Y("red", "fish", "center", FPC_BET_TYPE.FISH), Y("green", "prawn", "center", FPC_BET_TYPE.PRAWN), Y("blue", "calabash", "center", FPC_BET_TYPE.CALABASH), Y("blue", "coin", "center", FPC_BET_TYPE.COIN), Y("green", "crab", "center", FPC_BET_TYPE.CRAB), Y("red", "chicken", "center", FPC_BET_TYPE.CHICKEN)]
    })
}, AndarBaharBetAreas = r => {
    const {t: R} = useTranslation(), y = useAvailableChips(), E = React.useContext(GameTableBetContext), {
            orientation: C,
            isForceLandscape: x
        } = useDeviceOrientation(), [B, N] = React.useState(Object.values(ANDAR_BAHAR_BET_TYPE).map(ce => ({
            color: y[0].color,
            amount: Helper.formatAbbrMoney(r.betAmounts[ce])
        }))), L = useChips({chipAttrs: B, flat: x && r.view === BET_STATE.NO_BET}),
        O = React.useContext(ScalableContainerScaleContext), [D, z] = React.useState(Object.fromEntries(Object.keys(ANDAR_BAHAR_BET_TYPE).filter(ce => !Number.isNaN(parseInt(ce))).map(ce => [ce, !1]))),
        F = Helper.useOdds(), _e = React.useCallback(() => {
            let ce = [];
            switch (r.view) {
                case BET_STATE.BETTING:
                    ce.push("betting");
                    break;
                case BET_STATE.NO_BET:
                    ce.push("no_bet");
                    break
            }
            return ce.push("show_bet_amount"), ce.join(" ")
        }, [r.view]);
    useBetAmountUpdateChipEffect(r.betAmounts, r.pendingBetAmounts, B, N), usePayoutUpdateChipEffect(r.betAmounts, r.pendingBetAmounts, r.payouts, B, N);
    const Y = useBet(r.betAmounts, r.view, ANDAR_BAHAR_BET_TYPE_MAP, E),
        H = useBetChip(r.payouts, r.betAmounts, r.pendingBetAmounts, L);
    React.useEffect(() => {
        let ce = Object.fromEntries(Object.keys(ANDAR_BAHAR_BET_TYPE).filter(ie => !Number.isNaN(parseInt(ie))).map(ie => [ie, !1]));
        if (r.winResult == "-1") {
            z(ce);
            return
        }
        ce[ANDAR_BAHAR_BET_TYPE.ANDAR] = r.winResult[0] === "0", ce[ANDAR_BAHAR_BET_TYPE.BAHAR] = r.winResult[0] === "1", ce[ANDAR_BAHAR_BET_TYPE.CARDS_1_TO_5] = r.winResult[2] === "0", ce[ANDAR_BAHAR_BET_TYPE.CARDS_6_TO_10] = r.winResult[2] === "1", ce[ANDAR_BAHAR_BET_TYPE.CARDS_11_TO_15] = r.winResult[2] === "2", ce[ANDAR_BAHAR_BET_TYPE.CARDS_16_TO_25] = r.winResult[2] === "3", ce[ANDAR_BAHAR_BET_TYPE.CARDS_26_TO_30] = r.winResult[2] === "4", ce[ANDAR_BAHAR_BET_TYPE.CARDS_31_TO_35] = r.winResult[2] === "5", ce[ANDAR_BAHAR_BET_TYPE.CARDS_36_TO_40] = r.winResult[2] === "6", ce[ANDAR_BAHAR_BET_TYPE.CARDS_41_PLUS] = r.winResult[2] === "7", ce[ANDAR_BAHAR_BET_TYPE.ANDAR_1ST] = r.winResult[1] === "1", ce[ANDAR_BAHAR_BET_TYPE.BAHAR_1ST] = r.winResult[1] === "2", z(ce)
    }, [r.winResult]);
    const me = React.useCallback((ce, ie, Be, ve, Re, Ce, Ne, we, Me, ke) => jsxs("button", {
        className: `${ce} ${ie || ""}`,
        style: {gridArea: ve},
        onClick: () => Y([Ce]),
        "aria-checked": D[Ce],
        children: [jsxs("div", {
            className: "bet_area_info",
            children: [jsx("div", {
                className: "title",
                dangerouslySetInnerHTML: {__html: R(`bet_type.${Ne}`)}
            }), jsx("div", {className: "odds", children: F(we)})]
        }), jsxs("div", {className: "bet_chips_container", children: [" ", H(Ce)]})]
    }), [D, r.view, H, L, E, O, C]);
    return jsxs("div", {
        className: `bet_areas mult_andar_bahar_bet_table ${_e()}`,
        children: [me("blue", "", !0, "andar", "#47B8FF59", ANDAR_BAHAR_BET_TYPE.ANDAR, BetType.AB_Andar, .9), me("red", "", !0, "bahar", "#47B8FF59", ANDAR_BAHAR_BET_TYPE.BAHAR, BetType.AB_Bahar, 1), me("blue", "bottom_left", !0, "andar_1st", "#47B8FF59", ANDAR_BAHAR_BET_TYPE.ANDAR_1ST, BetType.AB_AndarFirst, 15), me("red", "bottom_right", !1, "bahar_1st", "#BCFF8959", ANDAR_BAHAR_BET_TYPE.BAHAR_1ST, BetType.AB_BaharFirst, 15.5)]
    })
}, ClassicPokdengBetAreas = r => {
    const {t: R} = useTranslation(), y = useAvailableChips(), E = React.useContext(GameTableBetContext), {
            orientation: C,
            isForceLandscape: x
        } = useDeviceOrientation(), [B, N] = React.useState(Object.values(POKDENG_BET_TYPE).map(ce => ({
            color: y[0].color,
            amount: Helper.formatAbbrMoney(r.betAmounts[ce])
        }))), L = useChips({chipAttrs: B, flat: x && r.view === BET_STATE.NO_BET}),
        O = React.useContext(ScalableContainerScaleContext);
    React.useState(), React.useState();
    const [D, z] = React.useState(Object.fromEntries(Object.keys(POKDENG_BET_TYPE).filter(ce => !Number.isNaN(parseInt(ce))).map(ce => [ce, !1]))),
        F = Helper.useOdds(), _e = React.useCallback(() => {
            switch (r.view) {
                case BET_STATE.BETTING:
                    return "betting";
                case BET_STATE.NO_BET:
                    return "no_bet"
            }
        }, [r.view]);
    useBetAmountUpdateChipEffect(r.betAmounts, r.pendingBetAmounts, B, N), usePayoutUpdateChipEffect(r.betAmounts, r.pendingBetAmounts, r.payouts, B, N);
    const Y = useBet(r.betAmounts, r.view, POKDENG_BET_TYPE_MAP, E),
        H = useBetChip(r.payouts, r.betAmounts, r.pendingBetAmounts, L);
    React.useEffect(() => {
        let ce = Object.fromEntries(Object.keys(POKDENG_BET_TYPE).filter(ie => !Number.isNaN(parseInt(ie))).map(ie => [ie, !1]));
        ce[POKDENG_BET_TYPE.PLAYER_1] = r.winResult[2] === "1", ce[POKDENG_BET_TYPE.PLAYER_2] = r.winResult[5] === "1", ce[POKDENG_BET_TYPE.PLAYER_3] = r.winResult[8] === "1", ce[POKDENG_BET_TYPE.PLAYER_4] = r.winResult[11] === "1", ce[POKDENG_BET_TYPE.PLAYER_5] = r.winResult[14] === "1", ce[POKDENG_BET_TYPE.P1_PAIR] = ["1", "3"].includes(r.winResult[4]), ce[POKDENG_BET_TYPE.P2_PAIR] = ["1", "3"].includes(r.winResult[7]), ce[POKDENG_BET_TYPE.P3_PAIR] = ["1", "3"].includes(r.winResult[10]), ce[POKDENG_BET_TYPE.P4_PAIR] = ["1", "3"].includes(r.winResult[13]), ce[POKDENG_BET_TYPE.P5_PAIR] = ["1", "3"].includes(r.winResult[16]), z(ce)
    }, [r.winResult]);
    const me = React.useCallback((ce, ie, Be, ve, Re, Ce, Ne, we) => jsxs("button", {
        className: `${ce}${Be ? " main_bet" : ""} ${ie || ""}`,
        style: {gridArea: ve},
        onClick: () => Y([Ce]),
        "aria-checked": D[Ce],
        children: [jsx("div", {className: `svg_table_pokdeng_decor_${Re} ${Re}`}), jsxs("div", {
            className: "bet_area_info",
            children: [jsx("div", {
                className: "title",
                children: R(`bet_type.${Ne}`)
            }), we && jsx("div", {className: "odds", children: F(we)})]
        }), jsxs("div", {className: "bet_chips_container", children: [" ", H(Ce)]})]
    }), [D, r.view, H, L, E, O, C]);
    return jsxs("div", {
        className: `bet_areas mult_classic_pok_deng_bet_table ${_e()}`,
        children: [me("orange", "patten_top", !0, "p1p", "top", POKDENG_BET_TYPE.P1_PAIR, BetType.PD_P1Pair, 11), me("orange", "patten_top", !0, "p2p", "top", POKDENG_BET_TYPE.P2_PAIR, BetType.PD_P2Pair, 11), me("orange", "patten_top", !0, "p3p", "top", POKDENG_BET_TYPE.P3_PAIR, BetType.PD_P3Pair, 11), me("orange", "patten_top", !0, "p4p", "top", POKDENG_BET_TYPE.P4_PAIR, BetType.PD_P4Pair, 11), me("orange", "patten_top", !0, "p5p", "top", POKDENG_BET_TYPE.P5_PAIR, BetType.PD_P5Pair, 11), me("blue", "patten_bottom bottom_left", !0, "p1", "bottom", POKDENG_BET_TYPE.PLAYER_1, BetType.PD_Player1), me("blue", "patten_bottom", !0, "p2", "bottom", POKDENG_BET_TYPE.PLAYER_2, BetType.PD_Player2), me("blue", "patten_bottom", !0, "p3", "bottom", POKDENG_BET_TYPE.PLAYER_3, BetType.PD_Player3), me("blue", "patten_bottom", !0, "p4", "bottom", POKDENG_BET_TYPE.PLAYER_4, BetType.PD_Player4), me("blue", "patten_bottom bottom_right", !0, "p5", "bottom", POKDENG_BET_TYPE.PLAYER_5, BetType.PD_Player5)]
    })
}, TwoSidePokdengBetAreas = r => {
    const {t: R} = useTranslation(), y = useAvailableChips(), E = React.useContext(GameTableBetContext), {
            orientation: C,
            isForceLandscape: x
        } = useDeviceOrientation(), [B, N] = React.useState(Object.values(TWO_SIDES_POKDENG_BET_TYPE).map(ce => ({
            color: y[0].color,
            amount: Helper.formatAbbrMoney(r.betAmounts[ce])
        }))), L = useChips({chipAttrs: B, flat: x && r.view === BET_STATE.NO_BET}),
        O = React.useContext(ScalableContainerScaleContext), [D, z] = React.useState(Object.fromEntries(Object.keys(TWO_SIDES_POKDENG_BET_TYPE).filter(ce => !Number.isNaN(parseInt(ce))).map(ce => [ce, !1]))),
        F = Helper.useOdds(), _e = React.useCallback(() => {
            switch (r.view) {
                case BET_STATE.BETTING:
                    return "betting";
                case BET_STATE.NO_BET:
                    return "no_bet"
            }
        }, [r.view]);
    useBetAmountUpdateChipEffect(r.betAmounts, r.pendingBetAmounts, B, N), usePayoutUpdateChipEffect(r.betAmounts, r.pendingBetAmounts, r.payouts, B, N);
    const Y = useBet(r.betAmounts, r.view, TWO_SIDES_POKDENG_BET_TYPE_MAP, E),
        H = useBetChip(r.payouts, r.betAmounts, r.pendingBetAmounts, L);
    React.useEffect(() => {
        let ce = Object.fromEntries(Object.keys(TWO_SIDES_POKDENG_BET_TYPE).filter(ie => !Number.isNaN(parseInt(ie))).map(ie => [ie, !1]));
        ce[TWO_SIDES_POKDENG_BET_TYPE.PLAYER_1] = r.winResult[2] === "1", ce[TWO_SIDES_POKDENG_BET_TYPE.PLAYER_2] = r.winResult[5] === "1", ce[TWO_SIDES_POKDENG_BET_TYPE.PLAYER_3] = r.winResult[8] === "1", ce[TWO_SIDES_POKDENG_BET_TYPE.PLAYER_4] = r.winResult[11] === "1", ce[TWO_SIDES_POKDENG_BET_TYPE.PLAYER_5] = r.winResult[14] === "1", ce[TWO_SIDES_POKDENG_BET_TYPE.P1_PAIR] = ["1", "3"].includes(r.winResult[4]), ce[TWO_SIDES_POKDENG_BET_TYPE.P2_PAIR] = ["1", "3"].includes(r.winResult[7]), ce[TWO_SIDES_POKDENG_BET_TYPE.P3_PAIR] = ["1", "3"].includes(r.winResult[10]), ce[TWO_SIDES_POKDENG_BET_TYPE.P4_PAIR] = ["1", "3"].includes(r.winResult[13]), ce[TWO_SIDES_POKDENG_BET_TYPE.P5_PAIR] = ["1", "3"].includes(r.winResult[16]), z(ce)
    }, [r.winResult]);
    const me = React.useCallback((ce, ie, Be, ve, Re, Ce, Ne, we) => jsxs("button", {
        className: `${ce}${Be ? " main_bet" : ""} ${ie || ""}`,
        style: {gridArea: ve},
        onClick: () => Y([Ce]),
        "aria-checked": D[Ce],
        children: [jsx("div", {className: `svg_table_pokdeng_decor_${Re} ${Re}`}), jsxs("div", {
            className: "bet_area_info",
            children: [jsx("div", {
                className: "title",
                children: R(`bet_type.${Ne}`)
            }), we && jsx("div", {className: "odds", children: F(we)})]
        }), jsxs("div", {className: "bet_chips_container", children: [" ", H(Ce)]})]
    }), [D, r.view, H, L, E, O, C]);
    return jsxs("div", {
        className: `bet_areas mult_two_side_pok_deng_bet_table ${_e()}`,
        children: [me("red", "patten_top", !0, "b1", "top", TWO_SIDES_POKDENG_BET_TYPE.BANKER_1, BetType.TPD_Banker1), me("red", "patten_top", !0, "b2", "top", TWO_SIDES_POKDENG_BET_TYPE.BANKER_2, BetType.TPD_Banker2), me("red", "patten_top", !0, "b3", "top", TWO_SIDES_POKDENG_BET_TYPE.BANKER_3, BetType.TPD_Banker3), me("red", "patten_top", !0, "b4", "top", TWO_SIDES_POKDENG_BET_TYPE.BANKER_4, BetType.TPD_Banker4), me("red", "patten_top", !0, "b5", "top", TWO_SIDES_POKDENG_BET_TYPE.BANKER_5, BetType.TPD_Banker5), me("blue", "patten_bottom bottom_left", !0, "p1", "bottom", TWO_SIDES_POKDENG_BET_TYPE.PLAYER_1, BetType.TPD_Player1), me("blue", "patten_bottom", !0, "p2", "bottom", TWO_SIDES_POKDENG_BET_TYPE.PLAYER_2, BetType.TPD_Player2), me("blue", "patten_bottom", !0, "p3", "bottom", TWO_SIDES_POKDENG_BET_TYPE.PLAYER_3, BetType.TPD_Player3), me("blue", "patten_bottom", !0, "p4", "bottom", TWO_SIDES_POKDENG_BET_TYPE.PLAYER_4, BetType.TPD_Player4), me("blue", "patten_bottom bottom_right", !0, "p5", "bottom", TWO_SIDES_POKDENG_BET_TYPE.PLAYER_5, BetType.TPD_Player5)]
    })
}, BullBullBetAreas = r => {
    const {t: R} = useTranslation(), y = useAvailableChips(),
        E = React.useContext(GameTableBetContext), {settings: C} = React.useContext(SettingsContext), {
            orientation: x,
            isForceLandscape: B
        } = useDeviceOrientation(), [N, L] = React.useState(Object.values(BULL_BULL_BET_TYPE).map(ce => ({
            color: y[0].color,
            amount: Helper.formatAbbrMoney(r.betAmounts[ce])
        }))), O = useChips({chipAttrs: N, flat: B && r.view === BET_STATE.NO_BET}),
        D = React.useContext(ScalableContainerScaleContext), [z, F] = React.useState(Object.fromEntries(Object.keys(BULL_BULL_BET_TYPE).filter(ce => !Number.isNaN(parseInt(ce))).map(ce => [ce, !1]))),
        _e = React.useCallback(() => {
            let ce = [];
            switch (r.view) {
                case BET_STATE.BETTING:
                    ce.push("betting");
                    break;
                case BET_STATE.NO_BET:
                    ce.push("no_bet");
                    break
            }
            return ce.push("show_bet_amount"), ce.join(" ")
        }, [r.view]);
    useBetAmountUpdateChipEffect(r.betAmounts, r.pendingBetAmounts, N, L), usePayoutUpdateChipEffect(r.betAmounts, r.pendingBetAmounts, r.payouts, N, L);
    const Y = useBet(r.betAmounts, r.view, BULL_BULL_BET_TYPE_MAP, E),
        H = useBetChip(r.payouts, r.betAmounts, r.pendingBetAmounts, O);
    React.useEffect(() => {
        let ce = Object.fromEntries(Object.keys(BULL_BULL_BET_TYPE).filter(ie => !Number.isNaN(parseInt(ie))).map(ie => [ie, !1]));
        for (let ie = 0; ie < 3; ie++) ce[BULL_BULL_BET_TYPE.EQUAL_BANKER_1 + ie * 6] = ["1", "5", "6", "7"].includes(r.winResult[0]), ce[BULL_BULL_BET_TYPE.EQUAL_PLAYER_1 + ie * 6] = ["0", "2", "3", "4"].includes(r.winResult[0]), ce[BULL_BULL_BET_TYPE.EQUAL_BANKER_2 + ie * 6] = ["1", "2", "4", "6"].includes(r.winResult[0]), ce[BULL_BULL_BET_TYPE.EQUAL_PLAYER_2 + ie * 6] = ["0", "3", "5", "7"].includes(r.winResult[0]), ce[BULL_BULL_BET_TYPE.EQUAL_BANKER_3 + ie * 6] = ["1", "2", "3", "5"].includes(r.winResult[0]), ce[BULL_BULL_BET_TYPE.EQUAL_PLAYER_3 + ie * 6] = ["0", "4", "6", "7"].includes(r.winResult[0]);
        F(ce)
    }, [r.winResult]);
    const me = React.useCallback((ce, ie, Be, ve, Re, Ce) => jsxs("button", {
        className: `${ce} ${ie || ""} main_bet`,
        style: {gridArea: Be},
        onClick: () => Y([ve]),
        "aria-checked": z[ve],
        children: [Ce && Ce.length > 0 && jsx("div", {className: `svg_table_${Ce}`}), jsx("div", {
            className: "bet_area_info",
            children: jsx("div", {className: "title", children: R(`bet_type.${Re}`)})
        }), jsxs("div", {
            className: "bet_chips_container",
            children: [" ", H(ve)]
        }), jsx("div", {className: `svg_bull_${BB_PLAY_TYPE[C.bullbullPlayType].toLowerCase()}`})]
    }), [z, r.view, H, O, E, D, x, C.bullbullPlayType]);
    return jsxs("div", {
        className: `bet_areas mult_bull_bull_bet_table ${_e()}`,
        children: [me("red", "", "b1", BULL_BULL_BET_TYPE.EQUAL_BANKER_1 + C.bullbullPlayType * 6, BetType.BB_EO_Banker1 + C.bullbullPlayType * 10), me("red", "", "b2", BULL_BULL_BET_TYPE.EQUAL_BANKER_2 + C.bullbullPlayType * 6, BetType.BB_EO_Banker2 + C.bullbullPlayType * 10), me("red", "", "b3", BULL_BULL_BET_TYPE.EQUAL_BANKER_3 + C.bullbullPlayType * 6, BetType.BB_EO_Banker3 + C.bullbullPlayType * 10), me("blue", "bottom_left left", "p1", BULL_BULL_BET_TYPE.EQUAL_PLAYER_1 + C.bullbullPlayType * 6, BetType.BB_EO_Player1 + C.bullbullPlayType * 10, "bull_left"), me("blue", "", "p2", BULL_BULL_BET_TYPE.EQUAL_PLAYER_2 + C.bullbullPlayType * 6, BetType.BB_EO_Player2 + C.bullbullPlayType * 10), me("blue", "bottom_right right", "p3", BULL_BULL_BET_TYPE.EQUAL_PLAYER_3 + C.bullbullPlayType * 6, BetType.BB_EO_Player3 + C.bullbullPlayType * 10, "bull_right")]
    })
}, XocDiaBetAreas = r => {
    const {t: R} = useTranslation(), y = useAvailableChips(),
        E = React.useContext(GameTableBetContext), {settings: C} = React.useContext(SettingsContext), {
            orientation: x,
            isForceLandscape: B
        } = useDeviceOrientation(), [N, L] = React.useState(Object.values(XOC_DIA_BET_TYPE).map(ie => ({
            color: y[0].color,
            amount: Helper.formatAbbrMoney(r.betAmounts[ie])
        }))), O = useChips({chipAttrs: N, flat: B && r.view === BET_STATE.NO_BET}),
        D = React.useContext(ScalableContainerScaleContext), [z, F] = React.useState(Object.fromEntries(Object.keys(XOC_DIA_BET_TYPE).filter(ie => !Number.isNaN(parseInt(ie))).map(ie => [ie, !1]))),
        _e = React.useCallback(() => {
            let ie = [];
            switch (r.view) {
                case BET_STATE.BETTING:
                    ie.push("betting");
                    break;
                case BET_STATE.NO_BET:
                    ie.push("no_bet");
                    break
            }
            return ie.push("show_bet_amount"), ie.join(" ")
        }, [r.view]);
    useBetAmountUpdateChipEffect(r.betAmounts, r.pendingBetAmounts, N, L), usePayoutUpdateChipEffect(r.betAmounts, r.pendingBetAmounts, r.payouts, N, L);
    const Y = useBet(r.betAmounts, r.view, XOC_DIA_BET_TYPE_MAP, E),
        H = useBetChip(r.payouts, r.betAmounts, r.pendingBetAmounts, O), me = Helper.useOdds();
    React.useEffect(() => {
        let ie = Object.fromEntries(Object.keys(XOC_DIA_BET_TYPE).filter(Be => !Number.isNaN(parseInt(Be))).map(Be => [Be, !1]));
        if (r.winResult === "-1") {
            F(ie);
            return
        }
        ie[XOC_DIA_BET_TYPE.SMALL] = r.winResult[0] === "1", ie[XOC_DIA_BET_TYPE.BIG] = r.winResult[0] === "2", ie[XOC_DIA_BET_TYPE.ODD] = r.winResult[1] === "0", ie[XOC_DIA_BET_TYPE.EVEN] = r.winResult[1] === "1", ie[XOC_DIA_BET_TYPE.POINT_0] = r.winResult[2] === "0", ie[XOC_DIA_BET_TYPE.POINT_1] = r.winResult[2] === "1", ie[XOC_DIA_BET_TYPE.POINT_3] = r.winResult[2] === "3", ie[XOC_DIA_BET_TYPE.POINT_4] = r.winResult[2] === "4", F(ie)
    }, [r.winResult]);
    const ce = React.useCallback((ie, Be, ve, Re, Ce, Ne, we) => jsxs("button", {
        className: `${ie} ${Be || ""} main_bet`,
        style: {gridArea: ve},
        onClick: () => Y([Re]),
        "aria-checked": z[Re],
        children: [jsxs("div", {
            className: "bet_area_info",
            children: [we ? jsx(XocDiaCoinsSet, {value: we}) : jsx("div", {
                className: "title",
                children: R(`bet_type.${Ce}`)
            }), Ne && jsx("div", {className: "odds", children: me(Ne)})]
        }), jsxs("div", {className: "bet_chips_container", children: [" ", H(Re)]})]
    }), [z, r.view, H, O, E, D, x, C.bullbullPlayType]);
    return jsxs("div", {
        className: `bet_areas mult_xoc_dia_bet_table ${_e()}`,
        children: [ce("green", "", "xd_0", XOC_DIA_BET_TYPE.POINT_0, BetType.XD_0, 12, XD_COIN_SET.XD0), ce("green", "", "xd_1", XOC_DIA_BET_TYPE.POINT_1, BetType.XD_1, 2.6, XD_COIN_SET.XD1), ce("green", "", "xd_3", XOC_DIA_BET_TYPE.POINT_3, BetType.XD_3, 2.6, XD_COIN_SET.XD3), ce("green", "", "xd_4", XOC_DIA_BET_TYPE.POINT_4, BetType.XD_4, 12, XD_COIN_SET.XD4), ce("red", "", "xd_big", XOC_DIA_BET_TYPE.BIG, BetType.XD_Big, .96), ce("blue", "", "xd_small", XOC_DIA_BET_TYPE.SMALL, BetType.XD_Small, .96), ce("blue", "", "xd_odd", XOC_DIA_BET_TYPE.ODD, BetType.XD_Odd, .96), ce("red", "", "xd_even", XOC_DIA_BET_TYPE.EVEN, BetType.XD_Even, .96)]
    })
}, SicboResultRoad$1 = "", TYPE$1 = {B: "big", T: "triple", S: "small"};
var SICBO_RESULT_ROAD_FLEX_DIRECTION = (r => (r.ROW = "row", r.COLUMN = "column", r))(SICBO_RESULT_ROAD_FLEX_DIRECTION || {});
const SicboResultRoad = r => {
    let {flexDirection: R = "column", showTitle: y = !0, tableLayout: E = !1} = r;
    const {t: C} = useTranslation(), {isForceLandscape: x} = useDeviceOrientation();
    return jsx("section", {
        className: `sicbo_result_road ${R}`,
        children: x || E ? jsxs("section", {
            id: "sicbo_history",
            children: [y && jsxs("div", {
                className: "title",
                children: [jsx("div", {className: "svg_history"}), jsx("div", {children: C("roadmap.history")})]
            }), r.results.slice(-r.size).reverse().map((B, N) => jsxs(React.Fragment, {
                children: [!r.abbr && N !== 0 && jsx("div", {className: "divider"}), jsxs("div", {
                    className: `sicbo_record ${B[3]}`,
                    children: [jsxs("div", {
                        className: "sicbo_record_dices item",
                        children: [jsx("div", {className: `svg_dice_${B[0]}`}), jsx("div", {className: `svg_dice_${B[1]}`}), jsx("div", {className: `svg_dice_${B[2]}`})]
                    }), jsx("div", {
                        className: "item",
                        children: parseInt(B[0]) + parseInt(B[1]) + parseInt(B[2])
                    }), jsx("div", {
                        className: "item",
                        children: r.abbr ? TYPE$1[B[3]].slice(0, 1).toUpperCase() : C(`roadmap.sicbo.${TYPE$1[B[3]]}`)
                    })]
                }, N)]
            }, N))]
        }) : jsxs("article", {
            className: "result_road sicbo",
            children: [r.results.length > 0 && r.results.slice(-r.size).reverse().map((B, N) => jsx("div", {
                className: B[3],
                children: parseInt(B[0]) + parseInt(B[1]) + parseInt(B[2])
            }, N)), Array(Math.max(r.size - r.results.length, 1)).fill(void 0).map((B, N) => jsx("div", {}, N))]
        })
    })
}, HiLoResultRoad$1 = "", Responsive$7 = "", TYPE = {L: "LO", E: "11", H: "HI"};
var HILO_RESULT_ROAD_FLEX_DIRECTION = (r => (r.ROW = "row", r.COLUMN = "column", r))(HILO_RESULT_ROAD_FLEX_DIRECTION || {});
const HiLoResultRoad = r => {
    let {flexDirection: R = "column", showTitle: y = !0, tableLayout: E = !1} = r;
    const {t: C} = useTranslation(), {isForceLandscape: x} = useDeviceOrientation();
    return jsx("section", {
        className: `hi_lo_result_road ${R}`,
        children: x || E ? jsxs("section", {
            id: "hi_lo_history",
            children: [y && jsxs("div", {
                className: "title",
                children: [jsx("div", {className: "svg_history"}), jsx("div", {children: C("roadmap.history")})]
            }), r.results.slice(-r.size).reverse().map((B, N) => jsxs(React.Fragment, {
                children: [!r.abbr && N !== 0 && jsx("div", {className: "divider"}), jsxs("div", {
                    className: `hi_lo_record ${B[3]}`,
                    children: [jsxs("div", {
                        className: "hi_lo_record_dices item",
                        children: [jsx("div", {className: `svg_dice_${B[0]}`}), jsx("div", {className: `svg_dice_${B[1]}`}), jsx("div", {className: `svg_dice_${B[2]}`})]
                    }), jsx("div", {className: "item", children: TYPE[B[3]]})]
                }, N)]
            }, N))]
        }) : jsxs("article", {
            className: "result_road hi_lo",
            children: [r.results.length > 0 && r.results.slice(-r.size).reverse().map((B, N) => jsx("div", {
                className: B[3],
                children: TYPE[B[3]]
            }, N)), Array(Math.max(r.size - r.results.length, 1)).fill(void 0).map((B, N) => jsx("div", {}, N))]
        })
    })
}, FPCResultRoad$1 = "", Responsive$6 = "";
var FPC_RESULT_ROAD_FLEX_DIRECTION = (r => (r.ROW = "row", r.COLUMN = "column", r))(FPC_RESULT_ROAD_FLEX_DIRECTION || {});
const FPCResultRoad = r => {
    let {flexDirection: R = "column", showTitle: y = !0, tableLayout: E = !1} = r;
    const {t: C} = useTranslation(), {isForceLandscape: x} = useDeviceOrientation();
    return jsx("section", {
        className: `fpc_result_road ${R}`,
        children: jsxs("section", {
            id: "fpc_history",
            children: [y && jsxs("div", {
                className: "title",
                children: [jsx("div", {className: "svg_history"}), jsx("div", {children: C("roadmap.history")})]
            }), r.results.slice(-r.size).reverse().map((B, N) => jsxs(React.Fragment, {
                children: [!r.abbr && N !== 0 && jsx("div", {className: "divider"}), jsx("div", {
                    className: "fpc_record",
                    children: jsxs("div", {
                        className: "fpc_record_dices",
                        children: [jsx("div", {
                            className: `fpc_record_dice ${FPC_COLOR[parseInt(B[0]) - 1]}`,
                            children: jsx("div", {className: `svg_table_fpc_${FPC_DICE[B[0]]}`})
                        }), jsx("div", {
                            className: `fpc_record_dice ${FPC_COLOR[parseInt(B[1]) - 1]}`,
                            children: jsx("div", {className: `svg_table_fpc_${FPC_DICE[B[1]]}`})
                        }), jsx("div", {
                            className: `fpc_record_dice ${FPC_COLOR[parseInt(B[2]) - 1]}`,
                            children: jsx("div", {className: `svg_table_fpc_${FPC_DICE[B[2]]}`})
                        })]
                    })
                }, N)]
            }, N)), !x && y && jsx("div", {className: "last", children: C("roadmap.last_10_rounds")})]
        })
    })
}, fontSize = r => 72 - (r.split("").length - 1) * 8, svgTextConfig = {x: 50, y: 55}, PokdengResultRoad = r => {
    const {t: R} = useTranslation(), y = React.useCallback(C => {
        switch (C) {
            case"8":
                return "7.1";
            case"9":
                return "7.2";
            case"A":
                return "7.3";
            case"B":
                return "7.4";
            case"C":
                return "7.5";
            case"D":
                return "8";
            case"E":
                return "9";
            default:
                return C
        }
    }, []), E = React.useCallback(C => `${C[0]}${C[2]}`, []);
    return jsxs("article", {
        className: "pokdeng result_road",
        style: {"--columns": 1, "--rows": 6},
        children: [jsxs("div", {
            className: "red",
            style: {"--columns": r.size},
            children: [jsx("div", {
                children: jsx("svg", {
                    viewBox: "0 0 100 100",
                    xmlnsXlink: "http://www.w3.org/1999/xlink",
                    xmlns: "http://www.w3.org/2000/svg",
                    children: jsx("text", {
                        x: svgTextConfig.x,
                        y: svgTextConfig.y,
                        textAnchor: "middle",
                        dominantBaseline: "middle",
                        fontSize: fontSize(R("roadmap.pokdeng.banker")),
                        fontFamily: "Arial",
                        fontWeight: "bold",
                        children: R("roadmap.pokdeng.banker")
                    })
                })
            }), r.bankerResults.slice(-(r.size - 1)).map((C, x) => jsx("div", {
                className: `R${C[1]}`,
                children: jsx("svg", {
                    viewBox: "0 0 100 100",
                    xmlnsXlink: "http://www.w3.org/1999/xlink",
                    xmlns: "http://www.w3.org/2000/svg",
                    children: jsx("text", {
                        x: svgTextConfig.x,
                        y: svgTextConfig.y,
                        textAnchor: "middle",
                        dominantBaseline: "middle",
                        fontSize: fontSize(y(C[0])),
                        fontFamily: "Arial",
                        fontWeight: "bold",
                        children: y(C[0])
                    })
                })
            }, x)), Array(Math.max(r.size - r.bankerResults.length, 1)).fill(void 0).map((C, x) => jsx("div", {}, x))]
        }), jsxs("div", {
            className: "blue",
            style: {"--columns": r.size},
            children: [jsx("div", {
                children: jsx("svg", {
                    viewBox: "0 0 100 100",
                    xmlnsXlink: "http://www.w3.org/1999/xlink",
                    xmlns: "http://www.w3.org/2000/svg",
                    children: jsx("text", {
                        x: svgTextConfig.x,
                        y: svgTextConfig.y,
                        textAnchor: "middle",
                        dominantBaseline: "middle",
                        fontSize: fontSize(R("roadmap.pokdeng.player_1")),
                        fontFamily: "Arial",
                        fontWeight: "bold",
                        children: R("roadmap.pokdeng.player_1")
                    })
                })
            }), r.player1Results.slice(-(r.size - 1)).map((C, x) => jsx("div", {
                className: E(C),
                children: jsx("svg", {
                    viewBox: "0 0 100 100",
                    xmlnsXlink: "http://www.w3.org/1999/xlink",
                    xmlns: "http://www.w3.org/2000/svg",
                    children: jsx("text", {
                        x: svgTextConfig.x,
                        y: svgTextConfig.y,
                        textAnchor: "middle",
                        dominantBaseline: "middle",
                        fontSize: fontSize(y(C[1])),
                        fontFamily: "Arial",
                        fontWeight: "bold",
                        children: y(C[1])
                    })
                })
            }, x)), Array(Math.max(r.size - r.player1Results.length, 1)).fill(void 0).map((C, x) => jsx("div", {}, x))]
        }), jsxs("div", {
            className: "blue",
            style: {"--columns": r.size},
            children: [jsx("div", {
                children: jsx("svg", {
                    viewBox: "0 0 100 100",
                    xmlnsXlink: "http://www.w3.org/1999/xlink",
                    xmlns: "http://www.w3.org/2000/svg",
                    children: jsx("text", {
                        x: svgTextConfig.x,
                        y: svgTextConfig.y,
                        textAnchor: "middle",
                        dominantBaseline: "middle",
                        fontSize: fontSize(R("roadmap.pokdeng.player_2")),
                        fontFamily: "Arial",
                        fontWeight: "bold",
                        children: R("roadmap.pokdeng.player_2")
                    })
                })
            }), r.player2Results.slice(-(r.size - 1)).map((C, x) => jsx("div", {
                className: E(C),
                children: jsx("svg", {
                    viewBox: "0 0 100 100",
                    xmlnsXlink: "http://www.w3.org/1999/xlink",
                    xmlns: "http://www.w3.org/2000/svg",
                    children: jsx("text", {
                        x: svgTextConfig.x,
                        y: svgTextConfig.y,
                        textAnchor: "middle",
                        dominantBaseline: "middle",
                        fontSize: fontSize(y(C[1])),
                        fontFamily: "Arial",
                        fontWeight: "bold",
                        children: y(C[1])
                    })
                })
            }, x)), Array(Math.max(r.size - r.player2Results.length, 1)).fill(void 0).map((C, x) => jsx("div", {}, x))]
        }), jsxs("div", {
            className: "blue",
            style: {"--columns": r.size},
            children: [jsx("div", {
                children: jsx("svg", {
                    viewBox: "0 0 100 100",
                    xmlnsXlink: "http://www.w3.org/1999/xlink",
                    xmlns: "http://www.w3.org/2000/svg",
                    children: jsx("text", {
                        x: svgTextConfig.x,
                        y: svgTextConfig.y,
                        textAnchor: "middle",
                        dominantBaseline: "middle",
                        fontSize: fontSize(R("roadmap.pokdeng.player_3")),
                        fontFamily: "Arial",
                        fontWeight: "bold",
                        children: R("roadmap.pokdeng.player_3")
                    })
                })
            }), r.player3Results.slice(-(r.size - 1)).map((C, x) => jsx("div", {
                className: E(C),
                children: jsx("svg", {
                    viewBox: "0 0 100 100",
                    xmlnsXlink: "http://www.w3.org/1999/xlink",
                    xmlns: "http://www.w3.org/2000/svg",
                    children: jsx("text", {
                        x: svgTextConfig.x,
                        y: svgTextConfig.y,
                        textAnchor: "middle",
                        dominantBaseline: "middle",
                        fontSize: fontSize(y(C[1])),
                        fontFamily: "Arial",
                        fontWeight: "bold",
                        children: y(C[1])
                    })
                })
            }, x)), Array(Math.max(r.size - r.player3Results.length, 1)).fill(void 0).map((C, x) => jsx("div", {}, x))]
        }), jsxs("div", {
            className: "blue",
            style: {"--columns": r.size},
            children: [jsx("div", {
                children: jsx("svg", {
                    viewBox: "0 0 100 100",
                    xmlnsXlink: "http://www.w3.org/1999/xlink",
                    xmlns: "http://www.w3.org/2000/svg",
                    children: jsx("text", {
                        x: svgTextConfig.x,
                        y: svgTextConfig.y,
                        textAnchor: "middle",
                        dominantBaseline: "middle",
                        fontSize: fontSize(R("roadmap.pokdeng.player_4")),
                        fontFamily: "Arial",
                        fontWeight: "bold",
                        children: R("roadmap.pokdeng.player_4")
                    })
                })
            }), r.player4Results.slice(-(r.size - 1)).map((C, x) => jsx("div", {
                className: E(C),
                children: jsx("svg", {
                    viewBox: "0 0 100 100",
                    xmlnsXlink: "http://www.w3.org/1999/xlink",
                    xmlns: "http://www.w3.org/2000/svg",
                    children: jsx("text", {
                        x: svgTextConfig.x,
                        y: svgTextConfig.y,
                        textAnchor: "middle",
                        dominantBaseline: "middle",
                        fontSize: fontSize(y(C[1])),
                        fontFamily: "Arial",
                        fontWeight: "bold",
                        children: y(C[1])
                    })
                })
            }, x)), Array(Math.max(r.size - r.player4Results.length, 1)).fill(void 0).map((C, x) => jsx("div", {}, x))]
        }), jsxs("div", {
            className: "blue",
            style: {"--columns": r.size},
            children: [jsx("div", {
                children: jsx("svg", {
                    viewBox: "0 0 100 100",
                    xmlnsXlink: "http://www.w3.org/1999/xlink",
                    xmlns: "http://www.w3.org/2000/svg",
                    children: jsx("text", {
                        x: svgTextConfig.x,
                        y: svgTextConfig.y,
                        textAnchor: "middle",
                        dominantBaseline: "middle",
                        fontSize: fontSize(R("roadmap.pokdeng.player_5")),
                        fontFamily: "Arial",
                        fontWeight: "bold",
                        children: R("roadmap.pokdeng.player_5")
                    })
                })
            }), r.player5Results.slice(-(r.size - 1)).map((C, x) => jsx("div", {
                className: E(C),
                children: jsx("svg", {
                    viewBox: "0 0 100 100",
                    xmlnsXlink: "http://www.w3.org/1999/xlink",
                    xmlns: "http://www.w3.org/2000/svg",
                    children: jsx("text", {
                        x: svgTextConfig.x,
                        y: svgTextConfig.y,
                        textAnchor: "middle",
                        dominantBaseline: "middle",
                        fontSize: fontSize(y(C[1])),
                        fontFamily: "Arial",
                        fontWeight: "bold",
                        children: y(C[1])
                    })
                })
            }, x)), Array(Math.max(r.size - r.player5Results.length, 1)).fill(void 0).map((C, x) => jsx("div", {}, x))]
        })]
    })
}, SictanResultRoad$1 = "", Responsive$5 = "";
var SICTAN_RESULT_ROAD_FLEX_DIRECTION = (r => (r.ROW = "row", r.COLUMN = "column", r))(SICTAN_RESULT_ROAD_FLEX_DIRECTION || {});
const SictanResultRoad = r => {
    let {flexDirection: R = "column", showTitle: y = !0, tableLayout: E = !1} = r;
    const {t: C} = useTranslation(), {isForceLandscape: x} = useDeviceOrientation();
    return jsx("section", {
        className: `sictan_result_road ${R}`,
        children: x || E ? jsxs("section", {
            id: "sictan_history",
            children: [y && jsxs("div", {
                className: "title",
                children: [jsx("div", {className: "svg_history"}), jsx("div", {children: C("roadmap.history")})]
            }), r.results.slice(-r.size).reverse().map((B, N) => jsxs(React.Fragment, {
                children: [!r.abbr && N !== 0 && jsx("div", {className: "divider"}), jsxs("div", {
                    className: "sictan_record",
                    children: [jsxs("div", {
                        className: "sictan_record_dices item",
                        children: [jsx("div", {className: `svg_dice_${B[0]}`}), jsx("div", {className: `svg_dice_${B[1]}`}), jsx("div", {className: `svg_dice_${B[2]}`})]
                    }), jsx("div", {className: `item fan_${B[3]}`, children: B[3]})]
                }, N)]
            }, N))]
        }) : jsxs("article", {
            className: "result_road sictan",
            children: [r.results.length > 0 && r.results.slice(-r.size).reverse().map((B, N) => jsx("div", {
                className: `fan_${B[3]}`,
                children: jsx("div", {children: B[3]})
            }, N)), Array(Math.max(r.size - r.results.length, 1)).fill(void 0).map((B, N) => jsx("div", {}, N))]
        })
    })
}, XocDiaResultRoad$1 = "", Responsive$4 = "";
var XOC_DIA_RESULT_ROAD_FLEX_DIRECTION = (r => (r.ROW = "row", r.COLUMN = "column", r))(XOC_DIA_RESULT_ROAD_FLEX_DIRECTION || {});
const oddEvenMap = {0: "o", 1: "e"}, XocDiaResultRoad = ({
                                                             results: r,
                                                             size: R = 9,
                                                             flexDirection: y = "column",
                                                             showTitle: E,
                                                             tableLayout: C,
                                                             abbr: x
                                                         }) => {
        const {t: B} = useTranslation(), N = React.useMemo(() => r.slice(-R).reverse(), [r, R]);
        return jsx("section", {
            className: `xocdia_result_road ${y}`,
            children: jsxs("section", {
                id: "xocdia_history",
                children: [E && jsxs("div", {
                    className: "title",
                    children: [jsx("div", {className: "svg_history"}), jsx("div", {children: B("roadmap.history")})]
                }), N.map(([L, O, D], z) => jsxs(React.Fragment, {
                    children: [!x && z !== 0 && jsx("div", {className: "divider"}), jsxs("div", {
                        className: "xocdia_record",
                        children: [jsx(Dots, {
                            points: parseInt(D),
                            direction: y === "row" ? "column" : "row"
                        }), jsx("div", {
                            className: `odd_even ${oddEvenMap[O]}`,
                            children: O === "0" ? B("roadmap.xocdia.o").toUpperCase() : B("roadmap.xocdia.e").toUpperCase()
                        })]
                    })]
                }, z)), Array.from({length: R - N.length}).map((L, O) => jsxs(React.Fragment, {
                    children: [O + N.length !== 0 && jsx("div", {className: "divider"}), jsxs("div", {
                        className: "xocdia_record transparent",
                        children: [jsx(Dots, {
                            points: 0,
                            direction: y === "row" ? "column" : "row"
                        }), jsx("div", {className: "odd_even"})]
                    })]
                }, O + N.length))]
            })
        })
    }, MultiTableBaccaratRoadmap = r => {
        const {options: R = {}, isReserved: y = !1} = r, {
                hideStat: E = !1,
                hideDetailRoads: C = !1,
                hideBigRoads: x = !1,
                bigRoadSize: B = void 0,
                canvas: N = !1
            } = R, [L, O] = React.useState([]), [D, z] = React.useState(""), {orientation: F} = useDeviceOrientation(), {t: _e} = useTranslation(),
            Y = React.useMemo(() => {
                let me = L.join("").replace(/[\drbG]/g, "").match(REGEX.GROUP_SIDE);
                return me ? me.reduce((ce, ie) => (ce.push({side: ie[0], wins: ie.length}), ce), []) : []
            }, [L]);
        React.useEffect(() => {
            if (!r.shoeGameResult) return;
            let me = parseBaccaratRoadData(r.shoeGameResult || []).slice();
            JSON.stringify(L) !== JSON.stringify(me) && (O(me), r.setRoadMap(me))
        }, [r.shoeGameResult]);
        const H = (me, ce) => {
            z(D !== me ? me : "")
        };
        return jsxs(Fragment, {
            children: [jsx("section", {
                className: "roadmap",
                "data-vip-occupied": y,
                "data-reserved-string": _e("game_hall.vip_occupied"),
                children: jsxs(AskingRoadContext$3.Provider, {
                    value: D,
                    children: [!x && jsx(BaccaratBigRoad, {
                        renderWithCanvas: N,
                        size: B || {x: isMobile$1 && F.includes("portrait") ? 21 : 36, y: 6},
                        roadMap: L.map(me => me[1])
                    }), !C && jsxs("div", {
                        className: "detailed_roads",
                        children: [jsx(BaccaratBigEyeRoad, {
                            size: {x: isMobile$1 && F.includes("portrait") ? 7 : 18, y: 6},
                            bigRoadConsecutiveList: Y
                        }), jsx(BaccaratSmallRoad, {
                            size: {x: isMobile$1 && F.includes("portrait") ? 7 : 18, y: 6},
                            bigRoadConsecutiveList: Y
                        }), jsx(BaccaratCockroachRoad, {
                            size: {x: isMobile$1 && F.includes("portrait") ? 7 : 18, y: 6},
                            bigRoadConsecutiveList: Y
                        })]
                    })]
                })
            }), !E && jsx("section", {
                className: "stat",
                children: jsx(BaccaratRoadStatistics, {roadMap: L, onAsk: H, bigRoadConsecutiveList: Y})
            })]
        })
    }, MultiTableDtRoadmap = r => {
        const {options: R = {}} = r, {
                hideStat: y = !1,
                hideDetailRoads: E = !1,
                hideBigRoads: C = !1,
                bigRoadSize: x = void 0,
                canvas: B = !1
            } = R, [N, L] = React.useState([]), [O, D] = React.useState(""), {orientation: z} = useDeviceOrientation(),
            F = React.useMemo(() => {
                let Y = N.map(H => H[1]).join("").replace(DRAGON_TIGER_WINNER.T, "").match(REGEX.GROUP_SIDE);
                return Y ? Y.reduce((H, me) => (H.push({side: me[0], wins: me.length}), H), []) : []
            }, [N]);
        React.useEffect(() => {
            if (!r.shoeGameResult) return;
            let Y = parseDragonTigerRoadData(r.shoeGameResult || []).slice();
            JSON.stringify(N) !== JSON.stringify(Y) && (L(Y), r.setRoadMap(Y))
        }, [r.shoeGameResult]);
        const _e = (Y, H) => {
            D(O !== Y ? Y : "")
        };
        return jsxs(Fragment, {
            children: [jsx("section", {
                className: "roadmap",
                children: jsxs(AskingRoadContext$2.Provider, {
                    value: O,
                    children: [!C && jsx(DragonTigerBigRoad, {
                        renderWithCanvas: B,
                        size: x || {x: isMobile$1 && z.includes("portrait") ? 21 : 36, y: 6},
                        roadMap: N.map(Y => Y[1])
                    }), !E && jsxs("div", {
                        className: "detailed_roads",
                        children: [jsx(DragonTigerBigEyeRoad, {
                            size: {
                                x: isMobile$1 && z.includes("portrait") ? 7 : 18,
                                y: 6
                            }, bigRoadConsecutiveList: F
                        }), jsx(DragonTigerSmallRoad, {
                            size: {x: isMobile$1 && z.includes("portrait") ? 7 : 18, y: 6},
                            bigRoadConsecutiveList: F
                        }), jsx(DragonTigerCockroachRoad, {
                            size: {x: isMobile$1 && z.includes("portrait") ? 7 : 18, y: 6},
                            bigRoadConsecutiveList: F
                        })]
                    })]
                })
            }), !y && jsx("section", {
                className: "stat",
                children: jsx(DragonTigerRoadStatistics, {roadMap: N, onAsk: _e, bigRoadConsecutiveList: F})
            })]
        })
    }, MultiTableWin3CardRoadmap = r => {
        const [R, y] = React.useState([]), [E, C] = React.useState([]), {orientation: x} = useDeviceOrientation();
        return React.useEffect(() => {
            if (!r.shoeGameResult) return;
            let B = parseWin3CardsRoadData(r.shoeGameResult);
            JSON.stringify(R) !== JSON.stringify(B) && (y(B.slice()), r.setRoadMap(B.slice()))
        }, [r.shoeGameResult, R]), React.useEffect(() => {
            if (R.slice().length > 0) {
                const N = (O, D) => {
                    switch (O) {
                        case"0":
                            return `high_card ${Helper.mapValueToPoker(D)}`;
                        case"1":
                            return `pair ${Helper.mapValueToPoker(D)}`;
                        case"2":
                            return "straight";
                        case"3":
                            return "flush";
                        case"4":
                            return "straight_flush";
                        case"5":
                            return "three_of_a_kind";
                        case"6":
                            return "235";
                        default:
                            return ""
                    }
                };
                let L = R.map(O => [N(O[1], O[2]), N(O[3], O[4])]);
                C(L)
            }
        }, [R, r.shoeGameResult]), jsxs(Fragment, {
            children: [jsxs("section", {
                className: "roadmap win_three_card",
                children: [jsx(Win3CardsBigRoad, {
                    size: {x: isMobile$1 && x.includes("landscape") ? 15 : 39, y: 6},
                    roadMap: R.map(B => B[0])
                }), jsx("div", {
                    className: "detailed_roads win_three_card",
                    children: jsx(Win3CardsResultRoad, {
                        size: 7,
                        winner: R.map(B => B[0]),
                        dragonResults: E.map(B => B[0]),
                        phoenixResults: E.map(B => B[1])
                    })
                })]
            }), jsx("section", {className: "stat", children: jsx(Win3CardsRoadStatistics, {roadMap: R})})]
        })
    }, MultiTableThreePictureRoadmap = r => {
        const [R, y] = React.useState([]), [E, C] = React.useState([]), {orientation: x} = useDeviceOrientation();
        return React.useEffect(() => {
            if (!r.shoeGameResult) return;
            let B = parseThreePicturesRoadData(r.shoeGameResult);
            JSON.stringify(R) !== JSON.stringify(B) && (y(B.slice()), r.setRoadMap(B.slice()))
        }, [r.shoeGameResult, R]), React.useEffect(() => {
            if (R.slice().length > 0) {
                const N = (O, D) => {
                    switch (O) {
                        case"0":
                            return D;
                        case"1":
                            return `single_picture ${D}`;
                        case"2":
                            return `double_pictures ${D}`;
                        case"3":
                            return "triple_pictures";
                        default:
                            return ""
                    }
                };
                let L = R.map(O => [N(O[1], O[2]), N(O[3], O[4])]);
                C(L)
            }
        }, [R, r.shoeGameResult]), jsxs(Fragment, {
            children: [jsxs("section", {
                className: "roadmap win_three_card",
                children: [jsx(ThreePicturesBigRoad, {
                    size: {x: isMobile$1 && x.includes("landscape") ? 15 : 39, y: 6},
                    roadMap: R.map(B => B[0])
                }), jsx("div", {
                    className: "detailed_roads win_three_card",
                    children: jsx(ThreePicturesResultRoad, {
                        size: 7,
                        winner: R.map(B => B[0]),
                        dragonResults: E.map(B => B[0]),
                        phoenixResults: E.map(B => B[1])
                    })
                })]
            }), jsx("section", {className: "stat", children: jsx(ThreePicturesRoadStatistics, {roadMap: R})})]
        })
    }, MultiTableTeenPattiRoadmap = r => {
        const {options: R = {}} = r, {
            hideStat: y = !1,
            hideDetailRoads: E = !1,
            bigRoadSize: C = void 0,
            canvas: x = !1,
            shoeGameResultIndex: B = 0
        } = R, [N, L] = React.useState([]), [O, D] = React.useState([]), {orientation: z} = useDeviceOrientation();
        return React.useEffect(() => {
            if (!r.shoeGameResult) return;
            let F = parseTeenPattiRoadData(r.shoeGameResult, B);
            JSON.stringify(N) !== JSON.stringify(F) && (L(F.slice()), r.setRoadMap(F.slice()))
        }, [r.shoeGameResult, N]), React.useEffect(() => {
            if (N.slice().length > 0) {
                const _e = H => {
                    switch (H) {
                        case"0":
                            return "high_card";
                        case"1":
                            return "pair";
                        case"2":
                            return "flush";
                        case"3":
                            return "straight";
                        case"4":
                            return "straight_flush";
                        case"5":
                        case"6":
                            return "three_of_a_kind";
                        default:
                            return ""
                    }
                };
                let Y = N.map(H => [_e(H[1]), _e(H[2])]);
                D(Y)
            }
        }, [N, r.shoeGameResult]), jsxs(Fragment, {
            children: [jsxs("section", {
                className: "roadmap win_three_card",
                children: [jsx(TeenPattiBigRoad, {
                    size: {x: isMobile$1 && z.includes("small-landscape") ? 15 : 39, y: 6},
                    roadMap: N.map(F => F[0])
                }), jsx("div", {
                    className: "detailed_roads win_three_card",
                    children: jsx(TeenPattiResultRoad, {
                        size: 7,
                        winner: N.map(F => F[0]),
                        playerAResults: O.map(F => F[0]),
                        playerBResults: O.map(F => F[1])
                    })
                })]
            }), jsx("section", {className: "stat", children: jsx(TeenPattiRoadStatistics, {roadMap: N})})]
        })
    }, MultiTableSicboRoadmap = r => {
        const [R, y] = React.useState([]);
        return React.useEffect(() => {
            if (!r.shoeGameResult) return;
            let E = parseSicboRoadData(r.shoeGameResult || []).slice();
            y(E), r.setRoadMap(E)
        }, [r.shoeGameResult]), jsx("section", {
            className: "roadmap",
            children: jsx(SicboResultRoad, {
                showTitle: !1,
                flexDirection: SICBO_RESULT_ROAD_FLEX_DIRECTION.ROW,
                size: 8,
                results: R,
                tableLayout: !0
            })
        })
    }, MultiTableHiloRoadmap = r => {
        const [R, y] = React.useState([]);
        return React.useEffect(() => {
            if (!r.shoeGameResult) return;
            let E = parseHiLoRoadData(r.shoeGameResult || []).slice();
            y(E), r.setRoadMap(E)
        }, [r.shoeGameResult]), jsx("section", {
            className: "roadmap",
            children: jsx(HiLoResultRoad, {
                showTitle: !1,
                flexDirection: HILO_RESULT_ROAD_FLEX_DIRECTION.ROW,
                size: 8,
                results: R,
                tableLayout: !0
            })
        })
    }, MultiTableSictanRoadmap = r => {
        const [R, y] = React.useState([]);
        return React.useEffect(() => {
            if (!r.shoeGameResult) return;
            let E = parseSictanRoadData(r.shoeGameResult || []).slice();
            y(E), r.setRoadMap(E)
        }, [r.shoeGameResult]), jsx("section", {
            className: "roadmap",
            children: jsx(SictanResultRoad, {
                showTitle: !1,
                flexDirection: SICTAN_RESULT_ROAD_FLEX_DIRECTION.ROW,
                size: 9,
                results: R,
                tableLayout: !0
            })
        })
    }, MultiTableXocDiaRoadmap = r => {
        const [R, y] = React.useState([]);
        return React.useEffect(() => {
            if (!r.shoeGameResult) return;
            let E = parseXicDiaRoadData(r.shoeGameResult || []).slice();
            y(E), r.setRoadMap(E)
        }, [r.shoeGameResult]), jsx("section", {
            className: "roadmap",
            children: jsx(XocDiaResultRoad, {
                showTitle: !1,
                results: R,
                size: 9,
                flexDirection: XOC_DIA_RESULT_ROAD_FLEX_DIRECTION.ROW
            })
        })
    }, MultiTableRouletteRoadmap = r => {
        const [R, y] = React.useState([]);
        return React.useEffect(() => {
            if (!r.shoeGameResult) return;
            let E = parseRouletteRoadData(r.shoeGameResult || []).slice();
            y(E), r.setRoadMap(E)
        }, [r.shoeGameResult]), jsx("section", {
            className: "roadmap",
            children: jsx(RouletteResultRoad, {
                betable: !1,
                hasToggleButton: !1,
                showPanalDesription: !1,
                size: 10,
                results: R.map(E => parseInt(E.match(REGEX.LAST_NUMBER)[0]))
            })
        })
    }, MultiTableFPCRoadmap = r => {
        const [R, y] = React.useState([]);
        return React.useEffect(() => {
            if (!r.shoeGameResult) return;
            let E = parseFPCRoadData(r.shoeGameResult || []).slice();
            y(E), r.setRoadMap(E)
        }, [r.shoeGameResult]), jsx("section", {
            className: "roadmap",
            children: jsx(FPCResultRoad, {
                showTitle: !1,
                flexDirection: FPC_RESULT_ROAD_FLEX_DIRECTION.ROW,
                size: 8,
                results: R,
                tableLayout: !0
            })
        })
    }, MultiTableAndarBaharRoadmap = r => {
        const [R, y] = React.useState([]), {orientation: E} = useDeviceOrientation();
        return React.useEffect(() => {
            if (!r.shoeGameResult) return;
            let C = parseAndarBaharRoadData(r.shoeGameResult);
            JSON.stringify(R) !== JSON.stringify(C) && (y(C.slice()), r.setRoadMap(C.slice()))
        }, [r.shoeGameResult, R]), jsx("section", {
            className: "roadmap andar_bahar",
            children: jsx("div", {
                className: "detailed_roads andar_bahar",
                children: jsx(AndarBaharBeadRoad, {
                    size: {x: E.includes("landscape") ? 19 : isMobile$1 ? 17 : 19, y: 6},
                    roadMap: R
                })
            })
        })
    }, MultiTablePokDengRoadmap = r => {
        const [R, y] = React.useState([]);
        useDeviceOrientation();
        const [E, C] = React.useState([]), [x, B] = React.useState([]), [N, L] = React.useState(1), [O, D] = React.useState(1);
        return React.useEffect(() => {
            let z = R.map(Y => Y.split(",").slice(1)),
                F = Array(5).fill(void 0).map((Y, H) => z.map(me => me[H][0] === "B")),
                _e = Array(5).fill(void 0).map((Y, H) => z.map(me => ["P", "A"].includes(me[H][2])));
            C(F), B(_e), L(Math.max(...F.map(Y => Y.filter(H => H).length), 1)), D(Math.max(..._e.map(Y => Y.filter(H => H).length), 1))
        }, [R]), React.useEffect(() => {
            if (!r.shoeGameResult) return;
            let z = parsePokdengRoadData(r.shoeGameResult);
            JSON.stringify(R) !== JSON.stringify(z) && (y(z.slice()), r.setRoadMap(z.slice()))
        }, [r.shoeGameResult, R]), jsx("section", {
            className: "roadmap pok_deng",
            children: jsx("div", {
                className: "detailed_roads pok_deng",
                children: jsx(PokdengResultRoad, {
                    size: 11,
                    winner: R.map((z, F) => E.map((_e, Y) => _e[F] ? Y : "").join("")),
                    bankerResults: R.map(z => z.split(",")[0]),
                    player1Results: R.map(z => z.split(",")[1]),
                    player2Results: R.map(z => z.split(",")[2]),
                    player3Results: R.map(z => z.split(",")[3]),
                    player4Results: R.map(z => z.split(",")[4]),
                    player5Results: R.map(z => z.split(",")[5])
                })
            })
        })
    }, MultiTableBullBullRoadmap = r => {
        const [R, y] = React.useState([]);
        return useDeviceOrientation(), React.useEffect(() => {
            if (!r.shoeGameResult) return;
            let E = parseBullBullRoadData(r.shoeGameResult);
            JSON.stringify(R) !== JSON.stringify(E) && (y(E.slice()), r.setRoadMap(E.slice()))
        }, [r.shoeGameResult, R]), jsx("section", {
            className: "roadmap bull_bull",
            children: jsx("div", {
                className: "detailed_roads bull_bull",
                children: jsx(BullBullResultRoad, {
                    size: 6,
                    winner: R.map(E => parseInt(E[0]).toString(2).padStart(3, "0")),
                    bankerResults: R.map(E => E[1]),
                    player1Results: R.map(E => E[2]),
                    player2Results: R.map(E => E[3]),
                    player3Results: R.map(E => E[4])
                })
            })
        })
    }, IgnoreVIPContext = React.createContext(void 0), IgnoreVIPProvider = ({children: r}) => {
        const [R, y] = React.useState(!1), C = {
            ignoreVIP: R, setIgnoreVIP: y, toggleIgnoreVIP: () => {
                y(x => !x)
            }
        };
        return jsx(IgnoreVIPContext.Provider, {value: C, children: r})
    }, useIgnoreVIP = () => React.useContext(IgnoreVIPContext) !== void 0,
    initState$1 = {firstChipIndex: 0, selectedChip: 0}, GameHallSelectedChipContext = React.createContext(initState$1),
    GhSelectedChipProvider = ({children: r}) => {
        const {gameTableInfo: R} = React.useContext(GameTableContext), y = R.tableInfo.tableId === -100;
        return useIgnoreVIP(), jsx(GameHallSelectedChipContext.Provider, {
            value: useGameTableChips(y ? 5 : 3, !0, y ? IN_GAME_SESSION_STORAGE_KEYS.IN_GAME_SELECTED_CHIP : IN_GAME_SESSION_STORAGE_KEYS.FAST_BET_SELECTED_CHIP),
            children: r
        })
    }, useGhSelectedChip = () => ({...React.useContext(GameHallSelectedChipContext)}), MutliTableBettingViews = "",
    AndarBaharBettingView = r => {
        useTranslation();
        const [R, y] = React.useState("-2");
        return React.useEffect(() => {
            if (r.rawCardResults) {
                const E = r.rawCardResults;
                E[0][0] !== R && y(E[0][0])
            }
        }, [r.rawCardResults]), jsx(Fragment, {
            children: jsx("div", {
                className: "betting_view andar_bahar",
                children: jsx("div", {
                    className: "muli_play_betting_panel",
                    children: jsx("div", {
                        id: "house_card_container",
                        children: R && R !== "-2" ? jsx("div", {
                            className: "house_card",
                            children: jsx(Poker$2, {value: parseInt(R)})
                        }) : jsx("div", {className: "house_card", id: "unopened_house_card", children: "?"})
                    })
                })
            })
        })
    }, MultiTableConfirmPanel = r => {
        let {
            pendingBetAmounts: R,
            betState: y,
            tableInfo: E,
            confirm: C,
            cancel: x,
            gameType: B,
            lastBetAmounts: N,
            betAmounts: L,
            repeat: O,
            gameTableInfo: D,
            roadMap: z
        } = r.p;
        const [F, _e] = React.useState(!1);
        React.useEffect(() => {
            Object.values(R).some(me => me !== 0) ? _e(y == BET_STATE.BETTING) : _e(!1)
        }, [R]);
        const Y = React.useCallback(() => {
            let me = {...N};
            return B == AltGameType.TwoSidesPokdeng && (me = Object.fromEntries(Object.entries(me).filter(([ce, ie]) => parseInt(ce) < 10))), Object.values(me).some(ce => ce !== 0)
        }, [N, B]), H = () => {
            let me = [];
            const ce = E.currentShoeGameResult[0].length;
            [GameType.Baccarat, GameType.Quick, GameType.See, GameType.InsuredBaccarat, GameType.VIP].includes(E.gameType) && (ce >= SIDE_BET_LIMIT_50.rounds ? me = SIDE_BET_LIMIT_30.betTypes.concat(SIDE_BET_LIMIT_50.betTypes) : ce >= SIDE_BET_LIMIT_30.rounds && (me = SIDE_BET_LIMIT_30.betTypes)), O(!1, me)
        };
        return jsx(Fragment, {
            children: jsxs("div", {
                className: "confirm_bets",
                children: [F && jsxs(Fragment, {
                    children: [jsx("button", {
                        className: "confirm", onClick: () => {
                            C(B != AltGameType.TwoSidesPokdeng, E.tableId, E.gameStatus.gameRoundId), _e(!1)
                        }, children: jsx("div", {className: "svg_confirm"})
                    }), jsx("button", {className: "cancel", onClick: x, children: jsx("div", {className: "svg_cancel"})})]
                }), y === BET_STATE.BETTING && Y() && Object.values(R).every(me => me === 0) && Object.values(L).every(me => me === 0) && jsx("button", {
                    className: "repeat",
                    onClick: () => H(),
                    children: jsx("div", {className: "svg_repeat"})
                })]
            })
        })
    }, MultiTableGameCover = r => {
        let {onClick: R, gameType: y} = r, {imgPath: E} = useLogoLoader(y), C = useGameLoadingBgLoader(y);
        return jsx(Fragment, {
            children: jsx("section", {
                className: "game_backdrop",
                style: {backgroundImage: `url(${C})`},
                onClick: R,
                children: jsx("div", {className: "logo", style: {backgroundImage: `url(${E})`}})
            })
        })
    }, MultiHall$3 = "", Responsive$3 = "", useEnterGameTable = () => {
        const r = useNavigate(), {presetAplayer: R} = useFlvPlayer(), y = React.useContext(SetFixSizeContext), {
            setUpGameTableSplashScreen: E,
            getGameName: C
        } = React.useContext(GameCacheContext), {isEnable: x} = React.useContext(GamesLayoutContainerContext), {
            enterGameTable: B,
            connected: N,
            logUserAction: L
        } = React.useContext(SFSCoreContext), {httpState: O} = React.useContext(HttpContext);
        let {update: D, SEXY_GAME_TABLES: z, CLASSIC_BACCARAT_GAME_TABLES: F} = React.useContext(GameSessionContext);
        const {forceClose: _e} = useGameTablePopups(),
            Y = useLocation(), {getUserActionMessage: H} = useUserActionMessage(), [me, ce] = React.useState(!1);

        function ie(Ce, Ne) {
            React.startTransition(() => {
                r(Ce, {state: Ne})
            })
        }

        const Be = async (Ce, Ne, we) => {
            _e();
            const Me = z.includes(Ne), ke = F.includes(Ne);
            let Fe;
            Me && (Fe = SpecialGames.Sexy), ke && (Fe = SpecialGames.ClassicBaccarat), D(GAME_SESSION_ACTIONS_TYPE.LOADING), Y.state && Object.prototype.hasOwnProperty.call(Y.state, "gameType") && (Y.state.gameType = Fe || we), Re(Ce, we)
        }, ve = async Ce => {
            Logger$1.log("navigateToGamePage"), y(!0), await R(), D(GAME_SESSION_ACTIONS_TYPE.LOADING), await new Promise(Ne => setTimeout(Ne, 10)), x ? ce(!me) : (L(H({
                actionType: UserActionType.CUSTOM,
                actionDetails: {
                    action: "navigateToGamePage",
                    details: `[DEBUG] GameHall -> Go to gameTablePage updated ${`/gameTablePage/gameType=${C(Ce)}`} ${{gameType: Ce}}`
                }
            }).stringify()), ie(`/gameTablePage/gameType=${C(Ce)}`, {gameType: Ce}))
        }, Re = React.useCallback((Ce, Ne, we) => {
            let Me = EnterType.Normal;
            switch (Ne) {
                case GameType.Baccarat:
                case GameType.Quick:
                case GameType.InsuredBaccarat:
                case GameType.DT:
                    Me = EnterType.Normal;
                    break;
                case GameType.See:
                    Me = EnterType.SeecardSide;
                    break;
                case GameType.VIP:
                    Me = we || EnterType.Side;
                    break;
                case GameType.BullBull:
                case GameType.Win3Card:
                case AltGameType.ThreePictures:
                case AltGameType.TeenPatti:
                case GameType.TeenPatti:
                case GameType.Pokdeng:
                case GameType.Roulette:
                case GameType.Sicbo:
                case AltGameType.HiLo:
                case AltGameType.SicTan:
                case GameType.AndarBahar:
                case GameType.UTH:
                case GameType.Pokdeng:
                case AltGameType.TwoSidesPokdeng:
                case GameType.CasinoWar:
                case GameType.Blackjack:
                case GameType.FPC:
                case GameType.XocDia:
                    Me = EnterType.Side;
                    break;
                default:
                    Logger$1.warn("Unexpected game type!");
                    return
            }
            B(Ce, Me)
        }, [N, O]);
        return {enterTable: Re, navigateToGamePage: ve, enterGameByTableId: Be, showGamePage: me}
    }, use4kRootStyle = r => {
        React.useEffect(() => {
            window.screen.width >= 3840 && window.screen.height >= 2160 ? document.documentElement.style.setProperty("font-size", r ? "24px" : "") : document.documentElement.style.setProperty("font-size", "16px")
        }, [window.screen.width, window.screen.height])
    }, BottomBarWithChips = r => {
        useAvailableChips();
        const {showHandicap: R = !1, isFastBet: y = !1} = r, {
            chipDisplayAttrs: E,
            store: C = IN_GAME_SESSION_STORAGE_KEYS.FAST_BET_SELECTED_CHIP,
            shownChips: x,
            chips: B,
            selectedChip: N,
            setSelectedChip: L,
            jumpToIndex: O
        } = useGhSelectedChip(), {t: D} = useTranslation(), [z] = React.useContext(UserInfoContext), {
            toggleSideHall: F,
            setToggleSideHall: _e
        } = React.useContext(MultiSideHallToggleContext);
        useMultiTableTotalBets();
        let {isTrial: Y} = React.useContext(GameSessionContext);
        const H = useDisplayCurrency(), me = React.useMemo(() => B, [B]);
        let {togglePopup: ce} = useGameTablePopups("");
        return me && jsxs("div", {
            id: "bottom_info",
            children: [y ? isDesktop$1 ? jsx("div", {
                id: "financial_infos",
                children: jsxs("div", {children: [jsx("h4", {children: D("game_table.balanace")}), jsx("div", {children: Helper.formatCurrency(H, Helper.formatMoney(z.amount / 100))})]})
            }) : jsx("div", {
                id: "financial_infos",
                children: jsxs("div", {children: [jsx("h4", {children: D("game_table.balanace")}), jsx("div", {children: Helper.formatCurrency(H, Helper.formatMoney(z.amount / 100))})]})
            }) : jsxs("div", {
                id: "financial_info",
                children: [jsx("h4", {children: D("game_table.balanace")}), jsx("div", {children: Helper.formatCurrency(H, Helper.formatMoney(z.amount / 100))}), Y.current && jsx("div", {
                    className: "trial_label",
                    children: `${D("game_table.trial")}`
                })]
            }), jsxs("section", {
                style: {"--shown_chips": x},
                id: "chips_selection",
                "aria-orientation": "horizontal",
                children: [!y && jsx("button", {
                    id: "custom_chips", "aria-checked": !1, onClick: () => {
                        ce("custom_chip")
                    }, children: jsx("div", {className: "svg_menu_custom_chips"})
                }), jsx(ChipsChoices, {
                    jumpTo: O,
                    shownChips: x,
                    storage: C,
                    chips: me,
                    mobileType: "horizontal",
                    chipDisplayAttrs: E,
                    setSelectedChip: L,
                    selectedChip: N
                })]
            }), !y && (isMobile$1 ? jsx(CommissionToggle, {}) : jsxs("div", {
                className: "controls",
                children: [jsx(CommissionToggle, {}), jsx("button", {
                    className: "multi_side_hall_toggle",
                    onClick: () => _e(!F),
                    "aria-checked": F,
                    children: jsx("div", {className: "svg_side_hall"})
                })]
            })), jsx("section", {className: "handicap_info", children: R && jsx(Handicap, {ignoreVIP: !0})})]
        }) || jsx(Fragment, {})
    }, MultiSideHall$1 = "", Responsive$2 = "", MultiSideHallTable$1 = "", Responsive$1 = "", MultiSideHallTable = r => {
        var Re;
        const {t: R, i18n: y} = useTranslation();
        React.useContext(ServerConfigContext);
        let {settings: E, changeSetting: C} = React.useContext(SettingsContext);
        const {gameHallInfo: x} = React.useContext(GameHallContext), [B, N] = React.useState(!0), [L, O] = React.useState(!1),
            D = useHideMultiTable(TABLE_TYPE.MULTI, r.tableInfo.gameType, r.tableInfo.tableName);
        let {imgPath: z} = useLogoLoader(r.tableInfo.gameType), F = useGameLoadingBgLoader(r.tableInfo.gameType);
        const _e = React.useContext(MultiHallCollectionTablesRefContext), Y = React.useContext(OutOfVwContext),
            H = React.useMemo(() => {
                var Ce;
                return !!Y.has((Ce = _e.current[r.tableIndex]) == null ? void 0 : Ce.table)
            }, [Y]), me = useGameTableTitle(r.tableInfo.gameType, r.tableInfo.tableName, !1), ce = React.useMemo(() => {
                if (r.tableInfo.tableStatus === TableStatus.Maintenance) return;
                const Ce = x.goodRoadInfos.find(Ne => Ne.tableId === r.tableInfo.tableId && [GoodRoadType.LongBanker, GoodRoadType.LongPlayer, GoodRoadType.BigRoadJump, GoodRoadType.SinglePlayerDoubleBanker, GoodRoadType.SingleBankerDoublePlayer, GoodRoadType.Chi, GoodRoadType.ChiEveryBanker, GoodRoadType.ChiEveryPlayer, GoodRoadType.ChiEveryOtherBanker, GoodRoadType.ChiEveryOtherPlayer].includes(Ne.type));
                if (Ce) return jsx("div", {className: "good_road_label", children: R(`gamehall_table.good_road.${Ce.type}`)})
            }, [x.goodRoadInfos]), ie = React.useCallback(() => {
                const Ce = [...E.multiPlayBlacklist], [Ne, we] = [r.tableInfo.gameType, r.tableInfo.tableId],
                    Me = Ce.findIndex(ke => ke.gameType === Ne && ke.tableId === we);
                Me === -1 ? Ce.push({gameType: Ne, tableId: we}) : Ce.splice(Me, 1), C("multiPlayBlacklist", Ce)
            }, [r.tableInfo.gameType, r.tableInfo.tableId, E.multiPlayBlacklist]), Be = React.useCallback(() => {
                const Ce = [...E.multiPlayFavorites], [Ne, we] = [r.tableInfo.gameType, r.tableInfo.tableId],
                    Me = Ce.findIndex(ke => ke.gameType === Ne && ke.tableId === we);
                Me === -1 ? Ce.push({gameType: Ne, tableId: we}) : Ce.splice(Me, 1), C("multiPlayFavorites", Ce)
            }, [E.multiPlayFavorites]);
        React.useEffect(() => {
            const [Ce, Ne] = [r.tableInfo.gameType, r.tableInfo.tableId];
            O(!!E.multiPlayFavorites.find(we => we.gameType === Ce && we.tableId === Ne))
        }, [E.multiPlayFavorites]), React.useEffect(() => {
            const [Ce, Ne] = [r.tableInfo.gameType, r.tableInfo.tableId],
                we = E.multiPlayBlacklist.find(Me => Me.gameType === Ce && Me.tableId === Ne);
            N(!we)
        }, [E.multiPlayBlacklist]);
        const ve = React.useMemo(() => {
            if (H) return jsx("div", {className: "out_of_view_placeholder"});
            if (r.tableInfo.tableStatus === TableStatus.Maintenance) return jsx(MaintenancePanel, {className: "game_backdrop"});
            switch (r.tableInfo.gameType) {
                case GameType.Baccarat:
                case GameType.Quick:
                case GameType.See:
                case GameType.InsuredBaccarat:
                case GameType.VIP:
                    return jsx(BaccaratBigRoad, {
                        size: {x: 20, y: 6},
                        roadMap: parseBaccaratRoadData(r.tableInfo.currentShoeGameResult || []).slice().map(ke => ke[1])
                    });
                case GameType.DT:
                    return jsx(DragonTigerBigRoad, {
                        size: {x: 20, y: 6},
                        roadMap: parseDragonTigerRoadData(r.tableInfo.currentShoeGameResult || []).slice().map(ke => ke[1])
                    });
                case GameType.Win3Card:
                    return jsx(Win3CardsBigRoad, {
                        size: {x: 20, y: 6},
                        roadMap: parseWin3CardsRoadData(r.tableInfo.currentShoeGameResult || []).slice().map(ke => ke[0])
                    });
                case AltGameType.ThreePictures:
                    return jsx(ThreePicturesBigRoad, {
                        size: {x: 20, y: 6},
                        roadMap: parseThreePicturesRoadData(r.tableInfo.currentShoeGameResult || []).slice().map(ke => ke[0])
                    });
                case GameType.TeenPatti:
                    return jsx(TeenPattiBigRoad, {
                        size: {x: 20, y: 6},
                        roadMap: parseTeenPattiRoadData(r.tableInfo.currentShoeGameResult || [], 0).slice().map(ke => ke[0])
                    });
                case AltGameType.TeenPatti:
                    return jsx(TeenPattiBigRoad, {
                        size: {x: 20, y: 6},
                        roadMap: parseTeenPattiRoadData(r.tableInfo.currentShoeGameResult || [], 2).slice().map(ke => ke[0])
                    });
                case GameType.Roulette:
                    return jsx(RouletteResultRoad, {
                        betable: !1,
                        hasToggleButton: !1,
                        showPanalDesription: !1,
                        size: 10,
                        results: parseRouletteRoadData(r.tableInfo.currentShoeGameResult || []).slice().map(ke => parseInt(ke.match(REGEX.LAST_NUMBER)[0]))
                    });
                case GameType.Pokdeng:
                case AltGameType.TwoSidesPokdeng:
                    const Ce = parsePokdengRoadData(r.tableInfo.currentShoeGameResult || []);
                    let Ne = Ce.map(ke => ke.split(",").slice(1)),
                        we = Array(5).fill(void 0).map((ke, Fe) => Ne.map($e => $e[Fe][0] === "B"));
                    return jsx(PokdengResultRoad, {
                        size: 11,
                        winner: Ce.map((ke, Fe) => we.map(($e, Ve) => $e[Fe] ? Ve : "").join("")),
                        bankerResults: Ce.map(ke => ke.split(",")[0]),
                        player1Results: Ce.map(ke => ke.split(",")[1]),
                        player2Results: Ce.map(ke => ke.split(",")[2]),
                        player3Results: Ce.map(ke => ke.split(",")[3]),
                        player4Results: Ce.map(ke => ke.split(",")[4]),
                        player5Results: Ce.map(ke => ke.split(",")[5])
                    });
                case GameType.BullBull:
                    const Me = parseBullBullRoadData(r.tableInfo.currentShoeGameResult || [[]]);
                    return jsx(BullBullResultRoad, {
                        size: 6,
                        winner: Me.map(ke => parseInt(ke[0]).toString(2).padStart(3, "0")),
                        bankerResults: Me.map(ke => ke[1]),
                        player1Results: Me.map(ke => ke[2]),
                        player2Results: Me.map(ke => ke[3]),
                        player3Results: Me.map(ke => ke[4]),
                        gameHall: !0
                    });
                case GameType.Sicbo:
                    return jsx(SicboResultRoad, {
                        showTitle: !1,
                        flexDirection: SICBO_RESULT_ROAD_FLEX_DIRECTION.ROW,
                        size: 11,
                        results: parseSicboRoadData(r.tableInfo.currentShoeGameResult || []).slice(),
                        tableLayout: !0,
                        abbr: !0
                    });
                case AltGameType.HiLo:
                    return jsx(HiLoResultRoad, {
                        showTitle: !1,
                        flexDirection: HILO_RESULT_ROAD_FLEX_DIRECTION.ROW,
                        size: 11,
                        results: parseHiLoRoadData(r.tableInfo.currentShoeGameResult || []).slice(),
                        tableLayout: !0,
                        abbr: !0
                    });
                case AltGameType.SicTan:
                    return jsx(SictanResultRoad, {
                        showTitle: !1,
                        flexDirection: SICTAN_RESULT_ROAD_FLEX_DIRECTION.ROW,
                        size: 11,
                        results: parseSictanRoadData(r.tableInfo.currentShoeGameResult || []).slice(),
                        tableLayout: !0,
                        abbr: !0
                    });
                case GameType.FPC:
                    return jsx(FPCResultRoad, {
                        showTitle: !1,
                        flexDirection: FPC_RESULT_ROAD_FLEX_DIRECTION.ROW,
                        size: 10,
                        results: parseFPCRoadData(r.tableInfo.currentShoeGameResult || []).slice(),
                        tableLayout: !0,
                        abbr: !0
                    });
                case GameType.AndarBahar:
                    return jsx(AndarBaharBeadRoad, {
                        size: {x: 20, y: 6},
                        roadMap: parseAndarBaharRoadData(r.tableInfo.currentShoeGameResult || []).slice()
                    });
                case GameType.XocDia:
                    return jsx(XocDiaResultRoad, {
                        showTitle: !1,
                        results: parseXicDiaRoadData(r.tableInfo.currentShoeGameResult || []).slice(),
                        size: 9,
                        flexDirection: XOC_DIA_RESULT_ROAD_FLEX_DIRECTION.ROW,
                        abbr: !0
                    });
                default:
                    return D ? jsx(Fragment, {}) : jsx("section", {
                        className: "game_backdrop",
                        style: {backgroundImage: `url(${F})`},
                        children: jsx("div", {className: "logo", style: {backgroundImage: `url(${z})`}})
                    })
            }
        }, [r.tableInfo.currentShoeGameResult, r.tableInfo.tableStatus, F, z, H]);
        return jsxs("article", {
            className: `multi_side_hall_table ${H ? "out_of_view" : ""}`,
            "aria-disabled": !B,
            "aria-hidden": D,
            ref: Ce => _e.current[r.tableIndex] = Ce ? {
                gameType: r.tableInfo.gameType,
                tableId: r.tableInfo.tableId,
                table: Ce
            } : null,
            children: [jsxs("section", {
                className: "head",
                children: [jsx("div", {className: "game_type", children: me}), jsx("div", {
                    className: "table_name",
                    children: r.tableInfo.tableName
                }), jsx("button", {
                    className: "visibility",
                    onClick: () => ie(),
                    "aria-checked": B,
                    children: jsx("div", {className: `svg_eye_${B ? "on" : "off"}`})
                }), jsx("button", {
                    className: "pin",
                    onClick: () => Be(),
                    "aria-checked": L,
                    children: jsx("div", {className: "svg_pin"})
                }), r.tableInfo.tableStatus !== TableStatus.Maintenance && jsx("div", {
                    className: "timer",
                    children: r.tableInfo.tableStatus === TableStatus.Shuffle ? jsx("div", {
                        className: "shuffle",
                        children: jsx("div", {className: "svg_shuffle"})
                    }) : (Re = r.tableInfo) != null && Re.countDown && r.tableInfo.countDown !== -1 && r.tableInfo.gameStatus.tableStatus === TableStatus.CanBet ? isMobile$1 ? jsx(MobileTimer, {
                        timerClass: "side_hall_mobile_timer",
                        duration: r.tableInfo.countDown
                    }) : jsx(Timer, {
                        thickness: 2,
                        size: 26,
                        duration: r.tableInfo.countDown - Math.round((Date.now() - r.tableInfo.gameStatus.timestamp) / 1e3),
                        labelClass: "gamehall_table_timer"
                    }) : jsx("div", {})
                }), ce]
            }), jsxs("button", {
                className: "road_map",
                onClick: () => r.onClick(r.tableInfo.tableId),
                children: [ve, jsx("div", {className: "anchor", children: jsx("div", {className: "svg_anchor"})})]
            })]
        })
    }, SideHallCategory = [{
        category: "baccarat",
        gameTypes: ["classic", `${GameType.Baccarat}`, `${GameType.Quick}`, "sexy", `${GameType.InsuredBaccarat}`, `${GameType.See}`, `${GameType.VIP}`]
    }, {
        category: "asia",
        gameTypes: [`${GameType.DT}`, `${GameType.BullBull}`, `${GameType.Sicbo}`, `${AltGameType.SicTan}`, `${GameType.XocDia}`, `${GameType.FPC}`, `${AltGameType.ThreePictures}`, `${GameType.Win3Card}`]
    }, {category: "europe", gameTypes: [`${GameType.Roulette}`]}, {
        category: "global",
        gameTypes: [`${GameType.AndarBahar}`, `${AltGameType.TeenPatti}`, `${GameType.Pokdeng}`, `${AltGameType.TwoSidesPokdeng}`, `${AltGameType.HiLo}`]
    }], MultiSideHall = r => {
        const {t: R} = useTranslation(), {preloadConfig: y} = React.useContext(ServerConfigContext), {filteredGameHallInfo: E} = React.useContext(GameHallContext), {
            toggleSideHall: C,
            setToggleSideHall: x
        } = React.useContext(MultiSideHallToggleContext), {
            settings: B,
            changeSetting: N
        } = React.useContext(SettingsContext), [L, O] = React.useState(!1), D = React.useRef(null), z = React.useRef(null);
        let {onSystemToast: F} = useToast();
        const _e = React.useRef([]), Y = React.useRef(null), H = useOutOfVW({
            root: Y,
            refs: _e,
            verticalThershold: "50%",
            horizontalThershold: "0%",
            refershDependency: [E]
        });
        React.useEffect(() => {
            var Ce;
            const Re = Ne => Ne.target === z.current && x(!1);
            return isMobile$1 && ((Ce = z.current) == null || Ce.addEventListener("touchend", Re, {capture: !0})), () => {
                var Ne;
                return (Ne = z.current) == null ? void 0 : Ne.removeEventListener("touchend", Re, {capture: !0})
            }
        }, []), React.useEffect(() => {
            const Re = Ce => {
                var Ne;
                return !((Ne = D.current) != null && Ne.contains(Ce.target)) && x(!1)
            };
            return isMobile$1 && window.addEventListener("touchend", Re, {capture: !0}), () => window.removeEventListener("touchend", Re, {capture: !0})
        }, []);
        const me = Re => {
            const Ce = SideHallCategory.map(we => we.gameTypes).flat().filter(we => ["sexy", "classic"].includes(we) || (y == null ? void 0 : y.whiteLabel.supportedGamesTypes[SupportedGamesTypesMapping[we]]));
            Object.entries(Re).filter(we => Ce.find(Me => Me === we[0])).some(we => we[1]) ? N("multiPlayFilter", Re) : F({
                duration: 1.5,
                content: R("messages.multi_side_hall_filter")
            })
        }, ce = Re => {
            const Ce = {...B.multiPlayFilter}, Ne = SideHallCategory.find(Me => Me.category === Re).gameTypes,
                we = Ne.filter(Me => Object.prototype.hasOwnProperty.call(CombineGamesTypes, SupportedGamesTypesMapping[Me]) ? CombineGamesTypes[SupportedGamesTypesMapping[Me]].every(ke => B.multiPlayFilter[ke]) : B.multiPlayFilter[Me]).length;
            Ne.forEach(Me => {
                Object.prototype.hasOwnProperty.call(CombineGamesTypes, SupportedGamesTypesMapping[Me]) ? CombineGamesTypes[SupportedGamesTypesMapping[Me]].forEach(ke => {
                    Ce[ke] = we === Ne.length ? !Ce[ke] : !0
                }) : Ce[Me] = we === Ne.length ? !Ce[Me] : !0
            }), me(Ce)
        }, ie = Re => {
            const Ce = {...B.multiPlayFilter};
            Object.prototype.hasOwnProperty.call(CombineGamesTypes, SupportedGamesTypesMapping[Re]) ? CombineGamesTypes[SupportedGamesTypesMapping[Re]].forEach(Ne => Ce[Ne] = !Ce[Ne]) : Ce[Re] = !Ce[Re], me(Ce)
        }, Be = React.useCallback(Re => {
            const Ce = SideHallCategory.find(we => we.category === Re).gameTypes.filter(we => ["sexy", "classic"].includes(we) && (y == null ? void 0 : y.whiteLabel.supportedGamesTypes[SupportedGamesTypesMapping[GameType.Baccarat]]) || (y == null ? void 0 : y.whiteLabel.supportedGamesTypes[SupportedGamesTypesMapping[we]]));
            if (Ce.length === 0) return null;
            const Ne = Ce.filter(we => B.multiPlayFilter[we]).length;
            return jsxs(React.Fragment, {
                children: [jsxs("div", {
                    className: "main",
                    "aria-checked": Ne > 0,
                    children: [jsx("button", {
                        id: `${Re}_filter`,
                        onClick: () => ce(Re),
                        children: Ne > 0 && (Ne === Ce.length ? jsx("div", {className: "svg_check_filter"}) : jsx("div", {children: "–"}))
                    }), jsx("label", {htmlFor: `${Re}_filter`, children: R(`side_hall_filter.${Re}`)})]
                }), Ce.map(we => ve(Re, we))]
            }, Re)
        }, [B.multiPlayFilter]), ve = React.useCallback((Re, Ce) => {
            const Ne = B.multiPlayFilter[Ce];
            return jsxs("div", {
                className: "sub",
                "aria-checked": Ne,
                children: [jsx("button", {
                    id: `${Re}_${Ce}_filter`,
                    onClick: () => ie(Ce),
                    children: Ne && jsx("div", {className: "svg_check_filter"})
                }), jsx("label", {htmlFor: `${Re}_${Ce}_filter`, children: R(`side_hall_filter.${Ce}`)})]
            }, Ce)
        }, [B.multiPlayFilter]);
        return React.useEffect(() => O(!1), [C]), jsxs("section", {
            id: "multi_side_hall",
            "aria-hidden": !C,
            ref: D,
            children: [isMobile$1 && jsx("button", {
                className: "multi_side_hall_toggle",
                onClick: () => x(!C),
                "aria-checked": C,
                children: jsx("div", {className: "svg_side_hall"})
            }), jsxs("div", {
                className: "mask",
                ref: z,
                children: [jsxs("div", {
                    className: "multi_side_hall_container",
                    ref: Y,
                    children: [jsx("button", {
                        className: "filter_button",
                        onClick: () => O(!L),
                        "aria-checked": L,
                        children: jsx("div", {className: "svg_filter"})
                    }), jsx(MultiHallCollectionTablesRefContext.Provider, {
                        value: _e,
                        children: jsx(OutOfVwContext.Provider, {
                            value: H,
                            children: jsx("div", {
                                className: "multi_side_hall_list",
                                children: E.tableInfos.filter(Re => MULTI_HALL_FILTER.includes(Re.gameType)).sort((Re, Ce) => B.multiPlayFavorites.findIndex(Ne => Ne.gameType === Ce.gameType && Ne.tableId === Ce.tableId) - B.multiPlayFavorites.findIndex(Ne => Ne.gameType === Re.gameType && Ne.tableId === Re.tableId)).map((Re, Ce) => jsx(MultiSideHallTable, {
                                    tableIndex: Ce,
                                    tableInfo: Re,
                                    onClick: () => r.scrollToTable(Re.gameType, Re.tableId)
                                }, `${Re.gameType}_${Re.tableId}`))
                            })
                        })
                    })]
                }), L && jsx("div", {className: "filter", children: SideHallCategory.map(Re => Be(Re.category))})]
            })]
        })
    }, MultiSideHallToggleContext = React.createContext({
        toggleSideHall: !1, setToggleSideHall: () => {
        }
    }), MultiHallCollectionTablesRefContext = React.createContext({current: []}),
    MultiHallTableFocusedContext = React.createContext(void 0),
    MULTI_HALL_FILTER = [GameType.Baccarat, GameType.Quick, GameType.See, GameType.InsuredBaccarat, GameType.DT, GameType.Win3Card, AltGameType.ThreePictures, AltGameType.TeenPatti, GameType.TeenPatti, GameType.Sicbo, GameType.Roulette, AltGameType.HiLo, GameType.FPC, GameType.AndarBahar, GameType.Pokdeng, GameType.BullBull, AltGameType.TwoSidesPokdeng, GameType.VIP, AltGameType.SicTan, GameType.XocDia];

function MultiHall$1() {
    use4kRootStyle(!1);
    const r = useNavigate(), {gameTableInfo: R, setGameTableInfo: y} = React.useContext(GameTableContext), {
            settings: E,
            changeSetting: C
        } = React.useContext(SettingsContext), {setUpClassName: x} = React.useContext(GamesLayoutContainerContext),
        B = React.useContext(SetFixSizeContext), {
            filteredGameHallInfo: N,
            gametypeSelected: L,
            supportGameTypesValue: O
        } = React.useContext(GameHallContext), {
            SEXY_GAME_TABLES: D,
            CLASSIC_BACCARAT_GAME_TABLES: z,
            setCurrentPage: F
        } = React.useContext(GameSessionContext), {clearTableMessages: _e} = React.useContext(ToastContext);
    useTranslation();
    const {isForceLandscape: Y} = useDeviceOrientation(), {
            navigateToGamePage: H,
            enterGameByTableId: me
        } = useEnterGameTable(), [ce, ie] = React.useState({
            tableId: -1,
            gameType: ""
        }), [Be, ve] = React.useState(!isMobile$1), [Re, Ce] = React.useState(), Ne = React.useRef([]),
        we = React.useRef(null), Me = React.useRef(-1);
    React.useEffect(() => (F(GAME_SESSION_ACTIONS_TYPE.ON_MUlTI_HALL), B(!0), () => _e()), []), React.useEffect(() => {
        if (R.tableInfo.tableId !== -1 && R.tableInfo.tableId !== HALL_TYPE.MULTI) {
            let Qe = R.altGameType === AltGameType.None ? R.tableInfo.gameType : R.altGameType;
            switch (Qe) {
                case GameType.Baccarat: {
                    const Ze = D.includes(R.tableInfo.tableName), qe = z.includes(R.tableInfo.tableName);
                    if (Ze) {
                        H(SpecialGames.Sexy);
                        break
                    }
                    if (qe) {
                        H(SpecialGames.ClassicBaccarat);
                        break
                    }
                    H(Qe);
                    break
                }
                default: {
                    H(Qe);
                    break
                }
            }
        } else R.tableInfo.tableId === -1 && r("/gameHall", {replace: !0})
    }, [R.tableInfo.tableId]);
    const ke = () => {
        throw new Promise(() => {
        })
    }, [Fe, $e] = React.useState(!0);
    React.useEffect(() => {
        setTimeout(() => {
            $e(!1)
        }, 3e3)
    }, []);
    const Ve = useOutOfVW({
        root: we,
        refs: Ne,
        verticalThershold: "50%",
        horizontalThershold: "0%",
        refershDependency: [Fe, N]
    }), Je = React.useCallback(async (Qe, Ze) => {
        let qe = Ne.current.find(ze => ze.gameType === Qe && ze.tableId === Ze);
        if (qe) {
            Ce(qe.table);
            let ze = E.multiPlayBlacklist.findIndex(De => De.gameType === Qe && De.tableId === Ze);
            if (ze !== -1) {
                const De = [...E.multiPlayBlacklist];
                De.splice(ze, 1), C("multiPlayBlacklist", De), await new Promise(Xe => window.setTimeout(Xe, 100))
            }
            qe.table.scrollIntoView({
                behavior: "smooth",
                block: isMobile$1 ? "end" : "start"
            }), window.clearTimeout(Me.current), Me.current = window.setTimeout(() => Ce(void 0), 2e3)
        }
    }, [E.multiPlayBlacklist]);
    return jsx(Fragment, {
        children: jsxs(React.Suspense, {
            fallback: jsx(LoadingPage, {animaiton: !1, multiHall: !0, showFooter: !1}),
            children: [Fe ? jsx(ke, {}) : null, jsx("main", {
                id: "multi_gamehall", className: E.scorecards, children: jsx("div", {
                    className: x(GLC_CLASS_NAME_TYPE.FULL_FILL, {
                        appendedClasses: "inner_container",
                        dyAppendedClasses: Y ? "inner_container_media" : "inner_container_mobile_media",
                        blend: !1
                    }), children: jsx(ScablableContainer, {
                        fixScale: !1, children: jsxs("div", {
                            className: "multihall_ui_container",
                            "aria-colcount": Be ? 2 : 1,
                            children: [jsx(GameTableMenu, {
                                hideSideHallBtn: !0,
                                hidePayout: !0,
                                hideVerify: !0,
                                hideGuide: !0,
                                hideReload: !0
                            }), jsx(GhSelectedChipProvider, {
                                children: jsxs(VideoPlayingTableIdContext.Provider, {
                                    value: [ce, ie],
                                    children: [jsx("section", {
                                        id: "multihall_list",
                                        ref: we,
                                        children: jsx(MultiHallCollectionTablesRefContext.Provider, {
                                            value: Ne,
                                            children: jsx(MultiHallTableFocusedContext.Provider, {
                                                value: Re,
                                                children: jsx(OutOfVwContext.Provider, {
                                                    value: Ve,
                                                    children: jsx(GameTableCollection, {
                                                        tableInfos: N.tableInfos.filter(Qe => MULTI_HALL_FILTER.includes(Qe.gameType)).sort((Qe, Ze) => E.multiPlayFavorites.findIndex(qe => qe.gameType === Ze.gameType && qe.tableId === Ze.tableId) - E.multiPlayFavorites.findIndex(qe => qe.gameType === Qe.gameType && qe.tableId === Qe.tableId)),
                                                        columns: Y ? 3 : 1,
                                                        enterGameTable: ({
                                                                             tableId: Qe,
                                                                             gameType: Ze,
                                                                             tableName: qe
                                                                         }) => {
                                                            y(Object.assign({...R}, {altGameType: Object.values(AltGameType).includes(Ze) ? Ze : AltGameType.None})), me(Qe, qe, Ze)
                                                        },
                                                        tableType: TABLE_TYPE.MULTI,
                                                        scrollable: !1
                                                    })
                                                })
                                            })
                                        })
                                    }), jsxs(MultiSideHallToggleContext.Provider, {
                                        value: {
                                            toggleSideHall: Be,
                                            setToggleSideHall: ve
                                        },
                                        children: [jsx(MultiSideHall, {scrollToTable: Je}), jsx(BottomBarWithChips, {
                                            isFastBet: !1,
                                            showHandicap: isMobile$1
                                        })]
                                    })]
                                })
                            }), jsx("div", {
                                className: "gradient_wrapper",
                                children: jsx("div", {className: "bg_gradient"})
                            })]
                        })
                    })
                })
            })]
        })
    })
}

const MultiHall$2 = Object.freeze(Object.defineProperty({
        __proto__: null,
        MULTI_HALL_FILTER,
        MultiHallCollectionTablesRefContext,
        MultiHallTableFocusedContext,
        MultiSideHallToggleContext,
        default: MultiHall$1
    }, Symbol.toStringTag, {value: "Module"})), useHideMultiTable = (r, R, y, E) => {
        const {settings: C} = React.useContext(SettingsContext);
        let {preloadConfig: x} = React.useContext(ServerConfigContext);
        const [B, N] = React.useState(() => {
            if (r !== TABLE_TYPE.MULTI) return !1;
            let L = `${R}`;
            if (x != null && x.whiteLabel.sexyGames.includes(y) && (L = "sexy"), x != null && x.whiteLabel.classicBaccaratGames.includes(y) && (L = "classic"), Object.entries(C.multiPlayFilter).find(D => D[0] === L)) return !C.multiPlayFilter[R]
        });
        return React.useEffect(() => {
            if (r !== TABLE_TYPE.MULTI) return N(!1);
            let L = `${R}`;
            x != null && x.whiteLabel.sexyGames.includes(y) && (L = "sexy"), x != null && x.whiteLabel.classicBaccaratGames.includes(y) && (L = "classic"), Object.entries(C.multiPlayFilter).find(D => D[0] === L) && N(!C.multiPlayFilter[L]), E && C.multiPlayBlacklist.find(D => D.gameType === R && D.tableId === E) && N(!0)
        }, [r, R, y, E, C.multiPlayFilter, C.multiPlayBlacklist]), B
    }, MultiHallTable = r => {
        var xt, K;
        const {options: R = {}, altGameType: y = AltGameType.None} = r, {
                hideVideoBtn: E = !1,
                hideStat: C = !1,
                hideDetailRoads: x = !1,
                hideCurrentTable: B = !1,
                hideCover: N = !0
            } = R, {t: L} = useTranslation(), {
                firstChipIndex: O,
                selectedChip: D
            } = useGhSelectedChip(), [z, F] = React.useContext(VideoPlayingTableIdContext), {settings: _e} = React.useContext(SettingsContext),
            Y = React.useContext(MultiHallCollectionTablesRefContext), {
                videoUrl: H,
                changeLine: me,
                toggleVideo: ce,
                isVideoVisible: ie
            } = useToggleVideo(r.tableInfo.tableName), {
                gameHallInfo: Be,
                setGameHallInfo: ve
            } = React.useContext(GameHallContext), {playingTableMessage: Re} = React.useContext(ToastContext);
        React.useContext(ServerConfigContext);
        const Ce = React.useContext(MultiHallTableFocusedContext), Ne = React.useContext(OutOfVwContext),
            we = React.useMemo(() => {
                var Pe;
                return !!Ne.has((Pe = Y.current[r.tableIndex]) == null ? void 0 : Pe.table)
            }, [Ne]),
            Me = useDisplayCurrency(), [ke, Fe] = React.useState(r.tableInfo.tableStatus === 100 ? BET_STATE.BETTING : BET_STATE.NO_BET), [$e, Ve] = React.useState("-1"), [Je, Qe] = React.useState(Object.entries(r.tableInfo.gameStatus).length > 0), [Ze, qe] = React.useState([]), {
                playingMessage: ze,
                addMessage: De,
                clearMessages: Xe
            } = useToastMessages(),
            He = useHideMultiTable(r.tableType, r.tableInfo.gameType, r.tableInfo.tableName, r.tableInfo.tableId),
            Ge = useBetTypeMap(r.tableInfo.gameType, y), Le = Object.fromEntries(Ge.map((Pe, Oe) => [Oe, 0]));
        let {gameTableInfo: We} = useGameTableContext();
        const dt = React.useRef("-2"),
            et = React.useMemo(() => r.tableInfo.tableId === We.tableInfo.tableId, [We.tableInfo.tableId, r.tableInfo.tableId]),
            nt = r.tableInfo.gameType, tt = React.useMemo(() => ({
                enterType: 100,
                tableInfo: Be.tableInfos.find(Oe => Oe.tableName === r.tableInfo.tableName) || {...defaultTableInfo},
                altGameType: y
            }), [r.tableInfo, y, Be]), lt = useGameTableAmounts(Le, tt), {
                bets: Bt,
                confirm: kt,
                cancel: At,
                double: zt,
                repeat: oa
            } = useGameTableBets({
                bindGameTableInfo: tt,
                betState: ke,
                emptyBetAmounts: Le, ...lt,
                firstChipIndex: O,
                selectedChip: D,
                gameType: parseInt(r.tableInfo.gameType),
                tableId: r.tableInfo.tableId,
                tableType: r.tableType
            }), {
                betAmounts: sa,
                setBetAmounts: vt,
                pendingBetAmounts: ea,
                setPendingBetAmounts: _a,
                setGameTablePayout: ta,
                betHistory: na,
                setBetHistory: Aa,
                lastBetAmounts: Ea,
                gameTablePayout: Sa,
                totalBet: Ga
            } = lt;
        React.useEffect(() => {
            Qe(Object.entries(r.tableInfo.gameStatus).length > 0)
        }, [r.tableInfo.gameStatus]), React.useEffect(() => {
            if ((Re == null ? void 0 : Re.data.resultCode) != 0 && (Re == null ? void 0 : Re.data.tableId) == r.tableInfo.tableId) {
                const Oe = Re == null ? void 0 : Re.data.betTypes;
                _a(Ue => {
                    let Ke = {...Ue};
                    return Oe != null && Oe.length && Oe.forEach(mt => {
                        const Tt = Ge.indexOf(mt);
                        Ke.hasOwnProperty(Tt) && (Ke[Tt] = 0)
                    }), Ke
                })
            }
            const Pe = nt == AltGameType.TwoSidesPokdeng ? [BetType.TPD_P1Pair, BetType.TPD_P2Pair, BetType.TPD_P3Pair, BetType.TPD_P4Pair, BetType.TPD_P5Pair] : [];
            Re && (Re == null ? void 0 : Re.tableId) === r.tableInfo.tableId && Helper.checkArrayExists(Re.data.betTypes, Ge, Pe) && De(Re.message, Re.color, Re.duration)
        }, [Re]), React.useEffect(() => {
            Fe(r.tableInfo.gameStatus.tableStatus === TableStatus.CanBet ? BET_STATE.BETTING : BET_STATE.NO_BET)
        }, [r.tableInfo.tableStatus, r.tableInfo.gameStatus.tableStatus]), React.useEffect(() => {
            switch (ke) {
                case BET_STATE.BETTING:
                    vt({...Le});
                    break;
                case BET_STATE.NO_BET:
                    _a({...Le}), Aa && Aa([]);
                    break
            }
        }, [ke]), React.useEffect(() => {
            const Pe = z.tableId === r.tableInfo.tableId && z.gameType === nt;
            ce(Pe)
        }, [z, nt]), React.useEffect(() => {
            r.tableInfo.gameStatus.tableStatus === TableStatus.CanBet && ta([])
        }, [r.tableInfo.gameStatus.tableStatus]), React.useEffect(() => {
            if ([GameType.Baccarat, GameType.Quick, GameType.InsuredBaccarat, GameType.VIP].includes(nt)) switch (_e.noCommission) {
                case!0:
                    !sa[BACCARAT_BET_TYPE.BANKER] && _a({...ea, [BACCARAT_BET_TYPE.BANKER]: 0});
                    break;
                case!1:
                    !sa[BACCARAT_BET_TYPE.BANKER_NO_COMM] && _a({...ea, [BACCARAT_BET_TYPE.BANKER_NO_COMM]: 0});
                    break
            }
        }, [_e.noCommission, nt]), React.useEffect(() => {
            const Pe = r.tableInfo.gameStatus.currentGameRoundWinResult;
            if (Pe) switch (nt) {
                case GameType.Baccarat:
                case GameType.Quick:
                case GameType.InsuredBaccarat:
                case GameType.See:
                case GameType.VIP: {
                    let Oe = Pe[0][0];
                    Ve(Oe)
                }
                    break;
                case GameType.Sicbo: {
                    let Oe = Pe[0][0];
                    Ve(Oe)
                }
                    break;
                case AltGameType.HiLo:
                    if (Pe[0][0] !== "-1") {
                        let Oe = Pe[1][0];
                        Ve(Oe)
                    } else Ve(Pe[0][0]);
                    break;
                case AltGameType.SicTan:
                    if (Pe[0][0] !== "-1") {
                        let Oe = Pe[2][0];
                        Ve(Oe)
                    } else Ve(Pe[0][0]);
                    break;
                case GameType.DT: {
                    let Oe = Pe[0][0];
                    Ve(Oe)
                }
                    break;
                case GameType.Roulette: {
                    let Oe = Pe[0][0];
                    Ve(Oe)
                }
                    break;
                case GameType.Pokdeng: {
                    let Oe = Pe[0][0];
                    Ve(Oe)
                }
                    break;
                case AltGameType.TwoSidesPokdeng: {
                    let Oe = Pe[0][0];
                    Ve(Oe)
                }
                case GameType.AndarBahar: {
                    let Oe = Pe[0][0];
                    Ve(Oe)
                }
                    break;
                case GameType.TeenPatti: {
                    let Oe = Pe[0][0];
                    Ve(Oe === "-1" ? "" : Oe)
                }
                    break;
                case AltGameType.TeenPatti:
                    if (Pe[0][0] !== "-1") {
                        let Oe = Pe[2][0];
                        Ve(Oe)
                    } else Ve(Pe[0][0]);
                    break;
                case GameType.UTH:
                case GameType.CasinoWar:
                case GameType.BullBull: {
                    let Oe = Pe[0][0];
                    Ve(Oe)
                }
                    break;
                case GameType.Win3Card: {
                    let Oe = Pe[0][0];
                    Ve(Oe)
                }
                    break;
                case AltGameType.ThreePictures:
                    if (Pe[0][0] !== "-1") {
                        let Oe = Pe[1][0];
                        Ve(Oe)
                    } else Ve(Pe[0][0]);
                case GameType.FPC: {
                    let Oe = Pe[0][0];
                    Ve(Oe)
                }
                    break;
                case GameType.XocDia: {
                    let Oe = Pe[0][0];
                    Ve(Oe)
                }
                    break;
                default:
                    return
            }
        }, [r.tableInfo.gameStatus.currentGameRoundWinResult, nt]);
        const Ta = React.useMemo(() => {
                let Pe = [...Ge], Oe = {...sa};
                if (nt == AltGameType.TwoSidesPokdeng) {
                    const mt = [BetType.TPD_P1Pair, BetType.TPD_P2Pair, BetType.TPD_P3Pair, BetType.TPD_P4Pair, BetType.TPD_P5Pair];
                    Pe = Pe.filter(Tt => !mt.includes(Tt)), Oe = Object.fromEntries(Object.entries(Oe).filter(([Tt, jt]) => parseInt(Tt) < 10))
                }
                if (Object.values(Oe).reduce((mt, Tt) => mt + Tt * 100, 0) === 0 || Sa.length === 0) return;
                const Ke = Sa.filter(mt => Pe.find(Tt => Tt == mt.betType)).reduce((mt, Tt) => mt + Tt.payoutAmount, 0);
                return Ke !== 0 && jsxs("div", {
                    className: "payout_toast",
                    children: [`${L(`messages.${Ke > 0 ? "won" : "lost"}`)} `, jsx("span", {children: Helper.formatCurrency(Me, Helper.formatMoney(Math.abs(Ke) / 100))})]
                })
            }, [Sa, Ge, sa]), fa = React.useMemo(() => {
                const Pe = r.tableInfo.gameStatus.rawGameResult, Oe = r.tableInfo.gameStatus.currentGameRoundWinResult;
                switch (nt) {
                    case GameType.Baccarat:
                    case GameType.Quick:
                    case GameType.InsuredBaccarat:
                    case GameType.See:
                    case GameType.VIP:
                        return jsx(BaccaratResults, {gameResults: Pe, betState: ke, winResult: Oe});
                    case GameType.Sicbo:
                        return jsx(SiboResults, {gameResults: Pe, betState: ke, winResult: Oe});
                    case AltGameType.HiLo:
                        return jsx(HiloResults, {gameResults: Pe, betState: ke, winResult: Oe});
                    case AltGameType.SicTan:
                        return jsx(SictanResults, {gameResults: Pe, betState: ke, winResult: Oe});
                    case GameType.DT:
                        return jsx(DtResults, {gameResults: Pe, betState: ke, winResult: Oe});
                    case GameType.Roulette:
                        return jsx(RouletteResults, {gameResults: Pe, betState: ke, winResult: Oe});
                    case GameType.Pokdeng:
                        return jsx(PokDengResults, {gameResults: Pe, betState: ke, winResult: Oe});
                    case AltGameType.TwoSidesPokdeng:
                        return jsx(PokDengResults, {gameResults: Pe, betState: ke, winResult: Oe});
                    case GameType.AndarBahar:
                        return jsx(AndarBaharResults, {fristCard: dt.current, gameResults: Pe, betState: ke, winResult: Oe});
                    case GameType.TeenPatti: {
                        const Ke = r.tableInfo.gameStatus.specialWinResultRawCards;
                        return jsx(TeenPattiResults, {
                            gameResults: Pe,
                            betState: ke,
                            winResult: Oe,
                            specialWinResultRawCards: Ke,
                            shoeGameResultIndex: 0
                        })
                    }
                    case AltGameType.TeenPatti:
                        const Ue = r.tableInfo.gameStatus.specialWinResultRawCards;
                        return jsx(TeenPattiResults, {
                            gameResults: Pe,
                            betState: ke,
                            winResult: Oe,
                            specialWinResultRawCards: Ue,
                            shoeGameResultIndex: 2
                        });
                    case GameType.UTH:
                    case GameType.CasinoWar:
                    case GameType.BullBull:
                        return jsx(BullBullResults, {gameResults: Pe, betState: ke, winResult: Oe});
                    case GameType.Win3Card:
                        return jsx(Win3CardsResults, {gameResults: Pe, betState: ke, winResult: Oe});
                    case AltGameType.ThreePictures:
                        return jsx(ThreePictureResults, {gameResults: Pe, betState: ke, winResult: Oe});
                    case GameType.FPC:
                        return jsx(FPCResults, {gameResults: Pe, betState: ke, winResult: Oe});
                    case GameType.XocDia:
                        return jsx(XocDiaResults, {gameResults: Pe, betState: ke, winResult: Oe});
                    default:
                        return
                }
            }, [ke, dt.current, r.tableInfo.gameStatus.currentGameRoundWinResult, r.tableInfo.gameStatus.rawGameResult, r.tableInfo.gameStatus.specialWinResultRawCards]),
            ca = React.useCallback(() => {
                var Pe;
                switch (r.tableInfo.gameType) {
                    case GameType.Baccarat:
                    case GameType.Quick:
                    case GameType.InsuredBaccarat:
                    case GameType.See:
                        return jsx(MultiTableBaccaratRoadmap, {
                            options: {...R},
                            shoeGameResult: r.tableInfo.currentShoeGameResult,
                            setRoadMap: qe
                        });
                    case GameType.VIP:
                        return jsx(MultiTableBaccaratRoadmap, {
                            options: {...R},
                            shoeGameResult: r.tableInfo.currentShoeGameResult,
                            setRoadMap: qe,
                            isReserved: ((Pe = r.tableInfo.additionalTableInfo) == null ? void 0 : Pe.vipTableReserveStatus) == VipTableStatus.Reserved
                        });
                    case GameType.Sicbo:
                        return jsx(MultiTableSicboRoadmap, {
                            options: R,
                            shoeGameResult: r.tableInfo.currentShoeGameResult,
                            setRoadMap: qe
                        });
                    case AltGameType.HiLo:
                        return jsx(MultiTableHiloRoadmap, {
                            options: R,
                            shoeGameResult: r.tableInfo.currentShoeGameResult,
                            setRoadMap: qe
                        });
                    case AltGameType.SicTan:
                        return jsx(MultiTableSictanRoadmap, {
                            options: R,
                            shoeGameResult: r.tableInfo.currentShoeGameResult,
                            setRoadMap: qe
                        });
                    case GameType.DT:
                        return jsx(MultiTableDtRoadmap, {
                            options: {...R},
                            shoeGameResult: r.tableInfo.currentShoeGameResult,
                            setRoadMap: qe
                        });
                    case GameType.Roulette:
                        return jsx(MultiTableRouletteRoadmap, {
                            options: R,
                            shoeGameResult: r.tableInfo.currentShoeGameResult,
                            setRoadMap: qe
                        });
                    case GameType.Pokdeng:
                        return jsx(MultiTablePokDengRoadmap, {
                            options: R,
                            shoeGameResult: r.tableInfo.currentShoeGameResult,
                            setRoadMap: qe
                        });
                    case AltGameType.TwoSidesPokdeng:
                        return jsx(MultiTablePokDengRoadmap, {
                            options: R,
                            shoeGameResult: r.tableInfo.currentShoeGameResult,
                            setRoadMap: qe
                        });
                    case GameType.AndarBahar:
                        return jsx(MultiTableAndarBaharRoadmap, {
                            options: R,
                            shoeGameResult: r.tableInfo.currentShoeGameResult,
                            setRoadMap: qe
                        });
                    case AltGameType.TeenPatti:
                        return jsx(MultiTableTeenPattiRoadmap, {
                            options: {...R, shoeGameResultIndex: 2},
                            shoeGameResult: r.tableInfo.currentShoeGameResult,
                            setRoadMap: qe
                        });
                    case GameType.TeenPatti:
                        return jsx(MultiTableTeenPattiRoadmap, {
                            options: {...R, shoeGameResultIndex: 0},
                            shoeGameResult: r.tableInfo.currentShoeGameResult,
                            setRoadMap: qe
                        });
                    case GameType.UTH:
                    case GameType.CasinoWar:
                    case GameType.BullBull:
                        return jsx(MultiTableBullBullRoadmap, {
                            options: R,
                            shoeGameResult: r.tableInfo.currentShoeGameResult,
                            setRoadMap: qe
                        });
                    case AltGameType.ThreePictures:
                        return jsx(MultiTableThreePictureRoadmap, {
                            options: R,
                            shoeGameResult: r.tableInfo.currentShoeGameResult,
                            setRoadMap: qe
                        });
                    case GameType.Win3Card:
                        return jsx(MultiTableWin3CardRoadmap, {
                            options: R,
                            shoeGameResult: r.tableInfo.currentShoeGameResult,
                            setRoadMap: qe
                        });
                    case GameType.FPC:
                        return jsx(MultiTableFPCRoadmap, {
                            options: R,
                            shoeGameResult: r.tableInfo.currentShoeGameResult,
                            setRoadMap: qe
                        });
                    case GameType.XocDia:
                        return jsx(MultiTableXocDiaRoadmap, {
                            options: R,
                            shoeGameResult: r.tableInfo.currentShoeGameResult,
                            setRoadMap: qe
                        });
                    default:
                        return
                }
            }, [r.tableInfo.currentShoeGameResult, (xt = r.tableInfo.additionalTableInfo) == null ? void 0 : xt.vipTableReserveStatus]),
            Ia = React.useMemo(() => {
                switch (nt) {
                    case GameType.Baccarat:
                    case GameType.Quick:
                    case GameType.InsuredBaccarat:
                    case GameType.See:
                    case GameType.VIP:
                        return jsx(BaccaratBetAreas, {
                            view: ke,
                            betAmounts: sa,
                            pendingBetAmounts: ea,
                            payouts: Sa,
                            roadMap: Ze,
                            winResult: $e,
                            disabled: !Je || r.tableInfo.gameStatus.tableStatus === TableStatus.Shuffle
                        });
                    case GameType.Sicbo:
                        return jsx(SicboBetAreas, {
                            view: ke,
                            betAmounts: sa,
                            pendingBetAmounts: ea,
                            payouts: Sa,
                            roadMap: Ze,
                            winResult: $e,
                            disabled: !Je || r.tableInfo.gameStatus.tableStatus === TableStatus.Shuffle
                        });
                    case AltGameType.HiLo:
                        return jsx(HiloBetAreas, {
                            view: ke,
                            betAmounts: sa,
                            pendingBetAmounts: ea,
                            payouts: Sa,
                            roadMap: Ze,
                            disabled: !Je || r.tableInfo.gameStatus.tableStatus === TableStatus.Shuffle,
                            winResult: $e
                        });
                    case AltGameType.SicTan:
                        return jsx(SictanBetAreas, {
                            view: ke,
                            betAmounts: sa,
                            pendingBetAmounts: ea,
                            payouts: Sa,
                            roadMap: Ze,
                            disabled: !Je || r.tableInfo.gameStatus.tableStatus === TableStatus.Shuffle,
                            winResult: $e
                        });
                    case GameType.DT:
                        return jsx(DragonTigerBetAreas, {
                            view: ke,
                            betAmounts: sa,
                            pendingBetAmounts: ea,
                            payouts: Sa,
                            roadMap: Ze,
                            disabled: !Je || r.tableInfo.gameStatus.tableStatus === TableStatus.Shuffle,
                            winResult: $e
                        });
                    case GameType.Roulette:
                        return jsx(RouletteBetAreas, {
                            view: ke,
                            betAmounts: sa,
                            pendingBetAmounts: ea,
                            payouts: Sa,
                            roadMap: Ze,
                            disabled: !Je || r.tableInfo.gameStatus.tableStatus === TableStatus.Shuffle,
                            winResult: $e
                        });
                    case GameType.Pokdeng:
                        return jsx(ClassicPokdengBetAreas, {
                            view: ke,
                            betAmounts: sa,
                            pendingBetAmounts: ea,
                            payouts: Sa,
                            roadMap: Ze,
                            disabled: !Je || r.tableInfo.gameStatus.tableStatus === TableStatus.Shuffle,
                            winResult: $e
                        });
                    case AltGameType.TwoSidesPokdeng:
                        return jsx(TwoSidePokdengBetAreas, {
                            view: ke,
                            betAmounts: sa,
                            pendingBetAmounts: ea,
                            payouts: Sa,
                            roadMap: Ze,
                            disabled: !Je || r.tableInfo.gameStatus.tableStatus === TableStatus.Shuffle,
                            winResult: $e
                        });
                    case GameType.AndarBahar:
                        return jsx(AndarBaharBetAreas, {
                            view: ke,
                            betAmounts: sa,
                            pendingBetAmounts: ea,
                            payouts: Sa,
                            roadMap: Ze,
                            winResult: $e,
                            disabled: !Je || r.tableInfo.gameStatus.tableStatus === TableStatus.Shuffle
                        });
                    case AltGameType.TeenPatti:
                    case GameType.TeenPatti:
                        return jsx(TeenPattiBetAreas, {
                            view: ke,
                            betAmounts: sa,
                            pendingBetAmounts: ea,
                            payouts: Sa,
                            roadMap: Ze,
                            disabled: !Je || r.tableInfo.gameStatus.tableStatus === TableStatus.Shuffle,
                            winResult: $e
                        });
                    case GameType.UTH:
                    case GameType.CasinoWar:
                    case GameType.BullBull:
                        return jsx(BullBullBetAreas, {
                            view: ke,
                            betAmounts: sa,
                            pendingBetAmounts: ea,
                            winResult: $e,
                            payouts: Sa,
                            roadMap: Ze,
                            disabled: !Je || r.tableInfo.gameStatus.tableStatus === TableStatus.Shuffle
                        });
                    case GameType.Win3Card:
                        return jsx(Win3CardsBetAreas, {
                            view: ke,
                            betAmounts: sa,
                            pendingBetAmounts: ea,
                            payouts: Sa,
                            roadMap: Ze,
                            disabled: !Je || r.tableInfo.gameStatus.tableStatus === TableStatus.Shuffle,
                            winResult: $e
                        });
                    case AltGameType.ThreePictures:
                        return jsx(ThreePictureBetAreas, {
                            view: ke,
                            betAmounts: sa,
                            pendingBetAmounts: ea,
                            payouts: Sa,
                            roadMap: Ze,
                            disabled: !Je || r.tableInfo.gameStatus.tableStatus === TableStatus.Shuffle,
                            winResult: $e
                        });
                    case GameType.FPC:
                        return jsx(FPCbetAreas, {
                            view: ke,
                            betAmounts: sa,
                            pendingBetAmounts: ea,
                            payouts: Sa,
                            roadMap: Ze,
                            disabled: !Je || r.tableInfo.gameStatus.tableStatus === TableStatus.Shuffle,
                            winResult: $e
                        });
                    case GameType.XocDia:
                        return jsx(XocDiaBetAreas, {
                            view: ke,
                            betAmounts: sa,
                            pendingBetAmounts: ea,
                            payouts: Sa,
                            roadMap: Ze,
                            disabled: !Je || r.tableInfo.gameStatus.tableStatus === TableStatus.Shuffle,
                            winResult: $e
                        });
                    default:
                        return
                }
            }, [nt, ke, sa, ea, Sa, Ze, Je, $e, Bt]), Ma = React.useMemo(() => {
                const Pe = r.tableInfo.gameStatus.rawGameResult;
                if (Array.isArray(Pe) && (dt.current = Pe[0][0]), nt == GameType.AndarBahar) return jsx(AndarBaharBettingView, {
                    rawCardResults: Pe,
                    betState: ke
                });
                nt != GameType.BullBull
            }, [nt, r.tableInfo.gameStatus.rawGameResult]);
        useTranslation();
        const Fa = useGameTableTitle(r.tableInfo.gameType, r.tableInfo.tableName, !0),
            va = useDeposit(r.tableInfo.gameType, sa),
            ha = React.useMemo(() => r.tableInfo.gameStatus.tableStatus == TableStatus.Maintenance, [r.tableInfo.gameStatus.tableStatus]),
            Ua = React.useCallback(() => {
                const Pe = ["multi_hall_table"];
                return et && B && Pe.push("hidden"), we && Pe.push("out_of_view"), Pe.join(" ")
            }, [et, B, we]);
        return jsxs("article", {
            className: Ua(),
            "aria-disabled": Ce && Ce !== ((K = Y.current[r.tableIndex]) == null ? void 0 : K.table),
            ref: Pe => Y.current[r.tableIndex] = Pe ? {
                gameType: r.tableInfo.gameType,
                tableId: r.tableInfo.tableId,
                table: Pe
            } : null,
            "aria-hidden": He,
            children: [jsxs("section", {
                className: "heading",
                children: [jsx("div", {children: Fa}), ha ? jsx("div", {}) : jsx("button", {
                    onClick: () => r.onEnter({
                        tableId: r.tableInfo.tableId,
                        gameType: r.tableInfo.gameType,
                        tableName: r.tableInfo.tableName
                    }), className: "svg_enter"
                }), nt === GameType.BullBull ? jsx(BullBullPlayType, {direction: 0}) : jsx("div", {}), jsx("div", {
                    className: "deposit",
                    children: va ? `(${L("game_table.deposit_short")}:${Helper.formatMoney(va)})` : ""
                }), !ha && ie ? Je && !E && jsx("button", {
                    className: "svg_video_refresh", onClick: () => {
                        me()
                    }, "aria-checked": ie
                }) : jsx("div", {}), !ha && Je && !E && jsx("button", {
                    className: "svg_video",
                    onClick: () => F({tableId: ie ? -1 : r.tableInfo.tableId, gameType: nt}),
                    "aria-checked": ie
                })]
            }), jsx(Fragment, {
                children: !ha && !N ? jsx(MultiTableGameCover, {
                    gameType: nt,
                    onClick: () => r.onEnter({
                        tableId: r.tableInfo.tableId,
                        gameType: r.tableInfo.gameType,
                        tableName: r.tableInfo.tableName
                    })
                }) : jsxs(Fragment, {
                    children: [!we && (ha ? jsx(MaintenancePanel, {className: "multi_hall_maintenance"}) : ca()), !we && ie && jsx("section", {
                        className: "video",
                        children: H && jsx("section", {
                            className: "video_container",
                            children: jsx(StreamsVideoPlayerComponent$1, {
                                scaleOffset: 1.8,
                                miniPlayer: isMobile$1,
                                yOffset: isMobile$1 ? "0" : "-12%",
                                videoResFactor: isMobile$1 ? 1 : .25,
                                url: H,
                                videoPlayer: LIVE_STREAMS_PLAYERS.FLV_PLAYER,
                                zoomable: !1,
                                onNextLine: ie ? me : () => {
                                }
                            })
                        })
                    }), ha ? jsx(Fragment, {}) : r.tableInfo.gameStatus.tableStatus !== TableStatus.Shuffle && (ke === BET_STATE.NO_BET ? jsx("section", {
                        className: "reveal",
                        children: fa
                    }) : jsx("section", {
                        className: "reveal point_event_none",
                        children: Ma
                    })), Ta, ze && jsx("div", {
                        className: "toast",
                        style: {"--toast_color": ze.color, "--duration": `${ze.duration}s`},
                        children: ze.message
                    }), jsx("section", {
                        className: "timer",
                        style: {"--duration": `${r.tableInfo.gameStatus.countDown}s`},
                        "aria-disabled": r.tableInfo.gameStatus.countDown === -1
                    }), !we && jsxs("section", {
                        className: "bet_area",
                        children: [jsx(MultiTableConfirmPanel, {
                            p: {
                                pendingBetAmounts: ea,
                                betState: ke,
                                tableInfo: r.tableInfo,
                                confirm: kt,
                                cancel: At,
                                gameType: nt,
                                lastBetAmounts: Ea,
                                betAmounts: sa,
                                repeat: oa,
                                gameTableInfo: We,
                                roadMap: Ze
                            }
                        }), jsx(GameTableBetContext.Provider, {value: Bt, children: Ia})]
                    }), !Je && jsx("div", {
                        className: "table_loading",
                        children: jsx("div", {
                            className: "loading_spinner",
                            role: "loading_spinner",
                            children: jsx("div", {className: "loading_spinner-icon"})
                        })
                    }), r.tableInfo.gameStatus.tableStatus === TableStatus.Shuffle && jsx("div", {
                        className: "table_shuffling",
                        children: jsx("div", {className: "svg_shuffle"})
                    })]
                })
            })]
        })
    }, GameTableCollectionMemo = r => {
        const R = React.useMemo(() => r, [r]);
        React.useRef(null);
        const {moved: y, movableRef: E} = useHorizontalDrag(!R.scrollable);
        return jsx("article", {
            className: (() => {
                const x = ["game_table_collection"];
                return R.scrollable && x.push("scrollable"), x.join(" ")
            })(),
            style: {"--size_columns": R.columns, "--item_columns": Math.ceil(R.tableInfos.length / 2)},
            ref: E,
            children: jsx(MovedContext.Provider, {
                value: y, children: R.tableInfos && R.tableInfos.map((x, B) => {
                    var L;
                    const N = Object.values(AltGameType).includes(x.gameType) ? x.gameType : AltGameType.None;
                    switch (R.tableType) {
                        case TABLE_TYPE.FEATURE:
                            return jsx(GameHallFeatureTable, {
                                tableInfo: x,
                                onEnter: R.enterGameTable
                            }, `${x.tableId}${x.gameType}${B}`);
                        case TABLE_TYPE.NORMAL:
                            return jsx(GameHallTable, {
                                tableInfo: x,
                                tableIndex: B,
                                onEnter: R.enterGameTable,
                                goodRoad: R.goodRoad && ((L = R.goodRoad.find(D => D.tableId === x.tableId)) == null ? void 0 : L.type)
                            }, `${x.tableId}${x.gameType}${B}`);
                        case TABLE_TYPE.MULTI:
                            return jsx(MultiHallTable, {
                                altGameType: N,
                                tableType: r.tableType,
                                tableIndex: B,
                                options: {canvas: isMobile$1, hideDetailRoads: isMobile$1},
                                tableInfo: x,
                                onEnter: R.enterGameTable
                            }, `${x.tableId}${x.gameType}${B}`);
                        case TABLE_TYPE.SIDE:
                            let O = !1;
                            switch (x.gameType) {
                                case GameType.Baccarat:
                                case GameType.Quick:
                                case GameType.InsuredBaccarat:
                                case GameType.See:
                                case GameType.VIP:
                                    O = !0;
                                    break
                            }
                            return jsx(MultiHallTable, {
                                altGameType: N,
                                tableType: r.tableType,
                                tableIndex: B,
                                options: {
                                    canvas: !0,
                                    bigRoadSize: {x: 29, y: 6},
                                    hideVideoBtn: !0,
                                    hideDetailRoads: !0,
                                    hideStat: !0,
                                    hideCurrentTable: !0,
                                    hideCover: O
                                },
                                tableInfo: x,
                                onEnter: R.enterGameTable
                            }, `${x.tableId}${x.gameType}${B}`)
                    }
                })
            })
        })
    }, GameTableCollection = React.memo(GameTableCollectionMemo), CardGameTableCollectionMemo = r => {
        const R = useLanguageMapping();
        let {createGcImageUrl: y} = useGcURI();
        const E = React.useMemo(() => r, [r]), {moved: C, movableRef: x} = useHorizontalDrag(!E.scrollable), B = () => {
            const L = ["game_table_collection"];
            return E.scrollable && L.push("scrollable"), L.join(" ")
        }, N = React.useCallback(L => {
            const O = /(.+)\.png$/;
            return L.replace(O, (D, z) => `${z}_${R(LANGUAGE_MAPPING_SCENRIO.CARD_GAME)}.png`)
        }, [R, E.tableInfos]);
        return jsx("article", {
            className: B(),
            style: {"--size_columns": E.columns, "--item_columns": Math.ceil(E.tableInfos.length / 2)},
            ref: x,
            children: jsx(MovedContext.Provider, {
                value: C,
                children: E.tableInfos && E.tableInfos.map((L, O) => jsxs("article", {
                    className: "gamehall_table",
                    onClick: () => E.enterGameTable(L.vendor, L.gameID),
                    children: [jsx("div", {
                        className: "gamehall_table_container contain-image",
                        style: {backgroundImage: `url(${y(N(L.imageURL))[0]}`}
                    }), jsx("div", {children: L.gameName[R(LANGUAGE_MAPPING_SCENRIO.CARD_GAME)] || L.gameName.en})]
                }, O))
            })
        })
    }, CardGameTableCollection = React.memo(CardGameTableCollectionMemo), FastBet$1 = "",
    FastBet = ({display: r, onClose: R, clickMenu: y}) => {
        const [E, C] = React.useState(r !== "none");
        React.useEffect(() => {
            C(r !== "none")
        }, [r]);
        const {filteredGameHallInfo: x} = React.useContext(GameHallContext), {enterGameByTableId: B} = useEnterGameTable(), {
            gameTableInfo: N,
            setGameTableInfo: L
        } = React.useContext(GameTableContext), {logoutGameTable: O} = React.useContext(SFSCoreContext);
        return jsx("div", {
            id: "fast_bet",
            "aria-hidden": !E,
            children: jsxs(GhSelectedChipProvider, {
                children: [jsx("section", {
                    className: "fast_bet_container",
                    children: jsx(GameTableCollection, {
                        tableInfos: x.tableInfos, columns: 1, enterGameTable: D => {
                            L(Object.assign({...N}, {
                                altGameType: Object.values(AltGameType).includes(D.gameType) ? D.gameType : AltGameType.None,
                                pendingEnterFastBet: !0
                            })), O(), B(D.tableId, D.tableName, D.gameType)
                        }, tableType: TABLE_TYPE.SIDE, scrollable: !1
                    })
                }), E && jsx(BottomBarWithChips, {isFastBet: !0, showHandicap: !0})]
            })
        })
    }, PwaInstruction$1 = "", useVideoPlayer = (r, R) => {
        const [E, C] = React.useState(0), [x, B] = React.useState(0), [N, L] = React.useState(!1), [O, D] = React.useState(!1), [z, F] = React.useState(!1), [_e, Y] = React.useState(!1), [H, me] = React.useState(!1), [ce, ie] = React.useState(!1),
            Be = React.useRef(null), [ve, Re] = React.useState(!1), Ce = React.useRef(), [Ne, we] = React.useState(0),
            Me = () => C(R.current.currentTime), ke = () => B(R.current.duration), Fe = () => {
                ce && D(!0), Y(!0), ie(!1)
            }, $e = () => {
                R.current && (_e ? R.current.pause() : R.current.play(), Y(!_e))
            };
        React.useEffect(() => {
            if (ve) {
                clearTimeout(Ce.current);
                return
            }
            return _e && z && !ve && (Ce.current = setTimeout(() => {
                D(!1), F(!1)
            }, 1500)), () => clearTimeout(Ce.current)
        }, [_e, z, ve]);
        const Ve = () => {
                N || (F(!0), D(!0))
            }, Je = () => {
                Re(!0), setTimeout(() => {
                    Re(!1)
                }, 1500)
            }, Qe = He => `${String(Math.floor(He / 60)).padStart(2, "0")}:${String(Math.floor(He % 60)).padStart(2, "0")}`,
            Ze = () => {
                me(!1), ie(!0), D(!1)
            }, qe = () => {
                R.current && (me(!0), R.current.src = r, R.current.load())
            }, ze = He => {
                var Le, We;
                L(!0), we(He.touches[0].clientX);
                const Ge = (Le = Be.current) == null ? void 0 : Le.getBoundingClientRect();
                if (Ge) {
                    const dt = (He.touches[0].clientX - Ge.left) / Ge.width;
                    R.current.currentTime = x * dt, (We = R.current) == null || We.pause()
                }
            }, De = He => {
                if (N && Be.current) {
                    const Ge = Be.current.getBoundingClientRect();
                    let Le = (He.touches[0].clientX - Ge.left) / Ge.width;
                    Le = Math.max(0, Math.min(1, Le)), R.current.currentTime = x * Le
                }
            }, Xe = () => {
                var He;
                L(!1), _e && ((He = R.current) == null || He.play()), Je()
            };
        return React.useEffect(() => (N ? (window.addEventListener("touchmove", De), window.addEventListener("touchend", Xe)) : (window.removeEventListener("touchmove", De), window.removeEventListener("touchend", Xe)), () => {
            window.removeEventListener("touchmove", De), window.removeEventListener("touchend", Xe)
        }), [N, De, Xe]), {
            videoRef: R,
            currentTime: E,
            duration: x,
            isDragging: N,
            showPlayButton: O,
            isTapped: z,
            isPlaying: _e,
            isLoading: H,
            hasError: ce,
            progressRef: Be,
            handlePlayPause: $e,
            handleVideoTap: Ve,
            handleTapOnProgressBar: Je,
            formatTime: Qe,
            handleVideoError: Ze,
            reloadVideo: qe,
            onTouchStart: ze,
            onTouchEnd: Xe,
            handleTimeUpdate: Me,
            handleDurationChange: ke,
            handleLoadedData: Fe
        }
    }, usePwaInstructionVideoPlayer = () => ({videoRef: React.useRef(null)}), VideoPlayer = ({src: r, props: R}) => {
        let {
            handleVideoTap: y,
            hasError: E,
            isPlaying: C,
            formatTime: x,
            duration: B,
            currentTime: N,
            onTouchStart: L,
            onTouchEnd: O,
            reloadVideo: D,
            progressRef: z,
            showPlayButton: F,
            isTapped: _e,
            handlePlayPause: Y,
            handleLoadedData: H,
            handleTimeUpdate: me,
            handleDurationChange: ce,
            handleVideoError: ie
        } = useVideoPlayer(r, R.videoRef);
        return jsxs("div", {
            className: "video-control-container",
            onTouchEnd: y,
            children: [jsx("video", {
                ref: R.videoRef,
                preload: "auto",
                loop: !0,
                muted: !0,
                autoPlay: !0,
                playsInline: !0,
                disablePictureInPicture: !0,
                onLoadedData: H,
                onTimeUpdate: me,
                onDurationChange: ce,
                onError: ie,
                children: jsx("source", {src: r, type: "video/mp4"})
            }), !E && F && jsx("button", {
                className: "play_button",
                "data-tapped": _e,
                onClick: Y,
                children: jsx("div", {className: `svg_${C ? "pause" : "play"}`})
            }), E && jsx("button", {
                className: "play_button",
                onClick: D,
                children: jsx("div", {className: "svg_replay"})
            }), jsxs("div", {
                className: "progress",
                ref: z,
                onTouchStart: L,
                onTouchEnd: O,
                children: [jsx("div", {className: "duration", children: x(N)}), jsx("div", {
                    className: "bar",
                    style: {"--progress": `${N / B * 100}%`},
                    children: jsx("div", {className: "knob"})
                }), jsx("div", {className: "duration", children: x(B)})]
            })]
        })
    }, Header$1 = () => {
        const {t: r} = useTranslation();
        return jsxs("section", {
            className: "header",
            children: [jsx("div", {}), jsx("h2", {children: r("menu.installation_instruction")}), jsx("div", {})]
        })
    }, Main$1 = ({videoSrc: r}) => {
        const {videoRef: R} = usePwaInstructionVideoPlayer(),
            y = React.useMemo(() => jsx(VideoPlayer, {src: r, props: {videoRef: R}}), [r]);
        return React.useEffect(() => {
            let E = R.current;
            return () => {
                E && (!E.paused && !E.ended && E.pause(), E = null)
            }
        }, []), jsx("div", {className: "video_container", children: jsx("div", {className: "video_view", children: y})})
    }, PwaInstruction = () => jsxs("section", {
        id: "pwa_instruction",
        children: [jsx(Header$1, {}), jsx(Main$1, {videoSrc: "pwa_tutorial.mp4"})]
    }), CustomChipsInDrawer$1 = "", CustomChips$1 = "",
    AnimatedDiv = ({onInit: r, onMount: R, onUnmount: y, children: E, ...C}) => {
        const x = React.useRef(null), [B, N] = React.useState(!1), [L, O] = React.useState(!1);
        return React.useEffect(() => {
            x.current && (N(!0), r == null || r())
        }, [r]), React.useEffect(() => {
            if (x.current) return O(!0), R == null || R(), () => {
                O(!1), y == null || y()
            }
        }, [R, y]), jsx("div", {
            ref: x, ...C,
            style: {opacity: B && L ? 1 : 0, transition: "opacity 0.3s", ...C.style},
            children: E
        })
    }, NumberPad = "", NumPad = ({onNumberClick: r, onClear: R}) => jsxs("div", {
        id: "number_pad_c",
        children: [[1, 2, 3, 4, 5, 6, 7, 8, 9, 999, 0].map(C => jsx("button", {
            disabled: C == 999,
            onClick: () => r(C),
            children: C != 999 && C
        }, C)), jsx("button", {
            className: "backspace_button",
            onClick: R,
            children: jsx("div", {className: "svg_backspace"})
        })]
    }), CustomChipContext = React.createContext(void 0), CustomChipProvider = ({children: r}) => {
        const [R, y] = React.useState("main"), E = React.useCallback(x => {
            y(x)
        }, []), C = React.useMemo(() => ({currentPage: R, switchPage: E}), [R, E]);
        return jsx(CustomChipContext.Provider, {value: C, children: r})
    }, useCurrentPage = () => {
        const r = React.useContext(CustomChipContext);
        if (r) return r.currentPage
    }, useSwitchPage = () => {
        const r = React.useContext(CustomChipContext);
        if (r) return r.switchPage
    }, useHandicapInfo = () => {
        const [r] = React.useContext(UserInfoContext), [R, y] = React.useState();
        return React.useEffect(() => {
            const E = r.handicapInfo ? [...r.handicapInfo.sort((x, B) => x.betLimitLow - B.betLimitLow), ...r.vipHandicapInfo] : [];
            for (; E.length < 4;) E.push({handicapId: -1, betLimitLow: -1, betLimitHigh: -1});
            y(E)
        }, [r.handicapInfo, r.vipHandicapInfo]), {handicapInfo: R}
    }, useCustomChips = () => {
        let {handicapInfo: r} = useHandicapInfo();
        const [R] = React.useContext(UserInfoContext), {isOwner: y} = useVipOwner(), [E, C] = React.useState(() => {
            const B = R.handicapInfo ? [...R.handicapInfo.sort((N, L) => N.betLimitLow - L.betLimitLow), ...R.vipHandicapInfo] : [];
            if (y) {
                if (R && R.vipHandicapInfo && R.vipHandicapInfo.length > 0) return B.findIndex(L => L.hasOwnProperty("vipHandicapId"))
            } else {
                let N = R.handicapId;
                return B.findIndex(O => O.hasOwnProperty("handicapId") && O.handicapId == N)
            }
            return 0
        }), x = React.useCallback(() => {
            if (!r) return 0;
            if (y) {
                if (R && R.vipHandicapInfo && R.vipHandicapInfo.length > 0) {
                    let B = R.vipHandicapInfo[0].vipHandicapId;
                    return r.findIndex(L => L.vipHandicapId === B)
                }
                return 0
            } else {
                let B = R.handicapId;
                return r.findIndex(L => L.handicapId === B)
            }
        }, [y, r, R.handicapId]);
        return React.useEffect(() => {
            C(x())
        }, [r, y, R.handicapId]), {handicapInfo: r, activeTab: E, setActiveTab: C}
    }, useChipChoose = () => {
        const {preloadConfig: r} = React.useContext(ServerConfigContext), [R, y] = React.useState(0), E = 30,
            C = useWhiteLabelChips(), [x, B] = React.useState([]), [N, L] = React.useState([]),
            O = useChips({chipAttrs: x || []}), D = useCustomizeChips({chipAttrs: N || []}), z = React.useCallback(_e => {
                const Y = C.filter(H => r != null && r.whiteLabel.minChipValue ? H.amount >= (r == null ? void 0 : r.whiteLabel.minChipValue) : H).slice(R, R + E).map(H => ({
                    color: H.color,
                    amount: H.amount,
                    display: Helper.formatAbbrMoney(H.amount)
                }));
                B(Y)
            }, [C, E]), F = React.useCallback(_e => {
                L(Helper.deepCopy(_e))
            }, []);
        return {
            customizeChips: D,
            chips: O,
            chipDisplayAttrs: x,
            customizeChipsAttrs: N,
            updateChipChooseByHandicap: z,
            updateCustomizeChipChooseByHandicap: F
        }
    }, UseKeyPress = (r, R) => {
        const y = E => {
            E.key === r && R()
        };
        React.useEffect(() => (document.addEventListener("keydown", y), () => {
            document.removeEventListener("keydown", y)
        }), [r, R])
    }, Responsive = "", CustomChips = () => {
        const r = useSwitchPage(), R = useCurrentPage(), {t: y} = useTranslation(), {
            handicapInfo: E,
            activeTab: C,
            setActiveTab: x
        } = useCustomChips(), {
            customizeChips: B,
            chips: N,
            chipDisplayAttrs: L,
            customizeChipsAttrs: O,
            updateChipChooseByHandicap: D,
            updateCustomizeChipChooseByHandicap: z
        } = useChipChoose(), {
            customChipsSetting: F,
            setCustomChips: _e,
            minChipValue: Y
        } = React.useContext(GameSessionContext), [H, me] = React.useState([...L].map(tt => ({
            isChecked: !1,
            chipInfo: tt
        }))), [ce, ie] = React.useState([...O].map(tt => ({
            isChecked: !1,
            chipInfo: tt
        }))), [Be, ve] = React.useState(!0), {message: Re, showToast: Ce, visible: Ne} = useToastMessage("", 1500);
        React.useEffect(() => {
            if (E) {
                D(E[C]);
                const tt = F.find(lt => JSON.stringify(lt.handicap) === JSON.stringify(E[C]));
                tt && (z(tt.customizeChipsInfo || DefaultCustomChips), ve(![...tt.chipsInfo, ...tt.customizeChipsInfo.filter(lt => lt.display !== "")].some(lt => lt.isCheck == !1)))
            }
        }, [E, C]), React.useEffect(() => {
            if (E) {
                const tt = F.find(lt => JSON.stringify(lt.handicap) === JSON.stringify(E[C]));
                tt && L.length > 0 && me([...L].map(lt => {
                    var Bt;
                    return {
                        isChecked: ((Bt = tt.chipsInfo.find(kt => kt.display === lt.display)) == null ? void 0 : Bt.isCheck) || !1,
                        chipInfo: lt
                    }
                }))
            }
        }, [L, E, C]), React.useEffect(() => {
            if (!E) return;
            const tt = F.find(lt => JSON.stringify(lt.handicap) === JSON.stringify(E[C]));
            tt && L.length > 0 && ie([...O].map(lt => {
                var Bt;
                return {
                    isChecked: ((Bt = tt.customizeChipsInfo.find(kt => kt.display === lt.display)) == null ? void 0 : Bt.isCheck) || !1,
                    chipInfo: lt
                }
            }))
        }, [O, E, C]), React.useEffect(() => {
            if (E) {
                const tt = F.find(lt => JSON.stringify(lt.handicap) === JSON.stringify(E[C]));
                if (tt) {
                    z(tt.customizeChipsInfo || DefaultCustomChips);
                    const lt = [...tt.chipsInfo, ...tt.customizeChipsInfo.filter(Bt => Bt.display !== "")];
                    ve(!lt.some(Bt => Bt.isCheck == !1))
                }
            }
        }, [F]);
        const we = React.useCallback(() => {
            E && (ve(!Be), _e(tt => {
                const lt = tt.findIndex(Bt => JSON.stringify(Bt.handicap) === JSON.stringify(E[C]));
                if (lt !== -1) {
                    const Bt = Helper.deepCopy(tt)[lt],
                        kt = Bt.chipsInfo.map((sa, vt) => Be && vt <= 4 ? {...sa, isCheck: Be} : {...sa, isCheck: !Be}, []),
                        At = Bt.customizeChipsInfo.map((sa, vt) => ({...sa, isCheck: sa.display != "" ? !Be : !1}), []),
                        zt = {...tt[lt], chipsInfo: kt, customizeChipsInfo: At}, oa = [...tt];
                    return oa[lt] = zt, oa
                }
            }), me(tt => {
                const lt = [...tt];
                return lt.map((Bt, kt) => Be && kt <= 4 ? (Bt.isChecked = Be, Be) : Bt.isChecked = !Be), lt
            }), ie(tt => {
                const lt = [...tt];
                return lt.map(Bt => (Bt.isChecked = !1, Bt.chipInfo.isCheck = !1, Bt.chipInfo.display && Bt.chipInfo.display != "" && (Bt.isChecked = !Be, Bt.chipInfo.isCheck = !Be), Bt)), lt
            }))
        }, [E, C, Be, _e]), Me = React.useCallback(() => {
            if (E) {
                const tt = F.find(lt => JSON.stringify(lt.handicap) === JSON.stringify(E[C]));
                if (tt) return [...tt.chipsInfo, ...tt.customizeChipsInfo].reduce((lt, Bt) => Bt.isCheck ? lt + 1 : lt, 0)
            }
            return 0
        }, [E, C, F]), ke = React.useCallback(tt => {
            E && me(lt => {
                const Bt = [...lt], kt = {...Bt[tt], isChecked: !Bt[tt].isChecked};
                Bt[tt] = kt;
                const At = Helper.deepCopy(Bt.map(sa => ({isCheck: sa.isChecked, ...sa.chipInfo}))),
                    zt = {handicap: E[C], chipsInfo: At};
                return Me() + (kt.isChecked ? 1 : -1) < 5 ? (Ce(y("custom_chips.min_chip_count")), lt) : (_e(sa => {
                    const vt = sa.findIndex(ea => JSON.stringify(ea.handicap) === JSON.stringify(zt.handicap));
                    if (vt !== -1) {
                        const ea = {...sa[vt], chipsInfo: zt.chipsInfo}, _a = [...sa];
                        return _a[vt] = ea, _a
                    }
                    return sa
                }), Bt)
            })
        }, [E, C, _e, Me]), Fe = React.useCallback((tt, lt = !1) => {
            if (E) {
                if (!lt && O[tt].display === "") {
                    Ge(tt), r && r("numb_pad");
                    return
                }
                ie(Bt => {
                    const kt = [...Bt], At = {...kt[tt], isChecked: lt || !kt[tt].isChecked};
                    kt[tt] = At;
                    const zt = Helper.deepCopy(kt.map(vt => ({...vt.chipInfo, isCheck: vt.isChecked}))),
                        oa = {handicap: E[C], customizeChipsInfo: zt};
                    return Me() + (At.isChecked ? 1 : -1) < 5 ? (Ce(y("custom_chips.min_chip_count")), Bt) : (_e(vt => {
                        const ea = vt.findIndex(_a => JSON.stringify(_a.handicap) === JSON.stringify(oa.handicap));
                        if (ea !== -1) {
                            const _a = {...vt[ea], customizeChipsInfo: oa.customizeChipsInfo}, ta = [...vt];
                            return ta[ea] = _a, ta
                        }
                        return vt
                    }), kt)
                })
            }
        }, [E, C, _e, O, Me, ie]), $e = React.useCallback((tt, lt) => {
            E && (_e(Bt => {
                const kt = Bt.findIndex(At => JSON.stringify(At.handicap) === JSON.stringify(E[C]));
                if (kt !== -1) {
                    const At = [...Bt], zt = {...At[kt].customizeChipsInfo[tt], display: lt, amount: parseFloat(lt)};
                    return At[kt].customizeChipsInfo[tt] = zt, At
                }
                return Bt
            }), ie(Bt => {
                const kt = [...Bt], zt = {...{...kt[tt].chipInfo}, amount: parseFloat(lt), display: lt};
                return kt[tt] = {isChecked: kt[tt].isChecked, chipInfo: zt}, kt
            }))
        }, [E, C, F, _e]), [Ve, Je] = React.useState(!1), [Qe, Ze] = React.useState(""), qe = React.useCallback(tt => {
            if (tt === "") return !0;
            if (E) {
                const lt = F.find(kt => JSON.stringify(kt.handicap) === JSON.stringify(E[C])), Bt = kt => {
                    isMobile$1 ? Ce(kt) : (Je(!0), Ze(kt))
                };
                if (lt) return Y && Y > 0 && parseInt(tt) < Y ? (Bt(`${y("custom_chips.min_chip_value")} ${Y}`), !1) : [...lt.customizeChipsInfo, ...lt.chipsInfo].some(At => At.amount.toString() == tt) ? (Bt(`${y("custom_chips.chip_value_exists")}`), !1) : !0
            }
            return Ze(""), !0
        }, [E, C, F, Y]), ze = React.useRef(null), [De, Xe] = React.useState(""), [He, Ge] = React.useState(-1);
        React.useEffect(() => {
            var tt;
            if (He != -1) {
                ze.current && ze.current.focus();
                const lt = (tt = O[He]) == null ? void 0 : tt.amount.toString();
                lt != "0" && Xe(lt)
            }
        }, [He]);
        const Le = tt => (tt.startsWith("0") && (tt = tt.slice(1)), tt.length > 6 && (tt = tt.slice(0, 6)), tt),
            We = tt => {
                let lt = tt.target.value.replace(/[^0-9]/g, "");
                lt = Le(lt), Xe(lt)
            }, dt = () => {
                De.length > 0 && qe(De) && ($e(He, De), Xe(""), Ge(-1), Fe(He, !0), r && r("main"))
            };
        React.useEffect(() => {
            R && R == "main" && et()
        }, [R]);
        const et = () => {
            He != -1 && (Xe(""), Ge(-1), Je(!1))
        };
        UseKeyPress("Enter", () => {
            He !== -1 && dt()
        }), UseKeyPress("Escape", () => {
            He !== -1 && et()
        });
        const nt = De.length <= 0;
        return jsxs("div", {
            id: "custom_chip_panel",
            className: "custom_chip_panel_container",
            children: [He === -1 && jsx("section", {
                className: "handicap_headers",
                style: {"--section": C},
                children: E && E.map((tt, lt) => jsx(HandicapTabbar, {
                    onClick: () => {
                        const Bt = E.findIndex(kt => kt.betLimitLow == -1);
                        Bt != -1 && lt >= Bt || x(lt)
                    }, handicap: tt, selected: C == lt
                }, lt))
            }), He === -1 && jsxs("section", {
                className: "choose_common_chips",
                children: [jsxs("div", {
                    className: "top_bar",
                    children: [jsx("div", {
                        className: "title",
                        children: y("custom_chips.choose_common_chips")
                    }), jsx("button", {
                        className: "selected_all_button",
                        onClick: () => {
                            we()
                        },
                        children: jsx(CheckBox, {
                            isChecked: Be,
                            children: jsx("div", {className: "text", children: y("custom_chips.select_all")})
                        })
                    })]
                }), jsx("div", {
                    className: `${isMobile$1 ? "chips_choose_scroll_view" : "chips_choose_container"}`,
                    children: N.map((tt, lt) => jsxs("button", {
                        className: `chip ${H[lt].isChecked ? "" : "erv_dim_button"}`,
                        onClick: Bt => {
                            ke(lt)
                        },
                        children: [tt, jsx(ChipCheckBox, {isChecked: H.length > 0 ? H[lt].isChecked : !1})]
                    }, lt))
                })]
            }), He === -1 && jsxs("section", {
                className: "custom_chip_value",
                children: [jsx("div", {
                    className: "top_bar",
                    children: jsx("div", {className: "title", children: y("custom_chips.custom_chips_value")})
                }), jsx("div", {
                    className: "chips_choose_container", children: B.slice(0, 5).map((tt, lt) => {
                        const Bt = !ce[lt].isChecked && ce[lt].chipInfo.display != "", kt = !ce[lt].isChecked;
                        return jsxs("section", {
                            className: "customize_chip_value_container",
                            children: [jsxs("button", {
                                className: `chip ${(isMobile$1 ? Bt : kt) ? "erv_dim_button" : ""}`,
                                onClick: At => {
                                    Fe(lt)
                                },
                                children: [tt, jsx(ChipCheckBox, {isChecked: ce.length > 0 ? ce[lt].isChecked : !1})]
                            }), jsx("div", {
                                className: "edit_button_box",
                                children: jsx("button", {
                                    className: "edit_button", "data-btn-selected": !1, onClick: () => {
                                        Ge(lt), r && r("numb_pad")
                                    }, children: jsx("div", {className: "svg_edit_btn"})
                                })
                            })]
                        }, lt)
                    })
                })]
            }), He !== -1 && (isMobile$1 ? jsxs("div", {
                className: "edit_chip_value_panel_num_pad",
                children: [jsx("div", {
                    className: "input_panel",
                    children: jsx("div", {
                        className: "edit_box_panel",
                        children: jsxs("div", {
                            className: "chip_value_input",
                            children: [jsx(Chip, {
                                color: DefaultCustomChips[0].color,
                                amount: ""
                            }), jsx("input", {readOnly: !0, ref: ze, type: "text", value: De, onChange: We})]
                        })
                    })
                }), jsx("div", {
                    className: "num_pad", children: jsx(NumPad, {
                        onNumberClick: tt => {
                            Xe(lt => Le(lt += tt.toString()))
                        }, onClear: () => {
                            Xe(tt => tt.slice(0, -1))
                        }
                    })
                }), jsx("div", {
                    className: "comfirm_button_ct",
                    children: jsx("button", {
                        className: `comfirm_button ${nt ? "erv_diabled_button" : ""} `,
                        "data-btn-selected": !1,
                        onClick: () => {
                            dt()
                        },
                        children: jsx("div", {className: "svg_confirm"})
                    })
                })]
            }) : jsx(AnimatedDiv, {
                children: jsx("div", {
                    className: "edit_chip_value_panel",
                    children: jsx("div", {
                        className: "background",
                        children: jsxs("div", {
                            className: "edit_panel_box",
                            children: [jsxs("div", {
                                className: "chip_value_input",
                                children: [jsx(Chip, {
                                    color: DefaultCustomChips[0].color,
                                    amount: ""
                                }), jsx("input", {ref: ze, type: "text", value: De, onChange: We})]
                            }), jsx("button", {
                                className: `comfirm_button ${nt ? "erv_diabled_button" : ""} `,
                                "data-btn-selected": !1,
                                onClick: () => {
                                    dt()
                                },
                                children: jsx("div", {className: "svg_confirm"})
                            }), jsx("button", {
                                className: "cancel_button", "data-btn-selected": !1, onClick: () => {
                                    et()
                                }, children: jsx("div", {className: "svg_cancel"})
                            }), Ve && jsxs("div", {
                                className: "error_msg",
                                children: [jsx("div", {className: "svg_alert_red"}), Qe]
                            })]
                        })
                    })
                })
            })), Ne && jsx(CcMessageToast, {message: Re})]
        })
    }, HandicapTabbar = r => {
        let {handicap: R, selected: y = !1} = r;
        const E = useDisplayCurrency(), C = React.useCallback(x => {
            const B = x.vipHandicapId != null;
            return `${Helper.formatAbbrMoney(x.betLimitLow)} - ${Helper.formatAbbrMoney(x.betLimitHigh)}${B ? " (VIP)" : ""}`
        }, [E]);
        return jsx("button", {
            className: "handicap_tab",
            "data-selected": y,
            onClick: r.onClick,
            children: jsx(Fragment, {
                children: R.betLimitLow !== -1 && jsxs("div", {
                    className: "display",
                    children: [jsx("div", {className: "svg_odds"}), jsx("div", {className: "text", children: C(R)})]
                })
            })
        })
    }, ChipCheckBox = r => jsx("div", {
        id: "chip_check_box",
        className: "checkbox-container",
        children: jsx("div", {
            className: "button",
            children: jsx("input", {
                type: "checkbox",
                id: "checkbox1",
                name: "checkbox1",
                checked: r.isChecked,
                onChange: () => {
                },
                className: "checkbox-input"
            })
        })
    }), CheckBox = r => jsxs("div", {
        id: "checkbox-container",
        className: "checkbox-container",
        children: [jsx("div", {
            className: "button",
            children: jsx("input", {
                type: "checkbox",
                id: "checkbox1",
                name: "checkbox1",
                checked: r.isChecked,
                onChange: () => {
                },
                className: "checkbox-input"
            })
        }), r.children]
    }), CcMessageToast = ({message: r = ""}) => jsx("div", {
        id: "custom_chips_message_toast",
        className: "error_msg_box",
        children: jsx("div", {
            className: "background",
            children: jsxs("div", {className: "error_msg", children: [jsx("div", {className: "svg_alert_red"}), r]})
        })
    }), CustomChipsInDrawer = r => {
        const {onClose: R} = r;
        return jsx("section", {
            id: "custom_chips_in_drawer",
            children: jsxs(CustomChipProvider, {children: [jsx(Header, {onClose: R}), jsx(Main, {})]})
        })
    }, Header = r => {
        const {onClose: R} = r, {t: y} = useTranslation(), E = useCurrentPage(), C = useSwitchPage();
        return jsxs("section", {
            className: "header",
            children: [E == "numb_pad" ? jsx("button", {
                className: "svg_arrow_left wH100pc extended-button",
                onClick: () => {
                    C && C("main")
                }
            }) : jsx("div", {}), jsxs("h2", {children: [jsx("div", {className: "svg_menu_custom_chips"}), y("custom_chips.title")]}), E == "main" ? jsx("button", {
                className: "svg_close extended-button",
                onClick: R
            }) : jsx("div", {})]
        })
    }, Main = () => jsx("div", {className: "container", children: jsx(CustomChips, {})}),
    useMenuPopupWrapperPortrait = (r = POPUP.MENU) => {
        let [R, y] = React.useState(r);
        const [E, C] = React.useState(!0);
        return React.useEffect(() => {
            y(r)
        }, [r]), {popup: R, setPopUp: y, showPopBtn: E, setShowPopBtn: C}
    }, useFastBetPopUp = r => {
        const [R, y] = React.useState(!1);
        let E = React.useRef("unset");
        const C = () => {
            y(!0)
        };
        return React.useEffect(() => {
            r === POPUP.FAST_BET ? (C(), E.current = "unset") : E.current = "none"
        }, [r]), {isFastBetVisible: R, displayCss: E.current}
    }, MenuPopupWrapperPortrait = ({openedPopup: r, closeAll: R, functions: y}) => {
        let {popup: E, setPopUp: C, showPopBtn: x, setShowPopBtn: B} = useMenuPopupWrapperPortrait(r), {
            isFastBetVisible: N,
            displayCss: L
        } = useFastBetPopUp(E);
        return jsxs(Fragment, {
            children: [N && jsx(IgnoreVIPProvider, {
                children: jsx(FastBet, {
                    display: L, clickMenu: O => {
                        C(O)
                    }, onClose: R
                })
            }), E === POPUP.CUSTOM_CHIP && jsx(CustomChipsInDrawer, {onClose: R}), E !== POPUP.CUSTOM_CHIP && E !== POPUP.PROFILE && E !== POPUP.MENU && E !== POPUP.FAST_BET && E !== POPUP.PAYOUT && x && jsx(MenuPopButton, {
                onClick: () => {
                    C(POPUP.MENU)
                }
            }), E === POPUP.ADD_TO_HOME_SCREEN && jsx(PwaInstruction, {}), E === POPUP.MENU && jsx(MenuPortrait, {
                clickMenu: O => {
                    C(O)
                }, onClose: R
            }), E === POPUP.BET_RECORD && jsx(BetRecord, {
                onDetailPage: O => {
                    B(O)
                }, movable: !1, onClose: R
            }), E === POPUP.PROFILE && jsx(Profile, {
                onChangePage: O => {
                    B(!O)
                }, popMenu: () => {
                    C(POPUP.MENU)
                }, movable: !1, onClose: R
            }), E == POPUP.GUIDE && jsx(GameRules, {
                movable: !1,
                onClose: R
            }), E == POPUP.SETTINGS && jsx(Settings, {movable: !1, onClose: R})]
        })
    }, FastBetWithHeader$1 = "", useResizableDiv = ({containerScale: r, initialHeight: R}) => {
        const [y, E] = React.useState(R), C = React.useRef(null), x = React.useRef(0),
            B = React.useRef(0), {rerender: N} = useRerender();
        React.useEffect(() => {
            C.current && (B.current = C.current.getBoundingClientRect().top / r)
        }, [C.current, N]), React.useEffect(() => {
            C.current && (C.current.style.height = `${y}px`)
        }, [y, N]);
        const L = z => {
            x.current = z.clientY, z.preventDefault(), document.addEventListener("mousemove", D), document.addEventListener("mouseup", O)
        }, O = () => {
            document.removeEventListener("mousemove", D), document.removeEventListener("mouseup", O)
        }, D = z => {
            const F = C.current.getBoundingClientRect().top, _e = x.current - z.clientY, Y = y - _e / r,
                me = (1080 * r * .86 - (F - B.current)) / r;
            Y > me || E(Y)
        };
        return {handleMouseDown: L, resizableRef: C, height: y}
    }, FastBetWithHeader = r => {
        const {t: R} = useTranslation(), y = React.useRef(null), {rerender: E} = useRerender(),
            C = React.useContext(ScalableContainerScaleContext), {
                handleMouseDown: x,
                resizableRef: B
            } = useResizableDiv({containerScale: C, initialHeight: 720});
        return jsx(ToggleMovablePopup, {
            movable: !0,
            headerRef: y,
            childRef: B,
            onClose: () => {
            },
            align: "right",
            children: jsxs("section", {
                ref: B,
                id: "fast_bet_with_header",
                children: [jsxs("section", {
                    className: "header",
                    ref: y,
                    children: [jsx("div", {}), jsxs("h2", {
                        children: [jsx("div", {
                            className: "svg_menu_fast_bet",
                            children: " "
                        }), R("fast_bet.title")]
                    }), jsx("button", {className: "svg_close extended-button", onClick: r.onClose})]
                }), jsx("div", {className: "footer"}), jsx(IgnoreVIPProvider, {
                    children: jsx(FastBet, {
                        display: "unset",
                        clickMenu: () => {
                        },
                        onClose: () => {
                        }
                    })
                }), jsx("div", {className: "drag-handle", onMouseDown: x})]
            }, E)
        })
    }, CustomChipsWithHeader$1 = "", CustomChipsWithHeader = r => {
        const {t: R} = useTranslation(), y = React.useRef(null), {rerender: E} = useRerender(), C = React.useRef(null),
            x = React.useMemo(() => ({align: "center", offset: {x: 1, y: .25}}), []);
        return UseKeyPress("Escape", () => {
            r.onClose && r.onClose()
        }), jsx(ToggleMovablePopup, {
            movable: !1,
            headerRef: y,
            childRef: C,
            onClose: () => {
            },
            align: "right",
            initPositon: x,
            children: jsxs("section", {
                ref: C,
                id: "custom_chips_with_header",
                children: [jsxs("section", {
                    className: "header",
                    ref: y,
                    children: [jsx("div", {}), jsxs("h2", {
                        children: [jsx("div", {
                            className: "svg_menu_custom_chips",
                            children: " "
                        }), R("custom_chips.title")]
                    }), jsx("button", {className: "svg_close extended-button", onClick: r.onClose})]
                }), jsx(CustomChips, {})]
            }, E)
        })
    }, useGameTablePopUpAndDrawer = r => {
        const {popup: R, setPopup: y} = React.useContext(GameTablePopUpContext), {
            setDrawerHidden: E,
            popup: C,
            setPopup: x
        } = useDrawer(r);
        return React.useEffect(() => {
            C == "" && y("")
        }, [C]), React.useEffect(() => {
            R !== "" && x(R)
        }, [R]), {popup: C, setPopup: x, setDrawerHidden: E}
    }, GameTableDealerInfo$1 = "", GameTableDealerInfo = () => {
        const {gameTableInfo: r} = React.useContext(GameTableContext), {orientation: R} = useDeviceOrientation(),
            y = React.useMemo(() => r.tableInfo.dealerName !== "", [r.tableInfo.dealerName]);
        return jsx("div", {
            id: "game_table_dealer",
            children: !y && (R === "short-portrait" || R === "long-portrait") ? jsx("div", {className: "game_table_dealer_name_null"}) : jsxs(Fragment, {
                children: [jsx("div", {className: "svg_menu_dealer"}), jsx("span", {
                    id: "game_table_dealer_name",
                    children: Helper.transformString(r.tableInfo.dealerName, "_")
                })]
            })
        })
    }, PopupContext = React.createContext(["", () => {
    }]), GameTableMenu = r => {
        let {hideSideHallBtn: R = !1, hideReload: y = !1} = r;
        const {
            t: E,
            i18n: C
        } = useTranslation(), [x, B] = React.useState(!!document.fullscreenElement), {gameTableInfo: N} = React.useContext(GameTableContext), {
            gameStatus: L,
            verificationEnable: O,
            setVerificationEnable: D,
            isVerified: z,
            setVerified: F
        } = React.useContext(GameTableStatusContext);
        useDeviceOrientation();
        const [_e, Y] = React.useState(!1), {
                logoutGameTable: H,
                verifyGame: me,
                getCurrentPlayerBetInfo: ce
            } = React.useContext(SFSCoreContext), [ie, Be] = React.useState(!0), [ve, Re] = React.useState(550),
            Ce = React.useRef(null), Ne = React.useRef(null);
        let {
            SEXY_GAME_TABLES: we,
            CLASSIC_BACCARAT_GAME_TABLES: Me
        } = React.useContext(GameSessionContext), {nextLine: ke} = useGameTableVideoContext();
        const Fe = React.useRef(null);
        let {popup: $e, setDrawerHidden: Ve, setPopup: Je} = useGameTablePopUpAndDrawer(Fe);
        React.useEffect(() => {
            var Xe;
            (Xe = Fe.current) == null || Xe.close()
        }, [N.tableInfo.tableId]), React.useEffect(() => {
            L.tableStatus == TableStatus.CanBet && D(!z), [TableStatus.PayOut, TableStatus.Shuffle, TableStatus.Done, TableStatus.Pause, TableStatus.Maintenance].find(Xe => Xe == L.tableStatus) && (F(!1), D(!1))
        }, [L]), React.useEffect(() => {
            const Xe = () => B(!!document.fullscreenElement);
            return document.addEventListener("fullscreenchange", Xe), () => document.removeEventListener("fullscreenchange", Xe)
        }, []), React.useEffect(() => {
            Y(!!isDesktop$1), isMobile$1 && Re(550)
        }, []), React.useEffect(() => {
            $e == POPUP.FAST_BET && ce()
        }, [$e]);
        const Qe = React.useMemo(() => {
            const Xe = N.tableInfo.gameType, He = N.tableInfo.tableName;
            let Ge = "";
            const Le = C.language === "sc" || C.language === "tc" ? "" : " ";
            return we.includes(`${He}`) ? (Ge = `${E("game_types.sexy")}`, `${Ge}${Le}${E(`game_types.${Xe}`)}  ${He}`) : Me.includes(`${He}`) ? (Ge = `${E("game_types.classic")}`, `${Ge}${Le}${E(`game_types.${Xe}`)}  ${He}`) : N.tableInfo.tableId === HALL_TYPE.MULTI ? E("game_hall.multi_play") : `${E(`game_types.${N.altGameType === AltGameType.None ? Xe : N.altGameType}`)} ${He}`
        }, [N.tableInfo.tableName, N.tableInfo.gameType, C.language]), {
            username: Ze,
            nickname: qe,
            name: ze,
            fullUsername: De
        } = useUsername(6);
        return jsx(PopupContext.Provider, {
            value: [$e, Je], children: jsxs("section", {
                id: "game_table_menu", children: [jsxs("section", {
                    id: "game_table_info",
                    children: [isDesktop$1 && jsx(GameTableMenuButton, {
                        icon: "menu_back",
                        size: "big",
                        tooltip: E("menu.back"),
                        tooltipType: "left",
                        onClick: H
                    }), jsxs("div", {
                        className: "user_info_container",
                        children: [jsxs("div", {
                            className: "box",
                            children: [jsxs("div", {
                                id: "game_table_title",
                                children: [jsxs("span", {
                                    className: "table_name",
                                    children: [" ", Qe]
                                }), jsxs("span", {children: [jsx("span", {children: "GID: "}), L.gameRoundId]})]
                            }), jsx(GameTableDealerInfo, {})]
                        }), jsxs("div", {
                            className: "box",
                            children: [!!ze && jsx("div", {className: "svg_person"}), jsx("div", {
                                className: "username_text",
                                children: ze || ""
                            }), jsx(Tooltip, {
                                className: "username_tooltip",
                                isHover: isDesktop$1,
                                timeout: isMobile$1 ? 3e3 : void 0,
                                children: De || ""
                            })]
                        })]
                    }), isMobile$1 && jsxs("div", {
                        className: "top_menu_container",
                        children: [jsx("button", {
                            id: "menu_toggle",
                            className: "margin_left",
                            "data-btn-selected": !1,
                            onClick: () => Je(POPUP.MENU),
                            children: jsx("div", {className: "svg_menu"})
                        }), !R && jsx("button", {
                            id: "menu_fast_bet",
                            className: "margin_right",
                            "data-btn-selected": !1,
                            onClick: () => Je(POPUP.FAST_BET),
                            children: jsx("div", {className: "svg_menu_fast_bet"})
                        })]
                    }), isDesktop$1 && jsxs("div", {
                        children: [jsx(Handicap, {
                            closeOther: () => {
                                $e === POPUP.PAYOUT && Je("")
                            }
                        }), !r.hidePayout && jsx(GameTableMenuButton, {
                            onClick: isDesktop$1 ? void 0 : () => Je(POPUP.PAYOUT),
                            tooltip: E("menu.payout"),
                            icon: "menu_payout",
                            function: "payout",
                            size: isDesktop$1 ? "mid" : "small",
                            unanchor: !0,
                            tooltipType: "mid",
                            children: jsx(PayoutList, {gameType: N.tableInfo.gameType, altGameType: N.altGameType})
                        })]
                    })]
                }), isMobile$1 && jsx(Drawer, {
                    ref: Fe,
                    withCloseBtn: $e === POPUP.FAST_BET,
                    setDrawerHidden: Ve,
                    children: jsxs(Fragment, {
                        children: [$e === POPUP.PAYOUT && jsx(PayoutList, {
                            onClose: () => {
                            }, movable: !1, gameType: N.tableInfo.gameType, altGameType: N.altGameType
                        }), jsx("section", {
                            className: "drawer_content",
                            children: jsx(MenuPopupWrapperPortrait, {
                                openedPopup: $e, closeAll: () => {
                                    var Xe;
                                    (Xe = Fe.current) == null || Xe.close()
                                }
                            })
                        })]
                    })
                }), isDesktop$1 && jsxs("div", {
                    id: "game_table_popup",
                    style: {"--translate": `${ve}px`},
                    "aria-busy": ie,
                    ref: Ne,
                    children: [jsx("div", {className: "knob", ref: Ce}), jsxs("div", {
                        className: "title",
                        children: [jsx("div", {}), jsx("div", {children: E("menu.title")}), jsx("div", {})]
                    }), jsxs("section", {
                        id: "game_table_options",
                        children: [isMobile$1 && jsx(GameTableMenuButton, {
                            icon: "menu_back",
                            size: "big",
                            label: E("menu.back"),
                            tooltip: E("menu.back"),
                            tooltipType: "right",
                            onClick: H
                        }), !y && jsx(GameTableMenuButton, {
                            onClick: () => {
                                ke()
                            },
                            icon: "video_refresh",
                            size: "big",
                            label: E("menu.video"),
                            tooltip: E("menu.video"),
                            tooltipType: "mid",
                            unanchor: !0
                        }), !r.hideVerify && jsx(GameTableMenuButton, {
                            icon: "menu_verification",
                            size: "big",
                            label: E("menu.verification"),
                            tooltip: E("menu.verification"),
                            tooltipType: "mid",
                            enable: O,
                            onClick: me
                        }), document.documentElement.requestFullscreen && jsx(GameTableMenuButton, {
                            icon: `menu_${x ? "exit" : ""}fullscreen`,
                            size: "big",
                            label: E(x ? "menu.exitfullscreen" : "menu.fullscreen"),
                            tooltip: E(x ? "menu.exitfullscreen" : "menu.fullscreen"),
                            tooltipType: "mid",
                            onClick: () => x ? document.exitFullscreen() : document.documentElement.requestFullscreen()
                        }), !r.hideGuide && jsx(GameTableMenuButton, {
                            icon: "menu_help",
                            function: "guide",
                            size: "big",
                            label: E("menu.guide"),
                            tooltip: E("menu.guide"),
                            tooltipType: "mid",
                            unanchor: !0,
                            children: jsx(GameRules, {})
                        }), jsx(GameTableMenuButton, {
                            icon: "menu_record",
                            function: "bet_record",
                            size: "big",
                            label: E("menu.history"),
                            tooltip: E("menu.history"),
                            tooltipType: "mid",
                            unanchor: !0,
                            children: jsx(BetRecord, {})
                        }), jsx(GameTableMenuButton, {
                            icon: "menu_settings",
                            function: "settings",
                            size: "big",
                            label: E("menu.settings"),
                            tooltip: E("menu.settings"),
                            tooltipType: "right",
                            unanchor: !0,
                            children: jsx(Settings, {})
                        })]
                    }), jsx(GameTablePopUp, {
                        function: "fast_bet",
                        children: jsx(FastBetWithHeader, {})
                    }), jsx(GameTablePopUp, {function: "custom_chip", block: !0, children: jsx(CustomChipsWithHeader, {})})]
                })]
            })
        })
    }, GameTableMenuButton = r => {
        var N;
        let {enable: R = !0} = r;
        const [y, E] = React.useState(!1), {orientation: C} = useDeviceOrientation(), [x, B] = React.useContext(PopupContext);
        return React.useEffect(() => {
            y && r.function && B(r.function), !y && r.function && x === r.function && B("")
        }, [y]), React.useEffect(() => {
            y && r.function && x !== r.function && E(!1)
        }, [x]), jsxs("div", {
            className: `menu_button${r.function !== "payout" && isMobile$1 ? " menu_highlight_button" : ""} ${r.size}${r.unanchor ? " unanchor" : ""} ${r.icon.replace("menu_", "")}`,
            children: [jsx("button", {
                className: R ? "" : "disabled",
                onClick: r.onClick || (() => E(!y)),
                "data-label": (N = r.label) == null ? void 0 : N.toLowerCase(),
                children: jsx("div", {className: `svg_${r.icon}`})
            }), C === "large-landscape" && r.tooltip && !y && jsx(Tooltip, {
                className: `${r.tooltipType || "right"}_tooltip`,
                children: r.tooltip
            }), y && r.children && React.cloneElement(r.children, {onClose: () => E(!1)})]
        })
    }, scrollViewWithBounce = "", LEFT = "Left", RIGHT = "Right", UP = "Up", DOWN = "Down", defaultProps = {
        delta: 10,
        preventScrollOnSwipe: !1,
        rotationAngle: 0,
        trackMouse: !1,
        trackTouch: !0,
        swipeDuration: 1 / 0,
        touchEventOptions: {passive: !0}
    }, initialState = {first: !0, initial: [0, 0], start: 0, swiping: !1, xy: [0, 0]}, mouseMove = "mousemove",
    mouseUp = "mouseup", touchEnd = "touchend", touchMove = "touchmove", touchStart = "touchstart";

function getDirection(r, R, y, E) {
    return r > R ? y > 0 ? RIGHT : LEFT : E > 0 ? DOWN : UP
}

function rotateXYByAngle(r, R) {
    if (R === 0) return r;
    const y = Math.PI / 180 * R, E = r[0] * Math.cos(y) + r[1] * Math.sin(y),
        C = r[1] * Math.cos(y) - r[0] * Math.sin(y);
    return [E, C]
}

function getHandlers(r, R) {
    const y = D => {
        const z = "touches" in D;
        z && D.touches.length > 1 || r((F, _e) => {
            _e.trackMouse && !z && (document.addEventListener(mouseMove, E), document.addEventListener(mouseUp, B));
            const {clientX: Y, clientY: H} = z ? D.touches[0] : D, me = rotateXYByAngle([Y, H], _e.rotationAngle);
            return _e.onTouchStartOrOnMouseDown && _e.onTouchStartOrOnMouseDown({event: D}), Object.assign(Object.assign(Object.assign({}, F), initialState), {
                initial: me.slice(),
                xy: me,
                start: D.timeStamp || 0
            })
        })
    }, E = D => {
        r((z, F) => {
            const _e = "touches" in D;
            if (_e && D.touches.length > 1) return z;
            if (D.timeStamp - z.start > F.swipeDuration) return z.swiping ? Object.assign(Object.assign({}, z), {swiping: !1}) : z;
            const {clientX: Y, clientY: H} = _e ? D.touches[0] : D, [me, ce] = rotateXYByAngle([Y, H], F.rotationAngle),
                ie = me - z.xy[0], Be = ce - z.xy[1], ve = Math.abs(ie), Re = Math.abs(Be),
                Ce = (D.timeStamp || 0) - z.start, Ne = Math.sqrt(ve * ve + Re * Re) / (Ce || 1),
                we = [ie / (Ce || 1), Be / (Ce || 1)], Me = getDirection(ve, Re, ie, Be),
                ke = typeof F.delta == "number" ? F.delta : F.delta[Me.toLowerCase()] || defaultProps.delta;
            if (ve < ke && Re < ke && !z.swiping) return z;
            const Fe = {
                absX: ve,
                absY: Re,
                deltaX: ie,
                deltaY: Be,
                dir: Me,
                event: D,
                first: z.first,
                initial: z.initial,
                velocity: Ne,
                vxvy: we
            };
            Fe.first && F.onSwipeStart && F.onSwipeStart(Fe), F.onSwiping && F.onSwiping(Fe);
            let $e = !1;
            return (F.onSwiping || F.onSwiped || F[`onSwiped${Me}`]) && ($e = !0), $e && F.preventScrollOnSwipe && F.trackTouch && D.cancelable && D.preventDefault(), Object.assign(Object.assign({}, z), {
                first: !1,
                eventData: Fe,
                swiping: !0
            })
        })
    }, C = D => {
        r((z, F) => {
            let _e;
            if (z.swiping && z.eventData) {
                if (D.timeStamp - z.start < F.swipeDuration) {
                    _e = Object.assign(Object.assign({}, z.eventData), {event: D}), F.onSwiped && F.onSwiped(_e);
                    const Y = F[`onSwiped${_e.dir}`];
                    Y && Y(_e)
                }
            } else F.onTap && F.onTap({event: D});
            return F.onTouchEndOrOnMouseUp && F.onTouchEndOrOnMouseUp({event: D}), Object.assign(Object.assign(Object.assign({}, z), initialState), {eventData: _e})
        })
    }, x = () => {
        document.removeEventListener(mouseMove, E), document.removeEventListener(mouseUp, B)
    }, B = D => {
        x(), C(D)
    }, N = (D, z) => {
        let F = () => {
        };
        if (D && D.addEventListener) {
            const _e = Object.assign(Object.assign({}, defaultProps.touchEventOptions), z.touchEventOptions),
                Y = [[touchStart, y, _e], [touchMove, E, Object.assign(Object.assign({}, _e), z.preventScrollOnSwipe ? {passive: !1} : {})], [touchEnd, C, _e]];
            Y.forEach(([H, me, ce]) => D.addEventListener(H, me, ce)), F = () => Y.forEach(([H, me]) => D.removeEventListener(H, me))
        }
        return F
    }, O = {
        ref: D => {
            D !== null && r((z, F) => {
                if (z.el === D) return z;
                const _e = {};
                return z.el && z.el !== D && z.cleanUpTouch && (z.cleanUpTouch(), _e.cleanUpTouch = void 0), F.trackTouch && D && (_e.cleanUpTouch = N(D, F)), Object.assign(Object.assign(Object.assign({}, z), {el: D}), _e)
            })
        }
    };
    return R.trackMouse && (O.onMouseDown = y), [O, N]
}

function updateTransientState(r, R, y, E) {
    return !R.trackTouch || !r.el ? (r.cleanUpTouch && r.cleanUpTouch(), Object.assign(Object.assign({}, r), {cleanUpTouch: void 0})) : r.cleanUpTouch ? R.preventScrollOnSwipe !== y.preventScrollOnSwipe || R.touchEventOptions.passive !== y.touchEventOptions.passive ? (r.cleanUpTouch(), Object.assign(Object.assign({}, r), {cleanUpTouch: E(r.el, R)})) : r : Object.assign(Object.assign({}, r), {cleanUpTouch: E(r.el, R)})
}

function useSwipeable(r) {
    const {trackMouse: R} = r, y = React.useRef(Object.assign({}, initialState)),
        E = React.useRef(Object.assign({}, defaultProps)), C = React.useRef(Object.assign({}, E.current));
    C.current = Object.assign({}, E.current), E.current = Object.assign(Object.assign({}, defaultProps), r);
    let x;
    for (x in defaultProps) E.current[x] === void 0 && (E.current[x] = defaultProps[x]);
    const [B, N] = React.useMemo(() => getHandlers(L => y.current = L(y.current, E.current), {trackMouse: R}), [R]);
    return y.current = updateTransientState(y.current, E.current, C.current, N), B
}

let windowObject;
typeof window < "u" ? windowObject = window : typeof self < "u" ? windowObject = self : windowObject = global;
let cancelFrame = null, requestFrame = null;
const TIMEOUT_DURATION = 20, clearTimeoutFn = windowObject.clearTimeout, setTimeoutFn = windowObject.setTimeout,
    cancelAnimationFrameFn = windowObject.cancelAnimationFrame || windowObject.mozCancelAnimationFrame || windowObject.webkitCancelAnimationFrame,
    requestAnimationFrameFn = windowObject.requestAnimationFrame || windowObject.mozRequestAnimationFrame || windowObject.webkitRequestAnimationFrame;
cancelAnimationFrameFn == null || requestAnimationFrameFn == null ? (cancelFrame = clearTimeoutFn, requestFrame = function (R) {
    return setTimeoutFn(R, TIMEOUT_DURATION)
}) : (cancelFrame = function ([R, y]) {
    cancelAnimationFrameFn(R), clearTimeoutFn(y)
}, requestFrame = function (R) {
    const y = requestAnimationFrameFn(function () {
        clearTimeoutFn(E), R()
    }), E = setTimeoutFn(function () {
        cancelAnimationFrameFn(y), R()
    }, TIMEOUT_DURATION);
    return [y, E]
});

function createDetectElementResize(r) {
    let R, y, E, C, x, B, N;
    const L = typeof document < "u" && document.attachEvent;
    if (!L) {
        B = function (ce) {
            const ie = ce.__resizeTriggers__, Be = ie.firstElementChild, ve = ie.lastElementChild,
                Re = Be.firstElementChild;
            ve.scrollLeft = ve.scrollWidth, ve.scrollTop = ve.scrollHeight, Re.style.width = Be.offsetWidth + 1 + "px", Re.style.height = Be.offsetHeight + 1 + "px", Be.scrollLeft = Be.scrollWidth, Be.scrollTop = Be.scrollHeight
        }, x = function (ce) {
            return ce.offsetWidth !== ce.__resizeLast__.width || ce.offsetHeight !== ce.__resizeLast__.height
        }, N = function (ce) {
            if (ce.target.className && typeof ce.target.className.indexOf == "function" && ce.target.className.indexOf("contract-trigger") < 0 && ce.target.className.indexOf("expand-trigger") < 0) return;
            const ie = this;
            B(this), this.__resizeRAF__ && cancelFrame(this.__resizeRAF__), this.__resizeRAF__ = requestFrame(function () {
                x(ie) && (ie.__resizeLast__.width = ie.offsetWidth, ie.__resizeLast__.height = ie.offsetHeight, ie.__resizeListeners__.forEach(function (Re) {
                    Re.call(ie, ce)
                }))
            })
        };
        let F = !1, _e = "";
        E = "animationstart";
        const Y = "Webkit Moz O ms".split(" ");
        let H = "webkitAnimationStart animationstart oAnimationStart MSAnimationStart".split(" "), me = "";
        {
            const ce = document.createElement("fakeelement");
            if (ce.style.animationName !== void 0 && (F = !0), F === !1) {
                for (let ie = 0; ie < Y.length; ie++) if (ce.style[Y[ie] + "AnimationName"] !== void 0) {
                    me = Y[ie], _e = "-" + me.toLowerCase() + "-", E = H[ie], F = !0;
                    break
                }
            }
        }
        y = "resizeanim", R = "@" + _e + "keyframes " + y + " { from { opacity: 0; } to { opacity: 0; } } ", C = _e + "animation: 1ms " + y + "; "
    }
    const O = function (F) {
        if (!F.getElementById("detectElementResize")) {
            const _e = (R || "") + ".resize-triggers { " + (C || "") + 'visibility: hidden; opacity: 0; } .resize-triggers, .resize-triggers > div, .contract-trigger:before { content: " "; display: block; position: absolute; top: 0; left: 0; height: 100%; width: 100%; overflow: hidden; z-index: -1; } .resize-triggers > div { background: #eee; overflow: auto; } .contract-trigger:before { width: 200%; height: 200%; }',
                Y = F.head || F.getElementsByTagName("head")[0], H = F.createElement("style");
            H.id = "detectElementResize", H.type = "text/css", r != null && H.setAttribute("nonce", r), H.styleSheet ? H.styleSheet.cssText = _e : H.appendChild(F.createTextNode(_e)), Y.appendChild(H)
        }
    };
    return {
        addResizeListener: function (F, _e) {
            if (L) F.attachEvent("onresize", _e); else {
                if (!F.__resizeTriggers__) {
                    const Y = F.ownerDocument, H = windowObject.getComputedStyle(F);
                    H && H.position === "static" && (F.style.position = "relative"), O(Y), F.__resizeLast__ = {}, F.__resizeListeners__ = [], (F.__resizeTriggers__ = Y.createElement("div")).className = "resize-triggers";
                    const me = Y.createElement("div");
                    me.className = "expand-trigger", me.appendChild(Y.createElement("div"));
                    const ce = Y.createElement("div");
                    ce.className = "contract-trigger", F.__resizeTriggers__.appendChild(me), F.__resizeTriggers__.appendChild(ce), F.appendChild(F.__resizeTriggers__), B(F), F.addEventListener("scroll", N, !0), E && (F.__resizeTriggers__.__animationListener__ = function (Be) {
                        Be.animationName === y && B(F)
                    }, F.__resizeTriggers__.addEventListener(E, F.__resizeTriggers__.__animationListener__))
                }
                F.__resizeListeners__.push(_e)
            }
        }, removeResizeListener: function (F, _e) {
            if (L) F.detachEvent("onresize", _e); else if (F.__resizeListeners__.splice(F.__resizeListeners__.indexOf(_e), 1), !F.__resizeListeners__.length) {
                F.removeEventListener("scroll", N, !0), F.__resizeTriggers__.__animationListener__ && (F.__resizeTriggers__.removeEventListener(E, F.__resizeTriggers__.__animationListener__), F.__resizeTriggers__.__animationListener__ = null);
                try {
                    F.__resizeTriggers__ = !F.removeChild(F.__resizeTriggers__)
                } catch {
                }
            }
        }
    }
}

class AutoSizer extends React.Component {
    constructor(...R) {
        super(...R), this.state = {
            height: this.props.defaultHeight || 0,
            scaledHeight: this.props.defaultHeight || 0,
            scaledWidth: this.props.defaultWidth || 0,
            width: this.props.defaultWidth || 0
        }, this._autoSizer = null, this._detectElementResize = null, this._parentNode = null, this._resizeObserver = null, this._timeoutId = null, this._onResize = () => {
            this._timeoutId = null;
            const {disableHeight: y, disableWidth: E, onResize: C} = this.props;
            if (this._parentNode) {
                const x = window.getComputedStyle(this._parentNode) || {}, B = parseFloat(x.paddingLeft || "0"),
                    N = parseFloat(x.paddingRight || "0"), L = parseFloat(x.paddingTop || "0"),
                    O = parseFloat(x.paddingBottom || "0"), D = this._parentNode.getBoundingClientRect(),
                    z = D.height - L - O, F = D.width - B - N, _e = this._parentNode.offsetHeight - L - O,
                    Y = this._parentNode.offsetWidth - B - N;
                (!y && (this.state.height !== _e || this.state.scaledHeight !== z) || !E && (this.state.width !== Y || this.state.scaledWidth !== F)) && (this.setState({
                    height: _e,
                    width: Y,
                    scaledHeight: z,
                    scaledWidth: F
                }), typeof C == "function" && C({height: _e, scaledHeight: z, scaledWidth: F, width: Y}))
            }
        }, this._setRef = y => {
            this._autoSizer = y
        }
    }

    componentDidMount() {
        const {nonce: R} = this.props, y = this._autoSizer ? this._autoSizer.parentNode : null;
        if (y != null && y.ownerDocument && y.ownerDocument.defaultView && y instanceof y.ownerDocument.defaultView.HTMLElement) {
            this._parentNode = y;
            const E = y.ownerDocument.defaultView.ResizeObserver;
            E != null ? (this._resizeObserver = new E(() => {
                this._timeoutId = setTimeout(this._onResize, 0)
            }), this._resizeObserver.observe(y)) : (this._detectElementResize = createDetectElementResize(R), this._detectElementResize.addResizeListener(y, this._onResize)), this._onResize()
        }
    }

    componentWillUnmount() {
        this._parentNode && (this._detectElementResize && this._detectElementResize.removeResizeListener(this._parentNode, this._onResize), this._timeoutId !== null && clearTimeout(this._timeoutId), this._resizeObserver && this._resizeObserver.disconnect())
    }

    render() {
        const {
                children: R,
                defaultHeight: y,
                defaultWidth: E,
                disableHeight: C = !1,
                disableWidth: x = !1,
                doNotBailOutOnEmptyChildren: B = !1,
                nonce: N,
                onResize: L,
                style: O = {},
                tagName: D = "div",
                ...z
            } = this.props, {height: F, scaledHeight: _e, scaledWidth: Y, width: H} = this.state,
            me = {overflow: "visible"}, ce = {};
        let ie = !1;
        return C || (F === 0 && (ie = !0), me.height = 0, ce.height = F, ce.scaledHeight = _e), x || (H === 0 && (ie = !0), me.width = 0, ce.width = H, ce.scaledWidth = Y), B && (ie = !1), React.createElement(D, {
            ref: this._setRef,
            style: {...me, ...O}, ...z
        }, !ie && R(ce))
    }
}

const ScrollViewWithBounce = React.forwardRef((r, R) => {
    var He;
    let {children: y, direction: E = "horizontal", onInit: C} = r;
    const [x, B] = React.useState(!1), [N, L] = React.useState(!1), O = React.useRef(null), [D, z] = React.useState(!1),
        F = React.useRef(0);
    React.useImperativeHandle(R, () => ({
        scrollToPreviousCell() {
            Je()
        }, scrollToNextCell() {
            Qe(1)
        }, scrollToIndex(Ge) {
            Ge <= 0 && (Ge = 0), Ze(Ge)
        }, isAtEnd: x, isAtStart: N
    })), React.useEffect(() => {
        if (!O.current) return;
        const Ge = O.current, Le = Ge.scrollLeft === 0, We = Ge.scrollLeft + Ge.clientWidth >= Ge.scrollWidth - 1;
        B(We), L(Le)
    }, [(He = O.current) == null ? void 0 : He.scrollLeft]), React.useEffect(() => {
        const Ge = O.current;
        if (!Ge) return;
        const Le = dt => {
            if (E == "horizontal") {
                const et = Ge.scrollWidth - Ge.clientWidth;
                Ge.scrollLeft <= 0 ? Ge.classList.add("bounce-left") : Ge.classList.remove("bounce-left"), Ge.scrollLeft >= et ? Ge.classList.add("bounce-right") : Ge.classList.remove("bounce-right")
            }
            if (E == "vertical") {
                const et = Ge.scrollHeight - Ge.clientHeight;
                Ge.scrollTop <= 0 ? Ge.classList.add("bounce-top") : Ge.classList.remove("bounce-top"), Ge.scrollTop >= et ? Ge.classList.add("bounce-bottom") : Ge.classList.remove("bounce-bottom")
            }
        }, We = () => {
            Ge.classList.remove("bounce-left", "bounce-right", "bounce-top", "bounce-bottom")
        };
        return Ge.addEventListener("scroll", Le), Ge.addEventListener("transitionend", We), () => {
            Ge.removeEventListener("scroll", Le), Ge.removeEventListener("transitionend", We)
        }
    }, [E]);
    const _e = React.useCallback(Ge => {
        const Le = O.current;
        if (Le) {
            const {deltaX: We, dir: dt, velocity: et} = Ge, nt = et * F.current;
            if (dt === "Up" || dt === "Down") {
                if (E == "vertical") {
                    const tt = Le.scrollTop + (dt === "Up" ? nt : -nt);
                    if (isMobile$1) {
                        ke.current && (ke.current.cancel = !0);
                        const lt = {cancel: !1};
                        ke.current = lt, Ve(E, Le, tt, 100, lt);
                        return
                    }
                    Le.scrollTo({top: tt, behavior: "smooth"})
                }
            } else if ((dt === "Left" || dt === "Right") && E == "horizontal") {
                const tt = Le.scrollLeft + (dt === "Left" ? nt : -nt);
                if (isMobile$1) {
                    ke.current && (ke.current.cancel = !0);
                    const lt = {cancel: !1};
                    ke.current = lt, Ve(E, Le, tt, 100, lt);
                    return
                }
                Le.scrollTo({left: tt, behavior: "smooth"})
            }
        }
    }, [E]), Y = React.useCallback(() => {
        z(!1)
    }, []), [H, me] = React.useState(0), ce = React.useContext(ScalableContainerScaleContext), ie = React.useRef([]);
    React.useRef([]);
    const [Be, ve] = React.useState(0);
    React.useEffect(() => {
        ie.current && ie.current.length > 0 && C && C()
    }, [ie.current.length]);
    const Ne = useSwipeable({
            onSwipeStart: Ge => {
                if (O.current) {
                    const {deltaX: Le, absX: We, event: dt, absY: et, dir: nt, velocity: tt} = Ge;
                    dt.preventDefault();
                    const lt = O.current;
                    switch (z(!0), E) {
                        case"vertical":
                            ve(lt.scrollTop);
                            break;
                        case"horizontal":
                            me(lt.scrollLeft);
                            break
                    }
                }
            }, onSwiping: Ge => {
                if (!D && O.current || Fe.current) return;
                const {deltaX: Le, deltaY: We, absX: dt, event: et, absY: nt, dir: tt, velocity: lt} = Ge, Bt = O.current;
                switch (E) {
                    case"vertical":
                        Bt.scrollTop = Be - We;
                        break;
                    case"horizontal":
                        Bt.scrollLeft = H - Le;
                        break
                }
                et.preventDefault()
            }, onTouchEndOrOnMouseUp: Y, onSwiped: _e, onSwipedLeft: Ge => {
                if (E === "vertical") return;
                let {velocity: Le} = Ge;
                Le < .35 ? ze() : setTimeout(() => {
                    ze()
                }, 300 * Le)
            }, onSwipedRight: Ge => {
                if (E === "vertical") return;
                let {velocity: Le} = Ge;
                Le < .35 ? qe() : setTimeout(() => {
                    qe()
                }, 300 * Le)
            }, onSwipedUp: Ge => {
                if (E === "horizontal") return;
                let {velocity: Le} = Ge;
                Le < .35 ? we() : setTimeout(() => {
                    we()
                }, 400 * Le)
            }, onSwipedDown: Ge => {
                if (E === "horizontal") return;
                let {velocity: Le} = Ge;
                Le < .35 ? Me() : setTimeout(() => {
                    Me()
                }, 400 * Le)
            }, preventScrollOnSwipe: !0, trackMouse: !0, delta: 0
        }), we = () => {
            if (!O.current || !ie.current) return;
            ke.current && (ke.current.cancel = !0);
            const Ge = {cancel: !1};
            ke.current = Ge;
            const Le = O.current, We = Le.getBoundingClientRect(), dt = isMobile$1 ? 1 : ce,
                et = ie.current.findIndex(nt => {
                    const tt = nt.getBoundingClientRect(), lt = O.current.getBoundingClientRect();
                    return tt.top >= lt.top
                });
            if (et !== -1) {
                const tt = ie.current[et].getBoundingClientRect();
                Le.scrollTop + tt.top - We.top;
                const Bt = tt.height / dt * et;
                Ve(E, Le, Bt, isMobile$1 ? 100 : 50, Ge)
            }
        }, Me = () => {
            if (!O.current || !ie.current) return;
            ke.current && (ke.current.cancel = !0);
            const Ge = {cancel: !1};
            ke.current = Ge;
            const Le = O.current, We = Le.getBoundingClientRect(), dt = isMobile$1 ? 1 : ce,
                et = ie.current.findIndex(nt => {
                    const tt = nt.getBoundingClientRect(), lt = O.current.getBoundingClientRect();
                    return tt.top >= lt.top
                });
            if (et !== -1) {
                const tt = ie.current[et].getBoundingClientRect();
                Le.scrollTop + tt.top - We.top;
                const Bt = tt.height / dt * (et - 1);
                Ve(E, Le, Bt, isMobile$1 ? 100 : 50, Ge)
            }
        }, ke = React.useRef(null), Fe = React.useRef(!1),
        $e = (Ge, Le, We, dt) => (Ge /= dt / 2, Ge < 1 ? We / 2 * Ge * Ge + Le : (Ge--, -We / 2 * (Ge * (Ge - 2) - 1) + Le)),
        Ve = (Ge, Le, We, dt, et, nt) => {
            const tt = Ge === "horizontal" ? Le.scrollLeft : Le.scrollTop, lt = We - tt, Bt = 20;
            let kt = 0;
            const At = () => {
                if (et.cancel) return;
                kt += Bt;
                const zt = $e(kt, tt, lt, dt);
                Ge === "horizontal" ? Le.scrollLeft = zt : Le.scrollTop = zt, kt < dt ? setTimeout(At, Bt) : nt && nt()
            };
            At()
        }, Je = Ge => {
            if (!O.current || !ie.current) return;
            Fe.current = !0, ke.current;
            const Le = {cancel: !1, scrolling: !0};
            ke.current = Le;
            const We = O.current, dt = We.getBoundingClientRect(), et = isMobile$1 ? 1 : ce, nt = 10,
                tt = ie.current.findIndex(lt => {
                    const Bt = lt.getBoundingClientRect(), kt = O.current.getBoundingClientRect();
                    return Math.abs(Math.ceil(Bt.left) - Math.ceil(kt.left)) < nt
                });
            if (tt !== -1) {
                const Bt = ie.current[tt].getBoundingClientRect();
                We.scrollLeft + Bt.left - dt.left;
                const At = Bt.width / et * (tt - 1 - 0);
                Ve(E, We, At, 200, Le, () => {
                    Fe.current = !1
                })
            }
        }, Qe = Ge => {
            if (!O.current || !ie.current) return;
            Fe.current = !0, ke.current;
            const Le = {cancel: !1, scrolling: !0};
            ke.current = Le;
            const We = O.current;
            We.getBoundingClientRect();
            const dt = isMobile$1 ? 1 : ce, et = 10, nt = ie.current.findIndex(tt => {
                const lt = tt.getBoundingClientRect(), Bt = O.current.getBoundingClientRect();
                return Math.abs(Math.ceil(lt.left) - Math.ceil(Bt.left)) < et
            });
            if (nt !== -1) {
                const lt = ie.current[nt].getBoundingClientRect();
                We.scrollLeft;
                const Bt = lt.width / dt * (nt + (Ge || 0));
                Ve(E, We, Bt, 200, Le, () => {
                    Fe.current = !1
                })
            }
            z(!1)
        }, Ze = Ge => {
            if (!O.current || !ie.current || ie.current.length == 0) return;
            const Le = O.current, We = isMobile$1 ? 1 : ce;
            ke.current;
            const dt = {cancel: !1, scrolling: !0};
            if (ke.current = dt, E == "vertical") {
                const tt = ie.current[Ge].getBoundingClientRect().height / We * Ge;
                Le.scrollTop = tt, Fe.current = !1
            } else {
                const tt = ie.current[Ge].getBoundingClientRect().width / We * Ge;
                Le.scrollLeft = tt, Fe.current = !1
            }
        }, qe = () => {
            if (!O.current || !ie.current) return;
            ke.current && (ke.current.cancel = !0);
            const Ge = {cancel: !1};
            ke.current = Ge;
            const Le = O.current, We = Le.getBoundingClientRect(), dt = isMobile$1 ? 1 : ce,
                et = ie.current.findIndex(nt => {
                    const tt = nt.getBoundingClientRect(), lt = O.current.getBoundingClientRect();
                    return tt.left > lt.left
                });
            if (et !== -1) {
                const tt = ie.current[et].getBoundingClientRect();
                Le.scrollLeft + tt.left - We.left;
                const Bt = tt.width / dt * (et - 1);
                Le.scrollTo({left: Bt, behavior: "smooth"})
            }
            z(!1)
        }, ze = () => {
            if (!O.current || !ie.current) return;
            ke.current && (ke.current.cancel = !0);
            const Ge = {cancel: !1};
            ke.current = Ge;
            const Le = O.current, We = Le.getBoundingClientRect(), dt = isMobile$1 ? 1 : ce,
                et = ie.current.findIndex(nt => {
                    const tt = nt.getBoundingClientRect(), lt = O.current.getBoundingClientRect();
                    return tt.left > lt.left
                });
            if (et !== -1) {
                const tt = ie.current[et].getBoundingClientRect();
                Le.scrollLeft + tt.left - We.left;
                const Bt = tt.width / dt * et;
                Le.scrollTo({left: Bt, behavior: "smooth"})
            }
            z(!1)
        }, De = React.useRef(null);
    React.useRef(null);
    const Xe = Ge => (Ne.ref(Ge), De.current = Ge, Ne.ref(Ge));
    return jsx("div", {
        id: "scroll-view-with-bounce",
        className: `scroll-view-wrapper ${E}`, ...Ne,
        ref: Xe,
        children: jsx("div", {
            className: `scroll-view ${E}`,
            ref: O,
            children: jsx(AutoSizer, {
                className: `chips-${E}`,
                style: {width: "100%", height: "100%"},
                children: ({
                               height: Ge,
                               width: Le
                           }) => (F.current = E == "vertical" ? Ge * 1.5 : Le, jsx(Fragment, {children: y(D, ie)}))
            })
        })
    })
}), useCurrentGameTableGameType = () => {
    const r = React.useContext(GameTableContext);
    if (!r) return {};
    const R = r.gameTableInfo.tableInfo.gameType, y = r.gameTableInfo.altGameType;
    return {
        isDraggableVideoGames: React.useMemo(() => {
            if (!isMobile$1) return !1;
            switch (R) {
                case GameType.Baccarat:
                case GameType.See:
                case GameType.VIP:
                case GameType.InsuredBaccarat:
                case GameType.Quick:
                    return !1;
                case GameType.Roulette:
                case GameType.Sicbo:
                case GameType.FPC:
                    return !0;
                default:
                    switch (y) {
                        case AltGameType.HiLo:
                        case AltGameType.SicTan:
                            return !0;
                        default:
                            return !1
                    }
            }
        }, [R, y])
    }
};

function useAnimationClass(r, R) {
    const [y, E] = React.useState(R ? [R] : []), C = React.useCallback(B => {
        E(N => [...N, B.className])
    }, []), x = React.useCallback((B, N = !1) => {
        E(L => {
            const O = L.filter(D => D !== B.className);
            return B.cleanupClass && O.push(B.cleanupClass), O
        }), B.cleanupClass && setTimeout(() => {
            E(L => L.filter(O => O !== B.cleanupClass))
        }, 0)
    }, []);
    return React.useEffect(() => {
        const B = Array.isArray(r) ? r : [r], N = [];
        return B.forEach((L, O) => {
            const D = setTimeout(() => C(L), L.delay || 0), z = setTimeout(() => {
                x(L)
            }, (L.delay || 0) + L.duration);
            N.push(D, z)
        }), () => {
            N.forEach(clearTimeout)
        }
    }, [r, C, x]), y.join(" ")
}

const GameTablePayoutContext = React.createContext([]),
    GameTableBetStateContext = React.createContext(BET_STATE.NO_BET),
    GameTableBetAmountContext = React.createContext({}), GameTablePendingBetAmountContext = React.createContext({}),
    GameTableBetContext = React.createContext(() => {
    }), useBetTypeMap = (r, R) => React.useMemo(() => {
        let y = r;
        switch (R && (y = R), y) {
            case GameType.Baccarat:
            case GameType.See:
            case GameType.VIP:
            case GameType.Quick:
                return BACCARAT_BET_TYPE_MAP;
            case GameType.InsuredBaccarat:
                return INSURANCE_BACCARAT_BET_TYPE_MAP;
            case GameType.DT:
                return DRAGON_TIGER_BET_TYPE_MAP;
            case GameType.Win3Card:
                return WIN3CARDS_BET_TYPE_MAP;
            case AltGameType.ThreePictures:
                return THREE_PICTURES_BET_TYPE_MAP;
            case AltGameType.TeenPatti:
            case GameType.TeenPatti:
                return TEEN_PATTI_BET_TYPE_MAP;
            case GameType.BullBull:
                return BULL_BULL_BET_TYPE_MAP;
            case GameType.AndarBahar:
                return ANDAR_BAHAR_BET_TYPE_MAP;
            case GameType.Roulette:
                return ROULETTE_BET_TYPE_MAP;
            case GameType.UTH:
                return UTH_BET_TYPE_MAP;
            case GameType.Pokdeng:
                return POKDENG_BET_TYPE_MAP;
            case AltGameType.TwoSidesPokdeng:
                return TWO_SIDES_POKDENG_BET_TYPE_MAP;
            case GameType.Sicbo:
                return SICBO_BET_TYPE_MAP;
            case AltGameType.HiLo:
                return HI_LO_BET_TYPE_MAP;
            case AltGameType.SicTan:
                return SICTAN_BET_TYPE_MAP;
            case GameType.CasinoWar:
                return CASINO_WAR_BET_TYPE_MAP;
            case GameType.Blackjack:
                return BLACKJACK_BET_TYPE_MAP;
            case GameType.FPC:
                return FPC_BET_TYPE_MAP;
            case GameType.XocDia:
                return XOC_DIA_BET_TYPE_MAP;
            default:
                return []
        }
    }, [r, R]);

function usePayoutUpdateChipEffect(r, R, y, E, C) {
    const x = useWhiteLabelChips();
    React.useEffect(() => {
        let B = [];
        for (let N = 0; N < Object.keys(r).length; N++) {
            const L = [N];
            let O = y.filter(F => L.includes(F.betTypeNumber)), D;
            O.length > 0 ? (D = O.reduce((F, _e) => F + _e.betAmount + _e.payoutAmount, 0) / 100, D <= 0 && (D = Math.abs(O.reduce((F, _e) => F + _e.payoutAmount, 0) / 100))) : D = L.reduce((F, _e) => F + r[_e] + R[_e], 0);
            let z = x.findLastIndex(F => F.amount <= D);
            if (z === -1 && (z = 0), D > 1 && (D = Math.trunc(D)), D >= 1e4) {
                const F = x[z].amount;
                D > F ? D = Helper.formatAbbrMoney(F) + "+" : D = Helper.formatAbbrMoney(D)
            }
            B[N] = {color: x[z].color, amount: D}
        }
        C(B)
    }, [r, R, y])
}

const useBetAmountUpdateChipEffect = (r, R, y, E) => {
        React.useEffect(() => {
            let C = [];
            for (let x = 0; x < Object.keys(r).length; x++) {
                let B = Chips.findLastIndex(L => L.amount <= r[x] + R[x]);
                B === -1 && (B = 0);
                let N = r[x] + R[x];
                if (N > 1 && (N = Math.trunc(N)), N >= 1e4) {
                    const L = Chips[B].amount;
                    N > L ? N = Helper.formatAbbrMoney(L) + "+" : N = Helper.formatAbbrMoney(N)
                }
                C[x] = {color: Chips[B].color, amount: N}
            }
            E(C)
        }, [r, R])
    }, useBetChip = (r, R, y, E, C) => React.useCallback(x => {
        let B = "", N = ["bet_chip"], L = 0;
        if (r.length > 0) {
            let O = r.find(D => D.betTypeNumber === x);
            return O && (L = O.payoutAmount / 100, B = `${L > 0 ? "+" : ""}${Helper.formatMoney(L)}`, L > 0 ? N.push("win") : L < 0 ? N.push("lose") : N.push("tie")), r.find(D => D.betTypeNumber === x) && jsxs("div", {
                className: N.join(" "),
                children: [E[x], jsx("div", {className: "bet_area_amount", children: B})]
            }, x)
        } else return B = `${R[x]}`, y[x] > 0 && (B += `+${y[x]}`, N.push("pending")), (R[x] > 0 || y[x] > 0) && jsxs("div", {
            className: N.join(" "),
            children: [E[x], jsx("div", {className: "bet_area_amount", children: B})]
        }, x)
    }, [r, R, y, E]), useCumulativeBetChip = (r, R, y, E, C) => React.useCallback((x, B, N) => {
        let L = Object.keys(y).reduce((Y, H) => (Y[H] = y[H] + E[H], Y), {});
        if (x.some(Y => L[Y] === 0) && x.some(Y => !R.find(H => H.betTypeNumber === Y))) return;
        let O = x.slice();
        N && (N.every(Y => L[Y] !== 0) || N.every(Y => R.find(H => H.betType === Y))) && (O = O.filter(Y => !N.includes(Y)));
        let D = "", z = ["bet_chip"];
        const F = O.reduce((Y, H) => Y + y[H], 0);
        if (R.length > 0) {
            let Y = R.filter(H => O.includes(r.indexOf(H.betType)));
            if (Y.length > 0) {
                const me = Y.reduce((ce, ie) => ce + ie.betAmount + ie.payoutAmount, 0) - Y.reduce((ce, ie) => ce + ie.betAmount, 0);
                D = `${me > 0 ? "+" : ""}${Helper.formatMoney(me / 100)}`, me > 0 ? z.push("win") : me < 0 ? z.push("lose") : z.push("tie")
            }
        } else D = `${F}`;
        const _e = O.reduce((Y, H) => Y + E[H], 0);
        return _e > 0 && (D += `+${_e}`, z.push("pending")), (F > 0 || _e > 0 || R.filter(Y => O.includes(Y.betTypeNumber)).length > 0) && jsxs("div", {
            className: z.join(" "),
            children: [C[B], jsx("div", {className: "bet_area_amount", children: D})]
        })
    }, [R, y, E, C]), useBet = (r, R, y, E) => React.useCallback((C, x) => {
        R === BET_STATE.NO_BET && !x || E(C.map(B => y[B]), x)
    }, [R, E]), useSplashScreenControl = (r, R) => {
        let {getStreamSnapShot: y} = useGameHttpService();
        const {setCurrentPage: E} = React.useContext(GameSessionContext), {
            loadingDone: C,
            isLoading: x,
            setLoading: B
        } = React.useContext(SplashScreenContext);
        let [N, L] = React.useState(), [O, D] = React.useState(!1);
        const z = 100;
        let F = React.useMemo(() => async () => {
            let _e = await y(r);
            return _e || "none"
        }, [r]);
        return React.useEffect(() => {
            E(GAME_SESSION_ACTIONS_TYPE.ON_GAME_TABLE), (async () => {
                let Y = await F();
                Y == "none" ? D(!0) : L(Y)
            })()
        }, [r]), React.useEffect(() => {
            O && setTimeout(() => {
                Global.inGameSnapShot = "", C(), setTimeout(() => {
                    B(!1)
                }, PROGRESS_LERPPING_DURATION + z)
            }, 300)
        }, [O]), React.useEffect(() => {
            N && setTimeout(() => {
                Global.inGameSnapShot = N.src, C(), setTimeout(() => {
                    B(!1)
                }, PROGRESS_LERPPING_DURATION + z)
            }, 300)
        }, [N]), {isLoading: x}
    }, GameTableVideoContext = React.createContext({}),
    useGameTableVideoContext = () => React.useContext(GameTableVideoContext),
    GameTableVideoProvider = ({children: r}) => jsx(GameTableVideoContext.Provider, {
        value: {...useGameTableVideo()},
        children: r
    }), useGameTableVideo = () => {
        const {getTableVideoUrl: r, videoUrls: R, gameTableInfo: y} = React.useContext(GameTableContext);
        let [E, C] = React.useState(0), [x, B] = React.useState(1);
        const [N, L] = React.useState("");
        let O = React.useMemo(() => r(x), [x, E]);
        React.useEffect(() => {
            C(F => F += 1)
        }, [y.tableInfo.tableId]), React.useEffect(() => {
            E > 1 && D(!0)
        }, [E]);
        const D = React.useCallback(F => {
            let _e = R.current.length;
            B(Y => {
                let H = Y;
                return H += 1, F && (H = 1), H > _e ? (Logger$1.warn("No more line can be selected"), 1) : (Logger$1.warn("Auto change to a new line:", H), H)
            })
        }, [R.current]), z = React.useCallback(() => {
            B(F => {
                let _e = R.current.length, Y = F;
                return Y += 1, Y > _e ? (Logger$1.warn("No more line can be selected"), 1) : (Logger$1.warn("Auto change to a new line:", Y), Y)
            })
        }, [R.current]);
        return {url: O, changeLine: D, line: x, playerPlayingId: N, sePlayerPlayingId: L, nextLine: z}
    }, useBasicGameTableEffects = r => {
        let {emptyBetAmounts: R, gameTablePayout: y, setBetAmounts: E, setPendingBetAmounts: C, setBetHistory: x} = {...r};
        const B = React.useContext(SetFixSizeContext), N = useNavigate();
        React.useTransition(), React.useContext(SFSCoreContext), React.useContext(UserInfoContext);
        const {gameTableInfo: L} = React.useContext(GameTableContext), {gameStatus: O} = React.useContext(GameTableStatusContext), {clearMessages: D} = React.useContext(ToastContext);
        React.useContext(PayoutContext);
        const {play: z, stopSound: F} = React.useContext(SoundContext),
            _e = useDisplayCurrency(), [Y, H] = React.useState(TableStatus.Init), [me, ce] = React.useState(!1), [ie, Be] = React.useState(O.tableStatus === TableStatus.CanBet ? BET_STATE.BETTING : BET_STATE.NO_BET), {t: ve} = useTranslation();
        React.useEffect(() => B(!0), []), React.useEffect(() => {
            switch (ie) {
                case BET_STATE.BETTING:
                    break;
                case BET_STATE.NO_BET:
                    C({...R}), x && x([]);
                    break
            }
        }, [ie]), React.useEffect(() => {
            L.tableInfo.betAmountLists || E({...R})
        }, [L.tableInfo.betAmountLists]), React.useEffect(() => {
            O.tableStatus === TableStatus.BetOver && (C({...R}), x && x([]))
        }, [O.tableStatus]), React.useEffect(() => {
            switch (Y) {
                case TableStatus.CanBet:
                    F(), z({id: "place_bet"});
                    break;
                case TableStatus.BetOver:
                    F(), z({id: "stop_bet"});
                    break
            }
        }, [Y]), React.useEffect(() => {
            L.tableInfo.tableId === -1 && N("/gameHall", {replace: !0})
        }, [L.tableInfo.tableId]), React.useEffect(() => {
            O.tableId !== -1 && (ce(O.tableStatus === TableStatus.CanBet), [GameType.InsuredBaccarat, GameType.UTH, GameType.CasinoWar, GameType.Blackjack].includes(L.tableInfo.gameType) && O.tableStatus === TableStatus.AdditionBet && ce(!0), Be(O.tableStatus === TableStatus.CanBet ? BET_STATE.BETTING : BET_STATE.NO_BET), H(O.tableStatus || TableStatus.Init), O.tableStatus !== TableStatus.CanBet && x && x([]), O.tableStatus === TableStatus.BetOver && D())
        }, [O]);
        const Re = React.useMemo(() => {
            const Ce = y.reduce((Ne, we) => Ne + we.payoutAmount, 0);
            return Ce !== 0 && jsxs("div", {
                id: "payout_toast",
                children: [`${ve(`messages.${Ce > 0 ? "won" : "lost"}`)} `, jsx("span", {children: Helper.formatCurrency(_e, Helper.formatMoney(Math.abs(Ce) / 100))})]
            })
        }, [y]);
        return {toggleTimer: me, betState: ie, payoutToast: Re}
    }, useGameTableAmounts = (r, R) => {
        const [y, E] = React.useContext(UserInfoContext), {gameStatus: C} = React.useContext(GameTableStatusContext), {
            payout: x,
            payouts: B,
            setMultiTablePayouts: N
        } = React.useContext(PayoutContext), {
            gameTableInfo: L,
            betTypeMap: O
        } = useGameTableContext(R), {play: D} = React.useContext(SoundContext), [z, F] = React.useState({...r}), [_e, Y] = React.useState({...r}), [H, me] = React.useState([]), [ce, ie] = React.useState({...r}), [Be, ve] = React.useState(y.amount ? Object.values(z).reduce((Ne, we) => Ne + we, 0) : 1e3), [Re, Ce] = React.useState([]);
        return React.useEffect(() => {
            ve(Object.values(z).reduce((Ne, we) => Ne + we, 0))
        }, [z]), React.useEffect(() => {
            E(Ne => {
                if (L) {
                    const we = L.tableInfo.tableId;
                    if (we >= 0) {
                        let Me = {...Ne.totalBetInfos, [we]: Be};
                        Ne.totalBetInfos = {...Me}
                    }
                    return Ne
                }
                return Ne
            })
        }, [L, Be, z]), React.useEffect(() => {
            F({...r}), Y({...r}), ie({...r})
        }, [L.tableInfo.tableId]), React.useEffect(() => {
            R || C.tableStatus === TableStatus.CanBet && F({...r})
        }, [C.tableStatus]), React.useEffect(() => {
            if (L.tableInfo.tableId !== -1 && L.tableInfo.playIds) {
                let Ne = L.tableInfo.playIds.findIndex(we => we === y.player.userId);
                if (Ne !== -1 && L.tableInfo.betTypeLists && L.tableInfo.betAmountLists) {
                    let we = {...r}, Me = Object.entries(O);
                    L.tableInfo.betTypeLists[Ne].forEach((ke, Fe) => {
                        let $e = Me.find(Ve => Ve[1] === ke);
                        $e && (we[parseInt($e[0])] = L.tableInfo.betAmountLists[Ne][Fe] / 100)
                    }), JSON.stringify(we) !== JSON.stringify(z) && (D({id: "bet_chips"}), F(we), ie(we), Y({...r}), Ce([]))
                }
            }
        }, [L]), React.useEffect(() => {
            if (R) {
                const Ne = R.tableInfo.tableId;
                if (Ne && Object.prototype.hasOwnProperty.call(B, Ne)) {
                    const we = B[Ne].payout;
                    let Me = [];
                    for (let ke = 0; ke < we.betTypeLists.length; ke++) Me.push({
                        betType: we.betTypeLists[ke],
                        betTypeNumber: O.findIndex(Fe => Fe === we.betTypeLists[ke]),
                        payoutAmount: we.payoutAmountLists[ke],
                        betAmount: we.betAmountLists[ke]
                    });
                    me(Me), Me.length > 0 && F({...r}), N(ke => {
                        const Fe = {...ke};
                        return delete Fe[Ne], Fe
                    })
                }
            } else {
                let Ne = [];
                for (let we = 0; we < x.betTypeLists.length; we++) Ne.push({
                    betType: x.betTypeLists[we],
                    betTypeNumber: O.findIndex(Me => Me === x.betTypeLists[we]),
                    payoutAmount: x.payoutAmountLists[we],
                    betAmount: x.betAmountLists[we]
                });
                if (me(Ne), Ne.length > 0) {
                    const we = {...r};
                    Ne.forEach((Me, ke) => {
                        we[Me.betTypeNumber] = Me.betAmount / 100
                    }), F(we)
                }
            }
        }, [x, B]), {
            betAmounts: z,
            setBetAmounts: F,
            pendingBetAmounts: _e,
            setGameTablePayout: me,
            setPendingBetAmounts: Y,
            betHistory: Re,
            setBetHistory: Ce,
            lastBetAmounts: ce,
            gameTablePayout: H,
            totalBet: Be
        }
    }, useAvailableChips = () => {
        const {preloadConfig: r} = React.useContext(ServerConfigContext), {customChipsSetting: R} = React.useContext(GameSessionContext), [y] = React.useContext(UserInfoContext),
            E = R.find(O => O.handicap.handicapId === y.handicapId),
            C = y.vipHandicapInfo ? y.vipHandicapInfo[0].vipHandicapId : -999,
            x = R.find(O => O.handicap.vipHandicapId === C), {isOwner: B, isReserved: N} = useVipOwner(),
            L = useIgnoreVIP();
        return React.useMemo(() => {
            let O = Chips.filter(D => r != null && r.whiteLabel.minChipValue ? D.amount >= (r == null ? void 0 : r.whiteLabel.minChipValue) : D);
            return B && x && !L ? [...Helper.deepCopy(x.chipsInfo).filter(D => D.isCheck), ...Helper.deepCopy(x.customizeChipsInfo).filter(D => D.isCheck)].sort((D, z) => D.amount - z.amount) : E ? [...Helper.deepCopy(E.chipsInfo).filter(D => D.isCheck), ...Helper.deepCopy(E.customizeChipsInfo).filter(D => D.isCheck)].sort((D, z) => D.amount - z.amount) : O
        }, [E, x, B, L])
    }, useWhiteLabelChips = () => {
        const {preloadConfig: r} = React.useContext(ServerConfigContext);
        return React.useMemo(() => Chips.filter(R => r != null && r.whiteLabel.minChipValue ? R.amount >= (r == null ? void 0 : r.whiteLabel.minChipValue) : R), [])
    }, ChipsChoices = ({
                           jumpTo: r,
                           chips: R,
                           storage: y,
                           shownChips: E,
                           mobileType: C,
                           chipDisplayAttrs: x,
                           setSelectedChip: B,
                           selectedChip: N
                       }) => {
        var H, me;
        const L = React.useRef(null), O = -1;
        React.useEffect(() => {
            if (r == O && N > 0) {
                F(N);
                return
            }
            F(r)
        }, [r]);
        const D = React.useCallback(() => {
            L.current && L.current.scrollToNextCell()
        }, [L]), z = React.useCallback(() => {
            L.current && L.current.scrollToPreviousCell()
        }, [L]), F = React.useCallback(ce => {
            L.current && L.current.scrollToIndex(ce != null ? ce - Math.floor(E / 2) : N - Math.floor(E / 2))
        }, [N, L, R]), _e = React.useCallback((ce, ie, Be) => {
            ie || (sessionStorage.setItem(y, x[Be].amount.toString()), B(Be))
        }, [y, B, x]), Y = useAnimationClass(React.useMemo(() => [{
            className: "fade_in",
            duration: 2e3,
            delay: 0,
            cleanupClass: "hidden"
        }], [E]), "hidden");
        return jsxs("div", {
            id: "chips_choices",
            className: `${Y}`,
            children: [jsx("button", {
                className: "svg_arrow_left",
                onClick: () => z(),
                "aria-hidden": isMobile$1 ? !0 : (H = L.current) == null ? void 0 : H.isAtStart
            }), jsx(ScrollViewWithBounce, {
                onInit: () => {
                    F()
                },
                ref: L,
                direction: isMobile$1 ? C : "horizontal",
                children: (ce, ie, Be, ve) => jsx(Fragment, {
                    children: R.map((Re, Ce) => jsxs("button", {
                        className: N === Ce ? "selected" : "",
                        style: {},
                        ref: Ne => {
                            ie.current[Ce] = Ne
                        },
                        onClick: Ne => {
                            _e(Ne, ce, Ce)
                        },
                        children: [N === Ce && jsx("div", {id: "chip_selected"}), Re]
                    }, Ce))
                })
            }), jsx("button", {
                className: "svg_arrow_right",
                onClick: () => D(),
                "aria-hidden": isMobile$1 ? !0 : (me = L.current) == null ? void 0 : me.isAtEnd
            })]
        })
    }, useGameTableChips = (r = 5, R = !1, y = IN_GAME_SESSION_STORAGE_KEYS.IN_GAME_SELECTED_CHIP) => {
        useDeviceOrientation();
        const [E] = React.useContext(UserInfoContext), {gameTableInfo: C} = React.useContext(GameTableContext), {preloadConfig: x} = React.useContext(ServerConfigContext), {customChipsSetting: B} = React.useContext(GameSessionContext), [N, L] = React.useState(0), [O, D] = React.useState(isMobile$1 ? 5 : r),
            z = 30, [F, _e] = React.useState(2),
            Y = useAvailableChips(), [H, me] = React.useState(Y.filter(qe => x != null && x.whiteLabel.minChipValue ? qe.amount >= (x == null ? void 0 : x.whiteLabel.minChipValue) : qe).slice(N, N + z).map(qe => ({
                color: qe.color,
                display: Helper.formatAbbrMoney(qe.amount),
                amount: qe.amount
            }))), ce = useChips({chipAttrs: H}), {isOwner: ie} = useVipOwner(), [Be, ve] = React.useState(),
            Re = React.useRef(), [Ce, Ne] = React.useState(y), [we, Me] = React.useState(!1), [ke, Fe] = React.useState(!0);
        let {togglePopup: $e} = useGameTablePopups("");
        const {isDraggableVideoGames: Ve} = useCurrentGameTableGameType();
        React.useEffect(() => {
            if (B.length > 0) {
                if (R || !ie && E.handicapId) {
                    const qe = B.find(ze => ze.handicap.handicapId === E.handicapId);
                    if (qe) {
                        we && (sessionStorage.removeItem(IN_GAME_SESSION_STORAGE_KEYS.FAST_BET_SELECTED_CHIP), sessionStorage.removeItem(IN_GAME_SESSION_STORAGE_KEYS.IN_GAME_SELECTED_CHIP)), ve(-1);
                        const ze = [...qe.chipsInfo, ...qe.customizeChipsInfo],
                            De = ze.filter(He => He.isCheck).sort((He, Ge) => He.amount - Ge.amount),
                            Xe = !ze.some(He => He.amount > 0 && !He.isCheck);
                        Fe(Xe), me(De)
                    }
                    return
                }
                if (ie && E.vipHandicapInfo) {
                    ve(-1);
                    const qe = E.vipHandicapInfo[0].vipHandicapId, ze = B.find(De => De.handicap.vipHandicapId === qe);
                    if (ze) {
                        we && sessionStorage.removeItem(IN_GAME_SESSION_STORAGE_KEYS.IN_GAME_SELECTED_CHIP_VIP);
                        const De = [...ze.chipsInfo, ...ze.customizeChipsInfo],
                            Xe = De.filter(Ge => Ge.isCheck).sort((Ge, Le) => Ge.amount - Le.amount),
                            He = !De.some(Ge => Ge.amount > 0 && !Ge.isCheck);
                        Fe(He), me(Xe)
                    }
                    return
                }
            }
        }, [B, E.handicapId, E.vipHandicapInfo, ie]), React.useEffect(() => {
            E.betLimitObject.length !== 0 && (E.handicapId && (Re.current = E.handicapId), Je(), Me(!0))
        }, [z, H, C.tableInfo.tableId]), React.useEffect(() => {
            Re.current !== E.handicapId && Ce !== IN_GAME_SESSION_STORAGE_KEYS.IN_GAME_SELECTED_CHIP_VIP && (E.handicapId && (Re.current = E.handicapId), sessionStorage.removeItem(IN_GAME_SESSION_STORAGE_KEYS.FAST_BET_SELECTED_CHIP), sessionStorage.removeItem(IN_GAME_SESSION_STORAGE_KEYS.IN_GAME_SELECTED_CHIP), Je())
        }, [E.handicapId, ke, Ce, H]), React.useEffect(() => {
            R || !ie || (Ce == IN_GAME_SESSION_STORAGE_KEYS.IN_GAME_SELECTED_CHIP && ie && Ne(IN_GAME_SESSION_STORAGE_KEYS.IN_GAME_SELECTED_CHIP_VIP), Je())
        }, [ie, Ce]);
        const Je = React.useCallback(() => {
            const qe = sessionStorage.getItem(Ce);
            if (qe && qe.length > 0 && H.findIndex(ze => ze.amount.toString() == qe) != -1) {
                let ze = H.findIndex(De => De.amount.toString() == qe);
                _e(ze), ve(ze)
            } else {
                if (Ce === IN_GAME_SESSION_STORAGE_KEYS.IN_GAME_SELECTED_CHIP_VIP && E.vipHandicapInfo) {
                    if (ke) {
                        const Xe = E.vipHandicapInfo[0].betLimitLow;
                        let He = Math.max(Y.findIndex(Ge => Ge.amount >= Xe) + 2, 0);
                        _e(He <= Math.floor(O / 2) ? Math.floor(O / 2) : He), ve(He)
                    } else {
                        const Xe = Helper.deepCopy(H);
                        if (F >= Xe.length) {
                            let He = Math.floor(Xe.length / 2);
                            _e(He), ve(He)
                        }
                    }
                    return
                }
                let ze = C.tableInfo.gameType;
                ze === GameType.See && (ze = GameType.Baccarat);
                const De = Helper.deepCopy(H);
                if (ke) {
                    const Xe = E.betLimitObject.find(We => We.gameType.includes(ze)).betLimitLow,
                        He = De.findIndex(We => We.amount >= Xe);
                    let Ge = Math.min(He + 2, Math.max(0, De.length - 1));
                    const Le = Ge <= Math.floor(O / 2) ? Math.floor(O / 2) : Ge;
                    _e(Le), ve(Le)
                } else {
                    const Xe = E.betLimitObject.find(Le => Le.gameType.includes(ze)).betLimitLow,
                        He = De.findIndex(Le => Le.amount >= Xe);
                    Math.min(He + 2, Math.max(0, De.length - 1));
                    let Ge = Math.floor(O / 2);
                    _e(Ge), ve(Ge)
                }
            }
        }, [Ce, ie, H, ke, O, E.betLimitObject, E.vipHandicapInfo, _e, ve]);
        return {
            chips: ce,
            jumpToIndex: Be,
            shownChips: O,
            store: y,
            chipDisplayAttrs: H,
            selectedChip: F,
            setSelectedChip: _e,
            firstChipIndex: N,
            chipDisplayAmount: z,
            chipSelector: qe => jsxs("section", {
                style: {"--shown_chips": O},
                id: "chips_selection",
                "aria-orientation": qe.mobileType,
                children: [jsxs("div", {
                    id: "multi_bets",
                    className: "start",
                    children: [Object.values(qe.betAmounts).some(ze => ze !== 0) || Object.values(qe.pendingBetAmounts).some(ze => ze !== 0) ? jsx("button", {
                        id: "multiplier",
                        "aria-checked": !1,
                        onClick: () => qe.double(qe.allBetAreaLimitMatched),
                        children: "x2"
                    }) : Object.values(qe.lastBetAmounts).some(ze => ze !== 0) ? jsx("button", {
                        id: "multiplier",
                        "aria-checked": !1,
                        onClick: () => qe.repeat(qe.allBetAreaLimitMatched, [GameType.Baccarat, GameType.Quick, GameType.See, GameType.InsuredBaccarat, GameType.VIP].includes(C.tableInfo.gameType) ? C.tableInfo.currentShoeGameResult[0].length >= SIDE_BET_LIMIT_50.rounds ? SIDE_BET_LIMIT_30.betTypes.concat(SIDE_BET_LIMIT_50.betTypes) : C.tableInfo.currentShoeGameResult[0].length >= SIDE_BET_LIMIT_30.rounds ? SIDE_BET_LIMIT_30.betTypes : [] : []),
                        children: jsx("div", {className: "svg_repeat"})
                    }) : void 0, !Ve && jsx("button", {
                        id: "custom_chips", "aria-checked": !1, onClick: () => {
                            $e("custom_chip")
                        }, children: jsx("div", {className: "svg_menu_custom_chips"})
                    }), isMobile$1 && qe.mobileType === "vertical" && qe.betHistory && qe.undo && qe.betHistory.length > 0 && Object.values(qe.pendingBetAmounts).some(ze => ze !== 0) && jsx("button", {
                        className: "undo",
                        onClick: qe.undo,
                        children: jsx("div", {className: "svg_undo"})
                    })]
                }), jsx(ChipsChoices, {
                    shownChips: O,
                    chips: ce,
                    mobileType: qe.mobileType,
                    storage: Ce,
                    chipDisplayAttrs: H,
                    setSelectedChip: _e,
                    selectedChip: F,
                    jumpTo: Be
                }), jsxs("div", {
                    id: "confirm_bets",
                    className: "end",
                    children: [Ve && jsx("button", {
                        id: "custom_chips", "aria-checked": !1, onClick: () => {
                            $e("custom_chip")
                        }, children: jsx("div", {className: "svg_menu_custom_chips"})
                    }), Object.values(qe.pendingBetAmounts).some(ze => ze !== 0) ? jsxs(Fragment, {
                        children: [jsx("button", {
                            className: "confirm",
                            onClick: () => qe.confirm(qe.allBetAreaLimitMatched),
                            children: jsx("div", {className: "svg_confirm"})
                        }), !(isMobile$1 && qe.mobileType === "vertical") && qe.betHistory && qe.undo && qe.betHistory.length > 0 && jsx("button", {
                            className: "undo",
                            onClick: qe.undo,
                            children: jsx("div", {className: "svg_undo"})
                        }), jsx("button", {
                            className: "cancel",
                            onClick: qe.cancel,
                            children: jsx("div", {className: "svg_cancel"})
                        })]
                    }) : jsx(Fragment, {})]
                })]
            }),
            cwChipSelector: qe => jsxs("section", {
                style: {"--shown_chips": O},
                id: "chips_selection",
                "aria-orientation": qe.mobileType,
                "aria-hidden": qe.hidden,
                children: [jsxs("div", {
                    id: "multi_bets",
                    className: "start",
                    children: [qe.betState === BET_STATE.BETTING && Object.values(qe.betAmounts).some(ze => ze !== 0 || Object.values(qe.pendingBetAmounts).some(De => De !== 0)) || qe.betState === BET_STATE.NO_BET && Object.entries(qe.betAmounts).some(ze => [CASINO_WAR_BET_TYPE.PLAYER_1_TIE_2, CASINO_WAR_BET_TYPE.PLAYER_2_TIE_2, CASINO_WAR_BET_TYPE.PLAYER_3_TIE_2].includes(parseInt(ze[0])) && ze[1] !== 0) || Object.entries(qe.pendingBetAmounts).some(ze => [CASINO_WAR_BET_TYPE.PLAYER_1_TIE_2, CASINO_WAR_BET_TYPE.PLAYER_2_TIE_2, CASINO_WAR_BET_TYPE.PLAYER_3_TIE_2].includes(parseInt(ze[0])) && ze[1] !== 0) ? jsx("button", {
                        id: "multiplier",
                        "aria-checked": !1,
                        onClick: () => qe.double(!1, qe.betState === BET_STATE.NO_BET ? [CASINO_WAR_BET_TYPE.PLAYER_1_TIE_2, CASINO_WAR_BET_TYPE.PLAYER_2_TIE_2, CASINO_WAR_BET_TYPE.PLAYER_3_TIE_2] : void 0),
                        children: "x2"
                    }) : qe.betState === BET_STATE.BETTING && Object.values(qe.lastBetAmounts).some(ze => ze !== 0) && jsx("button", {
                        id: "multiplier",
                        "aria-checked": !1,
                        onClick: () => qe.repeat(!1),
                        children: jsx("div", {className: "svg_repeat"})
                    }), jsx("button", {
                        id: "custom_chips", "aria-checked": !1, onClick: () => {
                            $e("custom_chip")
                        }, children: jsx("div", {className: "svg_menu_custom_chips"})
                    })]
                }), jsx(ChipsChoices, {
                    shownChips: O,
                    chips: ce,
                    mobileType: qe.mobileType,
                    storage: y,
                    chipDisplayAttrs: H,
                    setSelectedChip: _e,
                    selectedChip: F,
                    jumpTo: Be
                }), jsxs("div", {
                    id: "confirm_bets",
                    className: "end",
                    children: [Ve && jsx("button", {
                        id: "custom_chips", "aria-checked": !1, onClick: () => {
                            $e("custom_chip")
                        }, children: jsx("div", {className: "svg_menu_custom_chips"})
                    }), Object.values(qe.pendingBetAmounts).some(ze => ze !== 0) ? jsxs(Fragment, {
                        children: [jsx("button", {
                            className: "confirm",
                            onClick: () => qe.confirm(qe.allBetAreaLimitMatched),
                            children: jsx("div", {className: "svg_confirm"})
                        }), qe.betHistory && qe.undo && qe.betHistory.length > 0 && jsx("button", {
                            className: "undo",
                            onClick: qe.undo,
                            children: jsx("div", {className: "svg_undo"})
                        }), jsx("button", {
                            className: "cancel",
                            onClick: qe.cancel,
                            children: jsx("div", {className: "svg_cancel"})
                        })]
                    }) : jsx(Fragment, {})]
                })]
            })
        }
    }, useGameTableBets = r => {
        const {
            bindGameTableInfo: R = void 0,
            betState: y,
            betAmounts: E,
            pendingBetAmounts: C,
            setPendingBetAmounts: x,
            lastBetAmounts: B,
            firstChipIndex: N,
            selectedChip: L
        } = {...r}, O = useAvailableChips(), {
            gameBet: D,
            multiGameBet: z
        } = React.useContext(SFSCoreContext), [F] = React.useContext(UserInfoContext), {
            gameTableInfo: _e,
            betTypeMap: Y
        } = useGameTableContext(R), {
            addMessage: H,
            addTableMessage: me
        } = React.useContext(ToastContext), [ce, ie] = React.useState([]), [Be, ve] = React.useState(BET_METHOD.NORMAL), {t: Re} = useTranslation();
        React.useEffect(() => {
            var Je;
            switch (r.tableType) {
                case TABLE_TYPE.SIDE:
                    ve(BET_METHOD.FAST_BET);
                    break;
                case TABLE_TYPE.MULTI:
                    ve(BET_METHOD.MULTI_PLAY);
                    break;
                default:
                    switch (r.gameType) {
                        case GameType.Baccarat:
                            _e.tableInfo.tableId === -100 && ve(BET_METHOD.MULTI_PLAY);
                            break;
                        case GameType.VIP:
                            ((Je = _e.tableInfo.additionalTableInfo) == null ? void 0 : Je.vipTableOwner) === F.player.userId ? ve(BET_METHOD.VIP_OWNER) : ve(BET_METHOD.VIP_SIDE);
                            break;
                        default:
                            ve(BET_METHOD.NORMAL);
                            break
                    }
                    break
            }
        }, [r.gameType, _e.tableInfo.additionalTableInfo, r.tableType]), React.useEffect(() => {
            var Ze;
            if (F.betLimitObject.length === 0) return;
            let Je = r.gameType;
            Je === GameType.See && (Je = GameType.Baccarat);
            let Qe = F.betLimitObject.find(qe => qe.gameType.includes(Je)).betLimitDetailObject;
            if (_e.tableInfo.gameType === GameType.VIP && ((Ze = _e.tableInfo.additionalTableInfo) == null ? void 0 : Ze.vipTableOwner) === F.player.userId) try {
                let qe = _e.tableInfo.limits;
                Qe = qe.limitTypes.map((ze, De) => ({
                    betType: ze,
                    betLimitHigh: qe.limitHighs[De],
                    betLimitLow: qe.limitLows[De]
                }))
            } catch {
                console.log(_e.tableInfo)
            }
            JSON.stringify(Qe) !== JSON.stringify(ce) && ie(Qe.slice().sort((qe, ze) => qe.betType - ze.betType))
        }, [F.betLimitObject, _e.tableInfo.gameType, _e.tableInfo.additionalTableInfo]);
        const Ce = React.useCallback((Je, Qe = !1) => {
                if (_e.tableInfo.processingGameBet) {
                    r.tableId ? me(r.tableId, {
                        resultCode: 999999,
                        betTypes: []
                    }, Re("error_msg.processing_game_bet"), TOAST_COLOR.BLACK, 1.5) : H(Re("error_msg.processing_game_bet"), TOAST_COLOR.BLACK, 1.5);
                    return
                }
                if (y === BET_STATE.BETTING || Qe) {
                    let Ze = O[N + L].amount, qe = Ze, ze = Object.values(C).reduce((dt, et) => dt + et, 0), De = !1;
                    if (F.amount / 100 < ze + Ze * Je.length && (Je.length > 1 ? qe = F.amount / 100 - (ze + Ze * Je.length) : qe = F.amount / 100 - ze, qe <= 0 && (r.tableId ? me(r.tableId, {betTypes: Je}, Re("messages.insufficient_bet_balance"), TOAST_COLOR.BLACK, 1.5) : H(Re("messages.insufficient_bet_balance"), TOAST_COLOR.BLACK, 1.5), Je.length > 1))) return;
                    let Xe = Object.assign({}, {...C}), He = r.betHistory.slice(), Ge = [], Le = 0;
                    const We = ce.slice().reverse();
                    Je.forEach(dt => {
                        const et = We.find(lt => {
                            switch (dt) {
                                case BetType.B_BankNoComm:
                                    return lt.betType === BetType.B_Banker;
                                case BetType.TPD_Player1:
                                case BetType.TPD_Player2:
                                case BetType.TPD_Player3:
                                case BetType.TPD_Player4:
                                case BetType.TPD_Player5:
                                    return lt.betType === dt - 100;
                                case BetType.S_Pair2:
                                case BetType.S_Pair3:
                                case BetType.S_Pair4:
                                case BetType.S_Pair5:
                                case BetType.S_Pair6:
                                    return lt.betType === BetType.S_Pair1;
                                case BetType.S_Triple2:
                                case BetType.S_Triple3:
                                case BetType.S_Triple4:
                                case BetType.S_Triple5:
                                case BetType.S_Triple6:
                                    return lt.betType === BetType.S_Triple1;
                                case BetType.S_Sum10:
                                case BetType.S_Sum11:
                                case BetType.S_Sum12:
                                    return lt.betType === BetType.S_Sum9;
                                case BetType.S_Format13:
                                case BetType.S_Format14:
                                case BetType.S_Format15:
                                case BetType.S_Format16:
                                case BetType.S_Format23:
                                case BetType.S_Format24:
                                case BetType.S_Format25:
                                case BetType.S_Format26:
                                case BetType.S_Format34:
                                case BetType.S_Format35:
                                case BetType.S_Format36:
                                case BetType.S_Format45:
                                case BetType.S_Format46:
                                case BetType.S_Format56:
                                    return lt.betType === BetType.S_Format12;
                                case BetType.S_Single2:
                                case BetType.S_Single3:
                                case BetType.S_Single4:
                                case BetType.S_Single5:
                                case BetType.S_Single6:
                                    return lt.betType === BetType.S_Single1;
                                case BetType.HL_Format13:
                                case BetType.HL_Format14:
                                case BetType.HL_Format15:
                                case BetType.HL_Format16:
                                case BetType.HL_Format23:
                                case BetType.HL_Format24:
                                case BetType.HL_Format25:
                                case BetType.HL_Format26:
                                case BetType.HL_Format34:
                                case BetType.HL_Format35:
                                case BetType.HL_Format36:
                                case BetType.HL_Format45:
                                case BetType.HL_Format46:
                                case BetType.HL_Format56:
                                    return lt.betType === BetType.HL_Format12;
                                case BetType.HL_Format234:
                                case BetType.HL_Format345:
                                case BetType.HL_Format456:
                                    return lt.betType === BetType.HL_Format123;
                                case BetType.HL_Single2:
                                case BetType.HL_Single3:
                                case BetType.HL_Single4:
                                case BetType.HL_Single5:
                                case BetType.HL_Single6:
                                    return lt.betType === BetType.HL_Single1;
                                default:
                                    return lt.betType <= dt
                            }
                        }).betLimitHigh;
                        let nt = Y.findIndex(lt => lt === dt), tt = qe;
                        E[nt] + C[nt] + qe > et && (tt = et - E[nt] - C[nt], De = !0), Le += tt, tt > 0 && (Xe[nt] += tt, Ge.push({
                            betAreaIndex: nt,
                            amount: tt
                        }))
                    }), De ? r.tableId ? me(r.tableId, {
                        resultCode: 101,
                        betTypes: Je
                    }, Re("error_code.101"), TOAST_COLOR.BLACK, 1.5) : H(Re("error_code.101"), TOAST_COLOR.BLACK, 1.5) : (ze + Le) * 100 === F.amount && Le > 0 && (r.tableId ? me(r.tableId, {betTypes: Je}, Re("messages.all_in"), TOAST_COLOR.BLACK, 1.5) : H(Re("messages.all_in"), TOAST_COLOR.BLACK, 1.5)), x(Xe), Ge.length > 0 && (He.push(Ge), r.setBetHistory(He))
                }
            }, [N, L, E, Y, C, r.betHistory, F, y, ce, _e.tableInfo.processingGameBet, O]),
            Ne = React.useCallback((Je, Qe = !1, Ze) => {
                if (_e.tableInfo.processingGameBet) {
                    r.tableId ? me(r.tableId, {
                        resultCode: 999999,
                        betTypes: []
                    }, Re("error_msg.processing_game_bet"), TOAST_COLOR.BLACK, 1.5) : H(Re("error_msg.processing_game_bet"), TOAST_COLOR.BLACK, 1.5);
                    return
                }
                let qe = O[N + L].amount, ze = Ze || qe, De = Object.values(C).reduce((Xe, He) => Xe + He, 0);
                if (!(F.amount / 100 < De + qe && (ze = F.amount / 100 - De, ze <= 0 && (r.tableId ? me(r.tableId, {betTypes: [Je]}, Re("messages.insufficient_bet_balance"), TOAST_COLOR.BLACK, 1.5) : H(Re("messages.insufficient_bet_balance"), TOAST_COLOR.BLACK, 1.5), Qe)))) {
                    if (!Qe) {
                        let Xe = ce.find(Ge => Ge.betType === Je).betLimitHigh, He = Y.findIndex(Ge => Ge === Je);
                        E[He] + qe > Xe && (ze = Xe - E[He], r.tableId ? me(r.tableId, {betTypes: [Je]}, Re("error_code.101"), TOAST_COLOR.BLACK, 1.5) : H(Re("error_code.101"), TOAST_COLOR.BLACK, 1.5))
                    }
                    ze > 0 && D([Je], [ze], Be)
                }
            }, [N, L, E, C, r.betHistory, F, _e.tableInfo.processingGameBet]), we = (Je, Qe, Ze) => {
                if (_e.tableInfo.processingGameBet) {
                    r.tableId ? me(r.tableId, {
                        resultCode: 999999,
                        betTypes: []
                    }, Re("error_msg.processing_game_bet"), TOAST_COLOR.BLACK, 1.5) : H(Re("error_msg.processing_game_bet"), TOAST_COLOR.BLACK, 1.5);
                    return
                }
                let qe = [], ze = [], De = !1;
                for (let Xe = 0; Xe < Object.values(C).length; Xe++) if (C[Xe] !== 0) {
                    let He = C[Xe], Ge = ke(Xe), Le = Y.findIndex(We => We === Y[Xe]);
                    if (E[Le] + He > Ge.betLimitHigh && (He = Ge.betLimitHigh - E[Le], De = !0), E[Le] + He < Ge.betLimitLow) {
                        r.tableId ? me(r.tableId, {betTypes: [Y[Xe]]}, Re("error_code.104"), TOAST_COLOR.BLACK, 1.5) : H(Re("error_code.104"), TOAST_COLOR.BLACK, 1.5);
                        return
                    }
                    He > 0 && (ze.push(He), qe.push(Y[Xe]))
                }
                De && (r.tableId ? me(r.tableId, {
                    resultCode: 101,
                    betTypes: qe
                }, Re("error_code.101"), TOAST_COLOR.BLACK, 1.5) : H(Re("error_code.101"), TOAST_COLOR.BLACK, 1.5)), qe.length > 0 && (Qe && Ze ? z(Qe, Ze, qe, ze, Be) : D(qe, ze, Be))
            }, Me = () => {
                x({...r.emptyBetAmounts}), r.setBetHistory([])
            }, ke = Je => {
                const Qe = Y[Je];
                let Ze = ce.find(De => De.betType === Qe);
                return Ze || ce.slice().reverse().find(De => {
                    switch (Qe) {
                        case BetType.B_BankNoComm:
                            return De.betType === BetType.B_Banker;
                        case BetType.TPD_Player1:
                        case BetType.TPD_Player2:
                        case BetType.TPD_Player3:
                        case BetType.TPD_Player4:
                        case BetType.TPD_Player5:
                            return De.betType === Qe - 100;
                        default:
                            return De.betType <= Qe
                    }
                })
            }, Fe = React.useCallback((Je, Qe) => {
                if (y === BET_STATE.NO_BET && !Qe) return;
                let Ze = [], qe = !1, ze = Object.assign({}, {...C}), De = r.betHistory.slice(), Xe = [], He = !1;
                for (let Ge = 0; Ge < Y.length; Ge++) if (!(Qe && !Qe.includes(Ge)) && (C[Ge] !== 0 || E[Ge] !== 0)) {
                    let Le = C[Ge] || E[Ge], We = ke(Ge).betLimitHigh, dt = Y.findIndex(et => et === Y[Ge]);
                    E[dt] + C[dt] + Le > We && (Le = We - E[dt] - C[dt], qe = !0), Le > 0 && (ze[dt] += Le, Xe.push({
                        betAreaIndex: dt,
                        amount: Le
                    }), He = !0, Ze.push(Y[Ge]))
                }
                if (Object.values(ze).reduce((Ge, Le) => Ge + Le, 0) > F.amount / 100) {
                    r.tableId ? me(r.tableId, {betTypes: Ze}, Re("messages.insufficient_bet_balance"), TOAST_COLOR.BLACK, 1.5) : H(Re("messages.insufficient_bet_balance"), TOAST_COLOR.BLACK, 1.5);
                    return
                }
                qe && (r.tableId ? me(r.tableId, {betTypes: Ze}, Re("error_code.101"), TOAST_COLOR.BLACK, 1.5) : H(Re("error_code.101"), TOAST_COLOR.BLACK, 1.5)), He && (x(ze), Xe.length > 0 && (De.push(Xe), r.setBetHistory(De)))
            }, [F, y, E, C, r.betHistory, ce]), $e = React.useCallback((Je, Qe) => {
                if (y === BET_STATE.NO_BET) return;
                let Ze = [], qe = !1, ze = Object.assign({}, {...C}), De = r.betHistory.slice(), Xe = [], He = !1, Ge = 0;
                for (let Le = 0; Le < Object.values(B).length; Le++) if (B[Le] !== 0) {
                    if (Qe && Qe.includes(Y[Le])) continue;
                    switch (_e.tableInfo.gameType) {
                        case GameType.InsuredBaccarat:
                            if ([BetType.B_BInsurance1, BetType.B_PInsurance1, BetType.B_BInsurance2, BetType.B_PInsurance2].includes(Y[Le])) continue;
                        case GameType.UTH:
                            if ([BetType.UTH_Player1RaiseQuad, BetType.UTH_Player1RaiseTriple, BetType.UTH_Player1RaiseDouble, BetType.UTH_Player1RaiseEven, BetType.UTH_Player2RaiseQuad, BetType.UTH_Player2RaiseTriple, BetType.UTH_Player2RaiseDouble, BetType.UTH_Player2RaiseEven, BetType.UTH_Player3RaiseQuad, BetType.UTH_Player3RaiseTriple, BetType.UTH_Player3RaiseDouble, BetType.UTH_Player3RaiseEven].includes(Y[Le])) continue;
                        case GameType.CasinoWar:
                            if ([BetType.CW_Player1War, BetType.CW_Player1Tie2, BetType.CW_Player2War, BetType.CW_Player2Tie2, BetType.CW_Player3War, BetType.CW_Player3Tie2].includes(Y[Le])) continue;
                        case GameType.Blackjack:
                            if ([BetType.BJ_AnteDouble, BetType.BJ_Split, BetType.BJ_Insurance].includes(Y[Le])) continue
                    }
                    let We = B[Le], dt = ke(Le).betLimitHigh, et = Y.findIndex(nt => nt === Y[Le]);
                    We > dt && (We = dt, qe = !0), We > 0 && (Ge += We, ze[et] += We, Xe.push({
                        betAreaIndex: et,
                        amount: We
                    }), He = !0, Ze.push(Y[Le]))
                }
                if (qe && (r.tableId ? me(r.tableId, {betTypes: Ze}, Re("error_code.101"), TOAST_COLOR.BLACK, 1.5) : H(Re("error_code.101"), TOAST_COLOR.BLACK, 1.5)), Ge > F.amount / 100) {
                    r.tableId ? me(r.tableId, {betTypes: Ze}, Re("messages.insufficient_bet_balance"), TOAST_COLOR.BLACK, 1.5) : H(Re("messages.insufficient_bet_balance"), TOAST_COLOR.BLACK, 1.5);
                    return
                }
                He && (x(ze), Xe.length > 0 && (De.push(Xe), r.setBetHistory(De)))
            }, [y, B, C, ce, r.betHistory]), Ve = React.useCallback(() => {
                if (y === BET_STATE.NO_BET) return;
                let Je = Object.assign({}, {...C}), Qe = r.betHistory.slice();
                Qe.pop().forEach(qe => {
                    Je[qe.betAreaIndex] -= qe.amount
                }), x(Je), r.setBetHistory(Qe)
            }, [C, r.betHistory]);
        return {bets: Ce, directbet: Ne, confirm: we, cancel: Me, double: Fe, repeat: $e, undo: Ve}
    }, useGameRoundStatus = (r, R, y) => {
        const [E, C] = React.useState(y && r ? r[y] : r);
        return React.useEffect(() => {
            r && C(y !== void 0 && r ? r[y] : r)
        }, [r]), React.useEffect(() => {
            [TableStatus.CanBet, TableStatus.PayOut, TableStatus.Maintenance].includes(R) && C(void 0)
        }, [R]), E
    }, GameTableName = r => {
        let {showVidoeReloadBtn: R = !0} = r;
        const {gameTableInfo: y} = React.useContext(GameTableContext);
        let {nextLine: E} = useGameTableVideoContext();
        if (!isMobile$1) return null;
        const C = y.altGameType === AltGameType.None ? y.tableInfo.gameType : y.altGameType,
            x = useGameTableTitle(C, y.tableInfo.tableName, !0);
        return jsx(Fragment, {
            children: jsxs("div", {
                className: "table_name_container",
                children: [jsx("div", {
                    className: "table_name",
                    children: x
                }), R && jsx("button", {
                    className: "refresh_video_button extended-button",
                    "data-btn-selected": !1,
                    onClick: () => {
                        E()
                    },
                    children: jsx("div", {className: "svg_video_refresh"})
                })]
            })
        })
    }, gameTypeLogos = () => {
        const {i18n: r} = useTranslation();
        React.useContext(GameCacheContext), useDeviceOrientation();
        const {gameTableInfo: R} = React.useContext(GameTableContext);
        let {preloadConfig: y} = React.useContext(ServerConfigContext);
        const E = useLocation();
        let {imgPath: C} = useLogoLoader(E.state.gameType);
        return React.useEffect(() => {
            let x;
            switch (R.tableInfo.gameType) {
                case GameType.Baccarat:
                    const B = y == null ? void 0 : y.whiteLabel.sexyGames.includes(R.tableInfo.tableName),
                        N = y == null ? void 0 : y.whiteLabel.classicBaccaratGames.includes(R.tableInfo.tableName);
                    B && (x = SpecialGames.Sexy), N && (x = SpecialGames.ClassicBaccarat);
                    break;
                case GameType.Win3Card:
                case GameType.Sicbo:
                case GameType.Pokdeng:
                    x = E.state.gameType;
                    break
            }
            E.state && Object.prototype.hasOwnProperty.call(E.state, "gameType") && (E.state.gameType = x || R.tableInfo.gameType)
        }, [R.tableInfo.gameType, R.tableInfo.tableName, r.language]), jsx("div", {
            id: "game_logo",
            children: jsx("img", {style: {display: "block", width: "100%"}, src: C})
        })
    }, GameTypeLogo = React.memo(gameTypeLogos), gameTypeTitle = () => {
        const {gameTableInfo: r} = React.useContext(GameTableContext);
        switch (r.tableInfo.gameType) {
            case GameType.Baccarat:
            case GameType.See:
            case GameType.VIP:
            case GameType.InsuredBaccarat:
            case GameType.Quick:
                return GAMES[GameType.Baccarat];
            case void 0:
                return "none";
            default:
                return r.altGameType === AltGameType.None ? GAMES[r.tableInfo.gameType] : GAMES[`${r.altGameType}`]
        }
    }, financialInfos = (r, R) => {
        const {t: y} = useTranslation(), [E] = React.useContext(UserInfoContext);
        let {isTrial: C} = React.useContext(GameSessionContext);
        const x = useDisplayCurrency(), {gameTableInfo: B} = React.useContext(GameTableContext),
            N = React.useRef(null), {setDrawerHidden: L, popup: O, setPopup: D} = useDrawer(N);
        return jsxs("section", {
            id: "financial_infos",
            children: [jsxs("div", {
                children: [jsx("h4", {children: y("game_table.balanace")}), jsx("div", {children: Helper.formatCurrency(x, Helper.formatMoney(E.amount / 100))}), (C == null ? void 0 : C.current) && jsx("div", {
                    className: "trial_label",
                    children: `${y("game_table.trial")}`
                })]
            }), jsxs("div", {
                children: [jsx("h4", {children: y("game_table.total_bet")}), jsxs("div", {
                    children: [Helper.formatCurrency(x, Helper.formatMoney(r + (R || 0))), R !== 0 && R && jsx("div", {
                        className: "deposit",
                        children: `(${y("game_table.deposit")}: ${R})`
                    })]
                })]
            }), isMobile$1 && jsxs(Fragment, {
                children: [jsxs("div", {
                    className: "handicap_payout",
                    children: [jsx(Handicap, {closeOther: () => O === POPUP.PAYOUT && D("")}), jsx(GameTableMenuButton, {
                        onClick: isDesktop$1 ? void 0 : () => D(POPUP.PAYOUT),
                        tooltip: y("menu.payout"),
                        icon: "menu_payout",
                        function: "payout",
                        size: "small",
                        unanchor: !0,
                        children: jsx(PayoutList, {gameType: B.tableInfo.gameType, altGameType: B.altGameType})
                    })]
                }), jsx(Drawer, {
                    ref: N,
                    dragContentToClose: !0,
                    withCloseBtn: O === POPUP.FAST_BET,
                    setDrawerHidden: L,
                    children: O === POPUP.PAYOUT && jsx(PayoutList, {
                        onClose: () => {
                        }, movable: !1, gameType: B.tableInfo.gameType, altGameType: B.altGameType
                    }) || void 0
                })]
            })]
        })
    }, useMultiTableTotalBets = () => {
        let {gameTableInfo: r} = useGameTableContext();
        const [R] = React.useContext(UserInfoContext);
        let [y, E] = React.useState(0);
        return React.useEffect(() => {
            if (r) {
                const C = r.tableInfo.tableId;
                C && E(Helper.sumValuesExcludingKey(R.totalBetInfos, C))
            } else E(Helper.sumValuesExcludingKey(R.totalBetInfos))
        }, [R.totalBetInfos]), y
    }, useDeposit = (r, R) => {
        const [y, E] = React.useState(0);
        return React.useEffect(() => {
            let C = {};
            switch (r) {
                case GameType.BullBull:
                    C = {
                        [BULL_BULL_BET_TYPE.DOUBLE_PLAYER_1]: 4,
                        [BULL_BULL_BET_TYPE.DOUBLE_PLAYER_2]: 4,
                        [BULL_BULL_BET_TYPE.DOUBLE_PLAYER_3]: 4,
                        [BULL_BULL_BET_TYPE.DOUBLE_BANKER_1]: 4,
                        [BULL_BULL_BET_TYPE.DOUBLE_BANKER_2]: 4,
                        [BULL_BULL_BET_TYPE.DOUBLE_BANKER_3]: 4,
                        [BULL_BULL_BET_TYPE.SUPER_PLAYER_1]: 10,
                        [BULL_BULL_BET_TYPE.SUPER_PLAYER_2]: 10,
                        [BULL_BULL_BET_TYPE.SUPER_PLAYER_3]: 10,
                        [BULL_BULL_BET_TYPE.SUPER_BANKER_1]: 10,
                        [BULL_BULL_BET_TYPE.SUPER_BANKER_2]: 10,
                        [BULL_BULL_BET_TYPE.SUPER_BANKER_3]: 10
                    };
                    break;
                case GameType.Pokdeng:
                    C = {
                        [POKDENG_BET_TYPE.PLAYER_1]: 1,
                        [POKDENG_BET_TYPE.PLAYER_2]: 1,
                        [POKDENG_BET_TYPE.PLAYER_3]: 1,
                        [POKDENG_BET_TYPE.PLAYER_4]: 1,
                        [POKDENG_BET_TYPE.PLAYER_5]: 1
                    };
                    break;
                case AltGameType.TwoSidesPokdeng:
                    C = {
                        [TWO_SIDES_POKDENG_BET_TYPE.PLAYER_1]: 1,
                        [TWO_SIDES_POKDENG_BET_TYPE.PLAYER_2]: 1,
                        [TWO_SIDES_POKDENG_BET_TYPE.PLAYER_3]: 1,
                        [TWO_SIDES_POKDENG_BET_TYPE.PLAYER_4]: 1,
                        [TWO_SIDES_POKDENG_BET_TYPE.PLAYER_5]: 1,
                        [TWO_SIDES_POKDENG_BET_TYPE.BANKER_1]: 1,
                        [TWO_SIDES_POKDENG_BET_TYPE.BANKER_2]: 1,
                        [TWO_SIDES_POKDENG_BET_TYPE.BANKER_3]: 1,
                        [TWO_SIDES_POKDENG_BET_TYPE.BANKER_4]: 1,
                        [TWO_SIDES_POKDENG_BET_TYPE.BANKER_5]: 1
                    };
                    break
            }
            if (Object.entries(C).length > 0) {
                const x = Object.entries(R).reduce((B, N) => B + (C[N[0]] || 0) * N[1], 0);
                E(x)
            }
        }, [R]), y
    }, useGameTableEssentials = r => {
        const {gameStatus: R} = React.useContext(GameTableStatusContext), {
            selectedChip: y,
            firstChipIndex: E,
            chipSelector: C,
            cwChipSelector: x
        } = useGameTableChips(), B = Object.fromEntries(r.betTypeMap.map((Je, Qe) => [Qe, 0])), {
            betAmounts: N,
            setBetAmounts: L,
            pendingBetAmounts: O,
            setPendingBetAmounts: D,
            betHistory: z,
            setBetHistory: F,
            lastBetAmounts: _e,
            gameTablePayout: Y,
            totalBet: H
        } = useGameTableAmounts(B), {
            toggleTimer: me,
            betState: ce,
            payoutToast: ie
        } = useBasicGameTableEffects({
            emptyBetAmounts: B,
            gameTablePayout: Y,
            setBetAmounts: L,
            setPendingBetAmounts: D
        }), {
            directbet: Be,
            bets: ve,
            confirm: Re,
            cancel: Ce,
            double: Ne,
            repeat: we,
            undo: Me
        } = useGameTableBets({
            betState: ce,
            emptyBetAmounts: B,
            betAmounts: N,
            pendingBetAmounts: O,
            setPendingBetAmounts: D,
            betHistory: z,
            setBetHistory: F,
            lastBetAmounts: _e,
            firstChipIndex: E,
            selectedChip: y,
            gameType: r.gameType
        }), ke = useDeposit(r.altGameType || r.gameType, N), Fe = financialInfos(H, ke);
        return {
            directbet: Be,
            bets: ve,
            toggleTimer: me,
            betState: ce,
            payoutToast: ie,
            betAmounts: N,
            setPendingBetAmounts: D,
            pendingBetAmounts: O,
            gameTablePayout: Y,
            financialInfos: Fe,
            chipSelector: Je => C({
                mobileType: Je.mobileType,
                betAmounts: N,
                pendingBetAmounts: O,
                lastBetAmounts: _e,
                betHistory: z,
                allBetAreaLimitMatched: Je.allBetAreaLimitMatched,
                double: Ne,
                repeat: we,
                confirm: Re,
                cancel: Ce,
                undo: Je.undo ? Me : void 0
            }),
            cwChipSelector: Je => x({
                mobileType: Je.mobileType,
                hidden: ce === BET_STATE.NO_BET && (R.tableStatus !== TableStatus.AdditionBet || R.tableStatus === TableStatus.AdditionBet && N[CASINO_WAR_BET_TYPE.PLAYER_1_WAR] === 0 && N[CASINO_WAR_BET_TYPE.PLAYER_2_WAR] === 0 && N[CASINO_WAR_BET_TYPE.PLAYER_3_WAR] === 0),
                betState: ce,
                betAmounts: N,
                pendingBetAmounts: O,
                lastBetAmounts: _e,
                betHistory: z,
                allBetAreaLimitMatched: Je.allBetAreaLimitMatched,
                double: Ne,
                repeat: we,
                confirm: Re,
                cancel: Ce
            })
        }
    };

function GameTableEssentailContext(r) {
    return jsx(GameTablePayoutContext.Provider, {
        value: r.gameTablePayout,
        children: jsx(GameTableBetStateContext.Provider, {
            value: r.betState,
            children: jsx(GameTableBetAmountContext.Provider, {
                value: r.betAmounts,
                children: jsx(GameTablePendingBetAmountContext.Provider, {
                    value: r.pendingBetAmounts,
                    children: jsx(GameTableBetContext.Provider, {value: r.bets, children: r.children})
                })
            })
        })
    })
}

const useRoadMap = (r, R, y, E) => {
    const [C, x] = React.useState([]);
    return React.useEffect(() => {
        if (r !== -1 && R) {
            const B = y(R, E);
            JSON.stringify(C) !== JSON.stringify(B) && x(y(R, E))
        }
    }, [r, R]), C
}, useGameTableTitle = (r, R, y) => {
    const {preloadConfig: E} = React.useContext(ServerConfigContext), {t: C, i18n: x} = useTranslation();
    let B = "", N = C(`game_types.${r}`);
    if (E != null && E.whiteLabel.sexyGames.includes(`${R}`) ? B = `${C("game_types.sexy")}` : E != null && E.whiteLabel.classicBaccaratGames.includes(`${R}`) && (B = `${C("game_types.classic")}`), B.length > 0) {
        const L = x.language === "sc" || x.language === "tc" ? "" : " ";
        N = `${B}${L}${N}`
    }
    return y ? `${N} ${R}` : N
};
var SCALE_RATE = (r => (r[r.SAMLL = .96] = "SAMLL", r[r.LARGE = 2] = "LARGE", r[r.NORMAL = 1] = "NORMAL", r))(SCALE_RATE || {});

function useIsTabVisible() {
    const [r, R] = React.useState(!document.hidden), y = React.useCallback(() => {
        R(!document.hidden)
    }, []);
    return React.useEffect(() => (document.addEventListener("visibilitychange", y), () => {
        document.removeEventListener("visibilitychange", y)
    }), [y]), r
}

function useCanvasBottomColor(r) {
    const [R, y] = React.useState([0, 0, 0]), {startTimer: E, stopTimer: C} = useTimerWithToggle(() => {
        if (!r.current) return;
        const N = r.current, L = document.createElement("canvas"), O = L.getContext("2d");
        L.width = r.current.width, L.height = r.current.height, O.drawImage(N, 0, 0);
        const D = O.getImageData(L.width / 2, L.height - 1, 1, 1).data;
        D[0], D[1], D[2]
    }, 200, 50), x = React.useCallback(() => {
        E()
    }, [E]);
    React.useEffect(() => {
        JSON.stringify(R) !== JSON.stringify([0, 0, 0]) && C()
    }, [R, C]), React.useEffect(() => {
        var N;
        ((N = Global.inGameSnapShot) == null ? void 0 : N.length) > 0 && B(Global.inGameSnapShot)
    }, [Global.inGameSnapShot]);

    function B(N) {
        fetch(N).then(L => L.blob()).then(L => {
            const O = URL.createObjectURL(L), D = new Image;
            D.src = URL.createObjectURL(L), D.addEventListener("load", function () {
                const z = document.createElement("canvas"), F = z.getContext("2d");
                z.width = D.width, z.height = D.height, F.drawImage(D, 0, 0);
                const _e = F.getImageData(z.width / 2, z.height - 1, 1, 1).data, Y = _e[0], H = _e[1], me = _e[2];
                y([Y * .75, H * .75, me * .75]), URL.revokeObjectURL(O)
            })
        })
    }

    return {getCanvasBottomColor: x, gradientColor: R}
}

const FlvplayerComponent = React.forwardRef((r, R) => {
    const {videoUrl: y, fallBack: E, videoFactor: C = 1, scaleOffset: x, onPlayerState: B} = r,
        N = useIsTabVisible(), {getAplayer: L, setUpFlv: O} = useFlvPlayer();
    useGameTableVideoContext();
    const {settings: D} = React.useContext(SettingsContext), z = React.useRef(null),
        F = React.useRef(null), [_e, Y] = React.useState(1), [H, me] = React.useState(0), [ce, ie] = React.useState(0),
        Be = React.useRef(!0), ve = React.useRef(!1), Re = React.useRef(!1), {
            orientation: Ce,
            isForceLandscape: Ne
        } = useDeviceOrientation(), we = React.useRef(1);
    React.useContext(SystemModalContext);
    const [Me, ke] = React.useState(),
        Fe = isMobile$1 ? Ne ? window.devicePixelRatio / .8 : window.devicePixelRatio * 5 : window.devicePixelRatio / 2,
        $e = Fe < 1 ? Math.floor(3840 * Fe * C) : Math.floor(3840 / (Fe || 1) * C),
        Ve = Fe < 1 ? Math.floor(2160 * Fe * C) : Math.floor(2160 / (Fe || 1) * C), [Je, Qe] = React.useState("stopped");
    let {rerender: Ze} = useRerender();
    const qe = React.useRef(null), ze = 5, {gradientColor: De, getCanvasBottomColor: Xe} = useCanvasBottomColor(qe),
        He = useThrottle(() => {
            ke("gameVideoCanvas-" + Helper.randomChar(4)), F.current && (F.current.style.backgroundImage = `url(${IMAGES.BG_BLACK})`, F.current.className = "coverBg")
        }, 300);
    let Ge = React.useMemo(() => y, [y]), Le = React.useMemo(() => {
        if (Me) {
            const vt = L();
            return Global.flvPlayerP = vt.playerId, Logger$1.warn("set pid", Global.flvPlayerP), vt
        }
    }, [Me]);
    React.useEffect(() => (Le && (Re.current ? (Logger$1.warn("testing new vUrl", y, Le.playerId), Re.current = !1, Bt.current = !1, kt.current = 0, zt()) : (zt(), Bt.current = !1)), () => {
        Le && Le && (Le && Le.release(!1), Le && Le.stop(), Le && Le.clearView(), Qe("stopped"), Logger$1.warn("flv released", Le.playerId), Le = null)
    }), [Le]);
    const We = React.useRef(!1);
    React.useEffect(() => (Logger$1.warn(`
`), Logger$1.warn("FLV player ----> video window.devicePixelRatio", window.devicePixelRatio), Logger$1.warn("FLV player ----> videoRatio", Fe), Logger$1.warn("FLV player ----> videoFactor", C), Logger$1.warn("FLV player ----> PRE_SET_VIDEO_RESUOLUTION_WIDTH", $e), Logger$1.warn("FLV player ----> PRE_SET_VIDEO_RESUOLUTION_WIDTH", Ve), Logger$1.warn(`
`), (async () => {
        await O(), ke("gameVideoCanvas-" + Helper.randomChar(4))
    })(), () => {
        Global.inGameSnapShot = "", We.current = !0, Re.current = !1, Le && Le && (oa(), Le && Le.release(!0))
    }), []);
    let dt = React.useMemo(() => r.miniPlayer != null ? r.miniPlayer : !1, [r.miniPlayer]);
    React.useEffect(() => {
        N && y ? ve.current = !1 : ve.current = !0
    }, [N]), React.useEffect(() => {
        Je && B && B(Je)
    }, [Je]), React.useMemo(() => Je, [Je]), React.useImperativeHandle(R, () => ({
        mute() {
            Le == null || Le.audioResume(), Le == null || Le.setVolume(0)
        }, unMute() {
            Le == null || Le.audioResume(), Le == null || Le.setVolume(1)
        }, setVolume(vt) {
            Le == null || Le.audioResume(), Le == null || Le.setVolume(vt)
        }, audioResume() {
            Le == null || Le.audioResume()
        }, move(vt) {
            me(vt)
        }, zoom(vt) {
            Le == null || Le.audioResume(), we.current = vt, Y(vt)
        }, pause() {
            oa()
        }, resume() {
            Be.current = !1, He()
        }, getPlayingUrl() {
            return Ge || ""
        }, refresh(vt) {
        }, yOffset(vt) {
            ie(vt)
        }
    }), [Le, Je]), React.useEffect(() => {
        qe.current && setTimeout(() => {
            tt()
        }, 100)
    }, []), React.useEffect(() => {
        et()
    }, [_e, H, Ce]);
    const et = () => {
        z.current && (_e == 2 ? Ne ? (z.current.style.transform = `scale(${_e}) translate(0, -10%)`, qe.current && (qe.current.style.transform = `scale(${Math.min(z.current.clientWidth / $e, z.current.clientHeight / Ve)})`)) : (z.current.style.transform = `scale(${_e}) translateY(${H}%)`, qe.current && (qe.current.style.transform = `scale(${Math.min(z.current.clientWidth / $e, z.current.clientHeight / Ve)})`)) : z.current.style.transform = "", dt && x && nt())
    }, nt = () => {
        if (x) {
            const vt = 426.6666666666667 * x / z.current.clientWidth, ea = z.current;
            ea && (ea.style.transition = "none", ea.style.opacity = "0", ea.style.transform = `scale(${vt})`, setTimeout(() => {
                ea.style.transition = "", ea.style.opacity = "1"
            }, 300))
        }
    };
    React.useEffect(() => {
        dt && x && nt()
    }, []);
    const tt = React.useCallback(() => {
        if (z && z.current) {
            const vt = z.current.clientWidth / $e, ea = z.current.clientHeight / Ve, _a = `scale(${Math.min(vt, ea)})`;
            qe.current && (qe.current.style.transform = _a)
        }
    }, [qe.current, z.current, dt, x]);
    React.useEffect(() => {
        const vt = typeof ce == "number" ? `${ce}px` : ce;
        z.current && (z.current.style.top = vt)
    }, [ce]), React.useEffect(() => {
        const vt = new ResizeObserver(ea => {
            for (const _a of ea) _a.target === z.current && setTimeout(() => {
                qe.current && (qe.current.style.transform = `scale(${Math.min(z.current.clientWidth / $e, z.current.clientHeight / Ve)})`)
            }, 0)
        });
        return dt && z.current && (vt.unobserve(z.current), vt.observe(z.current)), () => {
            z.current && vt.unobserve(z.current)
        }
    }, [z.current]), React.useEffect(() => {
        qe.current && Ze >= 1 && setTimeout(() => {
            et(), Logger$1.warn("window.devicePixelRatio", window.devicePixelRatio), qe.current && (qe.current.style.transform = `scale(${Math.min(z.current.clientWidth / $e, z.current.clientHeight / Ve)})`)
        }, 0)
    }, [Ze]);
    const lt = vt => {
        F.current && (F.current.className = `coverBg fadeout ${C <= .5 ? "bgCover" : ""}`), C >= 1 && Xe()
    }, Bt = React.useRef(!1), kt = React.useRef(0), At = React.useCallback(vt => {
        if (Qe("stopped"), Le != null) {
            if (Global.flvPlayerP != Le.playerId) {
                Logger$1.warn("The current player is ", Global.flvPlayerP), Logger$1.warn("Then ignoring the FallBack ", Le.playerId);
                return
            }
            Bt.current || (E(vt || "-3"), Bt.current = !0)
        }
    }, [E, Bt, Le]), zt = React.useCallback(() => {
        Logger$1.warn("CreateFlv gameVideoCanvasId", Le.playerId, Me, Fe, C, $e, Ve, Ge), Ge && Le && Me && (Be.current, Be.current = !0, Le.setKeepScreenOn(), Le.setView(Me), Le.setBufferTime(100), D.liveSoundOn ? R.current.unMute() : R.current.mute(), Le.on("start", () => {
            Logger$1.warn("flv player on start", Le.playerId), Be.current = !0, Re.current = !1, Qe("playing"), lt()
        }), Le.on("stop", vt => {
            Be.current && !ve.current && (Be.current = !1, Re.current || (Logger$1.warn("flv player stop by itself", Le.playerId), At()))
        }), Le.on("error", (vt, ea) => {
            vt.code == -3 && (isMobile$1 && We.current || (At(vt), Re.current = !0))
        }), Le.on("close", (vt, ea, _a) => {
            Logger$1.warn("flv player close", Le.playerId)
        }), Le.on("videoInfo", (vt, ea, _a) => {
        }), Le.on("videoFrame", (vt, ea, _a) => {
        }), Le.on("audioInfo", (vt, ea, _a) => {
        }), Le.on("stats", async vt => {
            vt.ts == 0 && (kt.current += 1, Logger$1.log("count.current", kt.current, Le.playerId), kt.current > ze && (Re.current = !0, At("-3"))), vt.buf > 4e3 && ve.current && vt.buf > 3e3
        }), Logger$1.warn("Flv try to play", Ge), Le.start(Ge))
    }, [Me, Ge, Le]);
    let oa = () => {
        Be.current = !1, setTimeout(() => {
            Le && Le.stop(), Le && Le.clearView()
        }, 0)
    };
    const {setUpClassName: sa} = React.useContext(GamesLayoutContainerContext);
    return jsxs("div", {
        className: sa(GLC_CLASS_NAME_TYPE.FULL_FILL, {
            appendedClasses: "videoMask",
            dyAppendedClasses: Ne ? "videoMaskMedia" : "videoMaskMobileMedia"
        }),
        style: {width: "100%", height: "100%", "--gradient": De.join(",")},
        children: [jsx("div", {
            ref: F,
            className: `coverBg ${C <= .5 ? "bgCover" : ""}`,
            style: {
                display: C == .1 ? "none" : "block",
                backgroundImage: `url(${C <= .5 ? IMAGES.BG_BLACK : Global.inGameSnapShot})`
            },
            children: dt ? null : jsx("div", {
                className: "coverGradientWrapper",
                children: jsx("div", {className: "videoGradient"})
            })
        }), jsxs("div", {
            className: sa(GLC_CLASS_NAME_TYPE.FULL_FILL, {
                appendedClasses: "videoContainer",
                dyAppendedClasses: dt ? "" : "videoContainerMedia"
            }),
            ref: z,
            children: [dt ? jsx(Fragment, {}) : jsx("div", {
                className: "gradientWrapper",
                children: jsx("div", {className: "videoGradient"})
            }), jsx("canvas", {ref: qe, id: Me, style: {width: `${$e}px`, height: `${Ve}px`, zIndex: -1}})]
        })]
    })
});
FlvplayerComponent.displayName = "FlvplayerComponent";
const FlvplayerComponent$1 = React.memo(FlvplayerComponent);
var nprogressExports = {}, nprogress$2 = {
    get exports() {
        return nprogressExports
    }, set exports(r) {
        nprogressExports = r
    }
};/* NProgress, (c) 2013, 2014 Rico Sta. Cruz - http://ricostacruz.com/nprogress
 * @license MIT */
(function (r, R) {
    (function (y, E) {
        r.exports = E()
    })(commonjsGlobal, function () {
        var y = {};
        y.version = "0.2.0";
        var E = y.settings = {
            minimum: .08,
            easing: "ease",
            positionUsing: "",
            speed: 200,
            trickle: !0,
            trickleRate: .02,
            trickleSpeed: 800,
            showSpinner: !0,
            barSelector: '[role="bar"]',
            spinnerSelector: '[role="spinner"]',
            parent: "body",
            template: '<div class="bar" role="bar"><div class="peg"></div></div><div class="spinner" role="spinner"><div class="spinner-icon"></div></div>'
        };
        y.configure = function (Y) {
            var H, me;
            for (H in Y) me = Y[H], me !== void 0 && Y.hasOwnProperty(H) && (E[H] = me);
            return this
        }, y.status = null, y.set = function (Y) {
            var H = y.isStarted();
            Y = C(Y, E.minimum, 1), y.status = Y === 1 ? null : Y;
            var me = y.render(!H), ce = me.querySelector(E.barSelector), ie = E.speed, Be = E.easing;
            return me.offsetWidth, N(function (ve) {
                E.positionUsing === "" && (E.positionUsing = y.getPositioningCSS()), L(ce, B(Y, ie, Be)), Y === 1 ? (L(me, {
                    transition: "none",
                    opacity: 1
                }), me.offsetWidth, setTimeout(function () {
                    L(me, {transition: "all " + ie + "ms linear", opacity: 0}), setTimeout(function () {
                        y.remove(), ve()
                    }, ie)
                }, ie)) : setTimeout(ve, ie)
            }), this
        }, y.isStarted = function () {
            return typeof y.status == "number"
        }, y.start = function () {
            y.status || y.set(0);
            var Y = function () {
                setTimeout(function () {
                    y.status && (y.trickle(), Y())
                }, E.trickleSpeed)
            };
            return E.trickle && Y(), this
        }, y.done = function (Y) {
            return !Y && !y.status ? this : y.inc(.3 + .5 * Math.random()).set(1)
        }, y.inc = function (Y) {
            var H = y.status;
            return H ? (typeof Y != "number" && (Y = (1 - H) * C(Math.random() * H, .1, .95)), H = C(H + Y, 0, .994), y.set(H)) : y.start()
        }, y.trickle = function () {
            return y.inc(Math.random() * E.trickleRate)
        }, function () {
            var Y = 0, H = 0;
            y.promise = function (me) {
                return !me || me.state() === "resolved" ? this : (H === 0 && y.start(), Y++, H++, me.always(function () {
                    H--, H === 0 ? (Y = 0, y.done()) : y.set((Y - H) / Y)
                }), this)
            }
        }(), y.render = function (Y) {
            if (y.isRendered()) return document.getElementById("nprogress");
            D(document.documentElement, "nprogress-busy");
            var H = document.createElement("div");
            H.id = "nprogress", H.innerHTML = E.template;
            var me = H.querySelector(E.barSelector), ce = Y ? "-100" : x(y.status || 0),
                ie = document.querySelector(E.parent), Be;
            return L(me, {
                transition: "all 0 linear",
                transform: "translate3d(" + ce + "%,0,0)"
            }), E.showSpinner || (Be = H.querySelector(E.spinnerSelector), Be && _e(Be)), ie != document.body && D(ie, "nprogress-custom-parent"), ie.appendChild(H), H
        }, y.remove = function () {
            z(document.documentElement, "nprogress-busy"), z(document.querySelector(E.parent), "nprogress-custom-parent");
            var Y = document.getElementById("nprogress");
            Y && _e(Y)
        }, y.isRendered = function () {
            return !!document.getElementById("nprogress")
        }, y.getPositioningCSS = function () {
            var Y = document.body.style,
                H = "WebkitTransform" in Y ? "Webkit" : "MozTransform" in Y ? "Moz" : "msTransform" in Y ? "ms" : "OTransform" in Y ? "O" : "";
            return H + "Perspective" in Y ? "translate3d" : H + "Transform" in Y ? "translate" : "margin"
        };

        function C(Y, H, me) {
            return Y < H ? H : Y > me ? me : Y
        }

        function x(Y) {
            return (-1 + Y) * 100
        }

        function B(Y, H, me) {
            var ce;
            return E.positionUsing === "translate3d" ? ce = {transform: "translate3d(" + x(Y) + "%,0,0)"} : E.positionUsing === "translate" ? ce = {transform: "translate(" + x(Y) + "%,0)"} : ce = {"margin-left": x(Y) + "%"}, ce.transition = "all " + H + "ms " + me, ce
        }

        var N = function () {
            var Y = [];

            function H() {
                var me = Y.shift();
                me && me(H)
            }

            return function (me) {
                Y.push(me), Y.length == 1 && H()
            }
        }(), L = function () {
            var Y = ["Webkit", "O", "Moz", "ms"], H = {};

            function me(ve) {
                return ve.replace(/^-ms-/, "ms-").replace(/-([\da-z])/gi, function (Re, Ce) {
                    return Ce.toUpperCase()
                })
            }

            function ce(ve) {
                var Re = document.body.style;
                if (ve in Re) return ve;
                for (var Ce = Y.length, Ne = ve.charAt(0).toUpperCase() + ve.slice(1), we; Ce--;) if (we = Y[Ce] + Ne, we in Re) return we;
                return ve
            }

            function ie(ve) {
                return ve = me(ve), H[ve] || (H[ve] = ce(ve))
            }

            function Be(ve, Re, Ce) {
                Re = ie(Re), ve.style[Re] = Ce
            }

            return function (ve, Re) {
                var Ce = arguments, Ne, we;
                if (Ce.length == 2) for (Ne in Re) we = Re[Ne], we !== void 0 && Re.hasOwnProperty(Ne) && Be(ve, Ne, we); else Be(ve, Ce[1], Ce[2])
            }
        }();

        function O(Y, H) {
            var me = typeof Y == "string" ? Y : F(Y);
            return me.indexOf(" " + H + " ") >= 0
        }

        function D(Y, H) {
            var me = F(Y), ce = me + H;
            O(me, H) || (Y.className = ce.substring(1))
        }

        function z(Y, H) {
            var me = F(Y), ce;
            O(Y, H) && (ce = me.replace(" " + H + " ", " "), Y.className = ce.substring(1, ce.length - 1))
        }

        function F(Y) {
            return (" " + (Y.className || "") + " ").replace(/\s+/gi, " ")
        }

        function _e(Y) {
            Y && Y.parentNode && Y.parentNode.removeChild(Y)
        }

        return y
    })
})(nprogress$2);
const nprogress$1 = nprogressExports, nprogress = "", LoadingPage$1 = "", useProgressText = ({
                                                                                                 speed: r = 50,
                                                                                                 trickle: R = !0,
                                                                                                 trickleRate: y = 200,
                                                                                                 trickleSpeed: E = 800,
                                                                                                 onStart: C = () => {
                                                                                                 },
                                                                                                 onEnd: x = () => {
                                                                                                 }
                                                                                             }) => {
    const [B, N] = React.useState(.4), {startLerp: L} = useLerpProgress(N), [O, D] = React.useState();
    let z;
    React.useEffect(() => {
        function _e() {
            if (C(), R) {
                let Y = setInterval(() => {
                    N(H => H >= 99 ? (clearInterval(O), clearInterval(z), x(), 99) : H + y)
                }, E);
                D(Y)
            } else z = setInterval(() => {
                N(Y => Y >= 100 ? (clearInterval(z), x(), 100) : Y + 100 / (1e3 / r))
            }, r)
        }

        return _e(), () => {
            clearInterval(z), clearInterval(O)
        }
    }, []);

    function F() {
        clearInterval(z), clearInterval(O), L(B, 100, PROGRESS_LERPPING_DURATION)
    }

    return {progress: B, endLoading: F, setProgress: N}
}, useLerpProgress = r => {
    const [R, y] = React.useState(0), [E, C] = React.useState(100), [x, B] = React.useState(0);
    let N, L = 20;
    return React.useEffect(() => {
        if (x > 0) {
            const D = _e => 1 - Math.pow(1 - _e, 3), z = Date.now();
            N = setInterval(() => {
                const _e = Date.now() - z;
                if (_e >= x) r(E), clearInterval(N); else {
                    const Y = _e / x, H = (E - R) * D(Y) / (x / L);
                    r(me => me + H)
                }
            }, L)
        }
        return () => {
            clearInterval(N)
        }
    }, [R, E, x, r]), {
        startLerp: React.useCallback((D, z, F) => {
            y(D), C(z), B(F)
        }, [])
    }
}, DeviceInfo$1 = "", DeviceInfo = () => {
    useDeviceOrientation();
    let {
        preloadConfig: r,
        ip: R
    } = React.useContext(ServerConfigContext), {browserVersion: y} = React.useContext(GameSessionContext);
    const E = r && r.whiteLabel.isShowCEZALogo;

    function C() {
        window.open("https://access.gaminglabs.com/Certificate/Index?i=207", "_blank")
    }

    return jsxs("section", {
        id: "device_info",
        children: [E && jsxs("button", {
            id: "cea",
            children: [jsx("img", {src: IMAGES.CEA}), " "]
        }), jsx("button", {
            id: "glc",
            onClick: () => C(),
            children: jsx("img", {src: IMAGES.GLC})
        }), jsxs("div", {children: [jsx("div", {className: `svg_version${isMobile$1 ? "_mobile" : ""}`}), "v1.3.1.0"]}), jsx("div", {children: y}), jsx("div", {children: `IP: ${R}`})]
    })
};
nprogress$1.configure({easing: "ease", speed: 500, showSpinner: !1, trickleSpeed: 200, minimum: .3});
const ProgressText = r => {
    const {t: R} = useTranslation();
    let {progress: y, endLoading: E, setProgress: C} = useProgressText({
        speed: 500,
        trickle: !0,
        trickleRate: .9,
        trickleSpeed: 500
    });
    const {doAnimation: x} = React.useContext(SplashScreenContext);
    return React.useEffect(() => {
        y == 100 && x(SPLASH_SCREEN_ANIMATION_TYPE.FADE_OUT)
    }, [y]), React.useEffect(() => {
        r.stop ? E && E() : C(.4)
    }, [r.stop]), jsx(Fragment, {
        children: jsxs("div", {
            className: "textContent",
            children: [R("messages.loading"), " ", y.toFixed(0), "%"]
        })
    })
}, LoadingPage = ({
                      perload: r = !1,
                      animaiton: R = !1,
                      logo: y = !1,
                      logoNoAnimation: E = !1,
                      gameSplashScreen: C = !1,
                      showFooter: x = !0,
                      bannerMode: B = !1,
                      multiHall: N = !1
                  }) => {
    var Ve;
    const {setUpClassName: L} = React.useContext(GamesLayoutContainerContext), {orientation: O} = useDeviceOrientation(), {
            stop: D,
            setStop: z,
            reset: F,
            anime: _e
        } = React.useContext(SplashScreenContext), [Y, H] = React.useState(), me = React.useRef(),
        ce = useLocation(), {bannerConfig: ie} = React.useContext(ServerConfigContext), {
            getGameTableSplashScreenImage: Be,
            getGameTableSplashScreenImageBg: ve,
            getLaunchScreenBg: Re
        } = React.useContext(GameCacheContext),
        Ce = Helper.getUrlParam("sessionId") || sessionStorage.getItem(SESSION_STORAGE_KEYS.SESSION_ID);
    useTranslation();
    let Ne = useAdLandingPageLoader("login"), we = useAdLandingPageLoader("multiplay");
    React.useEffect(() => (F(), ce.state && ce.state.hasOwnProperty("gameType") && H(ce.state.gameType), () => {
        F()
    }), []), React.useEffect(() => (nprogress$1.start(), () => {
        nprogress$1.done()
    }), []), React.useEffect(() => {
        if (me.current) switch (_e) {
            case SPLASH_SCREEN_ANIMATION_TYPE.FADE_IN:
                me.current.className = "loading fadein";
                break;
            case SPLASH_SCREEN_ANIMATION_TYPE.FADE_OUT:
                me.current.className = "loading fadeout";
                break;
            case SPLASH_SCREEN_ANIMATION_TYPE.IDLE:
                me.current.className = "loading static";
                break
        }
    }, [_e]);
    let Me = React.useMemo(() => !!D, [D]);
    const ke = React.useMemo(() => {
        if (!(!ce.state || !Object.prototype.hasOwnProperty.call(ce.state, "gameType")) && ie) return ve(ce.state.gameType, "gameBkImageUrl")
    }, [ie, O]);
    let {imgPath: Fe} = useLogoLoader((Ve = ce == null ? void 0 : ce.state) == null ? void 0 : Ve.gameType);
    const $e = React.useMemo(() => N ? we : Ce != null && Ce.length || B ? Ne : IMAGES.LOADING_BG, [B, O, Ce, Ne]);
    return jsx(React.Fragment, {
        children: jsxs("div", {
            ref: me,
            className: R ? "loading" : "loadingNoAnimation",
            children: [jsxs("div", {
                id: N ? "" : "loadingBgContainer",
                className: `${L(GLC_CLASS_NAME_TYPE.FILL_WIDTH)}`,
                children: [C && Y ? jsx("div", {
                    className: "gameSplashScreen",
                    style: {backgroundImage: `url(${ke})`},
                    children: jsx(ScablableContainer, {
                        children: jsx("div", {
                            className: "splashScreenContainer",
                            children: jsxs("div", {
                                className: "content",
                                children: [jsx("div", {
                                    className: "contentFlex1",
                                    children: jsx("div", {
                                        className: "splashScreenLogo",
                                        style: {backgroundImage: `url(${Fe})`}
                                    })
                                }), jsx("div", {className: "contentFlex2", children: jsx(ProgressText, {stop: Me})})]
                            })
                        })
                    })
                }) : null, C ? null : jsx("div", {
                    className: `gameSplashScreen ${N ? "mult_hall" : ""}`,
                    style: {backgroundImage: `url(${$e})`},
                    children: x && jsx("footer", {children: jsx(DeviceInfo, {})})
                })]
            }), jsx("div", {
                id: "logoContainer",
                children: E && !(Ce != null && Ce.length) ? jsx("img", {
                    className: "logoNoAnimation",
                    src: IMAGES.LOGO,
                    alt: ""
                }) : null
            }), jsx("div", {
                style: {
                    width: "3vh",
                    height: "3vh",
                    position: "absolute",
                    display: "flex",
                    justifyContent: "center",
                    bottom: "23%"
                }
            })]
        })
    })
};

function preloadImage(r) {
    return new Promise((R, y) => {
        const E = new Image;
        E.onload = function () {
            R(E)
        }, E.onerror = E.onabort = function () {
            y(r)
        }, E.src = r
    })
}

function useImagePreloader(r) {
    let {setCachedImages: R, setPokersImages: y} = React.useContext(GameCacheContext);
    const E = Object.entries(r).map(([B, N]) => N), [C, x] = React.useState(!1);
    return React.useEffect(() => {
        let B = !1;

        async function N() {
            if (B) return;
            const L = [];
            for (const z of E) L.push(preloadImage(z));
            let O = await Promise.all(L);
            const D = {};
            for (let z of O) {
                let _e = z.src.split("/"), Y = _e[_e.length - 1];
                _e[_e.length - 2];
                let H = Y.split(".")[0];
                const me = z;
                D[`${H}`] = me
            }
            R(D), !B && x(!0)
        }

        return N(), () => {
            B = !0
        }
    }, [r]), {imagesPreloaded: C}
}

const useSFS = () => {
    let {allReady: r} = React.useContext(ServerConfigContext), {
        connectServer: R,
        connected: y,
        wsServerFilter: E
    } = React.useContext(SFSCoreContext), {getTrialSessionId: C, loginWithUserAndPass: x} = useGameHttpService();
    const {setHttpState: B} = React.useContext(HttpContext), {
        update: N,
        isTrial: L
    } = React.useContext(GameSessionContext);
    return {
        trial: () => {
            N(GAME_SESSION_ACTIONS_TYPE.LOGGING_IN), N(GAME_SESSION_ACTIONS_TYPE.LOADING);
            try {
                C(!0).then(F => {
                    F && F.code == 0 && (L.current = !0, sessionStorage.removeItem(SESSION_STORAGE_KEYS.SESSION_ID_TYPE), y || r && R(E()))
                }).catch(F => {
                    throw F
                })
            } catch {
            }
        }, normalLogin: ({username: F, password: _e}) => {
            N(GAME_SESSION_ACTIONS_TYPE.LOGGING_IN), N(GAME_SESSION_ACTIONS_TYPE.LOADING);
            try {
                x({username: F, password: _e}).then(Y => {
                    Y && Y.code == 0 && (L.current = !1, sessionStorage.setItem(SESSION_STORAGE_KEYS.SESSION_ID_TYPE, GAME_SESSION_STATE.NORMAL_AUTH), y || r && R(E()))
                }).catch(Y => {
                    throw Y
                })
            } catch {
            }
        }, loginWithSessionId: F => {
            B(F ? _e => ({..._e, sessionId: F, loginAtOnce: !0}) : _e => ({..._e, loginAtOnce: !0})), r && R(E())
        }
    }
}, useRedirectOnRefresh = () => {
    const r = useNavigate(), R = useLocation();
    React.useEffect(() => {
        const y = () => {
            sessionStorage.setItem("isRefreshing", "true")
        };
        return window.addEventListener("beforeunload", y), sessionStorage.getItem("isRefreshing") === "true" && (sessionStorage.removeItem("isRefreshing"), R.hash.includes("/gameHall") || (window.location.hash = "#/gameHall")), () => {
            window.removeEventListener("beforeunload", y)
        }
    }, [r, R])
}, useAssetsPreload = () => {
    let [r, R] = React.useState(!1);
    const {imagesPreloaded: y} = useImagePreloader(PRELOAD_IMAGES_LIST), {bannerConfig: E} = React.useContext(ServerConfigContext), {startLoadingBannerConfig: C} = React.useContext(GameCacheContext);
    return React.useMemo(() => {
        R(!0)
    }, [y]), React.useEffect(() => {
        const x = document.createElement("video");
        return x.src = "pwa_tutorial.mp4", x.preload = "auto", x.addEventListener("loadeddata", () => {
            Logger$1.log("Video preloaded")
        }), () => {
            x.removeEventListener("loadeddata", () => {
                Logger$1.log("Video preloaded")
            })
        }
    }, []), React.useEffect(() => {
        E && C(E)
    }, [E]), {assetsPreload: r}
}, usePreloadPage = (r, R) => {
    let {assetsPreload: y} = useAssetsPreload();
    const E = useNavigate(), [C, x] = React.useState(""), [B, N] = React.useState(!1), [L, O] = React.useState(!1), [D, z] = React.useState(!1), [F, _e] = React.useState(!1), [Y, H] = React.useTransition();
    let me = r.gameSessionContext.gameSessionInfos.loginType;
    return React.useEffect(() => {
        if (r.gameSessionContext.gameSessionInfos.gameSessionState.length > 0 && y) switch (r.gameSessionContext.gameSessionInfos.loginType) {
            case GAME_SESSION_STATE.FORWARD_LINK_AUTH:
                O(!0), x(GAME_SESSION_STATE.FORWARD_LINK_AUTH), z(!0), Logger$1.info("Forward link authdication (browser refresh)");
                break;
            case GAME_SESSION_STATE.NORMAL_AUTH:
                x(GAME_SESSION_STATE.NORMAL_AUTH), N(!0), Logger$1.info("Normal login");
                break;
            case GAME_SESSION_STATE.TRIAL:
                O(!0), x(GAME_SESSION_STATE.TRIAL), _e(!0);
                break
        }
    }, [r.gameSessionContext.gameSessionInfos.loginType, y]), React.useEffect(() => {
        F && R.trial()
    }, [F]), React.useEffect(() => {
        D && R.loginWithSessionId(r.gameSessionContext.urlParamsState.sessionId)
    }, [D]), React.useEffect(() => {
        const ce = r.gameSessionContext.gameSessionInfos.gameSessionState;
        C.length > 0 && (C == GAME_SESSION_STATE.FORWARD_LINK_AUTH || C == GAME_SESSION_STATE.TRIAL) && ce === GAME_SESSION_STATE.ONLINE && N(!0)
    }, [C, r.gameSessionContext.gameSessionInfos.gameSessionState]), React.useEffect(() => {
        if (B) {
            let ce = window.location.search;
            switch (ce || (ce = window.location.hash.split("?")[1]), C) {
                case GAME_SESSION_STATE.FORWARD_LINK_AUTH:
                case GAME_SESSION_STATE.TRIAL:
                    E("/gameHall", {replace: !0});
                    break;
                case GAME_SESSION_STATE.NORMAL_AUTH:
                    E("/login", {replace: !0});
                    break
            }
        }
    }, [B, r.tableNameInQueryString]), React.useEffect(() => {
        L && (r.update(GAME_SESSION_ACTIONS_TYPE.LOGGING_IN), r.update(GAME_SESSION_ACTIONS_TYPE.LOADING))
    }, [L]), {isPending: Y, goToNextPage: B, loginType: me}
};

function PreloadPage(r) {
    useRedirectOnRefresh();
    const {goToNextPage: R, loginType: y} = usePreloadPage(React.useContext(GameSessionContext), useSFS()), E = () => {
        throw new Promise(() => {
        })
    };
    return React.useEffect(() => {
        const C = document.getElementById("loadingSplash");
        return C && (C.style.display = "none"), () => {
        }
    }, []), React.useEffect(() => {
    }, [R]), jsx(Fragment, {
        children: jsxs(React.Suspense, {
            fallback: jsx(LoadingPage, {
                bannerMode: y == GAME_SESSION_STATE.FORWARD_LINK_AUTH,
                logoNoAnimation: !0
            }), children: [R ? null : jsx(E, {}), jsx(Outlet, {})]
        })
    })
}

const GameHall = React.lazy(() => new Promise(r => r(__vitePreload(() => import("./GameHall-v1.3.1.0-.js"), ["assets/GameHall-v1.3.1.0-.js", "assets/GameHall.7f9fdf3f.css"])))),
    MultiHall = React.lazy(() => new Promise(r => r(__vitePreload(() => Promise.resolve().then(() => MultiHall$2), void 0)))),
    GameTablePage = React.lazy(() => new Promise(r => r(__vitePreload(() => import("./GameTablePageSwitcher-v1.3.1.0-.js"), ["assets/GameTablePageSwitcher-v1.3.1.0-.js", "assets/GameTablePage-v1.3.1.0-.js", "assets/GameTablePage.7e3303df.css", "assets/GameTablePageSwitcher.cb20be05.css"])))),
    Login = React.lazy(() => new Promise(r => r(__vitePreload(() => import("./LoginPage-v1.3.1.0-.js"), ["assets/LoginPage-v1.3.1.0-.js", "assets/LoginPage.2bb1bb16.css"]))));

function RaBrouter() {
    const [r, R] = React.useState(!0);
    React.useState(!0), React.useEffect(() => {
        const x = document.documentElement, B = () => {
            x.style.setProperty("--doc-height", `${window.innerHeight + 1}px`), x.style.setProperty("--doc-width", `${window.innerWidth}px`)
        };
        return r ? (window.addEventListener("resize", B), B()) : (window.removeEventListener("resize", B), x.style.removeProperty("--doc-height"), x.style.removeProperty("--doc-width")), () => window.removeEventListener("resize", B)
    }, [r]);
    let {gameSessionContext: y} = React.useContext(GameSessionContext);
    const E = (x, B, N) => {
        if (y.gameSessionInfos.gameSessionState != GAME_SESSION_STATE.OFFLINE) return jsx(x, {props: B})
    }, C = (x, B, N) => jsx(x, {props: B});
    return jsx(GameTablePopUpContextProvider, {
        children: jsx(SetFixSizeContext.Provider, {
            value: R,
            children: jsx(SoundProvider, {
                children: jsx(Routes, {
                    children: jsxs(Route, {
                        path: "/",
                        element: jsx(PreloadPage, {}),
                        children: [jsx(Route, {
                            path: "/",
                            element: jsx(Navigate, {to: "/login", replace: !0})
                        }), jsx(Route, {path: "/gameHall", element: E(GameHall)}), jsx(Route, {
                            path: "/multiHall",
                            element: E(MultiHall)
                        }), jsx(Route, {path: "/login", element: C(Login)}), jsx(Route, {
                            path: "/gameTablePage",
                            element: jsx(Navigate, {to: "", replace: !0})
                        }), jsx(Route, {path: "/gameTablePage/:gameType", element: E(GameTablePage)})]
                    })
                })
            })
        })
    })
}

const svg = "", LandscapeBlock$1 = "", LandscapeBlock = () => {
    const {orientation: r} = useDeviceOrientation(), {t: R} = useTranslation();
    let {isVirtualKeyboardOpen: y} = React.useContext(GamesLayoutContainerContext);
    return !y && (isMobile$1 && r.includes("landscape") || isMobile$1 && r.includes("small-landscape") || isDesktop$1 && r === "small-landscape" || isDesktop$1 && r.includes("portrait") || isDesktop$1 && r === "small-landscape" || isIPad && !isDesktop$1 && r === "small-lanscape") ? jsxs("div", {
        id: "landscape_block",
        children: [(isMobile$1 || isIPad) && jsx("div", {children: jsx("div", {className: "svg_phone_rotate"})}), jsx("div", {children: R(isDesktop$1 && !isIPad ? "messages.screen_size_block" : "messages.landscape_block")})]
    }) : jsx(Fragment, {})
}, WrappedApp = () => (React.useEffect(() => {
    document.body && document.body.setAttribute("class", isMobile$1 ? "mobile" : "desktop")
}, []), jsx(SplashScreenProvider, {
    children: jsx(HashRouter, {
        children: jsxs(GamesLayoutContainerContext.Provider, {
            value: {...useGlCcontext()},
            children: [jsx(RaBrouter, {}), jsx(LandscapeBlock, {}), jsx(Te$1, {
                position: "top-center",
                visibleToasts: 1,
                toastOptions: {classNames: {toast: "sonner-toast"}}
            })]
        })
    })
})), index = "", int = "";
Array.prototype.findLast || (Array.prototype.findLast = function (r, R) {
    const y = Object(this);
    let C = (y.length >>> 0) - 1;
    for (; C >= 0;) {
        if (C in y && r.call(R, y[C], C, y)) return y[C];
        C--
    }
});
Array.prototype.findLastIndex || (Array.prototype.findLastIndex = function (r, R) {
    const y = Object(this);
    let C = (y.length >>> 0) - 1;
    for (; C >= 0;) {
        if (C in y && r.call(R, y[C], C, y)) return C;
        C--
    }
    return -1
});

function SFSContainer({children: r}) {
    return jsx(UserInfoProvider, {children: jsx(GameHallProvider, {children: jsx(GameTableProvider, {children: jsx(GameStatusProvider, {children: jsx(PayoutProvider, {children: jsx(ToastProvider, {children: jsx(SFSCoreProvider, {children: r})})})})})})})
}

const baccarat_gameplay$b = {
        basic: "พื้นฐาน",
        default: "พื้นฐาน",
        fabulous_4: "ชนะด้วย 4แต้ม",
        natural: "โชคดีธรรมชาติ 6",
        super: "ซูเปอร์บาคาร่า",
        switch: "เปลี่ยนรูปแบบการเล่นเกม",
        tiger: "เสือ"
    }, bet_record$b = {
        bet_amount: "จำนวนเงินเดิมพัน",
        bet_type: "ประเภทการเดิมพัน",
        betting_number: "หมายเลขเดิมพัน",
        date_time: "Date & Time",
        game: "Game",
        game_type: "ประเภทเกม",
        gameround_id: "ID เกมส์",
        loading: "Loading",
        next: "ถัดไป",
        no_video: "Please note that this round of the game is invaild, and live video will not be displayed.",
        previous: "ก่อนหน้า",
        shoe_round: "ขอน - รอบ",
        status: "สถานะ",
        table_number: "หมายเลขโต๊ะ",
        total_bet: "การเดิมพันทั้งหมด ",
        valid_bet: "เบทปกติ",
        win_loss: "ได้/เสีย",
        bet_status: {100: "Betting", 101: "Failed", 110: "ยังไม่สรุป", 111: "เคลียยอด", 120: "คืนเงินเดิมพัน"},
        title: {details: "Details", records: "ประวัติเดิมพัน"}
    }, bet_type$b = {
        1001: "แบงค์เกอร์",
        1002: "เพลเยอร์",
        1003: "เสมอ",
        1006: "คู่เจ้ามือ",
        1007: "คู่ผู้เล่น",
        1011: "แบงค์เกอร์",
        1100: "ลัคกี้ 6",
        1211: "แบงเกอร์ได้ป็อก",
        1212: "ผู้เล่นได้ป็อก",
        1223: "คู่ไหนก็ได้",
        1224: "คู่สมบูรณ์แบบ",
        1231: "แบงค์เกอร์   โบนัสมังกร",
        1232: "เพลเยอร์     โบนัสมังกร",
        1301: "ต่อรอง",
        1302: "ต่อรอง",
        1303: "ต่อรอง",
        1304: "ต่อรอง",
        1401: "เสือ",
        1402: "เสือใหญ่",
        1403: "เสือเล็ก",
        1404: "เสือเสมอ",
        1405: "คู่เสือ",
        1501: "แบ้งเกอร์ ชนะด้วย 4แต้ม",
        1502: "เพลเยอร์ ชนะด้วย 4แต้ม",
        1503: "แบ้งเกอร์คู่พิเศษ",
        1504: "เพลเยอร์คู่พิเศษ",
        1601: "แบงค์เกอร์ดำ",
        1602: "แบงเกอร์แดง",
        1603: "เพลเยอร์ดำ",
        1604: "เพลเยอร์แดง",
        1605: "6 ตัวใดก็ได้",
        2001: "มังกร",
        2002: "เสือ",
        2003: "เสมอ",
        3001: "ต่ำ",
        3002: "คี่",
        3003: "คู่",
        3004: "สูง",
        3011: "สามเท่าใดๆ",
        3048: "ONE",
        3049: "TWO",
        3050: "THREE",
        3051: "FOUR",
        3052: "FIVE",
        3053: "SIX",
        3200: "สูง",
        3201: "ต่ำ",
        3225: "ต่ำ",
        3227: "ต่ำ",
        3228: "ต่ำ",
        3229: "ต่ำ",
        3230: "สูง",
        3232: "สูง",
        3401: "คี่",
        3402: "คู่",
        3403: "1 FAN",
        3404: "2 FAN",
        3405: "3 FAN",
        3406: "4 FAN",
        3407: "1NIM2",
        3408: "1NIM3",
        3409: "1NIM4",
        3410: "2NIM1",
        3411: "2NIM3",
        3412: "2NIM4",
        3413: "3NIM1",
        3414: "3NIM2",
        3415: "3NIM4",
        3416: "4NIM1",
        3417: "4NIM2",
        3418: "4NIM3",
        3419: "23ONE NGA",
        3420: "24ONE NGA",
        3421: "34ONE NGA",
        3422: "13TWO NGA",
        3423: "14TWO NGA",
        3424: "34TWO NGA",
        3425: "12THREE NGA",
        3426: "14THREE NGA",
        3427: "24THREE NGA",
        3428: "13FOUR NGA",
        3429: "12FOUR NGA",
        3430: "23FOUR NGA",
        3431: "SSH123",
        3432: "SSH124",
        3433: "SSH134",
        3434: "SSH234",
        3435: "KWOK12",
        3436: "KWOK23",
        3437: "KWOK34",
        3438: "KWOK41",
        3500: "เสมอ",
        3501: "ต่ำ",
        3502: "สูง",
        3503: "คี่",
        3504: "คู่",
        4001: "1 - 18",
        4002: "คู่",
        4005: "คี่",
        4006: "19 - 36",
        4007: "ST",
        4008: "ND",
        4009: "RD",
        4010: "",
        4011: "",
        4012: "",
        5001: "P1",
        5002: "P2",
        5003: "P3",
        5004: "P4",
        5005: "P5",
        5011: "คู่ P1",
        5012: "คู่ P2",
        5013: "คู่ P3",
        5014: "คู่ P4",
        5015: "คู่ P5",
        5101: "P1",
        5102: "P2",
        5103: "P3",
        5104: "P4",
        5105: "P5",
        5106: "B1",
        5107: "B2",
        5108: "B3",
        5109: "B4",
        5110: "B5",
        5111: "คู่เจ้ามือ",
        6201: "อันดาร์",
        6202: "บาฮาร์",
        6203: "1-5",
        6204: "6-10",
        6205: "11-15",
        6206: "16-25",
        6207: "26-30",
        6208: "31-35",
        6209: "36-40",
        6210: "41+",
        6211: "<span>1</span>st ANDAR",
        6212: "<span>1</span>st BAHAR",
        6301: "ผู้เล่น A",
        6302: "ผู้เล่น B",
        6303: "เสมอ",
        6304: "ผู้เล่น A คู่+",
        6305: "ผู้เล่น B คู่+",
        6306: "โบนัส ไพ่ 6 ใบ",
        7201: "Ante",
        7202: "Blind",
        7203: "ทริป",
        7204: "RAISE 4x",
        7205: "RAISE 3x",
        7206: "RAISE 2x",
        7207: "RAISE 1x",
        7211: "Ante",
        7212: "Blind",
        7213: "ทริป",
        7214: "RAISE 4x",
        7215: "RAISE 3x",
        7216: "RAISE 2x",
        7217: "RAISE 1x",
        7221: "Ante",
        7222: "Blind",
        7223: "ทริป",
        7224: "RAISE 4x",
        7225: "RAISE 3x",
        7226: "RAISE 2x",
        7227: "RAISE 1x",
        7301: "Ante",
        7302: "เสมอ",
        7303: "การแข่งขัน",
        7304: "เสมอลำดับที่ 2",
        7311: "Ante",
        7312: "เสมอ",
        7313: "การแข่งขัน",
        7314: "เสมอลำดับที่ 2",
        7321: "Ante",
        7322: "เสมอ",
        7323: "การแข่งขัน",
        7324: "เสมอลำดับที่ 2",
        7401: "Ante",
        7402: "ANTE DOUBLE",
        7403: "SPLIT",
        7404: "เสมอ",
        7405: "Lucky 3",
        7406: "HOT 3",
        7407: "BUST IT",
        7408: "ต่อรอง",
        7409: "LUCKY LADIES",
        8001: "แบงค์เกอร์ 1",
        8002: "แบงค์เกอร์ 2",
        8003: "แบงค์เกอร์ 3",
        8011: "แบงค์เกอร์ 1",
        8012: "แบงค์เกอร์ 2",
        8013: "แบงค์เกอร์ 3",
        8021: "แบงค์เกอร์ 1",
        8022: "แบงค์เกอร์ 2",
        8023: "แบงค์เกอร์ 3",
        8101: "ผู้เล่น 1",
        8102: "ผู้เล่น 2",
        8103: "ผู้เล่น 3",
        8111: "ผู้เล่น 1",
        8112: "ผู้เล่น 2",
        8113: "ผู้เล่น 3",
        8121: "ผู้เล่น 1",
        8122: "ผู้เล่น 2",
        8123: "ผู้เล่น 3",
        9001: "มังกร",
        9002: "ฟีนิกซ์",
        9003: "คู่ 8 บวก",
        9004: "สเตรท",
        9005: "ฟลัช ",
        9006: "สเตรทฟลัช ",
        9007: "ตอง",
        9101: "มังกร",
        9102: "ฟีนิกซ์",
        9103: "เสมอ",
        9114: "มังกร ภาพ 3 ภาพ",
        9124: "ฟีนิกซ์ ภาพ 3 ภาพ",
        tips: {
            6306: "Royal Flush/Straight Flush/Four of a Kind/Full House/Flush/Straight/Three of a Kind",
            9003: "Contains Pair 9 - Pair A / Straight / Flush / Straight Flush / Three of a Kind",
            banker_insurance: "กำลังเดิมพันประกันแบงค์เกอร์",
            bullbull_firstcard: "First Card",
            cards_dealt: "Cards Dealt",
            check: "เช็ค",
            checked: "YOU CHECKED",
            comm_betted: "คุณได้ทำการวางเดิมพันแบบมีค่าคอมมิชชั่นในรอบนี้.",
            double_text: "TWO DICE",
            fold: "หมอบ",
            folded: "YOU FOLDED",
            house_card: "HOUSE",
            lose: "คุณแพ้",
            no_bet_after: "หลังจากรอบที่ %1 ในทุกๆ ขอน จะไม่อนุญาตให้เดิมพันที่ %2",
            no_comm_betted: "คุณได้ทำการวางเดิมพันแบบไม่มีค่าคอมมิชชั่นในรอบนี้.",
            no_pairs: "After the 50th game round in every shoe, no betting are allowed on Pairs.",
            player_1: "ผู้เล่น 1",
            player_2: "ผู้เล่น 2",
            player_3: "ผู้เล่น 3",
            player_insurance: "กำลังเดิมพันประกันเพลย์เยอร์",
            raised: "YOU RAISED",
            single_text: "ONE DICE",
            surrender: "ยอมแพ้",
            tie: "YOU TIE",
            triple_text: "THREE DICE",
            war: "เข้าสู่การแข่งขัน",
            win: "คุณชนะ"
        }
    }, custom_chips$b = {
        chip_value_exists: "มูลค่าชิปนี้มีอยู่แล้ว กรุณาลองค่าอื่น",
        choose_common_chips: "เลือกชิปทั่วไป",
        custom_chips_value: "มูลค่าชิปที่กำหนดเอง",
        min_chip_count: "กรุณาเลือกอย่างน้อย 5 ชิป",
        min_chip_value: "มูลค่าชิปขั้นต่ำที่อนุญาตคือ",
        select_all: "เลือกทั้งหมด",
        title: "เลือกชิป"
    }, detailed_bet_type$b = {
        1001: "แบงค์เกอร์",
        1002: "เพลเยอร์",
        1003: "เสมอ",
        1006: "คู่นายธนาคาร",
        1007: "เพลงเยอร์เสมอ",
        1011: "แบงค์เกอร์ (ไม่มีค่าคอมมิชชั่น)",
        1100: "ลัคกี้ 6",
        1211: "แบงเกอร์ได้ป็อก",
        1212: "ผู้เล่นได้ป็อก",
        1223: "คู่ไหนก็ได้",
        1224: "คู่สมบูรณ์แบบ",
        1231: "Banker Bonus",
        1232: "Player Bonus",
        1301: "Banker Insurance 1",
        1302: "Banker Insurance 2",
        1303: "Player Insurance 1",
        1304: "Player Insurance 2",
        1401: "เสือ",
        1402: "เสือใหญ่",
        1403: "เสือเล็ก",
        1404: "เสือเสมอ",
        1405: "คู่เสือ",
        1501: "แบ้งเกอร์ ชนะด้วย 4แต้ม",
        1502: "เพลเยอร์ ชนะด้วย 4แต้ม",
        1503: "แบ้งเกอร์คู่พิเศษ",
        1504: "เพลเยอร์คู่พิเศษ",
        1601: "แบงค์เกอร์ดำ",
        1602: "แบงเกอร์แดง",
        1603: "เพลเยอร์ดำ",
        1604: "เพลเยอร์แดง",
        1605: "6 ตัวใดก็ได้",
        2001: "มังกร",
        2002: "เสือ",
        2003: "เสมอ",
        3001: "ต่ำ",
        3002: "คี่",
        3003: "คู่",
        3004: "สูง",
        3005: "ทริปเปิล1",
        3006: "ทริปเปิล2",
        3007: "ทริปเปิล3",
        3008: "ทริปเปิล4",
        3009: "ทริปเปิล5",
        3010: "ทริปเปิล6",
        3011: "สามเท่าใดๆ",
        3012: "สองเท่า1",
        3013: "สองเท่า2",
        3014: "สองเท่า3",
        3015: "สองเท่า4",
        3016: "สองเท่า5",
        3017: "สองเท่า6",
        3018: "รวม4",
        3019: "รวม5",
        3020: "รวม6",
        3021: "รวม7",
        3022: "รวม8",
        3023: "รวม9",
        3024: "รวม10",
        3025: "รวม11",
        3026: "รวม12",
        3027: "รวม13",
        3028: "รวม14",
        3029: "รวม15",
        3030: "รวม16",
        3031: "รวม17",
        3033: "Two Dice 1,2",
        3034: "Two Dice 1,3",
        3035: "Two Dice 1,4",
        3036: "Two Dice 1,5",
        3037: "Two Dice 1,6",
        3038: "Two Dice 2,3",
        3039: "Two Dice 2,4",
        3040: "Two Dice 2,5",
        3041: "Two Dice 2,6",
        3042: "Two Dice 3,4",
        3043: "Two Dice 3,5",
        3044: "Two Dice 3,6",
        3045: "Two Dice 4,5",
        3046: "Two Dice 4,6",
        3047: "Two Dice 5,6",
        3048: "ลูกเต๋า 1",
        3049: "ลูกเต๋า 2",
        3050: "ลูกเต๋า 3",
        3051: "ลูกเต๋า 4",
        3052: "ลูกเต๋า 5",
        3053: "ลูกเต๋า 6",
        3200: "สูง",
        3201: "ต่ำ",
        3202: "11 สูง-ต่ำ",
        3203: "ลูกเต๋า 1",
        3204: "ลูกเต๋า 2",
        3205: "ลูกเต๋า 3",
        3206: "ลูกเต๋า 4",
        3207: "ลูกเต๋า 5",
        3208: "ลูกเต๋า 6",
        3209: "ไฮโล 1-2",
        3210: "ไฮโล 1-3",
        3211: "ไฮโล 1-4",
        3212: "ไฮโล1-5",
        3213: "ไฮโล 1-6",
        3214: "ไฮโล 2-3",
        3215: "ไฮโล 2-4",
        3216: "ไฮโล 2-5",
        3217: "ไฮโล 2-6",
        3218: "ไฮโล 3-4",
        3219: "ไฮโล 3-5",
        3220: "ไฮโล 3-6",
        3221: "ไฮโล 4-5",
        3222: "ไฮโล 4-6",
        3223: "ไฮโล 5-6",
        3224: "1ต่ำ",
        3225: "2ต่ำ",
        3226: "3ต่ำ",
        3227: "4ต่ำ",
        3228: "5ต่ำ",
        3229: "6ต่ำ",
        3230: "3สูง",
        3231: "4สูง",
        3232: "5สูง",
        3233: "6สูง",
        3234: "1,2,3",
        3235: "2,3,4",
        3236: "3,4,5",
        3237: "4,5,6",
        3301: "Fish",
        3302: "Prawn",
        3303: "Calabash",
        3304: "Coin",
        3305: "Crab",
        3306: "Cock",
        3307: "Specific Single Red",
        3308: "Specific Single Green",
        3309: "Specific Single Blue",
        3310: "Specific Double Red",
        3311: "Specific Double Green",
        3312: "Specific Double Blue",
        3313: "Specific Triple Red",
        3314: "Specific Triple Green",
        3315: "Specific Triple Blue",
        3316: "Any Triple Color",
        3317: "Calabash & Prawn",
        3318: "Calabash & Fish",
        3319: "Calabash & Cock",
        3320: "Calabash & Crab",
        3321: "Calabash & Coin",
        3322: "Prawn & Fish",
        3323: "Prawn & Cock",
        3324: "Prawn & Crab",
        3325: "Prawn & Coin",
        3326: "Fish & Cock",
        3327: "Fish & Crab",
        3328: "Fish & Coin",
        3329: "Cock & Crab",
        3330: "Cock & Coin",
        3331: "Crab & Coin",
        3401: "คี่",
        3402: "คู่",
        3403: "1Fan",
        3404: "2Fan",
        3405: "3Fan",
        3406: "4Fan",
        3407: "1Nim2",
        3408: "1Nim3",
        3409: "1Nim4",
        3410: "2Nim1",
        3411: "2Nim3",
        3412: "2Nim4",
        3413: "3Nim1",
        3414: "3Nim2",
        3415: "3Nim4",
        3416: "4Nim1",
        3417: "4Nim2",
        3418: "4Nim3",
        3419: "23 One Nga",
        3420: "24 One Nga",
        3421: "34 One Nga",
        3422: "13 Two Nga",
        3423: "14 Two Nga",
        3424: "34 Two Nga",
        3425: "12 Three Nga",
        3426: "14 Three Nga",
        3427: "24 Three Nga",
        3428: "13 Four Nga",
        3429: "12 Four Nga",
        3430: "23 Four Nga",
        3431: "SSH 123",
        3432: "SSH 124",
        3433: "SSH 134",
        3434: "SSH 234",
        3435: "12 Kwok",
        3436: "23 Kwok",
        3437: "34 Kwok",
        3438: "41 Kwok",
        3500: "เสมอ",
        3501: "ต่ำ",
        3502: "สูง",
        3503: "คี่",
        3504: "คู่",
        3505: "0",
        3506: "1",
        3507: "3",
        3508: "4",
        4001: "1 - 18",
        4002: "คู่",
        4003: "แดง",
        4004: "ดำ",
        4005: "คี่",
        4006: "19 - 36",
        4007: "1st Dozen",
        4008: "2nd Dozen",
        4009: "3rd Dozen",
        4010: "คอลัมน์ที่ 1",
        4011: "คอลัมน์ที่ 2",
        4012: "คอลัมน์ที่ 3",
        4013: "ตรง 0",
        4014: "ตรง 1",
        4015: "ตรง 2",
        4016: "ตรง 3",
        4017: "ตรง 4",
        4018: "ตรง 5",
        4019: "ตรง 6",
        4020: "ตรง 7",
        4021: "ตรง 8",
        4022: "ตรง 9",
        4023: "ตรง 10",
        4024: "ตรง 11",
        4025: "ตรง 12",
        4026: "ตรง 13",
        4027: "ตรง 14",
        4028: "ตรง 15",
        4029: "ตรง 16",
        4030: "ตรง 17",
        4031: "ตรง 18",
        4032: "ตรง 19",
        4033: "ตรง 20",
        4034: "ตรง 21",
        4035: "ตรง 22",
        4036: "ตรง 23",
        4037: "ตรง 24",
        4038: "ตรง 25",
        4039: "ตรง 26",
        4040: "ตรง 27",
        4041: "ตรง 28",
        4042: "ตรง 29",
        4043: "ตรง 30",
        4044: "ตรง 31",
        4045: "ตรง 32",
        4046: "ตรง 33",
        4047: "ตรง 34",
        4048: "ตรง 35",
        4049: "ตรง 36",
        4050: "Three Numbers 0/1/2",
        4051: "Three Numbers 0/2/3",
        4052: "Four Numbers 0/1/2/3",
        4053: "Seperate(0/1)",
        4054: "Seperate(0/2)",
        4055: "Seperate(0/3)",
        4056: "Seperate(1/2)",
        4057: "Seperate(2/3)",
        4058: "Seperate(4/5)",
        4059: "Seperate(5/6)",
        4060: "Seperate(7/8)",
        4061: "Seperate(8/9)",
        4062: "Seperate(10/11)",
        4063: "Seperate(11/12)",
        4064: "Seperate(13/14)",
        4065: "Seperate(14/15)",
        4066: "Seperate(16/17)",
        4067: "Seperate(17/18)",
        4068: "Seperate(19/20)",
        4069: "Seperate(20/21)",
        4070: "Seperate(22/23)",
        4071: "Seperate(23/24)",
        4072: "Seperate(25/26)",
        4073: "Seperate(26/27)",
        4074: "Seperate(28/29)",
        4075: "Seperate(29/30)",
        4076: "Seperate(31/32)",
        4077: "Seperate(32/33)",
        4078: "Seperate(34/35)",
        4079: "Seperate(35/36)",
        4080: "Seperate(1/4)",
        4081: "Seperate(4/7)",
        4082: "Seperate(7/10)",
        4083: "Seperate(10/13)",
        4084: "Seperate(13/16)",
        4085: "Seperate(16/19)",
        4086: "Seperate(19/22)",
        4087: "Seperate(22/25)",
        4088: "Seperate(25/28)",
        4089: "Seperate(28/31)",
        4090: "Seperate(31/34)",
        4091: "Seperate(2/5)",
        4092: "Seperate(5/8)",
        4093: "Seperate(8/11)",
        4094: "Seperate(11/14)",
        4095: "Seperate(14/17)",
        4096: "Seperate(17/20)",
        4097: "Seperate(20/23)",
        4098: "Seperate(23/26)",
        4099: "Seperate(26/28)",
        4100: "Seperate(28/32)",
        4101: "Seperate(32/35)",
        4102: "Seperate(3/6)",
        4103: "Seperate(6/9)",
        4104: "Seperate(9/12)",
        4105: "Seperate(12/15)",
        4106: "Seperate(15/18)",
        4107: "Seperate(18/21)",
        4108: "Seperate(21/24)",
        4109: "Seperate(24/27)",
        4110: "Seperate(27/30)",
        4111: "Seperate(30/33)",
        4112: "Seperate(33/36)",
        4113: "Corner(1/5)",
        4114: "เดิมพันมุม(2/6)",
        4115: "เดิมพันมุม(4/8)",
        4116: "เดิมพันมุม(5/9)",
        4117: "เดิมพันมุม(7/11)",
        4118: "เดิมพันมุม(8/12)",
        4119: "เดิมพันมุม(10/14)",
        4120: "เดิมพันมุม(11/15)",
        4121: "เดิมพันมุม(13/17)",
        4122: "เดิมพันมุม(14/18)",
        4123: "เดิมพันมุม(16/20)",
        4124: "เดิมพันมุม(17/21)",
        4125: "เดิมพันมุม(18/23)",
        4126: "เดิมพันมุม(20/24)",
        4127: "เดิมพันมุม(22/26)",
        4128: "เดิมพันมุม(23/27)",
        4129: "เดิมพันมุม(25/29)",
        4130: "เดิมพันมุม(26/30)",
        4131: "เดิมพันมุม(28/32)",
        4132: "เดิมพันมุม(29/33)",
        4133: "เดิมพันมุม(31/35)",
        4134: "เดิมพันมุม(32/36)",
        4135: "Street(1-3)",
        4136: "Street(4-6)",
        4137: "Street(7-9)",
        4138: "Street(10-12)",
        4139: "Street(13-15)",
        4140: "Street(16-18)",
        4141: "Street(19-21)",
        4142: "Street(22-24)",
        4143: "Street(25-27)",
        4144: "Street(28-30)",
        4145: "Street(31-33)",
        4146: "Street(34-36)",
        4147: "Line(1-6)",
        4148: "Line(4-9)",
        4149: "Line(7-12)",
        4150: "Line(10-15)",
        4151: "Line(13-18)",
        4152: "Line(16-21)",
        4153: "Line(19-24)",
        4154: "Line(22-27)",
        4155: "Line(28-33)",
        4156: "Line(31-36)",
        4157: "Line(25-30)",
        5001: "P1",
        5002: "P2",
        5003: "P3",
        5004: "P4",
        5005: "P5",
        5011: "คู่ P1",
        5012: "คู่ P2",
        5013: "คู่ P3",
        5014: "คู่ P4",
        5015: "คู่ P5",
        5101: "P1",
        5102: "P2",
        5103: "P3",
        5104: "P4",
        5105: "P5",
        5106: "แบงค์เกอร์ 1",
        5107: "แบงค์เกอร์ 2",
        5108: "แบงค์เกอร์ 3",
        5109: "แบงค์เกอร์ 4",
        5110: "แบงค์เกอร์ 5",
        5111: "คู่นายธนาคาร",
        6201: "อันดาร์",
        6202: "บาฮาร์",
        6203: "ไพ่ 1-5",
        6204: "ไพ่ 6-10",
        6205: "ไพ่ 11-15",
        6206: "ไพ่ 16-25",
        6207: "ไพ่ 26-30",
        6208: "ไพ่ 31-35",
        6209: "ไพ่ 36-40",
        6210: "ไพ่ 41+",
        6211: "อันดับหนึ่งของอันดาร์",
        6212: "อันดับหนึ่งของบาฮาร์",
        6301: "ผู้เล่น A",
        6302: "ผู้เล่น B",
        6303: "เสมอ",
        6304: "ผู้เล่น A คู่+",
        6305: "ผู้เล่น B คู่+",
        6306: "โบนัส ไพ่ 6 ใบ",
        7201: "ผู้เล่น 1 Ante",
        7202: "ผู้เล่น 1 Blind",
        7203: "ผู้เล่น 1 ทริป",
        7204: "Player 1 Raise 4x",
        7205: "Player 1 Raise 3x",
        7206: "Player 1 Raise 2x",
        7207: "Player 1 Raise 1x",
        7211: "ผู้เล่น 2 Ante",
        7212: "ผู้เล่น 2 Blind",
        7213: "ผู้เล่น 2 ทริป",
        7214: "Player 2 Raise 4x",
        7215: "Player 2 Raise 3x",
        7216: "Player 2 Raise 2x",
        7217: "Player 2 Raise 1x",
        7221: "ผู้เล่น 3 Ante",
        7222: "ผู้เล่น 3 Blind",
        7223: "ผู้เล่น 3 ทริป",
        7224: "Player 3 Raise 4x",
        7225: "Player 3 Raise 3x",
        7226: "Player 3 Raise 2x",
        7227: "Player 3 Raise 1x",
        7301: "ผู้เล่น 1 Ante",
        7302: "Player 1 1st Tie",
        7303: "ผู้เล่น 1 แข่งขัน",
        7304: "Player 1 2nd Tie",
        7311: "ผู้เล่น 2 Ante",
        7312: "Player 2 1st Tie",
        7313: "ผู้เล่น 2 แข่งขัน",
        7314: "Player 2 2nd Tie",
        7321: "ผู้เล่น 3 Ante",
        7322: "Player 3 1st Tie",
        7323: "ผู้เล่น 3 แข่งขัน",
        7324: "Player 3 2nd Tie",
        7401: "Ante",
        7402: "Ante Double",
        7403: "Split",
        7404: "คู่ไหนก็ได้",
        7405: "Lucky 3",
        7406: "Hot 3",
        7407: "Bust It",
        7408: "ต่อรอง",
        7409: "Lucky Ladies",
        8001: "Banker 1 (Equal)",
        8002: "Banker 2 (Equal)",
        8003: "Banker 3 (Equal)",
        8011: "Banker 1 (Double)",
        8012: "Banker 2 (Double)",
        8013: "Banker 3 (Double)",
        8021: "Banker 1 (Super Bull)",
        8022: "Banker 2 (Super Bull)",
        8023: "Banker 3 (Super Bull)",
        8101: "Player 1 (Equal)",
        8102: "Player 2 (Equal)",
        8103: "Player 3 (Equal)",
        8111: "Player 1 (Double)",
        8112: "Player 2 (Double)",
        8113: "Player 3 (Double)",
        8121: "Player 1 (Super Bull)",
        8122: "Player 2 (Super Bull)",
        8123: "Player 3 (Super Bull)",
        9001: "มังกร",
        9002: "ฟีนิกซ์",
        9003: "Pair 8+",
        9004: "สเตรท",
        9005: "ฟลัช ",
        9006: "สเตรทฟลัช ",
        9007: "ตอง",
        9101: "มังกร",
        9102: "ฟีนิกซ์",
        9103: "เสมอ",
        9114: "มังกร ภาพ 3 ภาพ",
        9124: "ฟีนิกซ์ ภาพ 3 ภาพ",
        additional_result: {
            235: "235",
            "1st_dozen": "1<sup>st</sup> Dozen",
            "2nd_dozen": "2<sup>nd</sup> Dozen",
            "3rd_dozen": "3<sup>rd</sup> Dozen",
            big_dice: "สูง",
            bull_1: "Bull 1",
            bull_2: "Bull 2",
            bull_3: "Bull 3",
            bull_4: "Bull 4",
            bull_5: "Bull 5",
            bull_6: "Bull 6",
            bull_7: "Bull 7",
            bull_8: "Bull 8",
            bull_9: "Bull 9",
            bull_bull: "วัววัว",
            double_pictures: "ภาพคู่",
            even: "คู่",
            five_dukes: "5 เซียน",
            flush: "ฟลัช ",
            four_of_a_kind: "โฟร์การ์ด",
            full_house: "ฟูลเฮ้าส์",
            high_card: "ไพ่สูง",
            no_bull: "ไม่มีวัว",
            not_qualified: "ไม่ตรงตามเกณฑ์",
            odd: "คี่",
            pair: "เสมอ",
            royal_flush: "รอยัลฟลัช",
            single_picture: "ภาพเดี่ยว",
            small_dice: "ต่ำ",
            straight: "สเตรท",
            straight_flush: "สเตรทฟลัช ",
            three_of_a_kind: "ตอง",
            triple_dice: "เลขตอง",
            triple_pictures: "3 เซียน",
            two_pairs: "Two Pairs"
        }
    }, error_code$b = {
        1: "ข้อผิดพลาดภายในเซิร์ฟเวอร์ [1]",
        101: "เกินจากการจำกัดเดิมพันที่เลือกไว้",
        102: "เวลาเกินจำกัด [102]",
        103: "การเดิมพันล้มเหลว เนื่องจาก ยอดเงินสูงกว่าเงินในกลุ่ม [103]",
        104: "Bet(s) Failed(Below Selection Bet Limit)",
        404: "Unable to connect to the server. Please check the network settings",
        5e3: "ข้อผิดพลาดไม่ระบุชื่อ [5000]",
        5001: "คำขอไม่ว่าง [5001]",
        6e3: "เครือข่ายขาดจากการเชื่อมต่อ, กรุณาเข้าสู่ระบบอีกครั้ง.",
        6001: "Network Error [6001]",
        6002: "การเข้าถึงข้อมูลเครดิตล้มเหลว. [6002]",
        6003: "ชื่อผู้ใช้หรือรหัสผ่านไม่ถูกต้อง! [6003]",
        6004: "ปฏิเสธเข้าสู่ระบบของผู้ใช้. [6004]",
        6005: "คุณไม่ได้มีแต้มต่อ! [6005]",
        6006: "หาบันทึกข้อความในโหมดเล่นหลายคนไม่พบ! [6006]",
        6007: "ไม่สามารถหาตัวแทนของคุณ, โปรดติดต่อฝ่ายบริการลูกค้า! [6007]",
        6008: "บัญชีผู้ใช้ของคุณถูกเข้าใช้งานจากสถานที่อื่น [6008]",
        6010: "การตั้งค่ารหัสผ่านใหม่ล้มเหลว [6010]",
        6011: "รูปแบบของรหัสผ่านผิดพลาด [6011]",
        6012: "ไม่สามารถเว้นว่างรหัสผ่านได้(6012) [6012]",
        6013: "รหัสผ่านจำกัดเพียง 10 ตัวอักษร! [6013]",
        6015: "ล้มเหลว! ผู้เล่นไม่สามารถทำเรื่องซ้ำได้ [6015]",
        6016: "ไม่สามารถติดตามผู้เล่นคนนี้ได้ เนื่องจากติดตามครบจำนวนสูงสุด 20 คนแล้ว [6016]",
        6018: "โต๊ะเกมนี้ถูกปิด! [6018]",
        6019: "โต๊ะเกมกำลังอยู่ในระหว่างปรับปรุง! [6019]",
        6020: "โต๊ะเกมนี้เป็นโต๊ะเกมส่วนตัว. [6020]",
        6021: "ที่นั่งนี้มีคนเลือกแล้ว โปรดลองเลือกที่นั่งอื่น! [6021]",
        6022: "ล้มเหลว! โปรดลองใหม่ภายหลัง. [6022]",
        6023: "ไม่สามารถค้นหาโต๊ะที่จำกัดการเดิมพัน โปรดลองเข้าใหม่อีกครั้ง [6023]",
        6024: "ไม่สามารถค้นหาโต๊ะเล่นเกม โปรดลองเข้าใหม่อีกครั้ง [6024]",
        6025: "ไม่สามารถหาที่นั่งที่เหมาะสมได้! [6025]",
        6026: "เข้าสู่โต๊ะเกมล้มเหลว โปรดลองใหม่อีกครั้ง! [6026]",
        6027: "โต๊ะเกมนี้เต็มแล้ว โปรดลองเลือดโต๊ะเกมอื่นอีกครั้ง! [6027]",
        6028: "คุณไม่สามารถเปลี่ยนที่นั่งได้เนื่องจากคุณไม่ได้ทำการเดิมพันในที่นั่งในรอบนี้ โปรดเลือก! [6028]",
        6029: "โต๊ะเกม {0} ถูกจองแล้ว. โปรดทำการเลือกเข้าร่วมหรือวางเดิมพันเพิ่มเติม [6029]",
        6030: "เจ้าของโต๊ะได้ออกจากเกม! [6030]",
        6031: "คุณเป็นเจ้าของโต๊ะ, ไม่สามารถทำการย้ายที่นั่งได้. [6031]",
        6032: "คุณได้วางเดิมพันเพิ่มเติมในรอบนี้. ยังไม่สามารถนั่งได้. [6032]",
        6033: "คุณได้วางเดิมพันในที่นั่งในรอบนี้. คุณไม่สามารถเข้าสู่โต๊ะเกมโดยการเดิมพันเพิ่มเติมได้ตอนนี้. [6033]",
        6034: "โต๊ะนี้ไม่ได้ถูกจองไว้ คุณไม่สามารถเข้าร่วมได้. [6034]",
        6035: "ขออภัย ยอดคงเหลือของคุณไม่เพียงพอ {0}. คุณสามารถเข้าร่วมเดิมพันเพิ่มเติมได้. [6035]",
        6037: "เดิมพัน ล้มเหลว! [6037]",
        6038: "ล้มเหลว! มีการเปลี่ยนแปลงเครดิตผิดกฎหมาย. [6038]",
        6039: "ล้มเหลว! ระบบขัดข้อง! [6039]",
        6040: "ล้มเหลว! กรุณาเข้าสู่ระบบอีกครั้ง. [6040]",
        6041: "ล้มเหลว! ไม่สามารถหารอบการเล่นเกม. [6041]",
        6042: "ล้มเหลว! เครดิตไม่เพียงพอ! [6042]",
        6043: "ล้มเหลว! จำนวนชนะ/แพ้เกินขีดจำกัด. [6043]",
        6044: "ล้มเหลว! รอบการเล่นเกมถูกปิด. [6044]",
        6045: "ล้มเหลว! การสื่อสารผิดพลาด. [6045]",
        6046: "ล้มเหลว! เกิดการขัดข้องระหว่างการดำเนินงาน. [6046]",
        6047: "เดิมพันผิดกฎ! [6047]",
        6048: "ไม่สามารถเดิมพันเล็กหรือใหญ่หลังจาก 30 รอบ! [6048]",
        6049: "เดิมพันที่ไม่ถูกต้อง! [6049]",
        6050: "รางวัลแจ็คพ็อตถูกปิด! [6050]",
        6052: "คุณได้ทำการวางเดิมพันไว้ ไม่สามารถข้ามได้! [6052]",
        6053: "ไพ่ถูกเปิดแล้ว ไม่สามารถข้ามได้! [6053]",
        6054: "เกมรอบใหม่ยังไม่เริ่มต้น ไม่สามารถข้ามได้! [6054]",
        6055: "คุณได้ข้ามไปแล้ว 5 รอบต่อๆ กรุณาวางเดิมพัน [6055]",
        6057: "คนแจกไพ่ไม่อยู่ที่นี่! [6057]",
        6058: "ดำเนินการผิดกฎ. [6058]",
        6059: "ไม่พบโต๊ะเกม [6059]",
        6060: "ภาษาที่ไม่ได้มีการรับรองในระบบ! [6060]",
        6061: "การดำเนินการที่ไม่ถูกต้อง! [6061]",
        6062: "พารามิเตอร์ผิดพลาด! [6062]",
        6063: "ไม่พบฮอลล์เกม โปรดลองเข้าใหม่อีกครั้ง. [6063]",
        6064: "ระบบกำลังปรับปรุง! [6064]",
        6065: "ไม่สามารถหาโต๊ะหรือที่นั่งจำกัดการเดิมพันที่เหมาะสมได้! [6065]",
        6066: "โต๊ะเกมนี้ไม่มีอยู่ในระบบ. [6066]",
        6067: "ไม่พบโต๊ะเกมนี้ โปรดลองเข้าใหม่อีกครั้ง. [6067]",
        6068: "รหัสผ่านผิดพลาด! [6068]",
        6069: "ไม่สามารถเปิดไพ่ได้ หากไม่ได้วางเดิมพัน! [6069]",
        6070: "ล้มเหลว! คุณได้วางเดิมพันเพิ่มเติมในรอบนี้ โปรดลองอีกครั้งภายหลังสิ้นสุดรอบการเดิมพัน. [6070]",
        6071: "คุณไม่มีโต๊ะนี้! [6071]",
        6072: "โต๊ะเกมนี้ที่นั่งเต็มแล้ว โปรดลองวางเดิมพันเพิ่มเติม! [6072]",
        6073: "โต๊ะถูกกำหนดรหัสผ่านโดยเจ้าของ [6073]",
        6074: "คุณไม่ได้วางเดิมพันนานเกินสี่นาที และถูกออกจากโต๊ะเกมอัตโนมัติ({{0}}). [6074]",
        6075: "รหัสเซสชั่นหมดอายุ โปรดย้อนกลับเพื่อลองอีกครั้ง [6075]",
        6076: "รหัสเซสชั่นขัดข้อง [6076]",
        6077: "เซสชั่นนี้ถูกใช้งานแล้ว โปรดย้อนกลับเพื่อลองอีกครั้ง [6077]",
        6078: "You are logged out of the game. [6078]",
        6079: "แพลตฟอร์มอยู่ระหว่างปรับปรุง [6079]",
        6080: "เข้าสู่โต๊ะล้มเหลว โปรดลองใหม่อีกครั้ง [6080]",
        6081: "เลือกโต๊ะสายเฉพาะล้มเหลว โปรดลองใหม่อีกครั้ง [6081]",
        6082: "เนื่องจากบริเวณที่คุณพยายามเข้าสู่ระบบเกมถูกจำกัดการเข้าใช้งาน. [6082]",
        6083: "เดิมพันล้มเหลว. คุณได้ทำการวางเดิมพันแบบมีค่าคอมมิชชั่นในรอบนี้. [6083]",
        6084: "เดิมพันล้มเหลว. คุณได้ทำการวางเดิมพันแบบไม่มีค่าคอมมิชชั่นในรอบนี้. [6084]",
        6085: "ขออภัย แต้มต่อของคุณไม่สามารถ 'จอง' หรือ 'เข้าร่วม' ได้ โปรดลอง [เดิมพันเพิ่มเติม]. [6085]",
        6086: "ทำการเปลี่ยนแปลงรหัสผ่านแล้ว. โปรดเข้าสู่ระบบอีกครั้ง! [6086]",
        6087: "รหัสผ่านใหม่ซ้ำกับรหัสผ่านเดิมไม่ได้ [6087]",
        6088: "You are not allowed to enter this game table according to current VIP handicap. If adjustment on VIP handicap is needed, please contact customer service or your superior agent [6088]",
        6090: "Request timeout [6090]",
        6091: "Login failed [6091]",
        6092: "You are logged out of the game [6092]",
        6093: "Verification code is incorrect. Please try again [6093]",
        6094: "Your free trial has expired (15 minutes), you are logged out of the game [6094]",
        6095: "Verification can be sent once per round only [6095]",
        6096: "Invalid operation [6096]",
        6097: "Incorrect state when performing verification [6097]",
        6098: "Not allowed to bet on pair related field after <number> rounds ",
        6099: "No Red Packet to collect [6099]",
        6100: "Red Packet has been collected already [6100]",
        6101: "Activity has not started yet [6101]",
        6102: "Activity status is illegal [6102]",
        6103: "Not ready to claim rpa [6103]",
        6111: "Player has folded for this round [6111]",
        6112: "Player has checked for this round [6112]",
        6113: "Illegal sub round betting state [6113]",
        6114: "Not in betting state [6114]",
        6115: "Bet on trips is not allowed without ante/blind [6115]",
        6116: "Ante and Blind must be betted together [6116]",
        6117: "Ante and Blind amount must be equal [6117]",
        6118: "Player can only bet on Ante/Blind/Trips in the first round [6118]",
        6119: "Player can only bet on 4x/3x in the second round [6119]",
        6120: "Player can only bet on 2x in the third round [6120]",
        6121: "Player can only bet on 1x in the last round [6121]",
        6122: "Invalid Bet Amount [6122]",
        6123: "Raise is not allowed without ante [6123]",
        6124: "Duplicated raise [6124]",
        6126: "No bet on 6 consecutive game rounds is detected, auto-exited game table. [6126]",
        6200: "Response timeout. Please contact our customer service team. [6200]",
        6201: "Response timeout. Please contact our customer service team. [6201]",
        6202: "Response timeout. Please contact our customer service team. [6202]",
        6203: "Response timeout. Please contact our customer service team. [6203]",
        6204: "Response timeout. Please contact our customer service team. [6204]",
        100001: "Your agent have not enable your mobile login",
        200001: "เกิดข้อผิดพลาด กรุณาติดต่อ CSD เพื่อทราบรายละเอียด ขอบคุณ [1000]",
        200002: "ระบบหมดเวลา กรุณาปิดหน้าต่างเกมปัจจุบันและลองอีกครั้ง [1001]",
        200003: "ระบบหมดเวลา กรุณาปิดหน้าต่างเกมปัจจุบันและลองอีกครั้ง [1002]",
        200004: "เกิดข้อผิดพลาด กรุณาติดต่อ CSD เพื่อทราบรายละเอียด ขอบคุณ [1003]",
        200005: "เกิดข้อผิดพลาด กรุณาติดต่อ CSD เพื่อทราบรายละเอียด ขอบคุณ [1004]",
        200006: "เกิดข้อผิดพลาด กรุณาติดต่อ CSD เพื่อทราบรายละเอียด ขอบคุณ [1005]",
        200007: "เกิดข้อผิดพลาด กรุณาติดต่อ CSD เพื่อทราบรายละเอียด ขอบคุณ [1006]",
        200008: "เกิดข้อผิดพลาด กรุณาติดต่อ CSD เพื่อทราบรายละเอียด ขอบคุณ [1007]",
        200009: "เกิดข้อผิดพลาด กรุณาติดต่อ CSD เพื่อทราบรายละเอียด ขอบคุณ [1008]",
        200011: "บัญชีถูกปิด กรุณาติดต่อเครือข่ายของคุณเพื่อทราบรายละเอียด ขอบคุณ [2002]",
        200012: "เกิดข้อผิดพลาด กรุณาติดต่อ CSD เพื่อทราบรายละเอียด ขอบคุณ [2003]",
        200013: "เกิดข้อผิดพลาด กรุณาติดต่อ CSD เพื่อทราบรายละเอียด ขอบคุณ [3001]",
        200014: "บัญชีของคุณมีเงินไม่เพียงพอ [3002]",
        200015: "เดิมพันของคุณเกินขีดจำกัดที่ตั้งค่าไว้ กรุณาลองอีกครั้ง [3003]",
        200016: "ปิดการใช้งานเกม กรุณาติดต่อเครือข่ายของคุณเพื่อทราบรายละเอียด ขอบคุณ [3004]",
        200017: "เกิดข้อผิดพลาด กรุณาติดต่อ CSD เพื่อทราบรายละเอียด ขอบคุณ [3005]",
        200018: "ชนะวงเงินเพิ่ม! กรุณาติดต่อเครือข่ายของคุณ ขอบคุณ [3006]",
        200019: "แพ้วงเงินเพิ่ม! กรุณาติดต่อเครือข่ายของคุณ ขอบคุณ [3007]",
        200020: "คุณไม่มีการตั้งค่าขีดจำกัดเดิมพันสำหรับเกมนี้ กรุณาติดต่อเครือข่ายของคุณเพื่อดำเนินการ [3008]",
        200021: "วงเงินเดิมพันของคุณมีการเปลี่ยนแปลง กรุณาเข้าสู่ระบบอีกครั้งเพื่อใช้การตั้งค่าใหม่ [3009]",
        200022: "บัญชีถูกระงับ กรุณาติดต่อเครือข่ายของคุณเพื่อทราบรายละเอียด ขอบคุณ [3010]",
        200023: "บัญชีถูกระงับ กรุณาติดต่อเครือข่ายของคุณเพื่อทราบรายละเอียด ขอบคุณ [3013]",
        200024: "ไม่สามารถเล่นเกมได้ในขณะนี้ กรุณาติดต่อ CSD เพื่อทราบรายละเอียด ขอบคุณ [3014]"
    }, error_msg$b = {
        ban: "Your account has been logged in elsewhere. ",
        kick: "Session expired. Please reconnect to the platform!",
        processing_game_bet: "Your bet is being processed, please wait.",
        quitGame: "Press OK to quit game",
        relogin: "Press OK to return to the login page.",
        unknown: "The network is disconnected, press OK to quit game",
        connection: {
            connection_problem: "Press OK to connect back to the game.",
            server_connection_problem: "Press OK to connect back to the game."
        },
        idle: {
            disconnected_reconnect: "Press OK to connect back to the game.",
            disconnected_to_server: "Press OK to connect back to the game."
        }
    }, fast_bet$b = {title: "Fast Bet"}, game_hall$b = {
        banner_more_detail: "View More",
        feature_games: "Feature Games",
        good_roads: "ขอนสวย",
        hot_games: "เกมส์ฮิต / เกมส์ยอดนิยม",
        multi_play: "เล่นหลายโต๊ะ",
        view_all: "View All",
        vip_betlimit: "จำกัดการเดิมพัน",
        vip_enter: "เข้าเกม",
        vip_min_enter: "ยอดคงเหลือขั้นต่ำ",
        vip_occupied: "จองแล้ว",
        vip_reserve: "จองโต๊ะ",
        subtypes: {
            all: "All",
            classic: "แบบดั้งเดิม",
            insurance: "ต่อรอง",
            quick: "บาคาร่าด่วน",
            see: "แบบประมูล",
            sexy: "เซ็กซี่",
            vip: "โต๊ะVIP"
        }
    }, game_rules$b = {
        attention: "Attention",
        game_rules: "กฎของเกมส์",
        introduction: "Introduction",
        payoff: "ผลตอบแทน",
        title: "Help"
    }, game_table$b = {
        balanace: "ยอดคงเหลือ",
        deposit: "ฝาก",
        deposit_short: "D",
        total_bet: "การเดิมพันทั้งหมด ",
        trial: "ทดลอง",
        baccarat: {no_comm: "ไม่มีค่าคอมมิชชั่น"},
        blackjack: {
            all_side_bets: "ALL SIDE BETS",
            ante_first: "PLEASE BET ANTE FIRST",
            banker: "แบงค์เกอร์",
            double: "สองเท่า ",
            hit: "HIT",
            insufficient_insurance: "Not enough balance for insurance",
            insurance: "ต่อรอง?",
            other_decison: "Other players are making decision",
            player: "ผู้เล่น",
            split: "SPLIT",
            stand: "STAND",
            instruction: {
                213: {
                    content: "Win if the combination of the player's initial cards and the dealer's up card form a specific card type.",
                    title: "LUCKY 3"
                },
                label: "INSTRUCTION",
                ante: {
                    content: "Win if the player's hand value is closer to 21 than the dealer's hand and does not exceed 21.",
                    title: "Ante"
                },
                bust: {content: "Win if the dealer busts.", title: "BUST IT"},
                hot3: {
                    content: "Win if the card value of the player's initial cards and the dealer's up card total 19 - 21.",
                    title: "HOT 3"
                },
                lucky_ladies: {
                    content: "Win if the player's initial cards formed a specific card type.",
                    title: "LUCKY LADIES"
                },
                pair: {content: "Win if the player's initial cards are pair.", title: "คู่ไหนก็ได้"}
            }
        },
        bullbull: {
            banker: "แบงค์เกอร์",
            banker_allwin: "BANKER ALL WIN",
            first_card: "FIRST CARD",
            player_allwin: "PLAYER ALL WIN"
        },
        casino_war: {
            "1st_tie": "เสมอลำดับที่ 1",
            "2nd_tie": "เสมอลำดับที่ 2",
            banker: "แบงค์เกอร์",
            decision: "MAKE YOUR DECISION",
            player_1: "ผู้เล่น 1",
            player_2: "ผู้เล่น 2",
            player_3: "ผู้เล่น 3",
            surrender: "ยอมแพ้"
        },
        fpc: {any_two_dice: "ANY TWO DICE", both_one_dice: "BOTH ONE DICE"},
        roulette: {orphelins: "orphelins", tier: "tier", voisins: "voisins", zero: "ศูนย์"},
        seecard: {other_squeezing: "Other players are squeezing cards"},
        teen_patti: {pair_plus: "คู่+"},
        uth: {
            banker: "แบงค์เกอร์",
            community: "COMMUNITY",
            decision: "MAKE YOUR DECISION",
            play: "เล่น",
            player_1: "ผู้เล่น 1",
            player_1_short: "P1",
            player_2: "ผู้เล่น 2",
            player_2_short: "P2",
            player_3: "ผู้เล่น 3",
            player_3_short: "P3",
            raise1x: "RAISE 1x",
            raise2x: "RAISE 2x",
            raise3x: "RAISE 3x",
            raise4x: "RAISE 4x"
        },
        vip: {
            owner_squeezing: "Owner is squeezing cards",
            owner_tooltip: "OWNER",
            reserve_action_tooltip: "จองโต๊ะ",
            reserve_betlimit: "จำกัดการเดิมพัน",
            reserve_min_enter: "ยอดคงเหลือขั้นต่ำ",
            reserve_request: "Table reserved. You will be the owner next round.",
            reserved_tooltip: "จองโต๊ะ",
            shuffle_request: "คำขอสับไพ่ของคุณได้ถูกส่งเรียบร้อย การสับไพ่จะเริ่มภายในห้านาที",
            shuffle_tooltip: "สับไพ่",
            skip_tooltip: "ข้าม",
            start_tooltip: "Start"
        }
    }, game_types$b = {
        101: "บาคาร่า",
        102: "VIP Baccarat (Legacy)",
        103: "บาคาร่ารวดเร็ว",
        104: "บาคาร่าเปิดไพ่",
        110: "ต่อรอง บาคาร่า",
        111: "VIP บาคาร่า",
        201: "ซิก โบ",
        202: "น้ำเต้าปูปลา",
        203: "Xoc Dia",
        301: "ดราก้อน ไทเกอร์",
        401: "รูเล็ต",
        501: "คลาสสิกป๊อกเด้ง",
        602: "อันดาร์ บาฮาร์",
        603: "ทีน แพตตี 20-20",
        702: "อัลติเมท เท็กซัส โฮลเอ็ม",
        703: "คาสิโน วอร์",
        704: "อินฟินิท แบล็คแจ็ค",
        801: "บูล บูล",
        901: "ไพ่ 3 ใบ",
        "201_Alt": "ไฮโล",
        "201_Alt_2": "Sic Tan",
        "501_Alt": "สองฝั่งป๊อกเด้ง",
        "901_Alt": "สามภาพ",
        "901_Alt_2": "ทีน แพตตี 20-20",
        arcadeGame: "Casino Game",
        card_game: "เกมส์ไพ่",
        cardGame: "เกมส์ไพ่",
        classic: "แบบดั้งเดิม",
        fishingGame: "เอบี ฟิชชิง",
        game_hall: "Lobby",
        multi_hall: "เล่นหลายโต๊ะ",
        sexy: "เซ็กซี่",
        slotGame: "Slot Game",
        UTH_Short: "อัลติเมท เท็กซัส โฮลเอ็ม"
    }, gamehall_table$b = {
        maintaining: "Mการบำรุงรักษา",
        notable: "No table available",
        good_road: {
            100: "แบงเกอร์ยาว",
            101: "มังกรแบ้งเกอร์",
            102: "ปิงปอง",
            103: "One P Two B",
            104: "One B Two P",
            105: "Patted eat",
            106: "B across P",
            107: "P across B",
            108: "Separated B",
            109: "Separated P"
        }
    }, header$b = {
        bet_record: "ประวัติเดิมพัน",
        card_game: "AB FISHING",
        exitfullscreen: "Exit Fullscreen",
        fullscreen: "Fullscreen",
        hot_games: "LOBBY",
        live_games: "LIVE GAMES",
        logout: "ออกจากระบบ",
        multi_table: "MULTIPLAY",
        profile: "โปรไฟล์",
        services: "Services",
        Version: "Version"
    }, login$b = {free_trial: "ทดลองเล่นฟรี", login: "เข้าสู่ระบบ", password: "รหัสผ่าน", username: "ชื่อผู้ใช้"},
    menu$b = {
        addToHomeScreenForIOS: "ADD TO      HOME SCREEN",
        back: "BACK TO LOBBY",
        downloadApp: "Download APP",
        exitfullscreen: "EXIT FULLSCREEN",
        fast_bet: "FAST BET",
        fullscreen: "Fullscreen",
        guide: "HELP",
        history: "ประวัติเดิมพัน",
        installation_instruction: "Instruction",
        installPwa: "INSTALL",
        lobby: "Lobby",
        loginApp: "Login APP",
        payout: "การจ่ายเงิน",
        settings: "ตั้งค่า",
        title: "Menu",
        verification: "VERIFY",
        video: "RELOAD"
    }, messages$b = {
        all_in: "ALL IN",
        bet_success: "การเดิมพันที่ยืนยันแล้ว",
        cancel: "ยกเลิก",
        game_table_verified: "Verification has been sent, please check the verificaiton result on the screen",
        idle_video: "VIDEO PAUSED DUE TO INACTIVITY. PRESS OK TO RESUME",
        insufficient_bet_balance: "เครดิตไม่เพียงพอ",
        insufficient_vip_balance: "จำนวนเงินไม่เพียงพอ",
        landscape_block: "Rotate your mobile device for best experience",
        loading: "LOADING",
        logout: "Are you sure you want to logout ",
        logoutOK: "ออกจากระบบ",
        lost: "YOU LOST",
        multi_side_hall_filter: "Filter cannot be empty, please select at least one game type.",
        nickname_success: "Nickname updated!",
        ok_button: "ตกลง",
        screen_size_block: "กรุณาปรับขนาดหน้าต่างเพื่อประสบการณ์ที่ดีที่สุด",
        table_not_found: "Game table is not found",
        table_under_maintenance: "โต๊ะเกมกำลังอยู่ในระหว่างปรับปรุง",
        won: "YOU WON"
    }, payout$b = {
        bet: "เดิมพัน", bet_limit: "จำกัดการเดิมพัน", odds: "อัตราต่อรอง", payout: "การจ่ายเงิน", bet_type: {
            1001: "แบงค์เกอร์",
            1002: "เพลเยอร์",
            1003: "เสมอ",
            1006: "คู่เจ้ามือ",
            1007: "คู่ผู้เล่น",
            1011: "แบงค์เกอร์ (ไม่มีค่าคอมมิชชั่น)",
            1100: "ลัคกี้ 6",
            1211: "แบงเกอร์ได้ป็อก",
            1212: "ผู้เล่นได้ป็อก",
            1223: "คู่ไหนก็ได้",
            1224: "คู่สมบูรณ์แบบ",
            1231: "แบงค์เกอร์   โบนัสมังกร",
            1232: "เพลเยอร์     โบนัสมังกร",
            1401: "เสือ",
            1402: "เสือใหญ่",
            1403: "เสือเล็ก",
            1404: "เสือเสมอ",
            1405: "คู่เสือ",
            1501: "แบ้งเกอร์ ชนะด้วย 4แต้ม",
            1502: "เพลเยอร์ ชนะด้วย 4แต้ม",
            1503: "แบ้งเกอร์คู่พิเศษ",
            1504: "เพลเยอร์คู่พิเศษ",
            1601: "แบงค์เกอร์ดำ",
            1602: "แบงเกอร์แดง",
            1603: "เพลเยอร์ดำ",
            1604: "เพลเยอร์แดง",
            1605: "6 ตัวใดก็ได้",
            2001: "มังกร",
            2002: "เสือ",
            2003: "เสมอ",
            3001: "BIG / SMALL",
            3002: "EVEN / ODD",
            3005: "พิเศษสามเท่า",
            3011: "สามเท่าใดๆ",
            3012: "คู่ที่เฉพาะเจาะจง",
            3018: "ผลรวม 4/17",
            3019: "ผลรวม 5/16",
            3020: "ผลรวม 6/15",
            3021: "ผลรวม 7/14",
            3022: "ผลรวม 8/13",
            3023: "ผลรวม 9/10/11/12",
            3033: "TWO DICE COMBINATION",
            3048: "ONE DICE",
            3049: "TWO DICE",
            3050: "THREE DICE",
            3200: "สูง",
            3201: "ต่ำ",
            3202: "11 สูง-ต่ำ",
            3203: "ลูกเต๋า 1-6",
            3209: "TWO DICE COMBINATION",
            3224: "1 ต่ำ",
            3225: "2 ต่ำ",
            3226: "3 - ต่ำ",
            3227: "4 - ต่ำ",
            3228: "5 - 6 ต่ำ",
            3230: "3 - 4 สูง",
            3232: "5-สูง",
            3233: "6-สูง",
            3234: "THREE DICE COMBINATION",
            3301: "MAIN SYMBOL",
            3307: "SPECIFIC SINGLE COLOR",
            3310: "SPECIFIC DOUBLE COLOR",
            3313: "SPECIFIC TRIPOLE COLOR",
            3316: "ANY TRIPLE COLOR",
            3317: "TWO DICE COMBINATION",
            3401: "ODD / EVEN",
            3403: "FAN",
            3407: "NIM",
            3419: "NGA",
            3431: "SSH",
            3435: "12 KWOK / 23 KWOK / 34 KWOK",
            3438: "41 KWOK",
            3500: "เสมอ",
            3501: "ต่ำ",
            3502: "สูง",
            3503: "คี่",
            3504: "คู่",
            3505: "0",
            3506: "1",
            3507: "3",
            3508: "4",
            4001: "BIG / SMALL",
            4002: "ODD / EVEN",
            4003: "RED / BLACK",
            4007: "1 โหล",
            4010: "COLUMN",
            4013: "สเตรท",
            4050: "สามตัวเลข",
            4052: "เดิมพัน สี่",
            4053: "เดิมพันแยก",
            4113: "เดิมพันมุม",
            4135: "ถนน",
            4147: "Line",
            5001: "PLAYER 1-5",
            5011: "PLAYER 1-5 PAIR",
            5101: "PLAYER 1-5",
            5106: "BANKER 1-5",
            5111: "คู่นายธนาคาร",
            6201: "อันดาร์",
            6202: "บาฮาร์",
            6203: "ไพ่ 1-5",
            6204: "ไพ่ 6-10",
            6205: "ไพ่ 11-15",
            6206: "ไพ่ 16-25",
            6207: "ไพ่ 26-30",
            6208: "ไพ่ 31-35",
            6209: "ไพ่ 36-40",
            6210: "ไพ่ 41+",
            6211: "อันดับหนึ่งของอันดาร์",
            6212: "อันดับหนึ่งของบาฮาร์",
            6301: "ผู้เล่น A",
            6302: "ผู้เล่น B",
            6303: "เสมอ",
            6304: "PLAYER A PAIR PLUS",
            6305: "PLAYER B PAIR PLUS",
            6306: "โบนัส ไพ่ 6 ใบ",
            7201: "PLAYER 1 - 3 ANTE",
            7202: "PLAYER 1 - 3 BLIND",
            7203: "PLAYER 1 - 3 TRIPS",
            7301: "PLAYER 1 - 3 ANTE",
            7302: "PLAYER 1 - 3 1ST TIE",
            7304: "PLAYER 1 - 3 2ND TIE",
            7401: "ANTE",
            7404: "คู่ไหนก็ได้",
            7405: "Lucky 3",
            7406: "HOT 3",
            7407: "BUST IT",
            7409: "LUCKY LADIES",
            8001: "แบงค์เกอร์ 1",
            8002: "แบงค์เกอร์ 2",
            8003: "แบงค์เกอร์ 3",
            8011: "แบงค์เกอร์ 1",
            8012: "แบงค์เกอร์ 2",
            8013: "แบงค์เกอร์ 3",
            8021: "แบงค์เกอร์ 1",
            8022: "แบงค์เกอร์ 2",
            8023: "แบงค์เกอร์ 3",
            8101: "ผู้เล่น 1",
            8102: "ผู้เล่น 2",
            8103: "ผู้เล่น 3",
            8111: "ผู้เล่น 1",
            8112: "ผู้เล่น 2",
            8113: "ผู้เล่น 3",
            8121: "ผู้เล่น 1",
            8122: "ผู้เล่น 2",
            8123: "ผู้เล่น 3",
            9001: "มังกร",
            9002: "ฟีนิกซ์",
            9003: "PAIR 8+",
            9004: "สเตรท",
            9005: "ฟลัช ",
            9006: "สเตรทฟลัช ",
            9007: "ตอง",
            9101: "มังกร",
            9102: "ฟีนิกซ์",
            9103: "เสมอ",
            9114: "DRAGON 3 PICTURES",
            9124: "PHOENIX 3 PICTURES"
        }
    }, profile$b = {
        save: "Save",
        title: "โปรไฟล์",
        main_view: {change_password: "เปลี่ยนรหัสผ่าน?", nickname: "ชื่อเล่น", pending: "กำลังตัดสินใจ"},
        password_view: {
            confirm_password: "ยืนยันรหัสผ่านใหม่",
            current_password: "Current Password",
            hints: "* Please enter alphanumeric string of 6-10 characters",
            new_password: "รหัสผ่านใหม่"
        }
    }, roadmap$b = {
        analysis: "ANALYSIS",
        history: "HISTORY",
        last_10_rounds: "LAST 10 ROUNDS",
        last_50_rounds: "50 รอบสุดท้าย",
        last_6_rounds: "LAST 6 ROUNDS",
        round_num: "Round #",
        statistics: "STATISTICS",
        andar_bahar: {andar: "อันดาร์", bahar: "บาฮาร์"},
        baccarat: {banker: "B", player: "P", predict_banker: "Predict Banker", predict_player: "Predict Player", tie: "T"},
        bull_bull: {
            game_hall: {
                0: "NB",
                1: "B1",
                2: "B2",
                3: "B3",
                4: "B4",
                5: "B5",
                6: "B6",
                7: "B7",
                8: "B8",
                9: "B9",
                A: "BB",
                B: "5D",
                banker: "B",
                player_1: "P1",
                player_2: "P2",
                player_3: "P3"
            },
            game_table: {
                0: "ไม่มีวัว",
                1: "Bull 1",
                2: "Bull 2",
                3: "Bull 3",
                4: "Bull 4",
                5: "Bull 5",
                6: "Bull 6",
                7: "Bull 7",
                8: "Bull 8",
                9: "Bull 9",
                A: "วัววัว",
                B: "5 เซียน",
                banker: "แบงค์เกอร์",
                player_1: "ผู้เล่น 1",
                player_2: "ผู้เล่น 2",
                player_3: "ผู้เล่น 3"
            }
        },
        casino_war: {banker: "B", player_1: "P1", player_2: "P2", player_3: "P3"},
        dragon_tiger: {dragon: "D", predict_dragon: "Predict Dragon", predict_tiger: "Predict Tiger", tie: "T", tiger: "T"},
        hi_lo: {hi: "สูง", hi_lo: "11", lo: "ต่ำ"},
        pokdeng: {banker: "เจ้ามือ", player_1: "P1", player_2: "P2", player_3: "P3", player_4: "P4", player_5: "P5"},
        roulette: {hot_cold: "HOT & COLD"},
        sicbo: {big: "สูง", small: "ต่ำ", triple: "เลขตอง"},
        sictan: {even: "คู่", fan_1: "1 FAN", fan_2: "2 FAN", fan_3: "3 FAN", fan_4: "4 FAN", odd: "คี่"},
        teen_patti: {
            235: "235",
            flush: "ฟลัช ",
            four_of_a_kind: "โฟร์การ์ด",
            full_house: "ฟูลเฮ้าส์",
            high_card: "ไพ่สูง",
            pair: "เสมอ",
            pair_plus: "PAIR+",
            player_a: "A",
            player_b: "B",
            royal_flush: "รอยัลฟลัช",
            straight: "สเตรท",
            straight_flush: "สเตรทฟลัช ",
            three_of_a_kind: "ตอง",
            tie: "เสมอ"
        },
        three_pictures: {
            double_pictures: "DP",
            dragon: "D",
            phoenix: "P",
            single_picture: "SP",
            tie: "T",
            triple_pictures: "3P"
        },
        win3cards: {
            235: "235",
            dragon: "D",
            flush: "ฟลัช ",
            high_card: "ไพ่สูง",
            "p8+": "P8",
            pair: "เสมอ",
            phoenix: "P",
            straight: "สเตรท",
            straight_flush: "สเตรทฟลัช ",
            three_of_a_kind: "ตอง",
            tie: "เสมอ"
        },
        xocdia: {even: "คู่", odd: "คี่", tie: "เสมอ", big: "สูง", small: "ต่ำ", o: "O", e: "E"}
    }, settings$b = {
        title: "ตั้งค่า",
        bullbull: {
            double: "สองเท่า ",
            equal: "เท่ากัน",
            play_type: "ประเภทการเดิมพัน",
            play_type_multiplay: "Bet Type (Bull Bull)",
            super: "SuperBull"
        },
        general: {
            confirmed_bet_amounts: "Confirmed Bet Amounts",
            languages: "ภาษา",
            side_bets: "Side Bets",
            statistics: "Betting Statistics",
            title: "Display"
        },
        scorecards: {classic: "แบบดั้งเดิม", immersive: "Immersive", title: "Scorecards"},
        sound: {live: "เสียงสด", system: "System Sound", title: "Sound"}
    }, side_hall_filter$b = {
        101: "บาคาร่า",
        103: "บาคาร่าด่วน",
        104: "แบบประมูล",
        110: "ต่อรอง",
        111: "โต๊ะVIP",
        201: "ซิก โบ",
        202: "น้ำเต้าปูปลา",
        203: "Xoc Dia",
        301: "ดราก้อน ไทเกอร์",
        401: "รูเล็ต",
        501: "คลาสสิกป๊อกเด้ง",
        602: "อันดาร์ บาฮาร์",
        603: "ทีน แพตตี 20-20",
        801: "บูล บูล",
        901: "ไพ่ 3 ใบ",
        "201_Alt": "ไฮโล",
        "201_Alt_2": "Sic Tan",
        "501_Alt": "สองฝั่งป๊อกเด้ง",
        "901_Alt": "สามภาพ",
        "901_Alt_2": "ทีน แพตตี 20-20",
        asia: "เกมเอเชีย",
        baccarat: "บาคาร่า",
        classic: "แบบดั้งเดิม",
        europe: "เกมยุโรป",
        global: "เกมทั่วโลก",
        other: "เกมอื่นๆ",
        sexy: "เซ็กซี่"
    }, thai = {
        baccarat_gameplay: baccarat_gameplay$b,
        bet_record: bet_record$b,
        bet_type: bet_type$b,
        custom_chips: custom_chips$b,
        detailed_bet_type: detailed_bet_type$b,
        error_code: error_code$b,
        error_msg: error_msg$b,
        fast_bet: fast_bet$b,
        game_hall: game_hall$b,
        game_rules: game_rules$b,
        game_table: game_table$b,
        game_types: game_types$b,
        gamehall_table: gamehall_table$b,
        header: header$b,
        login: login$b,
        menu: menu$b,
        messages: messages$b,
        payout: payout$b,
        profile: profile$b,
        roadmap: roadmap$b,
        settings: settings$b,
        side_hall_filter: side_hall_filter$b
    }, baccarat_gameplay$a = {
        basic: "Basic",
        default: "Default",
        fabulous_4: "Fabulous 4",
        natural: "Natural Lucky 6",
        super: "Super Baccarat",
        switch: "Switch Gameplay",
        tiger: "Tiger"
    }, bet_record$a = {
        bet_amount: "Bet Amount",
        bet_type: "Bet Type",
        betting_number: "Betting Number",
        date_time: "Date & Time",
        game: "Game",
        game_type: "Game Type",
        gameround_id: "Gameround ID",
        loading: "Loading",
        next: "Next",
        no_video: "Please note that this round of the game is invaild, and live video will not be displayed.",
        previous: "Previous",
        shoe_round: "Shoe-Round",
        status: "Status",
        table_number: "Table Number",
        total_bet: "Total Bet",
        valid_bet: "Valid Bet",
        win_loss: "Win/Loss",
        bet_status: {100: "Betting", 101: "Failed", 110: "Not Settled", 111: "Settled", 120: "Refund"},
        title: {details: "Details", records: "Bet Records"}
    }, bet_type$a = {
        1001: "BANKER",
        1002: "PLAYER",
        1003: "TIE",
        1006: "B PAIR",
        1007: "P PAIR",
        1011: "BANKER",
        1100: "LUCKY 6",
        1211: "BANKER NATURAL",
        1212: "PLAYER NATURAL",
        1223: "EITHER PAIR",
        1224: "PERFECT PAIR",
        1231: "B BONUS",
        1232: "P BONUS",
        1301: "INSURANCE",
        1302: "INSURANCE",
        1303: "INSURANCE",
        1304: "INSURANCE",
        1401: "TIGER",
        1402: "SMALL TIGER",
        1403: "BIG TIGER",
        1404: "TIGER PAIR",
        1405: "TIGER TIE",
        1501: "BANKER FABULOUS 4",
        1502: "PLAYER FABULOUS 4",
        1503: "BANKER PRECIOUS PAIR",
        1504: "PLAYER PRECIOUS PAIR",
        1601: "BANKER BLACK",
        1602: "BANKER RED",
        1603: "PLAYER BLACK",
        1604: "PLAYER RED",
        1605: "ANY 6",
        2001: "DRAGON",
        2002: "TIGER",
        2003: "TIE",
        3001: "SMALL",
        3002: "ODD",
        3003: "EVEN",
        3004: "BIG",
        3011: "ANY TRIPLE",
        3048: "ONE",
        3049: "TWO",
        3050: "THREE",
        3051: "FOUR",
        3052: "FIVE",
        3053: "SIX",
        3200: "HI",
        3201: "LO",
        3225: "LO",
        3227: "LO",
        3228: "LO",
        3229: "LO",
        3230: "HI",
        3232: "HI",
        3401: "ODD",
        3402: "EVEN",
        3403: "1 FAN",
        3404: "2 FAN",
        3405: "3 FAN",
        3406: "4 FAN",
        3407: "1NIM2",
        3408: "1NIM3",
        3409: "1NIM4",
        3410: "2NIM1",
        3411: "2NIM3",
        3412: "2NIM4",
        3413: "3NIM1",
        3414: "3NIM2",
        3415: "3NIM4",
        3416: "4NIM1",
        3417: "4NIM2",
        3418: "4NIM3",
        3419: "23ONE NGA",
        3420: "24ONE NGA",
        3421: "34ONE NGA",
        3422: "13TWO NGA",
        3423: "14TWO NGA",
        3424: "34TWO NGA",
        3425: "12THREE NGA",
        3426: "14THREE NGA",
        3427: "24THREE NGA",
        3428: "13FOUR NGA",
        3429: "12FOUR NGA",
        3430: "23FOUR NGA",
        3431: "SSH123",
        3432: "SSH124",
        3433: "SSH134",
        3434: "SSH234",
        3435: "KWOK12",
        3436: "KWOK23",
        3437: "KWOK34",
        3438: "KWOK41",
        3500: "TIE",
        3501: "SMALL",
        3502: "BIG",
        3503: "ODD",
        3504: "EVEN",
        4001: "1 - 18",
        4002: "EVEN",
        4005: "ODD",
        4006: "19 - 36",
        4007: "ST",
        4008: "ND",
        4009: "RD",
        4010: "",
        4011: "",
        4012: "",
        5001: "P1",
        5002: "P2",
        5003: "P3",
        5004: "P4",
        5005: "P5",
        5011: "P1 Pair",
        5012: "P2 Pair",
        5013: "P3 Pair",
        5014: "P4 Pair",
        5015: "P5 Pair",
        5101: "P1",
        5102: "P2",
        5103: "P3",
        5104: "P4",
        5105: "P5",
        5106: "B1",
        5107: "B2",
        5108: "B3",
        5109: "B4",
        5110: "B5",
        5111: "BP",
        6201: "ANDAR",
        6202: "BAHAR",
        6203: "1-5",
        6204: "6-10",
        6205: "11-15",
        6206: "16-25",
        6207: "26-30",
        6208: "31-35",
        6209: "36-40",
        6210: "41+",
        6211: "<span>1</span>st ANDAR",
        6212: "<span>1</span>st BAHAR",
        6301: "PLAYER A",
        6302: "PLAYER B",
        6303: "TIE",
        6304: "PLAYER A PAIR+",
        6305: "PLAYER B PAIR+",
        6306: "6 CARD BONUS",
        7201: "ANTE",
        7202: "BLIND",
        7203: "TRIPS",
        7204: "RAISE 4x",
        7205: "RAISE 3x",
        7206: "RAISE 2x",
        7207: "RAISE 1x",
        7211: "ANTE",
        7212: "BLIND",
        7213: "TRIPS",
        7214: "RAISE 4x",
        7215: "RAISE 3x",
        7216: "RAISE 2x",
        7217: "RAISE 1x",
        7221: "ANTE",
        7222: "BLIND",
        7223: "TRIPS",
        7224: "RAISE 4x",
        7225: "RAISE 3x",
        7226: "RAISE 2x",
        7227: "RAISE 1x",
        7301: "ANTE",
        7302: "TIE",
        7303: "WAR",
        7304: "2ND TIE",
        7311: "ANTE",
        7312: "TIE",
        7313: "WAR",
        7314: "2ND TIE",
        7321: "ANTE",
        7322: "TIE",
        7323: "WAR",
        7324: "2ND TIE",
        7401: "ANTE",
        7402: "ANTE DOUBLE",
        7403: "SPLIT",
        7404: "PAIR",
        7405: "Lucky 3",
        7406: "HOT 3",
        7407: "BUST IT",
        7408: "INSURANCE",
        7409: "LUCKY LADIES",
        8001: "BANKER 1",
        8002: "BANKER 2",
        8003: "BANKER 3",
        8011: "BANKER 1",
        8012: "BANKER 2",
        8013: "BANKER 3",
        8021: "BANKER 1",
        8022: "BANKER 2",
        8023: "BANKER 3",
        8101: "PLAYER 1",
        8102: "PLAYER 2",
        8103: "PLAYER 3",
        8111: "PLAYER 1",
        8112: "PLAYER 2",
        8113: "PLAYER 3",
        8121: "PLAYER 1",
        8122: "PLAYER 2",
        8123: "PLAYER 3",
        9001: "DRAGON",
        9002: "PHOENIX",
        9003: "PAIR 8 PLUS",
        9004: "STRAIGHT",
        9005: "FLUSH",
        9006: "STRAIGHT FLUSH",
        9007: "THREE OF A KIND",
        9101: "DRAGON",
        9102: "PHOENIX",
        9103: "TIE",
        9114: "DRAGON THREE PICTURES",
        9124: "PHOENIX THREE PICTURES",
        tips: {
            6306: "Royal Flush/Straight Flush/Four of a Kind/Full House/Flush/Straight/Three of a Kind",
            9003: "Contains Pair 9 - Pair A / Straight / Flush / Straight Flush / Three of a Kind",
            banker_insurance: "Betting on Banker Insurance",
            bullbull_firstcard: "First Card",
            cards_dealt: "Cards Dealt",
            check: "CHECK",
            checked: "YOU CHECKED",
            comm_betted: "You have placed bets on Commission in this round",
            double_text: "TWO DICE",
            fold: "FOLD",
            folded: "YOU FOLDED",
            house_card: "HOUSE",
            lose: "YOU LOSE",
            no_bet_after: "After the %1th game round in every shoe, no betting are allowed on %2.",
            no_comm_betted: "You have placed bets on No-Commission in this round.",
            no_pairs: "After the 50th game round in every shoe, no betting are allowed on Pairs.",
            player_1: "PLAYER 1",
            player_2: "PLAYER 2",
            player_3: "PLAYER 3",
            player_insurance: "Betting on Player Insurance",
            raised: "YOU RAISED",
            single_text: "ONE DICE",
            surrender: "SURRENDER",
            tie: "YOU TIE",
            triple_text: "THREE DICE",
            war: "GO TO WAR",
            win: "YOU WIN"
        }
    }, custom_chips$a = {
        chip_value_exists: "This chip value already exists. Please try another value.",
        choose_common_chips: "Choose Common Chips",
        custom_chips_value: "Custom Chips Value",
        min_chip_count: "Please choose at least 5 chips.",
        min_chip_value: "The minimum allowable chip value is",
        select_all: "Select All",
        title: "Custom Chips"
    }, detailed_bet_type$a = {
        1001: "Banker",
        1002: "Player",
        1003: "Tie",
        1006: "Banker Pair",
        1007: "Player Pair",
        1011: "Banker (No Comm)",
        1100: "Lucky 6",
        1211: "Banker Natural",
        1212: "Player Natural",
        1223: "Either Pair",
        1224: "Perfect Pair",
        1231: "Banker Bonus",
        1232: "Player Bonus",
        1301: "Banker Insurance 1",
        1302: "Banker Insurance 2",
        1303: "Player Insurance 1",
        1304: "Player Insurance 2",
        1401: "Tiger",
        1402: "Small Tiger",
        1403: "Big Tiger",
        1404: "Tiger Pair",
        1405: "Tiger Tie",
        1501: "Banker Fabulous 4",
        1502: "Player Fabulous 4",
        1503: "Banker Precious Pair",
        1504: "Player Precious Pair",
        1601: "Banker Black",
        1602: "Banker Red",
        1603: "Player Black",
        1604: "Player Red",
        1605: "Any 6",
        2001: "Dragon",
        2002: "Tiger",
        2003: "Tie",
        3001: "Small",
        3002: "Odd",
        3003: "Even",
        3004: "Big",
        3005: "Triple 1",
        3006: "Triple 2",
        3007: "Triple 3",
        3008: "Triple 4",
        3009: "Triple 5",
        3010: "Triple 6",
        3011: "Any Triple",
        3012: "Double 1",
        3013: "Double 2",
        3014: "Double 3",
        3015: "Double 4",
        3016: "Double 5",
        3017: "Double 6",
        3018: "Sum 4",
        3019: "Sum 5",
        3020: "Sum 6",
        3021: "Sum 7",
        3022: "Sum 8",
        3023: "Sum 9",
        3024: "Sum 10",
        3025: "Sum 11",
        3026: "Sum 12",
        3027: "Sum 13",
        3028: "Sum 14",
        3029: "Sum 15",
        3030: "Sum 16",
        3031: "Sum 17",
        3033: "Two Dice 1,2",
        3034: "Two Dice 1,3",
        3035: "Two Dice 1,4",
        3036: "Two Dice 1,5",
        3037: "Two Dice 1,6",
        3038: "Two Dice 2,3",
        3039: "Two Dice 2,4",
        3040: "Two Dice 2,5",
        3041: "Two Dice 2,6",
        3042: "Two Dice 3,4",
        3043: "Two Dice 3,5",
        3044: "Two Dice 3,6",
        3045: "Two Dice 4,5",
        3046: "Two Dice 4,6",
        3047: "Two Dice 5,6",
        3048: "Dice 1",
        3049: "Dice 2",
        3050: "Dice 3",
        3051: "Dice 4",
        3052: "Dice 5",
        3053: "Dice 6",
        3200: "Hi",
        3201: "Lo",
        3202: "11 Hi-Lo",
        3203: "Dice 1",
        3204: "Dice 2",
        3205: "Dice 3",
        3206: "Dice 4",
        3207: "Dice 5",
        3208: "Dice 6",
        3209: "HiLo 1-2",
        3210: "HiLo 1-3",
        3211: "HiLo 1-4",
        3212: "HiLo 1-5",
        3213: "HiLo 1-6",
        3214: "HiLo 2-3",
        3215: "HiLo 2-4",
        3216: "HiLo 2-5",
        3217: "HiLo 2-6",
        3218: "HiLo 3-4",
        3219: "HiLo 3-5",
        3220: "HiLo 3-6",
        3221: "HiLo 4-5",
        3222: "HiLo 4-6",
        3223: "HiLo 5-6",
        3224: "1-Lo",
        3225: "2-Lo",
        3226: "3-Lo",
        3227: "4-Lo",
        3228: "5-Lo",
        3229: "6-Lo",
        3230: "3-Hi",
        3231: "4-Hi",
        3232: "5-Hi",
        3233: "6-Hi",
        3234: "1,2,3",
        3235: "2,3,4",
        3236: "3,4,5",
        3237: "4,5,6",
        3301: "Fish",
        3302: "Prawn",
        3303: "Calabash",
        3304: "Coin",
        3305: "Crab",
        3306: "Cock",
        3307: "Specific Single Red",
        3308: "Specific Single Green",
        3309: "Specific Single Blue",
        3310: "Specific Double Red",
        3311: "Specific Double Green",
        3312: "Specific Double Blue",
        3313: "Specific Triple Red",
        3314: "Specific Triple Green",
        3315: "Specific Triple Blue",
        3316: "Any Triple Color",
        3317: "Calabash & Prawn",
        3318: "Calabash & Fish",
        3319: "Calabash & Cock",
        3320: "Calabash & Crab",
        3321: "Calabash & Coin",
        3322: "Prawn & Fish",
        3323: "Prawn & Cock",
        3324: "Prawn & Crab",
        3325: "Prawn & Coin",
        3326: "Fish & Cock",
        3327: "Fish & Crab",
        3328: "Fish & Coin",
        3329: "Cock & Crab",
        3330: "Cock & Coin",
        3331: "Crab & Coin",
        3401: "Odd",
        3402: "Even",
        3403: "1Fan",
        3404: "2Fan",
        3405: "3Fan",
        3406: "4Fan",
        3407: "1Nim2",
        3408: "1Nim3",
        3409: "1Nim4",
        3410: "2Nim1",
        3411: "2Nim3",
        3412: "2Nim4",
        3413: "3Nim1",
        3414: "3Nim2",
        3415: "3Nim4",
        3416: "4Nim1",
        3417: "4Nim2",
        3418: "4Nim3",
        3419: "23 One Nga",
        3420: "24 One Nga",
        3421: "34 One Nga",
        3422: "13 Two Nga",
        3423: "14 Two Nga",
        3424: "34 Two Nga",
        3425: "12 Three Nga",
        3426: "14 Three Nga",
        3427: "24 Three Nga",
        3428: "13 Four Nga",
        3429: "12 Four Nga",
        3430: "23 Four Nga",
        3431: "SSH 123",
        3432: "SSH 124",
        3433: "SSH 134",
        3434: "SSH 234",
        3435: "12 Kwok",
        3436: "23 Kwok",
        3437: "34 Kwok",
        3438: "41 Kwok",
        3500: "TIE",
        3501: "SMALL",
        3502: "BIG",
        3503: "ODD",
        3504: "EVEN",
        3505: "0",
        3506: "1",
        3507: "3",
        3508: "4",
        4001: "1 - 18",
        4002: "Even",
        4003: "Red",
        4004: "Black",
        4005: "Odd",
        4006: "19 - 36",
        4007: "1st Dozen",
        4008: "2nd Dozen",
        4009: "3rd Dozen",
        4010: "1st Column",
        4011: "2nd Column",
        4012: "3rd Column",
        4013: "Straight 0",
        4014: "Straight 1",
        4015: "Straight 2",
        4016: "Straight 3",
        4017: "Straight 4",
        4018: "Straight 5",
        4019: "Straight 6",
        4020: "Straight 7",
        4021: "Straight 8",
        4022: "Straight 9",
        4023: "Straight 10",
        4024: "Straight 11",
        4025: "Straight 12",
        4026: "Straight 13",
        4027: "Straight 14",
        4028: "Straight 15",
        4029: "Straight 16",
        4030: "Straight 17",
        4031: "Straight 18",
        4032: "Straight 19",
        4033: "Straight 20",
        4034: "Straight 21",
        4035: "Straight 22",
        4036: "Straight 23",
        4037: "Straight 24",
        4038: "Straight 25",
        4039: "Straight 26",
        4040: "Straight 27",
        4041: "Straight 28",
        4042: "Straight 29",
        4043: "Straight 30",
        4044: "Straight 31",
        4045: "Straight 32",
        4046: "Straight 33",
        4047: "Straight 34",
        4048: "Straight 35",
        4049: "Straight 36",
        4050: "Three Numbers 0/1/2",
        4051: "Three Numbers 0/2/3",
        4052: "Four Numbers 0/1/2/3",
        4053: "Seperate(0/1)",
        4054: "Seperate(0/2)",
        4055: "Seperate(0/3)",
        4056: "Seperate(1/2)",
        4057: "Seperate(2/3)",
        4058: "Seperate(4/5)",
        4059: "Seperate(5/6)",
        4060: "Seperate(7/8)",
        4061: "Seperate(8/9)",
        4062: "Seperate(10/11)",
        4063: "Seperate(11/12)",
        4064: "Seperate(13/14)",
        4065: "Seperate(14/15)",
        4066: "Seperate(16/17)",
        4067: "Seperate(17/18)",
        4068: "Seperate(19/20)",
        4069: "Seperate(20/21)",
        4070: "Seperate(22/23)",
        4071: "Seperate(23/24)",
        4072: "Seperate(25/26)",
        4073: "Seperate(26/27)",
        4074: "Seperate(28/29)",
        4075: "Seperate(29/30)",
        4076: "Seperate(31/32)",
        4077: "Seperate(32/33)",
        4078: "Seperate(34/35)",
        4079: "Seperate(35/36)",
        4080: "Seperate(1/4)",
        4081: "Seperate(4/7)",
        4082: "Seperate(7/10)",
        4083: "Seperate(10/13)",
        4084: "Seperate(13/16)",
        4085: "Seperate(16/19)",
        4086: "Seperate(19/22)",
        4087: "Seperate(22/25)",
        4088: "Seperate(25/28)",
        4089: "Seperate(28/31)",
        4090: "Seperate(31/34)",
        4091: "Seperate(2/5)",
        4092: "Seperate(5/8)",
        4093: "Seperate(8/11)",
        4094: "Seperate(11/14)",
        4095: "Seperate(14/17)",
        4096: "Seperate(17/20)",
        4097: "Seperate(20/23)",
        4098: "Seperate(23/26)",
        4099: "Seperate(26/28)",
        4100: "Seperate(28/32)",
        4101: "Seperate(32/35)",
        4102: "Seperate(3/6)",
        4103: "Seperate(6/9)",
        4104: "Seperate(9/12)",
        4105: "Seperate(12/15)",
        4106: "Seperate(15/18)",
        4107: "Seperate(18/21)",
        4108: "Seperate(21/24)",
        4109: "Seperate(24/27)",
        4110: "Seperate(27/30)",
        4111: "Seperate(30/33)",
        4112: "Seperate(33/36)",
        4113: "Corner(1/5)",
        4114: "Corner(2/6)",
        4115: "Corner(4/8)",
        4116: "Corner(5/9)",
        4117: "Corner(7/11)",
        4118: "Corner(8/12)",
        4119: "Corner(10/14)",
        4120: "Corner(11/15)",
        4121: "Corner(13/17)",
        4122: "Corner(14/18)",
        4123: "Corner(16/20)",
        4124: "Corner(17/21)",
        4125: "Corner(18/23)",
        4126: "Corner(20/24)",
        4127: "Corner(22/26)",
        4128: "Corner(23/27)",
        4129: "Corner(25/29)",
        4130: "Corner(26/30)",
        4131: "Corner(28/32)",
        4132: "Corner(29/33)",
        4133: "Corner(31/35)",
        4134: "Corner(32/36)",
        4135: "Street(1-3)",
        4136: "Street(4-6)",
        4137: "Street(7-9)",
        4138: "Street(10-12)",
        4139: "Street(13-15)",
        4140: "Street(16-18)",
        4141: "Street(19-21)",
        4142: "Street(22-24)",
        4143: "Street(25-27)",
        4144: "Street(28-30)",
        4145: "Street(31-33)",
        4146: "Street(34-36)",
        4147: "Line(1-6)",
        4148: "Line(4-9)",
        4149: "Line(7-12)",
        4150: "Line(10-15)",
        4151: "Line(13-18)",
        4152: "Line(16-21)",
        4153: "Line(19-24)",
        4154: "Line(22-27)",
        4155: "Line(28-33)",
        4156: "Line(31-36)",
        4157: "Line(25-30)",
        5001: "P1",
        5002: "P2",
        5003: "P3",
        5004: "P4",
        5005: "P5",
        5011: "P1 Pair",
        5012: "P2 Pair",
        5013: "P3 Pair",
        5014: "P4 Pair",
        5015: "P5 Pair",
        5101: "P1",
        5102: "P2",
        5103: "P3",
        5104: "P4",
        5105: "P5",
        5106: "Banker 1",
        5107: "Banker 2",
        5108: "Banker 3",
        5109: "Banker 4",
        5110: "Banker 5",
        5111: "Banker Pair",
        6201: "Andar",
        6202: "Bahar",
        6203: "1-5 Cards",
        6204: "6-10 Cards",
        6205: "11-15 Cards",
        6206: "16-25 Cards",
        6207: "26-30 Cards",
        6208: "31-35 Cards",
        6209: "36-40 Cards",
        6210: "41+ Cards",
        6211: "1st Andar",
        6212: "1st Bahar",
        6301: "Player A",
        6302: "Player B",
        6303: "Tie",
        6304: "Player A Pair+",
        6305: "Player B Pair+",
        6306: "6 Card Bonus",
        7201: "Player 1 Ante",
        7202: "Player 1 Blind",
        7203: "Player 1 Trips",
        7204: "Player 1 Raise 4x",
        7205: "Player 1 Raise 3x",
        7206: "Player 1 Raise 2x",
        7207: "Player 1 Raise 1x",
        7211: "Player 2 Ante",
        7212: "Player 2 Blind",
        7213: "Player 2 Trips",
        7214: "Player 2 Raise 4x",
        7215: "Player 2 Raise 3x",
        7216: "Player 2 Raise 2x",
        7217: "Player 2 Raise 1x",
        7221: "Player 3 Ante",
        7222: "Player 3 Blind",
        7223: "Player 3 Trips",
        7224: "Player 3 Raise 4x",
        7225: "Player 3 Raise 3x",
        7226: "Player 3 Raise 2x",
        7227: "Player 3 Raise 1x",
        7301: "Player 1 Ante",
        7302: "Player 1 1st Tie",
        7303: "Player 1 War",
        7304: "Player 1 2nd Tie",
        7311: "Player 2 Ante",
        7312: "Player 2 1st Tie",
        7313: "Player 2 War",
        7314: "Player 2 2nd Tie",
        7321: "Player 3 Ante",
        7322: "Player 3 1st Tie",
        7323: "Player 3 War",
        7324: "Player 3 2nd Tie",
        7401: "Ante",
        7402: "Ante Double",
        7403: "Split",
        7404: "Any Pair",
        7405: "Lucky 3",
        7406: "Hot 3",
        7407: "Bust It",
        7408: "Insurance",
        7409: "Lucky Ladies",
        8001: "Banker 1 (Equal)",
        8002: "Banker 2 (Equal)",
        8003: "Banker 3 (Equal)",
        8011: "Banker 1 (Double)",
        8012: "Banker 2 (Double)",
        8013: "Banker 3 (Double)",
        8021: "Banker 1 (Super Bull)",
        8022: "Banker 2 (Super Bull)",
        8023: "Banker 3 (Super Bull)",
        8101: "Player 1 (Equal)",
        8102: "Player 2 (Equal)",
        8103: "Player 3 (Equal)",
        8111: "Player 1 (Double)",
        8112: "Player 2 (Double)",
        8113: "Player 3 (Double)",
        8121: "Player 1 (Super Bull)",
        8122: "Player 2 (Super Bull)",
        8123: "Player 3 (Super Bull)",
        9001: "Dragon",
        9002: "Phoenix",
        9003: "Pair 8+",
        9004: "Straight",
        9005: "Flush",
        9006: "Straight Flush",
        9007: "Three of a Kind",
        9101: "Dragon",
        9102: "Phoenix",
        9103: "Tie",
        9114: "Dragon Three Pictures",
        9124: "Phoenix Three Pictures",
        additional_result: {
            235: "235",
            "1st_dozen": "1<sup>st</sup> Dozen",
            "2nd_dozen": "2<sup>nd</sup> Dozen",
            "3rd_dozen": "3<sup>rd</sup> Dozen",
            big_dice: "BIG",
            bull_1: "Bull 1",
            bull_2: "Bull 2",
            bull_3: "Bull 3",
            bull_4: "Bull 4",
            bull_5: "Bull 5",
            bull_6: "Bull 6",
            bull_7: "Bull 7",
            bull_8: "Bull 8",
            bull_9: "Bull 9",
            bull_bull: "Bull Bull",
            double_pictures: "Double Pictures",
            even: "EVEN",
            five_dukes: "5 Dukes",
            flush: "Flush",
            four_of_a_kind: "Four of a Kind",
            full_house: "Full House",
            high_card: "High Card",
            no_bull: "No Bull",
            not_qualified: "Not Qualified",
            odd: "ODD",
            pair: "Pair",
            royal_flush: "Royal Flush",
            single_picture: "Single Picture",
            small_dice: "SMALL",
            straight: "Straight",
            straight_flush: "Straight Flush",
            three_of_a_kind: "Three of a Kind",
            triple_dice: "Triple",
            triple_pictures: "Three Pictures",
            two_pairs: "Two Pairs"
        }
    }, error_code$a = {
        1: "Server internal error [1]",
        101: "Selection Bet Limit Exceeded",
        102: "Exceeded time limit [102]",
        103: "Bet(s) Failed (Pot Limit Exceeded) [103]",
        104: "Bet(s) Failed(Below Selection Bet Limit)",
        404: "Unable to connect to the server. Please check the network settings",
        5e3: "Unknown Error [5000]",
        5001: "Too many requests [5001]",
        6e3: "The network is disconnected, please login again",
        6001: "Network Error [6001]",
        6002: "Failed to get credit information. [6002]",
        6003: "Incorrect account or password! [6003]",
        6004: "Prohibit login. [6004]",
        6005: "You don't have handicap! [6005]",
        6006: "Can't find MultiPlay message record! [6006]",
        6007: "Can't find your agent, please contact customer service! [6007]",
        6008: "Your account has been logined again. [6008]",
        6010: "Password reset does not succeed [6010]",
        6011: "The format of the password is incorrect [6011]",
        6012: "Password cannot be empty [6012]",
        6013: "The password is limited to 10 characters! [6013]",
        6015: "Failure! Player cannot follow same player repeatedly. [6015]",
        6016: "Unable to follow this player, maximum 20 following reached [6016]",
        6018: "The gaming table has been closed! [6018]",
        6019: "Table is under maintenance! [6019]",
        6020: "This is private gaming table. [6020]",
        6021: "This seat is taken, please try other! [6021]",
        6022: "Failure! Please try again later. [6022]",
        6023: "Couldn't search the bet-limit table, please enter again. [6023]",
        6024: "Couldn't search the gaming table, please enter again. [6024]",
        6025: "Couldn't find an appropriate seat! [6025]",
        6026: "Fail to enter the gaming table, please try again! [6026]",
        6027: "This table is full, please try other gaming table! [6027]",
        6028: "You have betted in seat in this round, please click 'enter' in lobby to enter gaming table! [6028]",
        6029: "Game table {0} has been reserved. Please choose to join or sidebet. [6029]",
        6030: "The table owner has left! [6030]",
        6031: "You are the table owner, you cannot change your seat. [6031]",
        6032: "You have side-betted this round. You cannot enter the gaming table as deskmate. [6032]",
        6033: "You have betted in seat this round. You cannot enter table by Side-Bet. [6033]",
        6034: "This table is not reserved, you can't join. [6034]",
        6035: "Sorry, your balance is less than {0}. You can join by Side-Bet. [6035]",
        6037: "Bet(s) failed! [6037]",
        6038: "Failure! Illegal credit changed. [6038]",
        6039: "Failure! System is busy! [6039]",
        6040: "Too many requests! Please login again. [6040]",
        6041: "Failure! Game round cannot be found. [6041]",
        6042: "Failure! Your credit is not enough. [6042]",
        6043: "Bet Failed! It's over maximum lose. [6043]",
        6044: "Failure! Stop Betting. [6044]",
        6045: "Failure! The information is incorrect. [6045]",
        6046: "Failure! Operation conflict! [6046]",
        6047: "Illegal bet! [6047]",
        6048: "After 30 rounds, you can't bet on big or small! [6048]",
        6049: "Invalid bet! [6049]",
        6050: "Bet Failed! It's over maximum limit [6050]",
        6052: "You have placed bet, you cannot skip this round! [6052]",
        6053: "Cards are revealed, you cannot skip this round! [6053]",
        6054: "The game round has not started yet, you cannot skip this round! [6054]",
        6055: "You have already skipped 5 rounds in a row. Please place bets. [6055]",
        6057: "Dealer is not here! [6057]",
        6058: "Illegal operation. [6058]",
        6059: "Game table is not found. [6059]",
        6060: "Unsupported language! [6060]",
        6061: "Invalid operation! [6061]",
        6062: "Error parameters! [6062]",
        6063: "The gaming hall is not found, please enter again. [6063]",
        6064: "System is under maintenance! [6064]",
        6065: "Couldn't find an appropriate limit-table or seat! [6065]",
        6066: "Game table does not exist. [6066]",
        6067: "Game table is not found, please enter again. [6067]",
        6068: "Password error! [6068]",
        6069: "No bet placed, you cannot reveal cards! [6069]",
        6070: "Failure! You have side-betted in this round, please try again after this round is over. [6070]",
        6071: "You don't have this table! [6071]",
        6072: "This table is already full, please try side bet! [6072]",
        6073: "The table owner has set passwords [6073]",
        6074: "You have no bet more than 4 minutes and auto-exited game table({{0}}). [6074]",
        6075: "The session ID has expired,please return to try again. [6075]",
        6076: "Session ID error, please return to try again. [6076]",
        6077: "Session ID cannot reuse, please return to try again. [6077]",
        6078: "You are logged out of the game. [6078]",
        6079: "The platform is under maintenace! [6079]",
        6080: "Failed to enter table, please try again. [6080]",
        6081: "Failed to reserve table, please try again. [6081]",
        6082: "Your account is prohibited for use in your region [6082]",
        6083: "Bet(s) Failed. You have placed bets on Commission in this round. [6083]",
        6084: "Bet(s) Failed. You have placed bets on No-Commission in this round. [6084]",
        6085: "Invalid handicap, you cannot [Reserve/Join]. Please try [Side Bet]. [6085]",
        6086: "Password has been reset. Please login again! [6086]",
        6087: "New and current password cannot be same [6087]",
        6088: "You are not allowed to enter this game table according to current VIP handicap. If adjustment on VIP handicap is needed, please contact customer service or your superior agent [6088]",
        6090: "Request timeout [6090]",
        6091: "Login failed [6091]",
        6092: "You are logged out of the game [6092]",
        6093: "Verification code is incorrect. Please try again [6093]",
        6094: "Your free trial has expired (15 minutes), you are logged out of the game [6094]",
        6095: "Verification can be sent once per round only [6095]",
        6096: "Invalid operation [6096]",
        6097: "Incorrect state when performing verification [6097]",
        6098: "Not allowed to bet on pair related field after <number> rounds ",
        6099: "No Red Packet to collect [6099]",
        6100: "Red Packet has been collected already [6100]",
        6101: "Activity has not started yet [6101]",
        6102: "Activity status is illegal [6102]",
        6103: "Not ready to claim rpa [6103]",
        6111: "Player has folded for this round [6111]",
        6112: "Player has checked for this round [6112]",
        6113: "Illegal sub round betting state [6113]",
        6114: "Not in betting state [6114]",
        6115: "Bet on trips is not allowed without ante/blind [6115]",
        6116: "Ante and Blind must be betted together [6116]",
        6117: "Ante and Blind amount must be equal [6117]",
        6118: "Player can only bet on Ante/Blind/Trips in the first round [6118]",
        6119: "Player can only bet on 4x/3x in the second round [6119]",
        6120: "Player can only bet on 2x in the third round [6120]",
        6121: "Player can only bet on 1x in the last round [6121]",
        6122: "Invalid Bet Amount [6122]",
        6123: "Raise is not allowed without ante [6123]",
        6124: "Duplicated raise [6124]",
        6126: "No bet on 6 consecutive game rounds is detected, auto-exited game table. [6126]",
        6200: "Response timeout. Please contact our customer service team. [6200]",
        6201: "Response timeout. Please contact our customer service team. [6201]",
        6202: "Response timeout. Please contact our customer service team. [6202]",
        6203: "Response timeout. Please contact our customer service team. [6203]",
        6204: "Response timeout. Please contact our customer service team. [6204]",
        100001: "Your agent have not enable your mobile login",
        200001: "An error has occurred. Please contact CSD for details, thank you. [1000]",
        200002: "System timeout, please closed the current game window and try again. [1001]",
        200003: "System timeout, please closed the current game window and try again. [1002]",
        200004: "An error has occurred. Please contact CSD for details, thank you. [1003]",
        200005: "An error has occurred. Please contact CSD for details, thank you. [1004]",
        200006: "An error has occurred. Please contact CSD for details, thank you. [1005]",
        200007: "An error has occurred. Please contact CSD for details, thank you. [1006]",
        200008: "An error has occurred. Please contact CSD for details, thank you. [1007]",
        200009: "An error has occurred. Please contact CSD for details, thank you. [1008]",
        200011: "Account has been closed. Please contact your upline for details, thank you. [2002]",
        200012: "An error has occurred. Please contact CSD for details, thank you. [2003]",
        200013: "An error has occurred. Please contact CSD for details, thank you. [3001]",
        200014: "Your account has insufficient balance. [3002]",
        200015: "Your stake had exceeded your bet limit settings, please try again. [3003]",
        200016: "Game disabled. Please contact your upline for details, thank you. [3004]",
        200017: "An error has occurred. Please contact CSD for details, thank you. [3005]",
        200018: "Win limit hit! Please contact your upline, thank you. [3006]",
        200019: "Lose limit hit ! Please contact your upline, thank you. [3007]",
        200020: "You have no bet limit setting for this game, please contact your upline to set it. [3008]",
        200021: "Your betting limit has been changed, please login again to apply the new setting.[3009]",
        200022: "Account has been suspended. Please contact your upline for details, thank you. [3010]",
        200023: "Account has been suspended. Please contact your upline for details, thank you. [3013]",
        200024: "The game is unavailable at the moment. Please contact CSD for details, thank you. [3014]"
    }, error_msg$a = {
        ban: "Your account has been logged in elsewhere. ",
        kick: "Session expired. Please reconnect to the platform!",
        processing_game_bet: "Your bet is being processed, please wait.",
        quitGame: "Press OK to quit game",
        relogin: "Press OK to return to the login page.",
        unknown: "The network is disconnected, press OK to quit game",
        connection: {
            connection_problem: "Press OK to connect back to the game.",
            server_connection_problem: "Press OK to connect back to the game."
        },
        idle: {
            disconnected_reconnect: "Press OK to connect back to the game.",
            disconnected_to_server: "Press OK to connect back to the game."
        }
    }, fast_bet$a = {title: "Fast Bet"}, game_hall$a = {
        banner_more_detail: "View More",
        feature_games: "Feature Games",
        good_roads: "Good Roads",
        hot_games: "Hot Games",
        multi_play: "MultiPlay",
        view_all: "View All",
        vip_betlimit: "Bet Limit",
        vip_enter: "Enter",
        vip_min_enter: "Min Balance",
        vip_occupied: "Reserved",
        vip_reserve: "Reserve",
        subtypes: {
            all: "All",
            classic: "Classic",
            insurance: "Insurance",
            quick: "Quick",
            see: "See Card",
            sexy: "Sweetie",
            vip: "VIP"
        }
    }, game_rules$a = {
        attention: "Attention",
        game_rules: "Game Rules",
        introduction: "Introduction",
        payoff: "Payoff",
        title: "Help"
    }, game_table$a = {
        balanace: "BALANCE",
        deposit: "Deposit",
        deposit_short: "D",
        total_bet: "TOTAL BET",
        trial: "TRIAL",
        baccarat: {no_comm: "No Comm"},
        blackjack: {
            all_side_bets: "ALL SIDE BETS",
            ante_first: "PLEASE BET ANTE FIRST",
            banker: "Banker",
            double: "DOUBLE",
            hit: "HIT",
            insufficient_insurance: "Not enough balance for insurance",
            insurance: "Insurance?",
            other_decison: "Other players are making decision",
            player: "Player",
            split: "SPLIT",
            stand: "STAND",
            instruction: {
                213: {
                    content: "Win if the combination of the player's initial cards and the dealer's up card form a specific card type.",
                    title: "LUCKY 3"
                },
                label: "INSTRUCTION",
                ante: {
                    content: "Win if the player's hand value is closer to 21 than the dealer's hand and does not exceed 21.",
                    title: "ANTE"
                },
                bust: {content: "Win if the dealer busts.", title: "BUST IT"},
                hot3: {
                    content: "Win if the card value of the player's initial cards and the dealer's up card total 19 - 21.",
                    title: "HOT 3"
                },
                lucky_ladies: {
                    content: "Win if the player's initial cards formed a specific card type.",
                    title: "LUCKY LADIES"
                },
                pair: {content: "Win if the player's initial cards are pair.", title: "ANY PAIR"}
            }
        },
        bullbull: {
            banker: "BANKER",
            banker_allwin: "BANKER ALL WIN",
            first_card: "FIRST CARD",
            player_allwin: "PLAYER ALL WIN"
        },
        casino_war: {
            "1st_tie": "1st TIE",
            "2nd_tie": "2nd TIE",
            banker: "BANKER",
            decision: "MAKE YOUR DECISION",
            player_1: "PLAYER 1",
            player_2: "PLAYER 2",
            player_3: "PLAYER 3",
            surrender: "SURRENDER"
        },
        fpc: {any_two_dice: "ANY TWO DICE", both_one_dice: "BOTH ONE DICE"},
        roulette: {orphelins: "orphelins", tier: "tier", voisins: "voisins", zero: "zero"},
        seecard: {other_squeezing: "Other players are squeezing cards"},
        teen_patti: {pair_plus: "PAIR+"},
        uth: {
            banker: "BANKER",
            community: "COMMUNITY",
            decision: "MAKE YOUR DECISION",
            play: "PLAY",
            player_1: "PLAYER 1",
            player_1_short: "P1",
            player_2: "PLAYER 2",
            player_2_short: "P2",
            player_3: "PLAYER 3",
            player_3_short: "P3",
            raise1x: "RAISE 1x",
            raise2x: "RAISE 2x",
            raise3x: "RAISE 3x",
            raise4x: "RAISE 4x"
        },
        vip: {
            owner_squeezing: "Owner is squeezing cards",
            owner_tooltip: "OWNER",
            reserve_action_tooltip: "RESERVE",
            reserve_betlimit: "Bet Limit",
            reserve_min_enter: "Min Balance",
            reserve_request: "Table reserved. You will be the owner next round.",
            reserved_tooltip: "RESERVED",
            shuffle_request: "Your shuffle request has been submitted. The shuffle will start within 5 minutes",
            shuffle_tooltip: "SHUFFLE",
            skip_tooltip: "SKIP",
            start_tooltip: "START"
        }
    }, game_types$a = {
        101: "Baccarat",
        102: "VIP Baccarat (Legacy)",
        103: "Quick Baccarat",
        104: "See Card Baccarat",
        110: "Insurance Baccarat",
        111: "VIP Baccarat",
        201: "SicBo",
        202: "Fish Prawn Crab",
        203: "Xoc Dia",
        301: "Dragon Tiger",
        401: "Roulette",
        501: "Classic PokDeng",
        602: "Andar Bahar",
        603: "Teen Patti 20-20",
        702: "Ultimate Texas Hold'em",
        703: "Casino War",
        704: "Infinite Blackjack",
        801: "Bull Bull",
        901: "Win Three Cards",
        "201_Alt": "HiLo",
        "201_Alt_2": "Sic Tan",
        "501_Alt": "Two Sides PokDeng",
        "901_Alt": "Three Pictures",
        "901_Alt_2": "Teen Patti 20-20",
        arcadeGame: "Casino Game",
        card_game: "Card Game",
        cardGame: "Card Game",
        classic: "Classic",
        fishingGame: "AB Fishing",
        game_hall: "Lobby",
        multi_hall: "MultiPlay",
        sexy: "Sweetie",
        slotGame: "Slot Game",
        UTH_Short: "Ult. Texas"
    }, gamehall_table$a = {
        maintaining: "MAINTENANCE",
        notable: "No table available",
        good_road: {
            100: "Long Banker",
            101: "Long Player",
            102: "Single Road",
            103: "One P Two B",
            104: "One B Two P",
            105: "Patted eat",
            106: "B across P",
            107: "P across B",
            108: "Separated B",
            109: "Separated P"
        }
    }, header$a = {
        bet_record: "Bet Record",
        card_game: "AB FISHING",
        exitfullscreen: "Exit Fullscreen",
        fullscreen: "Fullscreen",
        hot_games: "LOBBY",
        live_games: "LIVE GAMES",
        logout: "Logout",
        multi_table: "MULTIPLAY",
        profile: "Profile",
        services: "Services",
        Version: "Version"
    }, login$a = {free_trial: "FREE TRIAL", login: "LOGIN", password: "Password", username: "Username"}, menu$a = {
        addToHomeScreenForIOS: "ADD TO      HOME SCREEN",
        back: "BACK TO LOBBY",
        downloadApp: "Download APP",
        exitfullscreen: "EXIT FULLSCREEN",
        fast_bet: "FAST BET",
        fullscreen: "FULLSCREEN",
        guide: "HELP",
        history: "BET RECORDS",
        installation_instruction: "Instruction",
        installPwa: "INSTALL",
        lobby: "Lobby",
        loginApp: "Login APP",
        payout: "PAYOUT",
        settings: "SETTINGS",
        title: "Menu",
        verification: "VERIFY",
        video: "RELOAD"
    }, messages$a = {
        all_in: "ALL IN",
        bet_success: "Bet(s) Confirmed",
        cancel: "Cancel",
        game_table_verified: "Verification has been sent, please check the verificaiton result on the screen",
        idle_video: "VIDEO PAUSED DUE TO INACTIVITY. PRESS OK TO RESUME",
        insufficient_bet_balance: "Insufficient balance",
        insufficient_vip_balance: "Insufficient amount",
        landscape_block: "Rotate your mobile device for best experience",
        loading: "LOADING",
        logout: "Are you sure you want to logout ",
        logoutOK: "Logout",
        lost: "YOU LOST",
        multi_side_hall_filter: "Filter cannot be empty, please select at least one game type.",
        nickname_success: "Nickname updated!",
        ok_button: "OK",
        screen_size_block: "Please resize the window for the best experience",
        table_not_found: "Game table is not found",
        table_under_maintenance: "Game table is under maintenance",
        won: "YOU WON"
    }, payout$a = {
        bet: "BET TYPE", bet_limit: "BET LIMIT", odds: "ODDS", payout: "PAYOUT", bet_type: {
            1001: "BANKER",
            1002: "PLAYER",
            1003: "TIE",
            1006: "B PAIR",
            1007: "P PAIR",
            1011: "BANKER (NO COMM)",
            1100: "LUCKY 6",
            1211: "B NATURAL",
            1212: "P NATURAL",
            1223: "EITHER PAIR",
            1224: "PERFECT PAIR",
            1231: "B BONUS",
            1232: "P BONUS",
            1401: "TIGER",
            1402: "SMALL TIGER",
            1403: "BIG TIGER",
            1404: "TIGER PAIR",
            1405: "TIGER TIE",
            1501: "BANKER FABULOUS 4",
            1502: "PLAYER FABULOUS 4",
            1503: "BANKER PRECIOUS PAIR",
            1504: "PLAYER PRECIOUS PAIR",
            1601: "BANKER BLACK",
            1602: "BANKER RED",
            1603: "PLAYER BLACK",
            1604: "PLAYER RED",
            1605: "ANY 6",
            2001: "DRAGON",
            2002: "TIGER",
            2003: "TIE",
            3001: "BIG / SMALL",
            3002: "EVEN / ODD",
            3005: "SPECIFIC TRIPLE",
            3011: "ANY TRIPLE",
            3012: "SPECIFIC DOUBLE",
            3018: "4 OR 17 POINTS",
            3019: "5 OR 16 POINTS",
            3020: "6 OR 15 POINTS",
            3021: "7 OR 14 POINTS",
            3022: "8 OR 13 POINTS",
            3023: "9, 10, 11 OR 12 POINTS",
            3033: "TWO DICE COMBINATION",
            3048: "ONE DICE",
            3049: "TWO DICE",
            3050: "THREE DICE",
            3200: "HI",
            3201: "LO",
            3202: "11 HI-LO",
            3203: "DICE 1 - 6",
            3209: "TWO DICE COMBINATION",
            3224: "1 LO",
            3225: "2 LO",
            3226: "3 LO",
            3227: "4 LO",
            3228: "5 - 6 LO",
            3230: "3 - 4 HI",
            3232: "5 HI",
            3233: "6 HI",
            3234: "THREE DICE COMBINATION",
            3301: "MAIN SYMBOL",
            3307: "SPECIFIC SINGLE COLOR",
            3310: "SPECIFIC DOUBLE COLOR",
            3313: "SPECIFIC TRIPOLE COLOR",
            3316: "ANY TRIPLE COLOR",
            3317: "TWO DICE COMBINATION",
            3401: "ODD / EVEN",
            3403: "FAN",
            3407: "NIM",
            3419: "NGA",
            3431: "SSH",
            3435: "12 KWOK / 23 KWOK / 34 KWOK",
            3438: "41 KWOK",
            3500: "TIE",
            3501: "SMALL",
            3502: "BIG",
            3503: "ODD",
            3504: "EVEN",
            3505: "0",
            3506: "1",
            3507: "3",
            3508: "4",
            4001: "BIG / SMALL",
            4002: "ODD / EVEN",
            4003: "RED / BLACK",
            4007: "DOZEN",
            4010: "COLUMN",
            4013: "STRAIGHT",
            4050: "THREE NUMBERS",
            4052: "FOUR NUMBERS",
            4053: "SEPARATE",
            4113: "CORNER",
            4135: "STREET",
            4147: "LINE",
            5001: "PLAYER 1-5",
            5011: "PLAYER 1-5 PAIR",
            5101: "PLAYER 1-5",
            5106: "BANKER 1-5",
            5111: "BANKER PAIR",
            6201: "ANDAR",
            6202: "BAHAR",
            6203: "1-5 CARDS",
            6204: "6-10 CARDS",
            6205: "11-15 CARDS",
            6206: "16-25 CARDS",
            6207: "26-30 CARDS",
            6208: "31-35 CARDS",
            6209: "36-40 CARDS",
            6210: "41+ CARDS",
            6211: "1ST ANDAR",
            6212: "1ST BAHAR",
            6301: "PLAYER A",
            6302: "PLAYER B",
            6303: "TIE",
            6304: "PLAYER A PAIR PLUS",
            6305: "PLAYER B PAIR PLUS",
            6306: "6 CARD BONUS",
            7201: "PLAYER 1 - 3 ANTE",
            7202: "PLAYER 1 - 3 BLIND",
            7203: "PLAYER 1 - 3 TRIPS",
            7301: "PLAYER 1 - 3 ANTE",
            7302: "PLAYER 1 - 3 1ST TIE",
            7304: "PLAYER 1 - 3 2ND TIE",
            7401: "ANTE",
            7404: "ANY PAIR",
            7405: "Lucky 3",
            7406: "HOT 3",
            7407: "BUST IT",
            7409: "LUCKY LADIES",
            8001: "BANKER 1",
            8002: "BANKER 2",
            8003: "BANKER 3",
            8011: "BANKER 1",
            8012: "BANKER 2",
            8013: "BANKER 3",
            8021: "BANKER 1",
            8022: "BANKER 2",
            8023: "BANKER 3",
            8101: "PLAYER 1",
            8102: "PLAYER 2",
            8103: "PLAYER 3",
            8111: "PLAYER 1",
            8112: "PLAYER 2",
            8113: "PLAYER 3",
            8121: "PLAYER 1",
            8122: "PLAYER 2",
            8123: "PLAYER 3",
            9001: "DRAGON",
            9002: "PHOENIX",
            9003: "PAIR 8+",
            9004: "STRAIGHT",
            9005: "FLUSH",
            9006: "STRAIGHT FLUSH",
            9007: "THREE OF A KIND",
            9101: "DRAGON",
            9102: "PHOENIX",
            9103: "TIE",
            9114: "DRAGON 3 PICTURES",
            9124: "PHOENIX 3 PICTURES"
        }
    }, profile$a = {
        save: "Save",
        title: "Profile",
        main_view: {change_password: "Change Password?", nickname: "Nickname", pending: "Pending"},
        password_view: {
            confirm_password: "Confirm Password",
            current_password: "Current Password",
            hints: "* Please enter alphanumeric string of 6-10 characters",
            new_password: "New Password"
        }
    }, roadmap$a = {
        analysis: "ANALYSIS",
        history: "HISTORY",
        last_10_rounds: "LAST 10 ROUNDS",
        last_50_rounds: "LAST 50 ROUNDS",
        last_6_rounds: "LAST 6 ROUNDS",
        round_num: "Round #",
        statistics: "STATISTICS",
        andar_bahar: {andar: "ANDAR", bahar: "BAHAR"},
        baccarat: {banker: "B", player: "P", predict_banker: "Predict Banker", predict_player: "Predict Player", tie: "T"},
        bull_bull: {
            game_hall: {
                0: "NB",
                1: "B1",
                2: "B2",
                3: "B3",
                4: "B4",
                5: "B5",
                6: "B6",
                7: "B7",
                8: "B8",
                9: "B9",
                A: "BB",
                B: "5D",
                banker: "B",
                player_1: "P1",
                player_2: "P2",
                player_3: "P3"
            },
            game_table: {
                0: "No Bull",
                1: "Bull 1",
                2: "Bull 2",
                3: "Bull 3",
                4: "Bull 4",
                5: "Bull 5",
                6: "Bull 6",
                7: "Bull 7",
                8: "Bull 8",
                9: "Bull 9",
                A: "Bull Bull",
                B: "5 Dukes",
                banker: "BANKER",
                player_1: "PLAYER 1",
                player_2: "PLAYER 2",
                player_3: "PLAYER 3"
            }
        },
        casino_war: {banker: "B", player_1: "P1", player_2: "P2", player_3: "P3"},
        dragon_tiger: {dragon: "D", predict_dragon: "Predict Dragon", predict_tiger: "Predict Tiger", tie: "T", tiger: "T"},
        hi_lo: {hi: "HI", hi_lo: "11", lo: "LO"},
        pokdeng: {banker: "B", player_1: "P1", player_2: "P2", player_3: "P3", player_4: "P4", player_5: "P5"},
        roulette: {hot_cold: "HOT & COLD"},
        sicbo: {big: "BIG", small: "SMALL", triple: "TRIPLE"},
        sictan: {even: "EVEN", fan_1: "1 FAN", fan_2: "2 FAN", fan_3: "3 FAN", fan_4: "4 FAN", odd: "ODD"},
        teen_patti: {
            235: "235",
            flush: "Flush",
            four_of_a_kind: "Four of a Kind",
            full_house: "Full House",
            high_card: "High Card",
            pair: "Pair",
            pair_plus: "PAIR+",
            player_a: "A",
            player_b: "B",
            royal_flush: "Royal Flush",
            straight: "Straight",
            straight_flush: "Straight Flush",
            three_of_a_kind: "Three of a Kind",
            tie: "T"
        },
        three_pictures: {
            double_pictures: "DP",
            dragon: "D",
            phoenix: "P",
            single_picture: "SP",
            tie: "T",
            triple_pictures: "3P"
        },
        win3cards: {
            235: "235",
            dragon: "D",
            flush: "Flush",
            high_card: "High Card",
            "p8+": "P8",
            pair: "Pair",
            phoenix: "P",
            straight: "Straight",
            straight_flush: "Straight Flush",
            three_of_a_kind: "Three of a Kind",
            tie: "T"
        },
        xocdia: {even: "Even", odd: "Odd", tie: "Tie", big: "Big", small: "Small", o: "O", e: "E"}
    }, settings$a = {
        title: "Settings",
        bullbull: {
            double: "Double",
            equal: "Equal",
            play_type: "Bet Type",
            play_type_multiplay: "Bet Type (Bull Bull)",
            super: "SuperBull"
        },
        general: {
            confirmed_bet_amounts: "Confirmed Bet Amounts",
            languages: "Languages",
            side_bets: "Side Bets",
            statistics: "Betting Statistics",
            title: "Display"
        },
        scorecards: {classic: "Classic", immersive: "Immersive", title: "Scorecards"},
        sound: {live: "Live Sound", system: "System Sound", title: "Sound"}
    }, side_hall_filter$a = {
        101: "Baccarat",
        103: "Quick",
        104: "See Card",
        110: "Insurance",
        111: "VIP",
        201: "SicBo",
        202: "Fish Prawn Crab",
        203: "Xoc Dia",
        301: "Dragon Tiger",
        401: "Roulette",
        501: "Classic PokDeng",
        602: "Andar Bahar",
        603: "Teen Patti 20-20",
        801: "Bull Bull",
        901: "Win Three Cards",
        "201_Alt": "HiLo",
        "201_Alt_2": "Sic Tan",
        "501_Alt": "Two Sides PokDeng",
        "901_Alt": "Three Pictures",
        "901_Alt_2": "Teen Patti 20-20",
        asia: "Asia Games",
        baccarat: "Baccarat",
        classic: "Classic",
        europe: "Europe Games",
        global: "Global Games",
        other: "Other Games",
        sexy: "Sweetie"
    }, en = {
        baccarat_gameplay: baccarat_gameplay$a,
        bet_record: bet_record$a,
        bet_type: bet_type$a,
        custom_chips: custom_chips$a,
        detailed_bet_type: detailed_bet_type$a,
        error_code: error_code$a,
        error_msg: error_msg$a,
        fast_bet: fast_bet$a,
        game_hall: game_hall$a,
        game_rules: game_rules$a,
        game_table: game_table$a,
        game_types: game_types$a,
        gamehall_table: gamehall_table$a,
        header: header$a,
        login: login$a,
        menu: menu$a,
        messages: messages$a,
        payout: payout$a,
        profile: profile$a,
        roadmap: roadmap$a,
        settings: settings$a,
        side_hall_filter: side_hall_filter$a
    }, baccarat_gameplay$9 = {
        basic: "Básico",
        default: "Predeterminado",
        fabulous_4: "Fabulous 4",
        natural: "Afortunado Natural 6",
        super: "Súper Baccarat",
        switch: "Cambio de Juego",
        tiger: "Tigre"
    }, bet_record$9 = {
        bet_amount: "Cantidad de la apuesta",
        bet_type: "Tipo de apuesta",
        betting_number: "Número de apuesta",
        date_time: "Date & Time",
        game: "Game",
        game_type: "Tipo de juego",
        gameround_id: "ID de ronda de juego",
        loading: "Loading",
        next: "Siguiente",
        no_video: "Please note that this round of the game is invaild, and live video will not be displayed.",
        previous: "Anterior",
        shoe_round: "Shoe-Round",
        status: "Estado",
        table_number: "Número de mesa",
        total_bet: "Apuesta total",
        valid_bet: "Apuesta válida",
        win_loss: "Ganancia/Pérdida",
        bet_status: {100: "Apostando", 101: "Failed", 110: "Sin liquidar", 111: "Liquidado", 120: "Devolución"},
        title: {details: "Details", records: "Registros de apuestas"}
    }, bet_type$9 = {
        1001: "Banca",
        1002: "Jugador",
        1003: "TIE",
        1006: "B Pareja",
        1007: "P Pareja",
        1011: "Banca",
        1100: "Afortunado 6",
        1211: "Banca natural",
        1212: "Jugador natural",
        1223: "Cualquier pareja",
        1224: "PERFECT PAIR",
        1231: "Banca Dragon Bonus",
        1232: "Jugador Dragon Bonus",
        1301: "INSURANCE",
        1302: "INSURANCE",
        1303: "INSURANCE",
        1304: "INSURANCE",
        1401: "Tiger",
        1402: "Big Tiger",
        1403: "Small Tiger",
        1404: "Tiger empate",
        1405: "Tiger Pair",
        1501: "Banca Fabulous 4",
        1502: "Jugador Fabulous 4",
        1503: "Banca Precious Pair",
        1504: "Jugador Precious Pair",
        1601: "Banca negro",
        1602: "Banca rojo",
        1603: "Jugador negro",
        1604: "Jugador rojo",
        1605: "Cualquier 6",
        2001: "DRAGON",
        2002: "Tiger",
        2003: "TIE",
        3001: "Pequeño",
        3002: "Impar",
        3003: "Par",
        3004: "Grande",
        3011: "Cualquier triple",
        3048: "ONE",
        3049: "TWO",
        3050: "THREE",
        3051: "FOUR",
        3052: "FIVE",
        3053: "SIX",
        3200: "HI",
        3201: "LO",
        3225: "LO",
        3227: "LO",
        3228: "LO",
        3229: "LO",
        3230: "HI",
        3232: "HI",
        3401: "Impar",
        3402: "Par",
        3403: "1 FAN",
        3404: "2 FAN",
        3405: "3 FAN",
        3406: "4 FAN",
        3407: "1NIM2",
        3408: "1NIM3",
        3409: "1NIM4",
        3410: "2NIM1",
        3411: "2NIM3",
        3412: "2NIM4",
        3413: "3NIM1",
        3414: "3NIM2",
        3415: "3NIM4",
        3416: "4NIM1",
        3417: "4NIM2",
        3418: "4NIM3",
        3419: "23ONE NGA",
        3420: "24ONE NGA",
        3421: "34ONE NGA",
        3422: "13TWO NGA",
        3423: "14TWO NGA",
        3424: "34TWO NGA",
        3425: "12THREE NGA",
        3426: "14THREE NGA",
        3427: "24THREE NGA",
        3428: "13FOUR NGA",
        3429: "12FOUR NGA",
        3430: "23FOUR NGA",
        3431: "SSH123",
        3432: "SSH124",
        3433: "SSH134",
        3434: "SSH234",
        3435: "KWOK12",
        3436: "KWOK23",
        3437: "KWOK34",
        3438: "KWOK41",
        3500: "TIE",
        3501: "Pequeño",
        3502: "Grande",
        3503: "Impar",
        3504: "Par",
        4001: "1 - 18",
        4002: "Par",
        4005: "Impar",
        4006: "19 - 36",
        4007: "ST",
        4008: "ND",
        4009: "RD",
        4010: "",
        4011: "",
        4012: "",
        5001: "P1",
        5002: "P2",
        5003: "P3",
        5004: "P4",
        5005: "P5",
        5011: "P1 pareja",
        5012: "P2 pareja",
        5013: "P3 pareja",
        5014: "P4 pareja",
        5015: "P5 pareja",
        5101: "P1",
        5102: "P2",
        5103: "P3",
        5104: "P4",
        5105: "P5",
        5106: "B1",
        5107: "B2",
        5108: "B3",
        5109: "B4",
        5110: "B5",
        5111: "B Pareja",
        6201: "ANDAR",
        6202: "BAHAR",
        6203: "1-5",
        6204: "6-10",
        6205: "11-15",
        6206: "16-25",
        6207: "26-30",
        6208: "31-35",
        6209: "36-40",
        6210: "41+",
        6211: "<span>1</span>st ANDAR",
        6212: "<span>1</span>st BAHAR",
        6301: "Jugador A",
        6302: "Jugador B",
        6303: "TIE",
        6304: "Jugador A pareja+",
        6305: "Jugador B pareja+",
        6306: "Bonificación de 6 tarjetas",
        7201: "Ante",
        7202: "Ciega",
        7203: "Trips",
        7204: "RAISE 4x",
        7205: "RAISE 3x",
        7206: "RAISE 2x",
        7207: "RAISE 1x",
        7211: "Ante",
        7212: "Ciega",
        7213: "Trips",
        7214: "RAISE 4x",
        7215: "RAISE 3x",
        7216: "RAISE 2x",
        7217: "RAISE 1x",
        7221: "Ante",
        7222: "Ciega",
        7223: "Trips",
        7224: "RAISE 4x",
        7225: "RAISE 3x",
        7226: "RAISE 2x",
        7227: "RAISE 1x",
        7301: "Ante",
        7302: "TIE",
        7303: "War",
        7304: "2º empate",
        7311: "Ante",
        7312: "TIE",
        7313: "War",
        7314: "2º empate",
        7321: "Ante",
        7322: "TIE",
        7323: "War",
        7324: "2º empate",
        7401: "Ante",
        7402: "ANTE DOUBLE",
        7403: "SPLIT",
        7404: "PAIR",
        7405: "Lucky 3",
        7406: "HOT 3",
        7407: "BUST IT",
        7408: "INSURANCE",
        7409: "LUCKY LADIES",
        8001: "Banca1",
        8002: "Banca2",
        8003: "Banca3",
        8011: "Banca1",
        8012: "Banca2",
        8013: "Banca3",
        8021: "Banca1",
        8022: "Banca2",
        8023: "Banca3",
        8101: "Jugador1",
        8102: "Jugador2",
        8103: "Jugador3",
        8111: "Jugador1",
        8112: "Jugador2",
        8113: "Jugador3",
        8121: "Jugador1",
        8122: "Jugador2",
        8123: "Jugador3",
        9001: "DRAGON",
        9002: "PHOENIX",
        9003: "Pareja 8 Plus",
        9004: "STRAIGHT",
        9005: "FLUSH",
        9006: "STRAIGHT FLUSH",
        9007: "THREE OF A KIND",
        9101: "DRAGON",
        9102: "PHOENIX",
        9103: "TIE",
        9114: "DRAGON THREE PICTURES",
        9124: "PHOENIX THREE PICTURES",
        tips: {
            6306: "Royal Flush/Straight Flush/Four of a Kind/Full House/Flush/Straight/Three of a Kind",
            9003: "Contains Pair 9 - Pair A / Straight / Flush / Straight Flush / Three of a Kind",
            banker_insurance: "Apostar por el seguro de banca",
            bullbull_firstcard: "First Card",
            cards_dealt: "Cards Dealt",
            check: "Pasar",
            checked: "YOU CHECKED",
            comm_betted: "Ha apostado por la Comisión en esta ronda.",
            double_text: "TWO DICE",
            fold: "Retirada",
            folded: "YOU FOLDED",
            house_card: "HOUSE",
            lose: "Pierde",
            no_bet_after: "Después de la %1ª ronda de cada zapato, no se puede apostar en %2.",
            no_comm_betted: "Ha apostado a sin comisión en esta ronda.",
            no_pairs: "After the 50th game round in every shoe, no betting are allowed on Pairs.",
            player_1: "Jugador1",
            player_2: "Jugador2",
            player_3: "Jugador3",
            player_insurance: "Apostar por el seguro del jugador",
            raised: "YOU RAISED",
            single_text: "ONE DICE",
            surrender: "Rendición",
            tie: "YOU TIE",
            triple_text: "THREE DICE",
            war: "Ir a la guerra",
            win: "Gana"
        }
    }, custom_chips$9 = {
        chip_value_exists: "Este valor de ficha ya existe. Por favor, intente otro valor.",
        choose_common_chips: "Elegir Fichas Comunes",
        custom_chips_value: "Valor de Fichas Personalizadas",
        min_chip_count: "Por favor, elija al menos 5 fichas.",
        min_chip_value: "El valor mínimo permitido para la ficha es",
        select_all: "Seleccionar Todo",
        title: "Fichas Personalizadas"
    }, detailed_bet_type$9 = {
        1001: "Banca",
        1002: "Jugador",
        1003: "Tie",
        1006: "Banca pareja",
        1007: "Jugador pareja",
        1011: "Banca (Sin comisión)",
        1100: "Afortunado 6",
        1211: "Banca natural",
        1212: "Jugador natural",
        1223: "Cualquier pareja",
        1224: "Perfect Pair",
        1231: "Banker Bonus",
        1232: "Player Bonus",
        1301: "Banker Insurance 1",
        1302: "Banker Insurance 2",
        1303: "Player Insurance 1",
        1304: "Player Insurance 2",
        1401: "Tiger",
        1402: "Big Tiger",
        1403: "Small Tiger",
        1404: "Tiger empate",
        1405: "Tiger Pair",
        1501: "Banca Fabulous 4",
        1502: "Jugador Fabulous 4",
        1503: "Banca Precious Pair",
        1504: "Jugador Precious Pair",
        1601: "Banca negro",
        1602: "Banca rojo",
        1603: "Jugador negro",
        1604: "Jugador rojo",
        1605: "Cualquier 6",
        2001: "Dragon",
        2002: "Tiger",
        2003: "Tie",
        3001: "Pequeño",
        3002: "Impar",
        3003: "Par",
        3004: "Grande",
        3005: "Triple 2",
        3006: "Triple 2",
        3007: "Triple 3",
        3008: "Triple 4",
        3009: "Triple 5",
        3010: "Triple 6",
        3011: "Cualquier triple",
        3012: "Doble 1",
        3013: "Doble 2",
        3014: "Doble 3",
        3015: "Doble 4",
        3016: "Doble 5",
        3017: "Doble 6",
        3018: "Suma 4",
        3019: "Suma 5",
        3020: "Suma 6",
        3021: "Suma 7",
        3022: "Suma 8",
        3023: "Suma 9",
        3024: "Suma 10",
        3025: "Suma 11",
        3026: "Suma 12",
        3027: "Suma 13",
        3028: "Suma 14",
        3029: "Suma 15",
        3030: "Suma 16",
        3031: "Suma 17",
        3033: "Two Dice 1,2",
        3034: "Two Dice 1,3",
        3035: "Two Dice 1,4",
        3036: "Two Dice 1,5",
        3037: "Two Dice 1,6",
        3038: "Two Dice 2,3",
        3039: "Two Dice 2,4",
        3040: "Two Dice 2,5",
        3041: "Two Dice 2,6",
        3042: "Two Dice 3,4",
        3043: "Two Dice 3,5",
        3044: "Two Dice 3,6",
        3045: "Two Dice 4,5",
        3046: "Two Dice 4,6",
        3047: "Two Dice 5,6",
        3048: "Dice 1",
        3049: "Dice 2",
        3050: "Dice 3",
        3051: "Dice 4",
        3052: "Dice 5",
        3053: "Dice 6",
        3200: "HI",
        3201: "LO",
        3202: "11 Hi-Lo",
        3203: "Dice 1",
        3204: "Dice 2",
        3205: "Dice 3",
        3206: "Dice 4",
        3207: "Dice 5",
        3208: "Dice 6",
        3209: "HiLo 1-2",
        3210: "HiLo 1-3",
        3211: "HiLo 1-4",
        3212: "HiLo 1-5",
        3213: "HiLo 1-6",
        3214: "HiLo 2-3",
        3215: "HiLo 2-4",
        3216: "HiLo 2-5",
        3217: "HiLo 2-6",
        3218: "HiLo 3-4",
        3219: "HiLo 3-5",
        3220: "HiLo 3-6",
        3221: "HiLo 4-5",
        3222: "HiLo 4-6",
        3223: "HiLo 5-6",
        3224: "1-Lo",
        3225: "2-Lo",
        3226: "3-Lo",
        3227: "4-Lo",
        3228: "5-Lo",
        3229: "6-Lo",
        3230: "3-Hi",
        3231: "4-Hi",
        3232: "5-Hi",
        3233: "6-Hi",
        3234: "1,2,3",
        3235: "2,3,4",
        3236: "3,4,5",
        3237: "4,5,6",
        3301: "Fish",
        3302: "Prawn",
        3303: "Calabash",
        3304: "Coin",
        3305: "Crab",
        3306: "Cock",
        3307: "Specific Single Red",
        3308: "Specific Single Green",
        3309: "Specific Single Blue",
        3310: "Specific Double Red",
        3311: "Specific Double Green",
        3312: "Specific Double Blue",
        3313: "Specific Triple Red",
        3314: "Specific Triple Green",
        3315: "Specific Triple Blue",
        3316: "Any Triple Color",
        3317: "Calabash & Prawn",
        3318: "Calabash & Fish",
        3319: "Calabash & Cock",
        3320: "Calabash & Crab",
        3321: "Calabash & Coin",
        3322: "Prawn & Fish",
        3323: "Prawn & Cock",
        3324: "Prawn & Crab",
        3325: "Prawn & Coin",
        3326: "Fish & Cock",
        3327: "Fish & Crab",
        3328: "Fish & Coin",
        3329: "Cock & Crab",
        3330: "Cock & Coin",
        3331: "Crab & Coin",
        3401: "Impar",
        3402: "Par",
        3403: "1Fan",
        3404: "2Fan",
        3405: "3Fan",
        3406: "4Fan",
        3407: "1Nim2",
        3408: "1Nim3",
        3409: "1Nim4",
        3410: "2Nim1",
        3411: "2Nim3",
        3412: "2Nim4",
        3413: "3Nim1",
        3414: "3Nim2",
        3415: "3Nim4",
        3416: "4Nim1",
        3417: "4Nim2",
        3418: "4Nim3",
        3419: "23 One Nga",
        3420: "24 One Nga",
        3421: "34 One Nga",
        3422: "13 Two Nga",
        3423: "14 Two Nga",
        3424: "34 Two Nga",
        3425: "12 Three Nga",
        3426: "14 Three Nga",
        3427: "24 Three Nga",
        3428: "13 Four Nga",
        3429: "12 Four Nga",
        3430: "23 Four Nga",
        3431: "SSH 123",
        3432: "SSH 124",
        3433: "SSH 134",
        3434: "SSH 234",
        3435: "12 Kwok",
        3436: "23 Kwok",
        3437: "34 Kwok",
        3438: "41 Kwok",
        3500: "TIE",
        3501: "Pequeño",
        3502: "Grande",
        3503: "Impar",
        3504: "Par",
        3505: "0",
        3506: "1",
        3507: "3",
        3508: "4",
        4001: "1 - 18",
        4002: "Par",
        4003: "Rojo",
        4004: "Negro",
        4005: "Impar",
        4006: "19 - 36",
        4007: "1st Dozen",
        4008: "2nd Dozen",
        4009: "3rd Dozen",
        4010: "1ª columna",
        4011: "2ª columna",
        4012: "3ª columna",
        4013: "Straight 0",
        4014: "Straight 1",
        4015: "Straight 2",
        4016: "Straight 3",
        4017: "Straight 4",
        4018: "Straight 5",
        4019: "Straight 6",
        4020: "Straight 7",
        4021: "Straight 8",
        4022: "Straight 9",
        4023: "Straight 10",
        4024: "Straight 11",
        4025: "Straight 12",
        4026: "Straight 13",
        4027: "Straight 14",
        4028: "Straight 15",
        4029: "Straight 16",
        4030: "Straight 17",
        4031: "Straight 18",
        4032: "Straight 19",
        4033: "Straight 20",
        4034: "Straight 21",
        4035: "Straight 22",
        4036: "Straight 23",
        4037: "Straight 24",
        4038: "Straight 25",
        4039: "Straight 26",
        4040: "Straight 27",
        4041: "Straight 28",
        4042: "Straight 29",
        4043: "Straight 30",
        4044: "Straight 31",
        4045: "Straight 32",
        4046: "Straight 33",
        4047: "Straight 34",
        4048: "Straight 35",
        4049: "Straight 36",
        4050: "Three Numbers 0/1/2",
        4051: "Three Numbers 0/2/3",
        4052: "Four Numbers 0/1/2/3",
        4053: "Seperate(0/1)",
        4054: "Seperate(0/2)",
        4055: "Seperate(0/3)",
        4056: "Seperate(1/2)",
        4057: "Seperate(2/3)",
        4058: "Seperate(4/5)",
        4059: "Seperate(5/6)",
        4060: "Seperate(7/8)",
        4061: "Seperate(8/9)",
        4062: "Seperate(10/11)",
        4063: "Seperate(11/12)",
        4064: "Seperate(13/14)",
        4065: "Seperate(14/15)",
        4066: "Seperate(16/17)",
        4067: "Seperate(17/18)",
        4068: "Seperate(19/20)",
        4069: "Seperate(20/21)",
        4070: "Seperate(22/23)",
        4071: "Seperate(23/24)",
        4072: "Seperate(25/26)",
        4073: "Seperate(26/27)",
        4074: "Seperate(28/29)",
        4075: "Seperate(29/30)",
        4076: "Seperate(31/32)",
        4077: "Seperate(32/33)",
        4078: "Seperate(34/35)",
        4079: "Seperate(35/36)",
        4080: "Seperate(1/4)",
        4081: "Seperate(4/7)",
        4082: "Seperate(7/10)",
        4083: "Seperate(10/13)",
        4084: "Seperate(13/16)",
        4085: "Seperate(16/19)",
        4086: "Seperate(19/22)",
        4087: "Seperate(22/25)",
        4088: "Seperate(25/28)",
        4089: "Seperate(28/31)",
        4090: "Seperate(31/34)",
        4091: "Seperate(2/5)",
        4092: "Seperate(5/8)",
        4093: "Seperate(8/11)",
        4094: "Seperate(11/14)",
        4095: "Seperate(14/17)",
        4096: "Seperate(17/20)",
        4097: "Seperate(20/23)",
        4098: "Seperate(23/26)",
        4099: "Seperate(26/28)",
        4100: "Seperate(28/32)",
        4101: "Seperate(32/35)",
        4102: "Seperate(3/6)",
        4103: "Seperate(6/9)",
        4104: "Seperate(9/12)",
        4105: "Seperate(12/15)",
        4106: "Seperate(15/18)",
        4107: "Seperate(18/21)",
        4108: "Seperate(21/24)",
        4109: "Seperate(24/27)",
        4110: "Seperate(27/30)",
        4111: "Seperate(30/33)",
        4112: "Seperate(33/36)",
        4113: "Corner(1/5)",
        4114: "Esquina(2/6)",
        4115: "Esquina(4/8)",
        4116: "Esquina(5/9)",
        4117: "Esquina(7/11)",
        4118: "Esquina(8/12)",
        4119: "Esquina(10/14)",
        4120: "Esquina(11/15)",
        4121: "Esquina(13/17)",
        4122: "Esquina(14/18)",
        4123: "Esquina(16/20)",
        4124: "Esquina(17/21)",
        4125: "Esquina(18/23)",
        4126: "Esquina(20/24)",
        4127: "Esquina(22/26)",
        4128: "Esquina(23/27)",
        4129: "Esquina(25/29)",
        4130: "Esquina(26/30)",
        4131: "Esquina(28/32)",
        4132: "Esquina(29/33)",
        4133: "Esquina(31/35)",
        4134: "Esquina(32/36)",
        4135: "Street(1-3)",
        4136: "Street(4-6)",
        4137: "Street(7-9)",
        4138: "Street(10-12)",
        4139: "Street(13-15)",
        4140: "Street(16-18)",
        4141: "Street(19-21)",
        4142: "Street(22-24)",
        4143: "Street(25-27)",
        4144: "Street(28-30)",
        4145: "Street(31-33)",
        4146: "Street(34-36)",
        4147: "Line(1-6)",
        4148: "Line(4-9)",
        4149: "Line(7-12)",
        4150: "Line(10-15)",
        4151: "Line(13-18)",
        4152: "Line(16-21)",
        4153: "Line(19-24)",
        4154: "Line(22-27)",
        4155: "Line(28-33)",
        4156: "Line(31-36)",
        4157: "Line(25-30)",
        5001: "P1",
        5002: "P2",
        5003: "P3",
        5004: "P4",
        5005: "P5",
        5011: "P1 pareja",
        5012: "P2 pareja",
        5013: "P3 pareja",
        5014: "P4 pareja",
        5015: "P5 pareja",
        5101: "P1",
        5102: "P2",
        5103: "P3",
        5104: "P4",
        5105: "P5",
        5106: "Banca1",
        5107: "Banca2",
        5108: "Banca3",
        5109: "Banca4",
        5110: "Banca5",
        5111: "Banca pareja",
        6201: "ANDAR",
        6202: "BAHAR",
        6203: "1-5 cartas",
        6204: "6-10 cartas",
        6205: "11-15 cartas",
        6206: "16-25 cartas",
        6207: "26-30 cartas",
        6208: "31-35 cartas",
        6209: "36-40 cartas",
        6210: "41+ cartas",
        6211: "1er ANDAR",
        6212: "1er BAHAR",
        6301: "Jugador A",
        6302: "Jugador B",
        6303: "Tie",
        6304: "Jugador A pareja+",
        6305: "Jugador B pareja+",
        6306: "Bonificación de 6 tarjetas",
        7201: "Jugador 1 Ante",
        7202: "Jugador 1 Ciega",
        7203: "Jugador 1 Trips",
        7204: "Player 1 Raise 4x",
        7205: "Player 1 Raise 3x",
        7206: "Player 1 Raise 2x",
        7207: "Player 1 Raise 1x",
        7211: "Jugador 2 Ante",
        7212: "Jugador 2 Ciega",
        7213: "Jugador 2 Trips",
        7214: "Player 2 Raise 4x",
        7215: "Player 2 Raise 3x",
        7216: "Player 2 Raise 2x",
        7217: "Player 2 Raise 1x",
        7221: "Jugador 3 Ante",
        7222: "Jugador 3 Ciega",
        7223: "Jugador 3 Trips",
        7224: "Player 3 Raise 4x",
        7225: "Player 3 Raise 3x",
        7226: "Player 3 Raise 2x",
        7227: "Player 3 Raise 1x",
        7301: "Jugador 1 Ante",
        7302: "Player 1 1st Tie",
        7303: "Jugador 1 War",
        7304: "Player 1 2nd Tie",
        7311: "Jugador 2 Ante",
        7312: "Player 2 1st Tie",
        7313: "Jugador 2 War",
        7314: "Player 2 2nd Tie",
        7321: "Jugador 3 Ante",
        7322: "Player 3 1st Tie",
        7323: "Jugador 3 War",
        7324: "Player 3 2nd Tie",
        7401: "Ante",
        7402: "Ante Double",
        7403: "Split",
        7404: "Any Pair",
        7405: "Lucky 3",
        7406: "Hot 3",
        7407: "Bust It",
        7408: "Insurance",
        7409: "Lucky Ladies",
        8001: "Banker 1 (Equal)",
        8002: "Banker 2 (Equal)",
        8003: "Banker 3 (Equal)",
        8011: "Banker 1 (Double)",
        8012: "Banker 2 (Double)",
        8013: "Banker 3 (Double)",
        8021: "Banker 1 (Super Bull)",
        8022: "Banker 2 (Super Bull)",
        8023: "Banker 3 (Super Bull)",
        8101: "Player 1 (Equal)",
        8102: "Player 2 (Equal)",
        8103: "Player 3 (Equal)",
        8111: "Player 1 (Double)",
        8112: "Player 2 (Double)",
        8113: "Player 3 (Double)",
        8121: "Player 1 (Super Bull)",
        8122: "Player 2 (Super Bull)",
        8123: "Player 3 (Super Bull)",
        9001: "Dragon",
        9002: "Phoenix",
        9003: "Pair 8+",
        9004: "Straight",
        9005: "Flush",
        9006: "Straight Flush",
        9007: "Three of a Kind",
        9101: "Dragon",
        9102: "Phoenix",
        9103: "Tie",
        9114: "Dragon Three Pictures",
        9124: "Phoenix Three Pictures",
        additional_result: {
            235: "235",
            "1st_dozen": "1<sup>st</sup> Dozen",
            "2nd_dozen": "2<sup>nd</sup> Dozen",
            "3rd_dozen": "3<sup>rd</sup> Dozen",
            big_dice: "Grande",
            bull_1: "Bull 1",
            bull_2: "Bull 2",
            bull_3: "Bull 3",
            bull_4: "Bull 4",
            bull_5: "Bull 5",
            bull_6: "Bull 6",
            bull_7: "Bull 7",
            bull_8: "Bull 8",
            bull_9: "Bull 9",
            bull_bull: "Bull Bull",
            double_pictures: "Double Pictures",
            even: "Par",
            five_dukes: "5 Dukes",
            flush: "Flush",
            four_of_a_kind: "Cuatro iguales",
            full_house: "Full House",
            high_card: "High Card",
            no_bull: "Sin Bull",
            not_qualified: "No cualificado",
            odd: "Impar",
            pair: "Pair",
            royal_flush: "Escalera real",
            single_picture: "Single Picture",
            small_dice: "Pequeño",
            straight: "Straight",
            straight_flush: "Straight Flush",
            three_of_a_kind: "Three of a Kind",
            triple_dice: "Triple",
            triple_pictures: "Tres fotografías",
            two_pairs: "Two Pairs"
        }
    }, error_code$9 = {
        1: "Error interno del servidor [1]",
        101: "Se ha superado el límite de la apuesta de selección",
        102: "Tiempo límite excedido [102]",
        103: "Apuesta(s) fallida(s) (Límite del bote excedido) [103]",
        104: "Bet(s) Failed(Below Selection Bet Limit)",
        404: "Unable to connect to the server. Please check the network settings",
        5e3: "Error desconocido [5000]",
        5001: "¡Demasiadas solicitudes! [5001]",
        6e3: "La red está desconectada, conéctese de nuevo",
        6001: "Network Error [6001]",
        6002: "No se ha podido obtener información de créditos. [6002]",
        6003: "¡Cuenta o contraseña incorrecta! [6003]",
        6004: "Prohibir inicio de sesión. [6004]",
        6005: "¡No tiene hándicap! [6005]",
        6006: "No encuentro el registro de mensajes MultiPlay. [6006]",
        6007: "Si no encuentra a su agente, póngase en contacto con el servicio de atención al cliente. [6007]",
        6008: "Su cuenta ha sido conectada de nuevo. [6008]",
        6010: "El restablecimiento de la contraseña no tiene éxito [6010]",
        6011: "El formato de la contraseña es incorrecto [6011]",
        6012: "La contraseña no puede estar vacía (6012) [6012]",
        6013: "The password is limited to 10 characters! [6013]",
        6015: "¡Fallo! El jugador no puede seguir al mismo jugador repetidamente. [6015]",
        6016: "No se puede seguir a este jugador, se ha alcanzado el máximo de 20 seguidores [6016]",
        6018: "¡La mesa de juego se ha cerrado! [6018]",
        6019: "Table is under maintenance! [6019]",
        6020: "Esta es una mesa de juego privada. [6020]",
        6021: "Este asiento está ocupado, ¡inténtelo con otro! [6021]",
        6022: "¡Fallo! Vuelva a intentarlo más tarde. [6022]",
        6023: "No se pudo buscar mesa con límite de apuestas, por favor, introduzca de nuevo. [6023]",
        6024: "No se ha podido buscar la mesa de juego, introduzca de nuevo. [6024]",
        6025: "¡No pude encontrar un asiento adecuado! [6025]",
        6026: "Fallo al entrar en la mesa de juego, inténtelo de nuevo! [6026]",
        6027: "Esta mesa está llena, ¡pruebe otra mesa de juego! [6027]",
        6028: "Ha apostado en asiento en esta ronda, pulse en 'entrar' en el vestíbulo ¡para entrar en la mesa de juego! [6028]",
        6029: "La mesa de juego {0} ha sido reservada. Elija unirse o hacer una apuesta colateral. [6029]",
        6030: "¡El propietario de la mesa se ha ido! [6030]",
        6031: "Es el propietario de la mesa, no puede cambiar de asiento. [6031]",
        6032: "Ha hecho una apuesta colateral esta ronda. No puede entrar en la mesa de juego como compañero de mesa. [6032]",
        6033: "Ha apostado en asiento esta ronda. No se puede entrar en la mesa por Side-Bet. [6033]",
        6034: "Esta mesa no está reservada, no puede unirse. [6034]",
        6035: "Lo sentimos, su saldo es inferior a {0}. Puede unirse por apuesta colateral [6035]",
        6037: "¡Apuesta(s) fallida(s)! [6037]",
        6038: "¡Fallo! Crédito ilegal cambiado. [6038]",
        6039: "¡Fallo! ¡El sistema está ocupado! [6039]",
        6040: "Too many requests! Please login again. [6040]",
        6041: "¡Fallo! No se encuentra la ronda de juego. [6041]",
        6042: "¡Fallo! Su crédito no es suficiente. [6042]",
        6043: "Bet Failed! It's over maximum lose. [6043]",
        6044: "¡Fallo! Deje de apostar. [6044]",
        6045: "¡Fallo! La información no es correcta. [6045]",
        6046: "¡Fallo! ¡Conflicto de operación! [6046]",
        6047: "¡Apuesta ilegal! [6047]",
        6048: "Después de 30 rondas, ¡no se puede apostar ni a grande ni a pequeña! [6048]",
        6049: "¡Apuesta no válida! [6049]",
        6050: "Bet Failed! It's over maximum limit [6050]",
        6052: "Ha apostado, ¡no puedes saltarse esta ronda! [6052]",
        6053: "Cartas reveladas, ¡no puede saltarse esta ronda! [6053]",
        6054: "La ronda de juego aún no ha empezado, ¡no puede saltarse esta ronda! [6054]",
        6055: "Ya se ha saltado 5 rondas seguidas. Haga sus apuestas. [6055]",
        6057: "¡El crupier no está aquí! [6057]",
        6058: "Operación ilegal. [6058]",
        6059: "No se encuentra la mesa de juego. [6059]",
        6060: "¡Idioma no soportado! [6060]",
        6061: "Operación no válida [6061]",
        6062: "¡Parámetros de error! [6062]",
        6063: "No se ha encontrado el salón de juegos, vuelva a entrar. [6063]",
        6064: "¡El sistema está en mantenimiento! [6064]",
        6065: "¡No pude encontrar mesa o asiento con límite adecuados! [6065]",
        6066: "La mesa de juego no existe. [6066]",
        6067: "No se ha encontrado la mesa de juego, vuelva a entrar. [6067]",
        6068: "¡Error de contraseña! [6068]",
        6069: "Si no se hace ninguna apuesta, ¡no se pueden revelar las cartas! [6069]",
        6070: "¡Fallo! Ha hecho una apuesta colateral en esta ronda, inténtelo de nuevo cuando termine esta ronda. [6070]",
        6071: "¡No tiene esta mesa! [6071]",
        6072: "Esta mesa ya está llena, ¡intente una apuesta colateral! [6072]",
        6073: "El propietario de la mesa ha establecido contraseñas [6073]",
        6074: "No ha apostado más de 4 minutos y salió automáticamente de la mesa de juego({{0}}). [6074]",
        6075: "El ID de sesión ha caducado, vuelva a intentarlo. [6075]",
        6076: "Error de ID de sesión, vuelva a intentarlo. [6076]",
        6077: "El ID de sesión no se puede reutilizar, vuelva a intentarlo. [6077]",
        6078: "You are logged out of the game. [6078]",
        6079: "¡La plataforma está en mantenimiento! [6079]",
        6080: "No se ha podido entrar en la mesa, inténtelo de nuevo. [6080]",
        6081: "No se ha podido reservar mesa, inténtelo de nuevo. [6081]",
        6082: "El uso de su cuenta está prohibido en su región [6082]",
        6083: "Apuesta(s) fallida(s) Ha apostado por la Comisión en esta ronda. [6083]",
        6084: "Apuesta(s) fallida(s). Ha apostado a sin comisión en esta ronda. [6084]",
        6085: "Hándicap no válido, no puede [Reservar/Unirse]. Pruebe [Apuesta colateral]. [6085]",
        6086: "Se ha restablecido la contraseña. ¡Vuelva a iniciar sesión! [6086]",
        6087: "La contraseña nueva y la actual no pueden ser las mismas [6087]",
        6088: "No está permitido entrar en esta mesa de juego según el hándicap VIP actual. Si necesita un ajuste de hándicap VIP, póngase en contacto con el servicio de atención al cliente o con su agente superior [6088].",
        6090: "Tiempo de espera de solicitud [6090]",
        6091: "Error de inicio de sesión [6091]",
        6092: "Ha cerrado la sesión del juego [6092]",
        6093: "El código de verificación es incorrecto. Vuelva a intentarlo [6093]",
        6094: "Su prueba gratuita ha expirado (15 minutos), ha salido del juego [6094]",
        6095: "La verificación sólo puede enviarse una vez por ronda [6095]",
        6096: "Operación no válida [6096]",
        6097: "Estado incorrecto al realizar la verificación [6097]",
        6098: "Not allowed to bet on pair related field after <number> rounds ",
        6099: "No hay paquete rojo que recoger [6099]",
        6100: "Ya se ha recogido el paquete rojo [6100]",
        6101: "La actividad no ha comenzado todavía [6101]",
        6102: "El estado de actividad es ilegal [6102]",
        6103: "No listo para reclamar rpa [6103]",
        6111: "El jugador se ha retirado en esta ronda [6111]",
        6112: "El jugador ha pasado esta ronda [6112]",
        6113: "Estado ilegal de apuestas en sub rondas [6113]",
        6114: "No en estado de apuestas [6114]",
        6115: "No se permite apostar en trips sin ante/ciega [6115]",
        6116: "Ante y ciega deben apostarse juntas [6116]",
        6117: "El ante y la ciega deben ser iguales [6117]",
        6118: "El jugador sólo puede apostar al ante/ciega/trips en la primera ronda [6118]",
        6119: "El jugador sólo puede apostar 4 veces/3 veces en la segunda ronda [6119]",
        6120: "El jugador sólo puede apostar 2 veces en la tercera ronda [6120]",
        6121: "El jugador sólo puede apostar 1 vez en la última ronda [6121]",
        6122: "Importe de apuesta no válido [6122]",
        6123: "No se permite subir la apuesta sin ante [6123]",
        6124: "Subida duplicada [6124]",
        6126: "No bet on 6 consecutive game rounds is detected, auto-exited game table. [6126]",
        6200: "Tiempo de respuesta agotado. Póngase en contacto con nuestro servicio de atención al cliente. [6200]",
        6201: "Tiempo de respuesta agotado. Póngase en contacto con nuestro servicio de atención al cliente. [6201]",
        6202: "Tiempo de respuesta agotado. Póngase en contacto con nuestro servicio de atención al cliente. [6202]",
        6203: "Tiempo de respuesta agotado. Póngase en contacto con nuestro servicio de atención al cliente. [6203]",
        6204: "Tiempo de respuesta agotado. Póngase en contacto con nuestro servicio de atención al cliente. [6204]",
        100001: "Your agent have not enable your mobile login",
        200001: "Se ha producido un error. Póngase en contacto con el CSD (Departamento de Servicio al Cliente) para más detalles. [1000]",
        200002: "Tiempo de espera del sistema, cierre la ventana de juego actual e inténtelo de nuevo. [1001]",
        200003: "Tiempo de espera del sistema, cierre la ventana de juego actual e inténtelo de nuevo. [1002]",
        200004: "Se ha producido un error. Póngase en contacto con el CSD (Departamento de Servicio al Cliente) para más detalles. [1003]",
        200005: "Se ha producido un error. Póngase en contacto con el CSD (Departamento de Servicio al Cliente) para más detalles. [1004]",
        200006: "Se ha producido un error. Póngase en contacto con el CSD (Departamento de Servicio al Cliente) para más detalles. [1005]",
        200007: "Se ha producido un error. Póngase en contacto con el CSD (Departamento de Servicio al Cliente) para más detalles. [1006]",
        200008: "Se ha producido un error. Póngase en contacto con el CSD (Departamento de Servicio al Cliente) para más detalles. [1007]",
        200009: "Se ha producido un error. Póngase en contacto con el CSD (Departamento de Servicio al Cliente) para más detalles. [1008]",
        200011: "Se ha cerrado la cuenta. Póngase en contacto con su línea ascendente para obtener más información, gracias. [2002]",
        200012: "Se ha producido un error. Póngase en contacto con el CSD (Departamento de Servicio al Cliente) para más detalles. [2003]",
        200013: "Se ha producido un error. Póngase en contacto con el CSD (Departamento de Servicio al Cliente) para más detalles. [3001]",
        200014: "Su cuenta no tiene saldo suficiente. [3002]",
        200015: "Su apuesta ha superado el límite establecido, inténtelo de nuevo. [3003]",
        200016: "Juego desactivado. Póngase en contacto con su línea ascendente para obtener más información. [3004]",
        200017: "Se ha producido un error. Póngase en contacto con el CSD (Departamento de Servicio al Cliente) para más detalles. [3005]",
        200018: "¡Límite de ganancias alcanzado! Póngase en contacto con su línea ascendente. [3006]",
        200019: "¡Límite de pérdidas alcanzado! Póngase en contacto con su línea ascendente. [3007]",
        200020: "No tiene límite de apuesta para este juego, contacte con su línea ascendente para establecerlo. [3008]",
        200021: "Su límite de apuestas ha sido modificado, inicie sesión de nuevo para aplicar la nueva configuración.[3009]",
        200022: "La cuenta ha sido suspendida. Póngase en contacto con su línea ascendente para obtener más información, gracias. [3010]",
        200023: "La cuenta ha sido suspendida. Póngase en contacto con su línea ascendente para obtener más información, gracias. [3013]",
        200024: "El juego no está disponible en este momento. Para más información, póngase en contacto con el CSD (Departamento de Servicio al Cliente). [3014]"
    }, error_msg$9 = {
        ban: "Your account has been logged in elsewhere. ",
        kick: "Session expired. Please reconnect to the platform!",
        processing_game_bet: "Your bet is being processed, please wait.",
        quitGame: "Press OK to quit game",
        relogin: "Press OK to return to the login page.",
        unknown: "The network is disconnected, press OK to quit game",
        connection: {
            connection_problem: "Press OK to connect back to the game.",
            server_connection_problem: "Press OK to connect back to the game."
        },
        idle: {
            disconnected_reconnect: "Press OK to connect back to the game.",
            disconnected_to_server: "Press OK to connect back to the game."
        }
    }, fast_bet$9 = {title: "Fast Bet"}, game_hall$9 = {
        banner_more_detail: "View More",
        feature_games: "Feature Games",
        good_roads: "Good Road",
        hot_games: "Juegos populares",
        multi_play: "Multi Play",
        view_all: "View All",
        vip_betlimit: "Límite de la apuesta",
        vip_enter: "Entrar",
        vip_min_enter: "Saldo mín.",
        vip_occupied: "Reservado",
        vip_reserve: "Reservar",
        subtypes: {
            all: "TODO",
            classic: "Clásico",
            insurance: "Insurance",
            quick: "Quick",
            see: "Ver carta",
            sexy: "Sweetie",
            vip: "VIP"
        }
    }, game_rules$9 = {
        attention: "Attention",
        game_rules: "Reglas de juego",
        introduction: "Introduction",
        payoff: "Pago",
        title: "Help"
    }, game_table$9 = {
        balanace: "Saldo",
        deposit: "Depósito",
        deposit_short: "D",
        total_bet: "Apuesta total",
        trial: "Prueba",
        baccarat: {no_comm: "Sin comisión"},
        blackjack: {
            all_side_bets: "ALL SIDE BETS",
            ante_first: "PLEASE BET ANTE FIRST",
            banker: "Banker",
            double: "Doble",
            hit: "HIT",
            insufficient_insurance: "Not enough balance for insurance",
            insurance: "Insurance?",
            other_decison: "Other players are making decision",
            player: "Player",
            split: "SPLIT",
            stand: "STAND",
            instruction: {
                213: {
                    content: "Win if the combination of the player's initial cards and the dealer's up card form a specific card type.",
                    title: "LUCKY 3"
                },
                label: "INSTRUCTION",
                ante: {
                    content: "Win if the player's hand value is closer to 21 than the dealer's hand and does not exceed 21.",
                    title: "Ante"
                },
                bust: {content: "Win if the dealer busts.", title: "BUST IT"},
                hot3: {
                    content: "Win if the card value of the player's initial cards and the dealer's up card total 19 - 21.",
                    title: "HOT 3"
                },
                lucky_ladies: {
                    content: "Win if the player's initial cards formed a specific card type.",
                    title: "LUCKY LADIES"
                },
                pair: {content: "Win if the player's initial cards are pair.", title: "ANY PAIR"}
            }
        },
        bullbull: {
            banker: "Banca",
            banker_allwin: "BANKER ALL WIN",
            first_card: "FIRST CARD",
            player_allwin: "PLAYER ALL WIN"
        },
        casino_war: {
            "1st_tie": "1er empate",
            "2nd_tie": "2º empate",
            banker: "Banca",
            decision: "MAKE YOUR DECISION",
            player_1: "Jugador1",
            player_2: "Jugador2",
            player_3: "Jugador3",
            surrender: "Rendición"
        },
        fpc: {any_two_dice: "ANY TWO DICE", both_one_dice: "BOTH ONE DICE"},
        roulette: {orphelins: "orphelins", tier: "tier", voisins: "voisins", zero: "Cero"},
        seecard: {other_squeezing: "Other players are squeezing cards"},
        teen_patti: {pair_plus: "Pareja+"},
        uth: {
            banker: "Banca",
            community: "COMMUNITY",
            decision: "MAKE YOUR DECISION",
            play: "Jugar",
            player_1: "Jugador1",
            player_1_short: "P1",
            player_2: "Jugador2",
            player_2_short: "P2",
            player_3: "Jugador3",
            player_3_short: "P3",
            raise1x: "RAISE 1x",
            raise2x: "RAISE 2x",
            raise3x: "RAISE 3x",
            raise4x: "RAISE 4x"
        },
        vip: {
            owner_squeezing: "Owner is squeezing cards",
            owner_tooltip: "OWNER",
            reserve_action_tooltip: "Reservar",
            reserve_betlimit: "Límite de la apuesta",
            reserve_min_enter: "Saldo mín.",
            reserve_request: "Table reserved. You will be the owner next round.",
            reserved_tooltip: "Reservar",
            shuffle_request: "Su solicitud de reproducción aleatoria ha sido enviada. La barajada comenzará en 5 minutos",
            shuffle_tooltip: "Barajar",
            skip_tooltip: "Saltar",
            start_tooltip: "Start"
        }
    }, game_types$9 = {
        101: "Baccarat",
        102: "VIP Baccarat (Legacy)",
        103: "Baccarat Rápido",
        104: "Ver carta Baccarat",
        110: "Baccarat con Seguro",
        111: "VIP Baccarat",
        201: "Sic Bo",
        202: "Pescado Camarón Cangrejo",
        203: "Xoc Dia",
        301: "Dragón Tigre",
        401: "Ruleta",
        501: "Pok Deng Clásico",
        602: "Andar Bahar",
        603: "Teen Patti 20-20",
        702: "Ultimate Texas Hold’em",
        703: "Guerra de Casino",
        704: "BlackJack Infinito",
        801: "Bull Bull",
        901: "Ganar 3 Cartas",
        "201_Alt": "Hi Lo",
        "201_Alt_2": "Sic Tan",
        "501_Alt": "Pok Deng Dos Lados",
        "901_Alt": "Tres fotografías",
        "901_Alt_2": "Teen Patti 20-20",
        arcadeGame: "Casino Game",
        card_game: "Juego de cartas",
        cardGame: "Juego de cartas",
        classic: "Clásico",
        fishingGame: "Pesca AB",
        game_hall: "Lobby",
        multi_hall: "Multi Play",
        sexy: "Sweetie",
        slotGame: "Slot Game",
        UTH_Short: "Ult. Texas"
    }, gamehall_table$9 = {
        maintaining: "Mantenimiento",
        notable: "No table available",
        good_road: {
            100: "Banca larga",
            101: "Jugador larga",
            102: "Single Road",
            103: "One P Two B",
            104: "One B Two P",
            105: "Patted eat",
            106: "B across P",
            107: "P across B",
            108: "Separated B",
            109: "Separated P"
        }
    }, header$9 = {
        bet_record: "Registros de apuestas",
        card_game: "AB FISHING",
        exitfullscreen: "Exit Fullscreen",
        fullscreen: "Fullscreen",
        hot_games: "LOBBY",
        live_games: "LIVE GAMES",
        logout: "Cierre de sesión",
        multi_table: "MULTIPLAY",
        profile: "Perfil",
        services: "Services",
        Version: "Version"
    }, login$9 = {
        free_trial: "Prueba gratuita",
        login: "Inicio de sesión",
        password: "Contraseña",
        username: "Nombre de usuario"
    }, menu$9 = {
        addToHomeScreenForIOS: "ADD TO      HOME SCREEN",
        back: "BACK TO LOBBY",
        downloadApp: "Descargar APP",
        exitfullscreen: "EXIT FULLSCREEN",
        fast_bet: "FAST BET",
        fullscreen: "Fullscreen",
        guide: "HELP",
        history: "Registros de apuestas",
        installation_instruction: "Instruction",
        installPwa: "INSTALL",
        lobby: "Lobby",
        loginApp: "APP de inicio de sesión",
        payout: "Pago",
        settings: "Ajustes",
        title: "Menu",
        verification: "VERIFY",
        video: "RELOAD"
    }, messages$9 = {
        all_in: "Con todo",
        bet_success: "Apuesta(s) confirmada(s)",
        cancel: "Cancelar",
        game_table_verified: "Verification has been sent, please check the verificaiton result on the screen",
        idle_video: "VIDEO PAUSED DUE TO INACTIVITY. PRESS OK TO RESUME",
        insufficient_bet_balance: "Saldo insuficiente",
        insufficient_vip_balance: "Cantidad insuficiente",
        landscape_block: "Rotate your mobile device for best experience",
        loading: "LOADING",
        logout: "Are you sure you want to logout ",
        logoutOK: "Cierre de sesión",
        lost: "YOU LOST",
        multi_side_hall_filter: "Filter cannot be empty, please select at least one game type.",
        nickname_success: "Nickname updated!",
        ok_button: "OK",
        screen_size_block: "Por favor, redimensiona la ventana para la mejor experiencia",
        table_not_found: "Game table is not found",
        table_under_maintenance: "Game table is under maintenance",
        won: "YOU WON"
    }, payout$9 = {
        bet: "Apuesta", bet_limit: "Límite de la apuesta", odds: "Probabilidades", payout: "Pago", bet_type: {
            1001: "Banca",
            1002: "Jugador",
            1003: "TIE",
            1006: "B Pareja",
            1007: "P Pareja",
            1011: "Banca (sin comisión)",
            1100: "Afortunado 6",
            1211: "Banca natural",
            1212: "Jugador natural",
            1223: "Cualquier pareja",
            1224: "PERFECT PAIR",
            1231: "Banca Dragon Bonus",
            1232: "Jugador Dragon Bonus",
            1401: "Tiger",
            1402: "Big Tiger",
            1403: "Small Tiger",
            1404: "Tiger empate",
            1405: "Tiger Pair",
            1501: "Banca Fabulous 4",
            1502: "Jugador Fabulous 4",
            1503: "Banca Precious Pair",
            1504: "Jugador Precious Pair",
            1601: "Banca negro",
            1602: "Banca rojo",
            1603: "Jugador negro",
            1604: "Jugador rojo",
            1605: "Cualquier 6",
            2001: "DRAGON",
            2002: "Tiger",
            2003: "TIE",
            3001: "BIG / SMALL",
            3002: "EVEN / ODD",
            3005: "Triple específico",
            3011: "Cualquier triple",
            3012: "Doble específico",
            3018: "Suma 4/17",
            3019: "Suma 5/16",
            3020: "Suma 6/15",
            3021: "Suma 7/14",
            3022: "Suma 8/13",
            3023: "Suma 9/10/11/12",
            3033: "TWO DICE COMBINATION",
            3048: "ONE DICE",
            3049: "TWO DICE",
            3050: "THREE DICE",
            3200: "HI",
            3201: "LO",
            3202: "11 Hi-Lo",
            3203: "Dado 1-6",
            3209: "TWO DICE COMBINATION",
            3224: "2 Lo",
            3225: "3 Lo",
            3226: "3-Lo",
            3227: "4-Lo",
            3228: "5 - 6 LO",
            3230: "3 - 4 HI",
            3232: "5 HI",
            3233: "6 HI",
            3234: "THREE DICE COMBINATION",
            3301: "MAIN SYMBOL",
            3307: "SPECIFIC SINGLE COLOR",
            3310: "SPECIFIC DOUBLE COLOR",
            3313: "SPECIFIC TRIPOLE COLOR",
            3316: "ANY TRIPLE COLOR",
            3317: "TWO DICE COMBINATION",
            3401: "ODD / EVEN",
            3403: "FAN",
            3407: "NIM",
            3419: "NGA",
            3431: "SSH",
            3435: "12 KWOK / 23 KWOK / 34 KWOK",
            3438: "41 KWOK",
            3500: "TIE",
            3501: "Pequeño",
            3502: "Grande",
            3503: "Impar",
            3504: "Par",
            3505: "0",
            3506: "1",
            3507: "3",
            3508: "4",
            4001: "BIG / SMALL",
            4002: "ODD / EVEN",
            4003: "RED / BLACK",
            4007: "Docena",
            4010: "COLUMN",
            4013: "STRAIGHT",
            4050: "Tres números",
            4052: "Cuatro números",
            4053: "SEPARATE",
            4113: "Esquina",
            4135: "STREET",
            4147: "Línea",
            5001: "PLAYER 1-5",
            5011: "PLAYER 1-5 PAIR",
            5101: "PLAYER 1-5",
            5106: "BANKER 1-5",
            5111: "Banca pareja",
            6201: "ANDAR",
            6202: "BAHAR",
            6203: "1-5 cartas",
            6204: "6-10 cartas",
            6205: "11-15 cartas",
            6206: "16-25 cartas",
            6207: "26-30 cartas",
            6208: "31-35 cartas",
            6209: "36-40 cartas",
            6210: "41+ cartas",
            6211: "1er ANDAR",
            6212: "1er BAHAR",
            6301: "Jugador A",
            6302: "Jugador B",
            6303: "TIE",
            6304: "PLAYER A PAIR PLUS",
            6305: "PLAYER B PAIR PLUS",
            6306: "Bonificación de 6 tarjetas",
            7201: "PLAYER 1 - 3 ANTE",
            7202: "PLAYER 1 - 3 BLIND",
            7203: "PLAYER 1 - 3 TRIPS",
            7301: "PLAYER 1 - 3 ANTE",
            7302: "PLAYER 1 - 3 1ST TIE",
            7304: "PLAYER 1 - 3 2ND TIE",
            7401: "Ante",
            7404: "ANY PAIR",
            7405: "Lucky 3",
            7406: "HOT 3",
            7407: "BUST IT",
            7409: "LUCKY LADIES",
            8001: "Banca1",
            8002: "Banca2",
            8003: "Banca3",
            8011: "Banca1",
            8012: "Banca2",
            8013: "Banca3",
            8021: "Banca1",
            8022: "Banca2",
            8023: "Banca3",
            8101: "Jugador1",
            8102: "Jugador2",
            8103: "Jugador3",
            8111: "Jugador1",
            8112: "Jugador2",
            8113: "Jugador3",
            8121: "Jugador1",
            8122: "Jugador2",
            8123: "Jugador3",
            9001: "DRAGON",
            9002: "PHOENIX",
            9003: "PAIR 8+",
            9004: "STRAIGHT",
            9005: "FLUSH",
            9006: "STRAIGHT FLUSH",
            9007: "THREE OF A KIND",
            9101: "DRAGON",
            9102: "PHOENIX",
            9103: "TIE",
            9114: "DRAGON 3 PICTURES",
            9124: "PHOENIX 3 PICTURES"
        }
    }, profile$9 = {
        save: "Save",
        title: "Perfil",
        main_view: {change_password: "Cambio de contraseña?", nickname: "ALIAS", pending: "Pendiente"},
        password_view: {
            confirm_password: "Confirmar contraseña",
            current_password: "Current Password",
            hints: "* Please enter alphanumeric string of 6-10 characters",
            new_password: "Nueva contraseña"
        }
    }, roadmap$9 = {
        analysis: "ANALYSIS",
        history: "HISTORY",
        last_10_rounds: "LAST 10 ROUNDS",
        last_50_rounds: "Últimas 50 rondas",
        last_6_rounds: "LAST 6 ROUNDS",
        round_num: "Round #",
        statistics: "STATISTICS",
        andar_bahar: {andar: "ANDAR", bahar: "BAHAR"},
        baccarat: {banker: "B", player: "P", predict_banker: "Predict Banker", predict_player: "Predict Player", tie: "T"},
        bull_bull: {
            game_hall: {
                0: "NB",
                1: "B1",
                2: "B2",
                3: "B3",
                4: "B4",
                5: "B5",
                6: "B6",
                7: "B7",
                8: "B8",
                9: "B9",
                A: "BB",
                B: "5D",
                banker: "B",
                player_1: "J1",
                player_2: "J2",
                player_3: "J3"
            },
            game_table: {
                0: "Sin Bull",
                1: "Bull 1",
                2: "Bull 2",
                3: "Bull 3",
                4: "Bull 4",
                5: "Bull 5",
                6: "Bull 6",
                7: "Bull 7",
                8: "Bull 8",
                9: "Bull 9",
                A: "Bull Bull",
                B: "5 Dukes",
                banker: "Banca",
                player_1: "Jugador1",
                player_2: "Jugador2",
                player_3: "Jugador3"
            }
        },
        casino_war: {banker: "B", player_1: "P1", player_2: "P2", player_3: "P3"},
        dragon_tiger: {dragon: "D", predict_dragon: "Predict Dragon", predict_tiger: "Predict Tiger", tie: "T", tiger: "T"},
        hi_lo: {hi: "HI", hi_lo: "11", lo: "LO"},
        pokdeng: {banker: "B", player_1: "P1", player_2: "P2", player_3: "P3", player_4: "P4", player_5: "P5"},
        roulette: {hot_cold: "HOT & COLD"},
        sicbo: {big: "Grande", small: "Pequeño", triple: "Triple"},
        sictan: {even: "Par", fan_1: "1 FAN", fan_2: "2 FAN", fan_3: "3 FAN", fan_4: "4 FAN", odd: "Impar"},
        teen_patti: {
            235: "235",
            flush: "Flush",
            four_of_a_kind: "Cuatro iguales",
            full_house: "Full House",
            high_card: "High Card",
            pair: "Pair",
            pair_plus: "PAIR+",
            player_a: "A",
            player_b: "B",
            royal_flush: "Escalera real",
            straight: "Straight",
            straight_flush: "Straight Flush",
            three_of_a_kind: "Three of a Kind",
            tie: "T"
        },
        three_pictures: {
            double_pictures: "DP",
            dragon: "D",
            phoenix: "P",
            single_picture: "SP",
            tie: "T",
            triple_pictures: "3P"
        },
        win3cards: {
            235: "235",
            dragon: "D",
            flush: "Flush",
            high_card: "High Card",
            "p8+": "P8",
            pair: "Pair",
            phoenix: "P",
            straight: "Straight",
            straight_flush: "Straight Flush",
            three_of_a_kind: "Three of a Kind",
            tie: "T"
        },
        xocdia: {even: "Par", odd: "Impar", tie: "Tie", big: "Grande", small: "Pequeño", o: "O", e: "E"}
    }, settings$9 = {
        title: "Ajustes",
        bullbull: {
            double: "Doble",
            equal: "Igual",
            play_type: "Tipo de apuesta",
            play_type_multiplay: "Bet Type (Bull Bull)",
            super: "SuperBull"
        },
        general: {
            confirmed_bet_amounts: "Confirmed Bet Amounts",
            languages: "Idiomas",
            side_bets: "Side Bets",
            statistics: "Betting Statistics",
            title: "Display"
        },
        scorecards: {classic: "Clásico", immersive: "Immersive", title: "Scorecards"},
        sound: {live: "Sonido en vivo", system: "System Sound", title: "Sound"}
    }, side_hall_filter$9 = {
        101: "Baccarat",
        103: "Rápido",
        104: "Ver carta",
        110: "Seguro",
        111: "VIP",
        201: "Sic Bo",
        202: "Pescado Camarón Cangrejo",
        203: "Xoc Dia",
        301: "Dragón Tigre",
        401: "Ruleta",
        501: "Pok Deng Clásico",
        602: "Andar Bahar",
        603: "Teen Patti 20-20",
        801: "Bull Bull",
        901: "Ganar 3 Cartas",
        "201_Alt": "Hi Lo",
        "201_Alt_2": "Sic Tan",
        "501_Alt": "Pok Deng Dos Lados",
        "901_Alt": "Tres fotografías",
        "901_Alt_2": "Teen Patti 20-20",
        asia: "Juegos de Asia",
        baccarat: "Baccarat",
        classic: "Clásico",
        europe: "Juegos de Europa",
        global: "Juegos Globales",
        other: "Otros Juegos",
        sexy: "Sweetie"
    }, es = {
        baccarat_gameplay: baccarat_gameplay$9,
        bet_record: bet_record$9,
        bet_type: bet_type$9,
        custom_chips: custom_chips$9,
        detailed_bet_type: detailed_bet_type$9,
        error_code: error_code$9,
        error_msg: error_msg$9,
        fast_bet: fast_bet$9,
        game_hall: game_hall$9,
        game_rules: game_rules$9,
        game_table: game_table$9,
        game_types: game_types$9,
        gamehall_table: gamehall_table$9,
        header: header$9,
        login: login$9,
        menu: menu$9,
        messages: messages$9,
        payout: payout$9,
        profile: profile$9,
        roadmap: roadmap$9,
        settings: settings$9,
        side_hall_filter: side_hall_filter$9
    }, baccarat_gameplay$8 = {
        basic: "बेसिक",
        default: "डिफ़ॉल्ट",
        fabulous_4: "शानदार 4",
        natural: "प्राकृतिक लकी 6",
        super: "सुपर बैकारेट",
        switch: "गेमप्ले स्विच",
        tiger: "टाइगर"
    }, bet_record$8 = {
        bet_amount: "शर्त राशि",
        bet_type: "शर्त प्रकार",
        betting_number: "सट्टेबाजी संख्या",
        date_time: "Date & Time",
        game: "Game",
        game_type: "गेम का प्रकार",
        gameround_id: "गेमराउंड आईडी",
        loading: "Loading",
        next: "अगला",
        no_video: "Please note that this round of the game is invaild, and live video will not be displayed.",
        previous: "पिछला",
        shoe_round: "जूता गोल",
        status: "दर्जा",
        table_number: "तालिका संख्या",
        total_bet: "कुल शर्त",
        valid_bet: "वैध बेट",
        win_loss: "जीत/हानि",
        bet_status: {100: "बेटिंग", 101: "Failed", 110: "निर्धारित नहीं", 111: "बसे हुए", 120: "रिफंड"},
        title: {details: "Details", records: "बेट रिकॉर्ड्स"}
    }, bet_type$8 = {
        1001: "बैंकर",
        1002: "खिलाड़ी",
        1003: "टाई",
        1006: "बैंकर जोड़ा",
        1007: "खिलाड़ी जोड़ा",
        1011: "बैंकर",
        1100: "लकी 6",
        1211: "बैंकर नेचुरल",
        1212: "प्लेयर नेचुरल",
        1223: "कोई पेयर",
        1224: "परफेक्ट पेयर",
        1231: "बैंकर ड्रैगन बोनस",
        1232: "खिलाड़ी ड्रैगन बोनस",
        1301: "INSURANCE",
        1302: "INSURANCE",
        1303: "INSURANCE",
        1304: "INSURANCE",
        1401: "टाइगर",
        1402: "बड़ा टाइगर",
        1403: "छोटा टाइगर",
        1404: "टाइगर टाई",
        1405: "टाइगर जोड़ा",
        1501: "बैंकर शानदार 4",
        1502: "खिलाड़ी शानदार 4",
        1503: "बैंकर प्रेशियस जोड़ा",
        1504: "खिलाड़ी प्रेशियस जोड़े",
        1601: "बैंकर काला",
        1602: "बैंकर लाल",
        1603: "खिलाड़ी काला",
        1604: "खिलाड़ी लाल",
        1605: "किसी भी 6",
        2001: "ड्रैगन",
        2002: "टाइगर",
        2003: "टाई",
        3001: "छोटा",
        3002: "विषम",
        3003: "सम",
        3004: "बड़ा",
        3011: "कोई त्रिपल",
        3048: "ONE",
        3049: "TWO",
        3050: "THREE",
        3051: "FOUR",
        3052: "FIVE",
        3053: "SIX",
        3200: "हाई",
        3201: "लो",
        3225: "लो",
        3227: "लो",
        3228: "लो",
        3229: "लो",
        3230: "हाई",
        3232: "हाई",
        3401: "विषम",
        3402: "सम",
        3403: "1 FAN",
        3404: "2 FAN",
        3405: "3 FAN",
        3406: "4 FAN",
        3407: "1NIM2",
        3408: "1NIM3",
        3409: "1NIM4",
        3410: "2NIM1",
        3411: "2NIM3",
        3412: "2NIM4",
        3413: "3NIM1",
        3414: "3NIM2",
        3415: "3NIM4",
        3416: "4NIM1",
        3417: "4NIM2",
        3418: "4NIM3",
        3419: "23ONE NGA",
        3420: "24ONE NGA",
        3421: "34ONE NGA",
        3422: "13TWO NGA",
        3423: "14TWO NGA",
        3424: "34TWO NGA",
        3425: "12THREE NGA",
        3426: "14THREE NGA",
        3427: "24THREE NGA",
        3428: "13FOUR NGA",
        3429: "12FOUR NGA",
        3430: "23FOUR NGA",
        3431: "SSH123",
        3432: "SSH124",
        3433: "SSH134",
        3434: "SSH234",
        3435: "KWOK12",
        3436: "KWOK23",
        3437: "KWOK34",
        3438: "KWOK41",
        3500: "टाई",
        3501: "छोटा",
        3502: "बड़ा",
        3503: "विषम",
        3504: "सम",
        4001: "1 - 18",
        4002: "सम",
        4005: "विषम",
        4006: "19 - 36",
        4007: "ST",
        4008: "ND",
        4009: "RD",
        4010: "",
        4011: "",
        4012: "",
        5001: "पी1",
        5002: "पी2",
        5003: "पी3",
        5004: "पी4",
        5005: "पी5",
        5011: "पी1 पेयर",
        5012: "पी2 पेयर",
        5013: "पी3 पेयर",
        5014: "पी4 पेयर",
        5015: "पी5 पेयर",
        5101: "पी1",
        5102: "पी2",
        5103: "पी3",
        5104: "पी4",
        5105: "पी5",
        5106: "B1",
        5107: "B2",
        5108: "B3",
        5109: "B4",
        5110: "B5",
        5111: "बैंकर जोड़ा",
        6201: "अंदर",
        6202: "बहार",
        6203: "1-5",
        6204: "6-10",
        6205: "11-15",
        6206: "16-25",
        6207: "26-30",
        6208: "31-35",
        6209: "36-40",
        6210: "41+",
        6211: "<span>1</span>st ANDAR",
        6212: "<span>1</span>st BAHAR",
        6301: "खिलाड़ी ए",
        6302: "खिलाड़ी बी",
        6303: "टाई",
        6304: "प्लेयर ए पेयर+",
        6305: "खिलाड़ी बी जोड़ी +",
        6306: "6 कार्ड बोनस",
        7201: "एंटे",
        7202: "ब्लाइंड",
        7203: "ट्रिप्स",
        7204: "RAISE 4x",
        7205: "RAISE 3x",
        7206: "RAISE 2x",
        7207: "RAISE 1x",
        7211: "एंटे",
        7212: "ब्लाइंड",
        7213: "ट्रिप्स",
        7214: "RAISE 4x",
        7215: "RAISE 3x",
        7216: "RAISE 2x",
        7217: "RAISE 1x",
        7221: "एंटे",
        7222: "ब्लाइंड",
        7223: "ट्रिप्स",
        7224: "RAISE 4x",
        7225: "RAISE 3x",
        7226: "RAISE 2x",
        7227: "RAISE 1x",
        7301: "एंटे",
        7302: "टाई",
        7303: "वॉर",
        7304: "2वा टाई",
        7311: "एंटे",
        7312: "टाई",
        7313: "वॉर",
        7314: "2वा टाई",
        7321: "एंटे",
        7322: "टाई",
        7323: "वॉर",
        7324: "2वा टाई",
        7401: "एंटे",
        7402: "ANTE DOUBLE",
        7403: "SPLIT",
        7404: "पेयर",
        7405: "Lucky 3",
        7406: "HOT 3",
        7407: "BUST IT",
        7408: "INSURANCE",
        7409: "LUCKY LADIES",
        8001: "बैंकर 1",
        8002: "बैंकर 2",
        8003: "बैंकर 3",
        8011: "बैंकर 1",
        8012: "बैंकर 2",
        8013: "बैंकर 3",
        8021: "बैंकर 1",
        8022: "बैंकर 2",
        8023: "बैंकर 3",
        8101: "प्लेयर 1",
        8102: "प्लेयर 2",
        8103: "प्लेयर 3",
        8111: "प्लेयर 1",
        8112: "प्लेयर 2",
        8113: "प्लेयर 3",
        8121: "प्लेयर 1",
        8122: "प्लेयर 2",
        8123: "प्लेयर 3",
        9001: "ड्रैगन",
        9002: "फीनिक्स",
        9003: "पेयर 8 प्लस",
        9004: "स्ट्रेट",
        9005: "फ्लश",
        9006: "स्ट्रेट फ्लश",
        9007: "थ्री ऑफ अ काइंड",
        9101: "ड्रैगन",
        9102: "फीनिक्स",
        9103: "टाई",
        9114: "ड्रैगन थ्री पिक्चर्स",
        9124: "फीनिक्स थ्री पिक्चर्स",
        tips: {
            6306: "Royal Flush/Straight Flush/Four of a Kind/Full House/Flush/Straight/Three of a Kind",
            9003: "Contains Pair 9 - Pair A / Straight / Flush / Straight Flush / Three of a Kind",
            banker_insurance: "बैंकर इन्शुरन्स पर बेट कर रहे हैं",
            bullbull_firstcard: "First Card",
            cards_dealt: "Cards Dealt",
            check: "चेक",
            checked: "YOU CHECKED",
            comm_betted: "आपने इस राउंड में कमीशन पर बेट रखी है।",
            double_text: "TWO DICE",
            fold: "फोल्ड",
            folded: "YOU FOLDED",
            house_card: "HOUSE",
            lose: "आप हारे",
            no_bet_after: "हर शू के %1वें खेल के बाद, %2 पर सट्टा नहीं लगाया जा सकता।",
            no_comm_betted: "आपने इस राउंड में नॉ-कमीशन पर बेट रखी है।",
            no_pairs: "After the 50th game round in every shoe, no betting are allowed on Pairs.",
            player_1: "प्लेयर 1",
            player_2: "प्लेयर 2",
            player_3: "प्लेयर 3",
            player_insurance: "खिलाड़ी इन्शुरन्स पर बेट कर रहे हैं",
            raised: "YOU RAISED",
            single_text: "ONE DICE",
            surrender: "सरेंडर करें",
            tie: "YOU TIE",
            triple_text: "THREE DICE",
            war: "वॉर में जाएँ",
            win: "आप जीते"
        }
    }, custom_chips$8 = {
        chip_value_exists: "यह चिप मान पहले से मौजूद है। कृपया अन्य मान आज़माएं।",
        choose_common_chips: "सामान्य चिप्स चुनें",
        custom_chips_value: "कस्टम चिप्स का मूल्य",
        min_chip_count: "कृपया कम से कम 5 चिप्स चुनें।",
        min_chip_value: "न्यूनतम अनुमत चिप मान है",
        select_all: "सभी का चयन करें",
        title: "कस्टम चिप"
    }, detailed_bet_type$8 = {
        1001: "बैंकर",
        1002: "खिलाड़ी",
        1003: "टाई",
        1006: "बैंकर जोड़ा",
        1007: "खिलाड़ी जोड़ा",
        1011: "बैंकर (कोमी नहीं)",
        1100: "लकी 6",
        1211: "बैंकर नेचुरल",
        1212: "प्लेयर नेचुरल",
        1223: "कोई पेयर",
        1224: "परफेक्ट पेयर",
        1231: "Banker Bonus",
        1232: "Player Bonus",
        1301: "Banker Insurance 1",
        1302: "Banker Insurance 2",
        1303: "Player Insurance 1",
        1304: "Player Insurance 2",
        1401: "टाइगर",
        1402: "बड़ा टाइगर",
        1403: "छोटा टाइगर",
        1404: "टाइगर टाई",
        1405: "टाइगर जोड़ा",
        1501: "बैंकर शानदार 4",
        1502: "खिलाड़ी शानदार 4",
        1503: "बैंकर प्रेशियस जोड़ा",
        1504: "खिलाड़ी प्रेशियस जोड़े",
        1601: "बैंकर काला",
        1602: "बैंकर लाल",
        1603: "खिलाड़ी काला",
        1604: "खिलाड़ी लाल",
        1605: "किसी भी 6",
        2001: "ड्रैगन",
        2002: "टाइगर",
        2003: "टाई",
        3001: "छोटा",
        3002: "विषम",
        3003: "सम",
        3004: "बड़ा",
        3005: "त्रिपल 1",
        3006: "त्रिपल 2",
        3007: "त्रिपल 3",
        3008: "त्रिपल 4",
        3009: "त्रिपल 5",
        3010: "त्रिपल 6",
        3011: "कोई त्रिपल",
        3012: "डबल 1",
        3013: "डबल 2",
        3014: "डबल 3",
        3015: "डबल 4",
        3016: "डबल 5",
        3017: "डबल 6",
        3018: "योग 4",
        3019: "योग 5",
        3020: "योग 6",
        3021: "योग 7",
        3022: "योग 8",
        3023: "योग 9",
        3024: "योग 10",
        3025: "योग 11",
        3026: "योग 12",
        3027: "योग 13",
        3028: "योग 14",
        3029: "योग 15",
        3030: "योग 16",
        3031: "योग 17",
        3033: "Two Dice 1,2",
        3034: "Two Dice 1,3",
        3035: "Two Dice 1,4",
        3036: "Two Dice 1,5",
        3037: "Two Dice 1,6",
        3038: "Two Dice 2,3",
        3039: "Two Dice 2,4",
        3040: "Two Dice 2,5",
        3041: "Two Dice 2,6",
        3042: "Two Dice 3,4",
        3043: "Two Dice 3,5",
        3044: "Two Dice 3,6",
        3045: "Two Dice 4,5",
        3046: "Two Dice 4,6",
        3047: "Two Dice 5,6",
        3048: "डाइस 1",
        3049: "डाइस 2",
        3050: "डाइस 3",
        3051: "डाइस 4",
        3052: "डाइस 5",
        3053: "डाइस 6",
        3200: "हाई",
        3201: "लो",
        3202: "11 हाई-लो",
        3203: "डाइस 1",
        3204: "डाइस 2",
        3205: "डाइस 3",
        3206: "डाइस 4",
        3207: "डाइस 5",
        3208: "डाइस 6",
        3209: "हाई-लो 1-2",
        3210: "हाई-लो 1-3",
        3211: "हाई-लो 1-4",
        3212: "हाई-लो 1-5",
        3213: "हाई-लो 1-6",
        3214: "हाई-लो 2-3",
        3215: "हाई-लो 2-4",
        3216: "हाई-लो 2-5",
        3217: "हाई-लो 2-6",
        3218: "हाई-लो 3-4",
        3219: "हाई-लो 3-5",
        3220: "हाई-लो 3-6",
        3221: "हाई-लो 4-5",
        3222: "हाई-लो 4-6",
        3223: "हाई-लो 5-6",
        3224: "1-लो",
        3225: "2-लो",
        3226: "3-लो",
        3227: "4-लो",
        3228: "5-लो",
        3229: "6-लो",
        3230: "3-हाई",
        3231: "4-हाई",
        3232: "5-हाई",
        3233: "6-हाई",
        3234: "1,2,3",
        3235: "2,3,4",
        3236: "3,4,5",
        3237: "4,5,6",
        3301: "Fish",
        3302: "Prawn",
        3303: "Calabash",
        3304: "Coin",
        3305: "Crab",
        3306: "Cock",
        3307: "Specific Single Red",
        3308: "Specific Single Green",
        3309: "Specific Single Blue",
        3310: "Specific Double Red",
        3311: "Specific Double Green",
        3312: "Specific Double Blue",
        3313: "Specific Triple Red",
        3314: "Specific Triple Green",
        3315: "Specific Triple Blue",
        3316: "Any Triple Color",
        3317: "Calabash & Prawn",
        3318: "Calabash & Fish",
        3319: "Calabash & Cock",
        3320: "Calabash & Crab",
        3321: "Calabash & Coin",
        3322: "Prawn & Fish",
        3323: "Prawn & Cock",
        3324: "Prawn & Crab",
        3325: "Prawn & Coin",
        3326: "Fish & Cock",
        3327: "Fish & Crab",
        3328: "Fish & Coin",
        3329: "Cock & Crab",
        3330: "Cock & Coin",
        3331: "Crab & Coin",
        3401: "विषम",
        3402: "सम",
        3403: "1Fan",
        3404: "2Fan",
        3405: "3Fan",
        3406: "4Fan",
        3407: "1Nim2",
        3408: "1Nim3",
        3409: "1Nim4",
        3410: "2Nim1",
        3411: "2Nim3",
        3412: "2Nim4",
        3413: "3Nim1",
        3414: "3Nim2",
        3415: "3Nim4",
        3416: "4Nim1",
        3417: "4Nim2",
        3418: "4Nim3",
        3419: "23 One Nga",
        3420: "24 One Nga",
        3421: "34 One Nga",
        3422: "13 Two Nga",
        3423: "14 Two Nga",
        3424: "34 Two Nga",
        3425: "12 Three Nga",
        3426: "14 Three Nga",
        3427: "24 Three Nga",
        3428: "13 Four Nga",
        3429: "12 Four Nga",
        3430: "23 Four Nga",
        3431: "SSH 123",
        3432: "SSH 124",
        3433: "SSH 134",
        3434: "SSH 234",
        3435: "12 Kwok",
        3436: "23 Kwok",
        3437: "34 Kwok",
        3438: "41 Kwok",
        3500: "टाई",
        3501: "छोटा",
        3502: "बड़ा",
        3503: "विषम",
        3504: "सम",
        3505: "0",
        3506: "1",
        3507: "3",
        3508: "4",
        4001: "1 - 18",
        4002: "सम",
        4003: "लाल",
        4004: "काला",
        4005: "विषम",
        4006: "19 - 36",
        4007: "1st Dozen",
        4008: "2nd Dozen",
        4009: "3rd Dozen",
        4010: "पहला कॉलम",
        4011: "दूसरा कॉलम",
        4012: "तीसरा कॉलम",
        4013: "स्ट्रेट 0",
        4014: "स्ट्रेट 1",
        4015: "स्ट्रेट 2",
        4016: "स्ट्रेट 3",
        4017: "स्ट्रेट 4",
        4018: "स्ट्रेट 5",
        4019: "स्ट्रेट 6",
        4020: "स्ट्रेट 7",
        4021: "स्ट्रेट 8",
        4022: "स्ट्रेट 9",
        4023: "स्ट्रेट 10",
        4024: "स्ट्रेट 11",
        4025: "स्ट्रेट 12",
        4026: "स्ट्रेट 13",
        4027: "स्ट्रेट 14",
        4028: "स्ट्रेट 15",
        4029: "स्ट्रेट 16",
        4030: "स्ट्रेट 17",
        4031: "स्ट्रेट 18",
        4032: "स्ट्रेट 19",
        4033: "स्ट्रेट 20",
        4034: "स्ट्रेट 21",
        4035: "स्ट्रेट 22",
        4036: "स्ट्रेट 23",
        4037: "स्ट्रेट 24",
        4038: "स्ट्रेट 25",
        4039: "स्ट्रेट 26",
        4040: "स्ट्रेट 27",
        4041: "स्ट्रेट 28",
        4042: "स्ट्रेट 29",
        4043: "स्ट्रेट 30",
        4044: "स्ट्रेट 31",
        4045: "स्ट्रेट 32",
        4046: "स्ट्रेट 33",
        4047: "स्ट्रेट 34",
        4048: "स्ट्रेट 35",
        4049: "स्ट्रेट 36",
        4050: "Three Numbers 0/1/2",
        4051: "Three Numbers 0/2/3",
        4052: "Four Numbers 0/1/2/3",
        4053: "Seperate(0/1)",
        4054: "Seperate(0/2)",
        4055: "Seperate(0/3)",
        4056: "Seperate(1/2)",
        4057: "Seperate(2/3)",
        4058: "Seperate(4/5)",
        4059: "Seperate(5/6)",
        4060: "Seperate(7/8)",
        4061: "Seperate(8/9)",
        4062: "Seperate(10/11)",
        4063: "Seperate(11/12)",
        4064: "Seperate(13/14)",
        4065: "Seperate(14/15)",
        4066: "Seperate(16/17)",
        4067: "Seperate(17/18)",
        4068: "Seperate(19/20)",
        4069: "Seperate(20/21)",
        4070: "Seperate(22/23)",
        4071: "Seperate(23/24)",
        4072: "Seperate(25/26)",
        4073: "Seperate(26/27)",
        4074: "Seperate(28/29)",
        4075: "Seperate(29/30)",
        4076: "Seperate(31/32)",
        4077: "Seperate(32/33)",
        4078: "Seperate(34/35)",
        4079: "Seperate(35/36)",
        4080: "Seperate(1/4)",
        4081: "Seperate(4/7)",
        4082: "Seperate(7/10)",
        4083: "Seperate(10/13)",
        4084: "Seperate(13/16)",
        4085: "Seperate(16/19)",
        4086: "Seperate(19/22)",
        4087: "Seperate(22/25)",
        4088: "Seperate(25/28)",
        4089: "Seperate(28/31)",
        4090: "Seperate(31/34)",
        4091: "Seperate(2/5)",
        4092: "Seperate(5/8)",
        4093: "Seperate(8/11)",
        4094: "Seperate(11/14)",
        4095: "Seperate(14/17)",
        4096: "Seperate(17/20)",
        4097: "Seperate(20/23)",
        4098: "Seperate(23/26)",
        4099: "Seperate(26/28)",
        4100: "Seperate(28/32)",
        4101: "Seperate(32/35)",
        4102: "Seperate(3/6)",
        4103: "Seperate(6/9)",
        4104: "Seperate(9/12)",
        4105: "Seperate(12/15)",
        4106: "Seperate(15/18)",
        4107: "Seperate(18/21)",
        4108: "Seperate(21/24)",
        4109: "Seperate(24/27)",
        4110: "Seperate(27/30)",
        4111: "Seperate(30/33)",
        4112: "Seperate(33/36)",
        4113: "Corner(1/5)",
        4114: "कॉर्नर (2/6)",
        4115: "कॉर्नर (4/8)",
        4116: "कॉर्नर (5/9)",
        4117: "कॉर्नर (7/11)",
        4118: "कॉर्नर (8/12)",
        4119: "कॉर्नर (10/14)",
        4120: "कॉर्नर (11/15)",
        4121: "कॉर्नर (13/17)",
        4122: "कॉर्नर (14/18)",
        4123: "कॉर्नर (16/20)",
        4124: "कॉर्नर (17/21)",
        4125: "कॉर्नर (18/23)",
        4126: "कॉर्नर (20/24)",
        4127: "कॉर्नर (22/26)",
        4128: "कॉर्नर (23/27)",
        4129: "कॉर्नर (25/29)",
        4130: "कॉर्नर (26/30)",
        4131: "कॉर्नर (28/32)",
        4132: "कॉर्नर (29/33)",
        4133: "कॉर्नर (31/35)",
        4134: "कॉर्नर (32/36)",
        4135: "Street(1-3)",
        4136: "Street(4-6)",
        4137: "Street(7-9)",
        4138: "Street(10-12)",
        4139: "Street(13-15)",
        4140: "Street(16-18)",
        4141: "Street(19-21)",
        4142: "Street(22-24)",
        4143: "Street(25-27)",
        4144: "Street(28-30)",
        4145: "Street(31-33)",
        4146: "Street(34-36)",
        4147: "Line(1-6)",
        4148: "Line(4-9)",
        4149: "Line(7-12)",
        4150: "Line(10-15)",
        4151: "Line(13-18)",
        4152: "Line(16-21)",
        4153: "Line(19-24)",
        4154: "Line(22-27)",
        4155: "Line(28-33)",
        4156: "Line(31-36)",
        4157: "Line(25-30)",
        5001: "पी1",
        5002: "पी2",
        5003: "पी3",
        5004: "पी4",
        5005: "पी5",
        5011: "पी1 पेयर",
        5012: "पी2 पेयर",
        5013: "पी3 पेयर",
        5014: "पी4 पेयर",
        5015: "पी5 पेयर",
        5101: "पी1",
        5102: "पी2",
        5103: "पी3",
        5104: "पी4",
        5105: "पी5",
        5106: "बैंकर 1",
        5107: "बैंकर 2",
        5108: "बैंकर 3",
        5109: "बैंकर 4",
        5110: "बैंकर 5",
        5111: "बैंकर जोड़ा",
        6201: "अंदर",
        6202: "बहार",
        6203: "1-5 कार्ड",
        6204: "6-10 कार्ड",
        6205: "11-15 कार्ड",
        6206: "16-25 कार्ड",
        6207: "26-30 कार्ड",
        6208: "31-35 कार्ड",
        6209: "36-40 कार्ड",
        6210: "41+ कार्ड",
        6211: "पहला आंदर",
        6212: "पहला बहार",
        6301: "खिलाड़ी ए",
        6302: "खिलाड़ी बी",
        6303: "टाई",
        6304: "प्लेयर ए पेयर+",
        6305: "खिलाड़ी बी जोड़ी +",
        6306: "6 कार्ड बोनस",
        7201: "प्लेयर 1 एंटे",
        7202: "प्लेयर 1 ब्लाइंड",
        7203: "प्लेयर 1 ट्रिप्स",
        7204: "Player 1 Raise 4x",
        7205: "Player 1 Raise 3x",
        7206: "Player 1 Raise 2x",
        7207: "Player 1 Raise 1x",
        7211: "प्लेयर 2 एंटे",
        7212: "प्लेयर 2 ब्लाइंड",
        7213: "प्लेयर 2 ट्रिप्स",
        7214: "Player 2 Raise 4x",
        7215: "Player 2 Raise 3x",
        7216: "Player 2 Raise 2x",
        7217: "Player 2 Raise 1x",
        7221: "प्लेयर 3 एंटे",
        7222: "प्लेयर 3 ब्लाइंड",
        7223: "प्लेयर 3 ट्रिप्स",
        7224: "Player 3 Raise 4x",
        7225: "Player 3 Raise 3x",
        7226: "Player 3 Raise 2x",
        7227: "Player 3 Raise 1x",
        7301: "प्लेयर 1 एंटे",
        7302: "Player 1 1st Tie",
        7303: "प्लेयर 1 वॉर",
        7304: "Player 1 2nd Tie",
        7311: "प्लेयर 2 एंटे",
        7312: "Player 2 1st Tie",
        7313: "प्लेयर 2 वॉर",
        7314: "Player 2 2nd Tie",
        7321: "प्लेयर 3 एंटे",
        7322: "Player 3 1st Tie",
        7323: "प्लेयर 3 वॉर",
        7324: "Player 3 2nd Tie",
        7401: "एंटे",
        7402: "Ante Double",
        7403: "Split",
        7404: "कोई पेयर",
        7405: "Lucky 3",
        7406: "Hot 3",
        7407: "Bust It",
        7408: "Insurance",
        7409: "Lucky Ladies",
        8001: "Banker 1 (Equal)",
        8002: "Banker 2 (Equal)",
        8003: "Banker 3 (Equal)",
        8011: "Banker 1 (Double)",
        8012: "Banker 2 (Double)",
        8013: "Banker 3 (Double)",
        8021: "Banker 1 (Super Bull)",
        8022: "Banker 2 (Super Bull)",
        8023: "Banker 3 (Super Bull)",
        8101: "Player 1 (Equal)",
        8102: "Player 2 (Equal)",
        8103: "Player 3 (Equal)",
        8111: "Player 1 (Double)",
        8112: "Player 2 (Double)",
        8113: "Player 3 (Double)",
        8121: "Player 1 (Super Bull)",
        8122: "Player 2 (Super Bull)",
        8123: "Player 3 (Super Bull)",
        9001: "ड्रैगन",
        9002: "फीनिक्स",
        9003: "Pair 8+",
        9004: "स्ट्रेट",
        9005: "फ्लश",
        9006: "स्ट्रेट फ्लश",
        9007: "थ्री ऑफ अ काइंड",
        9101: "ड्रैगन",
        9102: "फीनिक्स",
        9103: "टाई",
        9114: "ड्रैगन थ्री पिक्चर्स",
        9124: "फीनिक्स थ्री पिक्चर्स",
        additional_result: {
            235: "235",
            "1st_dozen": "1<sup>st</sup> Dozen",
            "2nd_dozen": "2<sup>nd</sup> Dozen",
            "3rd_dozen": "3<sup>rd</sup> Dozen",
            big_dice: "बड़ा",
            bull_1: "बुल 1",
            bull_2: "बुल 2",
            bull_3: "बुल 3",
            bull_4: "बुल 4",
            bull_5: "बुल 5",
            bull_6: "बुल 6",
            bull_7: "बुल 7",
            bull_8: "बुल 8",
            bull_9: "बुल 9",
            bull_bull: "बुल बुल",
            double_pictures: "डबल पिक्चर्स",
            even: "सम",
            five_dukes: "5 ड्यूक्स",
            flush: "फ्लश",
            four_of_a_kind: "एक तरह के चार",
            full_house: "पूरा घर",
            high_card: "हाई कार्ड",
            no_bull: "कोई बुल नहीं",
            not_qualified: "अयोग्य",
            odd: "विषम",
            pair: "पेयर",
            royal_flush: "रॉयल फ़्लश",
            single_picture: "सिंगल पिक्चर",
            small_dice: "छोटा",
            straight: "स्ट्रेट",
            straight_flush: "स्ट्रेट फ्लश",
            three_of_a_kind: "थ्री ऑफ अ काइंड",
            triple_dice: "तिहाई",
            triple_pictures: "तीन चित्र",
            two_pairs: "Two Pairs"
        }
    }, error_code$8 = {
        1: "सर्वर आंतरिक त्रुटि [1]",
        101: "चयन बेट सीमा को पार कर गई",
        102: "समय सीमा पार हो गई [102]",
        103: "बेट (पॉट सीमा को पार कर गई) [103]",
        104: "Bet(s) Failed(Below Selection Bet Limit)",
        404: "Unable to connect to the server. Please check the network settings",
        5e3: "अज्ञात त्रुटि [5000]",
        5001: "अधिक से अधिक अनुरोध [5001]",
        6e3: "नेटवर्क में समस्या, कृपया फिर से लॉगिन करें",
        6001: "नेटवर्क त्रुटि [6001]",
        6002: "क्रेडिट सूचना प्राप्ति में विफल। [6002]",
        6003: "गलत खाता या पासवर्ड! [6003]",
        6004: "लॉगिन समय सीमा पार हो गई [6004]",
        6005: "सत्यापन संकेत त्रुटि [6005]",
        6006: "प्रोफ़ाइल सूचना प्राप्ति में विफल [6006]",
        6007: "आपके एजेंट को नहीं मिला, कृपया ग्राहक सेवा से संपर्क करें! [6007]",
        6008: "आपके खाते में फिर से लॉग इन हो गया है। कृपया लॉग इन पेज पर वापस जाने के लिए ओके पर क्लिक करें। [6008]",
        6010: "पासवर्ड रीसेट सफल नहीं हुआ [6010]",
        6011: "पासवर्ड का फॉर्मेट गलत है [6011]",
        6012: "पासवर्ड खाली नहीं हो सकता [6012]",
        6013: "पासवर्ड को 10 अक्षरों से सीमित किया गया है! [6013]",
        6015: "विफलता! खिलाड़ी दूसरे खिलाड़ी का अनुसरण नहीं कर सकता। [6015]",
        6016: "इस खिलाड़ी को अनुसरण करने में असमर्थ, अधिकतम 20 अनुसरण प्राप्त हो गए हैं। [6016]",
        6018: "गेमिंग टेबल बंद कर दी गई है! [6018]",
        6019: "टेबल अद्यतन के तहत है! [6019]",
        6020: "यह निजी गेमिंग टेबल है। [6020]",
        6021: "यह सीट ली जा चुकी है, कृपया दूसरी कोशिश करें! [6021]",
        6022: "विफलता! कृपया बाद में फिर से कोशिश करें। [6022]",
        6023: "बेट-लिमिट टेबल खोजने में असमर्थ, कृपया फिर से दर्ज करें। [6023]",
        6024: "गेमिंग टेबल खोजने में असमर्थ, कृपया फिर से दर्ज करें। [6024]",
        6025: "उचित सीट नहीं मिली! [6025]",
        6026: "गेमिंग टेबल में प्रवेश नहीं हो सका, कृपया पुनः प्रयास करें! [6026]",
        6027: "यह टेबल भर गई है, कृपया दूसरे गेमिंग टेबल का प्रयास करें! [6027]",
        6028: "इस राउंड में आपने सीट पर बेट किया है, कृपया गेमिंग टेबल में प्रवेश करने के लिए लॉबी में 'एंटर' पर क्लिक करें! [6028]",
        6029: "गेम टेबल {0} आरक्षित किया गया है। कृपया शामिल होने या साइडबेट करने के लिए चुनें। [6029]",
        6030: "टेबल के मालिक चले गए हैं! [6030]",
        6031: "आप टेबल के मालिक हैं, आप अपनी सीट नहीं बदल सकते। [6031]",
        6032: "आपने इस राउंड में साइड-बेट किया है। आप डेस्कमेट के रूप में गेमिंग टेबल में प्रवेश नहीं कर सकते। [6032]",
        6033: "आपने इस राउंड में सीट पर बेट किया है। आप साइड-बेट के द्वारा टेबल में प्रवेश नहीं कर सकते। [6033]",
        6034: "यह टेबल आरक्षित नहीं है, आप शामिल नहीं हो सकते। [6034]",
        6035: "क्षमा करें, आपके खाते में {0} से कम राशि है। आप साइड-बेट करके शामिल हो सकते हैं। [6035]",
        6037: "बेट(एस) विफल! [6037]",
        6038: "विफलता! गैरकानूनी क्रेडिट परिवर्तन। [6038]",
        6039: "विफलता! सिस्टम व्यस्त है! [6039]",
        6040: "बहुत सारे अनुरोध! कृपया पुनः लॉगिन करें। [6040]",
        6041: "विफलता! गेम राउंड नहीं मिल सका। [6041]",
        6042: "विफलता! आपके क्रेडिट की पर्याप्तता नहीं है। [6042]",
        6043: "विफलता! जीत या हार अधिकतम सीमा को पार कर गई है। [6043]",
        6044: "विफलता! बेटिंग रोकी गई है। [6044]",
        6045: "विफलता! जानकारी गलत है। [6045]",
        6046: "विफलता! ऑपरेशन विरोध! [6046]",
        6047: "अवैध बेट! [6047]",
        6048: "30 राउंडों के बाद, आप छोटा या बड़ा पर बेट नहीं कर सकते हैं! [6048]",
        6049: "अमान्य बेट! [6049]",
        6050: "जैकपॉट बंद हो गया है! [6050]",
        6052: "आपने बेट रखा है, इस राउंड को छोड़ने का विकल्प नहीं है! [6052]",
        6053: "कार्ड खुल चुके हैं, इस राउंड को छोड़ने का विकल्प नहीं है! [6053]",
        6054: "गेम राउंड अभी तक शुरू नहीं हुआ है, आप इस राउंड को छोड़ने का विकल्प नहीं हैं! [6054]",
        6055: "आप पहले से ही 5 राउंड लगातार छोड़ चुके हैं। कृपया बेट लगाएं। [6055]",
        6057: "डीलर यहां नहीं है! [6057]",
        6058: "अवैध ऑपरेशन। [6058]",
        6059: "गेम टेबल नहीं मिला। [6059]",
        6060: "बैंकर जीता, गेम शुरू हो रहा है! [6060]",
        6061: "प्लेयर जीता, गेम शुरू हो रहा है! [6061]",
        6062: "ड्रॉ का विकल्प नहीं है, आपको बेट लगानी होगी! [6062]",
        6063: "प्लेयर बेट लगाएं! [6063]",
        6064: "बैंकर बेट लगाएं! [6064]",
        6065: "ड्रॉ का विकल्प नहीं है, आपको बेट लगानी होगी! [6065]",
        6066: "ड्रॉ का विकल्प नहीं है, आपको बेट लगानी होगी! [6066]",
        6067: "जीत या हार अधिकतम सीमा को पार कर गई है, आपको बेट लगानी होगी! [6067]",
        6068: "बैंकर को बेट लगाएं! [6068]",
        6069: "प्लेयर को बेट लगाएं! [6069]",
        6070: "बेट बंद हो गई है! [6070]",
        6071: "विफलता! बेट बंद हो चुकी है। [6071]",
        6072: "बेट लगाने का समय अवलंबीत है, कृपया इंतजार करें। [6072]",
        6073: "टेबल मालिक ने पासवर्ड सेट किए हैं [6073]",
        6074: "आपके पास 4 मिनट से अधिक समय नहीं है और आप खुद बाहर निकल गए हैं [6074]",
        6075: "सत्र आईडी की समय सीमा समाप्त हो गई है, कृपया फिर से प्रयास करें [6075]",
        6076: "सत्र आईडी त्रुटि, कृपया फिर से प्रयास करें [6076]",
        6077: "सत्र आईडी का उपयोग नहीं किया जा सकता, कृपया फिर से प्रयास करें [6077]",
        6078: "आप गेम से लॉग आउट हो गए हैं [6078]",
        6079: "प्लेटफ़ॉर्म रखरखाव के तहत है! [6079]",
        6080: "टेबल में प्रवेश करने में विफल, कृपया पुनः प्रयास करें [6080]",
        6081: "टेबल आरक्षित करने में विफल, कृपया पुनः प्रयास करें [6081]",
        6082: "आपके खाते का उपयोग आपक्षेत्र में प्रतिबंधित है [6082]",
        6083: "बेट(बाध्यकरण) विफल हुआ है। आपने इस राउंड में कमीशन पर बेट रखी है। [6083]",
        6084: "बेट(बाध्यकरण) विफल हुआ है। आपने इस राउंड में नॉ-कमीशन पर बेट रखी है। [6084]",
        6085: "अमान्य हैंडिकैप, आप [रिजर्व/ज्वाइन] नहीं कर सकते। कृपया [साइड बेट] का प्रयास करें। [6085]",
        6086: "पासवर्ड रीसेट कर दिया गया है। कृपया पुनः लॉगिन करें! [6086]",
        6087: "नया और मौजूदा पासवर्ड एक समान नहीं हो सकते [6087]",
        6088: "आप वर्तमान VIP हैंडीकैप के अनुसार इस खेल मेज़ में प्रवेश करने की अनुमति नहीं है। यदि VIP हैंडीकैप पर समायोजन की आवश्यकता होती है, तो कृपया ग्राहक सेवा से संपर्क करें या अपने उच्चतर एजेंट से संपर्क करें [6088]।",
        6090: "अनुरोध समयबाह्य हो गया [6090]",
        6091: "लॉगिन विफल [6091]",
        6092: "आप गेम से लॉग आउट हो गए हैं [6092]",
        6093: "सत्यापन कोड गलत है। कृपया पुनः प्रयास करें [6093]",
        6094: "आपका नि:शुल्क परीक्षण समाप्त हो गया है (15 मिनट), आप गेम से लॉग आउट हो गए हैं [6094]",
        6095: "सत्यापन केवल एक राउंड में ही भेजा जा सकता है [6095]",
        6096: "अवैध आपरेशन [6096]",
        6097: "सत्यापन करते समय गलत स्थिति [6097]",
        6098: "Not allowed to bet on pair related field after <number> rounds ",
        6099: "कोई रेड पैकेट नहीं है जिसे संग्रह किया जा सके [6099]",
        6100: "रेड पैकेट पहले से ही संग्रहित हो चुका है [6100]",
        6101: "गतिविधि अभी तक शुरू नहीं हुई है [6101]",
        6102: "गतिविधि की स्थिति गैरकानूनी है [6102]",
        6103: "रिप एपीए का दावा करने के लिए तैयार नहीं [6103]",
        6111: "इस राउंड के लिए प्लेयर ने फोल्ड किया है [6111]",
        6112: "इस राउंड के लिए प्लेयर ने चेक किया है [6112]",
        6113: "अवैध उप-राउंड बेटिंग स्थिति [6113]",
        6114: "बेटिंग स्थिति में नहीं है [6114]",
        6115: "एंटे/ब्लाइंड के बिना ट्रिप्स पर बेट नहीं की जा सकती है [6115]",
        6116: "एंटे और ब्लाइंड को साथ में बेट करना चाहिए [6116]",
        6117: "एंटे और ब्लाइंड की राशि बराबर होनी चाहिए [6117]",
        6118: "प्लेयर सिर्फ पहले राउंड में एंटे/ब्लाइंड/ट्रिप्स पर बेट कर सकता है [6118]",
        6119: "प्लेयर सिर्फ दूसरे राउंड में 4x/3x पर बेट कर सकता है [6119]",
        6120: "प्लेयर सिर्फ तीसरे राउंड में 2x पर बेट कर सकता है [6120]",
        6121: "प्लेयर सिर्फ अंतिम राउंड में 1x पर बेट कर सकता है [6121]",
        6122: "अमान्य बेट राशि [6122]",
        6123: "बिना एंटे के उठाया गया नहीं हो सकता [6123]",
        6124: "डुप्लीकेट रेज [6124]",
        6126: "No bet on 6 consecutive game rounds is detected, auto-exited game table. [6126]",
        6200: "प्रतिक्रिया समय समाप्त हो गया है। कृपया हमारी ग्राहक सेवा टीम से संपर्क करें। [6200]",
        6201: "प्रतिक्रिया समय समाप्त हो गया है। कृपया हमारी ग्राहक सेवा टीम से संपर्क करें। [6201]",
        6202: "प्रतिक्रिया समय समाप्त हो गया है। कृपया हमारी ग्राहक सेवा टीम से संपर्क करें। [6202]",
        6203: "प्रतिक्रिया समय समाप्त हो गया है। कृपया हमारी ग्राहक सेवा टीम से संपर्क करें। [6203]",
        6204: "प्रतिक्रिया समय समाप्त हो गया है। कृपया हमारी ग्राहक सेवा टीम से संपर्क करें। [6204]",
        100001: "Your agent have not enable your mobile login",
        200001: "त्रुटि हुई है। कृपया विवरण के लिए सीएसडी से संपर्क करें, धन्यवाद। [1000]",
        200002: "सिस्टम समय समाप्ति, कृपया वर्तमान खेल विंडो बंद करें और पुनः प्रयास करें। [1001]",
        200003: "सिस्टम समय समाप्ति, कृपया वर्तमान खेल विंडो बंद करें और पुनः प्रयास करें। [1002]",
        200004: "त्रुटि हुई है। कृपया विवरण के लिए सीएसडी से संपर्क करें, धन्यवाद। [1003]",
        200005: "त्रुटि हुई है। कृपया विवरण के लिए सीएसडी से संपर्क करें, धन्यवाद। [1004]",
        200006: "त्रुटि हुई है। कृपया विवरण के लिए सीएसडी से संपर्क करें, धन्यवाद। [1005]",
        200007: "त्रुटि हुई है। कृपया विवरण के लिए सीएसडी से संपर्क करें, धन्यवाद। [1006]",
        200008: "त्रुटि हुई है। कृपया विवरण के लिए सीएसडी से संपर्क करें, धन्यवाद। [1007]",
        200009: "त्रुटि हुई है। कृपया विवरण के लिए सीएसडी से संपर्क करें, धन्यवाद। [1008]",
        200011: "खाता बंद कर दिया गया है। कृपया विवरण के लिए अपने अपलाइन से संपर्क करें, धन्यवाद। [2002]",
        200012: "त्रुटि हुई है। कृपया विवरण के लिए सीएसडी से संपर्क करें, धन्यवाद। [2003]",
        200013: "त्रुटि हुई है। कृपया विवरण के लिए सीएसडी से संपर्क करें, धन्यवाद। [3001]",
        200014: "आपके खाते में पर्याप्त शेष राशि नहीं है। [3002]",
        200015: "आपका स्टेक आपकी बेट सीमा सेटिंग को पार कर गया है, कृपया पुनः प्रयास करें। [3003]",
        200016: "खेल अक्षम है। कृपया विवरण के लिए अपने अपलाइन से संपर्क करें, धन्यवाद। [3004]",
        200017: "त्रुटि हुई है। कृपया विवरण के लिए सीएसडी से संपर्क करें, धन्यवाद। [3005]",
        200018: "जीत सीमा हिट! कृपया अपने अपलाइन से संपर्क करें, धन्यवाद। [3006]",
        200019: "हार सीमा हिट! कृपया अपने अपलाइन से संपर्क करें, धन्यवाद। [3007]",
        200020: "आपके पास इस खेल के लिए कोई बेट सीमा सेटिंग नहीं है, कृपया इसे सेट करने के लिए अपने अपलाइन से संपर्क करें। [3008]",
        200021: "आपकी बेटिंग सीमा बदल दी गई है, कृपया नई सेटिंग लागू करने के लिए पुनः लॉगिन करें। [3009]",
        200022: "खाता निलंबित कर दिया गया है। कृपया विवरण के लिए अपने अपलाइन से संपर्क करें, धन्यवाद। [3010]",
        200023: "खाता निलंबित कर दिया गया है। कृपया विवरण के लिए अपने अपलाइन से संपर्क करें, धन्यवाद। [3013]",
        200024: "वर्तमान में खेल उपलब्ध नहीं है। कृपया विवरण के लिए सीएसडी से संपर्क करें, धन्यवाद। [3014]"
    }, error_msg$8 = {
        ban: "Your account has been logged in elsewhere. ",
        kick: "Session expired. Please reconnect to the platform!",
        processing_game_bet: "Your bet is being processed, please wait.",
        quitGame: "Press OK to quit game",
        relogin: "Press OK to return to the login page.",
        unknown: "The network is disconnected, press OK to quit game",
        connection: {
            connection_problem: "Press OK to connect back to the game.",
            server_connection_problem: "Press OK to connect back to the game."
        },
        idle: {
            disconnected_reconnect: "Press OK to connect back to the game.",
            disconnected_to_server: "Press OK to connect back to the game."
        }
    }, fast_bet$8 = {title: "Fast Bet"}, game_hall$8 = {
        banner_more_detail: "View More",
        feature_games: "Feature Games",
        good_roads: "अच्छी सड़क",
        hot_games: "हॉट गेम्स",
        multi_play: "मल्टी प्ले",
        view_all: "View All",
        vip_betlimit: "शर्त की सीमा",
        vip_enter: "दर्ज करें",
        vip_min_enter: "न्यूनतम शेष राशि",
        vip_occupied: "रिज़र्व्ड",
        vip_reserve: "रिज़र्व",
        subtypes: {
            all: "सभी",
            classic: "क्लासिक",
            insurance: "Insurance",
            quick: "क्विक",
            see: "कार्ड देखें",
            sexy: "सेक्सी",
            vip: "वीआईपी"
        }
    }, game_rules$8 = {
        attention: "Attention",
        game_rules: "खेल के नियमों",
        introduction: "Introduction",
        payoff: "पेयफ़",
        title: "Help"
    }, game_table$8 = {
        balanace: "संतुलन",
        deposit: "जमा",
        deposit_short: "डी",
        total_bet: "कुल शर्त",
        trial: "प्रयोग",
        baccarat: {no_comm: "कोमी नहीं"},
        blackjack: {
            all_side_bets: "ALL SIDE BETS",
            ante_first: "PLEASE BET ANTE FIRST",
            banker: "बैंकर",
            double: "डबल",
            hit: "HIT",
            insufficient_insurance: "Not enough balance for insurance",
            insurance: "Insurance?",
            other_decison: "Other players are making decision",
            player: "खिलाड़ी",
            split: "SPLIT",
            stand: "STAND",
            instruction: {
                213: {
                    content: "Win if the combination of the player's initial cards and the dealer's up card form a specific card type.",
                    title: "LUCKY 3"
                },
                label: "INSTRUCTION",
                ante: {
                    content: "Win if the player's hand value is closer to 21 than the dealer's hand and does not exceed 21.",
                    title: "एंटे"
                },
                bust: {content: "Win if the dealer busts.", title: "BUST IT"},
                hot3: {
                    content: "Win if the card value of the player's initial cards and the dealer's up card total 19 - 21.",
                    title: "HOT 3"
                },
                lucky_ladies: {
                    content: "Win if the player's initial cards formed a specific card type.",
                    title: "LUCKY LADIES"
                },
                pair: {content: "Win if the player's initial cards are pair.", title: "कोई पेयर"}
            }
        },
        bullbull: {
            banker: "बैंकर",
            banker_allwin: "BANKER ALL WIN",
            first_card: "FIRST CARD",
            player_allwin: "PLAYER ALL WIN"
        },
        casino_war: {
            "1st_tie": "1वा टाई",
            "2nd_tie": "2वा टाई",
            banker: "बैंकर",
            decision: "MAKE YOUR DECISION",
            player_1: "प्लेयर 1",
            player_2: "प्लेयर 2",
            player_3: "प्लेयर 3",
            surrender: "सरेंडर करें"
        },
        fpc: {any_two_dice: "ANY TWO DICE", both_one_dice: "BOTH ONE DICE"},
        roulette: {orphelins: "orphelins", tier: "tier", voisins: "voisins", zero: "ज़ीरो"},
        seecard: {other_squeezing: "Other players are squeezing cards"},
        teen_patti: {pair_plus: "जोड़ी+"},
        uth: {
            banker: "बैंकर",
            community: "COMMUNITY",
            decision: "MAKE YOUR DECISION",
            play: "खेल",
            player_1: "प्लेयर 1",
            player_1_short: "पी1",
            player_2: "प्लेयर 2",
            player_2_short: "पी2",
            player_3: "प्लेयर 3",
            player_3_short: "पी3",
            raise1x: "RAISE 1x",
            raise2x: "RAISE 2x",
            raise3x: "RAISE 3x",
            raise4x: "RAISE 4x"
        },
        vip: {
            owner_squeezing: "Owner is squeezing cards",
            owner_tooltip: "OWNER",
            reserve_action_tooltip: "रिज़र्व",
            reserve_betlimit: "शर्त की सीमा",
            reserve_min_enter: "न्यूनतम शेष राशि",
            reserve_request: "Table reserved. You will be the owner next round.",
            reserved_tooltip: "रिज़र्व",
            shuffle_request: "आपका शफल अनुरोध सबमिट किया गया है। शफल 5 मिनट के भीतर शुरू होगा।",
            shuffle_tooltip: "SHUFFLE",
            skip_tooltip: "SKIP",
            start_tooltip: "Start"
        }
    }, game_types$8 = {
        101: "बैकरट",
        102: "VIP Baccarat (Legacy)",
        103: "क्विक बैकारेट",
        104: "कार्ड बैकारेट देखें",
        110: "इन्शुरन्स बैकारेट",
        111: "VIP बैकारेट",
        201: "सिकबो",
        202: "मछली झींगा केकड़ा",
        203: "सॉक दिया",
        301: "ड्रैगन टाइगर",
        401: "रॉलेट",
        501: "क्लासिक पोक डेंग",
        602: "अंदर बहार",
        603: "तीन पत्ती 20-20",
        702: "अल्टीमेट टेक्सास होल्ड’एम",
        703: "कैसीनो वॉर (Casino War)",
        704: "अनंत ब्लैकजैक",
        801: "बुल बुल",
        901: "जीतें 3 कार्ड",
        "201_Alt": "हाई लो",
        "201_Alt_2": "फैन टैन",
        "501_Alt": "दोनों तरफ पोक डेंग",
        "901_Alt": "तीन चित्र",
        "901_Alt_2": "तीन पत्ती 20-20",
        arcadeGame: "Casino Game",
        card_game: "कार्ड खेल",
        cardGame: "कार्ड खेल",
        classic: "क्लासिक",
        fishingGame: "एबी फिशिंग",
        game_hall: "Lobby",
        multi_hall: "मल्टी प्ले",
        sexy: "सेक्सी",
        slotGame: "Slot Game",
        UTH_Short: "अल्टीमेट टेक्सास"
    }, gamehall_table$8 = {
        maintaining: "रखरखाव",
        notable: "No table available",
        good_road: {
            100: "लॉंग बैंकर",
            101: "लॉंग प्लेयर",
            102: "सिंगल रोड",
            103: "One P Two B",
            104: "One B Two P",
            105: "Patted eat",
            106: "B across P",
            107: "P across B",
            108: "Separated B",
            109: "Separated P"
        }
    }, header$8 = {
        bet_record: "बेट रिकॉर्ड्स",
        card_game: "AB FISHING",
        exitfullscreen: "Exit Fullscreen",
        fullscreen: "Fullscreen",
        hot_games: "LOBBY",
        live_games: "LIVE GAMES",
        logout: "लॉग आउट",
        multi_table: "MULTIPLAY",
        profile: "प्रोफ़ाइल",
        services: "Services",
        Version: "Version"
    }, login$8 = {free_trial: "मुफ्त परीक्षण", login: "लॉगिन", password: "पासवर्ड", username: "उपयोगकर्ता नाम"}, menu$8 = {
        addToHomeScreenForIOS: "ADD TO      HOME SCREEN",
        back: "BACK TO LOBBY",
        downloadApp: "ऐप डाउनलोड करें",
        exitfullscreen: "EXIT FULLSCREEN",
        fast_bet: "FAST BET",
        fullscreen: "Fullscreen",
        guide: "HELP",
        history: "बेट रिकॉर्ड्स",
        installation_instruction: "Instruction",
        installPwa: "INSTALL",
        lobby: "Lobby",
        loginApp: "लॉगिन ऐप",
        payout: "आउटपुट",
        settings: "SETTINGS",
        title: "Menu",
        verification: "VERIFY",
        video: "RELOAD"
    }, messages$8 = {
        all_in: "ऑल इन",
        bet_success: "बेट(गेंदों) की पुष्टि हुई",
        cancel: "रद्द करें",
        game_table_verified: "Verification has been sent, please check the verificaiton result on the screen",
        idle_video: "VIDEO PAUSED DUE TO INACTIVITY. PRESS OK TO RESUME",
        insufficient_bet_balance: "अपर्याप्त शेष राशि",
        insufficient_vip_balance: "अपर्याप्त राशि",
        landscape_block: "Rotate your mobile device for best experience",
        loading: "LOADING",
        logout: "Are you sure you want to logout ",
        logoutOK: "लॉग आउट",
        lost: "YOU LOST",
        multi_side_hall_filter: "Filter cannot be empty, please select at least one game type.",
        nickname_success: "Nickname updated!",
        ok_button: "ठीक है",
        screen_size_block: "सर्वोत्तम अनुभव के लिए कृपया विंडो का आकार बदलें",
        table_not_found: "Game table is not found",
        table_under_maintenance: "टेबल अद्यतन के तहत है",
        won: "YOU WON"
    }, payout$8 = {
        bet: "शर्त", bet_limit: "शर्त की सीमा", odds: "ओड्स", payout: "आउटपुट", bet_type: {
            1001: "बैंकर",
            1002: "खिलाड़ी",
            1003: "टाई",
            1006: "बैंकर जोड़ा",
            1007: "खिलाड़ी जोड़ा",
            1011: "बैंकर(कोई कमीशन नहीं)",
            1100: "लकी 6",
            1211: "बैंकर नेचुरल",
            1212: "प्लेयर नेचुरल",
            1223: "कोई पेयर",
            1224: "परफेक्ट पेयर",
            1231: "बैंकर ड्रैगन बोनस",
            1232: "खिलाड़ी ड्रैगन बोनस",
            1401: "टाइगर",
            1402: "बड़ा टाइगर",
            1403: "छोटा टाइगर",
            1404: "टाइगर टाई",
            1405: "टाइगर जोड़ा",
            1501: "बैंकर शानदार 4",
            1502: "खिलाड़ी शानदार 4",
            1503: "बैंकर प्रेशियस जोड़ा",
            1504: "खिलाड़ी प्रेशियस जोड़े",
            1601: "बैंकर काला",
            1602: "बैंकर लाल",
            1603: "खिलाड़ी काला",
            1604: "खिलाड़ी लाल",
            1605: "किसी भी 6",
            2001: "ड्रैगन",
            2002: "टाइगर",
            2003: "टाई",
            3001: "BIG / SMALL",
            3002: "सम / विषम",
            3005: "निश्चित त्रिपल",
            3011: "कोई त्रिपल",
            3012: "निश्चित डबल",
            3018: "योग 4/17",
            3019: "योग 5/16",
            3020: "योग 6/15",
            3021: "योग 7/14",
            3022: "योग 8/13",
            3023: "योग 9/10/11/12",
            3033: "TWO DICE COMBINATION",
            3048: "ONE DICE",
            3049: "TWO DICE",
            3050: "THREE DICE",
            3200: "हाई",
            3201: "लो",
            3202: "11 हाई-लो",
            3203: "पासा 1-6",
            3209: "TWO DICE COMBINATION",
            3224: "1 लो",
            3225: "2-लो",
            3226: "3-लो",
            3227: "4-लो",
            3228: "5 - 6-लो",
            3230: "3 - 4-हाई",
            3232: "5-हाई",
            3233: "6-हाई",
            3234: "THREE DICE COMBINATION",
            3301: "MAIN SYMBOL",
            3307: "SPECIFIC SINGLE COLOR",
            3310: "SPECIFIC DOUBLE COLOR",
            3313: "SPECIFIC TRIPOLE COLOR",
            3316: "ANY TRIPLE COLOR",
            3317: "TWO DICE COMBINATION",
            3401: "विषम / सम",
            3403: "FAN",
            3407: "NIM",
            3419: "NGA",
            3431: "SSH",
            3435: "12 KWOK / 23 KWOK / 34 KWOK",
            3438: "41 KWOK",
            3500: "टाई",
            3501: "छोटा",
            3502: "बड़ा",
            3503: "विषम",
            3504: "सम",
            3505: "0",
            3506: "1",
            3507: "3",
            3508: "4",
            4001: "BIG / SMALL",
            4002: "विषम / सम",
            4003: "RED / BLACK",
            4007: "डोजेन",
            4010: "COLUMN",
            4013: "स्ट्रेट",
            4050: "तीन नंबर्स",
            4052: "चार नंबर्स",
            4053: "अलग",
            4113: "कॉर्नर",
            4135: "स्ट्रीट",
            4147: "लाइन",
            5001: "PLAYER 1-5",
            5011: "PLAYER 1-5 PAIR",
            5101: "PLAYER 1-5",
            5106: "BANKER 1-5",
            5111: "बैंकर जोड़ा",
            6201: "अंदर",
            6202: "बहार",
            6203: "1-5 कार्ड",
            6204: "6-10 कार्ड",
            6205: "11-15 कार्ड",
            6206: "16-25 कार्ड",
            6207: "26-30 कार्ड",
            6208: "31-35 कार्ड",
            6209: "36-40 कार्ड",
            6210: "41+ कार्ड",
            6211: "पहला आंदर",
            6212: "पहला बहार",
            6301: "खिलाड़ी ए",
            6302: "खिलाड़ी बी",
            6303: "टाई",
            6304: "PLAYER A PAIR PLUS",
            6305: "PLAYER B PAIR PLUS",
            6306: "6 कार्ड बोनस",
            7201: "PLAYER 1 - 3 ANTE",
            7202: "PLAYER 1 - 3 BLIND",
            7203: "PLAYER 1 - 3 TRIPS",
            7301: "PLAYER 1 - 3 ANTE",
            7302: "PLAYER 1 - 3 1ST TIE",
            7304: "PLAYER 1 - 3 2ND TIE",
            7401: "एंटे",
            7404: "कोई पेयर",
            7405: "Lucky 3",
            7406: "HOT 3",
            7407: "BUST IT",
            7409: "LUCKY LADIES",
            8001: "बैंकर 1",
            8002: "बैंकर 2",
            8003: "बैंकर 3",
            8011: "बैंकर 1",
            8012: "बैंकर 2",
            8013: "बैंकर 3",
            8021: "बैंकर 1",
            8022: "बैंकर 2",
            8023: "बैंकर 3",
            8101: "प्लेयर 1",
            8102: "प्लेयर 2",
            8103: "प्लेयर 3",
            8111: "प्लेयर 1",
            8112: "प्लेयर 2",
            8113: "प्लेयर 3",
            8121: "प्लेयर 1",
            8122: "प्लेयर 2",
            8123: "प्लेयर 3",
            9001: "ड्रैगन",
            9002: "फीनिक्स",
            9003: "PAIR 8+",
            9004: "स्ट्रेट",
            9005: "फ्लश",
            9006: "स्ट्रेट फ्लश",
            9007: "थ्री ऑफ अ काइंड",
            9101: "ड्रैगन",
            9102: "फीनिक्स",
            9103: "टाई",
            9114: "DRAGON 3 PICTURES",
            9124: "PHOENIX 3 PICTURES"
        }
    }, profile$8 = {
        save: "Save",
        title: "प्रोफ़ाइल",
        main_view: {change_password: "पासवर्ड बदलें?", nickname: "उपनाम", pending: "लंबित"},
        password_view: {
            confirm_password: "पासवर्ड की पुष्टि करें",
            current_password: "Current Password",
            hints: "* Please enter alphanumeric string of 6-10 characters",
            new_password: "नया पासवर्ड"
        }
    }, roadmap$8 = {
        analysis: "ANALYSIS",
        history: "HISTORY",
        last_10_rounds: "LAST 10 ROUNDS",
        last_50_rounds: "अंतिम 50 राउंड",
        last_6_rounds: "LAST 6 ROUNDS",
        round_num: "Round #",
        statistics: "STATISTICS",
        andar_bahar: {andar: "अंदर", bahar: "बहार"},
        baccarat: {banker: "B", player: "P", predict_banker: "Predict Banker", predict_player: "Predict Player", tie: "T"},
        bull_bull: {
            game_hall: {
                0: "NB",
                1: "B1",
                2: "B2",
                3: "B3",
                4: "B4",
                5: "B5",
                6: "B6",
                7: "B7",
                8: "B8",
                9: "B9",
                A: "बीबी",
                B: "5D",
                banker: "बैंकर",
                player_1: "पी1",
                player_2: "पी2",
                player_3: "पी3"
            },
            game_table: {
                0: "कोई बुल नहीं",
                1: "बुल 1",
                2: "बुल 2",
                3: "बुल 3",
                4: "बुल 4",
                5: "बुल 5",
                6: "बुल 6",
                7: "बुल 7",
                8: "बुल 8",
                9: "बुल 9",
                A: "बुल बुल",
                B: "5 ड्यूक्स",
                banker: "बैंकर",
                player_1: "प्लेयर 1",
                player_2: "प्लेयर 2",
                player_3: "प्लेयर 3"
            }
        },
        casino_war: {banker: "B", player_1: "P1", player_2: "P2", player_3: "P3"},
        dragon_tiger: {dragon: "D", predict_dragon: "Predict Dragon", predict_tiger: "Predict Tiger", tie: "T", tiger: "T"},
        hi_lo: {hi: "हाई", hi_lo: "11", lo: "लो"},
        pokdeng: {banker: "बैंकर", player_1: "पी1", player_2: "पी2", player_3: "पी3", player_4: "पी4", player_5: "पी5"},
        roulette: {hot_cold: "HOT & COLD"},
        sicbo: {big: "बड़ा", small: "छोटा", triple: "तिहाई"},
        sictan: {even: "सम", fan_1: "1 FAN", fan_2: "2 FAN", fan_3: "3 FAN", fan_4: "4 FAN", odd: "विषम"},
        teen_patti: {
            235: "235",
            flush: "फ्लश",
            four_of_a_kind: "एक तरह के चार",
            full_house: "पूरा घर",
            high_card: "हाई कार्ड",
            pair: "पेयर",
            pair_plus: "PAIR+",
            player_a: "A",
            player_b: "B",
            royal_flush: "रॉयल फ़्लश",
            straight: "स्ट्रेट",
            straight_flush: "स्ट्रेट फ्लश",
            three_of_a_kind: "थ्री ऑफ अ काइंड",
            tie: "टाई"
        },
        three_pictures: {
            double_pictures: "DP",
            dragon: "D",
            phoenix: "P",
            single_picture: "SP",
            tie: "T",
            triple_pictures: "3P"
        },
        win3cards: {
            235: "235",
            dragon: "D",
            flush: "फ्लश",
            high_card: "हाई कार्ड",
            "p8+": "P8",
            pair: "पेयर",
            phoenix: "P",
            straight: "स्ट्रेट",
            straight_flush: "स्ट्रेट फ्लश",
            three_of_a_kind: "थ्री ऑफ अ काइंड",
            tie: "T"
        },
        xocdia: {even: "सम", odd: "विषम", tie: "टाई", big: "बड़ा", small: "छोटा", o: "O", e: "E"}
    }, settings$8 = {
        title: "Settings",
        bullbull: {
            double: "डबल",
            equal: "इक्वल",
            play_type: "शर्त प्रकार",
            play_type_multiplay: "Bet Type (Bull Bull)",
            super: "SuperBull"
        },
        general: {
            confirmed_bet_amounts: "Confirmed Bet Amounts",
            languages: "बोली",
            side_bets: "Side Bets",
            statistics: "Betting Statistics",
            title: "Display"
        },
        scorecards: {classic: "क्लासिक", immersive: "Immersive", title: "Scorecards"},
        sound: {live: "लाइव ध्वनि", system: "System Sound", title: "Sound"}
    }, side_hall_filter$8 = {
        101: "बैकरट",
        103: "क्विक",
        104: "कार्ड देखें",
        110: "बीमा",
        111: "वीआईपी",
        201: "सिकबो",
        202: "मछली झींगा केकड़ा",
        203: "सॉक दिया",
        301: "ड्रैगन टाइगर",
        401: "रॉलेट",
        501: "क्लासिक पोक डेंग",
        602: "अंदर बहार",
        603: "तीन पत्ती 20-20",
        801: "बुल बुल",
        901: "जीतें 3 कार्ड",
        "201_Alt": "हाई लो",
        "201_Alt_2": "फैन टैन",
        "501_Alt": "दोनों तरफ पोक डेंग",
        "901_Alt": "तीन चित्र",
        "901_Alt_2": "तीन पत्ती 20-20",
        asia: "एशिया खेल",
        baccarat: "बैकरट",
        classic: "क्लासिक",
        europe: "यूरोप खेल",
        global: "वैश्विक खेल",
        other: "अन्य खेल",
        sexy: "सेक्सी"
    }, hi = {
        baccarat_gameplay: baccarat_gameplay$8,
        bet_record: bet_record$8,
        bet_type: bet_type$8,
        custom_chips: custom_chips$8,
        detailed_bet_type: detailed_bet_type$8,
        error_code: error_code$8,
        error_msg: error_msg$8,
        fast_bet: fast_bet$8,
        game_hall: game_hall$8,
        game_rules: game_rules$8,
        game_table: game_table$8,
        game_types: game_types$8,
        gamehall_table: gamehall_table$8,
        header: header$8,
        login: login$8,
        menu: menu$8,
        messages: messages$8,
        payout: payout$8,
        profile: profile$8,
        roadmap: roadmap$8,
        settings: settings$8,
        side_hall_filter: side_hall_filter$8
    }, baccarat_gameplay$7 = {
        basic: "기본",
        default: "기본 설정",
        fabulous_4: "패뷸러스 4",
        natural: "네추럴 럭키 6",
        super: "슈퍼 바카라",
        switch: "게임 전환",
        tiger: "타이거"
    }, bet_record$7 = {
        bet_amount: "베팅 금액",
        bet_type: "베팅 유형",
        betting_number: "베팅 번호",
        date_time: "날짜 및 시간",
        game: "게임",
        game_type: "게임 유형",
        gameround_id: "게임 라운드 ID",
        loading: "로딩 중",
        next: "다음",
        no_video: "이 게임 라운드는 무효이며, 라이브 영상이 표시되지 않습니다.",
        previous: "이전",
        shoe_round: "슈-라운드",
        status: "상태",
        table_number: "테이블 번호",
        total_bet: "총 베팅액",
        valid_bet: "유효 베팅",
        win_loss: "승/패",
        bet_status: {100: "베팅 중", 101: "실패", 110: "정산되지 않음", 111: "정산됨", 120: "환불"},
        title: {details: "세부 정보", records: "베팅 기록"}
    }, bet_type$7 = {
        1001: "뱅커",
        1002: "플레이어",
        1003: "무승부",
        1006: "뱅커 페어",
        1007: "플레이어 페어",
        1011: "뱅커",
        1100: "럭키 6",
        1211: "뱅커 네추럴",
        1212: "플레이어 네추럴",
        1223: "양쪽 페어",
        1224: "퍼펙트 페어",
        1231: "뱅커 보너스",
        1232: "플레이어 보너스",
        1301: "보험",
        1302: "보험",
        1303: "보험",
        1304: "보험",
        1401: "타이거",
        1402: "작은 타이거",
        1403: "큰 타이거",
        1404: "타이거 페어",
        1405: "타이거 타이",
        1501: "뱅커 패뷸러스 4",
        1502: "플레이어 패뷸러스 4",
        1503: "뱅커 프레셔스 페어",
        1504: "플레이어 프레셔스 페어",
        1601: "뱅커 블랙",
        1602: "뱅커 레드",
        1603: "플레이어 블랙",
        1604: "플레이어 레드",
        1605: "어떤 6",
        2001: "드래곤",
        2002: "타이거",
        2003: "무승부",
        3001: "작음",
        3002: "홀수",
        3003: "짝수",
        3004: "큼",
        3011: "아무 트리플",
        3048: "1",
        3049: "2",
        3050: "3",
        3051: "4",
        3052: "5",
        3053: "6",
        3200: "하이",
        3201: "로우",
        3225: "로우",
        3227: "로우",
        3228: "로우",
        3229: "로우",
        3230: "하이",
        3232: "하이",
        3401: "홀수",
        3402: "짝수",
        3403: "1 FAN",
        3404: "2 FAN",
        3405: "3 FAN",
        3406: "4 FAN",
        3407: "1NIM2",
        3408: "1NIM3",
        3409: "1NIM4",
        3410: "2NIM1",
        3411: "2NIM3",
        3412: "2NIM4",
        3413: "3NIM1",
        3414: "3NIM2",
        3415: "3NIM4",
        3416: "4NIM1",
        3417: "4NIM2",
        3418: "4NIM3",
        3419: "23ONE NGA",
        3420: "24ONE NGA",
        3421: "34ONE NGA",
        3422: "13TWO NGA",
        3423: "14TWO NGA",
        3424: "34TWO NGA",
        3425: "12THREE NGA",
        3426: "14THREE NGA",
        3427: "24THREE NGA",
        3428: "13FOUR NGA",
        3429: "12FOUR NGA",
        3430: "23FOUR NGA",
        3431: "SSH123",
        3432: "SSH124",
        3433: "SSH134",
        3434: "SSH234",
        3435: "KWOK12",
        3436: "KWOK23",
        3437: "KWOK34",
        3438: "KWOK41",
        3500: "무승부",
        3501: "작음",
        3502: "큼",
        3503: "홀수",
        3504: "짝수",
        4001: "1 - 18",
        4002: "짝수",
        4005: "홀수",
        4006: "19 - 36",
        4007: "ST",
        4008: "ND",
        4009: "RD",
        4010: "",
        4011: "",
        4012: "",
        5001: "P1",
        5002: "P2",
        5003: "P3",
        5004: "P4",
        5005: "P5",
        5011: "P1 페어",
        5012: "P2 페어",
        5013: "P3 페어",
        5014: "P4 페어",
        5015: "P5 페어",
        5101: "P1",
        5102: "P2",
        5103: "P3",
        5104: "P4",
        5105: "P5",
        5106: "B1",
        5107: "B2",
        5108: "B3",
        5109: "B4",
        5110: "B5",
        5111: "뱅커 페어",
        6201: "안다르",
        6202: "바하르",
        6203: "1-5",
        6204: "6-10",
        6205: "11-15",
        6206: "16-25",
        6207: "26-30",
        6208: "31-35",
        6209: "36-40",
        6210: "41+",
        6211: "<span>1</span>st ANDAR",
        6212: "<span>1</span>st BAHAR",
        6301: "플레이어 A",
        6302: "플레이어 B",
        6303: "무승부",
        6304: "플레이어 A 페어+",
        6305: "플레이어 B 페어+",
        6306: "6 카드 보너스",
        7201: "앤티",
        7202: "블라인드",
        7203: "트립스",
        7204: "4배 레이즈",
        7205: "3배 레이즈",
        7206: "2배 레이즈",
        7207: "1배 레이즈",
        7211: "앤티",
        7212: "블라인드",
        7213: "트립스",
        7214: "4배 레이즈",
        7215: "3배 레이즈",
        7216: "2배 레이즈",
        7217: "1배 레이즈",
        7221: "앤티",
        7222: "블라인드",
        7223: "트립스",
        7224: "4배 레이즈",
        7225: "3배 레이즈",
        7226: "2배 레이즈",
        7227: "1배 레이즈",
        7301: "앤티",
        7302: "무승부",
        7303: "워",
        7304: "2번째 무승부",
        7311: "앤티",
        7312: "무승부",
        7313: "워",
        7314: "2번째 무승부",
        7321: "앤티",
        7322: "무승부",
        7323: "워",
        7324: "2번째 무승부",
        7401: "앤티",
        7402: "앤티 더블",
        7403: "스플릿",
        7404: "페어",
        7405: "럭키 3",
        7406: "핫 3",
        7407: "버스트 잇",
        7408: "보험",
        7409: "럭키 레이디스",
        8001: "뱅커 1",
        8002: "뱅커 2",
        8003: "뱅커 3",
        8011: "뱅커 1",
        8012: "뱅커 2",
        8013: "뱅커 3",
        8021: "뱅커 1",
        8022: "뱅커 2",
        8023: "뱅커 3",
        8101: "플레이어 1",
        8102: "플레이어 2",
        8103: "플레이어 3",
        8111: "플레이어 1",
        8112: "플레이어 2",
        8113: "플레이어 3",
        8121: "플레이어 1",
        8122: "플레이어 2",
        8123: "플레이어 3",
        9001: "드래곤",
        9002: "피닉스",
        9003: "페어 8 플러스",
        9004: "스트레이트",
        9005: "플러시",
        9006: "스트레이트 플러시",
        9007: "트리플",
        9101: "드래곤",
        9102: "피닉스",
        9103: "무승부",
        9114: "드래곤 세 사진",
        9124: "피닉스 세 사진",
        tips: {
            6306: "로열 플러시 / 스트레이트 플러시 / 포 카드 / 풀 하우스 / 플러시 / 스트레이트 / 트리플",
            9003: "페어 9 - 페어 A / 스트레이트 / 플러시 / 스트레이트 플러시 / 트리플 포함",
            banker_insurance: "뱅커 보험 베팅",
            bullbull_firstcard: "첫 번째 카드",
            cards_dealt: "배분된 카드",
            check: "체크",
            checked: "당신이 체크 했습니다",
            comm_betted: "이번 라운드에 커미션으로 베팅을 했습니다",
            double_text: "두 주사위",
            fold: "폴드",
            folded: "당신이 폴드 했습니다",
            house_card: "하우스",
            lose: "당신이 졌습니다",
            no_bet_after: "각 슈의 %1번째 라운드 이후에는 %2에 베팅할 수 없습니다.",
            no_comm_betted: "이번 라운드에 노커미션으로 베팅했습니다",
            no_pairs: "각 슈의 50번째 게임 라운드 이후에는 페어에 베팅할 수 없습니다.",
            player_1: "플레이어 1",
            player_2: "플레이어 2",
            player_3: "플레이어 3",
            player_insurance: "플레이어 보험 베팅",
            raised: "당신이 레이즈 했습니다",
            single_text: "한 주사위",
            surrender: "항복",
            tie: "당신이 비겼습니다",
            triple_text: "세 주사위",
            war: "전쟁으로 가기",
            win: "당신이 이겼습니다"
        }
    }, custom_chips$7 = {
        chip_value_exists: "이 칩 값은 이미 존재합니다. 다른 값을 시도해 보십시오.",
        choose_common_chips: "일반 칩 선택",
        custom_chips_value: "사용자 정의 칩 값",
        min_chip_count: "최소 5개의 칩을 선택하십시오.",
        min_chip_value: "허용되는 최소 칩 값은",
        select_all: "모두 선택",
        title: "사용자 정의 칩"
    }, detailed_bet_type$7 = {
        1001: "뱅커",
        1002: "플레이어",
        1003: "무승부",
        1006: "뱅커 페어",
        1007: "플레이어 페어",
        1011: "뱅커 (노커미션)",
        1100: "럭키 6",
        1211: "뱅커 네추럴",
        1212: "플레이어 네추럴",
        1223: "양쪽 페어",
        1224: "퍼펙트 페어",
        1231: "뱅커 보너스",
        1232: "플레이어 보너스",
        1301: "뱅커 보험 1",
        1302: "뱅커 보험 2",
        1303: "플레이어 보험 1",
        1304: "플레이어 보험 2",
        1401: "타이거",
        1402: "작은 타이거",
        1403: "큰 타이거",
        1404: "타이거 페어",
        1405: "타이거 타이",
        1501: "뱅커 패뷸러스 4",
        1502: "플레이어 패뷸러스 4",
        1503: "뱅커 프레셔스 페어",
        1504: "플레이어 프레셔스 페어",
        1601: "뱅커 블랙",
        1602: "뱅커 레드",
        1603: "플레이어 블랙",
        1604: "플레이어 레드",
        1605: "어떤 6",
        2001: "드래곤",
        2002: "타이거",
        2003: "무승부",
        3001: "소",
        3002: "홀",
        3003: "짝",
        3004: "대",
        3005: "트리플 1",
        3006: "트리플 2",
        3007: "트리플 3",
        3008: "트리플 4",
        3009: "트리플 5",
        3010: "트리플 6",
        3011: "아무 트리플",
        3012: "더블 1",
        3013: "더블 2",
        3014: "더블 3",
        3015: "더블 4",
        3016: "더블 5",
        3017: "더블 6",
        3018: "합 4",
        3019: "합 5",
        3020: "합 6",
        3021: "합 7",
        3022: "합 8",
        3023: "합 9",
        3024: "합 10",
        3025: "합 11",
        3026: "합 12",
        3027: "합 13",
        3028: "합 14",
        3029: "합 15",
        3030: "합 16",
        3031: "합 17",
        3033: "두 주사위 1,2",
        3034: "두 주사위 1,3",
        3035: "두 주사위 1,4",
        3036: "두 주사위 1,5",
        3037: "두 주사위 1,6",
        3038: "두 주사위 2,3",
        3039: "두 주사위 2,4",
        3040: "두 주사위 2,5",
        3041: "두 주사위 2,6",
        3042: "두 주사위 3,4",
        3043: "두 주사위 3,5",
        3044: "두 주사위 3,6",
        3045: "두 주사위 4,5",
        3046: "두 주사위 4,6",
        3047: "두 주사위 5,6",
        3048: "주사위 1",
        3049: "주사위 2",
        3050: "주사위 3",
        3051: "주사위 4",
        3052: "주사위 5",
        3053: "주사위 6",
        3200: "하이",
        3201: "로우",
        3202: "11 하이-로우",
        3203: "주사위 1",
        3204: "주사위 2",
        3205: "주사위 3",
        3206: "주사위 4",
        3207: "주사위 5",
        3208: "주사위 6",
        3209: "하이로 1-2",
        3210: "하이로 1-3",
        3211: "하이로 1-4",
        3212: "하이로 1-5",
        3213: "하이로 1-6",
        3214: "하이로 2-3",
        3215: "하이로 2-4",
        3216: "하이로 2-5",
        3217: "하이로 2-6",
        3218: "하이로 3-4",
        3219: "하이로 3-5",
        3220: "하이로 3-6",
        3221: "하이로 4-5",
        3222: "하이로 4-6",
        3223: "하이로 5-6",
        3224: "1-로우",
        3225: "2-로우",
        3226: "3-로우",
        3227: "4-로우",
        3228: "5-로우",
        3229: "6-로우",
        3230: "3-하이",
        3231: "4-하이",
        3232: "5-하이",
        3233: "6-하이",
        3234: "1,2,3",
        3235: "2,3,4",
        3236: "3,4,5",
        3237: "4,5,6",
        3301: "물고기",
        3302: "새우",
        3303: "호리병박",
        3304: "동전",
        3305: "게",
        3306: "수탉",
        3307: "특정 단일 빨강",
        3308: "특정 단일 초록",
        3309: "특정 단일 파랑",
        3310: "특정 이중 빨강",
        3311: "특정 이중 초록",
        3312: "특정 이중 파랑",
        3313: "특정 삼중 빨강",
        3314: "특정 삼중 초록",
        3315: "특정 삼중 파랑",
        3316: "아무 삼중 색상",
        3317: "호리병박 & 새우",
        3318: "호리병박 & 물고기",
        3319: "호리병박 & 수탉",
        3320: "호리병박 & 게",
        3321: "호리병박 & 동전",
        3322: "새우 & 물고기",
        3323: "새우 & 수탉",
        3324: "새우 & 게",
        3325: "새우 & 동전",
        3326: "물고기 & 수탉",
        3327: "물고기 & 게",
        3328: "물고기 & 동전",
        3329: "수탉 & 게",
        3330: "수탉 & 동전",
        3331: "게 & 동전",
        3401: "홀수",
        3402: "짝수",
        3403: "1Fan",
        3404: "2Fan",
        3405: "3Fan",
        3406: "4Fan",
        3407: "1Nim2",
        3408: "1Nim3",
        3409: "1Nim4",
        3410: "2Nim1",
        3411: "2Nim3",
        3412: "2Nim4",
        3413: "3Nim1",
        3414: "3Nim2",
        3415: "3Nim4",
        3416: "4Nim1",
        3417: "4Nim2",
        3418: "4Nim3",
        3419: "23 One Nga",
        3420: "24 One Nga",
        3421: "34 One Nga",
        3422: "13 Two Nga",
        3423: "14 Two Nga",
        3424: "34 Two Nga",
        3425: "12 Three Nga",
        3426: "14 Three Nga",
        3427: "24 Three Nga",
        3428: "13 Four Nga",
        3429: "12 Four Nga",
        3430: "23 Four Nga",
        3431: "SSH 123",
        3432: "SSH 124",
        3433: "SSH 134",
        3434: "SSH 234",
        3435: "12 Kwok",
        3436: "23 Kwok",
        3437: "34 Kwok",
        3438: "41 Kwok",
        3500: "무승부",
        3501: "작음",
        3502: "큼",
        3503: "홀수",
        3504: "짝수",
        3505: "0",
        3506: "1",
        3507: "3",
        3508: "4",
        4001: "1 - 18",
        4002: "짝수",
        4003: "빨강",
        4004: "검정",
        4005: "홀수",
        4006: "19 - 36",
        4007: "1번째 더스턴",
        4008: "2번째 더스턴",
        4009: "3번째 더스턴",
        4010: "1번째 열",
        4011: "2번째 열",
        4012: "3번째 열",
        4013: "스트레이트 0",
        4014: "스트레이트 1",
        4015: "스트레이트 2",
        4016: "스트레이트 3",
        4017: "스트레이트 4",
        4018: "스트레이트 5",
        4019: "스트레이트 6",
        4020: "스트레이트 7",
        4021: "스트레이트 8",
        4022: "스트레이트 9",
        4023: "스트레이트 10",
        4024: "스트레이트 11",
        4025: "스트레이트 12",
        4026: "스트레이트 13",
        4027: "스트레이트 14",
        4028: "스트레이트 15",
        4029: "스트레이트 16",
        4030: "스트레이트 17",
        4031: "스트레이트 18",
        4032: "스트레이트 19",
        4033: "스트레이트 20",
        4034: "스트레이트 21",
        4035: "스트레이트 22",
        4036: "스트레이트 23",
        4037: "스트레이트 24",
        4038: "스트레이트 25",
        4039: "스트레이트 26",
        4040: "스트레이트 27",
        4041: "스트레이트 28",
        4042: "스트레이트 29",
        4043: "스트레이트 30",
        4044: "스트레이트 31",
        4045: "스트레이트 32",
        4046: "스트레이트 33",
        4047: "스트레이트 34",
        4048: "스트레이트 35",
        4049: "스트레이트 36",
        4050: "세 숫자 0/1/2",
        4051: "세 숫자 0/2/3",
        4052: "네 숫자 0/1/2/3",
        4053: "분리 (0/1)",
        4054: "분리 (0/2)",
        4055: "분리 (0/3)",
        4056: "분리 (1/2)",
        4057: "분리 (2/3)",
        4058: "분리 (4/5)",
        4059: "분리 (5/6)",
        4060: "분리 (7/8)",
        4061: "분리 (8/9)",
        4062: "분리 (10/11)",
        4063: "분리 (11/12)",
        4064: "분리 (13/14)",
        4065: "분리 (14/15)",
        4066: "분리 (16/17)",
        4067: "분리 (17/18)",
        4068: "분리 (19/20)",
        4069: "분리 (20/21)",
        4070: "분리 (22/23)",
        4071: "분리 (23/24)",
        4072: "분리 (25/26)",
        4073: "분리 (26/27)",
        4074: "분리 (28/29)",
        4075: "분리 (29/30)",
        4076: "분리 (31/32)",
        4077: "분리 (32/33)",
        4078: "분리 (34/35)",
        4079: "분리 (35/36)",
        4080: "분리 (1/4)",
        4081: "분리 (4/7)",
        4082: "분리 (7/10)",
        4083: "분리 (10/13)",
        4084: "분리 (13/16)",
        4085: "분리 (16/19)",
        4086: "분리 (19/22)",
        4087: "분리 (22/25)",
        4088: "분리 (25/28)",
        4089: "분리 (28/31)",
        4090: "분리 (31/34)",
        4091: "분리 (2/5)",
        4092: "분리 (5/8)",
        4093: "분리 (8/11)",
        4094: "분리 (11/14)",
        4095: "분리 (14/17)",
        4096: "분리 (17/20)",
        4097: "분리 (20/23)",
        4098: "분리 (23/26)",
        4099: "분리 (26/28)",
        4100: "분리 (28/32)",
        4101: "분리 (32/35)",
        4102: "분리 (3/6)",
        4103: "분리 (6/9)",
        4104: "분리 (9/12)",
        4105: "분리 (12/15)",
        4106: "분리 (15/18)",
        4107: "분리 (18/21)",
        4108: "분리 (21/24)",
        4109: "분리 (24/27)",
        4110: "분리 (27/30)",
        4111: "분리 (30/33)",
        4112: "분리 (33/36)",
        4113: "코너 (1/5)",
        4114: "코너 (2/6)",
        4115: "코너 (4/8)",
        4116: "코너 (5/9)",
        4117: "코너 (7/11)",
        4118: "코너 (8/12)",
        4119: "코너 (10/14)",
        4120: "코너 (11/15)",
        4121: "코너 (13/17)",
        4122: "코너 (14/18)",
        4123: "코너 (16/20)",
        4124: "코너 (17/21)",
        4125: "코너 (18/23)",
        4126: "코너 (20/24)",
        4127: "코너 (22/26)",
        4128: "코너 (23/27)",
        4129: "코너 (25/29)",
        4130: "코너 (26/30)",
        4131: "코너 (28/32)",
        4132: "코너 (29/33)",
        4133: "코너 (31/35)",
        4134: "코너 (32/36)",
        4135: "스트리트 (1-3)",
        4136: "스트리트 (4-6)",
        4137: "스트리트 (7-9)",
        4138: "스트리트 (10-12)",
        4139: "스트리트 (13-15)",
        4140: "스트리트 (16-18)",
        4141: "스트리트 (19-21)",
        4142: "스트리트 (22-24)",
        4143: "스트리트 (25-27)",
        4144: "스트리트 (28-30)",
        4145: "스트리트 (31-33)",
        4146: "스트리트 (34-36)",
        4147: "라인 (1-6)",
        4148: "라인 (4-9)",
        4149: "라인 (7-12)",
        4150: "라인 (10-15)",
        4151: "라인 (13-18)",
        4152: "라인 (16-21)",
        4153: "라인 (19-24)",
        4154: "라인 (22-27)",
        4155: "라인 (28-33)",
        4156: "라인 (31-36)",
        4157: "라인 (25-30)",
        5001: "P1",
        5002: "P2",
        5003: "P3",
        5004: "P4",
        5005: "P5",
        5011: "P1 페어",
        5012: "P2 페어",
        5013: "P3 페어",
        5014: "P4 페어",
        5015: "P5 페어",
        5101: "P1",
        5102: "P2",
        5103: "P3",
        5104: "P4",
        5105: "P5",
        5106: "뱅커 1",
        5107: "뱅커 2",
        5108: "뱅커 3",
        5109: "뱅커 4",
        5110: "뱅커 5",
        5111: "뱅커 페어",
        6201: "안다르",
        6202: "바하르",
        6203: "1-5 카드",
        6204: "6-10 카드",
        6205: "11-15 카드",
        6206: "16-25 카드",
        6207: "26-30 카드",
        6208: "31-35 카드",
        6209: "36-40 카드",
        6210: "41+ 카드",
        6211: "1번째 안다르",
        6212: "1번째 바하르",
        6301: "플레이어 A",
        6302: "플레이어 B",
        6303: "무승부",
        6304: "플레이어 A 페어+",
        6305: "플레이어 B 페어+",
        6306: "6 카드 보너스",
        7201: "플레이어 1 앤테",
        7202: "플레이어 1 블라인드",
        7203: "플레이어 1 트립스",
        7204: "플레이어 1 레이즈 4배",
        7205: "플레이어 1 레이즈 3배",
        7206: "플레이어 1 레이즈 2배",
        7207: "플레이어 1 레이즈 1배",
        7211: "플레이어 2 앤테",
        7212: "플레이어 2 블라인드",
        7213: "플레이어 2 트립스",
        7214: "플레이어 2 레이즈 4배",
        7215: "플레이어 2 레이즈 3배",
        7216: "플레이어 2 레이즈 2배",
        7217: "플레이어 2 레이즈 1배",
        7221: "플레이어 3 앤테",
        7222: "플레이어 3 블라인드",
        7223: "플레이어 3 트립스",
        7224: "플레이어 3 레이즈 4배",
        7225: "플레이어 3 레이즈 3배",
        7226: "플레이어 3 레이즈 2배",
        7227: "플레이어 3 레이즈 1배",
        7301: "플레이어 1 앤테",
        7302: "플레이어 1 1차 타이",
        7303: "플레이어 1 전투",
        7304: "플레이어 1 2차 타이",
        7311: "플레이어 2 앤테",
        7312: "플레이어 2 1차 타이",
        7313: "플레이어 2 전투",
        7314: "플레이어 2 2차 타이",
        7321: "플레이어 3 앤테",
        7322: "플레이어 3 1차 타이",
        7323: "플레이어 3 전투",
        7324: "플레이어 3 2차 타이",
        7401: "앤테",
        7402: "앤테 더블",
        7403: "분할",
        7404: "아무 페어",
        7405: "럭키 3",
        7406: "핫 3",
        7407: "버스트",
        7408: "보험",
        7409: "럭키 레이디",
        8001: "뱅커 1 (동일)",
        8002: "뱅커 2 (동일)",
        8003: "뱅커 3 (동일)",
        8011: "뱅커 1 (더블)",
        8012: "뱅커 2 (더블)",
        8013: "뱅커 3 (더블)",
        8021: "뱅커 1 (슈퍼 불)",
        8022: "뱅커 2 (슈퍼 불)",
        8023: "뱅커 3 (슈퍼 불)",
        8101: "플레이어 1 (동일)",
        8102: "플레이어 2 (동일)",
        8103: "플레이어 3 (동일)",
        8111: "플레이어 1 (더블)",
        8112: "플레이어 2 (더블)",
        8113: "플레이어 3 (더블)",
        8121: "플레이어 1 (슈퍼 불)",
        8122: "플레이어 2 (슈퍼 불)",
        8123: "플레이어 3 (슈퍼 불)",
        9001: "드래곤",
        9002: "피닉스",
        9003: "페어 8+",
        9004: "스트레이트",
        9005: "플러시",
        9006: "스트레이트 플러시",
        9007: "트리플",
        9101: "드래곤",
        9102: "피닉스",
        9103: "무승부",
        9114: "드래곤 삼장",
        9124: "피닉스 삼장",
        additional_result: {
            235: "235",
            "1st_dozen": "1<sup>st</sup> Dozen",
            "2nd_dozen": "2<sup>nd</sup> Dozen",
            "3rd_dozen": "3<sup>rd</sup> Dozen",
            big_dice: "큰",
            bull_1: "불 1",
            bull_2: "불 2",
            bull_3: "불 3",
            bull_4: "불 4",
            bull_5: "불 5",
            bull_6: "불 6",
            bull_7: "불 7",
            bull_8: "불 8",
            bull_9: "불 9",
            bull_bull: "불 불",
            double_pictures: "이중 사진",
            even: "짝수",
            five_dukes: "5 공작",
            flush: "플러시",
            four_of_a_kind: "포 카드",
            full_house: "풀 하우스",
            high_card: "하이 카드",
            no_bull: "불 없음",
            not_qualified: "자격 불충분",
            odd: "홀수",
            pair: "페어",
            royal_flush: "로열 플러시",
            single_picture: "단일 사진",
            small_dice: "작은",
            straight: "스트레이트",
            straight_flush: "스트레이트 플러시",
            three_of_a_kind: "트리플",
            triple_dice: "트리플",
            triple_pictures: "삼중 사진",
            two_pairs: "투 페어"
        }
    }, error_code$7 = {
        1: "서버 내부 오류 [1]",
        101: "구역 베팅리밋 초과",
        102: "시간 제한 초과 [102]",
        103: "베팅실패 (폿 리밋 초과) [103]",
        104: "Bet(s) Failed(Below Selection Bet Limit)",
        404: "Unable to connect to the server. Please check the network settings",
        5e3: "알 수 없는 오류 [5000]",
        5001: "요청이 너무 잦습니다 [5001]",
        6e3: "접속이 종료되었습니다, 다시 로그인 해주세요",
        6001: "Network Error [6001]",
        6002: "크레딧 정보를 불러오지 못했습니다. [6002]",
        6003: "아이디 혹은 비밀번호 오류입니다. [6003]",
        6004: "유저가 접속 제한상태입니다! [6004]",
        6005: "핸디캡이 없습니다! [6005]",
        6006: "멀티플레이 메시지 기록을 찾을 수 없습니다! [6006]",
        6007: "상위 에이전트를 찾을 수 없습니다. 고객센터에 문의바랍니다！ [6007]",
        6008: "본 계정은 다른 지역에서 재접속 되었습니다, 다시 로그인 해주세요. [6008]",
        6010: "비밀번호 재설정 오류 [6010]",
        6011: "비밀번호 형식 오류 [6011]",
        6012: "비밀번호를 입력해 주십시오(6012) [6012]",
        6013: "비밀번호는 10자로 제한되어 있습니다！ [6013]",
        6015: "플레이어 중복은 허용되지 않습니다 [6015]",
        6016: "귀하는 이미 20명의 플레이어를 추가하였습니다. 더 이상 플레이어를 추가할 수 없습니다. [6016]",
        6018: "해당 테이블은 닫혀있습니다. [6018]",
        6019: "테이블 점검중입니다! [6019]",
        6020: "비공개 게임테이블 입니다. [6020]",
        6021: "다른 유저의 자리입니다, 다른 자리를 선택해 주세요! [6021]",
        6022: "잠시 후 다시 시도해 주세요. [6022]",
        6023: "해당 베팅리밋의 테이블을 찾을 수 없습니다. 다시 입장해 주세요 [6023]",
        6024: "게임 테이블을 찾을 수 없습니다. 다시 입장해 주세요 [6024]",
        6025: "적합한 좌석을 찾을 수 없습니다! [6025]",
        6026: "게임 테이블 입장에 실패했습니다. 다시 시도해 주세요! [6026]",
        6027: "테이블이 만석입니다. 다른 테이블을 이용해 주세요! [6027]",
        6028: "좌석에 유효베팅이 남아 있으므로 좌석변경은 불가능합니다. 게임로비에서 '입장'버튼을 이용해서 테이블에 입장해 주세요! [6028]",
        6029: "{0} 테이블이 예약되어 있습니다. 조인 또는 사이드 벳을 선택하십시오. [6029]",
        6030: "테이블 주인이 퇴장하였습니다! [6030]",
        6031: "당신이 테이블 주인이며, 좌석은 변경할 수 없습니다. [6031]",
        6032: "사이드 벳 중이므로 착석하실 수 없습니다. [6032]",
        6033: "좌석에 유효베팅이 남아 있으므로 사이드 벳으로 입장하실 수 없습니다. [6033]",
        6034: "예약하지 않으셨습니다. 참여하실 수 없습니다. [6034]",
        6035: "크레딧이 모자랍니다{0}. 사이드 벳으로 참여하실 수는 있습니다. [6035]",
        6037: "베팅에 실패했습니다! [6037]",
        6038: "오류. 비정상 크레딧 변화. [6038]",
        6039: "오류. 시스템 응답대기중! [6039]",
        6040: "오류. 다시 로그인 해주세요. [6040]",
        6041: "오류. 게임기록을 찾을 수 없습니다. [6041]",
        6042: "오류. 크레딧이 모자랍니다. [6042]",
        6043: "Bet Failed! It's over maximum lose. [6043]",
        6044: "오류. 본 라운드는 철회되었습니다. [6044]",
        6045: "오류. 정보오류. [6045]",
        6046: "오류. 동작충돌! [6046]",
        6047: "비정상 베팅입니다! [6047]",
        6048: "30라운드 이후에는 대/소 베팅하실 수 없습니다! [6048]",
        6049: "잘못된 베팅입니다! [6049]",
        6050: "Bet Failed! It's over maximum limit [6050]",
        6052: "유효베팅이 있습니다. 스킵할 수 없습니다! [6052]",
        6053: "카드가 오픈되었습니다, 스킵할 수 없습니다! [6053]",
        6054: "게임라운드가 시작되지 않았습니다. 스킵할 수 없습니다! [6054]",
        6055: "5회 이상 스킵하셨습니다. [6055]",
        6057: "딜러가 없습니다! [6057]",
        6058: "비정상 작동입니다. [6058]",
        6059: "게임 테이블을 찾을 수 없습니다. [6059]",
        6060: "지원하지 않는 언어입니다. [6060]",
        6061: "잘못된 작동입니다! [6061]",
        6062: "파라미터 오류! [6062]",
        6063: "게임 홀을 찾을 수 없습니다. 다시 입장해 주세요. [6063]",
        6064: "시스템 점검중! [6064]",
        6065: "적합한 리밋 테이블이나 좌석을 찾을 수 없습니다! [6065]",
        6066: "게임 테이블이 존재하지 않습니다. [6066]",
        6067: "게임 테이블을 찾을 수 없습니다. 다시 입장하십시오. [6067]",
        6068: "비밀번호 오류! [6068]",
        6069: "베팅하지 않아서 카드를 오픈할 수 없습니다. [6069]",
        6070: "오류! 이번 라운드에서 잘못 베팅하셨습니다. 이번 라운드 이후에 다시 시도해 주세요. [6070]",
        6071: "귀하는 이 테이블을 가지고 있지 않습니다! [6071]",
        6072: "테이블이 만석입니다. 사이드 벳으로 시도하십시오. [6072]",
        6073: "테이블 주인이 비밀번호를 설정했습니다. [6073]",
        6074: "4분 이상 베팅하지 않아서 자동으로 퇴장하셨습니다({{0}}). [6074]",
        6075: "세션 ID가 만료되었습니다. 다시 방문하여 시도하십시오. [6075]",
        6076: "Your session has expired. Please log in again [6076]",
        6077: "세션이 이미 사용되었습니다. 다시 방문하여 시도하십시오. [6077]",
        6078: "You are logged out of the game. [6078]",
        6079: "플렛폼 점검중 [6079]",
        6080: "테이블에 입장하지 못했습니다. 다시 시도하십시오. [6080]",
        6081: "VIP 테이블에 입장하지 못했습니다. 다시 시도하십시오. [6081]",
        6082: "귀하가 게임에 로그인하려는 위치때문에 사용 제한되었습니다. 불편을 끼쳐 드려 죄송합니다. [6082]",
        6083: "베팅 실패, 이번 라운드에 커미션으로 베팅을 했습니다 [6083]",
        6084: "베팅 실패, 이번 라운드에 노커미션으로 베팅했습니다. [6084]",
        6085: "핸디캡이 잘못 되어서 예약 및 가입을 할 수 없습니다. 사이드 벳으로 시도하십시오. [6085]",
        6086: "비밀번호가 재설정되었습니다. 다시 로그인하십시오. [6086]",
        6087: "이전 암호와 새 암호는 같을 수 없습니다 [6087]",
        6088: "You are not allowed to enter this game table according to current VIP handicap. If adjustment on VIP handicap is needed, please contact customer service or your superior agent [6088]",
        6090: "Request timeout [6090]",
        6091: "Login failed [6091]",
        6092: "You are logged out of the game [6092]",
        6093: "Verification code is incorrect. Please try again [6093]",
        6094: "Your free trial has expired (15 minutes), you are logged out of the game [6094]",
        6095: "Verification can be sent once per round only [6095]",
        6096: "Invalid operation [6096]",
        6097: "Incorrect state when performing verification [6097]",
        6098: "Not allowed to bet on pair related field after <number> rounds ",
        6099: "No Red Packet to collect [6099]",
        6100: "Red Packet has been collected already [6100]",
        6101: "Activity has not started yet [6101]",
        6102: "Activity status is illegal [6102]",
        6103: "Not ready to claim rpa [6103]",
        6111: "Player has folded for this round [6111]",
        6112: "Player has checked for this round [6112]",
        6113: "Illegal sub round betting state [6113]",
        6114: "Not in betting state [6114]",
        6115: "Bet on trips is not allowed without ante/blind [6115]",
        6116: "Ante and Blind must be betted together [6116]",
        6117: "Ante and Blind amount must be equal [6117]",
        6118: "Player can only bet on Ante/Blind/Trips in the first round [6118]",
        6119: "Player can only bet on 4x/3x in the second round [6119]",
        6120: "Player can only bet on 2x in the third round [6120]",
        6121: "Player can only bet on 1x in the last round [6121]",
        6122: "Invalid Bet Amount [6122]",
        6123: "Raise is not allowed without ante [6123]",
        6124: "Duplicated raise [6124]",
        6126: "No bet on 6 consecutive game rounds is detected, auto-exited game table. [6126]",
        6200: "Response timeout. Please contact our customer service team. [6200]",
        6201: "Response timeout. Please contact our customer service team. [6201]",
        6202: "Response timeout. Please contact our customer service team. [6202]",
        6203: "Response timeout. Please contact our customer service team. [6203]",
        6204: "Response timeout. Please contact our customer service team. [6204]",
        100001: "Your agent have not enable your mobile login",
        200001: "문제가 발생했습니다. 자세한 내용은 CSD에게 연락해 주십시오. 감사합니다. [1000]",
        200002: "시스템 세션이 만료되었습니다. 현재 게임 창을 닫고 재시도하시기 바랍니다. [1001]",
        200003: "시스템 세션이 만료되었습니다. 현재 게임 창을 닫고 재시도하시기 바랍니다. [1002]",
        200004: "문제가 발생했습니다. 자세한 내용은 CSD에게 연락해 주십시오. 감사합니다. [1003]",
        200005: "문제가 발생했습니다. 자세한 내용은 CSD에게 연락해 주십시오. 감사합니다. [1004]",
        200006: "문제가 발생했습니다. 자세한 내용은 CSD에게 연락해 주십시오. 감사합니다. [1005]",
        200007: "문제가 발생했습니다. 자세한 내용은 CSD에게 연락해 주십시오. 감사합니다. [1006]",
        200008: "문제가 발생했습니다. 자세한 내용은 CSD에게 연락해 주십시오. 감사합니다. [1007]",
        200009: "문제가 발생했습니다. 자세한 내용은 CSD에게 연락해 주십시오. 감사합니다. [1008]",
        200011: "접근할 수 없는 계정입니다. 자세한 내용은 관리자에게 문의해 주십시오. 감사합니다. [2002]",
        200012: "문제가 발생했습니다. 자세한 내용은 CSD에게 연락해 주십시오. 감사합니다. [2003]",
        200013: "문제가 발생했습니다. 자세한 내용은 CSD에게 연락해 주십시오. 감사합니다. [3001]",
        200014: "이 계정에는 자금이 부족합니다. [3002]",
        200015: "베팅 제한 이상의 자금이 설정되어 있습니다. 재시도하시기 바랍니다. [3003]",
        200016: "무효한 게임입니다. 자세한 내용은 관리자에게 문의해 주십시오. 감사합니다. [3004]",
        200017: "문제가 발생했습니다. 자세한 내용은 CSD에게 연락해 주십시오. 감사합니다. [3005]",
        200018: "승리 제한 수에 도달했습니다! 관리자에게 문의 바랍니다. 감사합니다. [3006]",
        200019: "패배 제한 수에 도달했습니다! 관리자에게 문의 바랍니다. 감사합니다. [3007]",
        200020: "이 게임에 대한 베팅 제한이 설정되어 있지 않습니다. 자세한 내용은 관리자에게 문의해 주십시오. [3008]",
        200021: "귀하의 베팅 한도가 변경되었습니다 . 새로운 베팅 한도를 적용하려면 다시 로그인해주십시오 .[3009]",
        200022: "계정이 정지되었습니다. 자세한 내용은 관리자에게 문의해 주십시오. 감사합니다. [3010]",
        200023: "계정이 정지되었습니다. 자세한 내용은 관리자에게 문의해 주십시오. 감사합니다. [3013]",
        200024: "현 시점에서는 게임을 사용할 수 없습니다. 자세한 내용은 CSD에게 연락해 주십시오. 감사합니다. [3014]"
    }, error_msg$7 = {
        ban: "Your account has been logged in elsewhere. ",
        kick: "Session expired. Please reconnect to the platform!",
        processing_game_bet: "Your bet is being processed, please wait.",
        quitGame: "Press OK to quit game",
        relogin: "Press OK to return to the login page.",
        unknown: "The network is disconnected, press OK to quit game",
        connection: {
            connection_problem: "Press OK to connect back to the game.",
            server_connection_problem: "Press OK to connect back to the game."
        },
        idle: {
            disconnected_reconnect: "Press OK to connect back to the game.",
            disconnected_to_server: "Press OK to connect back to the game."
        }
    }, fast_bet$7 = {title: "빠른 베팅"}, game_hall$7 = {
        banner_more_detail: "더 보기",
        feature_games: "특징 있는 게임",
        good_roads: "모두 보기",
        hot_games: "인기 게임",
        multi_play: "좋은 길",
        view_all: "모두",
        vip_betlimit: "베팅 한도",
        vip_enter: "입장",
        vip_min_enter: "최소 잔액",
        vip_occupied: "예약됨",
        vip_reserve: "예약",
        subtypes: {all: "모두", classic: "클래식", insurance: "보험", quick: "빠른", see: "카드 보기", sexy: "섹시한", vip: "VIP"}
    }, game_rules$7 = {attention: "주의", game_rules: "게임 규칙", introduction: "소개", payoff: "지급률", title: "도움말"},
    game_table$7 = {
        balanace: "밸런스",
        deposit: "예금",
        deposit_short: "D",
        total_bet: "총 베팅",
        trial: "시험",
        baccarat: {no_comm: "노커미션"},
        blackjack: {
            all_side_bets: "모든 사이드 베팅",
            ante_first: "먼저 ANTE에 베팅하세요",
            banker: "뱅커",
            double: "더블",
            hit: "히트",
            insufficient_insurance: "보험에는 잔액이 부족합니다",
            insurance: "보험?",
            other_decison: "다른 플레이어가 결정을 내리고 있습니다",
            player: "플레이어",
            split: "분할",
            stand: "스탠드",
            instruction: {
                213: {content: "플레이어의 초기 카드와 딜러의 업 카드가 특정한 카드 유형을 형성하면 승리합니다.", title: "럭키 3"},
                label: "지시사항",
                ante: {
                    content: "Win if the player's hand value is closer to 21 than the dealer's hand and does not exceed 21.",
                    title: "ANTE"
                },
                bust: {content: "딜러가 버스트할 경우 승리합니다.", title: "버스트"},
                hot3: {content: "플레이어의 초기 카드 값과 딜러의 업 카드의 합이 19에서 21이면 승리합니다.", title: "핫 3"},
                lucky_ladies: {content: "플레이어의 초기 카드가 특정한 카드 유형을 형성하면 승리합니다.", title: "럭키 레이디스"},
                pair: {content: "플레이어의 초기 카드가 쌍을 이룰 경우 승리합니다.", title: "아무 페어"}
            }
        },
        bullbull: {banker: "뱅커", banker_allwin: "뱅커가 모두 이깁니다", first_card: "첫 번째 카드", player_allwin: "플레이어가 모두 이깁니다"},
        casino_war: {
            "1st_tie": "첫 번째 무승부",
            "2nd_tie": "두 번째 무승부",
            banker: "뱅커",
            decision: "결정하세요",
            player_1: "플레이어 1",
            player_2: "플레이어 2",
            player_3: "플레이어 3",
            surrender: "양보"
        },
        fpc: {any_two_dice: "아무 두 주사위", both_one_dice: "둘 다 주사위"},
        roulette: {orphelins: "골든플래닛", tier: "골드", voisins: "플라티넘", zero: "실버"},
        seecard: {other_squeezing: "소유자가 카드를 빼고 있습니다"},
        teen_patti: {pair_plus: "페어+"},
        uth: {
            banker: "다른 플레이어가 카드를 빼고 있습니다",
            community: "커뮤니티",
            decision: "결정하세요",
            play: "플레이어 3",
            player_1: "뱅커",
            player_1_short: "P1",
            player_2: "플레이어 1",
            player_2_short: "P2",
            player_3: "플레이어 2",
            player_3_short: "P3",
            raise1x: "레이즈 1배",
            raise2x: "레이즈 2배",
            raise3x: "레이즈 3배",
            raise4x: "레이즈 4배"
        },
        vip: {
            owner_squeezing: "최소 잔액",
            owner_tooltip: "건너뛰기",
            reserve_action_tooltip: "예약됨",
            reserve_betlimit: "보존",
            reserve_min_enter: "베팅 한도",
            reserve_request: "Shuffle 요청 제출됨",
            reserved_tooltip: "보존",
            shuffle_request: "셔플요청이 접수되었습니다. 5분 내에 셔플이 진행됩니다",
            shuffle_tooltip: "테이블 예약됨. 다음 라운드에 당신이 소유자가 될 것입니다.",
            skip_tooltip: "시작",
            start_tooltip: "셔플"
        }
    }, game_types$7 = {
        101: "바카라",
        102: "VIP 바카라 (레거시)",
        103: "빠른 바카라",
        104: "미파이 바카라",
        110: "보험 바카라",
        111: "VIP 바카라",
        201: "식보",
        202: "생선 새우 게",
        203: "석접",
        301: "드래곤타이거",
        401: "룰렛",
        501: "클래식 포크 뎅",
        602: "안다르바하르",
        603: "틴 패티 20-20",
        702: "얼티밋 홀덤 포커",
        703: "카지노워",
        704: "인피니트 블랙잭",
        801: "니우니우",
        901: "황금꽃폭탄",
        "201_Alt": "하이로",
        "201_Alt_2": "판탄",
        "501_Alt": "투 사이드 폭뎅",
        "901_Alt": "삼공",
        "901_Alt_2": "틴 패티 20-20",
        arcadeGame: "카지노 게임",
        card_game: "카드 게임",
        cardGame: "카드 게임",
        classic: "클래식",
        fishingGame: "Câu Cá AB",
        game_hall: "로비",
        multi_hall: "다중 플레이",
        sexy: "섹시한",
        slotGame: "슬롯 게임",
        UTH_Short: "얼티밋 홀덤 포커"
    }, gamehall_table$7 = {
        maintaining: "유지 보수",
        notable: "테이블 없음",
        good_road: {
            100: "롱 뱅커",
            101: "롱 플레이어",
            102: "싱글 로드",
            103: "One P Two B",
            104: "One B Two P",
            105: "패티드 이트",
            106: "B across P",
            107: "P across B",
            108: "분리된 B",
            109: "분리된 P"
        }
    }, header$7 = {
        bet_record: "베팅 기록",
        card_game: "AB FISHING",
        exitfullscreen: "전체 화면 나가기",
        fullscreen: "전체 화면",
        hot_games: "LOBBY",
        live_games: "LIVE GAMES",
        logout: "로그아웃",
        multi_table: "MULTIPLAY",
        profile: "프로필",
        services: "서비스",
        Version: "버전"
    }, login$7 = {free_trial: "무료 체험", login: "로그인", password: "비밀번호", username: "사용자 이름"}, menu$7 = {
        addToHomeScreenForIOS: "홈 화면에 추가",
        back: "로비로 돌아가기",
        downloadApp: "앱 다운로드",
        exitfullscreen: "전체 화면 종료",
        fast_bet: "빠른 베팅",
        fullscreen: "전체 화면",
        guide: "도움말",
        history: "베팅 기록",
        installation_instruction: "안내",
        installPwa: "설치",
        lobby: "로비",
        loginApp: "앱 로그인",
        payout: "PAYOUT",
        settings: "설정",
        title: "메뉴",
        verification: "VERIFY",
        video: "새로고침"
    }, messages$7 = {
        all_in: "올 인",
        bet_success: "베팅이 확인되었습니다.",
        cancel: "취소",
        game_table_verified: "검증이 전송되었습니다. 화면에서 검증 결과를 확인하십시오.",
        idle_video: "인장이 비활성 상태로 일시 중지되었습니다. 다시 시작하려면 OK를 누르십시오.",
        insufficient_bet_balance: "잔액이 부족합니다.",
        insufficient_vip_balance: "금액이 부족합니다",
        landscape_block: "최상의 경험을 위해 모바일 기기를 회전하세요.",
        loading: "로딩 중",
        logout: "로그아웃하시겠습니까?",
        logoutOK: "로그아웃",
        lost: "당신이 졌습니다.",
        multi_side_hall_filter: "Filter cannot be empty, please select at least one game type.",
        nickname_success: "닉네임이 업데이트되었습니다!",
        ok_button: "확인",
        screen_size_block: "최고의 경험을 위해 창 크기를 조정해 주세요",
        table_not_found: "게임 테이블을 찾을 수 없습니다.",
        table_under_maintenance: "Game table is under maintenance",
        won: "당신이 이겼습니다."
    }, payout$7 = {
        bet: "베팅", bet_limit: "베팅 한도", odds: "배당률", payout: "지급률", bet_type: {
            1001: "뱅커",
            1002: "플레이어",
            1003: "무승부",
            1006: "뱅커 페어",
            1007: "플레이어 페어",
            1011: "뱅커 (노커미션)",
            1100: "럭키 6",
            1211: "뱅커 네추럴",
            1212: "플레이어 네추럴",
            1223: "양쪽 페어",
            1224: "퍼펙트 페어",
            1231: "뱅커 보너스",
            1232: "플레이어 보너스",
            1401: "타이거",
            1402: "작은 타이거",
            1403: "큰 타이거",
            1404: "타이거 페어",
            1405: "타이거 타이",
            1501: "뱅커 패뷸러스 4",
            1502: "플레이어 패뷸러스 4",
            1503: "뱅커 프레셔스 페어",
            1504: "플레이어 프레셔스 페어",
            1601: "뱅커 블랙",
            1602: "뱅커 레드",
            1603: "플레이어 블랙",
            1604: "플레이어 레드",
            1605: "어떤 6",
            2001: "드래곤",
            2002: "타이거",
            2003: "무승부",
            3001: "빅 / 스몰",
            3002: "짝수 / 홀수",
            3005: "특정 트리플",
            3011: "아무 트리플",
            3012: "특정 더블",
            3018: "4 또는 17 포인트",
            3019: "5 또는 16 포인트",
            3020: "6 또는 15 포인트",
            3021: "7 또는 14 포인트",
            3022: "8 또는 13 포인트",
            3023: "9, 10, 11 또는 12 포인트",
            3033: "두 주사위 조합",
            3048: "한 주사위",
            3049: "두 주사위",
            3050: "세 주사위",
            3200: "하이",
            3201: "로우",
            3202: "11 하이-로우",
            3203: "주사위 1 - 6",
            3209: "두 주사위 조합",
            3224: "1 로우",
            3225: "2 로우",
            3226: "3 로우",
            3227: "4 로우",
            3228: "5 - 6 로우",
            3230: "3 - 4 하이",
            3232: "5 하이",
            3233: "6 하이",
            3234: "세 주사위 조합",
            3301: "메인 심볼",
            3307: "특정 단일 색상",
            3310: "특정 이중 색상",
            3313: "특정 삼중 색상",
            3316: "아무 삼중 색상",
            3317: "두 주사위 조합",
            3401: "홀수 / 짝수",
            3403: "FAN",
            3407: "NIM",
            3419: "NGA",
            3431: "SSH",
            3435: "12 KWOK / 23 KWOK / 34 KWOK",
            3438: "41 KWOK",
            3500: "무승부",
            3501: "작음",
            3502: "큼",
            3503: "홀수",
            3504: "짝수",
            3505: "0",
            3506: "1",
            3507: "3",
            3508: "4",
            4001: "빅 / 스몰",
            4002: "홀수 / 짝수",
            4003: "빨강 / 검정",
            4007: "다즌",
            4010: "열",
            4013: "스트레이트",
            4050: "세 숫자",
            4052: "네 숫자",
            4053: "분리",
            4113: "코너",
            4135: "스트리트",
            4147: "라인",
            5001: "플레이어 1-5",
            5011: "플레이어 1-5 페어",
            5101: "플레이어 1-5",
            5106: "뱅커 1-5",
            5111: "뱅커 페어",
            6201: "안다르",
            6202: "바하르",
            6203: "1-5 카드",
            6204: "6-10 카드",
            6205: "11-15 카드",
            6206: "16-25 카드",
            6207: "26-30 카드",
            6208: "31-35 카드",
            6209: "36-40 카드",
            6210: "41+ 카드",
            6211: "1번째 안다르",
            6212: "1번째 바하르",
            6301: "플레이어 A",
            6302: "플레이어 B",
            6303: "무승부",
            6304: "플레이어 A 페어 플러스",
            6305: "플레이어 B 페어 플러스",
            6306: "6 카드 보너스",
            7201: "플레이어 1 - 3 앤티",
            7202: "플레이어 1 - 3 블라인드",
            7203: "플레이어 1 - 3 트립스",
            7301: "플레이어 1 - 3 앤티",
            7302: "플레이어 1 - 3 1번째 타이",
            7304: "플레이어 1 - 3 2번째 타이",
            7401: "앤티",
            7404: "아무 페어",
            7405: "럭키 3",
            7406: "핫 3",
            7407: "버스트 잇",
            7409: "럭키 레이디스",
            8001: "뱅커 1",
            8002: "뱅커 2",
            8003: "뱅커 3",
            8011: "뱅커 1",
            8012: "뱅커 2",
            8013: "뱅커 3",
            8021: "뱅커 1",
            8022: "뱅커 2",
            8023: "뱅커 3",
            8101: "플레이어 1",
            8102: "플레이어 2",
            8103: "플레이어 3",
            8111: "플레이어 1",
            8112: "플레이어 2",
            8113: "플레이어 3",
            8121: "플레이어 1",
            8122: "플레이어 2",
            8123: "플레이어 3",
            9001: "드래곤",
            9002: "피닉스",
            9003: "페어 8+",
            9004: "스트레이트",
            9005: "플러시",
            9006: "스트레이트 플러시",
            9007: "트리플",
            9101: "드래곤",
            9102: "피닉스",
            9103: "무승부",
            9114: "드래곤 3 사진",
            9124: "피닉스 3 사진"
        }
    }, profile$7 = {
        save: "저장",
        title: "프로필",
        main_view: {change_password: "비밀번호 변경?", nickname: "닉네임", pending: "대기 중"},
        password_view: {
            confirm_password: "비밀번호 확인",
            current_password: "현재 비밀번호",
            hints: "6-10자의 영문 및 숫자를 입력해 주세요",
            new_password: "새 비밀번호"
        }
    }, roadmap$7 = {
        analysis: "분석",
        history: "히스토리",
        last_10_rounds: "마지막 10 라운드",
        last_50_rounds: "마지막 50 라운드",
        last_6_rounds: "마지막 6 라운드",
        round_num: "Round #",
        statistics: "통계",
        andar_bahar: {andar: "안다르", bahar: "바하르"},
        baccarat: {banker: "B", player: "P", predict_banker: "뱅커 예측", predict_player: "플레이어 예측", tie: "T"},
        bull_bull: {
            game_hall: {
                0: "불 없음",
                1: "불 1",
                2: "불 2",
                3: "불 3",
                4: "불 4",
                5: "불 5",
                6: "불 6",
                7: "불 7",
                8: "불 8",
                9: "불 9",
                A: "불 불",
                B: "불 불",
                banker: "B",
                player_1: "P1",
                player_2: "P2",
                player_3: "P3"
            },
            game_table: {
                0: "불 없음",
                1: "불 1",
                2: "불 2",
                3: "불 3",
                4: "불 4",
                5: "불 5",
                6: "불 6",
                7: "불 7",
                8: "불 8",
                9: "불 9",
                A: "불 불",
                B: "5 공작",
                banker: "뱅커",
                player_1: "플레이어 1",
                player_2: "플레이어 2",
                player_3: "플레이어 3"
            }
        },
        casino_war: {banker: "B", player_1: "P1", player_2: "P2", player_3: "P3"},
        dragon_tiger: {dragon: "D", predict_dragon: "드래곤 예측", predict_tiger: "타이거 예측", tie: "T", tiger: "T"},
        hi_lo: {hi: "HI", hi_lo: "11", lo: "LO"},
        pokdeng: {banker: "B", player_1: "P1", player_2: "P2", player_3: "P3", player_4: "P4", player_5: "P5"},
        roulette: {hot_cold: "핫 & 콜드"},
        sicbo: {big: "큰", small: "작은", triple: "트리플"},
        sictan: {even: "짝수", fan_1: "1 FAN", fan_2: "2 FAN", fan_3: "3 FAN", fan_4: "4 FAN", odd: "홀수"},
        teen_patti: {
            235: "235",
            flush: "플러시",
            four_of_a_kind: "포 카드",
            full_house: "풀 하우스",
            high_card: "하이 카드",
            pair: "페어",
            pair_plus: "PAIR+",
            player_a: "A",
            player_b: "B",
            royal_flush: "로열 플러시",
            straight: "스트레이트",
            straight_flush: "스트레이트 플러시",
            three_of_a_kind: "트리플",
            tie: "T"
        },
        three_pictures: {
            double_pictures: "DP",
            dragon: "D",
            phoenix: "P",
            single_picture: "SP",
            tie: "T",
            triple_pictures: "3P"
        },
        win3cards: {
            235: "235",
            dragon: "D",
            flush: "플러시",
            high_card: "하이 카드",
            "p8+": "P8",
            pair: "페어",
            phoenix: "P",
            straight: "스트레이트",
            straight_flush: "스트레이트 플러시",
            three_of_a_kind: "트리플",
            tie: "T"
        },
        xocdia: {even: "짝수", odd: "홀수", tie: "무승부", big: "큼", small: "작음", o: "O", e: "E"}
    }, settings$7 = {
        title: "설정",
        bullbull: {double: "더블", equal: "이퀄", play_type: "베팅 유형", play_type_multiplay: "베팅 유형 (불불)", super: "슈퍼 불"},
        general: {
            confirmed_bet_amounts: "확정된 베팅 금액",
            languages: "언어",
            side_bets: "사이드 베팅",
            statistics: "베팅 통계",
            title: "디스플레이"
        },
        scorecards: {classic: "클래식", immersive: "몰입형", title: "스코어카드"},
        sound: {live: "라이브 사운드", system: "시스템 사운드", title: "사운드"}
    }, side_hall_filter$7 = {
        101: "바카라",
        103: "빠른",
        104: "카드 보기",
        110: "보험",
        111: "VIP",
        201: "식보",
        202: "생선 새우 게",
        203: "석접",
        301: "드래곤타이거",
        401: "룰렛",
        501: "클래식 포크 뎅",
        602: "안다르바하르",
        603: "틴 패티 20-20",
        801: "니우니우",
        901: "황금꽃폭탄",
        "201_Alt": "하이로",
        "201_Alt_2": "판탄",
        "501_Alt": "투 사이드 폭뎅",
        "901_Alt": "삼공",
        "901_Alt_2": "틴 패티 20-20",
        asia: "아시아 게임",
        baccarat: "바카라",
        classic: "클래식",
        europe: "유럽 게임",
        global: "글로벌 게임",
        other: "다른 게임",
        sexy: "섹시한"
    }, kr = {
        baccarat_gameplay: baccarat_gameplay$7,
        bet_record: bet_record$7,
        bet_type: bet_type$7,
        custom_chips: custom_chips$7,
        detailed_bet_type: detailed_bet_type$7,
        error_code: error_code$7,
        error_msg: error_msg$7,
        fast_bet: fast_bet$7,
        game_hall: game_hall$7,
        game_rules: game_rules$7,
        game_table: game_table$7,
        game_types: game_types$7,
        gamehall_table: gamehall_table$7,
        header: header$7,
        login: login$7,
        menu: menu$7,
        messages: messages$7,
        payout: payout$7,
        profile: profile$7,
        roadmap: roadmap$7,
        settings: settings$7,
        side_hall_filter: side_hall_filter$7
    }, baccarat_gameplay$6 = {
        basic: "Básico",
        default: "Padrão",
        fabulous_4: "Fabulous 4",
        natural: "Sorte Natural 6",
        super: "Super bacará",
        switch: "Mudar estilo de jogo",
        tiger: "Tigre"
    }, bet_record$6 = {
        bet_amount: "Quantidade da aposta",
        bet_type: "Tipo de aposta",
        betting_number: "Número da aposta",
        date_time: "Date & Time",
        game: "Game",
        game_type: "Tipo de jogo",
        gameround_id: "ID da ronda do jogo",
        loading: "Loading",
        next: "Seguinte",
        no_video: "Please note that this round of the game is invaild, and live video will not be displayed.",
        previous: "Anterior",
        shoe_round: "Mostrar outros resultados",
        status: "Estado",
        table_number: "Número da mesa",
        total_bet: "Aposta total",
        valid_bet: "Aposta válida",
        win_loss: "Vitória/Derrota",
        bet_status: {100: "A apostar", 101: "Failed", 110: "Não estabelecido", 111: "Estabelecido", 120: "Reembolso"},
        title: {details: "Details", records: "Registos da aposta"}
    }, bet_type$6 = {
        1001: "Banqueiro",
        1002: "Jogador",
        1003: "TIE",
        1006: "B Par",
        1007: "P Par",
        1011: "Banqueiro",
        1100: "Sorte 6",
        1211: "Banqueiro natural",
        1212: "Jogador natural",
        1223: "Qualquer par",
        1224: "PERFECT PAIR",
        1231: "Banqueiro Bónus do dragão",
        1232: "Jogador Bónus do dragão",
        1301: "INSURANCE",
        1302: "INSURANCE",
        1303: "INSURANCE",
        1304: "INSURANCE",
        1401: "Tigre",
        1402: "Grande Tigre",
        1403: "Pequeno Tigre",
        1404: "Tigre Empate",
        1405: "Tigre Par",
        1501: "Banqueiro Fabulous 4",
        1502: "Jogador Fabulous 4",
        1503: "Banqueiro Par Precioso",
        1504: "Jogador Par Precioso",
        1601: "Banqueiro Preto",
        1602: "Banqueiro Vermelho",
        1603: "Jogador Preto",
        1604: "Jogador Vermelho",
        1605: "Quaisquer 6",
        2001: "DRAGON",
        2002: "Tigre",
        2003: "TIE",
        3001: "Pequeno",
        3002: "Odds",
        3003: "Empate",
        3004: "Grande",
        3011: "Qualquer triplo",
        3048: "ONE",
        3049: "TWO",
        3050: "THREE",
        3051: "FOUR",
        3052: "FIVE",
        3053: "SIX",
        3200: "HI",
        3201: "LO",
        3225: "LO",
        3227: "LO",
        3228: "LO",
        3229: "LO",
        3230: "HI",
        3232: "HI",
        3401: "Odds",
        3402: "Empate",
        3403: "1 FAN",
        3404: "2 FAN",
        3405: "3 FAN",
        3406: "4 FAN",
        3407: "1NIM2",
        3408: "1NIM3",
        3409: "1NIM4",
        3410: "2NIM1",
        3411: "2NIM3",
        3412: "2NIM4",
        3413: "3NIM1",
        3414: "3NIM2",
        3415: "3NIM4",
        3416: "4NIM1",
        3417: "4NIM2",
        3418: "4NIM3",
        3419: "23ONE NGA",
        3420: "24ONE NGA",
        3421: "34ONE NGA",
        3422: "13TWO NGA",
        3423: "14TWO NGA",
        3424: "34TWO NGA",
        3425: "12THREE NGA",
        3426: "14THREE NGA",
        3427: "24THREE NGA",
        3428: "13FOUR NGA",
        3429: "12FOUR NGA",
        3430: "23FOUR NGA",
        3431: "SSH123",
        3432: "SSH124",
        3433: "SSH134",
        3434: "SSH234",
        3435: "KWOK12",
        3436: "KWOK23",
        3437: "KWOK34",
        3438: "KWOK41",
        3500: "TIE",
        3501: "Pequeno",
        3502: "Grande",
        3503: "Odds",
        3504: "Empate",
        4001: "1 - 18",
        4002: "Empate",
        4005: "Odds",
        4006: "19 - 36",
        4007: "ST",
        4008: "ND",
        4009: "RD",
        4010: "",
        4011: "",
        4012: "",
        5001: "P1",
        5002: "P2",
        5003: "P3",
        5004: "P4",
        5005: "P5",
        5011: "P1 Par",
        5012: "P2 Par",
        5013: "P3 Par",
        5014: "P4 Par",
        5015: "P5 Par",
        5101: "P1",
        5102: "P2",
        5103: "P3",
        5104: "P4",
        5105: "P5",
        5106: "B1",
        5107: "B2",
        5108: "B3",
        5109: "B4",
        5110: "B5",
        5111: "B Par",
        6201: "ANDAR",
        6202: "BAHAR",
        6203: "1-5",
        6204: "6-10",
        6205: "11-15",
        6206: "16-25",
        6207: "26-30",
        6208: "31-35",
        6209: "36-40",
        6210: "41+",
        6211: "<span>1</span>st ANDAR",
        6212: "<span>1</span>st BAHAR",
        6301: "Jogador A",
        6302: "Jogador B",
        6303: "TIE",
        6304: "Jogador A Par+",
        6305: "Jogador B Par+",
        6306: "Bónus de 6 cartas",
        7201: "Ante",
        7202: "Blind",
        7203: "Trips",
        7204: "RAISE 4x",
        7205: "RAISE 3x",
        7206: "RAISE 2x",
        7207: "RAISE 1x",
        7211: "Ante",
        7212: "Blind",
        7213: "Trips",
        7214: "RAISE 4x",
        7215: "RAISE 3x",
        7216: "RAISE 2x",
        7217: "RAISE 1x",
        7221: "Ante",
        7222: "Blind",
        7223: "Trips",
        7224: "RAISE 4x",
        7225: "RAISE 3x",
        7226: "RAISE 2x",
        7227: "RAISE 1x",
        7301: "Ante",
        7302: "TIE",
        7303: "Guerra",
        7304: "2º empate",
        7311: "Ante",
        7312: "TIE",
        7313: "Guerra",
        7314: "2º empate",
        7321: "Ante",
        7322: "TIE",
        7323: "Guerra",
        7324: "2º empate",
        7401: "Ante",
        7402: "ANTE DOUBLE",
        7403: "SPLIT",
        7404: "PAIR",
        7405: "Lucky 3",
        7406: "HOT 3",
        7407: "BUST IT",
        7408: "INSURANCE",
        7409: "LUCKY LADIES",
        8001: "Banqueiro 1",
        8002: "Banqueiro 2",
        8003: "Banqueiro 3",
        8011: "Banqueiro 1",
        8012: "Banqueiro 2",
        8013: "Banqueiro 3",
        8021: "Banqueiro 1",
        8022: "Banqueiro 2",
        8023: "Banqueiro 3",
        8101: "Jogador 1",
        8102: "Jogador 2",
        8103: "Jogador 3",
        8111: "Jogador 1",
        8112: "Jogador 2",
        8113: "Jogador 3",
        8121: "Jogador 1",
        8122: "Jogador 2",
        8123: "Jogador 3",
        9001: "DRAGON",
        9002: "PHOENIX",
        9003: "Par 8 Plus",
        9004: "STRAIGHT",
        9005: "FLUSH",
        9006: "STRAIGHT FLUSH",
        9007: "THREE OF A KIND",
        9101: "DRAGON",
        9102: "PHOENIX",
        9103: "TIE",
        9114: "DRAGON THREE PICTURES",
        9124: "PHOENIX THREE PICTURES",
        tips: {
            6306: "Royal Flush/Straight Flush/Four of a Kind/Full House/Flush/Straight/Three of a Kind",
            9003: "Contains Pair 9 - Pair A / Straight / Flush / Straight Flush / Three of a Kind",
            banker_insurance: "Apostar na garantia do banqueiro",
            bullbull_firstcard: "First Card",
            cards_dealt: "Cards Dealt",
            check: "Check",
            checked: "YOU CHECKED",
            comm_betted: "Fez apostas na Comissão nesta ronda.",
            double_text: "TWO DICE",
            fold: "Desistir",
            folded: "YOU FOLDED",
            house_card: "HOUSE",
            lose: "Perdeu",
            no_bet_after: "Após a %1ª rodada de cada sapato, não são permitidas apostas em %2.",
            no_comm_betted: "Fez apostas na não Comissão nesta ronda.",
            no_pairs: "After the 50th game round in every shoe, no betting are allowed on Pairs.",
            player_1: "Jogador 1",
            player_2: "Jogador 2",
            player_3: "Jogador 3",
            player_insurance: "Apostar na garantia do jogador",
            raised: "YOU RAISED",
            single_text: "ONE DICE",
            surrender: "Render-se",
            tie: "YOU TIE",
            triple_text: "THREE DICE",
            war: "Ir para a guerra",
            win: "Ganhou"
        }
    }, custom_chips$6 = {
        chip_value_exists: "Este valor de ficha já existe. Por favor, tente outro valor.",
        choose_common_chips: "Escolher Fichas Comuns",
        custom_chips_value: "Valor Personalizado das Fichas",
        min_chip_count: "Por favor, escolha pelo menos 5 fichas.",
        min_chip_value: "O valor mínimo permitido para a ficha é",
        select_all: "Selecionar Tudo",
        title: "Fichas Personalizadas"
    }, detailed_bet_type$6 = {
        1001: "Banqueiro",
        1002: "Jogador",
        1003: "Tie",
        1006: "Banqueiro Par",
        1007: "Jogador Par",
        1011: "Banqueir (Sem com.)",
        1100: "Sorte 6",
        1211: "Banqueiro natural",
        1212: "Jogador natural",
        1223: "Qualquer par",
        1224: "Perfect Pair",
        1231: "Banker Bonus",
        1232: "Player Bonus",
        1301: "Banker Insurance 1",
        1302: "Banker Insurance 2",
        1303: "Player Insurance 1",
        1304: "Player Insurance 2",
        1401: "Tigre",
        1402: "Grande Tigre",
        1403: "Pequeno Tigre",
        1404: "Tigre Empate",
        1405: "Tigre Par",
        1501: "Banqueiro Fabulous 4",
        1502: "Jogador Fabulous 4",
        1503: "Banqueiro Par Precioso",
        1504: "Jogador Par Precioso",
        1601: "Banqueiro Preto",
        1602: "Banqueiro Vermelho",
        1603: "Jogador Preto",
        1604: "Jogador Vermelho",
        1605: "Quaisquer 6",
        2001: "Dragon",
        2002: "Tigre",
        2003: "Tie",
        3001: "Pequeno",
        3002: "Odds",
        3003: "Empate",
        3004: "Grande",
        3005: "Tripla 1",
        3006: "Tripla 2",
        3007: "Tripla 3",
        3008: "Tripla 4",
        3009: "Tripla 5",
        3010: "Tripla 6",
        3011: "Qualquer triplo",
        3012: "Duplo 1",
        3013: "Duplo 2",
        3014: "Duplo 3",
        3015: "Duplo 4",
        3016: "Duplo 5",
        3017: "Duplo 6",
        3018: "Soma 4",
        3019: "Soma 5",
        3020: "Soma 6",
        3021: "Soma 7",
        3022: "Soma 8",
        3023: "Soma 9",
        3024: "Soma 10",
        3025: "Soma 11",
        3026: "Soma 12",
        3027: "Soma 13",
        3028: "Soma 14",
        3029: "Soma 15",
        3030: "Soma 16",
        3031: "Soma 17",
        3033: "Two Dice 1,2",
        3034: "Two Dice 1,3",
        3035: "Two Dice 1,4",
        3036: "Two Dice 1,5",
        3037: "Two Dice 1,6",
        3038: "Two Dice 2,3",
        3039: "Two Dice 2,4",
        3040: "Two Dice 2,5",
        3041: "Two Dice 2,6",
        3042: "Two Dice 3,4",
        3043: "Two Dice 3,5",
        3044: "Two Dice 3,6",
        3045: "Two Dice 4,5",
        3046: "Two Dice 4,6",
        3047: "Two Dice 5,6",
        3048: "Dice 1",
        3049: "Dice 2",
        3050: "Dice 3",
        3051: "Dice 4",
        3052: "Dice 5",
        3053: "Dice 6",
        3200: "HI",
        3201: "LO",
        3202: "11 Hi-Lo",
        3203: "Dice 1",
        3204: "Dice 2",
        3205: "Dice 3",
        3206: "Dice 4",
        3207: "Dice 5",
        3208: "Dice 6",
        3209: "HiLo 1-2",
        3210: "HiLo 1-3",
        3211: "HiLo 1-4",
        3212: "HiLo 1-5",
        3213: "HiLo 1-6",
        3214: "HiLo 2-3",
        3215: "HiLo 2-4",
        3216: "HiLo 2-5",
        3217: "HiLo 2-6",
        3218: "HiLo 3-4",
        3219: "HiLo 3-5",
        3220: "HiLo 3-6",
        3221: "HiLo 4-5",
        3222: "HiLo 4-6",
        3223: "HiLo 5-6",
        3224: "1-Lo",
        3225: "2-Lo",
        3226: "3-Lo",
        3227: "4-Lo",
        3228: "5-Lo",
        3229: "6-Lo",
        3230: "3-Hi",
        3231: "4-Hi",
        3232: "5-Hi",
        3233: "6-Hi",
        3234: "1,2,3",
        3235: "2,3,4",
        3236: "3,4,5",
        3237: "4,5,6",
        3301: "Fish",
        3302: "Prawn",
        3303: "Calabash",
        3304: "Coin",
        3305: "Crab",
        3306: "Cock",
        3307: "Specific Single Red",
        3308: "Specific Single Green",
        3309: "Specific Single Blue",
        3310: "Specific Double Red",
        3311: "Specific Double Green",
        3312: "Specific Double Blue",
        3313: "Specific Triple Red",
        3314: "Specific Triple Green",
        3315: "Specific Triple Blue",
        3316: "Any Triple Color",
        3317: "Calabash & Prawn",
        3318: "Calabash & Fish",
        3319: "Calabash & Cock",
        3320: "Calabash & Crab",
        3321: "Calabash & Coin",
        3322: "Prawn & Fish",
        3323: "Prawn & Cock",
        3324: "Prawn & Crab",
        3325: "Prawn & Coin",
        3326: "Fish & Cock",
        3327: "Fish & Crab",
        3328: "Fish & Coin",
        3329: "Cock & Crab",
        3330: "Cock & Coin",
        3331: "Crab & Coin",
        3401: "Odds",
        3402: "Empate",
        3403: "1Fan",
        3404: "2Fan",
        3405: "3Fan",
        3406: "4Fan",
        3407: "1Nim2",
        3408: "1Nim3",
        3409: "1Nim4",
        3410: "2Nim1",
        3411: "2Nim3",
        3412: "2Nim4",
        3413: "3Nim1",
        3414: "3Nim2",
        3415: "3Nim4",
        3416: "4Nim1",
        3417: "4Nim2",
        3418: "4Nim3",
        3419: "23 One Nga",
        3420: "24 One Nga",
        3421: "34 One Nga",
        3422: "13 Two Nga",
        3423: "14 Two Nga",
        3424: "34 Two Nga",
        3425: "12 Three Nga",
        3426: "14 Three Nga",
        3427: "24 Three Nga",
        3428: "13 Four Nga",
        3429: "12 Four Nga",
        3430: "23 Four Nga",
        3431: "SSH 123",
        3432: "SSH 124",
        3433: "SSH 134",
        3434: "SSH 234",
        3435: "12 Kwok",
        3436: "23 Kwok",
        3437: "34 Kwok",
        3438: "41 Kwok",
        3500: "TIE",
        3501: "Pequeno",
        3502: "Grande",
        3503: "Odds",
        3504: "Empate",
        3505: "0",
        3506: "1",
        3507: "3",
        3508: "4",
        4001: "1 - 18",
        4002: "Empate",
        4003: "Vermelho",
        4004: "Preto",
        4005: "Odds",
        4006: "19 - 36",
        4007: "1st Dozen",
        4008: "2nd Dozen",
        4009: "3rd Dozen",
        4010: "1ª coluna",
        4011: "2ª coluna",
        4012: "3ª coluna",
        4013: "Straight 0",
        4014: "Straight 1",
        4015: "Straight 2",
        4016: "Straight 3",
        4017: "Straight 4",
        4018: "Straight 5",
        4019: "Straight 6",
        4020: "Straight 7",
        4021: "Straight 8",
        4022: "Straight 9",
        4023: "Straight 10",
        4024: "Straight 11",
        4025: "Straight 12",
        4026: "Straight 13",
        4027: "Straight 14",
        4028: "Straight 15",
        4029: "Straight 16",
        4030: "Straight 17",
        4031: "Straight 18",
        4032: "Straight 19",
        4033: "Straight 20",
        4034: "Straight 21",
        4035: "Straight 22",
        4036: "Straight 23",
        4037: "Straight 24",
        4038: "Straight 25",
        4039: "Straight 26",
        4040: "Straight 27",
        4041: "Straight 28",
        4042: "Straight 29",
        4043: "Straight 30",
        4044: "Straight 31",
        4045: "Straight 32",
        4046: "Straight 33",
        4047: "Straight 34",
        4048: "Straight 35",
        4049: "Straight 36",
        4050: "Three Numbers 0/1/2",
        4051: "Three Numbers 0/2/3",
        4052: "Four Numbers 0/1/2/3",
        4053: "Seperate(0/1)",
        4054: "Seperate(0/2)",
        4055: "Seperate(0/3)",
        4056: "Seperate(1/2)",
        4057: "Seperate(2/3)",
        4058: "Seperate(4/5)",
        4059: "Seperate(5/6)",
        4060: "Seperate(7/8)",
        4061: "Seperate(8/9)",
        4062: "Seperate(10/11)",
        4063: "Seperate(11/12)",
        4064: "Seperate(13/14)",
        4065: "Seperate(14/15)",
        4066: "Seperate(16/17)",
        4067: "Seperate(17/18)",
        4068: "Seperate(19/20)",
        4069: "Seperate(20/21)",
        4070: "Seperate(22/23)",
        4071: "Seperate(23/24)",
        4072: "Seperate(25/26)",
        4073: "Seperate(26/27)",
        4074: "Seperate(28/29)",
        4075: "Seperate(29/30)",
        4076: "Seperate(31/32)",
        4077: "Seperate(32/33)",
        4078: "Seperate(34/35)",
        4079: "Seperate(35/36)",
        4080: "Seperate(1/4)",
        4081: "Seperate(4/7)",
        4082: "Seperate(7/10)",
        4083: "Seperate(10/13)",
        4084: "Seperate(13/16)",
        4085: "Seperate(16/19)",
        4086: "Seperate(19/22)",
        4087: "Seperate(22/25)",
        4088: "Seperate(25/28)",
        4089: "Seperate(28/31)",
        4090: "Seperate(31/34)",
        4091: "Seperate(2/5)",
        4092: "Seperate(5/8)",
        4093: "Seperate(8/11)",
        4094: "Seperate(11/14)",
        4095: "Seperate(14/17)",
        4096: "Seperate(17/20)",
        4097: "Seperate(20/23)",
        4098: "Seperate(23/26)",
        4099: "Seperate(26/28)",
        4100: "Seperate(28/32)",
        4101: "Seperate(32/35)",
        4102: "Seperate(3/6)",
        4103: "Seperate(6/9)",
        4104: "Seperate(9/12)",
        4105: "Seperate(12/15)",
        4106: "Seperate(15/18)",
        4107: "Seperate(18/21)",
        4108: "Seperate(21/24)",
        4109: "Seperate(24/27)",
        4110: "Seperate(27/30)",
        4111: "Seperate(30/33)",
        4112: "Seperate(33/36)",
        4113: "Corner(1/5)",
        4114: "Canto(2/6)",
        4115: "Canto(4/8)",
        4116: "Canto(5/9)",
        4117: "Canto(7/11)",
        4118: "Canto(8/12)",
        4119: "Canto(10/14)",
        4120: "Canto(11/15)",
        4121: "Canto(13/17)",
        4122: "Canto(14/18)",
        4123: "Canto(16/20)",
        4124: "Canto(17/21)",
        4125: "Canto(18/23)",
        4126: "Canto(20/24)",
        4127: "Canto(22/26)",
        4128: "Canto(23/27)",
        4129: "Canto(25/29)",
        4130: "Canto(26/30)",
        4131: "Canto(28/32)",
        4132: "Canto(29/33)",
        4133: "Canto(31/35)",
        4134: "Canto(32/36)",
        4135: "Street(1-3)",
        4136: "Street(4-6)",
        4137: "Street(7-9)",
        4138: "Street(10-12)",
        4139: "Street(13-15)",
        4140: "Street(16-18)",
        4141: "Street(19-21)",
        4142: "Street(22-24)",
        4143: "Street(25-27)",
        4144: "Street(28-30)",
        4145: "Street(31-33)",
        4146: "Street(34-36)",
        4147: "Line(1-6)",
        4148: "Line(4-9)",
        4149: "Line(7-12)",
        4150: "Line(10-15)",
        4151: "Line(13-18)",
        4152: "Line(16-21)",
        4153: "Line(19-24)",
        4154: "Line(22-27)",
        4155: "Line(28-33)",
        4156: "Line(31-36)",
        4157: "Line(25-30)",
        5001: "P1",
        5002: "P2",
        5003: "P3",
        5004: "P4",
        5005: "P5",
        5011: "P1 Par",
        5012: "P2 Par",
        5013: "P3 Par",
        5014: "P4 Par",
        5015: "P5 Par",
        5101: "P1",
        5102: "P2",
        5103: "P3",
        5104: "P4",
        5105: "P5",
        5106: "Banqueiro 1",
        5107: "Banqueiro 2",
        5108: "Banqueiro 3",
        5109: "Banqueiro 4",
        5110: "Banqueiro 5",
        5111: "Banqueiro Par",
        6201: "ANDAR",
        6202: "BAHAR",
        6203: "1-5 cartas",
        6204: "6-10 cartas",
        6205: "11-15 cartas",
        6206: "16-25 cartas",
        6207: "26-30 cartas",
        6208: "31-35 cartas",
        6209: "36-40 cartas",
        6210: "41+ cartas",
        6211: "1º ANDAR",
        6212: "1º BAHAR",
        6301: "Jogador A",
        6302: "Jogador B",
        6303: "Tie",
        6304: "Jogador A Par+",
        6305: "Jogador B Par+",
        6306: "Bónus de 6 cartas",
        7201: "Jogador 1 Ante",
        7202: "Jogador 1 Blind",
        7203: "Jogador 1 Trips",
        7204: "Player 1 Raise 4x",
        7205: "Player 1 Raise 3x",
        7206: "Player 1 Raise 2x",
        7207: "Player 1 Raise 1x",
        7211: "Jogador 2 Ante",
        7212: "Jogador 2 Blind",
        7213: "Jogador 2 Trips",
        7214: "Player 2 Raise 4x",
        7215: "Player 2 Raise 3x",
        7216: "Player 2 Raise 2x",
        7217: "Player 2 Raise 1x",
        7221: "Jogador 3 Ante",
        7222: "Jogador 3 Blind",
        7223: "Jogador 3 Trips",
        7224: "Player 3 Raise 4x",
        7225: "Player 3 Raise 3x",
        7226: "Player 3 Raise 2x",
        7227: "Player 3 Raise 1x",
        7301: "Jogador 1 Ante",
        7302: "Player 1 1st Tie",
        7303: "Jogador 1 Guerra",
        7304: "Player 1 2nd Tie",
        7311: "Jogador 2 Ante",
        7312: "Player 2 1st Tie",
        7313: "Jogador 2 Guerra",
        7314: "Player 2 2nd Tie",
        7321: "Jogador 3 Ante",
        7322: "Player 3 1st Tie",
        7323: "Jogador 3 Guerra",
        7324: "Player 3 2nd Tie",
        7401: "Ante",
        7402: "Ante Double",
        7403: "Split",
        7404: "Any Pair",
        7405: "Lucky 3",
        7406: "Hot 3",
        7407: "Bust It",
        7408: "Insurance",
        7409: "Lucky Ladies",
        8001: "Banker 1 (Equal)",
        8002: "Banker 2 (Equal)",
        8003: "Banker 3 (Equal)",
        8011: "Banker 1 (Double)",
        8012: "Banker 2 (Double)",
        8013: "Banker 3 (Double)",
        8021: "Banker 1 (Super Bull)",
        8022: "Banker 2 (Super Bull)",
        8023: "Banker 3 (Super Bull)",
        8101: "Player 1 (Equal)",
        8102: "Player 2 (Equal)",
        8103: "Player 3 (Equal)",
        8111: "Player 1 (Double)",
        8112: "Player 2 (Double)",
        8113: "Player 3 (Double)",
        8121: "Player 1 (Super Bull)",
        8122: "Player 2 (Super Bull)",
        8123: "Player 3 (Super Bull)",
        9001: "Dragon",
        9002: "Phoenix",
        9003: "Pair 8+",
        9004: "Straight",
        9005: "Flush",
        9006: "Straight Flush",
        9007: "Three of a Kind",
        9101: "Dragon",
        9102: "Phoenix",
        9103: "Tie",
        9114: "Dragon Three Pictures",
        9124: "Phoenix Three Pictures",
        additional_result: {
            235: "235",
            "1st_dozen": "1<sup>st</sup> Dozen",
            "2nd_dozen": "2<sup>nd</sup> Dozen",
            "3rd_dozen": "3<sup>rd</sup> Dozen",
            big_dice: "Grande",
            bull_1: "Bull 1",
            bull_2: "Bull 2",
            bull_3: "Bull 3",
            bull_4: "Bull 4",
            bull_5: "Bull 5",
            bull_6: "Bull 6",
            bull_7: "Bull 7",
            bull_8: "Bull 8",
            bull_9: "Bull 9",
            bull_bull: "Bull Bull",
            double_pictures: "Double Pictures",
            even: "Empate",
            five_dukes: "5 Dukes",
            flush: "Flush",
            four_of_a_kind: "Quatro cartas do mesmo tipo",
            full_house: "Full House",
            high_card: "High Card",
            no_bull: "Sem Bull",
            not_qualified: "Não se qualificou",
            odd: "ODDS",
            pair: "Pair",
            royal_flush: "Royal Flush",
            single_picture: "Single Picture",
            small_dice: "Pequeno",
            straight: "Straight",
            straight_flush: "Straight Flush",
            three_of_a_kind: "Three of a Kind",
            triple_dice: "Tripla",
            triple_pictures: "Três imagens",
            two_pairs: "Two Pairs"
        }
    }, error_code$6 = {
        1: "Erro interno do servidor [1]",
        101: "limite da aposta selecionada excedido",
        102: "Limite de tempo excedido [102]",
        103: "As apostas falharam (limite do pote excedido) [103]",
        104: "Bet(s) Failed(Below Selection Bet Limit)",
        404: "Unable to connect to the server. Please check the network settings",
        5e3: "Erro desconhecido [5000]",
        5001: "Demasiados pedidos [5001]",
        6e3: "A rede foi desligada. Por favor, aceda de novo.",
        6001: "Network Error [6001]",
        6002: "Falha ao obter informação de crédito. [6002]",
        6003: "Conta ou palavra-passe incorretas! [6003]",
        6004: "Acesso proibido. [6004]",
        6005: "Não tem handicap! [6005]",
        6006: "Não foram encontrados registos de mensagens multijogador! [6006]",
        6007: "Não foi encontrado o seu agente. Contacte o serviço de apoio ao cliente! [6007]",
        6008: "Acedeu novamente à sua conta. [6008]",
        6010: "A palavra-passe não foi reiniciada com sucesso [6010]",
        6011: "O formato da palavra-passe está incorreto [6011]",
        6012: "A palavra-passe não pode ficar vazia (6012) [6012]",
        6013: "The password is limited to 10 characters! [6013]",
        6015: "Falha! O jogador não pode seguir o mesmo jogador repetidamente. [6015]",
        6016: "Impossível seguir este jogador. Já foi atingido um máximo de 20 seguidores [6016]",
        6018: "A mesa de jogo foi encerrada! [6018]",
        6019: "Table is under maintenance! [6019]",
        6020: "Esta é uma mesa de jogo privada. [6020]",
        6021: "Este lugar está ocupado. Tente outro! [6021]",
        6022: "Falha! Por favor, tente de novo mais tarde. [6022]",
        6023: "Impossível procurar uma mesa com limite de apostas. Por favor, entre de novo. [6023]",
        6024: "Impossível procurar uma mesa de jogo. Por favor, entre de novo. [6024]",
        6025: "Não foi encontrado um lugar adequado! [6025]",
        6026: "Falha ao entrar na mesa de jogo. Por favor, tente de novo! [6026]",
        6027: "Esta mesa está cheia. Tente outra mesa de jogo! [6027]",
        6028: "Apostou num lugar nesta ronda. Por favor, prima “Entrar” na sala para entrar na mesa de jogo! [6028]",
        6029: "A mesa de jogo {0} foi reservada. Por favor, selecione juntar-se ou fazer aposta paralela. [6029]",
        6030: "O dono da mesa saiu! [6030]",
        6031: "É o dono da mesa. Não pode mudar de lugar. [6031]",
        6032: "Fez uma aposta paralela nesta ronda. Não pode entrar na mesa de jogo como deskmate. [6032]",
        6033: "Apostou num lugar nesta ronda. Não pode entrar na mesa com uma aposta paralela. [6033]",
        6034: "Esta mesa não está reservada. Não pode participar. [6034]",
        6035: "Lamentamos, o seu saldo é inferior a {0}. Pode entrar numa aposta paralela. [6035]",
        6037: "As apostas falharam! [6037]",
        6038: "Falha! Troca de crédito ilegal. [6038]",
        6039: "Falha! O sistema está ocupado! [6039]",
        6040: "Too many requests! Please login again. [6040]",
        6041: "Falha! Ronda do jogo não foi encontrada. [6041]",
        6042: "Falha! O seu crédito não é o suficiente. [6042]",
        6043: "Bet Failed! It's over maximum lose. [6043]",
        6044: "Falha! Pare de apostar. [6044]",
        6045: "Falha! A informação está incorreta. [6045]",
        6046: "Falha! Conflito na operação! [6046]",
        6047: "Aposta ilegal! [6047]",
        6048: "Passadas 30 rondas, não se pode apostar na big ou na small! [6048]",
        6049: "Aposta inválida! [6049]",
        6050: "Bet Failed! It's over maximum limit [6050]",
        6052: "Fez uma aposta. Não pode saltar esta ronda! [6052]",
        6053: "As cartas foram reveladas. Não pode saltar esta ronda! [6053]",
        6054: "A ronda do jogo ainda não começou. Não pode saltar esta ronda! [6054]",
        6055: "Já saltou 5 rondas seguidas. Por favor, faça apostas. [6055]",
        6057: "O dealer não se encontra aqui! [6057]",
        6058: "Operação ilegal. [6058]",
        6059: "Mesa de jogo não encontrada. [6059]",
        6060: "Língua não suportada! [6060]",
        6061: "Operação inválida! [6061]",
        6062: "Parâmetros de erro! [6062]",
        6063: "O salão de jogos não foi encontrado. Por favor, entre de novo. [6063]",
        6064: "O sistema está sob manutenção! [6064]",
        6065: "Não foi encontrada uma mesa ou lugar adequado com limite! [6065]",
        6066: "A mesa de jogo não existe. [6066]",
        6067: "Mesa de jogo não encontrada. Por favor, entre de novo. [6067]",
        6068: "Erro na palavra-passe! [6068]",
        6069: "Nenhuma aposta feita. Não pode revelar as cartas! [6069]",
        6070: "Falha! Foi colocado numa aposta paralela nesta ronda. Por favor, tente de novo quando esta ronda terminar. [6070]",
        6071: "Não possui esta mesa! [6071]",
        6072: "Esta mesa já está cheia. Tente uma aposta paralela! [6072]",
        6073: "O dono da mesa definiu palavras-passe [6073]",
        6074: "Não apostou durante mais de 4 minutos e saiu automaticamente da mesa de jogo ({{0}}). [6074]",
        6075: "A ID da sessão expirou. Por favor, tente mais tarde. [6075]",
        6076: "Erro de ID da sessão. Por favor, tente mais tarde. [6076]",
        6077: "A ID da sessão não pode ser reutilizada. Por favor, tente mais tarde. [6077]",
        6078: "You are logged out of the game. [6078]",
        6079: "A plataforma está em manutenção! [6079]",
        6080: "Falha ao entrar na mesa. Por favor, tente de novo. [6080]",
        6081: "Falha ao reservar mesa. Por favor, tente de novo. [6081]",
        6082: "A sua conta está proibida de ser usada na sua região [6082]",
        6083: "As apostas falharam. Fez apostas na Comissão nesta ronda. [6083]",
        6084: "As apostas falharam. Fez apostas na não Comissão nesta ronda. [6084]",
        6085: "Handicap inválido. Não pode [Reservar/Juntar-se]. Por favor, tente [Aposta paralela]. [6085]",
        6086: "A palavra-passe foi reiniciada. Por favor, aceda de novo! [6086]",
        6087: "A palavra-passe atual e a nova não podem ser iguais [6087]",
        6088: "Não tem permissão para entrar nesta mesa de jogo, de acordo com o atual handicap VIP. Se for necessário um ajuste do handicap VIP, contacte o serviço de apoio ao cliente ou o seu agente superior [6088]",
        6090: "Tempo de pedido terminado [6090]",
        6091: "Falha ao aceder [6091]",
        6092: "Saiu do jogo [6092]",
        6093: "O código de verificação está incorreto. Por favor, tente de novo [6093]",
        6094: "O seu teste gratuito expirou (15 minutos). Saiu do jogo [6094]",
        6095: "A verificação pode ser enviada apenas uma vez por ronda [6095]",
        6096: "Operação inválida [6096]",
        6097: "Estado incorreto ao efetuar verificação [6097]",
        6098: "Not allowed to bet on pair related field after <number> rounds ",
        6099: "Nenhum Pacote Vermelho para recolher [6099]",
        6100: "O Pacote Vermelho já foi recolhido [6100]",
        6101: "A atividade ainda não começou [6101]",
        6102: "O estado da atividade é ilegal [6102]",
        6103: "Não está pronto para ganhar rpa [6103]",
        6111: "O jogador desistiu desta ronda [6111]",
        6112: "O jogador vai participar nesta ronda [6112]",
        6113: "Estado de aposta de sub ronda ilegal [6113]",
        6114: "Não está no estado de aposta [6114]",
        6115: "Apostar em trips não é permitido sem ante/blind [6115]",
        6116: "A Ante e a Blind têm de ser apostadas juntas [6116]",
        6117: "A quantia da Ante e da Blind tem de ser igual [6117]",
        6118: "O jogador só pode apostar em Ante/Blinds/Trips na primeira ronda [6118]",
        6119: "O jogador só pode apostar em 4x/3x na segunda ronda [6119]",
        6120: "O jogador só pode apostar em 2x na terceira ronda [6120]",
        6121: "O jogador só pode apostar em 1x na última ronda [6121]",
        6122: "Quantia da aposta inválida [6122]",
        6123: "Não pode fazer raise sem ante [6123]",
        6124: "Raise duplicado [6124]",
        6126: "No bet on 6 consecutive game rounds is detected, auto-exited game table. [6126]",
        6200: "Tempo de resposta terminado. Por favor, contacte a nossa equipa de apoio ao cliente. [6200]",
        6201: "Tempo de resposta terminado. Por favor, contacte a nossa equipa de apoio ao cliente. [6201]",
        6202: "Tempo de resposta terminado. Por favor, contacte a nossa equipa de apoio ao cliente. [6202]",
        6203: "Tempo de resposta terminado. Por favor, contacte a nossa equipa de apoio ao cliente. [6203]",
        6204: "Tempo de resposta terminado. Por favor, contacte a nossa equipa de apoio ao cliente. [6204]",
        100001: "Your agent have not enable your mobile login",
        200001: "Ocorreu um erro. Para mais detalhes, contacte os serviços do canal. Obrigado. [1000]",
        200002: "Tempo do sistema terminado. Por favor, feche a janela do jogo atual e tente de novo. [1001]",
        200003: "Tempo do sistema terminado. Por favor, feche a janela do jogo atual e tente de novo. [1002]",
        200004: "Ocorreu um erro. Para mais detalhes, contacte os serviços do canal. Obrigado. [1003]",
        200005: "Ocorreu um erro. Para mais detalhes, contacte os serviços do canal. Obrigado. [1004]",
        200006: "Ocorreu um erro. Para mais detalhes, contacte os serviços do canal. Obrigado. [1005]",
        200007: "Ocorreu um erro. Para mais detalhes, contacte os serviços do canal. Obrigado. [1006]",
        200008: "Ocorreu um erro. Para mais detalhes, contacte os serviços do canal. Obrigado. [1007]",
        200009: "Ocorreu um erro. Para mais detalhes, contacte os serviços do canal. Obrigado. [1008]",
        200011: "A conta foi encerrada. Para mais detalhes, contacte o seu responsável. Obrigado. [2002]",
        200012: "Ocorreu um erro. Para mais detalhes, contacte os serviços do canal. Obrigado. [2003]",
        200013: "Ocorreu um erro. Para mais detalhes, contacte os serviços do canal. Obrigado. [3001]",
        200014: "A sua conta tem um saldo insuficiente. [3002]",
        200015: "As suas apostas excederam as definições de limite de aposta. Por favor, tente de novo. [3003]",
        200016: "Jogo desativado. Para mais detalhes, contacte o seu responsável. Obrigado. [3004]",
        200017: "Ocorreu um erro. Para mais detalhes, contacte os serviços do canal. Obrigado. [3005]",
        200018: "Limite de vitória atingido! Por favor, contacte o seu responsável. Obrigado. [3006]",
        200019: "Limite de derrota atingido! Por favor, contacte o seu responsável. Obrigado. [3007]",
        200020: "Não tem limite de aposta definido para este jogo. Por favor, contacte o seu responsável para o definir. [3008]",
        200021: "O seu limite de aposta foi alterado. Por favor, aceda de novo para que as novas definições sejam aplicadas.[3009]",
        200022: "A conta foi suspensa. Para mais detalhes, contacte o seu responsável. Obrigado. [3010]",
        200023: "A conta foi suspensa. Para mais detalhes, contacte o seu responsável. Obrigado. [3013]",
        200024: "O jogo está indisponível de momento. Para mais detalhes, contacte os serviços do canal. Obrigado. [3014]"
    }, error_msg$6 = {
        ban: "Your account has been logged in elsewhere. ",
        kick: "Session expired. Please reconnect to the platform!",
        processing_game_bet: "Your bet is being processed, please wait.",
        quitGame: "Press OK to quit game",
        relogin: "Press OK to return to the login page.",
        unknown: "The network is disconnected, press OK to quit game",
        connection: {
            connection_problem: "Press OK to connect back to the game.",
            server_connection_problem: "Press OK to connect back to the game."
        },
        idle: {
            disconnected_reconnect: "Press OK to connect back to the game.",
            disconnected_to_server: "Press OK to connect back to the game."
        }
    }, fast_bet$6 = {title: "Fast Bet"}, game_hall$6 = {
        banner_more_detail: "View More",
        feature_games: "Feature Games",
        good_roads: "Good Road",
        hot_games: "Hot Games",
        multi_play: "Vários jogadores",
        view_all: "View All",
        vip_betlimit: "Limite da aposta",
        vip_enter: "Entrar",
        vip_min_enter: "Saldo mín",
        vip_occupied: "Reservado",
        vip_reserve: "Reservar",
        subtypes: {
            all: "TUDO",
            classic: "Clássico",
            insurance: "Insurance",
            quick: "Quick",
            see: "Ver carta",
            sexy: "Sweetie",
            vip: "VIP"
        }
    }, game_rules$6 = {
        attention: "Attention",
        game_rules: "Regras do Jogo",
        introduction: "Introduction",
        payoff: "Pagamento",
        title: "Help"
    }, game_table$6 = {
        balanace: "Saldo",
        deposit: "Depósito",
        deposit_short: "D",
        total_bet: "Aposta total",
        trial: "Teste",
        baccarat: {no_comm: "Sem com."},
        blackjack: {
            all_side_bets: "ALL SIDE BETS",
            ante_first: "PLEASE BET ANTE FIRST",
            banker: "Banqueiro",
            double: "Duplo",
            hit: "HIT",
            insufficient_insurance: "Not enough balance for insurance",
            insurance: "Insurance?",
            other_decison: "Other players are making decision",
            player: "Jogador",
            split: "SPLIT",
            stand: "STAND",
            instruction: {
                213: {
                    content: "Win if the combination of the player's initial cards and the dealer's up card form a specific card type.",
                    title: "LUCKY 3"
                },
                label: "INSTRUCTION",
                ante: {
                    content: "Win if the player's hand value is closer to 21 than the dealer's hand and does not exceed 21.",
                    title: "Ante"
                },
                bust: {content: "Win if the dealer busts.", title: "BUST IT"},
                hot3: {
                    content: "Win if the card value of the player's initial cards and the dealer's up card total 19 - 21.",
                    title: "HOT 3"
                },
                lucky_ladies: {
                    content: "Win if the player's initial cards formed a specific card type.",
                    title: "LUCKY LADIES"
                },
                pair: {content: "Win if the player's initial cards are pair.", title: "ANY PAIR"}
            }
        },
        bullbull: {
            banker: "Banqueiro",
            banker_allwin: "BANKER ALL WIN",
            first_card: "FIRST CARD",
            player_allwin: "PLAYER ALL WIN"
        },
        casino_war: {
            "1st_tie": "1º empate",
            "2nd_tie": "2º empate",
            banker: "Banqueiro",
            decision: "MAKE YOUR DECISION",
            player_1: "Jogador 1",
            player_2: "Jogador 2",
            player_3: "Jogador 3",
            surrender: "Render-se"
        },
        fpc: {any_two_dice: "ANY TWO DICE", both_one_dice: "BOTH ONE DICE"},
        roulette: {orphelins: "orphelins", tier: "tier", voisins: "voisins", zero: "Zero"},
        seecard: {other_squeezing: "Other players are squeezing cards"},
        teen_patti: {pair_plus: "Par+"},
        uth: {
            banker: "Banqueiro",
            community: "COMMUNITY",
            decision: "MAKE YOUR DECISION",
            play: "Reproduzir",
            player_1: "Jogador 1",
            player_1_short: "P1",
            player_2: "Jogador 2",
            player_2_short: "P2",
            player_3: "Jogador 3",
            player_3_short: "P3",
            raise1x: "RAISE 1x",
            raise2x: "RAISE 2x",
            raise3x: "RAISE 3x",
            raise4x: "RAISE 4x"
        },
        vip: {
            owner_squeezing: "Owner is squeezing cards",
            owner_tooltip: "OWNER",
            reserve_action_tooltip: "Reservar",
            reserve_betlimit: "Limite da aposta",
            reserve_min_enter: "Saldo mín",
            reserve_request: "Table reserved. You will be the owner next round.",
            reserved_tooltip: "Reservar",
            shuffle_request: "O seu pedido para baralhar foi submetido. O baralhar começa dentro de 5 minutos",
            shuffle_tooltip: "Baralhar",
            skip_tooltip: "Saltar",
            start_tooltip: "Start"
        }
    }, game_types$6 = {
        101: "Bacará",
        102: "VIP Baccarat (Legacy)",
        103: "Bacará rápido",
        104: "Ver carta de bacará",
        110: "Seguro Bacará",
        111: "Bacará VIP",
        201: "SicBo",
        202: "Peixe, Camarão, Caranguejo",
        203: "Xoc Dia",
        301: "Dragão Tigre",
        401: "Roleta",
        501: "Pok Deng clássico",
        602: "Andar Bahar",
        603: "Teen Patti 20-20",
        702: "Ultimate Texas Hold'em",
        703: "Guerra de Casino",
        704: "Blackjack Infinito",
        801: "Touro Touro",
        901: "Vencer 3 cartas",
        "201_Alt": "HiLo",
        "201_Alt_2": "Sic Tan",
        "501_Alt": "Pok Deng de dois lados",
        "901_Alt": "Três imagens",
        "901_Alt_2": "Teen Patti 20-20",
        arcadeGame: "Casino Game",
        card_game: "Jogo de cartas",
        cardGame: "Jogo de cartas",
        classic: "Clássico",
        fishingGame: "Pesca AB",
        game_hall: "Lobby",
        multi_hall: "Vários jogadores",
        sexy: "Sweetie",
        slotGame: "Slot Game",
        UTH_Short: "Ult. Texas"
    }, gamehall_table$6 = {
        maintaining: "Manutenção",
        notable: "No table available",
        good_road: {
            100: "Banqueiro longo",
            101: "Jogador longo",
            102: "Single Road",
            103: "One P Two B",
            104: "One B Two P",
            105: "Patted eat",
            106: "B across P",
            107: "P across B",
            108: "Separated B",
            109: "Separated P"
        }
    }, header$6 = {
        bet_record: "Registos da aposta",
        card_game: "AB FISHING",
        exitfullscreen: "Exit Fullscreen",
        fullscreen: "Fullscreen",
        hot_games: "LOBBY",
        live_games: "LIVE GAMES",
        logout: "Sair",
        multi_table: "MULTIPLAY",
        profile: "Perfil",
        services: "Services",
        Version: "Version"
    }, login$6 = {
        free_trial: "Teste grátis",
        login: "Nome de acesso",
        password: "Palavra-passe",
        username: "Nome de utilizador"
    }, menu$6 = {
        addToHomeScreenForIOS: "ADD TO      HOME SCREEN",
        back: "BACK TO LOBBY",
        downloadApp: "Descarregar APP",
        exitfullscreen: "EXIT FULLSCREEN",
        fast_bet: "FAST BET",
        fullscreen: "Fullscreen",
        guide: "HELP",
        history: "Registos da aposta",
        installation_instruction: "Instruction",
        installPwa: "INSTALL",
        lobby: "Lobby",
        loginApp: "Aceder à aplicação",
        payout: "Pagamento",
        settings: "Definições",
        title: "Menu",
        verification: "VERIFY",
        video: "RELOAD"
    }, messages$6 = {
        all_in: "All in",
        bet_success: "Apostas confirmadas",
        cancel: "Cancelar",
        game_table_verified: "Verification has been sent, please check the verificaiton result on the screen",
        idle_video: "VIDEO PAUSED DUE TO INACTIVITY. PRESS OK TO RESUME",
        insufficient_bet_balance: "Saldo insuficiente",
        insufficient_vip_balance: "Saldo insuficiente",
        landscape_block: "Rotate your mobile device for best experience",
        loading: "LOADING",
        logout: "Are you sure you want to logout ",
        logoutOK: "Sair",
        lost: "YOU LOST",
        multi_side_hall_filter: "Filter cannot be empty, please select at least one game type.",
        nickname_success: "Nickname updated!",
        ok_button: "OK",
        screen_size_block: "Please resize the window for the best experience",
        table_not_found: "Game table is not found",
        table_under_maintenance: "Game table is under maintenance",
        won: "YOU WON"
    }, payout$6 = {
        bet: "Aposta", bet_limit: "Limite da aposta", odds: "Odds", payout: "Pagamento", bet_type: {
            1001: "Banqueiro",
            1002: "Jogador",
            1003: "TIE",
            1006: "B Par",
            1007: "P Par",
            1011: "Banqueiro (sem com.)",
            1100: "Sorte 6",
            1211: "Banqueiro natural",
            1212: "Jogador natural",
            1223: "Qualquer par",
            1224: "PERFECT PAIR",
            1231: "Banqueiro Bónus do dragão",
            1232: "Jogador Bónus do dragão",
            1401: "Tigre",
            1402: "Grande Tigre",
            1403: "Pequeno Tigre",
            1404: "Tigre Empate",
            1405: "Tigre Par",
            1501: "Banqueiro Fabulous 4",
            1502: "Jogador Fabulous 4",
            1503: "Banqueiro Par Precioso",
            1504: "Jogador Par Precioso",
            1601: "Banqueiro Preto",
            1602: "Banqueiro Vermelho",
            1603: "Jogador Preto",
            1604: "Jogador Vermelho",
            1605: "Quaisquer 6",
            2001: "DRAGON",
            2002: "Tigre",
            2003: "TIE",
            3001: "BIG / SMALL",
            3002: "EVEN / ODD",
            3005: "Triplo específico",
            3011: "Qualquer triplo",
            3012: "Duplo específico",
            3018: "Soma 4/17",
            3019: "Soma 5/16",
            3020: "Soma 6/15",
            3021: "Soma 7/14",
            3022: "Soma 8/13",
            3023: "Soma 9/10/11/12",
            3033: "TWO DICE COMBINATION",
            3048: "ONE DICE",
            3049: "TWO DICE",
            3050: "THREE DICE",
            3200: "HI",
            3201: "LO",
            3202: "11 Hi-Lo",
            3203: "Dados 1-6",
            3209: "TWO DICE COMBINATION",
            3224: "1 Lo",
            3225: "2 Lo",
            3226: "3-Lo",
            3227: "4-Lo",
            3228: "5 - 6 LO",
            3230: "3 - 4 HI",
            3232: "5 HI",
            3233: "6 HI",
            3234: "THREE DICE COMBINATION",
            3301: "MAIN SYMBOL",
            3307: "SPECIFIC SINGLE COLOR",
            3310: "SPECIFIC DOUBLE COLOR",
            3313: "SPECIFIC TRIPOLE COLOR",
            3316: "ANY TRIPLE COLOR",
            3317: "TWO DICE COMBINATION",
            3401: "ODD / EVEN",
            3403: "FAN",
            3407: "NIM",
            3419: "NGA",
            3431: "SSH",
            3435: "12 KWOK / 23 KWOK / 34 KWOK",
            3438: "41 KWOK",
            3500: "TIE",
            3501: "Pequeno",
            3502: "Grande",
            3503: "Odds",
            3504: "Empate",
            3505: "0",
            3506: "1",
            3507: "3",
            3508: "4",
            4001: "BIG / SMALL",
            4002: "ODD / EVEN",
            4003: "RED / BLACK",
            4007: "Dúzia",
            4010: "COLUMN",
            4013: "STRAIGHT",
            4050: "Três números",
            4052: "Quatro números",
            4053: "SEPARATE",
            4113: "Canto",
            4135: "STREET",
            4147: "Linha",
            5001: "PLAYER 1-5",
            5011: "PLAYER 1-5 PAIR",
            5101: "PLAYER 1-5",
            5106: "BANKER 1-5",
            5111: "Banqueiro Par",
            6201: "ANDAR",
            6202: "BAHAR",
            6203: "1-5 cartas",
            6204: "6-10 cartas",
            6205: "11-15 cartas",
            6206: "16-25 cartas",
            6207: "26-30 cartas",
            6208: "31-35 cartas",
            6209: "36-40 cartas",
            6210: "41+ cartas",
            6211: "1º ANDAR",
            6212: "1º BAHAR",
            6301: "Jogador A",
            6302: "Jogador B",
            6303: "TIE",
            6304: "PLAYER A PAIR PLUS",
            6305: "PLAYER B PAIR PLUS",
            6306: "Bónus de 6 cartas",
            7201: "PLAYER 1 - 3 ANTE",
            7202: "PLAYER 1 - 3 BLIND",
            7203: "PLAYER 1 - 3 TRIPS",
            7301: "PLAYER 1 - 3 ANTE",
            7302: "PLAYER 1 - 3 1ST TIE",
            7304: "PLAYER 1 - 3 2ND TIE",
            7401: "Ante",
            7404: "ANY PAIR",
            7405: "Lucky 3",
            7406: "HOT 3",
            7407: "BUST IT",
            7409: "LUCKY LADIES",
            8001: "Banqueiro 1",
            8002: "Banqueiro 2",
            8003: "Banqueiro 3",
            8011: "Banqueiro 1",
            8012: "Banqueiro 2",
            8013: "Banqueiro 3",
            8021: "Banqueiro 1",
            8022: "Banqueiro 2",
            8023: "Banqueiro 3",
            8101: "Jogador 1",
            8102: "Jogador 2",
            8103: "Jogador 3",
            8111: "Jogador 1",
            8112: "Jogador 2",
            8113: "Jogador 3",
            8121: "Jogador 1",
            8122: "Jogador 2",
            8123: "Jogador 3",
            9001: "DRAGON",
            9002: "PHOENIX",
            9003: "PAIR 8+",
            9004: "STRAIGHT",
            9005: "FLUSH",
            9006: "STRAIGHT FLUSH",
            9007: "THREE OF A KIND",
            9101: "DRAGON",
            9102: "PHOENIX",
            9103: "TIE",
            9114: "DRAGON 3 PICTURES",
            9124: "PHOENIX 3 PICTURES"
        }
    }, profile$6 = {
        save: "Save",
        title: "Perfil",
        main_view: {change_password: "Alterar a palavra-passe?", nickname: "NICKNAME", pending: "pendente"},
        password_view: {
            confirm_password: "Confirmar palavra-passe",
            current_password: "Current Password",
            hints: "* Please enter alphanumeric string of 6-10 characters",
            new_password: "Nova palavra-passe"
        }
    }, roadmap$6 = {
        analysis: "ANALYSIS",
        history: "HISTORY",
        last_10_rounds: "LAST 10 ROUNDS",
        last_50_rounds: "Últimas 50 rondas",
        last_6_rounds: "LAST 6 ROUNDS",
        round_num: "Round #",
        statistics: "STATISTICS",
        andar_bahar: {andar: "ANDAR", bahar: "BAHAR"},
        baccarat: {banker: "B", player: "P", predict_banker: "Predict Banker", predict_player: "Predict Player", tie: "T"},
        bull_bull: {
            game_hall: {
                0: "NB",
                1: "B1",
                2: "B2",
                3: "B3",
                4: "B4",
                5: "B5",
                6: "B6",
                7: "B7",
                8: "B8",
                9: "B9",
                A: "BB",
                B: "5D",
                banker: "B",
                player_1: "J1",
                player_2: "J2",
                player_3: "J3"
            },
            game_table: {
                0: "Sem Bull",
                1: "Bull 1",
                2: "Bull 2",
                3: "Bull 3",
                4: "Bull 4",
                5: "Bull 5",
                6: "Bull 6",
                7: "Bull 7",
                8: "Bull 8",
                9: "Bull 9",
                A: "Bull Bull",
                B: "5 Dukes",
                banker: "Banqueiro",
                player_1: "Jogador 1",
                player_2: "Jogador 2",
                player_3: "Jogador 3"
            }
        },
        casino_war: {banker: "B", player_1: "P1", player_2: "P2", player_3: "P3"},
        dragon_tiger: {dragon: "D", predict_dragon: "Predict Dragon", predict_tiger: "Predict Tiger", tie: "T", tiger: "T"},
        hi_lo: {hi: "HI", hi_lo: "11", lo: "LO"},
        pokdeng: {banker: "B", player_1: "P1", player_2: "P2", player_3: "P3", player_4: "P4", player_5: "P5"},
        roulette: {hot_cold: "HOT & COLD"},
        sicbo: {big: "Grande", small: "Pequeno", triple: "Tripla"},
        sictan: {even: "Empate", fan_1: "1 FAN", fan_2: "2 FAN", fan_3: "3 FAN", fan_4: "4 FAN", odd: "Odds"},
        teen_patti: {
            235: "235",
            flush: "Flush",
            four_of_a_kind: "Quatro cartas do mesmo tipo",
            full_house: "Full House",
            high_card: "High Card",
            pair: "Pair",
            pair_plus: "PAIR+",
            player_a: "A",
            player_b: "B",
            royal_flush: "Royal Flush",
            straight: "Straight",
            straight_flush: "Straight Flush",
            three_of_a_kind: "Three of a Kind",
            tie: "T"
        },
        three_pictures: {
            double_pictures: "DP",
            dragon: "D",
            phoenix: "P",
            single_picture: "SP",
            tie: "T",
            triple_pictures: "3P"
        },
        win3cards: {
            235: "235",
            dragon: "D",
            flush: "Flush",
            high_card: "High Card",
            "p8+": "P8",
            pair: "Pair",
            phoenix: "P",
            straight: "Straight",
            straight_flush: "Straight Flush",
            three_of_a_kind: "Three of a Kind",
            tie: "T"
        },
        xocdia: {even: "Empate", odd: "Odds", tie: "Tie", big: "Grande", small: "Pequeno", o: "O", e: "E"}
    }, settings$6 = {
        title: "Definições",
        bullbull: {
            double: "Duplo",
            equal: "Igual",
            play_type: "Tipo de aposta",
            play_type_multiplay: "Bet Type (Bull Bull)",
            super: "SuperBull"
        },
        general: {
            confirmed_bet_amounts: "Confirmed Bet Amounts",
            languages: "Línguas",
            side_bets: "Side Bets",
            statistics: "Betting Statistics",
            title: "Display"
        },
        scorecards: {classic: "Clássico", immersive: "Immersive", title: "Scorecards"},
        sound: {live: "Som ao vivo", system: "System Sound", title: "Sound"}
    }, side_hall_filter$6 = {
        101: "Bacará",
        103: "Rápido",
        104: "Ver carta",
        110: "Seguro",
        111: "VIP",
        201: "SicBo",
        202: "Peixe, Camarão, Caranguejo",
        203: "Xoc Dia",
        301: "Dragão Tigre",
        401: "Roleta",
        501: "Pok Deng clássico",
        602: "Andar Bahar",
        603: "Teen Patti 20-20",
        801: "Touro Touro",
        901: "Vencer 3 cartas",
        "201_Alt": "HiLo",
        "201_Alt_2": "Sic Tan",
        "501_Alt": "Pok Deng de dois lados",
        "901_Alt": "Três imagens",
        "901_Alt_2": "Teen Patti 20-20",
        asia: "Jogos da Ásia",
        baccarat: "Bacará",
        classic: "Clássico",
        europe: "Jogos da Europa",
        global: "Jogos Globais",
        other: "Outros Jogos",
        sexy: "Sweetie"
    }, pt = {
        baccarat_gameplay: baccarat_gameplay$6,
        bet_record: bet_record$6,
        bet_type: bet_type$6,
        custom_chips: custom_chips$6,
        detailed_bet_type: detailed_bet_type$6,
        error_code: error_code$6,
        error_msg: error_msg$6,
        fast_bet: fast_bet$6,
        game_hall: game_hall$6,
        game_rules: game_rules$6,
        game_table: game_table$6,
        game_types: game_types$6,
        gamehall_table: gamehall_table$6,
        header: header$6,
        login: login$6,
        menu: menu$6,
        messages: messages$6,
        payout: payout$6,
        profile: profile$6,
        roadmap: roadmap$6,
        settings: settings$6,
        side_hall_filter: side_hall_filter$6
    }, baccarat_gameplay$5 = {
        basic: "Básico",
        default: "Padrão",
        fabulous_4: "4 Fabulosos",
        natural: "Sorte Natural 6",
        super: "Super Bacará",
        switch: "Alternar Jogabilidade",
        tiger: "Tigre"
    }, bet_record$5 = {
        bet_amount: "Valor da Aposta",
        bet_type: "Tipo de Aposta",
        betting_number: "Número de Aposta",
        date_time: "Data e Hora",
        game: "Jogo",
        game_type: "Tipo de Jogo",
        gameround_id: "ID da Rodada de Jogo",
        loading: "Carregando",
        next: "Próximo",
        no_video: "Observe que esta rodada do jogo é inválida, e o vídeo ao vivo não será exibido.",
        previous: "Anterior",
        shoe_round: "Série-Rodada",
        status: "Status",
        table_number: "Número da Mesa",
        total_bet: "Aposta Total",
        valid_bet: "Aposta Válida",
        win_loss: "Ganho/Perda",
        bet_status: {100: "Apostando", 101: "Falhou", 110: "Não Resolvido", 111: "Resolvido", 120: "Reembolso"},
        title: {details: "Detalhes", records: "Registros de Apostas"}
    }, bet_type$5 = {
        1001: "BANQUEIRO",
        1002: "JOGADOR",
        1003: "EMPATE",
        1006: "PAR B",
        1007: "PAR J",
        1011: "Banqueiro",
        1100: "6 Sortudo",
        1211: "Banqueiro Natural",
        1212: "Jogador natural",
        1223: "QUALQUER PAR",
        1224: "PAR PERFEITO",
        1231: "BÔNUS B",
        1232: "BÔNUS J",
        1301: "SEGURO",
        1302: "SEGURO",
        1303: "SEGURO",
        1304: "SEGURO",
        1401: "Tigre",
        1402: "Grande Tigre",
        1403: "Pequeno Tigre",
        1404: "Empates do Tigre",
        1405: "Pares do Tigre",
        1501: "4 Fabulosos do Banqueiro",
        1502: "4 Fabulosos do Jogador",
        1503: "Par Precioso do Banqueiro",
        1504: "Pares Preciosos do Jogador",
        1601: "Banqueiro Preto",
        1602: "Banqueiro Vermelho",
        1603: "Pretos do Jogador",
        1604: "Vermelhos do Jogador",
        1605: "Quaisquer 6",
        2001: "DRAGÃO",
        2002: "TIGRE",
        2003: "EMPATE",
        3001: "PEQUENO",
        3002: "ÍMPAR",
        3003: "PAR",
        3004: "GRANDE",
        3011: "QUALQUER TRIPLO",
        3048: "UM",
        3049: "DOIS",
        3050: "TRÊS",
        3051: "QUATRO",
        3052: "CINCO",
        3053: "SEIS",
        3200: "Alto",
        3201: "Baixo",
        3225: "Baixo",
        3227: "Baixo",
        3228: "Baixo",
        3229: "Baixo",
        3230: "Alto",
        3232: "Alto",
        3401: "ÍMPAR",
        3402: "PAR",
        3403: "1 FAN",
        3404: "2 FAN",
        3405: "3 FAN",
        3406: "4 FAN",
        3407: "1NIM2",
        3408: "1NIM3",
        3409: "1NIM4",
        3410: "2NIM1",
        3411: "2NIM3",
        3412: "2NIM4",
        3413: "3NIM1",
        3414: "3NIM2",
        3415: "3NIM4",
        3416: "4NIM1",
        3417: "4NIM2",
        3418: "4NIM3",
        3419: "23ONE NGA",
        3420: "24ONE NGA",
        3421: "34ONE NGA",
        3422: "13TWO NGA",
        3423: "14TWO NGA",
        3424: "34TWO NGA",
        3425: "12THREE NGA",
        3426: "14THREE NGA",
        3427: "24THREE NGA",
        3428: "13FOUR NGA",
        3429: "12FOUR NGA",
        3430: "23FOUR NGA",
        3431: "SSH123",
        3432: "SSH124",
        3433: "SSH134",
        3434: "SSH234",
        3435: "KWOK12",
        3436: "KWOK23",
        3437: "KWOK34",
        3438: "KWOK41",
        3500: "EMPATE",
        3501: "PEQUENO",
        3502: "GRANDE",
        3503: "ÍMPAR",
        3504: "PAR",
        4001: "1 - 18",
        4002: "PAR",
        4005: "ÍMPAR",
        4006: "19 - 36",
        4007: "ST",
        4008: "ND",
        4009: "RD",
        4010: "",
        4011: "",
        4012: "",
        5001: "J1",
        5002: "J2",
        5003: "J3",
        5004: "J4",
        5005: "J5",
        5011: "Par J1",
        5012: "Par J2",
        5013: "Par J3",
        5014: "Par J4",
        5015: "Par J5",
        5101: "J1",
        5102: "J2",
        5103: "J3",
        5104: "J4",
        5105: "J5",
        5106: "B1",
        5107: "B2",
        5108: "B3",
        5109: "B4",
        5110: "B5",
        5111: "Par B",
        6201: "ANDAR",
        6202: "BAHAR",
        6203: "1-5",
        6204: "6-10",
        6205: "11-15",
        6206: "16-25",
        6207: "26-30",
        6208: "31-35",
        6209: "36-40",
        6210: "41+",
        6211: "<span>1</span>º ANDAR",
        6212: "<span>1</span>º BAHAR",
        6301: "JOGADOR A",
        6302: "JOGADOR B",
        6303: "EMPATE",
        6304: "PAR JOGADOR A+",
        6305: "PAR JOGADOR B+",
        6306: "BÔNUS DE 6 CARTAS",
        7201: "ANTE",
        7202: "CEGO",
        7203: "TRIPS",
        7204: "AUMENTO 4x",
        7205: "AUMENTO 3x",
        7206: "AUMENTO 2x",
        7207: "AUMENTO 1x",
        7211: "ANTE",
        7212: "CEGO",
        7213: "TRIPS",
        7214: "AUMENTO 4x",
        7215: "AUMENTO 3x",
        7216: "AUMENTO 2x",
        7217: "AUMENTO 1x",
        7221: "ANTE",
        7222: "CEGO",
        7223: "TRIPS",
        7224: "AUMENTO 4x",
        7225: "AUMENTO 3x",
        7226: "AUMENTO 2x",
        7227: "AUMENTO 1x",
        7301: "ANTE",
        7302: "EMPATE",
        7303: "GUERRA",
        7304: "2º EMPATE",
        7311: "ANTE",
        7312: "EMPATE",
        7313: "GUERRA",
        7314: "2º EMPATE",
        7321: "ANTE",
        7322: "EMPATE",
        7323: "GUERRA",
        7324: "2º EMPATE",
        7401: "ANTE",
        7402: "ANTE DOBRO",
        7403: "DIVIDIR",
        7404: "PAR",
        7405: "Sortudo 3",
        7406: "HOT 3",
        7407: "ESTOURAR",
        7408: "SEGURO",
        7409: "DAMAS SORTUDAS",
        8001: "BANQUEIRO 1",
        8002: "BANQUEIRO 2",
        8003: "BANQUEIRO 3",
        8011: "BANQUEIRO 1",
        8012: "BANQUEIRO 2",
        8013: "BANQUEIRO 3",
        8021: "BANQUEIRO 1",
        8022: "BANQUEIRO 2",
        8023: "BANQUEIRO 3",
        8101: "JOGADOR 1",
        8102: "JOGADOR 2",
        8103: "JOGADOR 3",
        8111: "JOGADOR 1",
        8112: "JOGADOR 2",
        8113: "JOGADOR 3",
        8121: "JOGADOR 1",
        8122: "JOGADOR 2",
        8123: "JOGADOR 3",
        9001: "DRAGÃO",
        9002: "FÊNIX",
        9003: "PAR 8 MAIS",
        9004: "RETA",
        9005: "FLUSH",
        9006: "RETA FLUSH",
        9007: "THREE OF A KIND",
        9101: "DRAGÃO",
        9102: "FÊNIX",
        9103: "EMPATE",
        9114: "DRAGÃO TRÊS FIGURAS",
        9124: "FÊNIX TRÊS FIGURAS",
        tips: {
            6306: "Royal Flush/Straight Flush/Four of a Kind/Full House/Flush/Straight/Three of a Kind",
            9003: "Contains Pair 9 - Pair A / Straight / Flush / Straight Flush / Three of a Kind",
            banker_insurance: "Apostar no Seguro do Banqueiro",
            bullbull_firstcard: "PRIMEIRA CARTA",
            cards_dealt: "Cartas Distribuídas",
            check: "VERIFICAR",
            checked: "VOCÊ VERIFICOU",
            comm_betted: "Você fez apostas na Comissão nesta rodada.",
            double_text: "DOIS DADOS",
            fold: "DESISTIR",
            folded: "YOU FOLDED",
            house_card: "HOUSE",
            lose: "VOCÊ PERDEU",
            no_bet_after: "Após a %1ª rodada de cada sapato, não é possível apostar em %2.",
            no_comm_betted: "Você fez apostas sem comissão nesta rodada.",
            no_pairs: "Após a 50ª rodada de jogo em cada baralho, não são permitidas apostas em Pares.",
            player_1: "JOGADOR 1",
            player_2: "JOGADOR 2",
            player_3: "JOGADOR 3",
            player_insurance: "Apostar no Seguro do Jogador",
            raised: "YOU RAISED",
            single_text: "UM DADO",
            surrender: "RENDER-SE",
            tie: "YOU TIE",
            triple_text: "TRÊS DADOS",
            war: "IR À GUERRA",
            win: "VOCÊ VENCEU"
        }
    }, custom_chips$5 = {
        chip_value_exists: "Este valor de ficha já existe. Por favor, tente outro valor.",
        choose_common_chips: "Escolher Fichas Comuns",
        custom_chips_value: "Valor Personalizado das Fichas",
        min_chip_count: "Por favor, escolha pelo menos 5 fichas.",
        min_chip_value: "O valor mínimo permitido para a ficha é",
        select_all: "Selecionar Tudo",
        title: "Fichas Personalizadas"
    }, detailed_bet_type$5 = {
        1001: "Banqueiro",
        1002: "Jogador",
        1003: "Empate",
        1006: "Par do Banqueiro",
        1007: "Par do Jogador",
        1011: "Banqueiro (Sem comissão)",
        1100: "6 Sortudo",
        1211: "Banqueiro Natural",
        1212: "Jogador natural",
        1223: "Qualquer Par",
        1224: "Par Perfeito",
        1231: "Bônus do Banqueiro",
        1232: "Bônus do Jogador",
        1301: "Seguro do Banqueiro 1",
        1302: "Seguro do Banqueiro 2",
        1303: "Seguro do Jogador 1",
        1304: "Seguro do Jogador 2",
        1401: "Tigre",
        1402: "Grande Tigre",
        1403: "Pequeno Tigre",
        1404: "Empates do Tigre",
        1405: "Pares do Tigre",
        1501: "4 Fabulosos do Banqueiro",
        1502: "4 Fabulosos do Jogador",
        1503: "Par Precioso do Banqueiro",
        1504: "Pares Preciosos do Jogador",
        1601: "Banqueiro Preto",
        1602: "Banqueiro Vermelho",
        1603: "Pretos do Jogador",
        1604: "Vermelhos do Jogador",
        1605: "Quaisquer 6",
        2001: "Dragão",
        2002: "Tigre",
        2003: "Empate",
        3001: "Pequeno",
        3002: "Ímpar",
        3003: "Par",
        3004: "Grande",
        3005: "Triplo 1",
        3006: "Triplo 2",
        3007: "Triplo 3",
        3008: "Triplo 4",
        3009: "Triplo 5",
        3010: "Triplo 6",
        3011: "Qualquer Triplo",
        3012: "Duplo 1",
        3013: "Duplo 2",
        3014: "Duplo 3",
        3015: "Duplo 4",
        3016: "Duplo 5",
        3017: "Duplo 6",
        3018: "Soma 4",
        3019: "Soma 5",
        3020: "Soma 6",
        3021: "Soma 7",
        3022: "Soma 8",
        3023: "Soma 9",
        3024: "Soma 10",
        3025: "Soma 11",
        3026: "Soma 12",
        3027: "Soma 13",
        3028: "Soma 14",
        3029: "Soma 15",
        3030: "Soma 16",
        3031: "Soma 17",
        3033: "Dois Dados 1,2",
        3034: "Dois Dados 1,3",
        3035: "Dois Dados 1,4",
        3036: "Dois Dados 1,5",
        3037: "Dois Dados 1,6",
        3038: "Dois Dados 2,3",
        3039: "Dois Dados 2,4",
        3040: "Dois Dados 2,5",
        3041: "Dois Dados 2,6",
        3042: "Dois Dados 3,4",
        3043: "Dois Dados 3,5",
        3044: "Dois Dados 3,6",
        3045: "Dois Dados 4,5",
        3046: "Dois Dados 4,6",
        3047: "Dois Dados 5,6",
        3048: "Dado 1",
        3049: "Dado 2",
        3050: "Dado 3",
        3051: "Dado 4",
        3052: "Dado 5",
        3053: "Dado 6",
        3200: "Alto",
        3201: "Baixo",
        3202: "11 Alto-Baixo",
        3203: "Dado 1",
        3204: "Dado 2",
        3205: "Dado 3",
        3206: "Dado 4",
        3207: "Dado 5",
        3208: "Dado 6",
        3209: "AltoBaixo 1-2",
        3210: "AltoBaixo 1-3",
        3211: "AltoBaixo 1-4",
        3212: "AltoBaixo 1-5",
        3213: "AltoBaixo 1-6",
        3214: "AltoBaixo 2-3",
        3215: "AltoBaixo 2-4",
        3216: "AltoBaixo 2-5",
        3217: "AltoBaixo 2-6",
        3218: "AltoBaixo 3-4",
        3219: "AltoBaixo 3-5",
        3220: "AltoBaixo 3-6",
        3221: "AltoBaixo 4-5",
        3222: "AltoBaixo 4-6",
        3223: "AltoBaixo 5-6",
        3224: "1-Baixo",
        3225: "2-Baixo",
        3226: "3-Baixo",
        3227: "4-Baixo",
        3228: "5-Baixo",
        3229: "6-Baixo",
        3230: "3-Alto",
        3231: "4-Alto",
        3232: "5-Alto",
        3233: "6-Alto",
        3234: "1,2,3",
        3235: "2,3,4",
        3236: "3,4,5",
        3237: "4,5,6",
        3301: "Peixe",
        3302: "Camarão",
        3303: "Cabaça",
        3304: "Moeda",
        3305: "Caranguejo",
        3306: "Galo",
        3307: "Vermelho Único Específico",
        3308: "Verde Único Específico",
        3309: "Azul Único Específico",
        3310: "Vermelho Duplo Específico",
        3311: "Verde Duplo Específico",
        3312: "Azul Duplo Específico",
        3313: "Vermelho Triplo Específico",
        3314: "Verde Triplo Específico",
        3315: "Azul Triplo Específico",
        3316: "Qualquer Cor Tripla",
        3317: "Cabaça & Camarão",
        3318: "Cabaça & Peixe",
        3319: "Cabaça & Galo",
        3320: "Cabaça & Caranguejo",
        3321: "Cabaça & Moeda",
        3322: "Camarão & Peixe",
        3323: "Camarão & Galo",
        3324: "Camarão & Caranguejo",
        3325: "Camarão & Moeda",
        3326: "Peixe & Galo",
        3327: "Peixe & Caranguejo",
        3328: "Peixe & Moeda",
        3329: "Galo & Caranguejo",
        3330: "Galo & Moeda",
        3331: "Caranguejo & Moeda",
        3401: "Ímpar",
        3402: "Par",
        3403: "1Fan",
        3404: "2Fan",
        3405: "3Fan",
        3406: "4Fan",
        3407: "1Nim2",
        3408: "1Nim3",
        3409: "1Nim4",
        3410: "2Nim1",
        3411: "2Nim3",
        3412: "2Nim4",
        3413: "3Nim1",
        3414: "3Nim2",
        3415: "3Nim4",
        3416: "4Nim1",
        3417: "4Nim2",
        3418: "4Nim3",
        3419: "23 One Nga",
        3420: "24 One Nga",
        3421: "34 One Nga",
        3422: "13 Two Nga",
        3423: "14 Two Nga",
        3424: "34 Two Nga",
        3425: "12 Three Nga",
        3426: "14 Three Nga",
        3427: "24 Three Nga",
        3428: "13 Four Nga",
        3429: "12 Four Nga",
        3430: "23 Four Nga",
        3431: "SSH 123",
        3432: "SSH 124",
        3433: "SSH 134",
        3434: "SSH 234",
        3435: "12 Kwok",
        3436: "23 Kwok",
        3437: "34 Kwok",
        3438: "41 Kwok",
        3500: "EMPATE",
        3501: "PEQUENO",
        3502: "GRANDE",
        3503: "ÍMPAR",
        3504: "PAR",
        3505: "0",
        3506: "1",
        3507: "3",
        3508: "4",
        4001: "1 - 18",
        4002: "Par",
        4003: "Vermelho",
        4004: "Preto",
        4005: "Ímpar",
        4006: "19 - 36",
        4007: "1ª Dúzia",
        4008: "2ª Dúzia",
        4009: "3ª Dúzia",
        4010: "1ª Coluna",
        4011: "2ª Coluna",
        4012: "3ª Coluna",
        4013: "Direto 0",
        4014: "Direto 1",
        4015: "Direto 2",
        4016: "Direto 3",
        4017: "Direto 4",
        4018: "Direto 5",
        4019: "Direto 6",
        4020: "Direto 7",
        4021: "Direto 8",
        4022: "Direto 9",
        4023: "Direto 10",
        4024: "Direto 11",
        4025: "Direto 12",
        4026: "Direto 13",
        4027: "Direto 14",
        4028: "Direto 15",
        4029: "Direto 16",
        4030: "Direto 17",
        4031: "Direto 18",
        4032: "Direto 19",
        4033: "Direto 20",
        4034: "Direto 21",
        4035: "Direto 22",
        4036: "Direto 23",
        4037: "Direto 24",
        4038: "Direto 25",
        4039: "Direto 26",
        4040: "Direto 27",
        4041: "Direto 28",
        4042: "Direto 29",
        4043: "Direto 30",
        4044: "Direto 31",
        4045: "Direto 32",
        4046: "Direto 33",
        4047: "Direto 34",
        4048: "Direto 35",
        4049: "Direto 36",
        4050: "Três Números 0/1/2",
        4051: "Três Números 0/2/3",
        4052: "Quatro Números 0/1/2/3",
        4053: "Separado (0/1)",
        4054: "Separado (0/2)",
        4055: "Separado (0/3)",
        4056: "Separado (1/2)",
        4057: "Separado (2/3)",
        4058: "Separado (4/5)",
        4059: "Separado (5/6)",
        4060: "Separado (7/8)",
        4061: "Separado (8/9)",
        4062: "Separado (10/11)",
        4063: "Separado (11/12)",
        4064: "Separado (13/14)",
        4065: "Separado (14/15)",
        4066: "Separado (16/17)",
        4067: "Separado (17/18)",
        4068: "Separado (19/20)",
        4069: "Separado (20/21)",
        4070: "Separado (22/23)",
        4071: "Separado (23/24)",
        4072: "Separado (25/26)",
        4073: "Separado (26/27)",
        4074: "Separado (28/29)",
        4075: "Separado (29/30)",
        4076: "Separado (31/32)",
        4077: "Separado (32/33)",
        4078: "Separado (34/35)",
        4079: "Separado (35/36)",
        4080: "Separado (1/4)",
        4081: "Separado (4/7)",
        4082: "Separado (7/10)",
        4083: "Separado (10/13)",
        4084: "Separado (13/16)",
        4085: "Separado (16/19)",
        4086: "Separado (19/22)",
        4087: "Separado (22/25)",
        4088: "Separado (25/28)",
        4089: "Separado (28/31)",
        4090: "Separado (31/34)",
        4091: "Separado (2/5)",
        4092: "Separado (5/8)",
        4093: "Separado (8/11)",
        4094: "Separado (11/14)",
        4095: "Separado (14/17)",
        4096: "Separado (17/20)",
        4097: "Separado (20/23)",
        4098: "Separado (23/26)",
        4099: "Separado (26/28)",
        4100: "Separado (28/32)",
        4101: "Separado (32/35)",
        4102: "Separado (3/6)",
        4103: "Separado (6/9)",
        4104: "Separado (9/12)",
        4105: "Separado (12/15)",
        4106: "Separado (15/18)",
        4107: "Separado (18/21)",
        4108: "Separado (21/24)",
        4109: "Separado (24/27)",
        4110: "Separado (27/30)",
        4111: "Separado (30/33)",
        4112: "Separado (33/36)",
        4113: "Canto (1/5)",
        4114: "Canto (2/6)",
        4115: "Canto (4/8)",
        4116: "Canto (5/9)",
        4117: "Canto (7/11)",
        4118: "Canto (8/12)",
        4119: "Canto (10/14)",
        4120: "Canto (11/15)",
        4121: "Canto (13/17)",
        4122: "Canto (14/18)",
        4123: "Canto (16/20)",
        4124: "Canto (17/21)",
        4125: "Canto (18/23)",
        4126: "Canto (20/24)",
        4127: "Canto (22/26)",
        4128: "Canto (23/27)",
        4129: "Canto (25/29)",
        4130: "Canto (26/30)",
        4131: "Canto (28/32)",
        4132: "Canto (29/33)",
        4133: "Canto (31/35)",
        4134: "Canto (32/36)",
        4135: "Rua (1-3)",
        4136: "Rua (4-6)",
        4137: "Rua (7-9)",
        4138: "Rua (10-12)",
        4139: "Rua (13-15)",
        4140: "Rua (16-18)",
        4141: "Rua (19-21)",
        4142: "Rua (22-24)",
        4143: "Rua (25-27)",
        4144: "Rua (28-30)",
        4145: "Rua (31-33)",
        4146: "Rua (34-36)",
        4147: "Linha (1-6)",
        4148: "Linha (4-9)",
        4149: "Linha (7-12)",
        4150: "Linha (10-15)",
        4151: "Linha (13-18)",
        4152: "Linha (16-21)",
        4153: "Linha (19-24)",
        4154: "Linha (22-27)",
        4155: "Linha (28-33)",
        4156: "Linha (31-36)",
        4157: "Linha (25-30)",
        5001: "J1",
        5002: "J2",
        5003: "J3",
        5004: "J4",
        5005: "J5",
        5011: "Pares J1",
        5012: "Pares J2",
        5013: "Pares J3",
        5014: "Pares J4",
        5015: "Pares J5",
        5101: "J1",
        5102: "J2",
        5103: "J3",
        5104: "J4",
        5105: "J5",
        5106: "Banqueiro 1",
        5107: "Banqueiro 2",
        5108: "Banqueiro 3",
        5109: "Banqueiro4",
        5110: "Banqueiro5",
        5111: "Pares do banqueiro",
        6201: "Andar",
        6202: "Bahar",
        6203: "1-5 Cartas",
        6204: "6-10 Cartas",
        6205: "11-15 Cartas",
        6206: "16-25 Cartas",
        6207: "26-30 Cartas",
        6208: "31-35 Cartas",
        6209: "36-40 Cartas",
        6210: "41+ Cartas",
        6211: "1º Andar",
        6212: "1º Bahar",
        6301: "Jogador A",
        6302: "Jogador B",
        6303: "Empate",
        6304: "Par+ do Jogador A",
        6305: "Par+ do Jogador B",
        6306: "Bônus de 6 Cartas",
        7201: "Ante Jogador 1",
        7202: "Blind Jogador 1",
        7203: "Trips Jogador 1",
        7204: "Jogador 1 Raise 4x",
        7205: "Jogador 1 Raise 3x",
        7206: "Jogador 1 Raise 2x",
        7207: "Jogador 1 Raise 1x",
        7211: "Ante Jogador 2",
        7212: "Blind Jogador 2",
        7213: "Trips Jogador 2",
        7214: "Jogador 2 Raise 4x",
        7215: "Jogador 2 Raise 3x",
        7216: "Jogador 2 Raise 2x",
        7217: "Jogador 2 Raise 1x",
        7221: "Ante Jogador 3",
        7222: "Blind Jogador 3",
        7223: "Trips Jogador 3",
        7224: "Jogador 3 Raise 4x",
        7225: "Jogador 3 Raise 3x",
        7226: "Jogador 3 Raise 2x",
        7227: "Jogador 3 Raise 1x",
        7301: "Ante Jogador 1",
        7302: "1º Empate do Jogador 1",
        7303: "Guerra do Jogador 1",
        7304: "2º Empate do Jogador 1",
        7311: "Ante Jogador 2",
        7312: "1º Empate do Jogador 2",
        7313: "Guerra do Jogador 2",
        7314: "2º Empate do Jogador 2",
        7321: "Ante Jogador 3",
        7322: "1º Empate do Jogador 3",
        7323: "Guerra do Jogador 3",
        7324: "2º Empate do Jogador 3",
        7401: "Ante",
        7402: "Ante Duplo",
        7403: "DIVIDIR",
        7404: "Qualquer Par",
        7405: "Lucky 3",
        7406: "Hot 3",
        7407: "Bust It",
        7408: "Seguro",
        7409: "Lucky Ladies",
        8001: "Banqueiro 1 (Igual)",
        8002: "Banqueiro 2 (Igual)",
        8003: "Banqueiro 3 (Igual)",
        8011: "Banqueiro 1 (Duplo)",
        8012: "Banqueiro 2 (Duplo)",
        8013: "Banqueiro 3 (Duplo)",
        8021: "Banqueiro 1 (Super Bull)",
        8022: "Banqueiro 2 (Super Bull)",
        8023: "Banqueiro 3 (Super Bull)",
        8101: "Jogador 1 (Igual)",
        8102: "Jogador 2 (Igual)",
        8103: "Jogador 3 (Igual)",
        8111: "Jogador 1 (Duplo)",
        8112: "Jogador 2 (Duplo)",
        8113: "Jogador 3 (Duplo)",
        8121: "Jogador 1 (Super Bull)",
        8122: "Jogador 2 (Super Bull)",
        8123: "Jogador 3 (Super Bull)",
        9001: "Dragão",
        9002: "Fênix",
        9003: "Par 8+",
        9004: "Sequência",
        9005: "Flush",
        9006: "Straight Flush",
        9007: "Three of a Kind",
        9101: "Dragão",
        9102: "Fênix",
        9103: "Empate",
        9114: "Dragão Três Figuras",
        9124: "Fênix Três Figuras",
        additional_result: {
            235: "235",
            "1st_dozen": "1ª Dúzia",
            "2nd_dozen": "2ª Dúzia",
            "3rd_dozen": "3ª Dúzia",
            big_dice: "GRANDE",
            bull_1: "Touro 1",
            bull_2: "Touro 2",
            bull_3: "Touro 3",
            bull_4: "Touro 4",
            bull_5: "Touro 5",
            bull_6: "Touro 6",
            bull_7: "Touro 7",
            bull_8: "Touro 8",
            bull_9: "Touro 9",
            bull_bull: "Touro Touro",
            double_pictures: "Imagens Duplas",
            even: "Par",
            five_dukes: "5 Duques",
            flush: "Flush",
            four_of_a_kind: "Quadra",
            full_house: "Full House",
            high_card: "Carta Alta",
            no_bull: "Sem Touro",
            not_qualified: "Não Qualificado",
            odd: "Ímpar",
            pair: "Par",
            royal_flush: "Royal Flush",
            single_picture: "Imagem Única",
            small_dice: "PEQUENO",
            straight: "Sequência",
            straight_flush: "Straight Flush",
            three_of_a_kind: "Three of a Kind",
            triple_dice: "Triplo",
            triple_pictures: "Três Imagens",
            two_pairs: "Dois Pares"
        }
    }, error_code$5 = {
        1: "Erro interno do servidor [1]",
        101: "limite de aposta de seleção excedido",
        102: "Limite de tempo excedido [102]",
        103: "Falha na(s) aposta(s) (limite do pote excedido) [103]",
        104: "Aposta(s) Falhou(aram) (Abaixo do Limite de Aposta)",
        404: "Não foi possível conectar ao servidor. Por favor, verifique as configurações de rede",
        5e3: "Erro desconhecido [5000]",
        5001: "Excesso de requisições [5001]",
        6e3: "A rede foi desconectada, por favor faça login novamente",
        6001: "Erro de Rede  [6001]",
        6002: "Falha ao obter informações de crédito. [6002]",
        6003: "Conta ou senha incorreta! [6003]",
        6004: "Login proíbido. [6004]",
        6005: "Você não tem handicap! [6005]",
        6006: "Não é possível encontrar o registro de mensagem do MultiPlay! [6006]",
        6007: "Não é possível encontrar seu agente, entre em contato com o atendimento ao cliente! [6007]",
        6008: "Sua conta foi acessada novamente. Clique em OK para retornar à página de login. [6008]",
        6010: "A redefinição de senha não foi bem-sucedida [6010]",
        6011: "O formato da senha está incorreto [6011]",
        6012: "A senha não pode estar vazia (6012) [6012]",
        6013: "A senha é limitada a 10 caracteres! [6013]",
        6015: "Falha! O jogador não pode seguir o mesmo jogador repetidamente. [6015]",
        6016: "Incapaz de seguir este jogador, máximo de 20 seguidores alcançados [6016]",
        6018: "A mesa de jogo foi fechada! [6018]",
        6019: "A mesa está em manutenção! [6019]",
        6020: "Esta é uma mesa de jogo privada. [6020]",
        6021: "Este lugar está ocupado, tente outro! [6021]",
        6022: "Falha! Por favor, tente novamente mais tarde. [6022]",
        6023: "Não foi possível pesquisar a tabela de limite de aposta, digite novamente. [6023]",
        6024: "Não foi possível pesquisar a mesa de jogo, digite novamente. [6024]",
        6025: "Não foi possível encontrar um assento apropriado! [6025]",
        6026: "Falha ao entrar na mesa de jogo, tente novamente! [6026]",
        6027: "Esta mesa está cheia, tente outra mesa de jogo! [6027]",
        6028: "Você apostou no assento nesta rodada, clique em 'entrar' no lobby para entrar na mesa de jogo! [6028]",
        6029: "A mesa de jogo {0} foi reservada. Por favor, escolha entrar ou fazer uma aposta lateral. [6029]",
        6030: "O dono da mesa foi embora! [6030]",
        6031: "Você é o dono da mesa, não pode mudar de lugar. [6031]",
        6032: "Você fez uma aposta paralela nesta rodada. Você não pode entrar na mesa de jogo como colega de mesa. [6032]",
        6033: "Você apostou no assento nesta rodada. Você não pode entrar na mesa por Side-Bet. [6033]",
        6034: "Esta mesa não está reservada, você não pode entrar. [6034]",
        6035: "Desculpe, seu saldo é menor que {0}. Você pode participar por Side-Bet. [6035]",
        6037: "A(s) aposta(s) falhou(s)! [6037]",
        6038: "Falha! Crédito ilegal alterado. [6038]",
        6039: "Falha! O sistema está ocupado! [6039]",
        6040: "Muitas solicitações! Por favor, faça login novamente. [6040]",
        6041: "Falha! A rodada do jogo não pode ser encontrada. [6041]",
        6042: "Falha! Seu crédito não é suficiente. [6042]",
        6043: "Aposta falhou! Está acima da perda máxima. [6043]",
        6044: "Falha! Pare de apostar. [6044]",
        6045: "Falha! A informação está incorreta. [6045]",
        6046: "Falha! Conflito de operação! [6046]",
        6047: "Aposta ilegal! [6047]",
        6048: "Após 30 rodadas, você não pode apostar em grande ou pequeno! [6048]",
        6049: "Aposta inválida! [6049]",
        6050: "Aposta falhou! Está acima do limite máximo. [6050]",
        6052: "Você fez uma aposta, não pode pular esta rodada! [6052]",
        6053: "As cartas são reveladas, você não pode pular esta rodada! [6053]",
        6054: "A rodada do jogo ainda não começou, você não pode pular esta rodada! [6054]",
        6055: "Você já pulou 5 rodadas seguidas. Por favor, faça apostas. [6055]",
        6057: "O croupier não está aqui! [6057]",
        6058: "Operação ilegal. [6058]",
        6059: "Mesa de jogo não encontrada. [6059]",
        6060: "Idioma não suportado! [6060]",
        6061: "Operação inválida! [6061]",
        6062: "Parâmetros de erro! [6062]",
        6063: "O salão de jogos não foi encontrado, por favor, entre novamente. [6063]",
        6064: "O sistema está em manutenção! [6064]",
        6065: "Não foi possível encontrar uma mesa limite ou assento apropriado! [6065]",
        6066: "Mesa de jogo não existe. [6066]",
        6067: "Mesa de jogo não encontrada, por favor entre novamente. [6067]",
        6068: "Erro de senha! [6068]",
        6069: "Nenhuma aposta feita, você não pode revelar as cartas! [6069]",
        6070: "Falha! Você apostou paralelamente nesta rodada, tente novamente após o término desta rodada. [6070]",
        6071: "Você não tem esta mesa! [6071]",
        6072: "Esta mesa já está cheia, tente uma aposta paralela! [6072]",
        6073: "O proprietário da mesa definiu senhas [6073]",
        6074: "Você não tem aposta por mais de 4 minutos e tabela de jogo encerrada automaticamente ({{0}}). [6074]",
        6075: "O ID da sessão expirou, volte para tentar novamente. [6075]",
        6076: "Erro de ID de sessão, retorne para tentar novamente. [6076]",
        6077: "O ID da sessão não pode ser reutilizado. Volte para tentar novamente. [6077]",
        6078: "Você está desconectado do jogo. [6078]",
        6079: "A plataforma está em manutenção! [6079]",
        6080: "Falha ao entrar na tabela, tente novamente. [6080]",
        6081: "Falha ao reservar a mesa, tente novamente. [6081]",
        6082: "Sua conta é proibida para uso em sua região [6082]",
        6083: "Aposta(s) falhou. Você fez apostas na Comissão nesta rodada. [6083]",
        6084: "Aposta(s) falhou. Você fez apostas sem comissão nesta rodada. [6084]",
        6085: "Handicap inválido, você não pode [Reservar/Aderir]. Por favor, tente [Aposta Paralela]. [6085]",
        6086: "A senha foi redefinida. Por favor faça login novamente! [6086]",
        6087: "Senhas nova e antiga precisam ser diferentes [6087]",
        6088: "Você não tem permissão para entrar nesta mesa de jogo de acordo com o handicap VIP atual. Se for necessário ajustar o handicap VIP, entre em contato com o atendimento ao cliente ou seu agente superior [6088]",
        6090: "Tempo de resposta expirada [6090]",
        6091: "Falha no login [6091]",
        6092: "Você está desconectado do jogo [6092]",
        6093: "O código de verificação está incorreto. Por favor, tente novamente [6093]",
        6094: "Seu teste gratuito expirou (15 minutos), você está desconectado do jogo [6094]",
        6095: "A verificação pode ser enviada apenas uma vez por rodada [6095]",
        6096: "Operação inválida [6096]",
        6097: "Estado incorreto ao realizar a verificação [6097]",
        6098: "Não é permitido apostar no campo relacionado a pares após <número> rodadas.",
        6099: "Nenhum pacote vermelho para coletar [6099]",
        6100: "Pacote vermelho já foi coletado [6100]",
        6101: "A atividade ainda não começou [6101]",
        6102: "O status da atividade é ilegal [6102]",
        6103: "Não está pronto para reivindicar rpa [6103]",
        6111: "O jogador desistiu nesta rodada [6111]",
        6112: "O jogador verificou esta rodada [6112]",
        6113: "Estado ilegal de apostas na subrodada [6113]",
        6114: "Não em estado de apostas [6114]",
        6115: "Não é permitido apostar em trincas sem ante/blind [6115]",
        6116: "Ante e Blind devem ser apostados juntos [6116]",
        6117: "A quantia de Ante e Blind deve ser igual [6117]",
        6118: "O jogador só pode apostar em Ante/Blind/Trips na primeira rodada [6118]",
        6119: "O jogador só pode apostar em 4x/3x na segunda rodada [6119]",
        6120: "Jogador só pode apostar em 2x na terceira rodada [6120]",
        6121: "Jogador só pode apostar em 1x na última rodada [6121]",
        6122: "Valor da aposta inválido [6122]",
        6123: "Raise não é permitido sem ante [6123]",
        6124: "Aumento duplicado [6124]",
        6126: "Nenhuma aposta foi detectada em rodadas consecutivas, mesa de jogo encerrada automaticamente. [6126]",
        6200: "Tempo de resposta excedido. Entre em contato com nossa equipe de atendimento ao cliente. [6200]",
        6201: "Tempo limite de resposta. Por favor, contate nossa equipe de atendimento ao cliente. [6201]",
        6202: "Tempo limite de resposta. Por favor, contate nossa equipe de atendimento ao cliente. [6202]",
        6203: "Tempo limite de resposta. Por favor, contate nossa equipe de atendimento ao cliente. [6203]",
        6204: "Tempo limite de resposta. Por favor, contate nossa equipe de atendimento ao cliente. [6204]",
        100001: "Seu agente não ativou seu login móvel",
        200001: "Ocorreu um erro. Entre em contato com a CSD para obter detalhes, obrigado. [1000]",
        200002: "Tempo do sistema expirado, feche a janela do jogo atual e tente novamente. [1001]",
        200003: "Tempo limite do sistema, por favor, feche a janela atual do jogo e tente novamente. [1002]",
        200004: "Ocorreu um erro. Entre em contato com a CSD para obter detalhes, obrigado. [1003]",
        200005: "Ocorreu um erro. Por favor, contate o CSD para mais detalhes, obrigado. [1004]",
        200006: "Ocorreu um erro. Por favor, contate o CSD para mais detalhes, obrigado. [1005]",
        200007: "Ocorreu um erro. Por favor, contate o CSD para mais detalhes, obrigado. [1006]",
        200008: "Ocorreu um erro. Por favor, contate o CSD para mais detalhes, obrigado. [1007]",
        200009: "Ocorreu um erro. Por favor, contate o CSD para mais detalhes, obrigado. [1008]",
        200011: "A conta foi encerrada. Por favor contacte o seu upline para mais detalhes, obrigado. [2002]",
        200012: "Ocorreu um erro. Entre em contato com a CSD para obter detalhes, obrigado. [2003]",
        200013: "Ocorreu um erro. Entre em contato com a CSD para obter detalhes, obrigado. [3001]",
        200014: "Sua conta tem saldo insuficiente. [3002]",
        200015: "Sua aposta excedeu as configurações de limite de aposta, tente novamente. [3003]",
        200016: "Jogo desativado. Por favor contacte o seu upline para mais detalhes, obrigado. [3004]",
        200017: "Ocorreu um erro. Entre em contato com a CSD para obter detalhes, obrigado. [3005]",
        200018: "Limite de vitória atingido! Por favor contacte o seu upline, obrigado. [3006]",
        200019: "Limite de perda atingido! Por favor contacte o seu upline, obrigado. [3007]",
        200020: "Você não tem configuração de limite de aposta para este jogo, entre em contato com seu upline para defini-la. [3008]",
        200021: "Seu limite de apostas foi alterado, faça o login novamente para aplicar a nova configuração.[3009]",
        200022: "Conta foi suspensa. Por favor contacte o seu upline para mais detalhes, obrigado. [3010]",
        200023: "Conta foi suspensa. Por favor, contate seu upline para mais detalhes, obrigado. [3013]",
        200024: "O jogo está indisponível no momento. Entre em contato com a CSD para obter detalhes, obrigado. [3014]"
    }, error_msg$5 = {
        ban: "Sua conta foi logada em outro lugar.",
        kick: "Sessão expirada. Por favor, reconecte-se à plataforma!",
        processing_game_bet: "Sua aposta está sendo processada, por favor, aguarde.",
        quitGame: "Pressione OK para sair do jogo",
        relogin: "Pressione OK para retornar à página de login.",
        unknown: "A rede foi desconectada, pressione OK para sair do jogo",
        connection: {
            connection_problem: "Pressione OK para se reconectar ao jogo.",
            server_connection_problem: "Pressione OK para se reconectar ao jogo."
        },
        idle: {
            disconnected_reconnect: "Pressione OK para se reconectar ao jogo.",
            disconnected_to_server: "Pressione OK para se reconectar ao jogo."
        }
    }, fast_bet$5 = {title: "Aposta Rápida"}, game_hall$5 = {
        banner_more_detail: "Ver Mais",
        feature_games: "Jogos em Destaque",
        good_roads: "Estrada boa",
        hot_games: "Jogos Populares",
        multi_play: "MultiPlay",
        view_all: "Ver Todos",
        vip_betlimit: "Quadra",
        vip_enter: "Entrar",
        vip_min_enter: "Limite de Aposta",
        vip_occupied: "Reservado",
        vip_reserve: "Reservar",
        subtypes: {
            all: "Todos",
            classic: "Clássico",
            insurance: "Seguro",
            quick: "Rápido",
            see: "Ver Carta",
            sexy: "Sweetie",
            vip: "VIP"
        }
    }, game_rules$5 = {
        attention: "Atenção",
        game_rules: "Regras do Jogo",
        introduction: "Introdução",
        payoff: "Pagamento",
        title: "Ajuda"
    }, game_table$5 = {
        balanace: "SALDO",
        deposit: "Depósito",
        deposit_short: "D",
        total_bet: "APOSTA TOTAL",
        trial: "Prova",
        baccarat: {no_comm: "Sem comissão"},
        blackjack: {
            all_side_bets: "TODAS AS APOSTAS LATERAIS",
            ante_first: "POR FAVOR, APOSTE ANTE PRIMEIRO",
            banker: "Banqueiro",
            double: "Duplo",
            hit: "Hit",
            insufficient_insurance: "Saldo insuficiente para seguro",
            insurance: "Seguro?",
            other_decison: "Outros jogadores estão tomando decisão",
            player: "Jogador",
            split: "Split",
            stand: "Stand",
            instruction: {
                213: {
                    content: "Ganhe se a combinação das cartas iniciais do jogador e a carta visível do dealer formarem um tipo específico de carta.",
                    title: "LUCKY 3"
                },
                label: "INSTRUÇÃO",
                ante: {
                    content: "Ganhe se o valor da mão do jogador estiver mais próximo de 21 do que a mão do dealer e não exceder 21.",
                    title: "ANTE"
                },
                bust: {content: "Ganhe se o dealer estourar.", title: "BUST IT"},
                hot3: {
                    content: "Ganhe se o valor das cartas iniciais do jogador e a carta visível do dealer totalizarem 19 - 21.",
                    title: "HOT 3"
                },
                lucky_ladies: {
                    content: "Ganhe se as cartas iniciais do jogador formarem um tipo específico de carta.",
                    title: "LUCKY LADIES"
                },
                pair: {content: "Ganhe se as cartas iniciais do jogador forem um par.", title: "Qualquer par"}
            }
        },
        bullbull: {
            banker: "Banqueiro",
            banker_allwin: "TODOS OS BANQUEIROS GANHAM",
            first_card: "PRIMEIRA CARTA",
            player_allwin: "TODOS OS JOGADORES GANHAM"
        },
        casino_war: {
            "1st_tie": "1st Tie",
            "2nd_tie": "2nd Tie",
            banker: "Banqueiro",
            decision: "FAÇA SUA DECISÃO",
            player_1: "Jogador 1",
            player_2: "Jogador 2",
            player_3: "Jogador 3",
            surrender: "RENDIÇÃO"
        },
        fpc: {any_two_dice: "QUALQUER DOIS DADOS", both_one_dice: "AMBOS UM DADO"},
        roulette: {orphelins: "orphelins", tier: "tier", voisins: "voisins", zero: "zero"},
        seecard: {other_squeezing: "Outros jogadores estão espremendo cartas"},
        teen_patti: {pair_plus: "PAR+"},
        uth: {
            banker: "Banqueiro",
            community: "COMUNIDADE",
            decision: "FAÇA SUA DECISÃO",
            play: "Jogar",
            player_1: "Jogador 1",
            player_1_short: "J1",
            player_2: "Jogador 2",
            player_2_short: "J2",
            player_3: "Jogador 3",
            player_3_short: "J3",
            raise1x: "AUMENTO 1x",
            raise2x: "AUMENTO 2x",
            raise3x: "AUMENTO 3x",
            raise4x: "AUMENTO 4x"
        },
        vip: {
            owner_squeezing: "O proprietário está espremendo cartas",
            owner_tooltip: "PROPRIETÁRIO",
            reserve_action_tooltip: "RESERVAR",
            reserve_betlimit: "Limite de Aposta",
            reserve_min_enter: "Saldo Mínimo",
            reserve_request: "Mesa reservada. Você será o proprietário na próxima rodada.",
            reserved_tooltip: "RESERVAR",
            shuffle_request: "Your shuffle request has been submitted. The shuffle will start within 5 minutes",
            shuffle_tooltip: "EMBARALHAR",
            skip_tooltip: "PULAR",
            start_tooltip: "INICIAR"
        }
    }, game_types$5 = {
        101: "Bacará",
        102: "VIP Bacará (Legado)",
        103: "Bacará Rápido",
        104: "Ver Carta Bacará",
        110: "Seguro Bacará",
        111: "VIP Bacará",
        201: "SicBo",
        202: "Peixe, Camarão, Caranguejo",
        203: "Xoc Dia",
        301: "Dragão Tigre",
        401: "Roleta",
        501: "Pok Deng Clássico",
        602: "Andar Bahar",
        603: "Teen Patti 20-20",
        702: "Ultimate Texas Hold'em",
        703: "Guerra de Cassino",
        704: "Blackjack Infinito",
        801: "Touro Touro",
        901: "Vencer 3 cartas",
        "201_Alt": "HiLo",
        "201_Alt_2": "Sic Tan",
        "501_Alt": "PokDeng Dois Lados",
        "901_Alt": "Três Imagens",
        "901_Alt_2": "Teen Patti 20-20",
        arcadeGame: "Jogo de Cassino",
        card_game: "Jogo de Cartas",
        cardGame: "Jogo de Cartas",
        classic: "Clássico",
        fishingGame: "Pesca AB",
        game_hall: "Lobby",
        multi_hall: "MultiJogo",
        sexy: "Sweetie",
        slotGame: "Jogo de Caça-Níqueis",
        UTH_Short: "Ult. Texas"
    }, gamehall_table$5 = {
        maintaining: "MANUTENÇÃO",
        notable: "Nenhuma mesa disponível",
        good_road: {
            100: "B Longo",
            101: "J Longo",
            102: "Estrada Única",
            103: "Um P Dois B",
            104: "Um B Dois P",
            105: "Patted eat",
            106: "B através P",
            107: "P através B",
            108: "Separado B",
            109: "Separado P"
        }
    }, header$5 = {
        bet_record: "Histórico de Apostas",
        card_game: "AB FISHING",
        exitfullscreen: "Sair da Tela Cheia",
        fullscreen: "Tela Cheia",
        hot_games: "LOBBY",
        live_games: "LIVE GAMES",
        logout: "Sair",
        multi_table: "MULTIPLAY",
        profile: "Perfil",
        services: "Serviços",
        Version: "Versão"
    }, login$5 = {free_trial: "TESTE GRATUITO", login: "VOCÊ EMPATOU", password: "Senha", username: "Nome de usuário"},
    menu$5 = {
        addToHomeScreenForIOS: "ADICIONAR À TELA INICIAL",
        back: "VOLTE PARA O LOBBY",
        downloadApp: "Baixar APP",
        exitfullscreen: "SAIR DA TELA CHEIA",
        fast_bet: "APOSTA RÁPIDA",
        fullscreen: "TELA CHEIA",
        guide: "AJUDA",
        history: "REGISTROS DE APOSTAS",
        installation_instruction: "Instrução",
        installPwa: "INSTALAR",
        lobby: "Lobby",
        loginApp: "Login APP",
        payout: "PAGAMENTO",
        settings: "CONFIGURAÇÕES",
        title: "Menu",
        verification: "VERIFICAR",
        video: "RECARRAGAR"
    }, messages$5 = {
        all_in: "ALL IN",
        bet_success: "Aposta(s) Confirmada(s)",
        cancel: "Cancelar",
        game_table_verified: "A verificação foi enviada, por favor verifique o resultado na tela",
        idle_video: "VÍDEO PAUSADO DEVIDO À INATIVIDADE. PRESSIONE OK PARA",
        insufficient_bet_balance: "Saldo insuficiente",
        insufficient_vip_balance: "Quantidade insuficiente",
        landscape_block: "Gire seu dispositivo móvel para uma melhor experiência",
        loading: "CARREGANDO",
        logout: "Tem certeza de que deseja sair?",
        logoutOK: "Desconectar",
        lost: "VOCÊ PERDEU",
        multi_side_hall_filter: "Filter cannot be empty, please select at least one game type.",
        nickname_success: "Apelido atualizado!",
        ok_button: "OK",
        screen_size_block: "Por favor, redimensione a janela para a melhor experiência",
        table_not_found: "Mesa de jogo não encontrada",
        table_under_maintenance: "A mesa está em manutenção",
        won: "VOCÊ GANHOU"
    }, payout$5 = {
        bet: "APOSTAR", bet_limit: "LIMITE DE APOSTA", odds: "ODDS", payout: "PAGAMENTO", bet_type: {
            1001: "BANQUEIRO",
            1002: "JOGADOR",
            1003: "EMPATE",
            1006: "PAR BANQUEIRO",
            1007: "PAR JOGADOR",
            1011: "Banqueiro (sem comissão)",
            1100: "6 Sortudo",
            1211: "Banqueiro Natural",
            1212: "Jogador natural",
            1223: "QUALQUER PAR",
            1224: "PAR PERFEITO",
            1231: "BÔNUS BANQUEIRO",
            1232: "BÔNUS JOGADOR",
            1401: "Tigre",
            1402: "Grande Tigre",
            1403: "Pequeno Tigre",
            1404: "Empates do Tigre",
            1405: "Pares do Tigre",
            1501: "4 Fabulosos do Banqueiro",
            1502: "4 Fabulosos do Jogador",
            1503: "Par Precioso do Banqueiro",
            1504: "Pares Preciosos do Jogador",
            1601: "Banqueiro Preto",
            1602: "Banqueiro Vermelho",
            1603: "Pretos do Jogador",
            1604: "Vermelhos do Jogador",
            1605: "Quaisquer 6",
            2001: "DRAGÃO",
            2002: "TIGRE",
            2003: "EMPATE",
            3001: "GRANDE / PEQUENO",
            3002: "PAR / ÍMPAR",
            3005: "TRIPLO ESPECÍFICO",
            3011: "QUALQUER TRIPLO",
            3012: "DUPLO ESPECÍFICO",
            3018: "4 OU 17 PONTOS",
            3019: "5 OU 16 PONTOS",
            3020: "6 OU 15 PONTOS",
            3021: "7 OU 14 PONTOS",
            3022: "8 OU 13 PONTOS",
            3023: "9, 10, 11 OU 12 PONTOS",
            3033: "COMBINAÇÃO DE DOIS DADOS",
            3048: "UM DADO",
            3049: "DOIS DADOS",
            3050: "TRÊS DADOS",
            3200: "Alto",
            3201: "Baixo",
            3202: "11 Alto - Baixo",
            3203: "DADO 1 - 6",
            3209: "COMBINAÇÃO DE DOIS DADOS",
            3224: "1 Baixo",
            3225: "2 Baixo",
            3226: "3 Baixo",
            3227: "4 Baixo",
            3228: "5 - 6 Baixo",
            3230: "3 - 4 Alto",
            3232: "5 Alto",
            3233: "6 Alto",
            3234: "COMBINAÇÃO DE TRÊS DADOS",
            3301: "SÍMBOLO PRINCIPAL",
            3307: "COR SINGULAR ESPECÍFICA",
            3310: "COR DUPLA ESPECÍFICA",
            3313: "COR TRIPLA ESPECÍFICA",
            3316: "QUALQUER COR TRIPLA",
            3317: "COMBINAÇÃO DE DOIS DADOS",
            3401: "ÍMPAR / PAR",
            3403: "FAN",
            3407: "NIM",
            3419: "NGA",
            3431: "SSH",
            3435: "12 KWOK / 23 KWOK / 34 KWOK",
            3438: "41 KWOK",
            3500: "EMPATE",
            3501: "PEQUENO",
            3502: "GRANDE",
            3503: "ÍMPAR",
            3504: "PAR",
            3505: "0",
            3506: "1",
            3507: "3",
            3508: "4",
            4001: "GRANDE / PEQUENO",
            4002: "ÍMPAR / PAR",
            4003: "VERMELHO / PRETO",
            4007: "DÚZIA",
            4010: "COLUNA",
            4013: "RETA",
            4050: "TRÊS NÚMEROS",
            4052: "QUATRO NÚMEROS",
            4053: "SEPARADO",
            4113: "CANTO",
            4135: "RUA",
            4147: "LINHA",
            5001: "JOGADOR 1-5",
            5011: "PAR JOGADOR 1-5",
            5101: "JOGADOR 1-5",
            5106: "BANQUEIRO 1-5",
            5111: "PAR BANQUEIRO",
            6201: "ANDAR",
            6202: "BAHAR",
            6203: "1-5 CARTAS",
            6204: "6-10 CARTAS",
            6205: "11-15 CARTAS",
            6206: "16-25 CARTAS",
            6207: "26-30 CARTAS",
            6208: "31-35 CARTAS",
            6209: "36-40 CARTAS",
            6210: "41+ CARTAS",
            6211: "1º ANDAR",
            6212: "1º BAHAR",
            6301: "JOGADOR A",
            6302: "JOGADOR B",
            6303: "EMPATE",
            6304: "PAR JOGADOR A PLUS",
            6305: "PAR JOGADOR B PLUS",
            6306: "BÔNUS DE 6 CARTAS",
            7201: "ANTE JOGADOR 1 - 3",
            7202: "CEGO JOGADOR 1 - 3",
            7203: "TRIPS JOGADOR 1 - 3",
            7301: "ANTE JOGADOR 1 - 3",
            7302: "1º EMPATE JOGADOR 1 - 3",
            7304: "2º EMPATE JOGADOR 1 - 3",
            7401: "ANTE",
            7404: "QUALQUER PAR",
            7405: "Sortudo 3",
            7406: "HOT 3",
            7407: "ESTOURAR",
            7409: "Damas Sortudas",
            8001: "BANQUEIRO 1",
            8002: "BANQUEIRO 2",
            8003: "BANQUEIRO 3",
            8011: "BANQUEIRO 1",
            8012: "BANQUEIRO 2",
            8013: "BANQUEIRO 3",
            8021: "BANQUEIRO 1",
            8022: "BANQUEIRO 2",
            8023: "BANQUEIRO 3",
            8101: "JOGADOR 1",
            8102: "JOGADOR 2",
            8103: "JOGADOR 3",
            8111: "JOGADOR 1",
            8112: "JOGADOR 2",
            8113: "JOGADOR 3",
            8121: "JOGADOR 1",
            8122: "JOGADOR 2",
            8123: "JOGADOR 3",
            9001: "DRAGÃO",
            9002: "FÊNIX",
            9003: "PAR 8+",
            9004: "RETA",
            9005: "FLUSH",
            9006: "RETA FLUSH",
            9007: "THREE OF A KIND",
            9101: "DRAGÃO",
            9102: "FÊNIX",
            9103: "EMPATE",
            9114: "DRAGÃO 3 IMAGENS",
            9124: "FÊNIX 3 IMAGENS"
        }
    }, profile$5 = {
        save: "Salvar",
        title: "Perfil",
        main_view: {change_password: "Mudar Senha?", nickname: "Apelido", pending: "Pendente"},
        password_view: {
            confirm_password: "Confirmar Senha",
            current_password: "Senha Atual",
            hints: "* Por favor, insira uma string alfanumérica de 6-10 caracteres",
            new_password: "Nova Senha"
        }
    }, roadmap$5 = {
        analysis: "ANÁLISE",
        history: "HISTÓRICO",
        last_10_rounds: "ÚLTIMAS 10 RODADAS",
        last_50_rounds: "ÚLTIMAS 50 RODADAS",
        last_6_rounds: "ÚLTIMAS 6 RODADAS",
        round_num: "Número da Rodada",
        statistics: "ESTATÍSTICAS",
        andar_bahar: {andar: "ANDAR", bahar: "BAHAR"},
        baccarat: {
            banker: "B",
            player: "P",
            predict_banker: "Prever Banqueiro",
            predict_player: "Prever Jogador",
            tie: "T"
        },
        bull_bull: {
            game_hall: {
                0: "Sem Touro",
                1: "T1",
                2: "T2",
                3: "T3",
                4: "T4",
                5: "T5",
                6: "T6",
                7: "T7",
                8: "T8",
                9: "T9",
                A: "TT",
                B: "5D",
                banker: "B",
                player_1: "J1",
                player_2: "J2",
                player_3: "J3"
            },
            game_table: {
                0: "Sem Touro",
                1: "Touro 1",
                2: "Touro 2",
                3: "Touro 3",
                4: "Touro 4",
                5: "Touro 5",
                6: "Touro 6",
                7: "Touro 7",
                8: "Touro 8",
                9: "Touro 9",
                A: "Touro Touro",
                B: "5 Dukes",
                banker: "Banqueiro",
                player_1: "Jogador 1",
                player_2: "Jogador 2",
                player_3: "Jogador 3"
            }
        },
        casino_war: {banker: "B", player_1: "P1", player_2: "P2", player_3: "P3"},
        dragon_tiger: {dragon: "D", predict_dragon: "Prever Dragão", predict_tiger: "Prever Tigre", tie: "T", tiger: "T"},
        hi_lo: {hi: "ALTO", hi_lo: "11", lo: "BAIXO"},
        pokdeng: {banker: "B", player_1: "J1", player_2: "J2", player_3: "J3", player_4: "J4", player_5: "J5"},
        roulette: {hot_cold: "QUENTE e FRIO"},
        sicbo: {big: "GRANDE", small: "PEQUENO", triple: "TRIPLO"},
        sictan: {even: "Par", fan_1: "1 FAN", fan_2: "2 FAN", fan_3: "3 FAN", fan_4: "4 FAN", odd: "Ímpar"},
        teen_patti: {
            235: "235",
            flush: "Flush",
            four_of_a_kind: "Four of a Kind",
            full_house: "Full House",
            high_card: "Carta Alta",
            pair: "Par",
            pair_plus: "PAR+",
            player_a: "A",
            player_b: "B",
            royal_flush: "Royal Flush",
            straight: "Straight",
            straight_flush: "Straight Flush",
            three_of_a_kind: "Three of a Kind",
            tie: "T"
        },
        three_pictures: {
            double_pictures: "DP",
            dragon: "D",
            phoenix: "P",
            single_picture: "SP",
            tie: "T",
            triple_pictures: "3P"
        },
        win3cards: {
            235: "235",
            dragon: "D",
            flush: "Flush",
            high_card: "Carta Alta",
            "p8+": "P8",
            pair: "Par",
            phoenix: "P",
            straight: "Sequência",
            straight_flush: "Straight Flush",
            three_of_a_kind: "Three of a Kind",
            tie: "T"
        },
        xocdia: {even: "PAR", odd: "ÍMPAR", tie: "Empate", big: "GRANDE", small: "PEQUENO", o: "O", e: "E"}
    }, settings$5 = {
        title: "Configurações",
        bullbull: {
            double: "Dobro",
            equal: "Igual",
            play_type: "Tipo de Aposta",
            play_type_multiplay: "Tipo de Aposta (Bull Bull)",
            super: "SuperBull"
        },
        general: {
            confirmed_bet_amounts: "Valores de Apostas Confirmadas",
            languages: "Idiomas",
            side_bets: "Apostas Laterais",
            statistics: "Estatísticas de Apostas",
            title: "Exibição"
        },
        scorecards: {classic: "Clássico", immersive: "Imersivo", title: "Placar"},
        sound: {live: "Som ao Vivo", system: "Som do Sistema", title: "Som"}
    }, side_hall_filter$5 = {
        101: "Bacará",
        103: "Rápido",
        104: "Ver Carta",
        110: "Seguro",
        111: "VIP",
        201: "SicBo",
        202: "Peixe, Camarão, Caranguejo",
        203: "Xoc Dia",
        301: "Dragão Tigre",
        401: "Roleta",
        501: "Pok Deng Clássico",
        602: "Andar Bahar",
        603: "Teen Patti 20-20",
        801: "Touro Touro",
        901: "Vencer 3 cartas",
        "201_Alt": "HiLo",
        "201_Alt_2": "Sic Tan",
        "501_Alt": "PokDeng Dois Lados",
        "901_Alt": "Três Imagens",
        "901_Alt_2": "Teen Patti 20-20",
        asia: "Jogos da Ásia",
        baccarat: "Bacará",
        classic: "Clássico",
        europe: "Jogos da Europa",
        global: "Jogos Globais",
        other: "Outros Jogos",
        sexy: "Sweetie"
    }, ptbr = {
        baccarat_gameplay: baccarat_gameplay$5,
        bet_record: bet_record$5,
        bet_type: bet_type$5,
        custom_chips: custom_chips$5,
        detailed_bet_type: detailed_bet_type$5,
        error_code: error_code$5,
        error_msg: error_msg$5,
        fast_bet: fast_bet$5,
        game_hall: game_hall$5,
        game_rules: game_rules$5,
        game_table: game_table$5,
        game_types: game_types$5,
        gamehall_table: gamehall_table$5,
        header: header$5,
        login: login$5,
        menu: menu$5,
        messages: messages$5,
        payout: payout$5,
        profile: profile$5,
        roadmap: roadmap$5,
        settings: settings$5,
        side_hall_filter: side_hall_filter$5
    }, baccarat_gameplay$4 = {
        basic: "基本",
        default: "默认",
        fabulous_4: "四福",
        natural: "例牌",
        super: "超级",
        switch: "切换玩法",
        tiger: "老虎"
    }, bet_record$4 = {
        bet_amount: "下注金额",
        bet_type: "玩法",
        betting_number: "下注编号",
        date_time: "日期时间",
        game: "游戏",
        game_type: "游戏类型",
        gameround_id: "局号",
        loading: "加载中",
        next: "下一页",
        no_video: "请注意，本轮游戏无效，不会显示现场视频",
        previous: "上一页",
        shoe_round: "靴-局",
        status: "状态",
        table_number: "桌台",
        total_bet: "下注总额",
        valid_bet: "有效下注",
        win_loss: "输赢",
        bet_status: {100: "下注中", 101: "下注失败", 110: "未派彩", 111: "已派彩", 120: "下注退款"},
        title: {details: "记录细节", records: "下注记录"}
    }, bet_type$4 = {
        1001: "庄",
        1002: "闲",
        1003: "和",
        1006: "庄对",
        1007: "闲对",
        1011: "庄",
        1100: "幸运6",
        1211: "庄例牌",
        1212: "闲例牌",
        1223: "任意对子",
        1224: "完美对子",
        1231: "庄龙宝",
        1232: "闲龙宝",
        1301: "保险",
        1302: "保险",
        1303: "保险",
        1304: "保险",
        1401: "老虎",
        1402: "小老虎",
        1403: "大老虎",
        1404: "老虎对",
        1405: "老虎和",
        1501: "庄四福",
        1502: "闲四福",
        1503: "庄4福對子",
        1504: "闲4福對子",
        1601: "庄家黑",
        1602: "庄家红",
        1603: "闲家黑",
        1604: "闲家红",
        1605: "无敌6",
        2001: "龙",
        2002: "虎",
        2003: "和",
        3001: "小",
        3002: "单",
        3003: "双",
        3004: "大",
        3011: "全围",
        3048: "一",
        3049: "二",
        3050: "三",
        3051: "四",
        3052: "五",
        3053: "六",
        3200: "HI",
        3201: "LO",
        3225: "LO",
        3227: "LO",
        3228: "LO",
        3229: "LO",
        3230: "HI",
        3232: "HI",
        3401: "单",
        3402: "双",
        3403: "1 番",
        3404: "2 番",
        3405: "3 番",
        3406: "4 番",
        3407: "1念2",
        3408: "1念3",
        3409: "1念4",
        3410: "2念1",
        3411: "2念3",
        3412: "2念4",
        3413: "3念1",
        3414: "3念2",
        3415: "3念4",
        3416: "4念1",
        3417: "4念2",
        3418: "4念3",
        3419: "23一通",
        3420: "24一通",
        3421: "34一通",
        3422: "13二通",
        3423: "14二通",
        3424: "34二通",
        3425: "12三通",
        3426: "14三通",
        3427: "24三通",
        3428: "13四通",
        3429: "12四通",
        3430: "23四通",
        3431: "三门123",
        3432: "三门124",
        3433: "三门134",
        3434: "三门234",
        3435: "角12",
        3436: "角23",
        3437: "角34",
        3438: "角41",
        3501: "小",
        3502: "大",
        3503: "单",
        3504: "双",
        4001: "1 - 18",
        4002: "双",
        4005: "单",
        4006: "19 - 36",
        4007: "第一打",
        4008: "第二打",
        4009: "第三打",
        4010: "第一列",
        4011: "第二列",
        4012: "第三列",
        5001: "闲1",
        5002: "闲2",
        5003: "闲3",
        5004: "闲4",
        5005: "闲5",
        5011: "闲1 对",
        5012: "闲2 对",
        5013: "闲3 对",
        5014: "闲4 对",
        5015: "闲5 对",
        5101: "闲1",
        5102: "闲2",
        5103: "闲3",
        5104: "闲4",
        5105: "闲5",
        5106: "庄1",
        5107: "庄2",
        5108: "庄3",
        5109: "庄4",
        5110: "庄5",
        5111: "庄对",
        6201: "安达",
        6202: "巴哈",
        6203: "1-5",
        6204: "6-10",
        6205: "11-15",
        6206: "16-25",
        6207: "26-30",
        6208: "31-35",
        6209: "36-40",
        6210: "41+",
        6211: "安达首张",
        6212: "巴哈首张",
        6301: "玩家 A",
        6302: "玩家 B",
        6303: "和",
        6304: "A 对子+",
        6305: "B 对子+",
        6306: "六张彩",
        7201: "底注",
        7202: "盲注",
        7203: "边注",
        7204: "跟注 4x",
        7205: "跟注 3x",
        7206: "跟注 2x",
        7207: "跟注 1x",
        7211: "底注",
        7212: "盲注",
        7213: "边注",
        7214: "跟注 4x",
        7215: "跟注 3x",
        7216: "跟注 2x",
        7217: "跟注 1x",
        7221: "底注",
        7222: "盲注",
        7223: "边注",
        7224: "跟注 4x",
        7225: "跟注 3x",
        7226: "跟注 2x",
        7227: "跟注 1x",
        7301: "底注",
        7302: "首轮和注",
        7303: "加注",
        7304: "次轮和注",
        7311: "底注",
        7312: "首轮和注",
        7313: "加注",
        7314: "次轮和注",
        7321: "底注",
        7322: "首轮和注",
        7323: "加注",
        7324: "次轮和注",
        7401: "底注",
        7402: "加倍下注",
        7403: "分牌",
        7404: "对子",
        7405: "幸运三",
        7406: "烫三手",
        7407: "爆牌",
        7408: "保险",
        7409: "幸运女皇",
        8001: "庄 1",
        8002: "庄 2",
        8003: "庄 3",
        8011: "庄 1",
        8012: "庄 2",
        8013: "庄 3",
        8021: "庄 1",
        8022: "庄 2",
        8023: "庄 3",
        8101: "闲 1",
        8102: "闲 2",
        8103: "闲 3",
        8111: "闲 1",
        8112: "闲 2",
        8113: "闲 3",
        8121: "闲 1",
        8122: "闲 2",
        8123: "闲 3",
        9001: "龙",
        9002: "凤",
        9003: "对8以上",
        9004: "顺子",
        9005: "同花",
        9006: "同花顺",
        9007: "豹子",
        9101: "龙",
        9102: "凤",
        9103: "和",
        9114: "龙三公",
        9124: "凤三公",
        tips: {
            6306: "皇家同花顺/同花顺/四条/葫芦/同花/顺子/三条",
            9003: "包括 对 9 - 对 A / 顺子 / 同花 / 同花顺 / 豹子",
            banker_insurance: "庄保险下注中",
            bullbull_firstcard: "头牌",
            cards_dealt: "发牌",
            check: "看牌",
            checked: "你已看牌",
            comm_betted: "您已在本局使用非免佣下注",
            double_text: "双骰",
            fold: "弃牌",
            folded: "你已弃牌",
            house_card: "头牌",
            lose: "你输了",
            no_bet_after: "每只靴的第%1局后不可押注%2",
            no_comm_betted: "您已在本局使用免佣下注",
            no_pairs: "每只靴的第五十局后不可押注对子",
            player_1: "闲 1",
            player_2: "闲 2",
            player_3: "闲 3",
            player_insurance: "闲保险下注中",
            raised: "你已跟注",
            single_text: "单骰",
            surrender: "投降",
            tie: "和局",
            triple_text: "三骰",
            war: "进入战争",
            win: "你赢了"
        }
    }, custom_chips$4 = {
        chip_value_exists: "此筹码值已存在，请尝试其他值",
        choose_common_chips: "选择常用筹码",
        custom_chips_value: "自定义筹码数值",
        min_chip_count: "请至少选择5个筹码",
        min_chip_value: "最低允许的筹码值为",
        select_all: "全选",
        title: "自定义筹码"
    }, detailed_bet_type$4 = {
        1001: "庄",
        1002: "闲",
        1003: "和",
        1006: "庄对",
        1007: "闲对",
        1011: "庄(免佣)",
        1100: "幸运6",
        1211: "庄例牌",
        1212: "闲例牌",
        1223: "任意对子",
        1224: "完美对子",
        1231: "庄龙宝",
        1232: "闲龙宝",
        1301: "庄保险-1",
        1302: "庄保险-2",
        1303: "闲保险-1",
        1304: "闲保险-2",
        1401: "老虎",
        1402: "小老虎",
        1403: "大老虎",
        1404: "老虎对",
        1405: "老虎和",
        1501: "庄四福",
        1502: "闲四福",
        1503: "庄4福對子",
        1504: "闲4福對子",
        1601: "庄家黑",
        1602: "庄家红",
        1603: "闲家黑",
        1604: "闲家红",
        1605: "无敌6",
        2001: "龙",
        2002: "虎",
        2003: "和",
        3001: "小",
        3002: "单",
        3003: "双",
        3004: "大",
        3005: "围 1",
        3006: "围 2",
        3007: "围 3",
        3008: "围 4",
        3009: "围 5",
        3010: "围 6",
        3011: "全围",
        3012: "对 1",
        3013: "对 2",
        3014: "对 3",
        3015: "对 4",
        3016: "对 5",
        3017: "对 6",
        3018: "和 4",
        3019: "和 5",
        3020: "和 6",
        3021: "和 7",
        3022: "和 8",
        3023: "和 9",
        3024: "和 10",
        3025: "和 11",
        3026: "和 12",
        3027: "和 13",
        3028: "和 14",
        3029: "和 15",
        3030: "和 16",
        3031: "和 17",
        3033: "两颗骰子 1,2",
        3034: "两颗骰子 1,3",
        3035: "两颗骰子 1,4",
        3036: "两颗骰子 1,5",
        3037: "两颗骰子 1,6",
        3038: "两颗骰子 2,3",
        3039: "两颗骰子 2,4",
        3040: "两颗骰子 2,5",
        3041: "两颗骰子 2,6",
        3042: "两颗骰子 3,4",
        3043: "两颗骰子 3,5",
        3044: "两颗骰子 3,6",
        3045: "两颗骰子 4,5",
        3046: "两颗骰子 4,6",
        3047: "两颗骰子 5,6",
        3048: "骰 1",
        3049: "骰 2",
        3050: "骰 3",
        3051: "骰 4",
        3052: "骰 5",
        3053: "骰 6",
        3200: "Hi",
        3201: "Lo",
        3202: "11 Hi-Lo",
        3203: "骰 1",
        3204: "骰 2",
        3205: "骰 3",
        3206: "骰 4",
        3207: "骰 5",
        3208: "骰 6",
        3209: "HiLo 1-2",
        3210: "HiLo 1-3",
        3211: "HiLo 1-4",
        3212: "HiLo 1-5",
        3213: "HiLo 1-6",
        3214: "HiLo 2-3",
        3215: "HiLo 2-4",
        3216: "HiLo 2-5",
        3217: "HiLo 2-6",
        3218: "HiLo 3-4",
        3219: "HiLo 3-5",
        3220: "HiLo 3-6",
        3221: "HiLo 4-5",
        3222: "HiLo 4-6",
        3223: "HiLo 5-6",
        3224: "1-Lo",
        3225: "2-Lo",
        3226: "3-Lo",
        3227: "4-Lo",
        3228: "5-Lo",
        3229: "6-Lo",
        3230: "3-Hi",
        3231: "4-Hi",
        3232: "5-Hi",
        3233: "6-Hi",
        3234: "1,2,3",
        3235: "2,3,4",
        3236: "3,4,5",
        3237: "4,5,6",
        3301: "鱼",
        3302: "虾",
        3303: "葫芦",
        3304: "金钱",
        3305: "蟹",
        3306: "鸡",
        3307: "指定单红",
        3308: "指定单绿",
        3309: "指定单蓝",
        3310: "指定二粒红",
        3311: "指定二粒绿",
        3312: "指定二粒蓝",
        3313: "指定三粒红",
        3314: "指定三粒绿",
        3315: "指定三粒蓝",
        3316: "任意围色",
        3317: "葫芦 & 虾",
        3318: "葫芦 & 鱼",
        3319: "葫芦 & 鸡",
        3320: "葫芦 & 蟹",
        3321: "葫芦 & 金钱",
        3322: "虾 & 鱼",
        3323: "虾 & 鸡",
        3324: "虾 & 蟹",
        3325: "虾 & 金钱",
        3326: "鱼 & 鸡",
        3327: "鱼 & 蟹",
        3328: "鱼 & 金钱",
        3329: "鸡 & 蟹",
        3330: "鸡 & 金钱",
        3331: "蟹 & 金钱",
        3401: "单",
        3402: "双",
        3403: "1番",
        3404: "2番",
        3405: "3番",
        3406: "4番",
        3407: "1念2",
        3408: "1念3",
        3409: "1念4",
        3410: "2念1",
        3411: "2念3",
        3412: "2念4",
        3413: "3念1",
        3414: "3念2",
        3415: "3念4",
        3416: "4念1",
        3417: "4念2",
        3418: "4念3",
        3419: "23一通",
        3420: "24一通",
        3421: "34一通",
        3422: "13二通",
        3423: "14二通",
        3424: "34二通",
        3425: "12三通",
        3426: "14三通",
        3427: "24三通",
        3428: "13四通",
        3429: "12四通",
        3430: "23四通",
        3431: "123三门",
        3432: "124三门",
        3433: "134三门",
        3434: "234三门",
        3435: "12角",
        3436: "23角",
        3437: "34角",
        3438: "41角",
        3500: "和",
        3501: "小",
        3502: "大",
        3503: "单",
        3504: "双",
        3505: "0",
        3506: "1",
        3507: "3",
        3508: "4",
        4001: "小",
        4002: "双",
        4003: "红",
        4004: "黑",
        4005: "单",
        4006: "大",
        4007: "第一打",
        4008: "第二打",
        4009: "第三打",
        4010: "第一列",
        4011: "第二列",
        4012: "第三列",
        4013: "直注 0",
        4014: "直注 1",
        4015: "直注 2",
        4016: "直注 3",
        4017: "直注 4",
        4018: "直注 5",
        4019: "直注 6",
        4020: "直注 7",
        4021: "直注 8",
        4022: "直注 9",
        4023: "直注 10",
        4024: "直注 11",
        4025: "直注 12",
        4026: "直注 13",
        4027: "直注 14",
        4028: "直注 15",
        4029: "直注 16",
        4030: "直注 17",
        4031: "直注 18",
        4032: "直注 19",
        4033: "直注 20",
        4034: "直注 21",
        4035: "直注 22",
        4036: "直注 23",
        4037: "直注 24",
        4038: "直注 25",
        4039: "直注 26",
        4040: "直注 27",
        4041: "直注 28",
        4042: "直注 29",
        4043: "直注 30",
        4044: "直注 31",
        4045: "直注 32",
        4046: "直注 33",
        4047: "直注 34",
        4048: "直注 35",
        4049: "直注 36",
        4050: "三数 0/1/2",
        4051: "三数 0/2/3",
        4052: "三数 0/1/2/3",
        4053: "分注(0/1)",
        4054: "分注(0/2)",
        4055: "分注(0/3)",
        4056: "分注(1/2)",
        4057: "分注(2/3)",
        4058: "分注(4/5)",
        4059: "分注(5/6)",
        4060: "分注(7/8)",
        4061: "分注(8/9)",
        4062: "分注(10/11)",
        4063: "分注(11/12)",
        4064: "分注(13/14)",
        4065: "分注(14/15)",
        4066: "分注(16/17)",
        4067: "分注(17/18)",
        4068: "分注(19/20)",
        4069: "分注(20/21)",
        4070: "分注(22/23)",
        4071: "分注(23/24)",
        4072: "分注(25/26)",
        4073: "分注(26/27)",
        4074: "分注(28/29)",
        4075: "分注(29/30)",
        4076: "分注(31/32)",
        4077: "分注(32/33)",
        4078: "分注(34/35)",
        4079: "分注(35/36)",
        4080: "分注(1/4)",
        4081: "分注(4/7)",
        4082: "分注(7/10)",
        4083: "分注(10/13)",
        4084: "分注(13/16)",
        4085: "分注(16/19)",
        4086: "分注(19/22)",
        4087: "分注(22/25)",
        4088: "分注(25/28)",
        4089: "分注(28/31)",
        4090: "分注(31/34)",
        4091: "分注(2/5)",
        4092: "分注(5/8)",
        4093: "分注(8/11)",
        4094: "分注(11/14)",
        4095: "分注(14/17)",
        4096: "分注(17/20)",
        4097: "分注(20/23)",
        4098: "分注(23/26)",
        4099: "分注(26/28)",
        4100: "分注(28/32)",
        4101: "分注(32/35)",
        4102: "分注(3/6)",
        4103: "分注(6/9)",
        4104: "分注(9/12)",
        4105: "分注(12/15)",
        4106: "分注(15/18)",
        4107: "分注(18/21)",
        4108: "分注(21/24)",
        4109: "分注(24/27)",
        4110: "分注(27/30)",
        4111: "分注(30/33)",
        4112: "分注(33/36)",
        4113: "角注(1/5)",
        4114: "角注(2/6)",
        4115: "角注(4/8)",
        4116: "角注(5/9)",
        4117: "角注(7/11)",
        4118: "角注(8/12)",
        4119: "角注(10/14)",
        4120: "角注(11/15)",
        4121: "角注(13/17)",
        4122: "角注(14/18)",
        4123: "角注(16/20)",
        4124: "角注(17/21)",
        4125: "角注(18/23)",
        4126: "角注(20/24)",
        4127: "角注(22/26)",
        4128: "角注(23/27)",
        4129: "角注(25/29)",
        4130: "角注(26/30)",
        4131: "角注(28/32)",
        4132: "角注(29/33)",
        4133: "角注(31/35)",
        4134: "角注(32/36)",
        4135: "街注(1-3)",
        4136: "街注(4-6)",
        4137: "街注(7-9)",
        4138: "街注(10-12)",
        4139: "街注(13-15)",
        4140: "街注(16-18)",
        4141: "街注(19-21)",
        4142: "街注(22-24)",
        4143: "街注(25-27)",
        4144: "街注(28-30)",
        4145: "街注(31-33)",
        4146: "街注(34-36)",
        4147: "线注(1-6)",
        4148: "线注(4-9)",
        4149: "线注(7-12)",
        4150: "线注(10-15)",
        4151: "线注(13-18)",
        4152: "线注(16-21)",
        4153: "线注(19-24)",
        4154: "线注(22-27)",
        4155: "线注(28-33)",
        4156: "线注(31-36)",
        4157: "线注(25-30)",
        5001: "闲1",
        5002: "闲2",
        5003: "闲3",
        5004: "闲4",
        5005: "闲5",
        5011: "闲1 对",
        5012: "闲2 对",
        5013: "闲3 对",
        5014: "闲4 对",
        5015: "闲5 对",
        5101: "闲1",
        5102: "闲2",
        5103: "闲3",
        5104: "闲4",
        5105: "闲5",
        5106: "庄1",
        5107: "庄2",
        5108: "庄3",
        5109: "庄4",
        5110: "庄5",
        5111: "庄对",
        6201: "安达",
        6202: "巴哈",
        6203: "1-5 张",
        6204: "6-10 张",
        6205: "11-15 张",
        6206: "16-25 张",
        6207: "26-30 张",
        6208: "31-35 张",
        6209: "36-40 张",
        6210: "41+ 张",
        6211: "安达首张",
        6212: "巴哈首张",
        6301: "A",
        6302: "B",
        6303: "和",
        6304: "A 对+",
        6305: "B 对+",
        6306: "六张彩",
        7201: "闲一 底注",
        7202: "闲一 盲注",
        7203: "闲一 边注",
        7204: "闲一 跟注 4x",
        7205: "闲一 跟注 3x",
        7206: "闲一 跟注 2x",
        7207: "闲一 跟注 1x",
        7211: "闲二 底注",
        7212: "闲二 盲注",
        7213: "闲二 边注",
        7214: "闲二 跟注 4x",
        7215: "闲二 跟注 3x",
        7216: "闲二 跟注 2x",
        7217: "闲二 跟注 1x",
        7221: "闲三 底注",
        7222: "闲三 盲注",
        7223: "闲三 边注",
        7224: "闲三 跟注 4x",
        7225: "闲三 跟注 3x",
        7226: "闲三 跟注 2x",
        7227: "闲三 跟注 1x",
        7301: "闲一 底注",
        7302: "闲一 首轮和注",
        7303: "闲一 加注",
        7304: "闲一 次轮和注",
        7311: "闲二 底注",
        7312: "闲二 首轮和注",
        7313: "闲二 加注",
        7314: "闲二 次轮和注",
        7321: "闲三 底注",
        7322: "闲三 首轮和注",
        7323: "闲三 加注",
        7324: "闲三 次轮和注",
        7401: "底注",
        7402: "加倍",
        7403: "分牌",
        7404: "对子",
        7405: "幸运三",
        7406: "烫三手",
        7407: "爆牌",
        7408: "保险",
        7409: "幸运女皇",
        8001: "庄一(平倍)",
        8002: "庄二(平倍)",
        8003: "庄三(平倍)",
        8011: "庄一(翻倍)",
        8012: "庄二(翻倍)",
        8013: "庄三(翻倍)",
        8021: "庄一(超牛)",
        8022: "庄二(超牛)",
        8023: "庄三(超牛)",
        8101: "闲一(平倍)",
        8102: "闲二(平倍)",
        8103: "闲三(平倍)",
        8111: "闲一(翻倍)",
        8112: "闲二(翻倍)",
        8113: "闲三(翻倍)",
        8121: "闲一(超牛)",
        8122: "闲二(超牛)",
        8123: "闲三(超牛)",
        9001: "龙",
        9002: "凤",
        9003: "对8以上",
        9004: "顺子",
        9005: "同花",
        9006: "同花顺",
        9007: "豹子",
        9101: "龙",
        9102: "凤",
        9103: "和",
        9114: "龙三公",
        9124: "凤三公",
        additional_result: {
            235: "豹子杀手",
            "1st_dozen": "第一打",
            "2nd_dozen": "第二打",
            "3rd_dozen": "第三打",
            big_dice: "大",
            bull_1: "牛1",
            bull_2: "牛2",
            bull_3: "牛3",
            bull_4: "牛4",
            bull_5: "牛5",
            bull_6: "牛6",
            bull_7: "牛7",
            bull_8: "牛8",
            bull_9: "牛9",
            bull_bull: "牛牛",
            double_pictures: "双公",
            even: "双",
            five_dukes: "五公",
            flush: "同花",
            four_of_a_kind: "四条",
            full_house: "葫芦",
            high_card: "散牌",
            no_bull: "无牛",
            not_qualified: "未符合牌型",
            odd: "单",
            pair: "对子",
            royal_flush: "皇家同花顺",
            single_picture: "单公",
            small_dice: "小",
            straight: "顺子",
            straight_flush: "同花顺",
            three_of_a_kind: "三条",
            triple_dice: "三骰",
            triple_pictures: "三公",
            two_pairs: "两对"
        }
    }, error_code$4 = {
        1: "服务器内部错误 [1]",
        101: "超出位置限红",
        102: "下注超出时间限制 [102]",
        103: "下注失败（超出彩池限红） [103]",
        104: "下注失败（低于位置限红)",
        404: "无法连接到伺服器，请稍后重试。",
        5e3: "未知错误 [5000]",
        5001: "请求过于频繁 [5001]",
        6e3: "网络已断开，请重新登入",
        6001: "网络异常[6001]",
        6002: "获取额度信息失败 [6002]",
        6003: "用户名或密码错误！ [6003]",
        6004: "用户被禁止登录！ [6004]",
        6005: "您没有盘口！ [6005]",
        6006: "找不到多台信息记录！ [6006]",
        6007: "找不到用户的代理商，请联系客服！ [6007]",
        6008: "您的账号在其他地方登录，请重新登入！ [6008]",
        6010: "修改密码失败 [6010]",
        6011: "密码格式错误 [6011]",
        6012: "密码不能为空 [6012]",
        6013: "密码不能超过10位字符 [6013]",
        6015: "失败！不能重复关注玩家 [6015]",
        6016: "您已经关注了20个玩家，不能再添加了 [6016]",
        6018: "桌台已关闭！ [6018]",
        6019: "桌台维护中！ [6019]",
        6020: "桌台已被独享！ [6020]",
        6021: "位置已经被使用，请选择其他位置！ [6021]",
        6022: "进桌失败！请稍后重试 [6022]",
        6023: "未能找到限红台，请重新进入 [6023]",
        6024: "未能找到游戏台，请重新进入 [6024]",
        6025: "找不到合适的位置 ！ [6025]",
        6026: "进入游戏桌失败，请重试！ [6026]",
        6027: "人数已满，请尝试其他的游戏台！ [6027]",
        6028: "您已使用其他位置在本局下注，请直接点击进入游戏！ [6028]",
        6029: "{0}已被x，您可以选择进座或旁观下注 [6029]",
        6030: "桌主已经离开了游戏！ [6030]",
        6031: "您是桌主，不能更换位置！ [6031]",
        6032: "您已使用旁观身份在本局下注，无法以进座身份进入本局！ [6032]",
        6033: "您已使用进座身份在本局下注，无法以旁观身份进入本局！ [6033]",
        6034: "游戏台未被包桌，不能进入！ [6034]",
        6035: "抱歉，您的余额不足 {0}。您可以选择旁观下注 [6035]",
        6037: "下注失败！ [6037]",
        6038: "失败！额度多次变动 [6038]",
        6039: "失败！系统繁忙 [6039]",
        6040: "连接过于频繁，请重新登录 [6040]",
        6041: "失败！找不到游戏局 [6041]",
        6042: "失败！额度不足 [6042]",
        6043: "失败！超出最大输額 [6043]",
        6044: "失败！已停止下注 [6044]",
        6045: "失败！信息错误 [6045]",
        6046: "失败！操作冲突 [6046]",
        6047: "非法下注！ [6047]",
        6048: "超过 30局后不能下 大 或 小！ [6048]",
        6049: "无效的下注！ [6049]",
        6050: "失败！超出最大限額 [6050]",
        6052: "您已经下注，不能飞牌！ [6052]",
        6053: "已经开牌，不能飞牌！ [6053]",
        6054: "游戏局未开始，不能飞牌！ [6054]",
        6055: "飞牌次数已经超过5次！ [6055]",
        6057: "荷官不在！ [6057]",
        6058: "错误操作 [6058]",
        6059: "找不到游戏桌 [6059]",
        6060: "不支持的语言！ [6060]",
        6061: "无效的操作！ [6061]",
        6062: "错误的参数！ [6062]",
        6063: "未找到该游戏厅，请重新进入 [6063]",
        6064: "系统维护！ [6064]",
        6065: "该游戏台找不到合适的限红桌或座位！ [6065]",
        6066: "不存在的游戏台！ [6066]",
        6067: "找不到游戏台，请重新进入 [6067]",
        6068: "密码错误！ [6068]",
        6069: "未下注，不能开牌！ [6069]",
        6070: "失败！您已旁观下注，请游戏局结束后再试 [6070]",
        6071: "您没有该游戏台！ [6071]",
        6072: "座位已满，请尝试旁观下注！ [6072]",
        6073: "桌主设置了密码 [6073]",
        6074: "您超过4分钟未下注已退出游戏桌({{0}}) [6074]",
        6075: "SessionID过时，请返回重新尝试 [6075]",
        6076: "SessionID错误，请返回重新尝试 [6076]",
        6077: "SessionID不能重用，请返回重新尝试 [6077]",
        6078: "您已登出游戏 [6078]",
        6079: "您所在的平台正在维护! [6079]",
        6080: "进桌失败，请重试 [6080]",
        6081: "包桌失败，请重试 [6081]",
        6082: "您的账号被禁止在当前地区登入 [6082]",
        6083: "下注失败，您已在本局使用非免佣下注。 [6083]",
        6084: "下注失败，您已在本局使用免佣下注。 [6084]",
        6085: "您当前的盘口无法进行包桌或进座，您可以选择旁观下注。 [6085]",
        6086: "密码已修改，请重新登录！ [6086]",
        6087: "新旧密码不能一致(6087) [6087]",
        6088: "您当前的VIP盘口不能进入该游戏桌，如需调整VIP盘口，请联系客服或您的上线。[6088]",
        6090: "请求超时 [6090]",
        6091: "登入失败 [6091]",
        6092: "您已登出游戏 [6092]",
        6093: "验证码错误 [6093]",
        6094: "试玩体验时间已到（15分钟），已登出游戏 [6094]",
        6095: "你在本局已验证 [6095]",
        6096: "无效的操作！ [6096]",
        6097: "验证不能在此状态下进行 [6097]",
        6098: "超过 <数字>  局后不能下庄对, 闲对, 任何对子 或 完美对子！",
        6099: "没有可领红包 [6099]",
        6100: "已领取红包 [6100]",
        6101: "活动尚未开始 [6101]",
        6102: "非法活动状态 [6102]",
        6103: "未有可打开的红包 [6103]",
        6111: "玩家已弃牌 [6111]",
        6112: "玩家已看牌 [6112]",
        6113: "非法阶段下注状态 [6113]",
        6114: "非下注状态 [6114]",
        6115: "在没有下注底注/盲注的情况下不能下注边注 [6115]",
        6116: "必须同时下注底注和盲注 [6116]",
        6117: "下注底注和盲注的注码必须相同 [6117]",
        6118: "玩家只能于首回合下注底注/盲注/边注 [6118]",
        6119: "玩家只能于次回合下注4x/3x [6119]",
        6120: "玩家只能于第三回合下注2x [6120]",
        6121: "玩家只能于最后回合下注1x [6121]",
        6122: "无效的下注额度 [6122]",
        6123: "不能在没有下注底注的情况下加注 [6123]",
        6124: "重复加注 [6124]",
        6126: "超过六回合未下注，已退出游戏桌 [6126]",
        6200: "下注回调超时，有关详情请联系客户人员 [6200]",
        6201: "下注回调超时，有关详情请联系客户人员 [6201]",
        6202: "下注回调超时，有关详情请联系客户人员 [6202]",
        6203: "下注回调超时，有关详情请联系客户人员 [6203]",
        6204: "下注回调超时，有关详情请联系客户人员 [6204]",
        100001: "上线代理商未开放您登录手机版本",
        200001: "发生错误，有关详细信息请联系客户服务，谢谢。[1000]",
        200002: "系统逾时，请重新启动游戏。[1001]",
        200003: "系统逾时，请重新启动游戏。[1002]",
        200004: "发生错误，有关详细信息请联系客户服务，谢谢。[1003]",
        200005: "发生错误，有关详细信息请联系客户服务，谢谢。[1004]",
        200006: "发生错误，有关详细信息请联系客户服务，谢谢。[1005]",
        200007: "发生错误，有关详细信息请联系客户服务，谢谢。[1006]",
        200008: "发生错误，有关详细信息请联系客户服务，谢谢。[1007]",
        200009: "发生错误，有关详细信息请联系客户服务，谢谢。[1008]",
        200011: "您的帐号已被关闭，有关详细信息请联系您的上线，谢谢。[2002]",
        200012: "发生错误，有关详细信息请联系客户服务，谢谢。[2003]",
        200013: "发生错误，有关详细信息请联系客户服务，谢谢。[3001]",
        200014: "馀额不足。[3002]",
        200015: "下注金额已超过您的下注设定，请再次下注。[3003]",
        200016: "您的帐户无法进行游戏，有关详细信息请联系您的上线，谢谢。[3004]",
        200017: "发生错误，有关详细信息请联系客户服务，谢谢。[3005]",
        200018: "达到赢取金额限度！请联系您的上线，谢谢。[3006]",
        200019: "达到损失金额限度！请联系您的上线，谢谢。[3007]",
        200020: "您的下注限度尚未设定，请联系您的上线检查您的设置。[3008]",
        200021: "您的下注限度已变更，请重新登录以使新设置生效。[3009]",
        200022: "您的帐号暂时无法下注，有关详细信息请联系您的上线，谢谢。[3010]",
        200023: "您的帐号暂时无法下注，有关详细信息请联系您的上线，谢谢。[3013]",
        200024: "本游戏暂停服务，有关详细信息请联系客户服务，谢谢。[3014]"
    }, error_msg$4 = {
        ban: "您的帐户已在其他地方登录",
        kick: "会话已过期，请重新连接！",
        processing_game_bet: "正处理你的下注，请稍候",
        quitGame: "请点击「确定」退出游戏。",
        relogin: "请点击「确定」返回登录页面",
        unknown: "网络已断开连接，请点击「确定」退出游戏。",
        connection: {connection_problem: "点击「确定」重新连接游戏。", server_connection_problem: "点击「确定」重新连接游戏。"},
        idle: {disconnected_reconnect: "点击「确定」重新连接游戏。", disconnected_to_server: "点击「确定」重新连接游戏。"}
    }, fast_bet$4 = {title: "快速下注"}, game_hall$4 = {
        banner_more_detail: "更多详情",
        feature_games: "今期推介",
        good_roads: "好路推荐",
        hot_games: "热门游戏",
        multi_play: "超级多台",
        view_all: "查看全部",
        vip_betlimit: "限红",
        vip_enter: "进入",
        vip_min_enter: "余额要求",
        vip_occupied: "已包桌",
        vip_reserve: "包桌",
        subtypes: {all: "全部", classic: "经典", insurance: "保险", quick: "快速", see: "咪牌", sexy: "性感", vip: "VIP"}
    }, game_rules$4 = {
        attention: "注意事项",
        game_rules: "游戏玩法",
        introduction: "游戏简介",
        payoff: "派彩赔率",
        title: "游戏规则"
    }, game_table$4 = {
        balanace: "帐户余额",
        deposit: "预",
        deposit_short: "预",
        total_bet: "下注总额",
        trial: "试玩",
        baccarat: {no_comm: "免佣"},
        blackjack: {
            all_side_bets: "全部边注",
            ante_first: "请先下注底注",
            banker: "庄",
            double: "加倍",
            hit: "要牌",
            insufficient_insurance: "余额不足以支付保险",
            insurance: "保险?",
            other_decison: "等待其他玩家",
            player: "闲",
            split: "分牌",
            stand: "停牌",
            instruction: {
                213: {
                    content: "玩家的初始牌和庄家的明牌组合形成特定的牌型, 例如同花顺、三条、顺子、同花",
                    title: "幸运三"
                },
                label: "边注说明",
                ante: {content: "闲家的点数比庄家的点数更接近 21 点且不超过 21 点。", title: "底注"},
                bust: {content: "庄家爆牌", title: "爆牌"},
                hot3: {content: "玩家的初始牌和庄家的明牌的牌值总计为19 - 21", title: "烫三手"},
                lucky_ladies: {content: "玩家前两张牌属于某特定牌型并总点数等于二十", title: "幸运女皇"},
                pair: {content: "玩家的初始牌是对子", title: "对子"}
            }
        },
        bullbull: {banker: "庄", banker_allwin: "庄家全胜", first_card: "头牌", player_allwin: "玩家全胜"},
        casino_war: {
            "1st_tie": "首轮和注",
            "2nd_tie": "次轮和注",
            banker: "庄",
            decision: "选择",
            player_1: "闲 1",
            player_2: "闲 2",
            player_3: "闲 3",
            surrender: "投降"
        },
        fpc: {any_two_dice: "任一为双骰", both_one_dice: "各为单骰"},
        roulette: {orphelins: "轮上孤注", tier: "轮盘下角注", voisins: "零旁注上角", zero: "轮上零旁"},
        seecard: {other_squeezing: "其他玩家正在咪牌"},
        teen_patti: {pair_plus: "对子+"},
        uth: {
            banker: "庄",
            community: "公牌",
            decision: "选择",
            play: "跟注",
            player_1: "闲 1",
            player_1_short: "闲1",
            player_2: "闲 2",
            player_2_short: "闲2",
            player_3: "闲 3",
            player_3_short: "闲3",
            raise1x: "跟注",
            raise2x: "跟注",
            raise3x: "跟注",
            raise4x: "跟注"
        },
        vip: {
            owner_squeezing: "桌主正在咪牌",
            owner_tooltip: "桌主",
            reserve_action_tooltip: "包桌",
            reserve_betlimit: "限红",
            reserve_min_enter: "余额要求",
            reserve_request: "包桌成功, 下一局您将成为桌主",
            reserved_tooltip: "已包桌",
            shuffle_request: "您的更换牌靴请求已经发送，将会在5分钟内换靴",
            shuffle_tooltip: "洗牌",
            skip_tooltip: "飞牌",
            start_tooltip: "开牌"
        }
    }, game_types$4 = {
        101: "百家乐",
        102: "VIP 百家乐 (旧)",
        103: "快速百家乐",
        104: "咪牌百家乐",
        110: "保险百家乐",
        111: "VIP 百家乐",
        201: "骰宝",
        202: "鱼虾蟹",
        203: "色碟",
        301: "龙虎",
        401: "轮盘",
        501: "经典博丁",
        602: "安达巴哈",
        603: "印度炸金花 20-20",
        702: "终极德州扑克",
        703: "赌场大战",
        704: "无限二十一点",
        801: "牛牛",
        901: "炸金花",
        "201_Alt": "HiLo",
        "201_Alt_2": "骰摊",
        "501_Alt": "庄闲博丁",
        "901_Alt": "三公",
        "901_Alt_2": "印度炸金花 20-20",
        arcadeGame: "街机",
        card_game: "电子游戏",
        cardGame: "纸牌游戏",
        classic: "经典",
        fishingGame: "AB捕鱼",
        game_hall: "游戏厅",
        multi_hall: "超级多台",
        sexy: "性感",
        slotGame: "老虎机",
        UTH_Short: "终极德州扑克"
    }, gamehall_table$4 = {
        maintaining: "维护中",
        notable: "没有桌子",
        good_road: {
            100: "长庄",
            101: "长闲",
            102: "单跳",
            103: "一闲两庄",
            104: "一庄两闲",
            105: "拍拍黐",
            106: "逢庄黐",
            107: "逢闲黐",
            108: "隔黐庄",
            109: "隔黐闲"
        }
    }, header$4 = {
        bet_record: "下注记录",
        card_game: "AB捕鱼",
        exitfullscreen: "离开全屏",
        fullscreen: "全屏",
        hot_games: "大厅",
        live_games: "真人游戏",
        logout: "退出",
        multi_table: "超级多台",
        profile: "玩家资料",
        services: "客服",
        Version: "版本"
    }, login$4 = {free_trial: "试玩", login: "登录", password: "密码", username: "用户账号"}, menu$4 = {
        addToHomeScreenForIOS: "添加到首页",
        back: "返回游戏厅",
        downloadApp: "下载 APP",
        exitfullscreen: "离开全屏",
        fast_bet: "快速下注",
        fullscreen: "全屏",
        guide: "游戏规则",
        history: "下注记录",
        installation_instruction: "安装方法",
        installPwa: "安装",
        lobby: "游戏厅",
        loginApp: "登入 APP",
        payout: "赔率",
        settings: "设置",
        title: "菜单",
        verification: "视频验证",
        video: "刷新视频"
    }, messages$4 = {
        all_in: "下注所有余额",
        bet_success: "下注成功",
        cancel: "取消",
        game_table_verified: "验证已发送，请查看屛幕上的验证结果",
        idle_video: "视频因闲置而暂停，按确定恢复",
        insufficient_bet_balance: "下注失败 额度不足",
        insufficient_vip_balance: "VIP包桌额度不足",
        landscape_block: "旋转流动装置以获得最佳体验",
        loading: "正在加载",
        logout: "确定退出 ",
        logoutOK: "退出",
        lost: "你输了",
        multi_side_hall_filter: "请至少筛选一种游戏类型",
        nickname_success: "昵称已更新",
        ok_button: "确定",
        screen_size_block: "请调整视窗大小以获得最佳体验",
        table_not_found: "未找到游戏桌",
        table_under_maintenance: "游戏桌维护中",
        won: "你赢了"
    }, payout$4 = {
        bet: "下注类型", bet_limit: "下注限红", odds: "赔率", payout: "赔率", bet_type: {
            1001: "庄",
            1002: "闲",
            1003: "和",
            1006: "庄对",
            1007: "闲对",
            1011: "庄(免佣)",
            1100: "幸运6",
            1211: "庄例牌",
            1212: "闲例牌",
            1223: "任意对子",
            1224: "完美对子",
            1231: "庄龙宝",
            1232: "闲龙宝",
            1401: "老虎",
            1402: "小老虎",
            1403: "大老虎",
            1404: "老虎对",
            1405: "老虎和",
            1501: "庄四福",
            1502: "闲四福",
            1503: "庄4福對子",
            1504: "闲4福對子",
            1601: "庄家黑",
            1602: "庄家红",
            1603: "闲家黑",
            1604: "闲家红",
            1605: "无敌6",
            2001: "龙",
            2002: "虎",
            2003: "和",
            3001: "大 / 小",
            3002: "双 / 单",
            3005: "围1~围6",
            3011: "全围",
            3012: "对子1~对子6",
            3018: "4 或 17 点",
            3019: "5 或 16 点",
            3020: "6 或 15 点",
            3021: "7 或 14 点",
            3022: "8 或 13 点",
            3023: "9, 10, 11 或 12 点",
            3033: "两颗骰子组合",
            3048: "单骰",
            3049: "双骰",
            3050: "三骰",
            3200: "HI",
            3201: "LO",
            3202: "11 HI-LO",
            3203: "骰 1 - 6",
            3209: "两颗骰子组合",
            3224: "1 LO",
            3225: "2 LO",
            3226: "3 LO",
            3227: "4 LO",
            3228: "5 - 6 LO",
            3230: "3 - 4 HI",
            3232: "5 HI",
            3233: "6 HI",
            3234: "三骰组合",
            3301: "主骰样",
            3307: "指定单色",
            3310: "指定双色",
            3313: "指定围色",
            3316: "任意围色",
            3317: "两个骰子组合",
            3401: "单/双",
            3403: "番",
            3407: "念",
            3419: "通",
            3431: "三门",
            3435: "12角 / 23角 / 34角",
            3438: "41角",
            3500: "和",
            3501: "小",
            3502: "大",
            3503: "单",
            3504: "双",
            3505: "0",
            3506: "1",
            3507: "3",
            3508: "4",
            4001: "大 / 小",
            4002: "单/双",
            4003: "红 / 黑",
            4007: "打",
            4010: "列",
            4013: "直注",
            4050: "三数",
            4052: "四数",
            4053: "分注",
            4113: "角注",
            4135: "街注",
            4147: "线注",
            5001: "闲 1-5",
            5011: "闲 1-5 对",
            5101: "闲 1-5",
            5106: "庄 1-5",
            5111: "庄对",
            6201: "安达",
            6202: "巴哈",
            6203: "1-5 张",
            6204: "6-10 张",
            6205: "11-15 张",
            6206: "16-25 张",
            6207: "26-30 张",
            6208: "31-35 张",
            6209: "36-40 张",
            6210: "41+ 张",
            6211: "安达首张",
            6212: "巴哈首张",
            6301: "玩家 A",
            6302: "玩家 B",
            6303: "和",
            6304: "A 对子+",
            6305: "B 对子+",
            6306: "六张彩",
            7201: "闲 1 - 3 底注",
            7202: "闲 1 - 3 盲注",
            7203: "闲 1 - 3 边注",
            7301: "闲 1 - 3 底注",
            7302: "闲 1 - 3 首轮和注",
            7304: "闲 1 - 3 次轮和注",
            7401: "底注",
            7404: "对子",
            7405: "幸运三",
            7406: "烫三手",
            7407: "爆牌",
            7409: "幸运女皇",
            8001: "庄 1",
            8002: "庄 2",
            8003: "庄 3",
            8011: "庄 1",
            8012: "庄 2",
            8013: "庄 3",
            8021: "庄 1",
            8022: "庄 2",
            8023: "庄 3",
            8101: "闲 1",
            8102: "闲 2",
            8103: "闲 3",
            8111: "闲 1",
            8112: "闲 2",
            8113: "闲 3",
            8121: "闲 1",
            8122: "闲 2",
            8123: "闲 3",
            9001: "龙",
            9002: "凤",
            9003: "对8以上",
            9004: "顺子",
            9005: "同花",
            9006: "同花顺",
            9007: "三条",
            9101: "龙",
            9102: "凤",
            9103: "和",
            9114: "龙三公",
            9124: "凤三公"
        }
    }, profile$4 = {
        save: "确认",
        title: "玩家资料",
        main_view: {change_password: "更改密码?", nickname: "昵称", pending: "待定"},
        password_view: {
            confirm_password: "重新输入新密码",
            current_password: "当前密码",
            hints: "请输入6-10个字母、数字组成的字符串密码",
            new_password: "新密码"
        }
    }, roadmap$4 = {
        analysis: "分析",
        history: "历史",
        last_10_rounds: "最近 10 局",
        last_50_rounds: "最近 50 局",
        last_6_rounds: "最近 6 局",
        round_num: "回合",
        statistics: "统计",
        andar_bahar: {andar: "安达", bahar: "巴哈"},
        baccarat: {banker: "庄", player: "闲", predict_banker: "庄问路", predict_player: "闲问路", tie: "和"},
        bull_bull: {
            game_hall: {
                0: "无牛",
                1: "牛1",
                2: "牛2",
                3: "牛3",
                4: "牛4",
                5: "牛5",
                6: "牛6",
                7: "牛7",
                8: "牛8",
                9: "牛9",
                A: "牛牛",
                B: "五公",
                banker: "庄",
                player_1: "闲1",
                player_2: "闲2",
                player_3: "闲3"
            },
            game_table: {
                0: "无牛",
                1: "牛1",
                2: "牛2",
                3: "牛3",
                4: "牛4",
                5: "牛5",
                6: "牛6",
                7: "牛7",
                8: "牛8",
                9: "牛9",
                A: "牛牛",
                B: "五公",
                banker: "庄",
                player_1: "闲1",
                player_2: "闲2",
                player_3: "闲3"
            }
        },
        casino_war: {banker: "庄", player_1: "闲1", player_2: "闲2", player_3: "闲3"},
        dragon_tiger: {dragon: "龙", predict_dragon: "龙问路", predict_tiger: "虎问路", tie: "和", tiger: "虎"},
        hi_lo: {hi: "HI", hi_lo: "11", lo: "LO"},
        pokdeng: {banker: "庄", player_1: "闲1", player_2: "闲2", player_3: "闲3", player_4: "闲4", player_5: "闲5"},
        roulette: {hot_cold: "热门 & 冷门"},
        sicbo: {big: "大", small: "小", triple: "围"},
        sictan: {even: "双", fan_1: "1番", fan_2: "2番", fan_3: "3番", fan_4: "4番", odd: "单"},
        teen_patti: {
            235: "235",
            flush: "同花",
            four_of_a_kind: "四条",
            full_house: "葫芦",
            high_card: "散牌",
            pair: "对子",
            pair_plus: "PAIR+",
            player_a: "A",
            player_b: "B",
            royal_flush: "皇家同花顺",
            straight: "顺子",
            straight_flush: "同花顺",
            three_of_a_kind: "三条",
            tie: "和"
        },
        three_pictures: {
            double_pictures: "双公",
            dragon: "龙",
            phoenix: "凤",
            single_picture: "单公",
            tie: "和",
            triple_pictures: "三公"
        },
        win3cards: {
            235: "豹子杀手",
            dragon: "龙",
            flush: "同花",
            high_card: "散牌",
            "p8+": "P8",
            pair: "对子",
            phoenix: "凤",
            straight: "顺子",
            straight_flush: "同花顺",
            three_of_a_kind: "豹子",
            tie: "和"
        },
        xocdia: {even: "双", odd: "单", tie: "和", big: "大", small: "小", o: "单", e: "双"}
    }, settings$4 = {
        title: "设置",
        bullbull: {
            double: "翻倍",
            equal: "平倍",
            play_type: "下注类型",
            play_type_multiplay: "下注类型 (牛牛)",
            super: "超牛"
        },
        general: {
            confirmed_bet_amounts: "筹码确认金额",
            languages: "语言",
            side_bets: "边注",
            statistics: "下注统计",
            title: "显示"
        },
        scorecards: {classic: "传统", immersive: "暗黑", title: "主题"},
        sound: {live: "环境声音", system: "系统声音", title: "声音"}
    }, side_hall_filter$4 = {
        101: "百家乐",
        103: "快速",
        104: "咪牌",
        110: "保险",
        111: "VIP",
        201: "骰宝",
        202: "鱼虾蟹",
        203: "色碟",
        301: "龙虎",
        401: "轮盘",
        501: "经典博丁",
        602: "安达巴哈",
        603: "印度炸金花 20-20",
        801: "牛牛",
        901: "炸金花",
        "201_Alt": "HiLo",
        "201_Alt_2": "骰摊",
        "501_Alt": "庄闲博丁",
        "901_Alt": "三公",
        "901_Alt_2": "印度炸金花 20-20",
        asia: "亚洲游戏",
        baccarat: "百家乐",
        classic: "经典",
        europe: "欧洲游戏",
        global: "全球游戏",
        other: "其他游戏",
        sexy: "性感"
    }, sc = {
        baccarat_gameplay: baccarat_gameplay$4,
        bet_record: bet_record$4,
        bet_type: bet_type$4,
        custom_chips: custom_chips$4,
        detailed_bet_type: detailed_bet_type$4,
        error_code: error_code$4,
        error_msg: error_msg$4,
        fast_bet: fast_bet$4,
        game_hall: game_hall$4,
        game_rules: game_rules$4,
        game_table: game_table$4,
        game_types: game_types$4,
        gamehall_table: gamehall_table$4,
        header: header$4,
        login: login$4,
        menu: menu$4,
        messages: messages$4,
        payout: payout$4,
        profile: profile$4,
        roadmap: roadmap$4,
        settings: settings$4,
        side_hall_filter: side_hall_filter$4
    }, baccarat_gameplay$3 = {
        basic: "基本",
        default: "預設",
        fabulous_4: "四福",
        natural: "例牌",
        super: "超級",
        switch: "切换玩法",
        tiger: "老虎"
    }, bet_record$3 = {
        bet_amount: "下注金額",
        bet_type: "玩法",
        betting_number: "下注編號",
        date_time: "日期時間",
        game: "遊戲",
        game_type: "遊戲類型",
        gameround_id: "局號",
        loading: "載入中",
        next: "下一頁",
        no_video: "請注意，本輪遊戲無效，不會顯示現場視頻",
        previous: "上一頁",
        shoe_round: "靴-局",
        status: "狀態",
        table_number: "桌台",
        total_bet: "下注總額",
        valid_bet: "有效下注",
        win_loss: "輸贏",
        bet_status: {100: "下注中", 101: "下注失敗", 110: "未派彩", 111: "已派彩", 120: "下注退款"},
        title: {details: "記錄細節", records: "下注記錄"}
    }, bet_type$3 = {
        1001: "莊",
        1002: "閒",
        1003: "和",
        1006: "莊對",
        1007: "閒對",
        1011: "莊",
        1100: "幸運6",
        1211: "莊例牌",
        1212: "閒例牌",
        1223: "任意對子",
        1224: "完美對子",
        1231: "莊龍寶",
        1232: "閒龍寶",
        1301: "保險",
        1302: "保險",
        1303: "保險",
        1304: "保險",
        1401: "老虎",
        1402: "小老虎",
        1403: "大老虎",
        1404: "老虎对",
        1405: "老虎和",
        1501: "莊四福",
        1502: "閒四福",
        1503: "莊4福對子",
        1504: "閒4福對子",
        1601: "莊家黑",
        1602: "莊家红",
        1603: "閒家黑",
        1604: "閒家红",
        1605: "无敌6",
        2001: "龍",
        2002: "虎",
        2003: "和",
        3001: "小",
        3002: "單",
        3003: "雙",
        3004: "大",
        3011: "全圍",
        3048: "一",
        3049: "二",
        3050: "三",
        3051: "四",
        3052: "五",
        3053: "六",
        3200: "HI",
        3201: "LO",
        3225: "LO",
        3227: "LO",
        3228: "LO",
        3229: "LO",
        3230: "HI",
        3232: "HI",
        3401: "單",
        3402: "雙",
        3403: "1 番",
        3404: "2 番",
        3405: "3 番",
        3406: "4 番",
        3407: "1念2",
        3408: "1念3",
        3409: "1念4",
        3410: "2念1",
        3411: "2念3",
        3412: "2念4",
        3413: "3念1",
        3414: "3念2",
        3415: "3念4",
        3416: "4念1",
        3417: "4念2",
        3418: "4念3",
        3419: "23一通",
        3420: "24一通",
        3421: "34一通",
        3422: "13二通",
        3423: "14二通",
        3424: "34二通",
        3425: "12三通",
        3426: "14三通",
        3427: "24三通",
        3428: "13四通",
        3429: "12四通",
        3430: "23四通",
        3431: "三門123",
        3432: "三門124",
        3433: "三門134",
        3434: "三門234",
        3435: "角12",
        3436: "角23",
        3437: "角34",
        3438: "角41",
        3500: "和",
        3501: "小",
        3502: "大",
        3503: "單",
        3504: "雙",
        4001: "1 - 18",
        4002: "雙",
        4005: "單",
        4006: "19 - 36",
        4007: "第一打",
        4008: "第二打",
        4009: "第三打",
        4010: "第一列",
        4011: "第二列",
        4012: "第三列",
        5001: "閒1",
        5002: "閒2",
        5003: "閒3",
        5004: "閒4",
        5005: "閒5",
        5011: "閒1 對",
        5012: "閒2 對",
        5013: "閒3 對",
        5014: "閒4 對",
        5015: "閒5 對",
        5101: "閒1",
        5102: "閒2",
        5103: "閒3",
        5104: "閒4",
        5105: "閒5",
        5106: "莊1",
        5107: "莊2",
        5108: "莊3",
        5109: "莊4",
        5110: "莊5",
        5111: "莊對",
        6201: "安達",
        6202: "巴哈",
        6203: "1-5",
        6204: "6-10",
        6205: "11-15",
        6206: "16-25",
        6207: "26-30",
        6208: "31-35",
        6209: "36-40",
        6210: "41+",
        6211: "安達首張",
        6212: "巴哈首張",
        6301: "玩家 A",
        6302: "玩家 B",
        6303: "和",
        6304: "A 對子+",
        6305: "B 對子+",
        6306: "六張彩",
        7201: "底注",
        7202: "盲注",
        7203: "邊注",
        7204: "跟注 4x",
        7205: "跟注 3x",
        7206: "跟注 2x",
        7207: "跟注 1x",
        7211: "底注",
        7212: "盲注",
        7213: "邊注",
        7214: "跟注 4x",
        7215: "跟注 3x",
        7216: "跟注 2x",
        7217: "跟注 1x",
        7221: "底注",
        7222: "盲注",
        7223: "邊注",
        7224: "跟注 4x",
        7225: "跟注 3x",
        7226: "跟注 2x",
        7227: "跟注 1x",
        7301: "底注",
        7302: "首輪和注",
        7303: "加注",
        7304: "次輪和注",
        7311: "底注",
        7312: "首輪和注",
        7313: "加注",
        7314: "次輪和注",
        7321: "底注",
        7322: "首輪和注",
        7323: "加注",
        7324: "次輪和注",
        7401: "底注",
        7402: "加倍下注",
        7403: "分牌",
        7404: "對子",
        7405: "幸運三",
        7406: "燙三手",
        7407: "爆牌",
        7408: "保險",
        7409: "幸運女皇",
        8001: "莊 1",
        8002: "莊 2",
        8003: "莊 3",
        8011: "莊 1",
        8012: "莊 2",
        8013: "莊 3",
        8021: "莊 1",
        8022: "莊 2",
        8023: "莊 3",
        8101: "閒 1",
        8102: "閒 2",
        8103: "閒 3",
        8111: "閒 1",
        8112: "閒 2",
        8113: "閒 3",
        8121: "閒 1",
        8122: "閒 2",
        8123: "閒 3",
        9001: "龍",
        9002: "鳳",
        9003: "對8以上",
        9004: "順子",
        9005: "同花",
        9006: "同花順",
        9007: "豹子",
        9101: "龍",
        9102: "鳳",
        9103: "和",
        9114: "龍三公",
        9124: "鳳三公",
        tips: {
            6306: "皇家同花順/同花順/四條/葫蘆/同花/順子/三條",
            9003: "包括 對 9 - 對 A / 順子 / 同花 / 同花順 / 豹子",
            banker_insurance: "莊保險下注中",
            bullbull_firstcard: "頭牌",
            cards_dealt: "發牌",
            check: "看牌",
            checked: "你已看牌",
            comm_betted: "您已在本局使用非免佣下注",
            double_text: "雙骰",
            fold: "棄牌",
            folded: "你已棄牌",
            house_card: "頭牌",
            lose: "你輸了",
            no_bet_after: "每隻靴的第%1局後不可押注%2",
            no_comm_betted: "您已在本局使用免佣下注",
            no_pairs: "每隻靴的第五十局後不可押注對子",
            player_1: "閒 1",
            player_2: "閒 2",
            player_3: "閒 3",
            player_insurance: "閒保險下注中",
            raised: "你已跟注",
            single_text: "單骰",
            surrender: "投降",
            tie: "和局",
            triple_text: "三骰",
            war: "進入戰爭",
            win: "你贏了"
        }
    }, custom_chips$3 = {
        chip_value_exists: "此籌碼值已存在。請嘗試其他值",
        choose_common_chips: "選擇常用籌碼",
        custom_chips_value: "自訂籌碼數值",
        min_chip_count: "請至少選擇5個籌碼",
        min_chip_value: "最低允許的籌碼值為",
        select_all: "全選",
        title: "自定義籌碼"
    }, detailed_bet_type$3 = {
        1001: "莊",
        1002: "閒",
        1003: "和",
        1006: "莊對",
        1007: "閒對",
        1011: "莊(免佣)",
        1100: "幸運6",
        1211: "莊例牌",
        1212: "閒例牌",
        1223: "任意對子",
        1224: "完美對子",
        1231: "莊龍寶",
        1232: "閒龍寶",
        1301: "莊保險-1",
        1302: "莊保險-2",
        1303: "閒保險-1",
        1304: "閒保險-2",
        1401: "老虎",
        1402: "小老虎",
        1403: "大老虎",
        1404: "老虎对",
        1405: "老虎和",
        1501: "莊四福",
        1502: "閒四福",
        1503: "莊4福對子",
        1504: "閒4福對子",
        1601: "莊家黑",
        1602: "莊家红",
        1603: "閒家黑",
        1604: "閒家红",
        1605: "无敌6",
        2001: "龍",
        2002: "虎",
        2003: "和",
        3001: "小",
        3002: "單",
        3003: "雙",
        3004: "大",
        3005: "圍 1",
        3006: "圍 2",
        3007: "圍 3",
        3008: "圍 4",
        3009: "圍 5",
        3010: "圍 6",
        3011: "全圍",
        3012: "對 1",
        3013: "對 2",
        3014: "對 3",
        3015: "對 4",
        3016: "對 5",
        3017: "對 6",
        3018: "和 4",
        3019: "和 5",
        3020: "和 6",
        3021: "和 7",
        3022: "和 8",
        3023: "和 9",
        3024: "和 10",
        3025: "和 11",
        3026: "和 12",
        3027: "和 13",
        3028: "和 14",
        3029: "和 15",
        3030: "和 16",
        3031: "和 17",
        3033: "兩顆骰子 1,2",
        3034: "兩顆骰子 1,3",
        3035: "兩顆骰子 1,4",
        3036: "兩顆骰子 1,5",
        3037: "兩顆骰子 1,6",
        3038: "兩顆骰子 2,3",
        3039: "兩顆骰子 2,4",
        3040: "兩顆骰子 2,5",
        3041: "兩顆骰子 2,6",
        3042: "兩顆骰子 3,4",
        3043: "兩顆骰子 3,5",
        3044: "兩顆骰子 3,6",
        3045: "兩顆骰子 4,5",
        3046: "兩顆骰子 4,6",
        3047: "兩顆骰子 5,6",
        3048: "骰 1",
        3049: "骰 2",
        3050: "骰 3",
        3051: "骰 4",
        3052: "骰 5",
        3053: "骰 6",
        3200: "Hi",
        3201: "Lo",
        3202: "11 Hi-Lo",
        3203: "骰 1",
        3204: "骰 2",
        3205: "骰 3",
        3206: "骰 4",
        3207: "骰 5",
        3208: "骰 6",
        3209: "HiLo 1-2",
        3210: "HiLo 1-3",
        3211: "HiLo 1-4",
        3212: "HiLo 1-5",
        3213: "HiLo 1-6",
        3214: "HiLo 2-3",
        3215: "HiLo 2-4",
        3216: "HiLo 2-5",
        3217: "HiLo 2-6",
        3218: "HiLo 3-4",
        3219: "HiLo 3-5",
        3220: "HiLo 3-6",
        3221: "HiLo 4-5",
        3222: "HiLo 4-6",
        3223: "HiLo 5-6",
        3224: "1-Lo",
        3225: "2-Lo",
        3226: "3-Lo",
        3227: "4-Lo",
        3228: "5-Lo",
        3229: "6-Lo",
        3230: "3-Hi",
        3231: "4-Hi",
        3232: "5-Hi",
        3233: "6-Hi",
        3234: "1,2,3",
        3235: "2,3,4",
        3236: "3,4,5",
        3237: "4,5,6",
        3301: "魚",
        3302: "蝦",
        3303: "葫蘆",
        3304: "金錢",
        3305: "蟹",
        3306: "雞",
        3307: "指定單紅",
        3308: "指定單綠",
        3309: "指定單藍",
        3310: "指定二粒紅",
        3311: "指定二粒綠",
        3312: "指定二粒藍",
        3313: "指定三粒紅",
        3314: "指定三粒綠",
        3315: "指定三粒藍",
        3316: "任意圍色",
        3317: "葫蘆 & 蝦",
        3318: "葫蘆 & 魚",
        3319: "葫蘆 & 雞",
        3320: "葫蘆 & 蟹",
        3321: "葫蘆 & 金錢",
        3322: "蝦 & 魚",
        3323: "蝦 & 雞",
        3324: "蝦 & 蟹",
        3325: "蝦 & 金錢",
        3326: "魚 & 雞",
        3327: "魚 & 蟹",
        3328: "魚 & 金錢",
        3329: "雞 & 蟹",
        3330: "雞 & 金錢",
        3331: "蟹 & 金錢",
        3401: "單",
        3402: "雙",
        3403: "1番",
        3404: "2番",
        3405: "3番",
        3406: "4番",
        3407: "1念2",
        3408: "1念3",
        3409: "1念4",
        3410: "2念1",
        3411: "2念3",
        3412: "2念4",
        3413: "3念1",
        3414: "3念2",
        3415: "3念4",
        3416: "4念1",
        3417: "4念2",
        3418: "4念3",
        3419: "23一通",
        3420: "24一通",
        3421: "34一通",
        3422: "13二通",
        3423: "14二通",
        3424: "34二通",
        3425: "12三通",
        3426: "14三通",
        3427: "24三通",
        3428: "13四通",
        3429: "12四通",
        3430: "23四通",
        3431: "123三門",
        3432: "124三門",
        3433: "134三門",
        3434: "234三門",
        3435: "12角",
        3436: "23角",
        3437: "34角",
        3438: "41角",
        3500: "和",
        3501: "小",
        3502: "大",
        3503: "單",
        3504: "雙",
        3505: "0",
        3506: "1",
        3507: "3",
        3508: "4",
        4001: "小",
        4002: "雙",
        4003: "紅",
        4004: "黑",
        4005: "單",
        4006: "大",
        4007: "第一打",
        4008: "第二打",
        4009: "第三打",
        4010: "第一列",
        4011: "第二列",
        4012: "第三列",
        4013: "直注 0",
        4014: "直注 1",
        4015: "直注 2",
        4016: "直注 3",
        4017: "直注 4",
        4018: "直注 5",
        4019: "直注 6",
        4020: "直注 7",
        4021: "直注 8",
        4022: "直注 9",
        4023: "直注 10",
        4024: "直注 11",
        4025: "直注 12",
        4026: "直注 13",
        4027: "直注 14",
        4028: "直注 15",
        4029: "直注 16",
        4030: "直注 17",
        4031: "直注 18",
        4032: "直注 19",
        4033: "直注 20",
        4034: "直注 21",
        4035: "直注 22",
        4036: "直注 23",
        4037: "直注 24",
        4038: "直注 25",
        4039: "直注 26",
        4040: "直注 27",
        4041: "直注 28",
        4042: "直注 29",
        4043: "直注 30",
        4044: "直注 31",
        4045: "直注 32",
        4046: "直注 33",
        4047: "直注 34",
        4048: "直注 35",
        4049: "直注 36",
        4050: "三數 0/1/2",
        4051: "三數 0/2/3",
        4052: "三數 0/1/2/3",
        4053: "分注(0/1)",
        4054: "分注(0/2)",
        4055: "分注(0/3)",
        4056: "分注(1/2)",
        4057: "分注(2/3)",
        4058: "分注(4/5)",
        4059: "分注(5/6)",
        4060: "分注(7/8)",
        4061: "分注(8/9)",
        4062: "分注(10/11)",
        4063: "分注(11/12)",
        4064: "分注(13/14)",
        4065: "分注(14/15)",
        4066: "分注(16/17)",
        4067: "分注(17/18)",
        4068: "分注(19/20)",
        4069: "分注(20/21)",
        4070: "分注(22/23)",
        4071: "分注(23/24)",
        4072: "分注(25/26)",
        4073: "分注(26/27)",
        4074: "分注(28/29)",
        4075: "分注(29/30)",
        4076: "分注(31/32)",
        4077: "分注(32/33)",
        4078: "分注(34/35)",
        4079: "分注(35/36)",
        4080: "分注(1/4)",
        4081: "分注(4/7)",
        4082: "分注(7/10)",
        4083: "分注(10/13)",
        4084: "分注(13/16)",
        4085: "分注(16/19)",
        4086: "分注(19/22)",
        4087: "分注(22/25)",
        4088: "分注(25/28)",
        4089: "分注(28/31)",
        4090: "分注(31/34)",
        4091: "分注(2/5)",
        4092: "分注(5/8)",
        4093: "分注(8/11)",
        4094: "分注(11/14)",
        4095: "分注(14/17)",
        4096: "分注(17/20)",
        4097: "分注(20/23)",
        4098: "分注(23/26)",
        4099: "分注(26/28)",
        4100: "分注(28/32)",
        4101: "分注(32/35)",
        4102: "分注(3/6)",
        4103: "分注(6/9)",
        4104: "分注(9/12)",
        4105: "分注(12/15)",
        4106: "分注(15/18)",
        4107: "分注(18/21)",
        4108: "分注(21/24)",
        4109: "分注(24/27)",
        4110: "分注(27/30)",
        4111: "分注(30/33)",
        4112: "分注(33/36)",
        4113: "角注(1/5)",
        4114: "角注(2/6)",
        4115: "角注(4/8)",
        4116: "角注(5/9)",
        4117: "角注(7/11)",
        4118: "角注(8/12)",
        4119: "角注(10/14)",
        4120: "角注(11/15)",
        4121: "角注(13/17)",
        4122: "角注(14/18)",
        4123: "角注(16/20)",
        4124: "角注(17/21)",
        4125: "角注(18/23)",
        4126: "角注(20/24)",
        4127: "角注(22/26)",
        4128: "角注(23/27)",
        4129: "角注(25/29)",
        4130: "角注(26/30)",
        4131: "角注(28/32)",
        4132: "角注(29/33)",
        4133: "角注(31/35)",
        4134: "角注(32/36)",
        4135: "街注(1-3)",
        4136: "街注(4-6)",
        4137: "街注(7-9)",
        4138: "街注(10-12)",
        4139: "街注(13-15)",
        4140: "街注(16-18)",
        4141: "街注(19-21)",
        4142: "街注(22-24)",
        4143: "街注(25-27)",
        4144: "街注(28-30)",
        4145: "街注(31-33)",
        4146: "街注(34-36)",
        4147: "綫注(1-6)",
        4148: "綫注(4-9)",
        4149: "綫注(7-12)",
        4150: "綫注(10-15)",
        4151: "綫注(13-18)",
        4152: "綫注(16-21)",
        4153: "綫注(19-24)",
        4154: "綫注(22-27)",
        4155: "綫注(28-33)",
        4156: "綫注(31-36)",
        4157: "綫注(25-30)",
        5001: "閒1",
        5002: "閒2",
        5003: "閒3",
        5004: "閒4",
        5005: "閒5",
        5011: "閒1 對",
        5012: "閒2 對",
        5013: "閒3 對",
        5014: "閒4 對",
        5015: "閒5 對",
        5101: "閒1",
        5102: "閒2",
        5103: "閒3",
        5104: "閒4",
        5105: "閒5",
        5106: "莊1",
        5107: "莊2",
        5108: "莊3",
        5109: "莊4",
        5110: "莊5",
        5111: "莊對",
        6201: "安達",
        6202: "巴哈",
        6203: "1-5 張",
        6204: "6-10 張",
        6205: "11-15 張",
        6206: "16-25 張",
        6207: "26-30 張",
        6208: "31-35 張",
        6209: "36-40 張",
        6210: "41+ 張",
        6211: "安達首張",
        6212: "巴哈首張",
        6301: "A",
        6302: "B",
        6303: "和",
        6304: "A 對+",
        6305: "B 對+",
        6306: "六張彩",
        7201: "閒一 底注",
        7202: "閒一 盲注",
        7203: "閒一 邊注",
        7204: "閒一 跟注 4x",
        7205: "閒一 跟注 3x",
        7206: "閒一 跟注 2x",
        7207: "閒一 跟注 1x",
        7211: "閒二 底注",
        7212: "閒二 盲注",
        7213: "閒二 邊注",
        7214: "閒二 跟注 4x",
        7215: "閒二 跟注 3x",
        7216: "閒二 跟注 2x",
        7217: "閒二 跟注 1x",
        7221: "閒三 底注",
        7222: "閒三 盲注",
        7223: "閒三 邊注",
        7224: "閒三 跟注 4x",
        7225: "閒三 跟注 3x",
        7226: "閒三 跟注 2x",
        7227: "閒三 跟注 1x",
        7301: "閒一 底注",
        7302: "閒一 首輪和注",
        7303: "閒一 加注",
        7304: "閒一 次輪和注",
        7311: "閒二 底注",
        7312: "閒二 首輪和注",
        7313: "閒二 加注",
        7314: "閒二 次輪和注",
        7321: "閒三 底注",
        7322: "閒三 首輪和注",
        7323: "閒三 加注",
        7324: "閒三 次輪和注",
        7401: "底注",
        7402: "加倍",
        7403: "分牌",
        7404: "對子",
        7405: "幸運三",
        7406: "燙三手",
        7407: "爆牌",
        7408: "保險",
        7409: "幸運女皇",
        8001: "莊一(平倍)",
        8002: "莊二(平倍)",
        8003: "莊三(平倍)",
        8011: "莊一(翻倍)",
        8012: "莊二(翻倍)",
        8013: "莊三(翻倍)",
        8021: "莊一(超牛)",
        8022: "莊二(超牛)",
        8023: "莊三(超牛)",
        8101: "閒一(平倍)",
        8102: "閒二(平倍)",
        8103: "閒三(平倍)",
        8111: "閒一(翻倍)",
        8112: "閒二(翻倍)",
        8113: "閒三(翻倍)",
        8121: "閒一(超牛)",
        8122: "閒二(超牛)",
        8123: "閒三(超牛)",
        9001: "龍",
        9002: "鳳",
        9003: "對8以上",
        9004: "順子",
        9005: "同花",
        9006: "同花順",
        9007: "豹子",
        9101: "龍",
        9102: "鳳",
        9103: "和",
        9114: "龍三公",
        9124: "鳳三公",
        additional_result: {
            235: "豹子殺手",
            "1st_dozen": "第一打",
            "2nd_dozen": "第二打",
            "3rd_dozen": "第三打",
            big_dice: "大",
            bull_1: "牛1",
            bull_2: "牛2",
            bull_3: "牛3",
            bull_4: "牛4",
            bull_5: "牛5",
            bull_6: "牛6",
            bull_7: "牛7",
            bull_8: "牛8",
            bull_9: "牛9",
            bull_bull: "牛牛",
            double_pictures: "雙公",
            even: "雙",
            five_dukes: "五公",
            flush: "同花",
            four_of_a_kind: "四條",
            full_house: "葫蘆",
            high_card: "散牌",
            no_bull: "無牛",
            not_qualified: "未符合牌型",
            odd: "單",
            pair: "對子",
            royal_flush: "皇家同花順",
            single_picture: "單公",
            small_dice: "小",
            straight: "順子",
            straight_flush: "同花順",
            three_of_a_kind: "三條",
            triple_dice: "三骰",
            triple_pictures: "三公",
            two_pairs: "兩對"
        }
    }, error_code$3 = {
        1: "服務器內部錯誤 [1]",
        101: "超出位置限紅",
        102: "下注超出時間限制 [102]",
        103: "下注失敗（超出彩池限紅） [103]",
        104: "下注失敗（低於位置限紅)",
        404: "無法連線到伺服器，請稍後重試。",
        5e3: "未知錯誤 [5000]",
        5001: "請求過於頻繁 [5001]",
        6e3: "網路已斷開, 請重新登入",
        6001: "網絡異常[6001]",
        6002: "獲取額度信息失敗 [6002]",
        6003: "用戶名或密碼錯誤！ [6003]",
        6004: "用戶被禁止登錄！ [6004]",
        6005: "您沒有盤口！ [6005]",
        6006: "找不到多檯信息記錄！ [6006]",
        6007: "找不到用戶的代理商，請聯繫客服！ [6007]",
        6008: "您的賬號在其他地方登錄, 請重新登入！ [6008]",
        6010: "修改密碼失敗 [6010]",
        6011: "密碼格式錯誤 [6011]",
        6012: "密碼不能為空 [6012]",
        6013: "密碼不能超過10位字符！ [6013]",
        6015: "失敗！不能重複關注玩家 [6015]",
        6016: "您已經關注了20個玩家，不能再添加了 [6016]",
        6018: "桌臺已經關閉！ [6018]",
        6019: "桌檯維護中！ [6019]",
        6020: "桌檯已被獨享！ [6020]",
        6021: "位置已經被使用，請選擇其他位置！ [6021]",
        6022: "進桌失敗！請稍後重試 [6022]",
        6023: "未能找到限紅檯，請重新進入 [6023]",
        6024: "未能找到遊戲檯，請重新進入 [6024]",
        6025: "找不到合適的位置！ [6025]",
        6026: "進入遊戲桌失敗，請重試！ [6026]",
        6027: "人數已滿，請嘗試其他的游戲檯！ [6027]",
        6028: "您已使用其他位置在本局下注，請直接點擊進入遊戲！ [6028]",
        6029: "{0}已被包桌，您可以選擇進桌或旁觀下注 [6029]",
        6030: "桌主已經離開了遊戲！ [6030]",
        6031: "您是桌主，不能更換位置！ [6031]",
        6032: "您已使用旁觀身份在本局下注，無法以進座身份進入本局！ [6032]",
        6033: "您已使用進座身份在本局下注，無法以旁觀身份進入本局！ [6033]",
        6034: "遊戲檯未被包桌，不能進入！ [6034]",
        6035: "抱歉，您的餘額不足{0}。您可以選擇旁觀下注 [6035]",
        6037: "下注失敗！ [6037]",
        6038: "失敗！額度多次變動 [6038]",
        6039: "失敗！系統繁忙 [6039]",
        6040: "連接過於過度，請重新登錄 [6040]",
        6041: "失敗！找不到遊戲局 [6041]",
        6042: "失敗！額度不足 [6042]",
        6043: "失敗！超出最大輸額 [6043]",
        6044: "失敗！已停止下注 [6044]",
        6045: "失敗！信息錯誤 [6045]",
        6046: "失敗！操作衝突 [6046]",
        6047: "非法下注！ [6047]",
        6048: "超過 30局后不能下 大 或 小！ [6048]",
        6049: "無效的下注！ [6049]",
        6050: "失敗！超出最大限額！ [6050]",
        6052: "您已經下注，不能飛牌！ [6052]",
        6053: "已經開牌，不能飛牌！ [6053]",
        6054: "遊戲局未開始，不能飛牌！ [6054]",
        6055: "飛牌次數已經超過5次！ [6055]",
        6057: "荷官不在！ [6057]",
        6058: "錯誤操作 [6058]",
        6059: "找不到遊戲桌 [6059]",
        6060: "不支持的語言！ [6060]",
        6061: "無效的操作！ [6061]",
        6062: "錯誤的參數！ [6062]",
        6063: "未找到該遊戲廳，請重新進入 [6063]",
        6064: "系統維護！ [6064]",
        6065: "該遊戲檯找不到合適的限紅桌或座位！ [6065]",
        6066: "不存在的遊戲檯！ [6066]",
        6067: "找不到遊戲檯，請重新進入 [6067]",
        6068: "密碼錯誤！ [6068]",
        6069: "未下注，不能開牌！ [6069]",
        6070: "失敗！您已旁觀下注，請遊戲局結束後再試 [6070]",
        6071: "您沒有該遊戲檯！ [6071]",
        6072: "座位已滿，請嘗試旁觀下注！ [6072]",
        6073: "桌主設置了密碼 [6073]",
        6074: "您超過4分鐘未下注已退出遊戲桌({{0}}) [6074]",
        6075: "SessionID過時，請返回重新嘗試 [6075]",
        6076: "SessionID錯誤，請返回重新嘗試 [6076]",
        6077: "SessionID不能重用，請返回重新嘗試 [6077]",
        6078: "您已登出遊戲[6078]",
        6079: "您所在的平臺正在維護! [6079]",
        6080: "進桌失敗，請重試 [6080]",
        6081: "包桌失敗，請重試 [6081]",
        6082: "您的賬號被禁止在當前地區登入 [6082]",
        6083: "下注失敗，您已在本局使用非免佣下注。 [6083]",
        6084: "下注失敗，您已在本局使用免佣下注。 [6084]",
        6085: "您當前的盤口無法進行包桌或進座，您可以選擇旁觀下注！ [6085]",
        6086: "密碼已修改，請重新登錄！ [6086]",
        6087: "新舊密碼不能一致(6087) [6087]",
        6088: "您當前的VIP盤口不能進入該遊戲桌，如需調整VIP盤口，請聯繫客服或您的上線。 [6088]",
        6090: "請求超時 [6090]",
        6091: "登入失敗 [6091]",
        6092: "您已登出遊戲[6092]",
        6093: "驗證碼錯誤[6093]",
        6094: "試玩體驗時間已到（15分鐘），已登出遊戲 [6094]",
        6095: "你在本局已驗證[6095]",
        6096: "無效的操作！ [6096]",
        6097: "驗證不能在此狀態下進行 [6097]",
        6098: "超過 <數字> 局後不能下莊對, 閒對, 任何對子 或 完美對子！",
        6099: "沒有可領紅包 [6099]",
        6100: "已領取紅包 [6100]",
        6101: "活動尚未開始 [6101]",
        6102: "非法活動狀態 [6102]",
        6103: "未有可打開的紅包 [6103]",
        6111: "玩家已棄牌 [6111]",
        6112: "玩家已看牌 [6112]",
        6113: "非法階段下注狀態 [6113]",
        6114: "非下注狀態 [6114]",
        6115: "在沒有下注底注/盲注的情況下不能下注邊注 [6115]",
        6116: "必須同時下注底注和盲注 [6116]",
        6117: "下注底注和盲注的注碼必須相同 [6117]",
        6118: "玩家只能於首回合下注底注/盲注/邊注 [6118]",
        6119: "玩家只能於次回合下注4x/3x [6119]",
        6120: "玩家只能於第三回合下注2x [6120]",
        6121: "玩家只能於最後回合下注1x [6121]",
        6122: "無效的下注額度 [6122]",
        6123: "不能在沒有下注底注的情況下加注 [6123]",
        6124: "重複加注 [6124]",
        6126: "超過六回合未下注，已退出遊戲桌 [6126]",
        6200: "下注回調超時，有關詳情請聯繫客戶人員 [6200]",
        6201: "下注回調超時，有關詳情請聯繫客戶人員 [6201]",
        6202: "下注回調超時，有關詳情請聯繫客戶人員 [6202]",
        6203: "下注回調超時，有關詳情請聯繫客戶人員 [6203]",
        6204: "下注回調超時，有關詳情請聯繫客戶人員 [6204]",
        100001: "上線代理商未開放您登錄手機版本",
        200001: "發生錯誤，有關詳細訊息請聯繫客戶服務，謝謝。[1000]",
        200002: "系統逾時，請重新啟動遊戲。[1001]",
        200003: "系統逾時，請重新啟動遊戲。[1002]",
        200004: "發生錯誤，有關詳細訊息請聯繫客戶服務，謝謝。[1003]",
        200005: "發生錯誤，有關詳細訊息請聯繫客戶服務，謝謝。[1004]",
        200006: "發生錯誤，有關詳細訊息請聯繫客戶服務，謝謝。[1005]",
        200007: "發生錯誤，有關詳細訊息請聯繫客戶服務，謝謝。[1006]",
        200008: "發生錯誤，有關詳細訊息請聯繫客戶服務，謝謝。[1007]",
        200009: "發生錯誤，有關詳細訊息請聯繫客戶服務，謝謝。[1008]",
        200011: "您的賬號已被關閉，有關詳細訊息請聯繫您的上線，謝謝。[2002]",
        200012: "發生錯誤，有關詳細訊息請聯繫客戶服務，謝謝。[2003]",
        200013: "發生錯誤，有關詳細訊息請聯繫客戶服務，謝謝。[3001]",
        200014: "餘額不足。[3002]",
        200015: "下注金額已超過您的下注設定，請再次下注。[3003]",
        200016: "您的賬戶無法進行遊戲，有關詳細訊息請聯繫您的上線，謝謝。[3004]",
        200017: "發生錯誤，有關詳細訊息請聯繫客戶服務，謝謝。[3005]",
        200018: "贏取額度！請聯絡您的上手。[3006]",
        200019: "輸掉額度！請聯絡您的上手。[3007]",
        200020: "您的下注限額未設定，請聯絡您的上線確認設定。[3008]",
        200021: "您的下注限額已更改，請再重新登入讓新設定生效。[3009]",
        200022: "您的賬號暫時無法下注，有關詳細訊息請聯絡您的上線，謝謝。[3010]",
        200023: "您的賬號暫時無法下注，有關詳細訊息請聯絡您的上線，謝謝。[3013]",
        200024: "本遊戲暫停服務，有關詳細訊息請聯繫客戶服務，謝謝。[3014]"
    }, error_msg$3 = {
        ban: "您的帳戶已在其他地方登錄",
        kick: "會話已過期，請重新連接！",
        processing_game_bet: "正處理你的下注，請稍候",
        quitGame: "請點擊“確定”退出遊戲。",
        relogin: "請點選「確定」返回登錄頁面",
        unknown: "網路已斷開連接，請點擊「確定」退出遊戲。",
        connection: {connection_problem: "點擊“確定”重新連接遊戲。", server_connection_problem: "點擊“確定”重新連接遊戲。"},
        idle: {disconnected_reconnect: "點擊“確定”重新連接遊戲。", disconnected_to_server: "點擊“確定”重新連接遊戲。"}
    }, fast_bet$3 = {title: "快速下注"}, game_hall$3 = {
        banner_more_detail: "更多詳情",
        feature_games: "今期推介",
        good_roads: "好路推薦",
        hot_games: "熱門遊戲",
        multi_play: "超級多台",
        view_all: "查看全部",
        vip_betlimit: "限紅",
        vip_enter: "進入",
        vip_min_enter: "餘額要求",
        vip_occupied: "已包桌",
        vip_reserve: "包桌",
        subtypes: {all: "全部", classic: "經典", insurance: "保險", quick: "快速", see: "咪牌", sexy: "性感", vip: "VIP"}
    }, game_rules$3 = {
        attention: "注意事項",
        game_rules: "遊戲玩法",
        introduction: "遊戲簡介",
        payoff: "派彩賠率",
        title: "遊戲規則"
    }, game_table$3 = {
        balanace: "帳戶餘額",
        deposit: "預",
        deposit_short: "預",
        total_bet: "下注總額",
        trial: "試玩",
        baccarat: {no_comm: "免佣"},
        blackjack: {
            all_side_bets: "全部邊注",
            ante_first: "請先下注底注",
            banker: "莊",
            double: "加倍",
            hit: "要牌",
            insufficient_insurance: "餘額不足以支付保險",
            insurance: "保險?",
            other_decison: "等待其他玩家",
            player: "閒",
            split: "分牌",
            stand: "停牌",
            instruction: {
                213: {
                    content: "玩家的初始牌和莊家的明牌組合形成特定的牌型, 例如同花順、三條、順子、同花",
                    title: "幸運三"
                },
                label: "邊注說明",
                ante: {content: "閒家的點數比莊家的點數更接近 21 點且不超過 21 點。", title: "底注"},
                bust: {content: "莊家爆牌", title: "爆牌"},
                hot3: {content: "玩家的初始牌和莊家的明牌的牌值總計為19 - 21", title: "燙三手"},
                lucky_ladies: {content: "玩家前兩張牌屬於某特定牌型並總點數等於二十", title: "幸運女皇"},
                pair: {content: "玩家的初始牌是對子", title: "對子"}
            }
        },
        bullbull: {banker: "莊", banker_allwin: "莊家全勝", first_card: "頭牌", player_allwin: "玩家全勝"},
        casino_war: {
            "1st_tie": "首輪和注",
            "2nd_tie": "次輪和注",
            banker: "莊",
            decision: "選擇",
            player_1: "閒 1",
            player_2: "閒 2",
            player_3: "閒 3",
            surrender: "投降"
        },
        fpc: {any_two_dice: "任一為雙骰", both_one_dice: "各為單骰"},
        roulette: {orphelins: "輪上孤注", tier: "輪盤下角注", voisins: "零旁注上角", zero: "輪上零旁"},
        seecard: {other_squeezing: "其他玩家正在咪牌"},
        teen_patti: {pair_plus: "對子+"},
        uth: {
            banker: "莊",
            community: "公牌",
            decision: "選擇",
            play: "跟注",
            player_1: "閒 1",
            player_1_short: "閒1",
            player_2: "閒 2",
            player_2_short: "閒2",
            player_3: "閒 3",
            player_3_short: "閒3",
            raise1x: "跟注",
            raise2x: "跟注",
            raise3x: "跟注",
            raise4x: "跟注"
        },
        vip: {
            owner_squeezing: "桌主正在咪牌",
            owner_tooltip: "桌主",
            reserve_action_tooltip: "包桌",
            reserve_betlimit: "限紅",
            reserve_min_enter: "餘額要求",
            reserve_request: "包桌成功, 下一局您將成為桌主",
            reserved_tooltip: "已包桌",
            shuffle_request: "您的更換牌靴請求已經發送, 將會在5分鐘內換靴",
            shuffle_tooltip: "洗牌",
            skip_tooltip: "飛牌",
            start_tooltip: "開牌"
        }
    }, game_types$3 = {
        101: "百家樂",
        102: "VIP 百家樂 (舊)",
        103: "快速百家樂",
        104: "咪牌百家樂",
        110: "保險百家樂",
        111: "VIP 百家樂",
        201: "骰寶",
        202: "魚蝦蟹",
        203: "色碟",
        301: "龍虎",
        401: "輪盤",
        501: "經典博丁",
        602: "安達巴哈",
        603: "印度炸金花 20-20",
        702: "終極德州撲克",
        703: "賭場大戰",
        704: "無限二十一點",
        801: "牛牛",
        901: "炸金花",
        "201_Alt": "HiLo",
        "201_Alt_2": "骰攤",
        "501_Alt": "莊閒博丁",
        "901_Alt": "三公",
        "901_Alt_2": "印度炸金花 20-20",
        arcadeGame: "街機",
        card_game: "電子遊戲",
        cardGame: "紙牌遊戲",
        classic: "經典",
        fishingGame: "AB捕魚",
        game_hall: "遊戲廳",
        multi_hall: "超級多台",
        sexy: "性感",
        slotGame: "老虎機",
        UTH_Short: "終極德州撲克"
    }, gamehall_table$3 = {
        maintaining: "維護中",
        notable: "沒有桌子",
        good_road: {
            100: "長莊",
            101: "長閒",
            102: "單跳",
            103: "一閒兩莊",
            104: "一莊兩閒",
            105: "拍拍黐",
            106: "逢莊黐",
            107: "逢閒黐",
            108: "隔黐莊",
            109: "隔黐閒"
        }
    }, header$3 = {
        bet_record: "下注記錄",
        card_game: "AB捕魚",
        exitfullscreen: "離開全螢幕",
        fullscreen: "全螢幕",
        hot_games: "大廳",
        live_games: "真人遊戲",
        logout: "退出",
        multi_table: "超級多台",
        profile: "玩家資料",
        services: "客服",
        Version: "版本"
    }, login$3 = {free_trial: "試玩", login: "登錄", password: "密碼", username: "用戶帳號"}, menu$3 = {
        addToHomeScreenForIOS: "新增到首頁",
        back: "返回遊戲廳",
        downloadApp: "下載 APP",
        exitfullscreen: "離開全螢幕",
        fast_bet: "快速下注",
        fullscreen: "全螢幕",
        guide: "遊戲規則",
        history: "下注記錄",
        installation_instruction: "安裝方法",
        installPwa: "安裝",
        lobby: "遊戲廳",
        loginApp: "登入 APP",
        payout: "賠率",
        settings: "設定",
        title: "選單",
        verification: "視頻驗証",
        video: "重新整理影片"
    }, messages$3 = {
        all_in: "下注所有餘額",
        bet_success: "下注成功",
        cancel: "取消",
        game_table_verified: "驗証已發送，請查看屛幕上的驗證結果",
        idle_video: "視頻因閒置而暫停， 按確定恢復",
        insufficient_bet_balance: "下注失敗 額度不足",
        insufficient_vip_balance: "VIP包桌額度不足",
        landscape_block: "旋轉流動裝置以獲得最佳體驗",
        loading: "正在加載",
        logout: "確定退出",
        logoutOK: "退出",
        lost: "你輸了",
        multi_side_hall_filter: "請至少篩選一種遊戲類型。",
        nickname_success: "暱稱已更新",
        ok_button: "確定",
        screen_size_block: "請調整視窗大小以獲得最佳體驗",
        table_not_found: "未找到遊戲桌",
        table_under_maintenance: "遊戲桌維護中",
        won: "你贏了"
    }, payout$3 = {
        bet: "下注類型", bet_limit: "下注限紅", odds: "賠率", payout: "賠率", bet_type: {
            1001: "莊",
            1002: "閒",
            1003: "和",
            1006: "莊對",
            1007: "閒對",
            1011: "莊(免佣)",
            1100: "幸運6",
            1211: "莊例牌",
            1212: "閒例牌",
            1223: "任意對子",
            1224: "完美對子",
            1231: "莊龍寶",
            1232: "閒龍寶",
            1401: "老虎",
            1402: "小老虎",
            1403: "大老虎",
            1404: "老虎对",
            1405: "老虎和",
            1501: "莊四福",
            1502: "閒四福",
            1503: "莊4福對子",
            1504: "閒4福對子",
            1601: "莊家黑",
            1602: "莊家红",
            1603: "閒家黑",
            1604: "閒家红",
            1605: "无敌6",
            2001: "龍",
            2002: "虎",
            2003: "和",
            3001: "大 / 小",
            3002: "雙 / 單",
            3005: "圍1~圍6",
            3011: "全圍",
            3012: "對子1~對子6",
            3018: "4 或 17 點",
            3019: "5 或 16 點",
            3020: "6 或 15 點",
            3021: "7 或 14 點",
            3022: "8 或 13 點",
            3023: "9, 10, 11 或 12 點",
            3033: "兩個骰子組合",
            3048: "單骰",
            3049: "雙骰",
            3050: "三骰",
            3200: "HI",
            3201: "LO",
            3202: "11 HI-LO",
            3203: "骰 1 - 6",
            3209: "兩個骰子組合",
            3224: "1 LO",
            3225: "2 LO",
            3226: "3 LO",
            3227: "4 LO",
            3228: "5 - 6 LO",
            3230: "3 - 4 HI",
            3232: "5 HI",
            3233: "6 HI",
            3234: "三骰組合",
            3301: "主骰樣",
            3307: "指定單色",
            3310: "指定雙色",
            3313: "指定圍色",
            3316: "任意圍色",
            3317: "兩個骰子組合",
            3401: "單/雙",
            3403: "番",
            3407: "念",
            3419: "通",
            3431: "三門",
            3435: "12角 / 23角 / 34角",
            3438: "41角",
            3500: "和",
            3501: "小",
            3502: "大",
            3503: "單",
            3504: "雙",
            3505: "0",
            3506: "1",
            3507: "3",
            3508: "4",
            4001: "大 / 小",
            4002: "單/雙",
            4003: "紅 / 黑",
            4007: "打",
            4010: "列",
            4013: "直注",
            4050: "三數",
            4052: "四數",
            4053: "分注",
            4113: "角注",
            4135: "街注",
            4147: "綫注",
            5001: "閒 1-5",
            5011: "閒 1-5 對",
            5101: "閒 1-5",
            5106: "莊 1-5",
            5111: "莊對",
            6201: "安達",
            6202: "巴哈",
            6203: "1-5 張",
            6204: "6-10 張",
            6205: "11-15 張",
            6206: "16-25 張",
            6207: "26-30 張",
            6208: "31-35 張",
            6209: "36-40 張",
            6210: "41+ 張",
            6211: "安達首張",
            6212: "巴哈首張",
            6301: "玩家 A",
            6302: "玩家 B",
            6303: "和",
            6304: "A 對子+",
            6305: "B 對子+",
            6306: "六張彩",
            7201: "閒 1 - 3 底注",
            7202: "閒 1 - 3 盲注",
            7203: "閒 1 - 3 邊注",
            7301: "閒 1 - 3 底注",
            7302: "閒 1 - 3 首輪和注",
            7304: "閒 1 - 3 次輪和注",
            7401: "底注",
            7404: "對子",
            7405: "幸運三",
            7406: "燙三手",
            7407: "爆牌",
            7409: "幸運女皇",
            8001: "莊 1",
            8002: "莊 2",
            8003: "莊 3",
            8011: "莊 1",
            8012: "莊 2",
            8013: "莊 3",
            8021: "莊 1",
            8022: "莊 2",
            8023: "莊 3",
            8101: "閒 1",
            8102: "閒 2",
            8103: "閒 3",
            8111: "閒 1",
            8112: "閒 2",
            8113: "閒 3",
            8121: "閒 1",
            8122: "閒 2",
            8123: "閒 3",
            9001: "龍",
            9002: "鳳",
            9003: "對8以上",
            9004: "順子",
            9005: "同花",
            9006: "同花順",
            9007: "三條",
            9101: "龍",
            9102: "鳳",
            9103: "和",
            9114: "龍三公",
            9124: "鳳三公"
        }
    }, profile$3 = {
        save: "確認",
        title: "玩家資料",
        main_view: {change_password: "更改密碼?", nickname: "暱稱", pending: "待定"},
        password_view: {
            confirm_password: "重新輸入新密碼",
            current_password: "當前密碼",
            hints: "請輸入6-10個字母、數字組成的字串密碼",
            new_password: "新密碼"
        }
    }, roadmap$3 = {
        analysis: "分析",
        history: "歷史",
        last_10_rounds: "最近 10 局",
        last_50_rounds: "最近 50 局",
        last_6_rounds: "最近 6 局",
        round_num: "回合",
        statistics: "統計",
        andar_bahar: {andar: "安達", bahar: "巴哈"},
        baccarat: {banker: "莊", player: "閒", predict_banker: "莊問路", predict_player: "閒問路", tie: "和"},
        bull_bull: {
            game_hall: {
                0: "無牛",
                1: "牛1",
                2: "牛2",
                3: "牛3",
                4: "牛4",
                5: "牛5",
                6: "牛6",
                7: "牛7",
                8: "牛8",
                9: "牛9",
                A: "牛牛",
                B: "五公",
                banker: "莊",
                player_1: "閒1",
                player_2: "閒2",
                player_3: "閒3"
            },
            game_table: {
                0: "無牛",
                1: "牛1",
                2: "牛2",
                3: "牛3",
                4: "牛4",
                5: "牛5",
                6: "牛6",
                7: "牛7",
                8: "牛8",
                9: "牛9",
                A: "牛牛",
                B: "五公",
                banker: "莊",
                player_1: "閒1",
                player_2: "閒2",
                player_3: "閒3"
            }
        },
        casino_war: {banker: "莊", player_1: "閒1", player_2: "閒2", player_3: "閒3"},
        dragon_tiger: {dragon: "龍", predict_dragon: "龍問路", predict_tiger: "虎問路", tie: "和", tiger: "虎"},
        hi_lo: {hi: "HI", hi_lo: "11", lo: "LO"},
        pokdeng: {banker: "莊", player_1: "閒1", player_2: "閒2", player_3: "閒3", player_4: "閒4", player_5: "閒5"},
        roulette: {hot_cold: "熱門 & 冷門"},
        sicbo: {big: "大", small: "小", triple: "圍"},
        sictan: {even: "雙", fan_1: "1番", fan_2: "2番", fan_3: "3番", fan_4: "4番", odd: "單"},
        teen_patti: {
            235: "235",
            flush: "同花",
            four_of_a_kind: "四條",
            full_house: "葫蘆",
            high_card: "散牌",
            pair: "對子",
            pair_plus: "PAIR+",
            player_a: "A",
            player_b: "B",
            royal_flush: "皇家同花順",
            straight: "順子",
            straight_flush: "同花順",
            three_of_a_kind: "三條",
            tie: "和"
        },
        three_pictures: {
            double_pictures: "雙公",
            dragon: "龍",
            phoenix: "鳳",
            single_picture: "單公",
            tie: "和",
            triple_pictures: "三公"
        },
        win3cards: {
            235: "豹子殺手",
            dragon: "龍",
            flush: "同花",
            high_card: "散牌",
            "p8+": "P8",
            pair: "對子",
            phoenix: "鳳",
            straight: "順子",
            straight_flush: "同花順",
            three_of_a_kind: "豹子",
            tie: "和"
        },
        xocdia: {even: "雙", odd: "單", tie: "和", big: "大", small: "小", o: "單", e: "雙"}
    }, settings$3 = {
        title: "設定",
        bullbull: {
            double: "翻倍",
            equal: "平倍",
            play_type: "下注類型",
            play_type_multiplay: "下注類型 (牛)",
            super: "超牛"
        },
        general: {
            confirmed_bet_amounts: "籌碼確認金額",
            languages: "語言",
            side_bets: "邊注",
            statistics: "下注統計",
            title: "顯示"
        },
        scorecards: {classic: "傳統", immersive: "暗黑", title: "主題"},
        sound: {live: "環境聲音", system: "系統聲音", title: "聲音"}
    }, side_hall_filter$3 = {
        101: "百家樂",
        103: "快速",
        104: "咪牌",
        110: "保險",
        111: "VIP",
        201: "骰寶",
        202: "魚蝦蟹",
        203: "色碟",
        301: "龍虎",
        401: "輪盤",
        501: "經典博丁",
        602: "安達巴哈",
        603: "印度炸金花 20-20",
        801: "牛牛",
        901: "炸金花",
        "201_Alt": "HiLo",
        "201_Alt_2": "骰攤",
        "501_Alt": "莊閒博丁",
        "901_Alt": "三公",
        "901_Alt_2": "印度炸金花 20-20",
        asia: "亞洲遊戲",
        baccarat: "百家樂",
        classic: "經典",
        europe: "歐洲遊戲",
        global: "全球遊戲",
        other: "其他遊戲",
        sexy: "性感"
    }, tc = {
        baccarat_gameplay: baccarat_gameplay$3,
        bet_record: bet_record$3,
        bet_type: bet_type$3,
        custom_chips: custom_chips$3,
        detailed_bet_type: detailed_bet_type$3,
        error_code: error_code$3,
        error_msg: error_msg$3,
        fast_bet: fast_bet$3,
        game_hall: game_hall$3,
        game_rules: game_rules$3,
        game_table: game_table$3,
        game_types: game_types$3,
        gamehall_table: gamehall_table$3,
        header: header$3,
        login: login$3,
        menu: menu$3,
        messages: messages$3,
        payout: payout$3,
        profile: profile$3,
        roadmap: roadmap$3,
        settings: settings$3,
        side_hall_filter: side_hall_filter$3
    }, baccarat_gameplay$2 = {
        basic: "Dasar",
        default: "Bawaan",
        fabulous_4: "Luar Biasa 4",
        natural: "Keberuntungan Alami 6",
        super: "Super Baccarat",
        switch: "Ganti Permainan",
        tiger: "Harimau"
    }, bet_record$2 = {
        bet_amount: "Jumlah Taruhan",
        bet_type: "Jenis Taruhan",
        betting_number: "Nomor Taruhan",
        date_time: "Tanggal & Waktu",
        game: "Permainan",
        game_type: "Jenis Permainan",
        gameround_id: "ID Ronde Permainan",
        loading: "Memuat",
        next: "Berikutnya",
        no_video: "Harap dicatat bahwa ronde permainan ini tidak valid, dan video langsung tidak akan ditampilkan.",
        previous: "Sebelumnya",
        shoe_round: "Putaran-Sepatu",
        status: "Status",
        table_number: "Nomor Meja",
        total_bet: "Total Taruhan",
        valid_bet: "Taruhan Valid",
        win_loss: "Menang/Kalah",
        bet_status: {100: "Bertaruh", 101: "Gagal", 110: "Belum Diselesaikan", 111: "Diselesaikan", 120: "Dikembalikan"},
        title: {details: "Rincian", records: "Catatan Taruhan"}
    }, bet_type$2 = {
        1001: "BANKIR",
        1002: "PEMAIN",
        1003: "IMBANG",
        1006: "PAIR B",
        1007: "PAIR P",
        1011: "BANKIR",
        1100: "Keberuntungan 6",
        1211: "Banker Alami",
        1212: "Pemain Alami",
        1223: "SALAH SATU PAIR",
        1224: "PAIR SEMPURNA",
        1231: "B BONUS",
        1232: "P BONUS",
        1301: "ASURANSI",
        1302: "ASURANSI",
        1303: "ASURANSI",
        1304: "ASURANSI",
        1401: "Harimau",
        1402: "Harimau Kecil",
        1403: "Harimau Besar",
        1404: "Pasangan Harimau",
        1405: "Seri Harimau",
        1501: "Banker Luar Biasa 4",
        1502: "Pemain Luar Biasa 4",
        1503: "Pasangan Berharga Banker",
        1504: "Pasangan Berharga Pemain",
        1601: "Banker Hitam",
        1602: "Banker Merah",
        1603: "Pemain Hitam",
        1604: "Pemain Merah",
        1605: "Apapun 6",
        2001: "NAGA",
        2002: "HARIMAU",
        2003: "SERI",
        3001: "KECIL",
        3002: "GANJIL",
        3003: "GENAP",
        3004: "BESAR",
        3011: "TRIPLE APAPUN",
        3048: "SATU",
        3049: "DUA",
        3050: "TIGA",
        3051: "EMPAT",
        3052: "LIMA",
        3053: "ENAM",
        3200: "HI",
        3201: "LO",
        3225: "LO",
        3227: "LO",
        3228: "LO",
        3229: "LO",
        3230: "HI",
        3232: "HI",
        3401: "GANJIL",
        3402: "GENAP",
        3403: "1 FAN",
        3404: "2 FAN",
        3405: "3 FAN",
        3406: "4 FAN",
        3407: "1NIM2",
        3408: "1NIM3",
        3409: "1NIM4",
        3410: "2NIM1",
        3411: "2NIM3",
        3412: "2NIM4",
        3413: "3NIM1",
        3414: "3NIM2",
        3415: "3NIM4",
        3416: "4NIM1",
        3417: "4NIM2",
        3418: "4NIM3",
        3419: "23ONE NGA",
        3420: "24ONE NGA",
        3421: "34ONE NGA",
        3422: "13TWO NGA",
        3423: "14TWO NGA",
        3424: "34TWO NGA",
        3425: "12THREE NGA",
        3426: "14THREE NGA",
        3427: "24THREE NGA",
        3428: "13FOUR NGA",
        3429: "12FOUR NGA",
        3430: "23FOUR NGA",
        3431: "SSH123",
        3432: "SSH124",
        3433: "SSH134",
        3434: "SSH234",
        3435: "KWOK12",
        3436: "KWOK23",
        3437: "KWOK34",
        3438: "KWOK41",
        3500: "SERI",
        3501: "KECIL",
        3502: "BESAR",
        3503: "GANJIL",
        3504: "GENAP",
        4001: "1 - 18",
        4002: "GENAP",
        4005: "GANJIL",
        4006: "19 - 36",
        4007: "ST",
        4008: "ND",
        4009: "RD",
        4010: "",
        4011: "",
        4012: "",
        5001: "P1",
        5002: "P2",
        5003: "P3",
        5004: "P4",
        5005: "P5",
        5011: "P1 Pair",
        5012: "P2 Pair",
        5013: "P3 Pair",
        5014: "P4 Pair",
        5015: "P5 Pair",
        5101: "P1",
        5102: "P2",
        5103: "P3",
        5104: "P4",
        5105: "P5",
        5106: "B1",
        5107: "B2",
        5108: "B3",
        5109: "B4",
        5110: "B5",
        5111: "B Pair",
        6201: "ANDAR",
        6202: "BAHAR",
        6203: "1-5",
        6204: "6-10",
        6205: "11-15",
        6206: "16-25",
        6207: "26-30",
        6208: "31-35",
        6209: "36-40",
        6210: "41+",
        6211: "<span>1</span>st ANDAR",
        6212: "<span>1</span>st BAHAR",
        6301: "PEMAIN A",
        6302: "PEMAIN B",
        6303: "IMBANG",
        6304: "PEMAIN A PAIR+",
        6305: "PEMAIN B PAIR+",
        6306: "6 KARTU BONUS",
        7201: "ANTE",
        7202: "BUTA",
        7203: "TRIPS",
        7204: "NAIK 4x",
        7205: "NAIK 3x",
        7206: "NAIK 2x",
        7207: "NAIK 1x",
        7211: "ANTE",
        7212: "BUTA",
        7213: "TRIPS",
        7214: "NAIK 4x",
        7215: "NAIK 3x",
        7216: "NAIK 2x",
        7217: "NAIK 1x",
        7221: "ANTE",
        7222: "BUTA",
        7223: "TRIPS",
        7224: "NAIK 4x",
        7225: "NAIK 3x",
        7226: "NAIK 2x",
        7227: "NAIK 1x",
        7301: "ANTE",
        7302: "IMBANG",
        7303: "WAR",
        7304: "2ND IMBANG",
        7311: "ANTE",
        7312: "IMBANG",
        7313: "WAR",
        7314: "2ND IMBANG",
        7321: "ANTE",
        7322: "IMBANG",
        7323: "WAR",
        7324: "2ND IMBANG",
        7401: "ANTE",
        7402: "ANTE GANDA",
        7403: "PISAH",
        7404: "PASANGAN",
        7405: "Lucky 3",
        7406: "HOT 3",
        7407: "BUST IT",
        7408: "ASURANSI",
        7409: "LADIES BERUNTUNG",
        8001: "BANKIR 1",
        8002: "BANKIR 2",
        8003: "BANKIR 3",
        8011: "BANKIR 1",
        8012: "BANKIR 2",
        8013: "BANKIR 3",
        8021: "BANKIR 1",
        8022: "BANKIR 2",
        8023: "BANKIR 3",
        8101: "PEMAIN 1",
        8102: "PEMAIN 2",
        8103: "PEMAIN 3",
        8111: "PEMAIN 1",
        8112: "PEMAIN 2",
        8113: "PEMAIN 3",
        8121: "PEMAIN 1",
        8122: "PEMAIN 2",
        8123: "PEMAIN 3",
        9001: "NAGA",
        9002: "PHOENIX",
        9003: "PAIR 8 PLUS",
        9004: "LURUS",
        9005: "FLUSH",
        9006: "STRAIGHT FLUSH",
        9007: "THREE OF A KIND",
        9101: "NAGA",
        9102: "PHOENIX",
        9103: "SERIES",
        9114: "NAGA TIGA GAMBAR",
        9124: "PHOENIX TIGA GAMBAR",
        tips: {
            6306: "Royal Flush/Lurus Flush/Empat Jenis/Full House/Flush/Lurus/Tiga Jenis",
            9003: "Mengandung Pasangan 9 - Pasangan A / Lurus / Flush / Lurus Flush / Tiga Jenis",
            banker_insurance: "Taruhan pada Asuransi Bankir",
            bullbull_firstcard: "Kartu Pertama",
            cards_dealt: "Kartu Dibagikan",
            check: "CEK",
            checked: "ANDA MENCEK",
            comm_betted: "Anda sudah memasang taruhan dengan komisi di putaran ini.",
            double_text: "DUA DADU",
            fold: "LIPAT",
            folded: "ANDA MELIPAT",
            house_card: "RUMAH",
            lose: "Anda kalah:",
            no_bet_after: "Setelah putaran permainan ke-%1 di setiap sepatu, taruhan tidak diizinkan pada %2.",
            no_comm_betted: "Anda sudah memasang taruhan tanpa komisi di putaran ini.",
            no_pairs: "Setelah ronde permainan ke-50 di setiap sepatu, tidak ada taruhan yang diperbolehkan pada Pasangan.",
            player_1: "PEMAIN 1",
            player_2: "PEMAIN 2",
            player_3: "PEMAIN 3",
            player_insurance: "Taruhan pada Asuransi Pemain",
            raised: "ANDA MENAIKAN",
            single_text: "SATU DADU",
            surrender: "MENYERAH",
            tie: "ANDA SERI",
            triple_text: "TIGA DADU",
            war: "GO TO WAR",
            win: "YOU WIN"
        }
    }, custom_chips$2 = {
        chip_value_exists: "Nilai chip ini sudah ada. Silakan coba nilai lain.",
        choose_common_chips: "Pilih Chip Umum",
        custom_chips_value: "Nilai Chip Kustom",
        min_chip_count: "Silakan pilih setidaknya 5 chip.",
        min_chip_value: "Nilai chip minimum yang diizinkan adalah",
        select_all: "Pilih Semua",
        title: "Chip Kustom"
    }, detailed_bet_type$2 = {
        1001: "Bankir",
        1002: "Pemain",
        1003: "Seri",
        1006: "Pair Bankir",
        1007: "Pair Pemain",
        1011: "Bankir (Tanpa Komisi)",
        1100: "Keberuntungan 6",
        1211: "Banker Alami",
        1212: "Pemain Alami",
        1223: "Salah Satu Pair",
        1224: "Pair Sempurna",
        1231: "Bonus Bankir",
        1232: "Bonus Pemain",
        1301: "Asuransi Bankir 1",
        1302: "Asuransi Bankir 2",
        1303: "Asuransi Pemain 1",
        1304: "Asuransi Pemain 2",
        1401: "Harimau",
        1402: "Harimau Kecil",
        1403: "Harimau Besar",
        1404: "Pasangan Harimau",
        1405: "Seri Harimau",
        1501: "Banker Luar Biasa 4",
        1502: "Pemain Luar Biasa 4",
        1503: "Pasangan Berharga Banker",
        1504: "Pasangan Berharga Pemain",
        1601: "Banker Hitam",
        1602: "Banker Merah",
        1603: "Pemain Hitam",
        1604: "Pemain Merah",
        1605: "Apapun 6",
        2001: "Naga",
        2002: "Macan",
        2003: "Seri",
        3001: "Kecil",
        3002: "Ganjil",
        3003: "Genap",
        3004: "Besar",
        3005: "Tripel 1",
        3006: "Tripel 2",
        3007: "Tripel 3",
        3008: "Tripel 4",
        3009: "Tripel 5",
        3010: "Tripel 6",
        3011: "Triple apa pun",
        3012: "Ganda 1",
        3013: "Ganda 2",
        3014: "Ganda 3",
        3015: "Ganda 4",
        3016: "Ganda 5",
        3017: "Ganda 6",
        3018: "Jumlah 4",
        3019: "Jumlah 5",
        3020: "Jumlah 6",
        3021: "Jumlah 7",
        3022: "Jumlah 8",
        3023: "Jumlah 9",
        3024: "Jumlah 10",
        3025: "Jumlah 11",
        3026: "Jumlah 12",
        3027: "Jumlah 13",
        3028: "Jumlah 14",
        3029: "Jumlah 15",
        3030: "Jumlah 16",
        3031: "Jumlah 17",
        3033: "Dua Dadu 1,2",
        3034: "Dua Dadu 1,3",
        3035: "Dua Dadu 1,4",
        3036: "Dua Dadu 1,5",
        3037: "Dua Dadu 1,6",
        3038: "Dua Dadu 2,3",
        3039: "Dua Dadu 2,4",
        3040: "Dua Dadu 2,5",
        3041: "Dua Dadu 2,6",
        3042: "Dua Dadu 3,4",
        3043: "Dua Dadu 3,5",
        3044: "Dua Dadu 3,6",
        3045: "Dua Dadu 4,5",
        3046: "Dua Dadu 4,6",
        3047: "Dua Dadu 5,6",
        3048: "Dadu 1",
        3049: "Dadu 2",
        3050: "Dadu 3",
        3051: "Dadu 4",
        3052: "Dadu 5",
        3053: "Dadu 6",
        3200: "Tinggi",
        3201: "Rendah",
        3202: "11 Hi-Lo",
        3203: "Dadu 1",
        3204: "Dadu 2",
        3205: "Dadu 3",
        3206: "Dadu 4",
        3207: "Dadu 5",
        3208: "Dadu 6",
        3209: "HiLo 1-2",
        3210: "HiLo 1-3",
        3211: "HiLo 1-4",
        3212: "HiLo 1-5",
        3213: "HiLo 1-6",
        3214: "HiLo 2-3",
        3215: "HiLo 2-4",
        3216: "HiLo 2-5",
        3217: "HiLo 2-6",
        3218: "HiLo 3-4",
        3219: "HiLo 3-5",
        3220: "HiLo 3-6",
        3221: "HiLo 4-5",
        3222: "HiLo 4-6",
        3223: "HiLo 5-6",
        3224: "1-Rendah",
        3225: "2-Rendah",
        3226: "3-Rendah",
        3227: "4-Rendah",
        3228: "5-Rendah",
        3229: "6-Rendah",
        3230: "3-Tinggi",
        3231: "4-Tinggi",
        3232: "5-Tinggi",
        3233: "6-Tinggi",
        3234: "1,2,3",
        3235: "2,3,4",
        3236: "3,4,5",
        3237: "4,5,6",
        3301: "Ikan",
        3302: "Udang",
        3303: "Labu",
        3304: "Koin",
        3305: "Kepiting",
        3306: "Ayam",
        3307: "Merah Tunggal Spesifik",
        3308: "Hijau Tunggal Spesifik",
        3309: "Biru Tunggal Spesifik",
        3310: "Merah Ganda Spesifik",
        3311: "Hijau Ganda Spesifik",
        3312: "Biru Ganda Spesifik",
        3313: "Merah Tripel Spesifik",
        3314: "Hijau Tripel Spesifik",
        3315: "Biru Tripel Spesifik",
        3316: "Warna Tripol Apa Saja",
        3317: "Labu & Udang",
        3318: "Labu & Ikan",
        3319: "Labu & Ayam",
        3320: "Labu & Kepiting",
        3321: "Labu & Koin",
        3322: "Udang & Ikan",
        3323: "Udang & Ayam",
        3324: "Udang & Kepiting",
        3325: "Udang & Koin",
        3326: "Ikan & Ayam",
        3327: "Ikan & Kepiting",
        3328: "Ikan & Koin",
        3329: "Ayam & Kepiting",
        3330: "Ayam & Koin",
        3331: "Kepiting & Koin",
        3401: "Ganjil",
        3402: "Genap",
        3403: "1Fan",
        3404: "2Fan",
        3405: "3Fan",
        3406: "4Fan",
        3407: "1Nim2",
        3408: "1Nim3",
        3409: "1Nim4",
        3410: "2Nim1",
        3411: "2Nim3",
        3412: "2Nim4",
        3413: "3Nim1",
        3414: "3Nim2",
        3415: "3Nim4",
        3416: "4Nim1",
        3417: "4Nim2",
        3418: "4Nim3",
        3419: "23 One Nga",
        3420: "24 One Nga",
        3421: "34 One Nga",
        3422: "13 Two Nga",
        3423: "14 Two Nga",
        3424: "34 Two Nga",
        3425: "12 Three Nga",
        3426: "14 Three Nga",
        3427: "24 Three Nga",
        3428: "13 Four Nga",
        3429: "12 Four Nga",
        3430: "23 Four Nga",
        3431: "SSH 123",
        3432: "SSH 124",
        3433: "SSH 134",
        3434: "SSH 234",
        3435: "12 Kwok",
        3436: "23 Kwok",
        3437: "34 Kwok",
        3438: "41 Kwok",
        3500: "SERI",
        3501: "KECIL",
        3502: "BESAR",
        3503: "GANJIL",
        3504: "GENAP",
        3505: "0",
        3506: "1",
        3507: "3",
        3508: "4",
        4001: "1 - 18",
        4002: "Genap",
        4003: "Merah",
        4004: "Hitam",
        4005: "Ganjil",
        4006: "19 - 36",
        4007: "Lusinan 1",
        4008: "Lusinan 2",
        4009: "Lusinan 3",
        4010: "Kolom Pertama",
        4011: "Kolom Kedua",
        4012: "Kolom Ketiga",
        4013: "Lurus 0",
        4014: "Lurus 1",
        4015: "Lurus 2",
        4016: "Lurus 3",
        4017: "Lurus 4",
        4018: "Lurus 5",
        4019: "Lurus 6",
        4020: "Lurus 7",
        4021: "Lurus 8",
        4022: "Lurus 9",
        4023: "Lurus 10",
        4024: "Lurus 11",
        4025: "Lurus 12",
        4026: "Lurus 13",
        4027: "Lurus 14",
        4028: "Lurus 15",
        4029: "Lurus 16",
        4030: "Lurus 17",
        4031: "Lurus 18",
        4032: "Lurus 19",
        4033: "Lurus 20",
        4034: "Lurus 21",
        4035: "Lurus 22",
        4036: "Lurus 23",
        4037: "Lurus 24",
        4038: "Lurus 25",
        4039: "Lurus 26",
        4040: "Lurus 27",
        4041: "Lurus 28",
        4042: "Lurus 29",
        4043: "Lurus 30",
        4044: "Lurus 31",
        4045: "Lurus 32",
        4046: "Lurus 33",
        4047: "Lurus 34",
        4048: "Lurus 35",
        4049: "Lurus 36",
        4050: "Tiga Angka 0/1/2",
        4051: "Tiga Angka 0/2/3",
        4052: "Empat Angka 0/1/2/3",
        4053: "Terpisah(0/1)",
        4054: "Terpisah(0/2)",
        4055: "Terpisah(0/3)",
        4056: "Terpisah(1/2)",
        4057: "Terpisah(2/3)",
        4058: "Terpisah(4/5)",
        4059: "Terpisah(5/6)",
        4060: "Terpisah(7/8)",
        4061: "Terpisah(8/9)",
        4062: "Terpisah(10/11)",
        4063: "Terpisah(11/12)",
        4064: "Terpisah(13/14)",
        4065: "Terpisah(14/15)",
        4066: "Terpisah(16/17)",
        4067: "Terpisah(17/18)",
        4068: "Terpisah(19/20)",
        4069: "Terpisah(20/21)",
        4070: "Terpisah(22/23)",
        4071: "Terpisah(23/24)",
        4072: "Terpisah(25/26)",
        4073: "Terpisah(26/27)",
        4074: "Terpisah(28/29)",
        4075: "Terpisah(29/30)",
        4076: "Terpisah(31/32)",
        4077: "Terpisah(32/33)",
        4078: "Terpisah(34/35)",
        4079: "Terpisah(35/36)",
        4080: "Terpisah(1/4)",
        4081: "Terpisah(4/7)",
        4082: "Terpisah(7/10)",
        4083: "Terpisah(10/13)",
        4084: "Terpisah(13/16)",
        4085: "Terpisah(16/19)",
        4086: "Terpisah(19/22)",
        4087: "Terpisah(22/25)",
        4088: "Terpisah(25/28)",
        4089: "Terpisah(28/31)",
        4090: "Terpisah(31/34)",
        4091: "Terpisah(2/5)",
        4092: "Terpisah(5/8)",
        4093: "Terpisah(8/11)",
        4094: "Terpisah(11/14)",
        4095: "Terpisah(14/17)",
        4096: "Terpisah(17/20)",
        4097: "Terpisah(20/23)",
        4098: "Terpisah(23/26)",
        4099: "Terpisah(26/28)",
        4100: "Terpisah(28/32)",
        4101: "Terpisah(32/35)",
        4102: "Terpisah(3/6)",
        4103: "Terpisah(6/9)",
        4104: "Terpisah(9/12)",
        4105: "Terpisah(12/15)",
        4106: "Terpisah(15/18)",
        4107: "Terpisah(18/21)",
        4108: "Terpisah(21/24)",
        4109: "Terpisah(24/27)",
        4110: "Terpisah(27/30)",
        4111: "Terpisah(30/33)",
        4112: "Terpisah(33/36)",
        4113: "Sudut(1/5)",
        4114: "Sudut(2/6)",
        4115: "Sudut(4/8)",
        4116: "Sudut(5/9)",
        4117: "Sudut(7/11)",
        4118: "Sudut(8/12)",
        4119: "Sudut(10/14)",
        4120: "Sudut(11/15)",
        4121: "Sudut(13/17)",
        4122: "Sudut(14/18)",
        4123: "Sudut(16/20)",
        4124: "Sudut(17/21)",
        4125: "Sudut(18/23)",
        4126: "Sudut(20/24)",
        4127: "Sudut(22/26)",
        4128: "Sudut(23/27)",
        4129: "Sudut(25/29)",
        4130: "Sudut(26/30)",
        4131: "Sudut(28/32)",
        4132: "Sudut(29/33)",
        4133: "Sudut(31/35)",
        4134: "Sudut(32/36)",
        4135: "Jalan(1-3)",
        4136: "Jalan(4-6)",
        4137: "Jalan(7-9)",
        4138: "Jalan(10-12)",
        4139: "Jalan(13-15)",
        4140: "Jalan(16-18)",
        4141: "Jalan(19-21)",
        4142: "Jalan(22-24)",
        4143: "Jalan(25-27)",
        4144: "Jalan(28-30)",
        4145: "Jalan(31-33)",
        4146: "Jalan(34-36)",
        4147: "Garis(1-6)",
        4148: "Garis(4-9)",
        4149: "Garis(7-12)",
        4150: "Garis(10-15)",
        4151: "Garis(13-18)",
        4152: "Garis(16-21)",
        4153: "Garis(19-24)",
        4154: "Garis(22-27)",
        4155: "Garis(28-33)",
        4156: "Garis(31-36)",
        4157: "Garis(25-30)",
        5001: "P1",
        5002: "P2",
        5003: "P3",
        5004: "P4",
        5005: "P5",
        5011: "P1 Pasangan",
        5012: "P2 Pasangan",
        5013: "P3 Pasangan",
        5014: "P4 Pasangan",
        5015: "P5 Pasangan",
        5101: "P1",
        5102: "P2",
        5103: "P3",
        5104: "P4",
        5105: "P5",
        5106: "Bankir 1",
        5107: "Bankir 2",
        5108: "Bankir 3",
        5109: "Bankir 4",
        5110: "Bankir 5",
        5111: "Bankir Pasangan",
        6201: "Andar",
        6202: "Bahar",
        6203: "1-5 Kartu",
        6204: "6-10 Kartu",
        6205: "11-15 Kartu",
        6206: "16-25 Kartu",
        6207: "26-30 Kartu",
        6208: "31-35 Kartu",
        6209: "36-40 Kartu",
        6210: "41+ Kartu",
        6211: "Andar 1",
        6212: "Bahar 1",
        6301: "Pemain A",
        6302: "Pemain B",
        6303: "Seri",
        6304: "Pemain A Pasangan+",
        6305: "Pemain B Pasangan+",
        6306: "Bonus 6 Kartu",
        7201: "Pemain 1 Ante",
        7202: "Pemain 1 Blind",
        7203: "Pemain 1 Trips",
        7204: "Pemain 1 Naik 4x",
        7205: "Pemain 1 Naik 3x",
        7206: "Pemain 1 Naik 2x",
        7207: "Pemain 1 Naik 1x",
        7211: "Pemain 2 Ante",
        7212: "Pemain 2 Blind",
        7213: "Pemain 2 Trips",
        7214: "Pemain 2 Naik 4x",
        7215: "Pemain 2 Naik 3x",
        7216: "Pemain 2 Naik 2x",
        7217: "Pemain 2 Naik 1x",
        7221: "Pemain 3 Ante",
        7222: "Pemain 3 Blind",
        7223: "Pemain 3 Trips",
        7224: "Pemain 3 Naik 4x",
        7225: "Pemain 3 Naik 3x",
        7226: "Pemain 3 Naik 2x",
        7227: "Pemain 3 Naik 1x",
        7301: "Pemain 1 Ante",
        7302: "Pemain 1 Seri 1",
        7303: "Pemain 1 Perang",
        7304: "Pemain 1 Seri 2",
        7311: "Pemain 2 Ante",
        7312: "Pemain 2 Seri 1",
        7313: "Pemain 2 Perang",
        7314: "Pemain 2 Seri 2",
        7321: "Pemain 3 Ante",
        7322: "Pemain 3 Seri 1",
        7323: "Pemain 3 Perang",
        7324: "Pemain 3 Seri 2",
        7401: "Ante",
        7402: "Ante Ganda",
        7403: "Bagi",
        7404: "Pair Apapun",
        7405: "Lucky 3",
        7406: "Hot 3",
        7407: "Bust It",
        7408: "Asuransi",
        7409: "Lucky Ladies",
        8001: "Bankir 1 (Sama)",
        8002: "Bankir 2 (Sama)",
        8003: "Bankir 3 (Sama)",
        8011: "Bankir 1 (Ganda)",
        8012: "Bankir 2 (Ganda)",
        8013: "Bankir 3 (Ganda)",
        8021: "Bankir 1 (Super Bull)",
        8022: "Bankir 2 (Super Bull)",
        8023: "Bankir 3 (Super Bull)",
        8101: "Pemain 1 (Sama)",
        8102: "Pemain 2 (Sama)",
        8103: "Pemain 3 (Sama)",
        8111: "Pemain 1 (Ganda)",
        8112: "Pemain 2 (Ganda)",
        8113: "Pemain 3 (Ganda)",
        8121: "Pemain 1 (Super Bull)",
        8122: "Pemain 2 (Super Bull)",
        8123: "Pemain 3 (Super Bull)",
        9001: "Naga",
        9002: "Phoenix",
        9003: "Pasangan 8+",
        9004: "Lurus",
        9005: "Flush",
        9006: "Lurus Flush",
        9007: "Three of a Kind",
        9101: "Naga",
        9102: "Phoenix",
        9103: "Seri",
        9114: "Naga Tiga Gambar",
        9124: "Phoenix Tiga Gambar",
        additional_result: {
            235: "235",
            "1st_dozen": "1<sup>st</sup> Lusinan",
            "2nd_dozen": "2<sup>nd</sup> Lusinan",
            "3rd_dozen": "3<sup>rd</sup> Lusinan",
            big_dice: "Besar",
            bull_1: "Bull 1",
            bull_2: "Bull 2",
            bull_3: "Bull 3",
            bull_4: "Bull 4",
            bull_5: "Bull 5",
            bull_6: "Bull 6",
            bull_7: "Bull 7",
            bull_8: "Bull 8",
            bull_9: "Bull 9",
            bull_bull: "Bull Bull",
            double_pictures: "Gambar Ganda",
            even: "Genap",
            five_dukes: "5 Dukes",
            flush: "Flush",
            four_of_a_kind: "Four of a Kind",
            full_house: "Full House",
            high_card: "Kartu Tinggi",
            no_bull: "Tidak Ada Bull",
            not_qualified: "Not Qualified",
            odd: "Ganjil",
            pair: "Pasangan",
            royal_flush: "Royal Flush",
            single_picture: "Gambar Tunggal",
            small_dice: "Kecil",
            straight: "Lurus",
            straight_flush: "Lurus Flush",
            three_of_a_kind: "Three of a Kind",
            triple_dice: "Triple",
            triple_pictures: "Tiga Gambar",
            two_pairs: "Dua Pasangan"
        }
    }, error_code$2 = {
        1: "Gangguan Server Internal [1]",
        101: "Melebihi batas taruhan",
        102: "Melebihi batas waktu [102]",
        103: "Gagal memasang taruhan (melebihi batas pot) [103]",
        104: "Bet(s) Failed(Below Selection Bet Limit)",
        404: "Unable to connect to the server. Please check the network settings",
        5e3: "Kesalahan tidak diketahui [5000]",
        5001: "Permintaan terlalu sering diajukan [5001]",
        6e3: "Jaringan terputus, harap masuk kembali",
        6001: "Kesalahan Jaringan [6001]",
        6002: "Gagal memuat informasi kredit [6002]",
        6003: "Nama pengguna atau kata sandi salah! [6003]",
        6004: "Nama pengguna ditolak! [6004]",
        6005: "Anda tidak memiliki handikap! [6005]",
        6006: "Rekaman pesan MultiPlay tidak ditemukan! [6006]",
        6007: "Agen Anda tidak ditemukan, mohon hubungi bantuan pelanggan! [6007]",
        6008: "Akun Anda telah diakses dari lokasi lain. [6008]",
        6010: "Penggantian kata sandi gagal [6010]",
        6011: "Format kata sandi salah [6011]",
        6012: "Kata sandi tidak boleh dikosongkan [6012]",
        6013: "Batas kata sandi hanya 9 karakter! [6013]",
        6015: "Gagal menambahkan teman! Player sudah ditambahkan sebelumnya. [6015]",
        6016: "Gagal menambahkan player, sudah mencapai batas maksimal (20) [6016]",
        6018: "Meja permainan ditutup! [6018]",
        6019: "Meja sedang dalam perbaikan! [6019]",
        6020: "Meja permainan ini pribadi [6020]",
        6021: "Tempat duduk ini sudah ditempati, mohon pilih yang lain! [6021]",
        6022: "Tidak bisa bergabung di meja ini, mohon coba lagi. [6022]",
        6023: "Meja dengan batas taruhan tidak ditemukan, mohon kembali ke permainan. [6023]",
        6024: "Meja permainan tidak ditemukan, mohon kembali ke permainan. [6024]",
        6025: "Tempat duduk yang sesuai tidak ditemukan! [6025]",
        6026: "Tidak bisa bergabung di meja ini, mohon coba lagi. [6026]",
        6027: "Meja ini sudah penuh, mohon coba meja permainan lainnya! [6027]",
        6028: "Tidak bisa mengganti tempat duduk. Anda telah memasang taruhan di tempat duduk lain. Silakan klik 'enter' untuk kembali ke meja permainan. [6028]",
        6029: "Meja permainan {0} sudah dipesan. Silakan pilih gabung atau taruhan sampingan. [6029]",
        6030: "Pemilik meja sudah meninggalkan permainan [6030]",
        6031: "Anda adalah pemilik meja, tidak bisa ganti tempat duduk. [6031]",
        6032: "Anda telah memasang taruhan sampingan di putaran ini, tidak bisa duduk selama putaran ini berlangsung. [6032]",
        6033: "Anda telah memasang taruhan di tempat duduk Anda untuk putaran ini, tidak bisa bergabung untuk pasang taruhan sampingan. [6033]",
        6034: "Meja ini belum dipesan, tidak bisa bergabung. [6034]",
        6035: "Maaf, saldo Anda kurang dari {0}. Anda bisa memasang taruhan sampingan. [6035]",
        6037: "Gagal memasang taruhan! [6037]",
        6038: "Gagal! Perubahan kredit ilegal. [6038]",
        6039: "Gagal! Sistem sedang sibuk. [6039]",
        6040: "Gagal! Mohon login kembali. [6040]",
        6041: "Gagal! Putaran permainan tidak ditemukan. [6041]",
        6042: "Gagal! Kredit tidak cukup! [6042]",
        6043: "Taruhan Gagal! Melebihi kerugian maksimum. [6043]",
        6044: "Gagal! Putaran permainan ditutup. [6044]",
        6045: "Gagal! Pesan eror. [6045]",
        6046: "Gagal! Terjadi kesalahan pada pengoperasian. [6046]",
        6047: "Taruhan ilegal! [6047]",
        6048: "Tidak bisa memasang taruhan Besar atau Kecil setelah 30 putaran! [6048]",
        6049: "Taruhan tidak valid! [6049]",
        6050: "Taruhan Gagal! Melebihi batas maksimum [6050]",
        6052: "Taruhan sudah dipasang, tidak bisa lewati kartu! [6052]",
        6053: "Kartu sudah dibuka, tidak bisa lewati kartu! [6053]",
        6054: "Putaran permainan belum dimulai, tidak bisa lewati kartu! [6054]",
        6055: "Sudah lewati lebih dari 5 kali! [6055]",
        6057: "Dealer tidak hadir [6057]",
        6058: "Operasi ilegal [6058]",
        6059: "Meja permainan tidak ditemukan [6059]",
        6060: "Bahasa tidak didukung! [6060]",
        6061: "Operasi tidak valid! [6061]",
        6062: "Parameter eror! [6062]",
        6063: "Aula permainan tidak ditemukan, mohon masuk kembali. [6063]",
        6064: "Sistem sedang dalam perbaikan! [6064]",
        6065: "Tidak dapat menemukan meja atau tempat duduk dengan limit yang sesuai. [6065]",
        6066: "Meja permainan tidak ada. [6066]",
        6067: "Meja permainan tidak ditemukan, mohon coba lagi. [6067]",
        6068: "Kata sandi salah！ [6068]",
        6069: "Belum ada taruhan dipasang, tidak bisa membuka kartu! [6069]",
        6070: "Gagal! Anda telah memasang taruhan sampingan, silakan coba lagi di putaran selanjutnya. [6070]",
        6071: "Anda tidak memiliki meja ini. [6071]",
        6072: "Meja ini sudah penuh, silakan coba taruhan sampingan! [6072]",
        6073: "Pemilik meja sudah mengatur kata sandi untuk meja ini. [6073]",
        6074: "Anda belum memasang taruhan selama lebih dari 4 menit. Anda akan dikeluarkan secara otomatis dari meja permainan ({{0}}). [6074]",
        6075: "Batas waktu sesi ID sudah berakhir, mohon kembali dan coba lagi. [6075]",
        6076: "Kesalahan ID sesi, harap kembali untuk mencoba lagi. [6076]",
        6077: "Perujukan situs tidak valid, mohon kembali dan coba lagi [6077]",
        6078: "You are logged out of the game. [6078]",
        6079: "Platform sedang dalam perbaikan! [6079]",
        6080: "Gagal bergabung di meja, mohon coba lagi. [6080]",
        6081: "Gagal memesan meja, mohon coba lagi. [6081]",
        6082: "Lokasi login Anda telah diblokir. Kami mohon maaf atas ketidaknyamanan ini. [6082]",
        6083: "Gagal memasang taruhan. Anda sudah memasang taruhan dengan komisi di putaran ini. [6083]",
        6084: "Gagal memasang taruhan. Anda sudah memasang taruhan tanpa komisi di putaran ini. [6084]",
        6085: "[Pesan/Gabung]. Silakan coba [taruhan sampingan] [6085]",
        6086: "Kata sandi telah direset. Silakan masuk kembali! [6086]",
        6087: "New and current password cannot be same [6087]",
        6088: "Anda tidak diizinkan untuk memasuki meja permainan ini sesuai dengan handicap VIP saat ini. Jika diperlukan penyesuaian handicap VIP, silakan hubungi layanan pelanggan atau agen atasan Anda [6088]",
        6090: "Batas waktu permintaan [6090]",
        6091: "Login gagal [6091]",
        6092: "Anda keluar dari permainan [6092]",
        6093: "Kode verifikasi salah. Silakan coba lagi [6093]",
        6094: "Uji coba gratis Anda telah berakhir (15 menit), Anda keluar dari permainan [6094]",
        6095: "Verifikasi dapat dikirim hanya sekali per putaran [6095]",
        6096: "Operasi tidak valid [6096]",
        6097: "Status tidak benar saat melakukan verifikasi [6097]",
        6098: "Not allowed to bet on pair related field after <number> rounds ",
        6099: "Tidak ada Paket Merah yang bisa dikumpulkan [6099]",
        6100: "Paket Merah sudah dikumpulkan [6100]",
        6101: "Aktivitas belum dimulai [6101]",
        6102: "Status aktivitas ilegal [6102]",
        6103: "Belum siap untuk mengklaim rpa [6103]",
        6111: "Pemain telah melipat untuk putaran ini [6111]",
        6112: "Pemain telah memeriksa untuk putaran ini [6112]",
        6113: "Status taruhan sub putaran ilegal [6113]",
        6114: "Tidak dalam keadaan bertaruh [6114]",
        6115: "Taruhan pada perjalanan tidak diizinkan tanpa ante/blind [6115]",
        6116: "Ante dan Blind harus dipertaruhkan bersama [6116]",
        6117: "Jumlah Ante dan Blind harus sama [6117]",
        6118: "Pemain hanya dapat bertaruh pada Ante/Blind/Trips di putaran pertama [6118]",
        6119: "Pemain hanya dapat bertaruh pada 4x/3x di putaran kedua [6119]",
        6120: "Pemain hanya dapat bertaruh pada 2x di putaran ketiga [6120]",
        6121: "Pemain hanya dapat bertaruh pada 1x di putaran terakhir [6121]",
        6122: "Jumlah Taruhan Tidak Valid [6122]",
        6123: "Kenaikan tidak diizinkan tanpa ante [6123]",
        6124: "Kenaikan duplikat [6124]",
        6126: "Tidak ada taruhan pada putaran permainan berturut-turut terdeteksi, keluar otomatis dari meja permainan. [6126]",
        6200: "Waktu respons habis. Silakan hubungi tim layanan pelanggan kami. [6200]",
        6201: "Waktu respons habis. Silakan hubungi tim layanan pelanggan kami. [6201]",
        6202: "Waktu respons habis. Silakan hubungi tim layanan pelanggan kami. [6202]",
        6203: "Waktu respons habis. Silakan hubungi tim layanan pelanggan kami. [6203]",
        6204: "Waktu respons habis. Silakan hubungi tim layanan pelanggan kami. [6204]",
        100001: "Agen Anda belum mengaktifkan login seluler Anda",
        200001: "Terjadi kesalahan. Harap hubungi CSD untuk detailnya, terima kasih. [1000]",
        200002: "Waktu sistem habis, harap tutup layar permainan saat ini lalu coba lagi. [1001]",
        200003: "Waktu sistem habis, harap tutup layar permainan saat ini lalu coba lagi. [1002]",
        200004: "Terjadi kesalahan. Harap hubungi CSD untuk detailnya, terima kasih. [1003]",
        200005: "Terjadi kesalahan. Harap hubungi CSD untuk detailnya, terima kasih. [1004]",
        200006: "Terjadi kesalahan. Harap hubungi CSD untuk detailnya, terima kasih. [1005]",
        200007: "Terjadi kesalahan. Harap hubungi CSD untuk detailnya, terima kasih. [1006]",
        200008: "Terjadi kesalahan. Harap hubungi CSD untuk detailnya, terima kasih. [1007]",
        200009: "Terjadi kesalahan. Harap hubungi CSD untuk detailnya, terima kasih. [1008]",
        200011: "Akun telah ditutup. Harap hubungi upline Anda untuk detailnya, terima kasih. [2002]",
        200012: "Terjadi kesalahan. Harap hubungi CSD untuk detailnya, terima kasih. [2003]",
        200013: "Terjadi kesalahan. Harap hubungi CSD untuk detailnya, terima kasih. [3001]",
        200014: "Dana di akun Anda tidak memadai. [3002]",
        200015: "Jumlah taruhan melebihi pengaturan batas taruhan Anda, harap coba lagi. [3003]",
        200016: "Permainan dinonaktifkan. Harap hubungi upline Anda untuk detailnya, terima kasih. [3004]",
        200017: "Terjadi kesalahan. Harap hubungi CSD untuk detailnya, terima kasih. [3005]",
        200018: "Batas kemenangan tercapai! Harap hubungi upline Anda, terima kasih. [3006]",
        200019: "Batas kekalahan tercapai! Harap hubungi upline Anda, terima kasih. [3007]",
        200020: "Anda tidak memiliki pengaturan batas taruhan untuk permainan ini, harap hubungi upline Anda untuk mengaturnya. [3008]",
        200021: "Batas taruhan Anda telah diubah, harap masuk kembali untuk menerapkan pengaturan baru. [3009]",
        200022: "Akun telah ditangguhkan. Harap hubungi upline Anda untuk detailnya, terima kasih. [3010]",
        200023: "Akun telah ditangguhkan. Harap hubungi upline Anda untuk detailnya, terima kasih. [3013]",
        200024: "Permainan tidak tersedia saat ini. Harap hubungi CSD untuk detailnya, terima kasih. [3014]"
    }, error_msg$2 = {
        ban: "Akun Anda telah login di tempat lain.",
        kick: "Sesi telah kedaluwarsa. Silakan sambungkan kembali ke platform!",
        processing_game_bet: "Taruhan Anda sedang diproses, harap tunggu.",
        quitGame: "Tekan OK untuk keluar dari permainan",
        relogin: "Tekan OK untuk kembali ke halaman login.",
        unknown: "Jaringan terputus, tekan OK untuk keluar dari permainan",
        connection: {
            connection_problem: "Tekan OK untuk kembali ke permainan.",
            server_connection_problem: "Tekan OK untuk kembali ke permainan."
        },
        idle: {
            disconnected_reconnect: "Tekan OK untuk kembali ke permainan.",
            disconnected_to_server: "Tekan OK untuk kembali ke permainan."
        }
    }, fast_bet$2 = {title: "Taruhan Cepat"}, game_hall$2 = {
        banner_more_detail: "Lihat Lebih Banyak",
        feature_games: "Permainan Unggulan",
        good_roads: "Jalan Bagus",
        hot_games: "Hot Games",
        multi_play: "MultiPemain",
        view_all: "Lihat Semua",
        vip_betlimit: "Batas Taruhan",
        vip_enter: "Masuk",
        vip_min_enter: "Saldo Minimum",
        vip_occupied: "Dicadangkan",
        vip_reserve: "Cadangan",
        subtypes: {
            all: "Semua",
            classic: "Klasik",
            insurance: "Asuransi",
            quick: "Cepat",
            see: "Lihat Kartu",
            sexy: "Seksi",
            vip: "VIP"
        }
    }, game_rules$2 = {
        attention: "Perhatian",
        game_rules: "Aturan Permainan",
        introduction: "Pengenalan",
        payoff: "Pembayaran",
        title: "Bantuan"
    }, game_table$2 = {
        balanace: "SALDO",
        deposit: "Deposit",
        deposit_short: "D",
        total_bet: "TOTAL TARUHAN",
        trial: "UJI COBA",
        baccarat: {no_comm: "Tanpa Komisi"},
        blackjack: {
            all_side_bets: "ALL SIDE BETS",
            ante_first: "SILAHKAN TARUHAN ANTE TERLEBIH DAHULU",
            banker: "Bankir",
            double: "GANDANYA",
            hit: "HIT",
            insufficient_insurance: "Saldo tidak cukup untuk asuransi",
            insurance: "Asuransi?",
            other_decison: "Pemain lain sedang membuat keputusan",
            player: "Pemain",
            split: "BAGI",
            stand: "STAND",
            instruction: {
                213: {
                    content: "Menang jika kombinasi kartu awal pemain dan kartu atas dealer membentuk jenis kartu tertentu.",
                    title: "LUCKY 3"
                },
                label: "INSTRUKSI",
                ante: {
                    content: "Menang jika nilai tangan pemain lebih dekat ke 21 daripada tangan dealer dan tidak melebihi 21.",
                    title: "ANTE"
                },
                bust: {content: "Menang jika dealer bust.", title: "BUST IT"},
                hot3: {
                    content: "Menang jika nilai kartu dari kartu awal pemain dan kartu atas dealer total 19 - 21.",
                    title: "PANAS 3"
                },
                lucky_ladies: {
                    content: "Menang jika kartu awal pemain membentuk jenis kartu tertentu.",
                    title: "LUCKY LADIES"
                },
                pair: {content: "Menang jika kartu awal pemain adalah pasangan.", title: "PAIR APAPUN"}
            }
        },
        bullbull: {
            banker: "BANKIR",
            banker_allwin: "BANKIR SEMUA MENANG",
            first_card: "KARTU PERTAMA",
            player_allwin: "PEMAIN SEMUA MENANG"
        },
        casino_war: {
            "1st_tie": "SERI 1",
            "2nd_tie": "SERI 2",
            banker: "BANKIR",
            decision: "BUAT KEPUTUSAN ANDA",
            player_1: "PEMAIN 1",
            player_2: "PEMAIN 2",
            player_3: "PEMAIN 3",
            surrender: "MENYERAH"
        },
        fpc: {any_two_dice: "KEDUA DUA DADU", both_one_dice: "KEDUA SATU DADU"},
        roulette: {orphelins: "orphelins", tier: "tier", voisins: "voisins", zero: "Nol"},
        seecard: {other_squeezing: "Pemain lain sedang meremas kartu"},
        teen_patti: {pair_plus: "PAIR+"},
        uth: {
            banker: "BANKIR",
            community: "KOMUNITAS",
            decision: "BUAT KEPUTUSAN ANDA",
            play: "MAIN",
            player_1: "PEMAIN 1",
            player_1_short: "P1",
            player_2: "PEMAIN 2",
            player_2_short: "P2",
            player_3: "PEMAIN 3",
            player_3_short: "P3",
            raise1x: "NAIKKAN 1x",
            raise2x: "NAIKKAN 2x",
            raise3x: "NAIKKAN 3x",
            raise4x: "NAIKKAN 4x"
        },
        vip: {
            owner_squeezing: "Pemilik sedang meremas kartu",
            owner_tooltip: "PEMILIK",
            reserve_action_tooltip: "Sudah dipesan",
            reserve_betlimit: "Batas Taruhan",
            reserve_min_enter: "Saldo Minimum",
            reserve_request: "Meja dipesan. Anda akan menjadi pemilik di putaran berikutnya.",
            reserved_tooltip: "Sudah dipesan",
            shuffle_request: "คำขอสับไพ่ของคุณได้ถูกส่งเรียบร้อย การสับไพ่จะเริ่มภายในห้านาที.",
            shuffle_tooltip: "Acak",
            skip_tooltip: "LEWATI",
            start_tooltip: "MULAI"
        }
    }, game_types$2 = {
        101: "Baccarat",
        102: "VIP Baccarat (Warisan)",
        103: "Baccarat Cepat",
        104: "Lihat Kartu Baccarat",
        110: "Asuransi Baccarat",
        111: "VIP Baccarat",
        201: "SicBo",
        202: "Kepiting Udang Ikan",
        203: "Xoc Dia",
        301: "Naga Harimau",
        401: "Roulette",
        501: "PokDeng Klasik",
        602: "Andar Bahar",
        603: "Teen Patti 20-20",
        702: "Ultimate Texas Hold'em",
        703: "Perang Kasino",
        704: "BlackJack Tak Terbatas",
        801: "Bull Bull",
        901: "Menang Tiga Kartu",
        "201_Alt": "HiLo",
        "201_Alt_2": "Sic Tan",
        "501_Alt": "PokDeng Dua Sisi",
        "901_Alt": "Tiga Gambar",
        "901_Alt_2": "Teen Patti 20-20",
        arcadeGame: "Permainan Kasino",
        card_game: "Card Game",
        cardGame: "Card Game",
        classic: "Klasik",
        fishingGame: "Memancing AB",
        game_hall: "Lobi",
        multi_hall: "MultiPemain",
        sexy: "Seksi",
        slotGame: "Permainan Slot",
        UTH_Short: "Ult. Texas"
    }, gamehall_table$2 = {
        maintaining: "PERAWATAN",
        notable: "Tidak ada meja tersedia",
        good_road: {
            100: "Bankir Panjang",
            101: "Pemain Panjang",
            102: "Jalan Tunggal",
            103: "Satu P Dua B",
            104: "Satu B Dua P",
            105: "Makan dengan pat",
            106: "B melintasi P",
            107: "P melintasi B",
            108: "B terpisah",
            109: "P terpisah"
        }
    }, header$2 = {
        bet_record: "Catatan Taruhan",
        card_game: "AB FISHING",
        exitfullscreen: "Keluar Layar Penuh",
        fullscreen: "Layar Penuh",
        hot_games: "LOBBY",
        live_games: "LIVE GAMES",
        logout: "Keluar",
        multi_table: "MULTIPLAY",
        profile: "Profil",
        services: "Layanan",
        Version: "Versi"
    }, login$2 = {free_trial: "COBA GRATIS", login: "MASUK", password: "Kata Sandi", username: "Nama Pengguna"}, menu$2 = {
        addToHomeScreenForIOS: "TAMBAHKAN KE LAYAR UTAMA",
        back: "KEMBALI KE LOBI",
        downloadApp: "Unduh APL",
        exitfullscreen: "KELUAR LAYAR PENUH",
        fast_bet: "TARUHAN CEPAT",
        fullscreen: "LAYAR PENUH",
        guide: "BANTUAN",
        history: "CATATAN TARUHAN",
        installation_instruction: "Instruksi",
        installPwa: "PASANG",
        lobby: "Lobi",
        loginApp: "Masuk APL",
        payout: "PEMBAYARAN",
        settings: "PENGATURAN",
        title: "Menu",
        verification: "VERIFIKASI",
        video: "MUAT ULANG"
    }, messages$2 = {
        all_in: "ALL IN",
        bet_success: "Taruhan dikonfirmasi",
        cancel: "Batalkan",
        game_table_verified: "Verifikasi telah dikirim, harap periksa hasil verifikasi di layar",
        idle_video: "VIDEO DIJEDA KARENA TIDAK AKTIF. TEKAN OK UNTUK MELANJUTKAN",
        insufficient_bet_balance: "Saldo tidak cukup",
        insufficient_vip_balance: "Jumlah tidak mencukupi",
        landscape_block: "Putar perangkat seluler Anda untuk pengalaman terbaik",
        loading: "MEMUAT",
        logout: "Anda yakin ingin keluar",
        logoutOK: "Keluar",
        lost: "ANDA KALAH",
        multi_side_hall_filter: "Filter cannot be empty, please select at least one game type.",
        nickname_success: "Nama panggilan diperbarui!",
        ok_button: "Komfimasi",
        screen_size_block: "Silakan ubah ukuran jendela untuk pengalaman terbaik",
        table_not_found: "Meja permainan tidak ditemukan",
        table_under_maintenance: "Meja sedang dalam perbaikan",
        won: "ANDA MENANG"
    }, payout$2 = {
        bet: "JENIS TARUHAN", bet_limit: "BATAS TARUHAN", odds: "ODDS", payout: "PEMBAYARAN", bet_type: {
            1001: "BANKIR",
            1002: "PEMAIN",
            1003: "SERI",
            1006: "PAIR B",
            1007: "PAIR P",
            1011: "Banker (tanpa komisi)",
            1100: "Keberuntungan 6",
            1211: "Banker Alami",
            1212: "Pemain Alami",
            1223: "SALAH SATU PAIR",
            1224: "PAIR SEMPURNA",
            1231: "BONUS B",
            1232: "BONUS P",
            1401: "Harimau",
            1402: "Harimau Kecil",
            1403: "Harimau Besar",
            1404: "Pasangan Harimau",
            1405: "Seri Harimau",
            1501: "Banker Luar Biasa 4",
            1502: "Pemain Luar Biasa 4",
            1503: "Pasangan Berharga Banker",
            1504: "Pasangan Berharga Pemain",
            1601: "Banker Hitam",
            1602: "Banker Merah",
            1603: "Pemain Hitam",
            1604: "Pemain Merah",
            1605: "Apapun 6",
            2001: "NAGA",
            2002: "HARIMAU",
            2003: "SERI",
            3001: "BESAR / KECIL",
            3002: "GENAP / GANJIL",
            3005: "TRIPOL SPESIFIK",
            3011: "TRIPOL APA SAJA",
            3012: "GANDA SPESIFIK",
            3018: "4 ATAU 17 POIN",
            3019: "5 ATAU 16 POIN",
            3020: "6 ATAU 15 POIN",
            3021: "7 ATAU 14 POIN",
            3022: "8 ATAU 13 POIN",
            3023: "9, 10, 11 ATAU 12 POIN",
            3033: "KOMBINASI DUA DADU",
            3048: "SATU DADU",
            3049: "DUA DADU",
            3050: "TIGA DADU",
            3200: "HI",
            3201: "LO",
            3202: "11 HI-LO",
            3203: "DADU 1 - 6",
            3209: "KOMBINASI DUA DADU",
            3224: "1 LO",
            3225: "2 LO",
            3226: "3 LO",
            3227: "4 LO",
            3228: "5 - 6 LO",
            3230: "3 - 4 HI",
            3232: "5 HI",
            3233: "6 HI",
            3234: "KOMBINASI TIGA DADU",
            3301: "SIMBOL UTAMA",
            3307: "WARNA TUNGGAL SPESIFIK",
            3310: "WARNA GANDA SPESIFIK",
            3313: "WARNA TRIPOL SPESIFIK",
            3316: "WARNA TRIPOL APA SAJA",
            3317: "KOMBINASI DUA DADU",
            3401: "GANJIL / GENAP",
            3403: "FAN",
            3407: "NIM",
            3419: "NGA",
            3431: "SSH",
            3435: "12 KWOK / 23 KWOK / 34 KWOK",
            3438: "41 KWOK",
            3500: "SERI",
            3501: "KECIL",
            3502: "BESAR",
            3503: "GANJIL",
            3504: "GENAP",
            3505: "0",
            3506: "1",
            3507: "3",
            3508: "4",
            4001: "BESAR / KECIL",
            4002: "GANJIL / GENAP",
            4003: "MERAH / HITAM",
            4007: "LUSINAN",
            4010: "KOLOM",
            4013: "LURUS",
            4050: "TIGA ANGKA",
            4052: "EMPAT ANGKA",
            4053: "TERPISAH",
            4113: "SUDUT",
            4135: "JALAN",
            4147: "GARIS",
            5001: "PEMAIN 1-5",
            5011: "PAIR PEMAIN 1-5",
            5101: "PEMAIN 1-5",
            5106: "BANKIR 1-5",
            5111: "PAIR BANKIR",
            6201: "ANDAR",
            6202: "BAHAR",
            6203: "1-5 KARTU",
            6204: "6-10 KARTU",
            6205: "11-15 KARTU",
            6206: "16-25 KARTU",
            6207: "26-30 KARTU",
            6208: "31-35 KARTU",
            6209: "36-40 KARTU",
            6210: "41+ KARTU",
            6211: "1ST ANDAR",
            6212: "1ST BAHAR",
            6301: "PEMAIN A",
            6302: "PEMAIN B",
            6303: "IMBANG",
            6304: "PAIR PEMAIN A",
            6305: "PAIR PEMAIN B",
            6306: "6 KARTU BONUS",
            7201: "PEMAIN 1 - 3 ANTE",
            7202: "PEMAIN 1 - 3 BUTA",
            7203: "PEMAIN 1 - 3 TRIPS",
            7301: "PEMAIN 1 - 3 ANTE",
            7302: "PEMAIN 1 - 3 1ST IMBANG",
            7304: "PEMAIN 1 - 3 2ND IMBANG",
            7401: "ANTE",
            7404: "PAIR APAPUN",
            7405: "Lucky 3",
            7406: "HOT 3",
            7407: "BUST IT",
            7409: "LUCKY LADIES",
            8001: "BANKIR 1",
            8002: "BANKIR 2",
            8003: "BANKIR 3",
            8011: "BANKIR 1",
            8012: "BANKIR 2",
            8013: "BANKIR 3",
            8021: "BANKIR 1",
            8022: "BANKIR 2",
            8023: "BANKIR 3",
            8101: "PEMAIN 1",
            8102: "PEMAIN 2",
            8103: "PEMAIN 3",
            8111: "PEMAIN 1",
            8112: "PEMAIN 2",
            8113: "PEMAIN 3",
            8121: "PEMAIN 1",
            8122: "PEMAIN 2",
            8123: "PEMAIN 3",
            9001: "NAGA",
            9002: "PHOENIX",
            9003: "PAIR 8+",
            9004: "STRAIGHT",
            9005: "FLUSH",
            9006: "STRAIGHT FLUSH",
            9007: "THREE OF A KIND",
            9101: "NAGA",
            9102: "PHOENIX",
            9103: "IMBANG",
            9114: "NAGA 3 GAMBAR",
            9124: "PHOENIX 3 GAMBAR"
        }
    }, profile$2 = {
        save: "Simpan",
        title: "Profil",
        main_view: {change_password: "Ubah Kata Sandi?", nickname: "Nama Panggilan", pending: "Tertunda"},
        password_view: {
            confirm_password: "Konfirmasi Kata Sandi",
            current_password: "Kata Sandi Saat Ini",
            hints: "* Harap masukkan string alfanumerik 6-10 karakter",
            new_password: "Kata Sandi Baru"
        }
    }, roadmap$2 = {
        analysis: "ANALISA",
        history: "SEJARAH",
        last_10_rounds: "10 PUTARAN TERAKHIR",
        last_50_rounds: "50 PUTARAN TERAKHIR",
        last_6_rounds: "6 PUTARAN TERAKHIR",
        round_num: "Putaran #",
        statistics: "STATISTIK",
        andar_bahar: {andar: "ANDAR", bahar: "BAHAR"},
        baccarat: {
            banker: "B",
            player: "P",
            predict_banker: "Prediksi Banker",
            predict_player: "Prediksi Player",
            tie: "T"
        },
        bull_bull: {
            game_hall: {
                0: "NB",
                1: "B1",
                2: "B2",
                3: "B3",
                4: "B4",
                5: "B5",
                6: "B6",
                7: "B7",
                8: "B8",
                9: "B9",
                A: "BB",
                B: "5D",
                banker: "B",
                player_1: "P1",
                player_2: "P2",
                player_3: "P3"
            },
            game_table: {
                0: "No Bull",
                1: "Bull 1",
                2: "Bull 2",
                3: "Bull 3",
                4: "Bull 4",
                5: "Bull 5",
                6: "Bull 6",
                7: "Bull 7",
                8: "Bull 8",
                9: "Bull 9",
                A: "Bull Bull",
                B: "5 Dukes",
                banker: "BANKIR",
                player_1: "PEMAIN 1",
                player_2: "PEMAIN 2",
                player_3: "PEMAIN 3"
            }
        },
        casino_war: {banker: "B", player_1: "P1", player_2: "P2", player_3: "P3"},
        dragon_tiger: {
            dragon: "D",
            predict_dragon: "Prediksi Naga",
            predict_tiger: "Prediksi Harimau",
            tie: "T",
            tiger: "T"
        },
        hi_lo: {hi: "TINGGI", hi_lo: "11", lo: "RENDAH"},
        pokdeng: {banker: "B", player_1: "P1", player_2: "P2", player_3: "P3", player_4: "P4", player_5: "P5"},
        roulette: {hot_cold: "Panas & Dingin"},
        sicbo: {big: "Besar", small: "Kecil", triple: "Triple"},
        sictan: {even: "Genap", fan_1: "1 FAN", fan_2: "2 FAN", fan_3: "3 FAN", fan_4: "4 FAN", odd: "Ganjil"},
        teen_patti: {
            235: "235",
            flush: "Flush",
            four_of_a_kind: "Four of a Kind",
            full_house: "Full House",
            high_card: "Tinggi Kartu",
            pair: "Pasangan",
            pair_plus: "PAIR+",
            player_a: "A",
            player_b: "B",
            royal_flush: "Royal Flush",
            straight: "Straight",
            straight_flush: "Straight Flush",
            three_of_a_kind: "Three of a Kind",
            tie: "S"
        },
        three_pictures: {
            double_pictures: "DP",
            dragon: "D",
            phoenix: "P",
            single_picture: "SP",
            tie: "T",
            triple_pictures: "3P"
        },
        win3cards: {
            235: "235",
            dragon: "D",
            flush: "Flush",
            high_card: "Tinggi Kartu",
            "p8+": "P8",
            pair: "Pasangan",
            phoenix: "P",
            straight: "Straight",
            straight_flush: "Straight Flush",
            three_of_a_kind: "Three of a Kind",
            tie: "T"
        },
        xocdia: {even: "GENAP", odd: "GANJIL", tie: "Seri", big: "BESAR", small: "KECIL", o: "O", e: "E"}
    }, settings$2 = {
        title: "Pengaturan",
        bullbull: {
            double: "Ganda",
            equal: "Sama",
            play_type: "Tipe Taruhan",
            play_type_multiplay: "Tipe Taruhan (Bull Bull)",
            super: "SuperBull"
        },
        general: {
            confirmed_bet_amounts: "Jumlah Taruhan yang Dikonfirmasi",
            languages: "Bahasa",
            side_bets: "Taruhan Samping",
            statistics: "Statistik Taruhan",
            title: "Tampilan"
        },
        scorecards: {classic: "Klasik", immersive: "Imersif", title: "Kartu Skor"},
        sound: {live: "Suara Langsung", system: "Suara Sistem", title: "Suara"}
    }, side_hall_filter$2 = {
        101: "Baccarat",
        103: "Cepat",
        104: "Lihat Kartu",
        110: "Asuransi",
        111: "VIP",
        201: "SicBo",
        202: "Kepiting Udang Ikan",
        203: "Xoc Dia",
        301: "Naga Harimau",
        401: "Roulette",
        501: "PokDeng Klasik",
        602: "Andar Bahar",
        603: "Teen Patti 20-20",
        801: "Bull Bull",
        901: "Menang Tiga Kartu",
        "201_Alt": "HiLo",
        "201_Alt_2": "Sic Tan",
        "501_Alt": "PokDeng Dua Sisi",
        "901_Alt": "Tiga Gambar",
        "901_Alt_2": "Teen Patti 20-20",
        asia: "Permainan Asia",
        baccarat: "Baccarat",
        classic: "Klasik",
        europe: "Permainan Eropa",
        global: "Permainan Global",
        other: "Permainan Lain",
        sexy: "Seksi"
    }, id = {
        baccarat_gameplay: baccarat_gameplay$2,
        bet_record: bet_record$2,
        bet_type: bet_type$2,
        custom_chips: custom_chips$2,
        detailed_bet_type: detailed_bet_type$2,
        error_code: error_code$2,
        error_msg: error_msg$2,
        fast_bet: fast_bet$2,
        game_hall: game_hall$2,
        game_rules: game_rules$2,
        game_table: game_table$2,
        game_types: game_types$2,
        gamehall_table: gamehall_table$2,
        header: header$2,
        login: login$2,
        menu: menu$2,
        messages: messages$2,
        payout: payout$2,
        profile: profile$2,
        roadmap: roadmap$2,
        settings: settings$2,
        side_hall_filter: side_hall_filter$2
    }, baccarat_gameplay$1 = {
        basic: "基本",
        default: "デフォルト",
        fabulous_4: "ファビュラス 4",
        natural: "ナチュラル ラッキー 6",
        super: "スーパー バカラ",
        switch: "ゲームプレイ切り替え",
        tiger: "タイガー"
    }, bet_record$1 = {
        bet_amount: "賭け金額",
        bet_type: "プレイ種類",
        betting_number: "ベット番号",
        date_time: "日付と時間",
        game: "ゲーム",
        game_type: "ゲーム種類",
        gameround_id: "ゲームラウンドID",
        loading: "読み込み中",
        next: "次",
        no_video: "このゲームのラウンドは無効であり、ライブビデオは表示されませんのでご注意ください。",
        previous: "前",
        shoe_round: "シューラウンド",
        status: "ステータス",
        table_number: "テーブル",
        total_bet: "合計掛け金",
        valid_bet: "有効ベット",
        win_loss: "勝ち/負け",
        bet_status: {100: "ベッティング", 101: "失敗", 110: "未決済", 111: "精算", 120: "返金"},
        title: {details: "詳細", records: "賭け記録"}
    }, bet_type$1 = {
        1001: "バンカー",
        1002: "プレーヤー",
        1003: "引き分け",
        1006: "マニュアルでB",
        1007: "プレーヤーペア",
        1011: "バンカー",
        1100: "ラッキー 6",
        1211: "バンカーナチュラル",
        1212: "プレイヤーナチュラル",
        1223: "任意のペア",
        1224: "パーフェクトペア",
        1231: "Bボーナス",
        1232: "Pボーナス",
        1301: "保険",
        1302: "保険",
        1303: "保険",
        1304: "保険",
        1401: "タイガー",
        1402: "スモールタイガー",
        1403: "ビッグタイガー",
        1404: "タイガーペア",
        1405: "タイガータイ",
        1501: "バンカーファビュラス 4",
        1502: "プレイヤーファビュラス 4",
        1503: "バンカープレシャス ペア",
        1504: "プレイヤープレシャス ペア",
        1601: "バンカーブラック",
        1602: "バンカーレッド",
        1603: "プレイヤーブラック",
        1604: "プレイヤーレッド",
        1605: "いずれかの 6",
        2001: "ドラゴン",
        2002: "タイガー",
        2003: "引き分け",
        3001: "スモール",
        3002: "オッド",
        3003: "イーブン",
        3004: "ビッグ",
        3011: "トリプル",
        3048: "一",
        3049: "二",
        3050: "三",
        3051: "四",
        3052: "五",
        3053: "六",
        3200: "ハイ",
        3201: "ロー",
        3225: "ロー",
        3227: "ロー",
        3228: "ロー",
        3229: "ロー",
        3230: "ハイ",
        3232: "ハイ",
        3401: "オッド",
        3402: "イーブン",
        3403: "1 FAN",
        3404: "2 FAN",
        3405: "3 FAN",
        3406: "4 FAN",
        3407: "1NIM2",
        3408: "1NIM3",
        3409: "1NIM4",
        3410: "2NIM1",
        3411: "2NIM3",
        3412: "2NIM4",
        3413: "3NIM1",
        3414: "3NIM2",
        3415: "3NIM4",
        3416: "4NIM1",
        3417: "4NIM2",
        3418: "4NIM3",
        3419: "23ONE NGA",
        3420: "24ONE NGA",
        3421: "34ONE NGA",
        3422: "13TWO NGA",
        3423: "14TWO NGA",
        3424: "34TWO NGA",
        3425: "12THREE NGA",
        3426: "14THREE NGA",
        3427: "24THREE NGA",
        3428: "13FOUR NGA",
        3429: "12FOUR NGA",
        3430: "23FOUR NGA",
        3431: "SSH123",
        3432: "SSH124",
        3433: "SSH134",
        3434: "SSH234",
        3435: "KWOK12",
        3436: "KWOK23",
        3437: "KWOK34",
        3438: "KWOK41",
        3500: "タイ",
        3501: "スモール",
        3502: "ビッグ",
        3503: "オッド",
        3504: "イーブン",
        4001: "1-18",
        4002: "イーブン",
        4005: "オッド",
        4006: "19-36",
        4007: "ST",
        4008: "ND",
        4009: "RD",
        4010: "",
        4011: "",
        4012: "",
        5001: "P1",
        5002: "P2",
        5003: "P3",
        5004: "P4",
        5005: "P5",
        5011: "P1ペア",
        5012: "P2ペア",
        5013: "P3ペア",
        5014: "P4ペア",
        5015: "P5ペア",
        5101: "P1",
        5102: "P2",
        5103: "P3",
        5104: "P4",
        5105: "P5",
        5106: "B1",
        5107: "B2",
        5108: "B3",
        5109: "B4",
        5110: "B5",
        5111: "Bペア",
        6201: "ANDAR",
        6202: "BAHAR",
        6203: "1-5",
        6204: "6-10",
        6205: "11-15",
        6206: "16-25",
        6207: "26-30",
        6208: "31-35",
        6209: "36-40",
        6210: "41以上",
        6211: "<span>1</span>番目のアンダー",
        6212: "<span>1</span>番目のバハール",
        6301: "プレイヤーA",
        6302: "プレイヤーB",
        6303: "引き分け",
        6304: "プレイヤーAペアプラス",
        6305: "プレイヤーBペアプラス",
        6306: "6カードボーナス",
        7201: "アンティ",
        7202: "ブラインド",
        7203: "トリップス",
        7204: "レイズ4倍",
        7205: "レイズ3倍",
        7206: "レイズ2倍",
        7207: "レイズ1倍",
        7211: "アンティ",
        7212: "ブラインド",
        7213: "トリップス",
        7214: "レイズ4倍",
        7215: "レイズ3倍",
        7216: "レイズ2倍",
        7217: "レイズ1倍",
        7221: "アンティ",
        7222: "ブラインド",
        7223: "トリップス",
        7224: "レイズ4倍",
        7225: "レイズ3倍",
        7226: "レイズ2倍",
        7227: "レイズ1倍",
        7301: "アンティ",
        7302: "引き分け",
        7303: "ウォー",
        7304: "2番目の引き分け",
        7311: "アンティ",
        7312: "引き分け",
        7313: "ウォー",
        7314: "2番目の引き分け",
        7321: "アンティ",
        7322: "引き分け",
        7323: "ウォー",
        7324: "2番目の引き分け",
        7401: "アンティ",
        7402: "ダブルアンティ",
        7403: "スプリット",
        7404: "ペア",
        7405: "ラッキー3",
        7406: "ホット3",
        7407: "バストイット",
        7408: "保険",
        7409: "ラッキーレディース",
        8001: "バンカー1",
        8002: "バンカー2",
        8003: "バンカー3",
        8011: "バンカー1",
        8012: "バンカー2",
        8013: "バンカー3",
        8021: "バンカー1",
        8022: "バンカー2",
        8023: "バンカー3",
        8101: "プレーヤー1",
        8102: "プレーヤー2",
        8103: "プレーヤー3",
        8111: "プレーヤー1",
        8112: "プレーヤー2",
        8113: "プレーヤー3",
        8121: "プレーヤー1",
        8122: "プレーヤー2",
        8123: "プレーヤー3",
        9001: "ドラゴン",
        9002: "フェニックス",
        9003: "ペア8以上",
        9004: "ストレート",
        9005: "フラッシュ",
        9006: "ストレートフラッシュ",
        9007: "スリーオブアカインド",
        9101: "ドラゴン",
        9102: "フェニックス",
        9103: "引き分け",
        9114: "ドラゴン3ピクチャーズ",
        9124: "フェニックス3ピクチャーズ",
        tips: {
            6306: "ロイヤルフラッシュ / ストレートフラッシュ / フォーカード / フルハウス / フラッシュ / ストレート / スリーオブアカインド",
            9003: "ペア 9 - ペア A / ストレート / フラッシュ / ストレート フラッシュ / スリー オブ カインド",
            banker_insurance: "バンカー保険への賭け",
            bullbull_firstcard: "最初のカード",
            cards_dealt: "配られたカード",
            check: "チェック",
            checked: "あなたはチェックしました",
            comm_betted: "このラウンドではコミッションなしでベットしました。",
            double_text: "2ダイス",
            fold: "フォールド",
            folded: "あなたはフォールドしました",
            house_card: "ハウス",
            lose: "あなたの負け：",
            no_bet_after: "%1ゲーム目以降のシューでは、%2への賭けは許可されません",
            no_comm_betted: "このラウンドでは手数料とともにベットしました。",
            no_pairs: "50ゲーム目以降のシューでは、ペアへの賭けは許可されません。",
            player_1: "プレーヤー1",
            player_2: "プレーヤー2",
            player_3: "プレーヤー3",
            player_insurance: "プレイヤー保険への賭け",
            raised: "あなたはレイズしました",
            single_text: "1ダイス",
            surrender: "降伏",
            tie: "引き分け",
            triple_text: "3ダイス",
            war: "ウォーへ",
            win: "あなたの勝ち："
        }
    }, custom_chips$1 = {
        chip_value_exists: "このチップ値は既に存在します。別の値を試してください。",
        choose_common_chips: "共通チップを選択",
        custom_chips_value: "カスタムチップの値",
        min_chip_count: "少なくとも5つのチップを選択してください。",
        min_chip_value: "許可される最小チップ値は",
        select_all: "すべて選択",
        title: "カスタムチップ"
    }, detailed_bet_type$1 = {
        1001: "バンカー",
        1002: "プレーヤー",
        1003: "引き分け",
        1006: "バンカーペア",
        1007: "プレーヤーペア",
        1011: "バンカー (手数料なし)",
        1100: "ラッキー 6",
        1211: "バンカーナチュラル",
        1212: "プレイヤーナチュラル",
        1223: "任意のペア",
        1224: "パーフェクトペア",
        1231: "バンカーボーナス",
        1232: "プレイヤーボーナス",
        1301: "バンカー保険1",
        1302: "バンカー保険2",
        1303: "プレイヤー保険1",
        1304: "プレイヤー保険2",
        1401: "タイガー",
        1402: "スモールタイガー",
        1403: "ビッグタイガー",
        1404: "タイガーペア",
        1405: "タイガータイ",
        1501: "バンカーファビュラス 4",
        1502: "プレイヤーファビュラス 4",
        1503: "バンカープレシャス ペア",
        1504: "プレイヤープレシャス ペア",
        1601: "バンカーブラック",
        1602: "バンカーレッド",
        1603: "プレイヤーブラック",
        1604: "プレイヤーレッド",
        1605: "いずれかの 6",
        2001: "ドラゴン",
        2002: "タイガー",
        2003: "引き分け",
        3001: "スモール",
        3002: "オッド",
        3003: "イーブン",
        3004: "ビッグ",
        3005: "トリプル1",
        3006: "トリプル2",
        3007: "トリプル3",
        3008: "トリプル4",
        3009: "トリプル5",
        3010: "トリプル6",
        3011: "トリプル",
        3012: "ダブル1",
        3013: "ダブル2",
        3014: "ダブル3",
        3015: "ダブル4",
        3016: "ダブル5",
        3017: "ダブル6",
        3018: "合計4",
        3019: "合計5",
        3020: "合計6",
        3021: "合計7",
        3022: "合計8",
        3023: "合計9",
        3024: "合計10",
        3025: "合計11",
        3026: "合計12",
        3027: "合計13",
        3028: "合計14",
        3029: "合計15",
        3030: "合計16",
        3031: "合計17",
        3033: "2ダイス 1,2",
        3034: "2ダイス 1,3",
        3035: "2ダイス 1,4",
        3036: "2ダイス 1,5",
        3037: "2ダイス 1,6",
        3038: "2ダイス 2,3",
        3039: "2ダイス 2,4",
        3040: "2ダイス 2,5",
        3041: "2ダイス 2,6",
        3042: "2ダイス 3,4",
        3043: "2ダイス 3,5",
        3044: "2ダイス 3,6",
        3045: "2ダイス 4,5",
        3046: "2ダイス 4,6",
        3047: "2ダイス 5,6",
        3048: "ダイス1",
        3049: "ダイス2",
        3050: "ダイス3",
        3051: "ダイス4",
        3052: "ダイス5",
        3053: "ダイス6",
        3200: "ハイ",
        3201: "ロー",
        3202: "11 ハイ-ロー",
        3203: "ダイス1",
        3204: "ダイス2",
        3205: "ダイス3",
        3206: "ダイス4",
        3207: "ダイス5",
        3208: "ダイス6",
        3209: "ハイロー 1-2",
        3210: "ハイロー 1-3",
        3211: "ハイロー 1-4",
        3212: "ハイロー 1-5",
        3213: "ハイロー 1-6",
        3214: "ハイロー 2-3",
        3215: "ハイロー 2-4",
        3216: "ハイロー 2-5",
        3217: "ハイロー 2-6",
        3218: "ハイロー 3-4",
        3219: "ハイロー 3-5",
        3220: "ハイロー 3-6",
        3221: "ハイロー 4-5",
        3222: "ハイロー 4-6",
        3223: "ハイロー 5-6",
        3224: "1-ロー",
        3225: "2-ロー",
        3226: "3-ロー",
        3227: "4-ロー",
        3228: "5-ロー",
        3229: "6-ロー",
        3230: "3-ハイ",
        3231: "4-ハイ",
        3232: "5-ハイ",
        3233: "6-ハイ",
        3234: "1,2,3",
        3235: "2,3,4",
        3236: "3,4,5",
        3237: "4,5,6",
        3301: "魚",
        3302: "エビ",
        3303: "ひょうたん",
        3304: "コイン",
        3305: "カニ",
        3306: "鶏",
        3307: "特定のシングルレッド",
        3308: "特定のシングルグリーン",
        3309: "特定のシングルブルー",
        3310: "特定のダブルレッド",
        3311: "特定のダブルグリーン",
        3312: "特定のダブルブルー",
        3313: "特定のトリプルレッド",
        3314: "特定のトリプルグリーン",
        3315: "特定のトリプルブルー",
        3316: "任意の色",
        3317: "ひょうたんとエビ",
        3318: "ひょうたんと魚",
        3319: "ひょうたんと鶏",
        3320: "ひょうたんとカニ",
        3321: "ひょうたんとコイン",
        3322: "エビと魚",
        3323: "エビと鶏",
        3324: "エビとカニ",
        3325: "エビとコイン",
        3326: "魚と鶏",
        3327: "魚とカニ",
        3328: "魚とコイン",
        3329: "鶏とカニ",
        3330: "鶏とコイン",
        3331: "カニとコイン",
        3401: "オッド",
        3402: "イーブン",
        3403: "1Fan",
        3404: "2Fan",
        3405: "3Fan",
        3406: "4Fan",
        3407: "1Nim2",
        3408: "1Nim3",
        3409: "1Nim4",
        3410: "2Nim1",
        3411: "2Nim3",
        3412: "2Nim4",
        3413: "3Nim1",
        3414: "3Nim2",
        3415: "3Nim4",
        3416: "4Nim1",
        3417: "4Nim2",
        3418: "4Nim3",
        3419: "23 One Nga",
        3420: "24 One Nga",
        3421: "34 One Nga",
        3422: "13 Two Nga",
        3423: "14 Two Nga",
        3424: "34 Two Nga",
        3425: "12 Three Nga",
        3426: "14 Three Nga",
        3427: "24 Three Nga",
        3428: "13 Four Nga",
        3429: "12 Four Nga",
        3430: "23 Four Nga",
        3431: "SSH 123",
        3432: "SSH 124",
        3433: "SSH 134",
        3434: "SSH 234",
        3435: "12 Kwok",
        3436: "23 Kwok",
        3437: "34 Kwok",
        3438: "41 Kwok",
        3500: "タイ",
        3501: "スモール",
        3502: "ビッグ",
        3503: "オッド",
        3504: "イーブン",
        3505: "0",
        3506: "1",
        3507: "3",
        3508: "4",
        4001: "1-18",
        4002: "イーブン",
        4003: "赤",
        4004: "黒",
        4005: "オッド",
        4006: "19 - 36",
        4007: "ダース1",
        4008: "ダース2",
        4009: "ダース3",
        4010: "第一列目",
        4011: "第二列目",
        4012: "第三列目",
        4013: "ストレート0",
        4014: "ストレート1",
        4015: "ストレート2",
        4016: "ストレート3",
        4017: "ストレート4",
        4018: "ストレート5",
        4019: "ストレート6",
        4020: "ストレート7",
        4021: "ストレート8",
        4022: "ストレート9",
        4023: "ストレート10",
        4024: "ストレート11",
        4025: "ストレート12",
        4026: "ストレート13",
        4027: "ストレート14",
        4028: "ストレート15",
        4029: "ストレート16",
        4030: "ストレート17",
        4031: "ストレート18",
        4032: "ストレート19",
        4033: "ストレート20",
        4034: "ストレート21",
        4035: "ストレート22",
        4036: "ストレート23",
        4037: "ストレート24",
        4038: "ストレート25",
        4039: "ストレート26",
        4040: "ストレート27",
        4041: "ストレート28",
        4042: "ストレート29",
        4043: "ストレート30",
        4044: "ストレート31",
        4045: "ストレート32",
        4046: "ストレート33",
        4047: "ストレート34",
        4048: "ストレート35",
        4049: "ストレート36",
        4050: "スリーナンバーズ 0/1/2",
        4051: "スリーナンバーズ 0/2/3",
        4052: "フォーナンバーズ 0/1/2/3",
        4053: "セパレート 0/1",
        4054: "セパレート 0/2",
        4055: "セパレート 0/3",
        4056: "セパレート 1/2",
        4057: "セパレート 2/3",
        4058: "セパレート 4/5",
        4059: "セパレート 5/6",
        4060: "セパレート 7/8",
        4061: "セパレート 8/9",
        4062: "セパレート 10/11",
        4063: "セパレート 11/12",
        4064: "セパレート 13/14",
        4065: "セパレート 14/15",
        4066: "セパレート 16/17",
        4067: "セパレート 17/18",
        4068: "セパレート 19/20",
        4069: "セパレート 20/21",
        4070: "セパレート 22/23",
        4071: "セパレート 23/24",
        4072: "セパレート 25/26",
        4073: "セパレート 26/27",
        4074: "セパレート 28/29",
        4075: "セパレート 29/30",
        4076: "セパレート 31/32",
        4077: "セパレート 32/33",
        4078: "セパレート 34/35",
        4079: "セパレート 35/36",
        4080: "セパレート 1/4",
        4081: "セパレート 4/7",
        4082: "セパレート 7/10",
        4083: "セパレート 10/13",
        4084: "セパレート 13/16",
        4085: "セパレート 16/19",
        4086: "セパレート 19/22",
        4087: "セパレート 22/25",
        4088: "セパレート 25/28",
        4089: "セパレート 28/31",
        4090: "セパレート 31/34",
        4091: "セパレート 2/5",
        4092: "セパレート 5/8",
        4093: "セパレート 8/11",
        4094: "セパレート 11/14",
        4095: "セパレート 14/17",
        4096: "セパレート 17/20",
        4097: "セパレート 20/23",
        4098: "セパレート 23/26",
        4099: "セパレート 26/29",
        4100: "セパレート 29/32",
        4101: "セパレート 32/35",
        4102: "セパレート 3/6",
        4103: "セパレート 6/9",
        4104: "セパレート 9/12",
        4105: "セパレート 12/15",
        4106: "セパレート 15/18",
        4107: "セパレート 18/21",
        4108: "セパレート 21/24",
        4109: "セパレート 24/27",
        4110: "セパレート 27/30",
        4111: "セパレート 30/33",
        4112: "セパレート 33/36",
        4113: "コーナー 1/5",
        4114: "コーナー 2/6",
        4115: "コーナー 4/8",
        4116: "コーナー 5/9",
        4117: "コーナー 7/11",
        4118: "コーナー 8/12",
        4119: "コーナー 10/14",
        4120: "コーナー 11/15",
        4121: "コーナー 13/17",
        4122: "コーナー 14/18",
        4123: "コーナー 16/20",
        4124: "コーナー 17/21",
        4125: "コーナー 18/23",
        4126: "コーナー 20/24",
        4127: "コーナー 22/26",
        4128: "コーナー 23/27",
        4129: "コーナー 25/29",
        4130: "コーナー 26/30",
        4131: "コーナー 28/32",
        4132: "コーナー 29/33",
        4133: "コーナー 31/35",
        4134: "コーナー 32/36",
        4135: "ストリート 1-3",
        4136: "ストリート 4-6",
        4137: "ストリート 7-9",
        4138: "ストリート 10-12",
        4139: "ストリート 13-15",
        4140: "ストリート 16-18",
        4141: "ストリート 19-21",
        4142: "ストリート 22-24",
        4143: "ストリート 25-27",
        4144: "ストリート 28-30",
        4145: "ストリート 31-33",
        4146: "ストリート 34-36",
        4147: "ライン(1-6)",
        4148: "ライン(4-9)",
        4149: "ライン(7-12)",
        4150: "ライン(10-15)",
        4151: "ライン(13-18)",
        4152: "ライン(16-21)",
        4153: "ライン(19-24)",
        4154: "ライン(22-27)",
        4155: "ライン(28-33)",
        4156: "ライン(31-36)",
        4157: "ライン(25-30)",
        5001: "P1",
        5002: "P2",
        5003: "P3",
        5004: "P4",
        5005: "P5",
        5011: "P1 ペア",
        5012: "P2 ペア",
        5013: "P3 ペア",
        5014: "P4 ペア",
        5015: "P5 ペア",
        5101: "P1",
        5102: "P2",
        5103: "P3",
        5104: "P4",
        5105: "P5",
        5106: "バンカー1",
        5107: "バンカー2",
        5108: "バンカー3",
        5109: "バンカー4",
        5110: "バンカー5",
        5111: "バンカーペア",
        6201: "Andar",
        6202: "Bahar",
        6203: "1-5 カード",
        6204: "6-10 カード",
        6205: "11-15 カード",
        6206: "16-25 カード",
        6207: "26-30 カード",
        6208: "31-35 カード",
        6209: "36-40 カード",
        6210: "41+ カード",
        6211: "1st Andar",
        6212: "1st Bahar",
        6301: "プレイヤーA",
        6302: "プレイヤーB",
        6303: "タイ",
        6304: "プレイヤーA ペア+",
        6305: "プレイヤーB ペア+",
        6306: "6 カード ボーナス",
        7201: "プレイヤー1 アンティ",
        7202: "プレイヤー1 ブラインド",
        7203: "プレイヤー1 トリップス",
        7204: "プレイヤー1 レイズ 4x",
        7205: "プレイヤー1 レイズ 3x",
        7206: "プレイヤー1 レイズ 2x",
        7207: "プレイヤー1 レイズ 1x",
        7211: "プレイヤー2 アンティ",
        7212: "プレイヤー2 ブラインド",
        7213: "プレイヤー2 トリップス",
        7214: "プレイヤー2 レイズ 4x",
        7215: "プレイヤー2 レイズ 3x",
        7216: "プレイヤー2 レイズ 2x",
        7217: "プレイヤー2 レイズ 1x",
        7221: "プレイヤー3 アンティ",
        7222: "プレイヤー3 ブラインド",
        7223: "プレイヤー3 トリップス",
        7224: "プレイヤー3 レイズ 4x",
        7225: "プレイヤー3 レイズ 3x",
        7226: "プレイヤー3 レイズ 2x",
        7227: "プレイヤー3 レイズ 1x",
        7301: "プレイヤー1 アンティ",
        7302: "プレイヤー1 1st タイ",
        7303: "プレイヤー1 ウォー",
        7304: "プレイヤー1 2nd タイ",
        7311: "プレイヤー2 アンティ",
        7312: "プレイヤー2 1st タイ",
        7313: "プレイヤー2 ウォー",
        7314: "プレイヤー2 2nd タイ",
        7321: "プレイヤー3 アンティ",
        7322: "プレイヤー3 1st タイ",
        7323: "プレイヤー3 ウォー",
        7324: "プレイヤー3 2nd タイ",
        7401: "アンティ",
        7402: "アンティ ダブル",
        7403: "スプリット",
        7404: "エニーペア",
        7405: "ラッキー3",
        7406: "ホット3",
        7407: "バスト イット",
        7408: "インシュランス",
        7409: "ラッキー レディーズ",
        8001: "バンカー1 (イコール)",
        8002: "バンカー2 (イコール)",
        8003: "バンカー3 (イコール)",
        8011: "バンカー1 (ダブル)",
        8012: "バンカー2 (ダブル)",
        8013: "バンカー3 (ダブル)",
        8021: "バンカー1 (スーパー ブル)",
        8022: "バンカー2 (スーパー ブル)",
        8023: "バンカー3 (スーパー ブル)",
        8101: "プレイヤー1 (イコール)",
        8102: "プレイヤー2 (イコール)",
        8103: "プレイヤー3 (イコール)",
        8111: "プレイヤー1 (ダブル)",
        8112: "プレイヤー2 (ダブル)",
        8113: "プレイヤー3 (ダブル)",
        8121: "プレイヤー1 (スーパー ブル)",
        8122: "プレイヤー2 (スーパー ブル)",
        8123: "プレイヤー3 (スーパー ブル)",
        9001: "ドラゴン",
        9002: "フェニックス",
        9003: "ペア 8+",
        9004: "ストレート",
        9005: "フラッシュ",
        9006: "ストレート フラッシュ",
        9007: "スリー オブ ア カインド",
        9101: "ドラゴン",
        9102: "フェニックス",
        9103: "タイ",
        9114: "ドラゴン スリー ピクチャーズ",
        9124: "フェニックス スリー ピクチャーズ",
        additional_result: {
            235: "235",
            "1st_dozen": "1<sup>ダ</sup> ース目",
            "2nd_dozen": "2<sup>ダ</sup> ース目",
            "3rd_dozen": "3<sup>ダ</sup> ース目",
            big_dice: "ビッグ",
            bull_1: "ブル 1",
            bull_2: "ブル 2",
            bull_3: "ブル 3",
            bull_4: "ブル 4",
            bull_5: "ブル 5",
            bull_6: "ブル 6",
            bull_7: "ブル 7",
            bull_8: "ブル 8",
            bull_9: "ブル 9",
            bull_bull: "ブルブル",
            double_pictures: "ダブル ピクチャーズ",
            even: "イーブン",
            five_dukes: "5 公爵",
            flush: "フラッシュ",
            four_of_a_kind: "フォー オブ ア カインド",
            full_house: "フル ハウス",
            high_card: "ハイ カード",
            no_bull: "ブルなし",
            not_qualified: "ノット クオリファイド",
            odd: "オッド",
            pair: "ペア",
            royal_flush: "ロイヤルフラッシュ",
            single_picture: "シングル ピクチャー",
            small_dice: "スモール",
            straight: "ストレート",
            straight_flush: "ストレート フラッシュ",
            three_of_a_kind: "スリー オブ ア カインド",
            triple_dice: "トリプル",
            triple_pictures: "スリー ピクチャーズ",
            two_pairs: "ツー ペアーズ"
        }
    }, error_code$1 = {
        1: "サーバーエラー [1]",
        101: "ベット制限を超えています",
        102: "制限時間を超えました [102]",
        103: "ベット失敗（ポットリミット超過）[103]",
        104: "ベット失敗 (ベット制限以下)",
        404: "サーバーに接続できません。ネットワーク設定を確認してください",
        5e3: "不明なエラー [5000]",
        5001: "リクエストがビジーです [5001]",
        6e3: "ネットワークが切断されました。もう一度ログインしてください。",
        6001: "ネットワークエラー [6001]",
        6002: "クレジットカード情報を得るのに失敗しました。 [6002]",
        6003: "ユーザー名またはパスワードが間違っています。 [6003]",
        6004: "ユーザーログインが無効になりました。 [6004]",
        6005: "ハンデを持っていません！ [6005]",
        6006: "マルチプレイメッセージ記録が見つかりません！ [6006]",
        6007: "エージェントが見つかりません、カスタマーサービスまでお問い合わせ下さい！ [6007]",
        6008: "アカウントが別の場所でログインされました。 [6008]",
        6010: "パスワードエラーをリセット [6010]",
        6011: "パスワードの形式が間違っています [6011]",
        6012: "パスワード欄は空欄にできません(6012) [6012]",
        6013: "パスワードは9文字以内でお願いします！[6013]",
        6015: "失敗！プレーヤーは繰り返すことが出来ません。 [6015]",
        6016: "可能なプレーヤー人数に達しました。 [6016]",
        6018: "ゲームテーブルは終了しました！ [6018]",
        6019: "テーブルはメンテナンス中です！ [6019]",
        6020: "こちらはプライベートゲームテーブルです。 [6020]",
        6021: "この席は既に埋まっています、他を探して下さい！ [6021]",
        6022: "失敗！再度トライして下さい。[6022]",
        6023: "ベット制限のテーブルを探すことが出来ませんでした、再度トライして下さい。 [6023]",
        6024: "ゲームテーブルを探すことが出来ませんでした、再度トライして下さい。 [6024]",
        6025: "適切な席が見つかりませんでした！ [6025]",
        6026: "ゲームテーブルへの入室に失敗しました、再度トライして下さい！ [6026]",
        6027: "このテーブルは既に満室です、他のゲームテーブルを探して下さい！ [6027]",
        6028: "このゲームの席で既にベットを始めているので席を変える事は出来ません。ゲームテーブルに入室するには、ゲームロビーの”入室”をクリックして下さい！ [6028]",
        6029: "{0}ゲームテーブル {0}が予約されました。参加またはサイドベットを選択して下さい。 [6029]",
        6030: "テーブルオーナーが退出しました！ [6030]",
        6031: "あなたはテーブルオーナーなので席を変える事は出来ません。 [6031]",
        6032: "この回ではサイドベットとなります。今席に座る事は出来ません！ [6032]",
        6033: "このラウンドでは席にベットしています。今サイドベットでテーブルに入室する事は出来ません。 [6033]",
        6034: "このテーブルは予約されていないので参加することは出来ません。 [6034]",
        6035: "申し訳ありませんが、残高が不十分です{0}。サイドベットで参加することが出来ます。 [6035]",
        6037: "ベットに失敗しました！ [6037]",
        6038: "失敗！ 違法にクレジットが変更されました [6038]",
        6039: "失敗！システムがビジーです。 [6039]",
        6040: "失敗！再度ログインして下さい。 [6040]",
        6041: "失敗！ゲームラウンドが見つかりません。 [6041]",
        6042: "失敗！クレジットが不十分です。 [6042]",
        6043: "ベット失敗！ 最大損失を超えています。 [6043]",
        6044: "失敗！ゲームラウンドが終了しました。 [6044]",
        6045: "失敗！情報エラーです。 [6045]",
        6046: "失敗！操作が競合しています！ [6046]",
        6047: "不正なベットです！ [6047]",
        6048: "30ラウンド後はビッグ、スモールと共にベットすることが出来ません！ [6048]",
        6049: "無効なベットです！ [6049]",
        6050: "ベット失敗！ 最大制限を超えています [6050]",
        6052: "ベットがあります、スキップ出来ません！ [6052]",
        6053: "カードが開いています、スキップ出来ません！ [6053]",
        6054: "ゲームラウンドはまだ始まっていません、スキップ出来ません！ [6054]",
        6055: "5回以上スキップしました！ [6055]",
        6057: "ディーラーがいません！ [6057]",
        6058: "不正な操作です。 [6058]",
        6059: "ゲームテーブルが見つかりませんでした。 [6059]",
        6060: "サポートされていない言語です！ [6060]",
        6061: "不正な操作です！ [6061]",
        6062: "パラメーターエラー！ [6062]",
        6063: "ゲームホールが見つかりませんでした、再度トライして下さい。 [6063]",
        6064: "システムメンテナンス中です！ [6064]",
        6065: "適切な制限テーブル又は席が見つかりませんでした！ [6065]",
        6066: "ゲームテーブルが存在しません。 [6066]",
        6067: "ゲームテーブルが見つかりませんでした、再度トライして下さい。 [6067]",
        6068: "パスワードが間違っています！ [6068]",
        6069: "ベットなしでカードを開く事が出来ません！ [6069]",
        6070: "失敗！今回はサイドベットとなります、次回に再度トライして下さい。 [6070]",
        6071: "あなたのテーブルはありません！ [6071]",
        6072: "このテーブルは満室です、サイドベットでトライして下さい！ [6072]",
        6073: "テーブルオーナーがパスワードを設定しました。 [6073]",
        6074: "4分以上ベットがなく、自動的にゲームテーブルから退室しました({{0}})。 [6074]",
        6075: "セッションIDの期限が切れています、前ページに戻りもう一度トライして下さい。 [6075]",
        6076: "セッションIDエラー、再試行してください。 [6076]",
        6077: "セッションIDはもう一度利用してことが出来ません、もう一度トライして下さい。 [6077]",
        6078: "ゲームからログアウトしました。 [6078]",
        6079: "プラットフォームはメンテナンス中です！ [6079]",
        6080: "テーブル入室に失敗しました、再度トライして下さい。 [6080]",
        6081: "テーブル予約に失敗しました、再度トライして下さい。 [6081]",
        6082: "ログインしようとしているゲームはあなたの住む地域では禁止されています。ご不便をおかけし申し訳ありません。 [6082]",
        6083: "ベットに失敗しました。このラウンドではコミッションなしでベットしました。 [6083]",
        6084: "ベットに失敗しました。このラウンドでは手数料とともにベットしました。 [6084]",
        6085: "無効なハンデ、［予約／参加］することが出来ません。［サイドベット］でトライして下さい。 [6085]",
        6086: "パスワードがリセットされました。 もう一度ログインしてください！ [6086]",
        6087: "新しいパスワードと現在のパスワードを同じにすることはできません",
        6088: "現在のVIPハンディキャップによるとこのゲームテーブルに入ることは許可されていません。VIPハンディキャップの調整が必要な場合は、カスタマーサービスまたは上級代理店にお問い合わせください [6088]",
        6090: "リクエストがタイムアウトしました [6090]",
        6091: "ログイン失敗 [6091]",
        6092: "ゲームからログアウトしました [6092]",
        6093: "確認コードが間違っています。再試行してください [6093]",
        6094: "無料トライアルが終了しました（15分）、ゲームからログアウトしました [6094]",
        6095: "ラウンドごとに確認を1回のみ送信できます [6095]",
        6096: "無効な操作 [6096]",
        6097: "確認を実行する際の状態が正しくありません [6097]",
        6098: "<number> ラウンド後にペア関連フィールドにベットすることはできません",
        6099: "取得するレッドパケットはありません [6099]",
        6100: "レッドパケットはすでに取得されています [6100]",
        6101: "アクティビティはまだ開始されていません [6101]",
        6102: "アクティビティのステータスが違法です [6102]",
        6103: "rpaを請求する準備ができていません [6103]",
        6111: "このラウンドでプレイヤーが降伏しました [6111]",
        6112: "このラウンドでプレイヤーがチェックしました [6112]",
        6113: "違法なサブラウンドベッティング状態 [6113]",
        6114: "ベッティング状態にありません [6114]",
        6115: "アンテ/ブラインドなしではトリップにベットできません [6115]",
        6116: "アンテとブラインドは一緒にベットする必要があります [6116]",
        6117: "アンテとブラインドの金額は同じでなければなりません [6117]",
        6118: "最初のラウンドではプレイヤーはアンテ/ブラインド/トリップにしかベットできません [6118]",
        6119: "2回目のラウンドではプレイヤーは4x/3xにしかベットできません [6119]",
        6120: "3回目のラウンドではプレイヤーは2xにしかベットできません [6120]",
        6121: "最後のラウンドではプレイヤーは1xにしかベットできません [6121]",
        6122: "無効なベット額 [6122]",
        6123: "アンテなしではレイズできません [6123]",
        6124: "重複したレイズ [6124]",
        6126: "6連続ゲームラウンドでベットがないため、自動退出しました。 [6126]",
        6200: "応答タイムアウト。カスタマーサービスチームにお問い合わせください。 [6200]",
        6201: "応答タイムアウト。カスタマーサービスチームにお問い合わせください。 [6201]",
        6202: "応答タイムアウト。カスタマーサービスチームにお問い合わせください。 [6202]",
        6203: "応答タイムアウト。カスタマーサービスチームにお問い合わせください。 [6203]",
        6204: "応答タイムアウト。カスタマーサービスチームにお問い合わせください。 [6204]",
        100001: "エージェントがモバイルログインを有効にしていません",
        200001: "エラーが発生しました。詳細については、CSDにお問い合わせください。[1000]",
        200002: "システムタイムアウト。現在のゲームウィンドウを閉じて、再試行してください。[1001]",
        200003: "システムタイムアウト。現在のゲームウィンドウを閉じて、再試行してください。[1002]",
        200004: "エラーが発生しました。詳細については、CSDにお問い合わせください。[1003]",
        200005: "エラーが発生しました。詳細については、CSDにお問い合わせください。[1004]",
        200006: "エラーが発生しました。詳細については、CSDにお問い合わせください。[1005]",
        200007: "エラーが発生しました。詳細については、CSDにお問い合わせください。[1006]",
        200008: "エラーが発生しました。詳細については、CSDにお問い合わせください。[1007]",
        200009: "エラーが発生しました。詳細については、CSDにお問い合わせください。[1008]",
        200011: "アカウントが閉じられました。詳細については、アップラインにお問い合わせください。[2002]",
        200012: "エラーが発生しました。詳細については、CSDにお問い合わせください。[2003]",
        200013: "エラーが発生しました。詳細については、CSDにお問い合わせください。[3001]",
        200014: "アカウント内の資金が不足しています[3002]",
        200015: "賭け金がベット制限の設定を超えました。再試行してください。[3003]",
        200016: "ゲームの接続が切断されました。詳細については、アップラインにお問い合わせください。[3004]",
        200017: "エラーが発生しました。詳細については、CSDにお問い合わせください。[3005]",
        200018: "勝ち制限がヒット！アップラインへお問い合わせください。[3006]",
        200019: "負け制限がヒット！アップラインへお問い合わせください。[3007]",
        200020: "このゲームについては、ベット制限の設定がされていません。設定するには、アップラインにお問い合わせください。[3008]",
        200021: "ベットの限度が変更になりました。新たな設定を有効にするには、再度ログインしてください。[3009]",
        200022: "アカウントが中断されました。詳細については、アップラインにお問い合わせください。[3010]",
        200023: "アカウントが中断されました。詳細については、アップラインにお問い合わせください。[3013]",
        200024: "ゲームは現在利用できません。詳細については、CSDにお問い合わせください。[3014]"
    }, error_msg$1 = {
        ban: "アカウントが他の場所でログインされています。",
        kick: "セッションが期限切れです。プラットフォームに再接続してください！",
        processing_game_bet: "ベットが処理中です。お待ちください。",
        quitGame: "終了するにはOKを押してください",
        relogin: "ログインページに戻るにはOKを押してください。",
        unknown: "ネットワークが切断されました。終了するにはOKを押してください",
        connection: {
            connection_problem: "再接続するにはOKを押してください。",
            server_connection_problem: "再接続するにはOKを押してください。"
        },
        idle: {
            disconnected_reconnect: "再接続するにはOKを押してください。",
            disconnected_to_server: "再接続するにはOKを押してください。"
        }
    }, fast_bet$1 = {title: "ファストベット"}, game_hall$1 = {
        banner_more_detail: "もっと見る",
        feature_games: "おすすめゲーム",
        good_roads: "おすすめの賭け",
        hot_games: "人気ゲーム",
        multi_play: "マルチプレイ",
        view_all: "すべて見る",
        vip_betlimit: "賭け金制限",
        vip_enter: "入室",
        vip_min_enter: "最小残高",
        vip_occupied: "予約済み",
        vip_reserve: "予約",
        subtypes: {
            all: "全て",
            classic: "クラシック",
            insurance: "保険",
            quick: "クイック",
            see: "カードを見る",
            sexy: "セクシー",
            vip: "VIP"
        }
    }, game_rules$1 = {
        attention: "注意",
        game_rules: "ゲームルール",
        introduction: "イントロダクション",
        payoff: "支払い",
        title: "ゲームルール"
    }, game_table$1 = {
        balanace: "残高",
        deposit: "入金",
        deposit_short: "D",
        total_bet: "合計掛け金",
        trial: "トライアル",
        baccarat: {no_comm: "手数料なし"},
        blackjack: {
            all_side_bets: "全サイドベット",
            ante_first: "まずアンテをベットしてください",
            banker: "バンカー",
            double: "ダブル",
            hit: "ヒット",
            insufficient_insurance: "保険のためのバランスが不足しています",
            insurance: "保険？",
            other_decison: "他のプレイヤーが決定を行っています",
            player: "プレーヤー",
            split: "スプリット",
            stand: "スタンド",
            instruction: {
                213: {
                    content: "プレイヤーの最初のカードとディーラーのアップカードの組み合わせが特定のカードタイプを形成した場合に勝利します。",
                    title: "ラッキー 3"
                },
                label: "指示",
                ante: {
                    content: "プレイヤーの手札の値がディーラーの手札より21に近く、21を超えない場合に勝利します。",
                    title: "アンテ"
                },
                bust: {content: "ディーラーがバストした場合に勝利します。", title: "バスト イット"},
                hot3: {
                    content: "プレイヤーの最初のカードとディーラーのアップカードの合計が19-21の場合に勝利します。",
                    title: "ホット 3"
                },
                lucky_ladies: {
                    content: "プレイヤーの最初のカードが特定のカードタイプを形成した場合に勝利します。",
                    title: "ラッキー レディーズ"
                },
                pair: {content: "プレイヤーの最初のカードがペアの場合に勝利します。", title: "ペア"}
            }
        },
        bullbull: {
            banker: "バンカー",
            banker_allwin: "バンカー全員勝利",
            first_card: "最初のカード",
            player_allwin: "プレイヤー全員勝利"
        },
        casino_war: {
            "1st_tie": "1st タイ",
            "2nd_tie": "2nd タイ",
            banker: "バンカー",
            decision: "決定してください",
            player_1: "プレーヤー1",
            player_2: "プレーヤー2",
            player_3: "プレーヤー3",
            surrender: "降参"
        },
        fpc: {any_two_dice: "任意の2つのサイコロ", both_one_dice: "両方のサイコロ1つ"},
        roulette: {orphelins: "オルフェラン", tier: "ティア", voisins: "ヴォワザン", zero: "ゼロ"},
        seecard: {other_squeezing: "他のプレイヤーがカードを絞っています"},
        teen_patti: {pair_plus: "ペア+"},
        uth: {
            banker: "バンカー",
            community: "コミュニティ",
            decision: "決定してください",
            play: "プレイ",
            player_1: "プレーヤー1",
            player_1_short: "P1",
            player_2: "プレーヤー2",
            player_2_short: "P2",
            player_3: "プレーヤー3",
            player_3_short: "P3",
            raise1x: "レイズ 1x",
            raise2x: "レイズ 2x",
            raise3x: "レイズ 3x",
            raise4x: "レイズ 4x"
        },
        vip: {
            owner_squeezing: "オーナーがカードを絞っています",
            owner_tooltip: "オーナー",
            reserve_action_tooltip: "予約",
            reserve_betlimit: "賭け金制限",
            reserve_min_enter: "最低バランス",
            reserve_request: "テーブル予約済み。次のラウンドでオーナーになります。",
            reserved_tooltip: "予約",
            shuffle_request: "シャッフルリクエストが提示されました。シャッフルは5分以内に行われます",
            shuffle_tooltip: "シャッフル",
            skip_tooltip: "フリーゲーム",
            start_tooltip: "開始"
        }
    }, game_types$1 = {
        101: "バカラ",
        102: "VIPバカラ（レガシー）",
        103: "クイックバカラ",
        104: "カードを見るバカラ",
        110: "保険付きバカラ",
        111: "VIPバカラ",
        201: "シックボー",
        202: "フィッシュプラウンクラブ",
        203: "ソックディア",
        301: "ドラゴンタイガー",
        401: "ルーレット",
        501: "クラシックポクデン",
        602: "Andar Bahar",
        603: "ティーンパティ20-20",
        702: "アルティメットテキサスホールデム",
        703: "カジノウォー",
        704: "インフィニットブラックジャック",
        801: "ブルブル",
        901: "ウィン3カード",
        "201_Alt": "ハイロー",
        "201_Alt_2": "ファンタン",
        "501_Alt": "ツーサイドポクデン",
        "901_Alt": "スリーカード",
        "901_Alt_2": "ティーンパティ20-20",
        arcadeGame: "カジノゲーム",
        card_game: "カードゲーム",
        cardGame: "カードゲーム",
        classic: "クラシック",
        fishingGame: "ABフィッシング",
        game_hall: "ロビー",
        multi_hall: "マルチプレイ",
        sexy: "セクシー",
        slotGame: "スロットゲーム",
        UTH_Short: "アルティメットテキサスホールデム"
    }, gamehall_table$1 = {
        maintaining: "メンテナンス",
        notable: "利用可能なテーブルはありません",
        good_road: {
            100: "長いバンカー",
            101: "長いプレイヤー",
            102: "シングルロード",
            103: "ワンPツービー",
            104: "ワンBツーピー",
            105: "パットイート",
            106: "BアクロスP",
            107: "PアクロスB",
            108: "セパレートB",
            109: "セパレートP"
        }
    }, header$1 = {
        bet_record: "賭け記録",
        card_game: "AB FISHING",
        exitfullscreen: "全画面表示を終了",
        fullscreen: "全画面表示",
        hot_games: "LOBBY",
        live_games: "LIVE GAMES",
        logout: "ログアウト",
        multi_table: "MULTIPLAY",
        profile: "プロフィール",
        services: "サービス",
        Version: "バージョン"
    }, login$1 = {free_trial: "無料トライアル", login: "ログイン", password: "パスワード", username: "ユーザー名"},
    menu$1 = {
        addToHomeScreenForIOS: "ホーム画面に追加",
        back: "ロビーに戻る",
        downloadApp: "アプリをダウンロード",
        exitfullscreen: "全画面表示を終了",
        fast_bet: "ファストベット",
        fullscreen: "全画面表示",
        guide: "ヘルプ",
        history: "賭け記録",
        installation_instruction: "インストラクション",
        installPwa: "インストール",
        lobby: "ロビー",
        loginApp: "アプリにログイン",
        payout: "支払い",
        settings: "設定",
        title: "メニュー",
        verification: "ビデオ認証",
        video: "リロード"
    }, messages$1 = {
        all_in: "全ての金額を賭ける",
        bet_success: "ベット成功",
        cancel: "取り消し",
        game_table_verified: "確認が送信されました。画面上の確認結果を確認してください",
        idle_video: "ビデオは非アクティブのため一時停止されました。再開するにはOKを",
        insufficient_bet_balance: "クレジットが足りません",
        insufficient_vip_balance: "金額が不足しています",
        landscape_block: "最適な体験のためにモバイルデバイスを回転させてください",
        loading: "読み込み中",
        logout: "押してください",
        logoutOK: "ログアウト",
        lost: "あなたは負けました",
        multi_side_hall_filter: "Filter cannot be empty, please select at least one game type.",
        nickname_success: "ニックネーム更新！",
        ok_button: "OK",
        screen_size_block: "最適な体験のためにウィンドウのサイズを変更してください",
        table_not_found: "ゲームテーブルが見つかりません",
        table_under_maintenance: "テーブルはメンテナンス中です",
        won: "あなたは勝ちました"
    }, payout$1 = {
        bet: "ベット", bet_limit: "賭け金制限", odds: "オッズ", payout: "支払い", bet_type: {
            1001: "バンカー",
            1002: "プレーヤー",
            1003: "タイ",
            1006: "マニュアルでB",
            1007: "プレーヤーペア",
            1011: "バンカー (手数料なし)",
            1100: "ラッキー 6",
            1211: "バンカーナチュラル",
            1212: "プレイヤーナチュラル",
            1223: "いずれかのペア",
            1224: "パーフェクトペア",
            1231: "Bボーナス",
            1232: "Pボーナス",
            1401: "タイガー",
            1402: "スモールタイガー",
            1403: "ビッグタイガー",
            1404: "タイガーペア",
            1405: "タイガータイ",
            1501: "バンカーファビュラス 4",
            1502: "プレイヤーファビュラス 4",
            1503: "バンカープレシャス ペア",
            1504: "プレイヤープレシャス ペア",
            1601: "バンカーブラック",
            1602: "バンカーレッド",
            1603: "プレイヤーブラック",
            1604: "プレイヤーレッド",
            1605: "いずれかの 6",
            2001: "ドラゴン",
            2002: "タイガー",
            2003: "タイ",
            3001: "ビッグ / スモール",
            3002: "偶数 / 奇数",
            3005: "特定トリプル",
            3011: "トリプル",
            3012: "特定ダブル",
            3018: "合計4/17",
            3019: "合計5/16",
            3020: "合計6/15",
            3021: "合計7/14",
            3022: "合計8/13",
            3023: "合計9/10/11/12",
            3033: "2ダイスの組み合わせ",
            3048: "1ダイス",
            3049: "2ダイス",
            3050: "3ダイス",
            3200: "ハイ",
            3201: "ロー",
            3202: "11ハイロー",
            3203: "ダイス1-6",
            3209: "2ダイスの組み合わせ",
            3224: "1ロー",
            3225: "2ロー",
            3226: "3ロー",
            3227: "4ロー",
            3228: "5-6ロー",
            3230: "3-4ハイ",
            3232: "5ハイ",
            3233: "6ハイ",
            3234: "3ダイスの組み合わせ",
            3301: "メインシンボル",
            3307: "特定のシングルカラー",
            3310: "特定のダブルカラー",
            3313: "特定のトリプルカラー",
            3316: "任意のトリプルカラー",
            3317: "2ダイスの組み合わせ",
            3401: "奇数 / 偶数",
            3403: "FAN",
            3407: "NIM",
            3419: "NGA",
            3431: "SSH",
            3435: "12 KWOK / 23 KWOK / 34 KWOK",
            3438: "41 KWOK",
            3500: "タイ",
            3501: "スモール",
            3502: "ビッグ",
            3503: "オッド",
            3504: "イーブン",
            3505: "0",
            3506: "1",
            3507: "3",
            3508: "4",
            4001: "ビッグ / スモール",
            4002: "奇数 / 偶数",
            4003: "赤 / 黒",
            4007: "ダース",
            4010: "コラム",
            4013: "ストレート",
            4050: "3つの番号",
            4052: "4つの番号",
            4053: "個別",
            4113: "三角",
            4135: "ストリート",
            4147: "回線",
            5001: "プレイヤー1-5",
            5011: "プレイヤー1-5ペア",
            5101: "プレイヤー1-5",
            5106: "バンカー",
            5111: "バンカーペア",
            6201: "ANDAR",
            6202: "BAHAR",
            6203: "1-5枚のカード",
            6204: "6-10枚のカード",
            6205: "11-15枚のカード",
            6206: "16-25枚のカード",
            6207: "26-30枚のカード",
            6208: "31-35枚のカード",
            6209: "36-40枚のカード",
            6210: "41枚以上のカード",
            6211: "1番目のアンダー",
            6212: "1番目のバハール",
            6301: "プレイヤーA",
            6302: "プレイヤーB",
            6303: "引き分け",
            6304: "プレイヤーAペアプラス",
            6305: "プレイヤーBペアプラス",
            6306: "6カードボーナス",
            7201: "プレイヤー1-3アンティ",
            7202: "プレイヤー1-3ブラインド",
            7203: "プレイヤー1-3トリップス",
            7301: "プレイヤー1-3アンティ",
            7302: "プレイヤー1-3 1番目の引き分け",
            7304: "プレイヤー1-3 2番目の引き分け",
            7401: "アンティ",
            7404: "任意のペア",
            7405: "ラッキー3",
            7406: "ホット3",
            7407: "バストイット",
            7409: "ラッキーレディース",
            8001: "バンカー1",
            8002: "バンカー2",
            8003: "バンカー3",
            8011: "バンカー1",
            8012: "バンカー2",
            8013: "バンカー3",
            8021: "バンカー1",
            8022: "バンカー2",
            8023: "バンカー3",
            8101: "プレーヤー1",
            8102: "プレーヤー2",
            8103: "プレーヤー3",
            8111: "プレーヤー1",
            8112: "プレーヤー2",
            8113: "プレーヤー3",
            8121: "プレーヤー1",
            8122: "プレーヤー2",
            8123: "プレーヤー3",
            9001: "ドラゴン",
            9002: "フェニックス",
            9003: "ペア8以上",
            9004: "ストレート",
            9005: "フラッシュ",
            9006: "ストレートフラッシュ",
            9007: "スリーオブアカインド",
            9101: "ドラゴン",
            9102: "フェニックス",
            9103: "引き分け",
            9114: "ドラゴン3ピクチャーズ",
            9124: "フェニックス3ピクチャーズ"
        }
    }, profile$1 = {
        save: "保存",
        title: "プロフィール",
        main_view: {change_password: "パスワードを変更?", nickname: "ニックネーム", pending: "待機"},
        password_view: {
            confirm_password: "パスワードを確認",
            current_password: "現在のパスワード",
            hints: "6〜10文字の英数字を入力してください",
            new_password: "新しいパスワード"
        }
    }, roadmap$1 = {
        analysis: "分析",
        history: "履歴",
        last_10_rounds: "過去10ラウンド",
        last_50_rounds: "過去50ラウンド",
        last_6_rounds: "過去6ラウンド",
        round_num: "ラウンド #",
        statistics: "統計",
        andar_bahar: {andar: "ANDAR", bahar: "BAHAR"},
        baccarat: {
            banker: "B",
            player: "P",
            predict_banker: "バンカーを予測",
            predict_player: "プレイヤーを予測",
            tie: "T"
        },
        bull_bull: {
            game_hall: {
                0: "NB",
                1: "B1",
                2: "B2",
                3: "B3",
                4: "B4",
                5: "B5",
                6: "B6",
                7: "B7",
                8: "B8",
                9: "B9",
                A: "BB",
                B: "5D",
                banker: "B",
                player_1: "P1",
                player_2: "P2",
                player_3: "P3"
            },
            game_table: {
                0: "ブルなし",
                1: "Bull 1",
                2: "Bull 2",
                3: "Bull 3",
                4: "Bull 4",
                5: "Bull 5",
                6: "Bull 6",
                7: "Bull 7",
                8: "Bull 8",
                9: "Bull 9",
                A: "ブルブル",
                B: "5 公爵",
                banker: "バンカー",
                player_1: "プレーヤー1",
                player_2: "プレーヤー2",
                player_3: "プレーヤー3"
            }
        },
        casino_war: {banker: "B", player_1: "P1", player_2: "P2", player_3: "P3"},
        dragon_tiger: {
            dragon: "D",
            predict_dragon: "ドラゴンを予測",
            predict_tiger: "タイガーを予測",
            tie: "T",
            tiger: "T"
        },
        hi_lo: {hi: "ハイ", hi_lo: "11", lo: "ロウ"},
        pokdeng: {banker: "B", player_1: "P1", player_2: "P2", player_3: "P3", player_4: "P4", player_5: "P5"},
        roulette: {hot_cold: "ホット＆コールド"},
        sicbo: {big: "ビッグ", small: "スモール", triple: "トリプル"},
        sictan: {even: "イーブン", fan_1: "1 FAN", fan_2: "2 FAN", fan_3: "3 FAN", fan_4: "4 FAN", odd: "オッド"},
        teen_patti: {
            235: "235",
            flush: "フラッシュ",
            four_of_a_kind: "フォーカード",
            full_house: "フルハウス",
            high_card: "ハイカード",
            pair: "ペア",
            pair_plus: "ペア+",
            player_a: "A",
            player_b: "B",
            royal_flush: "ロイヤルフラッシュ",
            straight: "ストレート",
            straight_flush: "ストレートフラッシュ",
            three_of_a_kind: "スリーカード",
            tie: "T"
        },
        three_pictures: {
            double_pictures: "DP",
            dragon: "D",
            phoenix: "P",
            single_picture: "SP",
            tie: "T",
            triple_pictures: "3P"
        },
        win3cards: {
            235: "235",
            dragon: "D",
            flush: "フラッシュ",
            high_card: "ハイカード",
            "p8+": "P8",
            pair: "ペア",
            phoenix: "P",
            straight: "ストレート",
            straight_flush: "ストレートフラッシュ",
            three_of_a_kind: "スリーカード",
            tie: "T"
        },
        xocdia: {even: "イーブン", odd: "オッド", tie: "引き分け", big: "ビッグ", small: "スモール", o: "O", e: "E"}
    }, settings$1 = {
        title: "設定",
        bullbull: {
            double: "2倍",
            equal: "引き分け",
            play_type: "プレイ種類",
            play_type_multiplay: "プレイ種類（ブルブル）",
            super: "スーパーブル"
        },
        general: {
            confirmed_bet_amounts: "確認済みベット額",
            languages: "言語",
            side_bets: "サイドベット",
            statistics: "ベッティング統計",
            title: "ディスプレイ"
        },
        scorecards: {classic: "クラシック", immersive: "没入型", title: "スコアカード"},
        sound: {live: "ライブサウンド", system: "システムサウンド", title: "サウンド"}
    }, side_hall_filter$1 = {
        101: "バカラ",
        103: "クイック",
        104: "カードを見る",
        110: "保険",
        111: "VIP",
        201: "シックボー",
        202: "フィッシュプラウンクラブ",
        203: "ソックディア",
        301: "ドラゴンタイガー",
        401: "ルーレット",
        501: "クラシックポクデン",
        602: "アンダール・バハール",
        603: "ティーンパティ20-20",
        801: "ブルブル",
        901: "ウィン3カード",
        "201_Alt": "ハイロー",
        "201_Alt_2": "ファンタン",
        "501_Alt": "ツーサイドポクデン",
        "901_Alt": "スリーカード",
        "901_Alt_2": "ティーンパティ20-20",
        asia: "アジアゲーム",
        baccarat: "バカラ",
        classic: "クラシック",
        europe: "ヨーロッパゲーム",
        global: "グローバルゲーム",
        other: "他のゲーム",
        sexy: "セクシー"
    }, ja = {
        baccarat_gameplay: baccarat_gameplay$1,
        bet_record: bet_record$1,
        bet_type: bet_type$1,
        custom_chips: custom_chips$1,
        detailed_bet_type: detailed_bet_type$1,
        error_code: error_code$1,
        error_msg: error_msg$1,
        fast_bet: fast_bet$1,
        game_hall: game_hall$1,
        game_rules: game_rules$1,
        game_table: game_table$1,
        game_types: game_types$1,
        gamehall_table: gamehall_table$1,
        header: header$1,
        login: login$1,
        menu: menu$1,
        messages: messages$1,
        payout: payout$1,
        profile: profile$1,
        roadmap: roadmap$1,
        settings: settings$1,
        side_hall_filter: side_hall_filter$1
    }, baccarat_gameplay = {
        basic: "Cơ bản",
        default: "Mặc định",
        fabulous_4: "Tuyệt vời 4",
        natural: "May mắn tự nhiên 6",
        super: "Siêu Baccarat",
        switch: "Chuyển đổi trò chơi",
        tiger: "Hổ"
    }, bet_record = {
        bet_amount: "Số tiền cược",
        bet_type: "Loại cược",
        betting_number: "Số cược",
        date_time: "Ngày & Giờ",
        game: "Trò chơi",
        game_type: "Loại trò chơi",
        gameround_id: "ID Vòng chơi",
        loading: "Đang tải",
        next: "Tiếp theo",
        no_video: "Lưu ý rằng vòng chơi này không hợp lệ và video trực tiếp sẽ không được hiển thị.",
        previous: "Trước",
        shoe_round: "Vòng-Đôi giày",
        status: "Trạng thái",
        table_number: "Số bàn",
        total_bet: "Tổng cược",
        valid_bet: "Cược hợp lệ",
        win_loss: "Thắng/Thua",
        bet_status: {100: "Cược", 101: "Thất bại", 110: "Chưa giải quyết", 111: "Đã giải quyết", 120: "Hoàn trả"},
        title: {details: "Chi tiết", records: "Lịch sử cược"}
    }, bet_type = {
        1001: "NHÀ CÁI",
        1002: "NGƯỜI CHƠI",
        1003: "HÒA",
        1006: "B ĐÔI",
        1007: "P ĐÔI",
        1011: "Nhà cái",
        1100: "May mắn 6",
        1211: "Nhà cái tự nhiên",
        1212: "Người chơi tự nhiên",
        1223: "BẤT KỲ ĐÔI NÀO",
        1224: "ĐÔI HOÀN HẢO",
        1231: "B THƯỞNG",
        1232: "P THƯỞNG",
        1301: "BẢO HIỂM",
        1302: "BẢO HIỂM",
        1303: "BẢO HIỂM",
        1304: "BẢO HIỂM",
        1401: "Hổ",
        1402: "Hổ nhỏ",
        1403: "Hổ lớn",
        1404: "Cặp Hổ",
        1405: "Hổ hòa",
        1501: "Nhà cái tuyệt vời 4",
        1502: "Người chơi tuyệt vời 4",
        1503: "Cặp quý giá nhà cái",
        1504: "Cặp quý giá người chơi",
        1601: "Nhà cái đen",
        1602: "Nhà cái đỏ",
        1603: "Người chơi đen",
        1604: "Người chơi đỏ",
        1605: "Bất kỳ 6",
        2001: "RỒNG",
        2002: "HỔ",
        2003: "HÒA",
        3001: "NHỎ",
        3002: "LẺ",
        3003: "CHẴN",
        3004: "LỚN",
        3011: "BẤT KỲ BỘ BA NÀO",
        3048: "MỘT",
        3049: "HAI",
        3050: "BA",
        3051: "BỐN",
        3052: "NĂM",
        3053: "SÁU",
        3200: "HI",
        3201: "LO",
        3225: "LO",
        3227: "LO",
        3228: "LO",
        3229: "LO",
        3230: "HI",
        3232: "HI",
        3401: "LẺ",
        3402: "CHẴN",
        3403: "1 FAN",
        3404: "2 FAN",
        3405: "3 FAN",
        3406: "4 FAN",
        3407: "1NIM2",
        3408: "1NIM3",
        3409: "1NIM4",
        3410: "2NIM1",
        3411: "2NIM3",
        3412: "2NIM4",
        3413: "3NIM1",
        3414: "3NIM2",
        3415: "3NIM4",
        3416: "4NIM1",
        3417: "4NIM2",
        3418: "4NIM3",
        3419: "23ONE NGA",
        3420: "24ONE NGA",
        3421: "34ONE NGA",
        3422: "13TWO NGA",
        3423: "14TWO NGA",
        3424: "34TWO NGA",
        3425: "12THREE NGA",
        3426: "14THREE NGA",
        3427: "24THREE NGA",
        3428: "13FOUR NGA",
        3429: "12FOUR NGA",
        3430: "23FOUR NGA",
        3431: "SSH123",
        3432: "SSH124",
        3433: "SSH134",
        3434: "SSH234",
        3435: "KWOK12",
        3436: "KWOK23",
        3437: "KWOK34",
        3438: "KWOK41",
        3501: "NHỎ",
        3502: "LỚN",
        3503: "LẺ",
        3504: "CHẴN",
        4001: "1 - 18",
        4002: "CHẴN",
        4005: "LẺ",
        4006: "19 - 36",
        4007: "NHẤT",
        4008: "NHÌ",
        4009: "RD",
        4010: "",
        4011: "",
        4012: "",
        5001: "P1",
        5002: "P2",
        5003: "P3",
        5004: "P4",
        5005: "P5",
        5011: "P1 ĐÔI",
        5012: "P2 ĐÔI",
        5013: "P3 ĐÔI",
        5014: "P4 ĐÔI",
        5015: "P5 ĐÔI",
        5101: "P1",
        5102: "P2",
        5103: "P3",
        5104: "P4",
        5105: "P5",
        5106: "B1",
        5107: "B2",
        5108: "B3",
        5109: "B4",
        5110: "B5",
        5111: "B ĐÔI",
        6201: "ANDAR",
        6202: "BAHAR",
        6203: "1-5",
        6204: "6-10",
        6205: "11-15",
        6206: "16-25",
        6207: "26-30",
        6208: "31-35",
        6209: "36-40",
        6210: "41+",
        6211: "<span>1</span>st ANDAR",
        6212: "<span>1</span>st BAHAR",
        6301: "NGƯỜI CHƠI A",
        6302: "NGƯỜI CHƠI B",
        6303: "HÒA",
        6304: "NGƯỜI CHƠI A ĐÔI+",
        6305: "NGƯỜI CHƠI B ĐÔI+",
        6306: "THƯỞNG 6 LÁ",
        7201: "TIỀN ĐẶT CỌC",
        7202: "MÙ",
        7203: "TRIPS",
        7204: "TĂNG 4X",
        7205: "TĂNG 3X",
        7206: "TĂNG 2X",
        7207: "TĂNG 1X",
        7211: "TIỀN ĐẶT CỌC",
        7212: "MÙ",
        7213: "TRIPS",
        7214: "TĂNG 4X",
        7215: "TĂNG 3X",
        7216: "TĂNG 2X",
        7217: "TĂNG 1X",
        7221: "TIỀN ĐẶT CỌC",
        7222: "MÙ",
        7223: "TRIPS",
        7224: "TĂNG 4X",
        7225: "TĂNG 3X",
        7226: "TĂNG 2X",
        7227: "TĂNG 1X",
        7301: "TIỀN ĐẶT CỌC",
        7302: "HÒA",
        7303: "CHIẾN TRANH",
        7304: "HÒA THỨ HAI",
        7311: "TIỀN ĐẶT CỌC",
        7312: "HÒA",
        7313: "CHIẾN TRANH",
        7314: "HÒA THỨ HAI",
        7321: "TIỀN ĐẶT CỌC",
        7322: "HÒA",
        7323: "CHIẾN TRANH",
        7324: "HÒA THỨ HAI",
        7401: "TIỀN ĐẶT CỌC",
        7402: "TIỀN ĐẶT CỌC GẤP ĐÔI",
        7403: "CHIA",
        7404: "ĐÔI",
        7405: "May Mắn 3",
        7406: "NÓNG 3",
        7407: "BUST IT",
        7408: "BẢO HIỂM",
        7409: "CẶP ĐÔI MAY MẮN",
        8001: "NHÀ CÁI 1",
        8002: "NHÀ CÁI 2",
        8003: "NHÀ CÁI 3",
        8011: "NHÀ CÁI 1",
        8012: "NHÀ CÁI 2",
        8013: "NHÀ CÁI 3",
        8021: "NHÀ CÁI 1",
        8022: "NHÀ CÁI 2",
        8023: "NHÀ CÁI 3",
        8101: "NGƯỜI CHƠI 1",
        8102: "NGƯỜI CHƠI 2",
        8103: "NGƯỜI CHƠI 3",
        8111: "NGƯỜI CHƠI 1",
        8112: "NGƯỜI CHƠI 2",
        8113: "NGƯỜI CHƠI 3",
        8121: "NGƯỜI CHƠI 1",
        8122: "NGƯỜI CHƠI 2",
        8123: "NGƯỜI CHƠI 3",
        9001: "RỒNG",
        9002: "PHƯỢNG HOÀNG",
        9003: "ĐÔI 8 TRỞ LÊN",
        9004: "THẲNG",
        9005: "ĐỒNG CHẤT",
        9006: "THẲNG ĐỒNG CHẤT",
        9007: "BA CÁI GIỐNG NHAU",
        9101: "RỒNG",
        9102: "PHƯỢNG HOÀNG",
        9103: "HÒA",
        9114: "RỒNG BA HÌNH",
        9124: "PHƯỢNG HOÀNG BA HÌNH",
        tips: {
            6306: "Thùng Phá Sảnh/Thẳng Đồng Chất/Tứ Quý/Cù Lũ/Đồng Chất/Thẳng/Ba Cái Giống Nhau",
            9003: "Bao gồm Đôi 9 - Đôi A/Thẳng/Đồng Chất/Thẳng Đồng Chất/Ba Cái Giống Nhau",
            banker_insurance: "Cược Bảo Hiểm Nhà Cái",
            bullbull_firstcard: "Lá Bài Đầu Tiên",
            cards_dealt: "Bài Được Chia",
            check: "KIỂM TRA",
            checked: "BẠN KIỂM TRA",
            comm_betted: "Bạn đã đặt cược vào Hoa hồng trong vòng này",
            double_text: "HAI XÚC XẮC",
            fold: "BỎ BÀI",
            folded: "BẠN BỎ BÀI",
            house_card: "NHÀ",
            lose: "BẠN THUA",
            no_bet_after: "Sau ván %1 trong mỗi bộ bài, không thể đặt cược vào %2.",
            no_comm_betted: "Bạn đã đặt cược vào Không hoa hồng trong vòng này",
            no_pairs: "Sau ván chơi thứ 50 trong mỗi ván, không được phép đặt cược vào Đôi.",
            player_1: "NGƯỜI CHƠI 1",
            player_2: "NGƯỜI CHƠI 2",
            player_3: "NGƯỜI CHƠI 3",
            player_insurance: "Cược Bảo Hiểm Người Chơi",
            raised: "BẠN TĂNG CƯỢC",
            single_text: "MỘT XÚC XẮC",
            surrender: "ĐẦU HÀNG",
            tie: "BẠN HÒA",
            triple_text: "BA XÚC XẮC",
            war: "VÀO CHIẾN TRANH",
            win: "BẠN THẮNG"
        }
    }, custom_chips = {
        chip_value_exists: "Giá trị chip này đã tồn tại. Vui lòng thử giá trị khác.",
        choose_common_chips: "Chọn Chip Phổ Thông",
        custom_chips_value: "Giá Trị Chip Tùy Chỉnh",
        min_chip_count: "Vui lòng chọn ít nhất 5 chip.",
        min_chip_value: "Giá trị chip tối thiểu cho phép là",
        select_all: "Chọn Tất Cả",
        title: "Chip Tùy Chỉnh"
    }, detailed_bet_type = {
        1001: "Nhà Cái",
        1002: "Người Chơi",
        1003: "Hòa",
        1006: "Đôi Nhà Cái",
        1007: "Đôi Người Chơi",
        1011: "Nhà Cái (Không hoa hồng)",
        1100: "May mắn 6",
        1211: "Nhà cái tự nhiên",
        1212: "Người chơi tự nhiên",
        1223: "Bất Kỳ Đôi Nào",
        1224: "Đôi Hoàn Hảo",
        1231: "Thưởng Nhà Cái",
        1232: "Thưởng Người Chơi",
        1301: "Bảo Hiểm Nhà Cái 1",
        1302: "Bảo Hiểm Nhà Cái 2",
        1303: "Bảo Hiểm Người Chơi 1",
        1304: "Bảo Hiểm Người Chơi 2",
        1401: "Hổ",
        1402: "Hổ nhỏ",
        1403: "Hổ lớn",
        1404: "Cặp Hổ",
        1405: "Hổ hòa",
        1501: "Nhà cái tuyệt vời 4",
        1502: "Người chơi tuyệt vời 4",
        1503: "Cặp quý giá nhà cái",
        1504: "Cặp quý giá người chơi",
        1601: "Nhà cái đen",
        1602: "Nhà cái đỏ",
        1603: "Người chơi đen",
        1604: "Người chơi đỏ",
        1605: "Bất kỳ 6",
        2001: "Rồng",
        2002: "Hổ",
        2003: "Hòa",
        3001: "Nhỏ",
        3002: "Lẻ",
        3003: "Chẵn",
        3004: "Lớn",
        3005: "Bộ Ba 1",
        3006: "Bộ Ba 2",
        3007: "Bộ Ba 3",
        3008: "Bộ Ba 4",
        3009: "Bộ Ba 5",
        3010: "Bộ Ba 6",
        3011: "Bất Kỳ Bộ Ba Nào",
        3012: "Đôi 1",
        3013: "Đôi 2",
        3014: "Đôi 3",
        3015: "Đôi 4",
        3016: "Đôi 5",
        3017: "Đôi 6",
        3018: "Tổng 4",
        3019: "Tổng 5",
        3020: "Tổng 6",
        3021: "Tổng 7",
        3022: "Tổng 8",
        3023: "Tổng 9",
        3024: "Tổng 10",
        3025: "Tổng 11",
        3026: "Tổng 12",
        3027: "Tổng 13",
        3028: "Tổng 14",
        3029: "Tổng 15",
        3030: "Tổng 16",
        3031: "Tổng 17",
        3033: "Hai Xúc Xắc 1,2",
        3034: "Hai Xúc Xắc 1,3",
        3035: "Hai Xúc Xắc 1,4",
        3036: "Hai Xúc Xắc 1,5",
        3037: "Hai Xúc Xắc 1,6",
        3038: "Hai Xúc Xắc 2,3",
        3039: "Hai Xúc Xắc 2,4",
        3040: "Hai Xúc Xắc 2,5",
        3041: "Hai Xúc Xắc 2,6",
        3042: "Hai Xúc Xắc 3,4",
        3043: "Hai Xúc Xắc 3,5",
        3044: "Hai Xúc Xắc 3,6",
        3045: "Hai Xúc Xắc 4,5",
        3046: "Hai Xúc Xắc 4,6",
        3047: "Hai Xúc Xắc 5,6",
        3048: "Xúc Xắc 1",
        3049: "Xúc Xắc 2",
        3050: "Xúc Xắc 3",
        3051: "Xúc Xắc 4",
        3052: "Xúc Xắc 5",
        3053: "Xúc Xắc 6",
        3200: "Hi",
        3201: "Lo",
        3202: "11 Hi-Lo",
        3203: "Xúc Xắc 1",
        3204: "Xúc Xắc 2",
        3205: "Xúc Xắc 3",
        3206: "Xúc Xắc 4",
        3207: "Xúc Xắc 5",
        3208: "Xúc Xắc 6",
        3209: "HiLo 1-2",
        3210: "HiLo 1-3",
        3211: "HiLo 1-4",
        3212: "HiLo 1-5",
        3213: "HiLo 1-6",
        3214: "HiLo 2-3",
        3215: "HiLo 2-4",
        3216: "HiLo 2-5",
        3217: "HiLo 2-6",
        3218: "HiLo 3-4",
        3219: "HiLo 3-5",
        3220: "HiLo 3-6",
        3221: "HiLo 4-5",
        3222: "HiLo 4-6",
        3223: "HiLo 5-6",
        3224: "1-Lo",
        3225: "2-Lo",
        3226: "3-Lo",
        3227: "4-Lo",
        3228: "5-Lo",
        3229: "6-Lo",
        3230: "3-Hi",
        3231: "4-Hi",
        3232: "5-Hi",
        3233: "6-Hi",
        3234: "1,2,3",
        3235: "2,3,4",
        3236: "3,4,5",
        3237: "4,5,6",
        3301: "Cá",
        3302: "Tôm",
        3303: "Bầu",
        3304: "Đồng Xu",
        3305: "Cua",
        3306: "Gà",
        3307: "Cụ Thể Một Màu Đỏ",
        3308: "Cụ Thể Một Màu Xanh Lá",
        3309: "Cụ Thể Một Màu Xanh Dương",
        3310: "Cụ Thể Đôi Đỏ",
        3311: "Cụ Thể Đôi Xanh Lá",
        3312: "Cụ Thể Đôi Xanh Dương",
        3313: "Cụ Thể Bộ Ba Đỏ",
        3314: "Cụ Thể Bộ Ba Xanh Lá",
        3315: "Cụ Thể Bộ Ba Xanh Dương",
        3316: "BẤT KỲ MÀU BA",
        3317: "Bầu & Tôm",
        3318: "Bầu & Cá",
        3319: "Bầu & Gà",
        3320: "Bầu & Cua",
        3321: "Bầu & Đồng Xu",
        3322: "Tôm & Cá",
        3323: "Tôm & Gà",
        3324: "Tôm & Cua",
        3325: "Tôm & Đồng Xu",
        3326: "Cá & Gà",
        3327: "Cá & Cua",
        3328: "Cá & Đồng Xu",
        3329: "Gà & Cua",
        3330: "Gà & Đồng Xu",
        3331: "Cua & Đồng Xu",
        3401: "Lẻ",
        3402: "Chẵn",
        3403: "1Fan",
        3404: "2Fan",
        3405: "3Fan",
        3406: "4Fan",
        3407: "1Nim2",
        3408: "1Nim3",
        3409: "1Nim4",
        3410: "2Nim1",
        3411: "2Nim3",
        3412: "2Nim4",
        3413: "3Nim1",
        3414: "3Nim2",
        3415: "3Nim4",
        3416: "4Nim1",
        3417: "4Nim2",
        3418: "4Nim3",
        3419: "23 One Nga",
        3420: "24 One Nga",
        3421: "34 One Nga",
        3422: "13 Two Nga",
        3423: "14 Two Nga",
        3424: "34 Two Nga",
        3425: "12 Three Nga",
        3426: "14 Three Nga",
        3427: "24 Three Nga",
        3428: "13 Four Nga",
        3429: "12 Four Nga",
        3430: "23 Four Nga",
        3431: "SSH 123",
        3432: "SSH 124",
        3433: "SSH 134",
        3434: "SSH 234",
        3435: "12 Kwok",
        3436: "23 Kwok",
        3437: "34 Kwok",
        3438: "41 Kwok",
        3500: "Hòa",
        3501: "NHỎ",
        3502: "LỚN",
        3503: "LẺ",
        3504: "CHẴN",
        3505: "0",
        3506: "1",
        3507: "3",
        3508: "4",
        4001: "1 - 18",
        4002: "Chẵn",
        4003: "Đỏ",
        4004: "Đen",
        4005: "Lẻ",
        4006: "19 - 36",
        4007: "Tá Thứ Nhất",
        4008: "Tá Thứ Hai",
        4009: "Tá Thứ Ba",
        4010: "Cột Thứ Nhất",
        4011: "Cột Thứ Hai",
        4012: "Cột Thứ Ba",
        4013: "Số 0",
        4014: "Số 1",
        4015: "Số 2",
        4016: "Số 3",
        4017: "Số 4",
        4018: "Số 5",
        4019: "Số 6",
        4020: "Số 7",
        4021: "Số 8",
        4022: "Số 9",
        4023: "Số 10",
        4024: "Số 11",
        4025: "Số 12",
        4026: "Số 13",
        4027: "Số 14",
        4028: "Số 15",
        4029: "Số 16",
        4030: "Số 17",
        4031: "Số 18",
        4032: "Số 19",
        4033: "Số 20",
        4034: "Số 21",
        4035: "Số 22",
        4036: "Số 23",
        4037: "Số 24",
        4038: "Số 25",
        4039: "Số 26",
        4040: "Số 27",
        4041: "Số 28",
        4042: "Số 29",
        4043: "Số 30",
        4044: "Số 31",
        4045: "Số 32",
        4046: "Số 33",
        4047: "Số 34",
        4048: "Số 35",
        4049: "Số 36",
        4050: "Ba Số 0/1/2",
        4051: "Ba Số 0/2/3",
        4052: "Bốn Số 0/1/2/3",
        4053: "Tách 0/1",
        4054: "Tách 0/2",
        4055: "Tách 0/3",
        4056: "Tách 1/2",
        4057: "Tách 2/3",
        4058: "Tách 4/5",
        4059: "Tách 5/6",
        4060: "Tách 7/8",
        4061: "Tách 8/9",
        4062: "Tách 10/11",
        4063: "Tách 11/12",
        4064: "Tách 13/14",
        4065: "Tách 14/15",
        4066: "Tách 16/17",
        4067: "Tách 17/18",
        4068: "Tách 19/20",
        4069: "Tách 20/21",
        4070: "Tách 22/23",
        4071: "Tách 23/24",
        4072: "Tách 25/26",
        4073: "Tách 26/27",
        4074: "Tách 28/29",
        4075: "Tách 29/30",
        4076: "Tách 31/32",
        4077: "Tách 32/33",
        4078: "Tách 34/35",
        4079: "Tách 35/36",
        4080: "Tách 1/4",
        4081: "Tách 4/7",
        4082: "Tách 7/10",
        4083: "Tách 10/13",
        4084: "Tách 13/16",
        4085: "Tách 16/19",
        4086: "Tách 19/22",
        4087: "Tách 22/25",
        4088: "Tách 25/28",
        4089: "Tách 28/31",
        4090: "Tách 31/34",
        4091: "Tách 2/5",
        4092: "Tách 5/8",
        4093: "Tách 8/11",
        4094: "Tách 11/14",
        4095: "Tách 14/17",
        4096: "Tách 17/20",
        4097: "Tách 20/23",
        4098: "Tách 23/26",
        4099: "Tách 26/29",
        4100: "Tách 29/32",
        4101: "Tách 32/35",
        4102: "Tách 3/6",
        4103: "Tách 6/9",
        4104: "Tách 9/12",
        4105: "Tách 12/15",
        4106: "Tách 15/18",
        4107: "Tách 18/21",
        4108: "Tách 21/24",
        4109: "Tách 24/27",
        4110: "Tách 27/30",
        4111: "Tách 30/33",
        4112: "Tách 33/36",
        4113: "Góc 1/5",
        4114: "Góc 2/6",
        4115: "Góc 4/8",
        4116: "Góc 5/9",
        4117: "Góc 7/11",
        4118: "Góc 8/12",
        4119: "Góc 10/14",
        4120: "Góc 11/15",
        4121: "Góc 13/17",
        4122: "Góc 14/18",
        4123: "Góc 16/20",
        4124: "Góc 17/21",
        4125: "Góc 18/23",
        4126: "Góc 20/24",
        4127: "Góc 22/26",
        4128: "Góc 23/27",
        4129: "Góc 25/29",
        4130: "Góc 26/30",
        4131: "Góc 28/32",
        4132: "Góc 29/33",
        4133: "Góc 31/35",
        4134: "Góc 32/36",
        4135: "Đường 1-3",
        4136: "Đường 4-6",
        4137: "Đường 7-9",
        4138: "Đường 10-12",
        4139: "Đường 13-15",
        4140: "Đường 16-18",
        4141: "Đường 19-21",
        4142: "Đường 22-24",
        4143: "Đường 25-27",
        4144: "Đường 28-30",
        4145: "Đường 31-33",
        4146: "Đường 34-36",
        4147: "Dòng 1-6",
        4148: "Dòng 4-9",
        4149: "Dòng 7-12",
        4150: "Dòng 10-15",
        4151: "Dòng 13-18",
        4152: "Dòng 16-21",
        4153: "Dòng 19-24",
        4154: "Dòng 22-27",
        4155: "Dòng 28-33",
        4156: "Dòng 31-36",
        4157: "Dòng 25-30",
        5001: "P1",
        5002: "P2",
        5003: "P3",
        5004: "P4",
        5005: "P5",
        5011: "Đôi P1",
        5012: "Đôi P2",
        5013: "Đôi P3",
        5014: "Đôi P4",
        5015: "Đôi P5",
        5101: "P1",
        5102: "P2",
        5103: "P3",
        5104: "P4",
        5105: "P5",
        5106: "Nhà Cái 1",
        5107: "Nhà Cái 2",
        5108: "Nhà Cái 3",
        5109: "Nhà Cái 4",
        5110: "Nhà Cái 5",
        5111: "Đôi Nhà Cái",
        6201: "Andar",
        6202: "Bahar",
        6203: "1-5 Lá Bài",
        6204: "6-10 Lá Bài",
        6205: "11-15 Lá Bài",
        6206: "16-25 Lá Bài",
        6207: "26-30 Lá Bài",
        6208: "31-35 Lá Bài",
        6209: "36-40 Lá Bài",
        6210: "41+ Lá Bài",
        6211: "Andar Thứ Nhất",
        6212: "Bahar Thứ Nhất",
        6301: "Người Chơi A",
        6302: "Người Chơi B",
        6303: "Hòa",
        6304: "Đôi Người Chơi A+",
        6305: "Đôi Người Chơi B+",
        6306: "Thưởng 6 Lá Bài",
        7201: "Người Chơi 1 Ante",
        7202: "Người Chơi 1 Blind",
        7203: "Người Chơi 1 Trips",
        7204: "Người Chơi 1 Raise 4x",
        7205: "Người Chơi 1 Raise 3x",
        7206: "Người Chơi 1 Raise 2x",
        7207: "Người Chơi 1 Raise 1x",
        7211: "Người Chơi 2 Ante",
        7212: "Người Chơi 2 Blind",
        7213: "Người Chơi 2 Trips",
        7214: "Người Chơi 2 Raise 4x",
        7215: "Người Chơi 2 Raise 3x",
        7216: "Người Chơi 2 Raise 2x",
        7217: "Người Chơi 2 Raise 1x",
        7221: "Người Chơi 3 Ante",
        7222: "Người Chơi 3 Blind",
        7223: "Người Chơi 3 Trips",
        7224: "Người Chơi 3 Raise 4x",
        7225: "Người Chơi 3 Raise 3x",
        7226: "Người Chơi 3 Raise 2x",
        7227: "Người Chơi 3 Raise 1x",
        7301: "Người Chơi 1 Ante",
        7302: "Người Chơi 1 Hòa Thứ Nhất",
        7303: "Người Chơi 1 Chiến Tranh",
        7304: "Người Chơi 1 Hòa Thứ Hai",
        7311: "Người Chơi 2 Ante",
        7312: "Người Chơi 2 Hòa Thứ Nhất",
        7313: "Người Chơi 2 Chiến Tranh",
        7314: "Người Chơi 2 Hòa Thứ Hai",
        7321: "Người Chơi 3 Ante",
        7322: "Người Chơi 3 Hòa Thứ Nhất",
        7323: "Người Chơi 3 Chiến Tranh",
        7324: "Người Chơi 3 Hòa Thứ Hai",
        7401: "Ante",
        7402: "Ante Gấp Đôi",
        7403: "Chia Đôi",
        7404: "Bất Kỳ Đôi Nào",
        7405: "Ba May Mắn",
        7406: "Ba Nóng",
        7407: "Đổ Bể",
        7408: "Bảo Hiểm",
        7409: "Cặp Đôi May Mắn",
        8001: "Nhà Cái 1 (Bằng)",
        8002: "Nhà Cái 2 (Bằng)",
        8003: "Nhà Cái 3 (Bằng)",
        8011: "Nhà Cái 1 (Gấp Đôi)",
        8012: "Nhà Cái 2 (Gấp Đôi)",
        8013: "Nhà Cái 3 (Gấp Đôi)",
        8021: "Nhà Cái 1 (Siêu Bò)",
        8022: "Nhà Cái 2 (Siêu Bò)",
        8023: "Nhà Cái 3 (Siêu Bò)",
        8101: "Người Chơi 1 (Bằng)",
        8102: "Người Chơi 2 (Bằng)",
        8103: "Người Chơi 3 (Bằng)",
        8111: "Người Chơi 1 (Gấp Đôi)",
        8112: "Người Chơi 2 (Gấp Đôi)",
        8113: "Người Chơi 3 (Gấp Đôi)",
        8121: "Người Chơi 1 (Siêu Bò)",
        8122: "Người Chơi 2 (Siêu Bò)",
        8123: "Người Chơi 3 (Siêu Bò)",
        9001: "Rồng",
        9002: "Phượng Hoàng",
        9003: "Pair 8+",
        9004: "Straight",
        9005: "Flush",
        9006: "Straight Flush",
        9007: "Three of a Kind",
        9101: "Dragon",
        9102: "Phoenix",
        9103: "Tie",
        9114: "Dragon Three Pictures",
        9124: "Phoenix Three Pictures",
        additional_result: {
            235: "235",
            "1st_dozen": "1<sup>st</sup> Dozen",
            "2nd_dozen": "2<sup>nd</sup> Dozen",
            "3rd_dozen": "3<sup>rd</sup> Dozen",
            big_dice: "Tài",
            bull_1: "Bull 1",
            bull_2: "Bull 2",
            bull_3: "Bull 3",
            bull_4: "Bull 4",
            bull_5: "Bull 5",
            bull_6: "Bull 6",
            bull_7: "Bull 7",
            bull_8: "Bull 8",
            bull_9: "Bull 9",
            bull_bull: "Bull Bull",
            double_pictures: "Double Pictures",
            even: "Chẵn",
            five_dukes: "5 Dukes",
            flush: "Flush",
            four_of_a_kind: "Four of a Kind",
            full_house: "Full House",
            high_card: "High Card",
            no_bull: "No Bull",
            not_qualified: "Not Qualified",
            odd: "Lẻ",
            pair: "Pair",
            royal_flush: "Thùng Phá Sảnh",
            single_picture: "Single Picture",
            small_dice: "Xỉu",
            straight: "Straight",
            straight_flush: "Straight Flush",
            three_of_a_kind: "Three of a Kind",
            triple_dice: "Bộ Ba",
            triple_pictures: "Three Pictures",
            two_pairs: "Two Pairs"
        }
    }, error_code = {
        1: "Lỗi máy chủ [1]",
        101: "Cược quá giới hạn cho phép",
        102: "Cược quá thời gian cho phép [102]",
        103: "Bet(s) Failed (Exceeded Pools Bet Limit) [103]",
        104: "Bet(s) Failed(Below Selection Bet Limit)",
        404: "Unable to connect to the server. Please check the network settings",
        5e3: "Không nhận dạng được lỗi [5000]",
        5001: "Yêu cầu quá thường xuyên [5001]",
        6e3: "The network is disconnected, please login again",
        6001: "Network Error [6001]",
        6002: "Không xác minh được thông tin. [6002]",
        6003: "Tên đăng nhập/ Mật khẩu không chính xác! [6003]",
        6004: "Prohibit login. [6004]",
        6005: "Bạn không có tỉ lệ cược! [6005]",
        6006: "Không tìm thấy dữ liệu tin nhắn nhóm! [6006]",
        6007: "Không tìm thấy dữ liệu đại lý của bạn, vui lòng liên hệ Hỗ Trợ Khách Hàng! [6007]",
        6008: "Tài khoản của bạn đã được đăng nhập tại một máy khác. [6008]",
        6010: "Reset mật khẩu có lỗi. [6010]",
        6011: "Mật khẩu nhập không đúng. [6011]",
        6012: "Mật khẩu không được để trống [6012]",
        6013: "Mật khẩu giới hạn trong vòng 10 ký tự [6013]",
        6015: "Thất bại! Người chơi không thể nhắc lại cược. [6015]",
        6016: "Bạn đã theo dõi 20 người chơi, bạn không thể theo dõi thêm. [6016]",
        6018: "Bàn chơi đã đóng! [6018]",
        6019: "Bàn chơi hiện đang được bảo trì![6019]",
        6020: "Đây là bàn chơi riêng. [6020]",
        6021: "Chỗ ngồi đã có người, vui lòng chọn chỗ ngồi khác! [6021]",
        6022: "Thất bại! Vui lòng thử lại sau. [6022]",
        6023: "Không tìm thấy bàn chơi có giới hạn cược, vui lòng thử lại sau. [6023]",
        6024: "Không tìm thấy bàn chơi, vui lòng thử lại sau. [6024]",
        6025: "Không tìm thấy chỗ ngồi phù hợp! [6025]",
        6026: "Không thể vào bàn chơi, vui lòng thử lại sau. [6026]",
        6027: "Bàn chơi đã đủ người, vui lòng thử bàn chơi khác! [6027]",
        6028: "Bạn đã được cược vào ván cược này, không thể đổi chỗ ngồi, vui lòng nhấp vào 'Enter' ở sảnh chính để vào bàn chơi! [6028]",
        6029: "Game table {0} has been reserved.Please choose join or sidebet [6029]",
        6030: "Chủ bàn đã rời khỏi bàn! [6030]",
        6031: "Bạn là chủ bàn chơi, và bạn không thể đổi chỗ ngồi. [6031]",
        6032: "Bạn đã đặt cược ngoài trong ván cược này. Hiện tại bạn không thể ngồi vào bàn. [6032]",
        6033: "Bạn đã đặt cược vào ván cược này. Hiện tại bạn không thể tham gia vào bàn này với cược ngoài. [6033]",
        6034: "Bàn chơi này chưa được đặt chỗ, bạn không thể tham gia. [6034]",
        6035: "Xin lỗi, số dư tài khoản VIP của bạn không đủ {0}. Bạn có thể tham gia bằng cách cược ngoài. [6035]",
        6037: "Đặt cược thất bại! [6037]",
        6038: "Thất bại! Thay đổi tín dụng không hợp lệ. [6038]",
        6039: "Thất bại! Hệ thống đang bận! [6039]",
        6040: "Thất bại! Vui lòng đăng nhập lại sau. [6040]",
        6041: "Thất bại! Không tìm thấy vòng chơi. [6041]",
        6042: "Thất bại! Số dư tài khoản không đủ. [6042]",
        6043: "Bet Failed! It's over maximum lose. [6043]",
        6044: "Thất bại! Vòng cược đã đóng. [6044]",
        6045: "Thất bại! Thông tin bị lỗi. [6045]",
        6046: "Thất bại! Dữ liệu có mâu thuẫn! [6046]",
        6047: "Cược không hợp lệ! [6047]",
        6048: "Sau vòng cược 30, bạn không thể cược Tài hoặc Xỉu! [6048]",
        6049: "Cược không hợp lệ! [6049]",
        6050: "Bet Failed! It's over maximum limit [6050]",
        6052: "Bạn đã đặt cược, không thể bỏ qua! [6052]",
        6053: "Các lá bài đã được mở, không thể bỏ qua! [6053]",
        6054: "Vòng chơi chưa bắt đầu, không thể bỏ qua! [6054]",
        6055: "Đã bỏ qua 05 lần! [6055]",
        6057: "Không có người chia bài! [6057]",
        6058: "Hoạt động bất hợp lệ. [6058]",
        6059: "Không tìm thấy bàn chơi. [6059]",
        6060: "Ngôn ngữ không hỗ trợ! [6060]",
        6061: "Hoạt động bất hợp lệ [6061]",
        6062: "Lỗi thông số! [6062]",
        6063: "Không tìm thấy sảnh chơi, vui lòng thử lại. [6063]",
        6064: "Hệ thống đang được bảo trì! [6064]",
        6065: "Không tìm thấy bàn chơi hoặc chỗ ngồi phù hợp với giới hạn cho phép [6065]",
        6066: "Bàn chơi không tồn tại [6066]",
        6067: "Không tìm thấy bàn chơi, vui lòng đăng nhập lại [6067]",
        6068: "Password error! [6068]",
        6069: "Bạn không thể mở bài khi không đặt cược [6069]",
        6070: "Thất bại! Bạn đã đặt cược ngoài tại vòng cược này, vui lòng thử lại sau khi ván cược kết thúc. [6070]",
        6071: "Bạn không lưu bàn chơi này [6071]",
        6072: "Không còn chỗ ngồi trống, vui lòng chọn Cược Ngoài [6072]",
        6073: "Chủ bàn chơi đã thiết lập mật khẩu [6073]",
        6074: "You have no bet more than 4 minutes and auto-exited game table({0}). [6074]",
        6075: "The session ID has expired，please return to try again. [6075]",
        6076: "Your session has expired. Please log in again [6076]",
        6077: "Session has already been used ,please return to try again. [6077]",
        6078: "You are logged out of the game. [6078]",
        6079: "The Platform is under maintenace!< [6079]",
        6080: "Enter table failed,please try again. [6080]",
        6081: "Dedicate table fail,please try again. [6081]",
        6082: "Your account is prohibited for use in your region [6082]",
        6083: "Bet(s) Failed.You have placed bets on Commission in this round. [6083]",
        6084: "Bet(s) Failed.You have placed bets on No-Commission in this round. [6084]",
        6085: "Invalid handicap, can not [Reserve/Join]. Please try [Side Bet]. [6085]",
        6086: "Password have been reset. Please login again! [6086]",
        6087: "New and current password cannot be same [6087]",
        6088: "You are not allowed to enter this game table according to current VIP handicap. If adjustment on VIP handicap is needed, please contact customer service or your superior agent [6088]",
        6090: "Request timeout [6090]",
        6091: "Login failed [6091]",
        6092: "You are logged out of the game [6092]",
        6093: "Verification code is incorrect. Please try again [6093]",
        6094: "Your free trial has expired (15 minutes), you are logged out of the game [6094]",
        6095: "Verification can be sent once per round only [6095]",
        6096: "Invalid operation [6096]",
        6097: "Incorrect state when performing verification [6097]",
        6098: "Not allowed to bet on pair related field after <number> rounds ",
        6099: "No Red Packet to collect [6099]",
        6100: "Red Packet has been collected already [6100]",
        6101: "Activity has not started yet [6101]",
        6102: "Activity status is illegal [6102]",
        6103: "Not ready to claim rpa [6103]",
        6111: "Player has folded for this round [6111]",
        6112: "Player has checked for this round [6112]",
        6113: "Illegal sub round betting state [6113]",
        6114: "Not in betting state [6114]",
        6115: "Bet on trips is not allowed without ante/blind [6115]",
        6116: "Ante and Blind must be betted together [6116]",
        6117: "Ante and Blind amount must be equal [6117]",
        6118: "Player can only bet on Ante/Blind/Trips in the first round [6118]",
        6119: "Player can only bet on 4x/3x in the second round [6119]",
        6120: "Player can only bet on 2x in the third round [6120]",
        6121: "Player can only bet on 1x in the last round [6121]",
        6122: "Invalid Bet Amount [6122]",
        6123: "Raise is not allowed without ante [6123]",
        6124: "Duplicated raise [6124]",
        6126: "No bet on 6 consecutive game rounds is detected, auto-exited game table. [6126]",
        6200: "Response timeout. Please contact our customer service team. [6200]",
        6201: "Response timeout. Please contact our customer service team. [6201]",
        6202: "Response timeout. Please contact our customer service team. [6202]",
        6203: "Response timeout. Please contact our customer service team. [6203]",
        6204: "Response timeout. Please contact our customer service team. [6204]",
        100001: "Your agent have not enable your mobile login",
        200001: "Đã xảy ra lỗi. Vui lòng liên hệ với CSD để biết chi tiết, cảm ơn bạn. [1000]",
        200002: "Hệ thống đã hết thời gian chờ, vui lòng đóng cửa sổ trò chơi hiện tại rồi thử lại. [1001]",
        200003: "Hệ thống đã hết thời gian chờ, vui lòng đóng cửa sổ trò chơi hiện tại rồi thử lại. [1002]",
        200004: "Đã xảy ra lỗi. Vui lòng liên hệ với CSD để biết chi tiết, cảm ơn bạn. [1003]",
        200005: "Đã xảy ra lỗi. Vui lòng liên hệ với CSD để biết chi tiết, cảm ơn bạn. [1004]",
        200006: "Đã xảy ra lỗi. Vui lòng liên hệ với CSD để biết chi tiết, cảm ơn bạn. [1005]",
        200007: "Đã xảy ra lỗi. Vui lòng liên hệ với CSD để biết chi tiết, cảm ơn bạn. [1006]",
        200008: "Đã xảy ra lỗi. Vui lòng liên hệ với CSD để biết chi tiết, cảm ơn bạn. [1007]",
        200009: "Đã xảy ra lỗi. Vui lòng liên hệ với CSD để biết chi tiết, cảm ơn bạn. [1008]",
        200011: "Tài khoản đã bị đóng. Vui lòng liên hệ với cấp trên để biết chi tiết, cảm ơn bạn. [2002]",
        200012: "Đã xảy ra lỗi. Vui lòng liên hệ với CSD để biết chi tiết, cảm ơn bạn. [2003]",
        200013: "Đã xảy ra lỗi. Vui lòng liên hệ với CSD để biết chi tiết, cảm ơn bạn. [3001]",
        200014: "Tài khoản của bạn thiếu tiền. [3002]",
        200015: "Khoản tiền cược của bạn đã vượt quá cài đặt giới hạn cược, vui lòng thử lại. [3003]",
        200016: "Trò chơi bị vô hiệu hóa. Vui lòng liên hệ với cấp trên để biết chi tiết, cảm ơn bạn. [3004]",
        200017: "Đã xảy ra lỗi. Vui lòng liên hệ với CSD để biết chi tiết, cảm ơn bạn. [3005]",
        200018: "Đã đạt giới hạn thắng cược! Vui lòng liên hệ với cấp trên, cảm ơn bạn. [3006]",
        200019: "Đã đạt giới hạn thua cược! Vui lòng liên hệ với cấp trên, cảm ơn bạn. [3007]",
        200020: "Bạn chưa có cài đặt giới hạn cược cho trò chơi này, vui lòng liên hệ với cấp trên để cài đặt. [3008]",
        200021: "Giới hạn cược của bạn đã được thay đổi, vui lòng đăng nhập lại để áp dụng cài đặt mới. [3009]",
        200022: "Tài khoản đã bị treo. Vui lòng liên hệ với cấp trên để biết chi tiết, cảm ơn bạn. [3010]",
        200023: "Tài khoản đã bị treo. Vui lòng liên hệ với cấp trên để biết chi tiết, cảm ơn bạn. [3013]",
        200024: "Trò chơi không khả dụng vào thời điểm này. Vui lòng liên hệ với CSD để biết chi tiết, cảm ơn bạn. [3014]"
    }, error_msg = {
        ban: "Your account has been logged in elsewhere. ",
        kick: "Session expired. Please reconnect to the platform!",
        processing_game_bet: "Your bet is being processed, please wait.",
        quitGame: "Press OK to quit game",
        relogin: "Press OK to return to the login page.",
        unknown: "The network is disconnected, press OK to quit game",
        connection: {
            connection_problem: "Press OK to connect back to the game.",
            server_connection_problem: "Press OK to connect back to the game."
        },
        idle: {
            disconnected_reconnect: "Press OK to connect back to the game.",
            disconnected_to_server: "Press OK to connect back to the game."
        }
    }, fast_bet = {title: "Đặt Cược Nhanh"}, game_hall = {
        banner_more_detail: "Xem thêm",
        feature_games: "Trò chơi đặc sắc",
        good_roads: "Đường tốt",
        hot_games: "Trò chơi nổi bật",
        multi_play: "Chơi nhiều người",
        view_all: "Xem tất cả",
        vip_betlimit: "Giới hạn cược",
        vip_enter: "Vào",
        vip_min_enter: "Số dư tối thiểu",
        vip_occupied: "Đã đặt trước",
        vip_reserve: "Đặt trước",
        subtypes: {
            all: "Tất cả",
            classic: "Cổ điển",
            insurance: "Bảo hiểm",
            quick: "Nhanh",
            see: "Xem bài",
            sexy: "Gợi Cảm",
            vip: "VIP"
        }
    }, game_rules = {
        attention: "Chú Ý",
        game_rules: "Luật Chơi",
        introduction: "Giới Thiệu",
        payoff: "Tiền Thắng",
        title: "Trợ Giúp"
    }, game_table = {
        balanace: "Số dư tài khoản",
        deposit: "Deposit",
        deposit_short: "D",
        total_bet: "Tổng số đặt cược",
        trial: "TRIAL",
        baccarat: {no_comm: "Không hoa hồng"},
        blackjack: {
            all_side_bets: "ALL SIDE BETS",
            ante_first: "PLEASE BET ANTE FIRST",
            banker: "Nhà Cái",
            double: "đôi",
            hit: "HIT",
            insufficient_insurance: "Not enough balance for insurance",
            insurance: "Insurance?",
            other_decison: "Other players are making decision",
            player: "Người Chơi",
            split: "SPLIT",
            stand: "STAND",
            instruction: {
                213: {
                    content: "Win if the combination of the player's initial cards and the dealer's up card form a specific card type.",
                    title: "LUCKY 3"
                },
                label: "INSTRUCTION",
                ante: {
                    content: "Win if the player's hand value is closer to 21 than the dealer's hand and does not exceed 21.",
                    title: "ANTE"
                },
                bust: {content: "Win if the dealer busts.", title: "BUST IT"},
                hot3: {
                    content: "Win if the card value of the player's initial cards and the dealer's up card total 19 - 21.",
                    title: "HOT 3"
                },
                lucky_ladies: {
                    content: "Win if the player's initial cards formed a specific card type.",
                    title: "LUCKY LADIES"
                },
                pair: {content: "Win if the player's initial cards are pair.", title: "ANY PAIR"}
            }
        },
        bullbull: {
            banker: "Nhà cái",
            banker_allwin: "BANKER ALL WIN",
            first_card: "FIRST CARD",
            player_allwin: "PLAYER ALL WIN"
        },
        casino_war: {
            "1st_tie": "1st TIE",
            "2nd_tie": "2nd TIE",
            banker: "Nhà cái",
            decision: "MAKE YOUR DECISION",
            player_1: "Nhà con 1",
            player_2: "Nhà con 2",
            player_3: "Nhà con 3",
            surrender: "SURRENDER"
        },
        fpc: {any_two_dice: "ANY TWO DICE", both_one_dice: "BOTH ONE DICE"},
        roulette: {orphelins: "orphelins", tier: "tier", voisins: "voisins", zero: "0"},
        seecard: {other_squeezing: "Other players are squeezing cards"},
        teen_patti: {pair_plus: "PAIR+"},
        uth: {
            banker: "Nhà cái",
            community: "COMMUNITY",
            decision: "MAKE YOUR DECISION",
            play: "Video",
            player_1: "Nhà con 1",
            player_1_short: "P1",
            player_2: "Nhà con 2",
            player_2_short: "P2",
            player_3: "Nhà con 3",
            player_3_short: "P3",
            raise1x: "RAISE 1x",
            raise2x: "RAISE 2x",
            raise3x: "RAISE 3x",
            raise4x: "RAISE 4x"
        },
        vip: {
            owner_squeezing: "Owner is squeezing cards",
            owner_tooltip: "OWNER",
            reserve_action_tooltip: "Đặt trước",
            reserve_betlimit: "Giới hạn đặt cược",
            reserve_min_enter: "Min Balance",
            reserve_request: "Table reserved. You will be the owner next round.",
            reserved_tooltip: "Đặt trước",
            shuffle_request: "Yêu cầu trộn bài của bạn đã được gửi và sẽ được bắt đầu trong vòng 5 phút",
            shuffle_tooltip: "Trộn bài",
            skip_tooltip: "SKIP",
            start_tooltip: "Start"
        }
    }, game_types = {
        101: "Baccarat",
        102: "VIP Baccarat (Cổ điển)",
        103: "Baccarat Nhanh",
        104: "Baccarat Xem Bài",
        110: "Bảo Hiểm Baccarat",
        111: "VIP Baccarat",
        201: "SicBo",
        202: "Cá Cua Tôm Cá",
        203: "Xóc Dĩa",
        301: "Rồng Hổ",
        401: "Roulette",
        501: "Pok Deng Cổ Điển",
        602: "Andar Bahar",
        603: "Teen Patti 20-20",
        702: "Ultimate Texas Hold’em",
        703: "Casino War",
        704: "Blackjack Vô Hạn",
        801: "Bull Bull",
        901: "Thắng 3 Lá",
        "201_Alt": "HiLo",
        "201_Alt_2": "SicTan",
        "501_Alt": "PokDeng Hai Mặt",
        "901_Alt": "Ba Lá",
        "901_Alt_2": "Teen Patti 20-20",
        arcadeGame: "Trò chơi Casino",
        card_game: "Trò chơi bài",
        cardGame: "Trò chơi bài",
        classic: "Cổ điển",
        fishingGame: "Câu Cá AB",
        game_hall: "Sảnh",
        multi_hall: "Chơi nhiều người",
        sexy: "Gợi Cảm",
        slotGame: "Máy đánh bạc",
        UTH_Short: "Ult. Texas"
    }, gamehall_table = {
        maintaining: "BẢO TRÌ",
        notable: "Không có bàn nào",
        good_road: {
            100: "Nhà cái dài",
            101: "Người chơi dài",
            102: "Đường đơn",
            103: "Một P Hai B",
            104: "Một B Hai P",
            105: "Ăn cách",
            106: "B vượt P",
            107: "P vượt B",
            108: "B tách",
            109: "P tách"
        }
    }, header = {
        bet_record: "Lịch sử cược",
        card_game: "AB FISHING",
        exitfullscreen: "Thoát toàn màn hình",
        fullscreen: "Toàn màn hình",
        hot_games: "LOBBY",
        live_games: "LIVE GAMES",
        logout: "Đăng xuất",
        multi_table: "MULTIPLAY",
        profile: "Hồ sơ",
        services: "Dịch vụ",
        Version: "Phiên bản"
    }, login = {free_trial: "DÙNG THỬ MIỄN PHÍ", login: "ĐĂNG NHẬP", password: "Mật khẩu", username: "Tên đăng nhập"},
    menu = {
        addToHomeScreenForIOS: "THÊM VÀO MÀN HÌNH CHÍNH",
        back: "TRỞ LẠI SẢNH",
        downloadApp: "Tải xuống APP",
        exitfullscreen: "THOÁT TOÀN MÀN HÌNH",
        fast_bet: "CƯỢC NHANH",
        fullscreen: "TOÀN MÀN HÌNH",
        guide: "TRỢ GIÚP",
        history: "LỊCH SỬ CƯỢC",
        installation_instruction: "Hướng dẫn",
        installPwa: "CÀI ĐẶT",
        lobby: "Sảnh",
        loginApp: "Đăng nhập APP",
        payout: "TRẢ THƯỞNG",
        settings: "CÀI ĐẶT",
        title: "Thực đơn",
        verification: "XÁC MINH",
        video: "TẢI LẠI"
    }, messages = {
        all_in: "Cược toàn bộ số dư",
        bet_success: "Đặt cược thành công",
        cancel: "Hủy bỏ",
        game_table_verified: "Verification has been sent, please check the verificaiton result on the screen",
        idle_video: "VIDEO PAUSED DUE TO INACTIVITY. PRESS OK TO RESUME",
        insufficient_bet_balance: "Không đủ tín dụng",
        insufficient_vip_balance: "Số lượng không đủ",
        landscape_block: "Rotate your mobile device for best experience",
        loading: "LOADING",
        logout: "Are you sure you want to logout ",
        logoutOK: "Đăng xuất",
        lost: "YOU LOST",
        multi_side_hall_filter: "Filter cannot be empty, please select at least one game type.",
        nickname_success: "Nickname updated!",
        ok_button: "Xác nhận",
        screen_size_block: "Please resize the window for the best experience",
        table_not_found: "Game table is not found",
        table_under_maintenance: "Bàn chơi hiện đang được bảo trì",
        won: "YOU WON"
    }, payout = {
        bet: "CƯỢC", bet_limit: "GIỚI HẠN CƯỢC", odds: "TỶ LỆ CƯỢC", payout: "TRẢ THƯỞNG", bet_type: {
            1001: "NHÀ CÁI",
            1002: "NGƯỜI CHƠI",
            1003: "HÒA",
            1006: "NHÀ CÁI ĐÔI",
            1007: "NGƯỜI CHƠI ĐÔI",
            1011: "Nhà cái (Không hoa hồng)",
            1100: "May mắn 6",
            1211: "Nhà cái tự nhiên",
            1212: "Người chơi tự nhiên",
            1223: "BẤT KỲ ĐÔI",
            1224: "ĐÔI HOÀN HẢO",
            1231: "NHÀ CÁI THƯỞNG",
            1232: "NGƯỜI CHƠI THƯỞNG",
            1401: "Hổ",
            1402: "Hổ nhỏ",
            1403: "Hổ lớn",
            1404: "Cặp Hổ",
            1405: "Hổ hòa",
            1501: "Nhà cái tuyệt vời 4",
            1502: "Người chơi tuyệt vời 4",
            1503: "Cặp quý giá nhà cái",
            1504: "Cặp quý giá người chơi",
            1601: "Nhà cái đen",
            1602: "Nhà cái đỏ",
            1603: "Người chơi đen",
            1604: "Người chơi đỏ",
            1605: "Bất kỳ 6",
            2001: "RỒNG",
            2002: "HỔ",
            2003: "HÒA",
            3001: "LỚN / NHỎ",
            3002: "CHẴN / LẺ",
            3005: "BỘ BA CỤ THỂ",
            3011: "BẤT KỲ BỘ BA",
            3012: "BỘ ĐÔI CỤ THỂ",
            3018: "4 HOẶC 17 ĐIỂM",
            3019: "5 HOẶC 16 ĐIỂM",
            3020: "6 HOẶC 15 ĐIỂM",
            3021: "7 HOẶC 14 ĐIỂM",
            3022: "8 HOẶC 13 ĐIỂM",
            3023: "9, 10, 11 HOẶC 12 ĐIỂM",
            3033: "KẾT HỢP HAI XÚC XẮC",
            3048: "MỘT XÚC XẮC ",
            3049: "HAI XÚC XẮC",
            3050: "BA XÚC XẮC",
            3200: "HI",
            3201: "LO",
            3202: "11 HI-LO",
            3203: "XÚC XẮC 1 - 6",
            3209: "KẾT HỢP HAI XÚC XẮC",
            3224: "1 LO",
            3225: "2 LO",
            3226: "3 LO",
            3227: "4 LO",
            3228: "5 - 6 LO",
            3230: "3 - 4 HI",
            3232: "5 HI",
            3233: "6 HI",
            3234: "KẾT HỢP BA XÚC XẮC",
            3301: "BIỂU TƯỢNG CHÍNH",
            3307: "MÀU ĐƠN CỤ THỂ",
            3310: "MÀU ĐÔI CỤ THỂ",
            3313: "MÀU BA CỤ THỂ",
            3316: "BẤT KỲ MÀU BA",
            3317: "KẾT HỢP HAI XÚC XẮC",
            3401: "ODD / EVEN",
            3403: "FAN",
            3407: "NIM",
            3419: "NGA",
            3431: "SSH",
            3435: "12 KWOK / 23 KWOK / 34 KWOK",
            3438: "41 KWOK",
            3500: "Hòa",
            3501: "Xỉu",
            3502: "Tài",
            3503: "Lẻ",
            3504: "Chẵn",
            3505: "0",
            3506: "1",
            3507: "3",
            3508: "4",
            4001: "LỚN / NHỎ",
            4002: "CHẴN / LẺ",
            4003: "ĐỎ / ĐEN",
            4007: "HÀNG CHỤC",
            4010: "HÀNG CỘT",
            4013: "THẲNG",
            4050: "BA SỐ",
            4052: "BỐN SỐ",
            4053: "TÁCH",
            4113: "GÓC",
            4135: "HÀNG",
            4147: "HÀNG DỌC",
            5001: "NGƯỜI CHƠI 1-5",
            5011: "NGƯỜI CHƠI 1-5 ĐÔI",
            5101: "NGƯỜI CHƠI 1-5",
            5106: "NHÀ CÁI 1-5",
            5111: "NHÀ CÁI ĐÔI",
            6201: "ANDAR",
            6202: "BAHAR",
            6203: "1-5 LÁ BÀI",
            6204: "6-10 LÁ BÀI",
            6205: "11-15 LÁ BÀI",
            6206: "16-25 LÁ BÀI",
            6207: "26-30 LÁ BÀI",
            6208: "31-35 LÁ BÀI",
            6209: "36-40 LÁ BÀI",
            6210: "41+ LÁ BÀI",
            6211: "1ST ANDAR",
            6212: "1ST BAHAR",
            6301: "NGƯỜI CHƠI A",
            6302: "NGƯỜI CHƠI B",
            6303: "HÒA",
            6304: "NGƯỜI CHƠI A ĐÔI +",
            6305: "NGƯỜI CHƠI B ĐÔI +",
            6306: "6 THƯỞNG LÁ BÀI",
            7201: "NGƯỜI CHƠI 1 - 3 TIỀN ĐẶT CỌC",
            7202: "NGƯỜI CHƠI 1 - 3 MÙ",
            7203: "NGƯỜI CHƠI 1 - 3 TRIPS",
            7301: "NGƯỜI CHƠI 1 - 3 TIỀN ĐẶT CỌC",
            7302: "NGƯỜI CHƠI 1 - 3 HÒA ĐẦU TIÊN",
            7304: "NGƯỜI CHƠI 1 - 3 HÒA THỨ HAI",
            7401: "TIỀN ĐẶT CỌC",
            7404: "BẤT KỲ ĐÔI NÀO",
            7405: "May Mắn 3",
            7406: "NÓNG 3",
            7407: "BUST IT",
            7409: "CẶP ĐÔI MAY MẮN",
            8001: "NHÀ CÁI 1",
            8002: "NHÀ CÁI 2",
            8003: "NHÀ CÁI 3",
            8011: "NHÀ CÁI 1",
            8012: "NHÀ CÁI 2",
            8013: "NHÀ CÁI 3",
            8021: "NHÀ CÁI 1",
            8022: "NHÀ CÁI 2",
            8023: "NHÀ CÁI 3",
            8101: "NGƯỜI CHƠI 1",
            8102: "NGƯỜI CHƠI 2",
            8103: "NGƯỜI CHƠI 3",
            8111: "NGƯỜI CHƠI 1",
            8112: "NGƯỜI CHƠI 2",
            8113: "NGƯỜI CHƠI 3",
            8121: "NGƯỜI CHƠI 1",
            8122: "NGƯỜI CHƠI 2",
            8123: "NGƯỜI CHƠI 3",
            9001: "RỒNG",
            9002: "PHƯỢNG HOÀNG",
            9003: "ĐÔI 8+",
            9004: "THẲNG",
            9005: "ĐỒNG CHẤT",
            9006: "THẲNG ĐỒNG CHẤT",
            9007: "BA CÁI GIỐNG NHAU",
            9101: "RỒNG",
            9102: "PHƯỢNG HOÀNG",
            9103: "HÒA",
            9114: "RỒNG 3 HÌNH",
            9124: "PHƯỢNG HOÀNG 3 HÌNH"
        }
    }, profile = {
        save: "Lưu",
        title: "Hồ sơ",
        main_view: {change_password: "Đổi mật khẩu?", nickname: "Biệt danh", pending: "Đang chờ xử lý"},
        password_view: {
            confirm_password: "Xác nhận mật khẩu",
            current_password: "Mật khẩu hiện tại",
            hints: "* Vui lòng nhập chuỗi ký tự alphanumeric từ 6-10 ký tự",
            new_password: "Mật khẩu mới"
        }
    }, roadmap = {
        analysis: "ANALYSIS",
        history: "LỊCH SỬ",
        last_10_rounds: "LAST 10 ROUNDS",
        last_50_rounds: "LAST 50 ROUNDS",
        last_6_rounds: "LAST 6 ROUNDS",
        round_num: "Round #",
        statistics: "Thống Kê",
        andar_bahar: {andar: "ANDAR", bahar: "BAHAR"},
        baccarat: {banker: "B", player: "P", predict_banker: "Predict Banker", predict_player: "Predict Player", tie: "T"},
        bull_bull: {
            game_hall: {
                0: "NB",
                1: "B1",
                2: "B2",
                3: "B3",
                4: "B4",
                5: "B5",
                6: "B6",
                7: "B7",
                8: "B8",
                9: "B9",
                A: "BB",
                B: "5D",
                banker: "B",
                player_1: "P1",
                player_2: "P2",
                player_3: "P3"
            },
            game_table: {
                0: "No Bull",
                1: "Bull 1",
                2: "Bull 2",
                3: "Bull 3",
                4: "Bull 4",
                5: "Bull 5",
                6: "Bull 6",
                7: "Bull 7",
                8: "Bull 8",
                9: "Bull 9",
                A: "Bull Bull",
                B: "5 Dukes",
                banker: "Nhà cái",
                player_1: "Nhà con 1",
                player_2: "Nhà con 2",
                player_3: "Nhà con 3"
            }
        },
        casino_war: {banker: "B", player_1: "P1", player_2: "P2", player_3: "P3"},
        dragon_tiger: {dragon: "D", predict_dragon: "Predict Dragon", predict_tiger: "Predict Tiger", tie: "T", tiger: "T"},
        hi_lo: {hi: "HI", hi_lo: "11", lo: "LO"},
        pokdeng: {banker: "Nhà cái", player_1: "P1", player_2: "P2", player_3: "P3", player_4: "P4", player_5: "P5"},
        roulette: {hot_cold: "HOT & COLD"},
        sicbo: {big: "Tài", small: "Xỉu", triple: "Bộ Ba"},
        sictan: {even: "Chẵn", fan_1: "1 FAN", fan_2: "2 FAN", fan_3: "3 FAN", fan_4: "4 FAN", odd: "Lẻ"},
        teen_patti: {
            235: "235",
            flush: "Flush",
            four_of_a_kind: "Four of a Kind",
            full_house: "Full House",
            high_card: "High Card",
            pair: "Pair",
            pair_plus: "PAIR+",
            player_a: "A",
            player_b: "B",
            royal_flush: "Thùng Phá Sảnh",
            straight: "Straight",
            straight_flush: "Straight Flush",
            three_of_a_kind: "Three of a Kind",
            tie: "Hòa"
        },
        three_pictures: {
            double_pictures: "DP",
            dragon: "D",
            phoenix: "P",
            single_picture: "SP",
            tie: "T",
            triple_pictures: "3P"
        },
        win3cards: {
            235: "235",
            dragon: "D",
            flush: "Flush",
            high_card: "High Card",
            "p8+": "P8",
            pair: "Pair",
            phoenix: "P",
            straight: "Straight",
            straight_flush: "Straight Flush",
            three_of_a_kind: "Three of a Kind",
            tie: "T"
        },
        xocdia: {even: "CHẴN", odd: "LẺ", tie: "Hòa", big: "LỚN", small: "NHỎ", o: "O", e: "E"}
    }, settings = {
        title: "Cài Đặt",
        bullbull: {
            double: "Gấp Đôi",
            equal: "Bằng Nhau",
            play_type: "Loại Cược",
            play_type_multiplay: "Loại Cược (Bull Bull)",
            super: "SuperBull"
        },
        general: {
            confirmed_bet_amounts: "Xác Nhận Số Tiền Cược",
            languages: "Ngôn Ngữ",
            side_bets: "Cược Phụ",
            statistics: "Thống Kê Cược",
            title: "Hiển Thị"
        },
        scorecards: {classic: "Cổ Điển", immersive: "Nhập Vai", title: "Thẻ Điểm"},
        sound: {live: "Âm Thanh Trực Tiếp", system: "Âm Thanh Hệ Thống", title: "Âm Thanh"}
    }, side_hall_filter = {
        101: "Baccarat",
        103: "Nhanh",
        104: "Xem bài",
        110: "Bảo hiểm",
        111: "VIP",
        201: "SicBo",
        202: "Cá Cua Tôm Cá",
        203: "Xóc Dĩa",
        301: "Rồng Hổ",
        401: "Roulette",
        501: "Pok Deng Cổ Điển",
        602: "Andar Bahar",
        603: "Teen Patti 20-20",
        801: "Bull Bull",
        901: "Thắng 3 Lá",
        "201_Alt": "HiLo",
        "201_Alt_2": "SicTan",
        "501_Alt": "PokDeng Hai Mặt",
        "901_Alt": "Ba Lá",
        "901_Alt_2": "Teen Patti 20-20",
        asia: "Trò Chơi Châu Á",
        baccarat: "Baccarat",
        classic: "Cổ điển",
        europe: "Trò Chơi Châu Âu",
        global: "Trò Chơi Toàn Cầu",
        other: "Trò Chơi Khác",
        sexy: "Gợi Cảm"
    }, vi = {
        baccarat_gameplay,
        bet_record,
        bet_type,
        custom_chips,
        detailed_bet_type,
        error_code,
        error_msg,
        fast_bet,
        game_hall,
        game_rules,
        game_table,
        game_types,
        gamehall_table,
        header,
        login,
        menu,
        messages,
        payout,
        profile,
        roadmap,
        settings,
        side_hall_filter
    }, resources = {
        thai: {translation: thai},
        en: {translation: en},
        es: {translation: es},
        hi: {translation: hi},
        kr: {translation: kr},
        pt: {translation: pt},
        ptbr: {translation: ptbr},
        sc: {translation: sc},
        tc: {translation: tc},
        id: {translation: id},
        ja: {translation: ja},
        vi: {translation: vi}
    };
instance.use(initReactI18next).init({
    resources,
    fallbackLng: "en",
    interpolation: {escapeValue: !1},
    compatibilityJSON: "v3",
    react: {}
});
const LoadingSpinner$1 = "", LoadingSpinner = () => jsx("div", {
    id: "dialogBc",
    className: "dialogContainer",
    onClick: r => {
        r.stopPropagation()
    },
    children: jsx("div", {
        className: "loading_spinner",
        role: "loading_spinner",
        children: jsx("div", {className: "loading_spinner-icon"})
    })
});

function useDelayedState(r, R) {
    const [y, E] = React.useState(r), [C, x] = React.useState(!0);
    return React.useEffect(() => {
        if (!C) {
            const N = setTimeout(() => {
                x(!0)
            }, R);
            return () => {
                clearTimeout(N)
            }
        }
    }, [C, R]), [y, N => {
        (N === r || C) && (E(N), x(!1))
    }]
}

const LoadingSpinnerContainer = () => {
        let {spinnerShowed: r} = React.useContext(LoadingSpinnerContext);
        const [R, y] = useDelayedState(!1, 2e3);
        return React.useMemo(() => {
            y(r)
        }, [r]), jsx(Fragment, {
            children: R ? jsx(ReactPortal, {
                wrapperId: "react-portal--loading-spinner-container",
                children: jsx(LoadingSpinner, {})
            }) : ""
        })
    }, initState = {spinnerShowed: !1}, LoadingSpinnerContext = React.createContext(initState),
    LoadingSpinnerProvider = ({children: r}) => jsxs(LoadingSpinnerContext.Provider, {
        value: {...useLoadingSpinner()},
        children: [jsx(LoadingSpinnerContainer, {}), r]
    }), useLoadingSpinner = () => {
        let {gameSessionStatus: r, userCurrentScene: R} = React.useContext(GameSessionContext);
        const [y, E] = React.useState(!1);
        React.useMemo(() => [GAME_SESSION_STATE.LOGGING_IN, GAME_SESSION_STATE.LOGOUTING], []), React.useEffect(() => {
            const x = [GAME_SESSION_STATE.LOGGING_IN, USER_CURRENT_SCENE.LOADING];
            if (r == GAME_SESSION_STATE.OFFLINE) {
                C(!1);
                return
            }
            const B = x.includes(r);
            B && !y ? C(!0) : !B && y && C(!1)
        }, [r]), React.useEffect(() => {
            const B = [GAME_SESSION_STATE.LOGGING_IN, USER_CURRENT_SCENE.LOADING].includes(R);
            B && !y ? C(!0) : !B && y && C(!1)
        }, [R]);
        const C = React.useCallback(x => {
            E(B => x ?? !B)
        }, []);
        return {spinnerShowed: y, toggleSpinner: C}
    };
client.createRoot(document.getElementById("root")).render(jsx(SystemModalProvider, {children: jsx(PwaProvider, {children: jsx(HttpProvider, {children: jsx(ServerConfigProvider, {children: jsx(SettingsProvider, {children: jsx(GameSessionProvider, {children: jsx(LoadingSpinnerProvider, {children: jsx(SFSContainer, {children: jsx(MasterGameCacheProvider, {children: jsx(WrappedApp, {})})})})})})})})})}));
export {
    useDialog as $,
    Logger$1 as A,
    BetRecord as B,
    useOutOfVW as C,
    Drawer as D,
    AltGameType as E,
    Fragment as F,
    GameSessionContext as G,
    Helper as H,
    IMAGES as I,
    CONFIG_GAME_TYPE_MAP as J,
    TableStatus as K,
    LanguageSelector as L,
    MenuPopupWrapperPortrait as M,
    GameHallCollectionTablesRefContext as N,
    OutOfVwContext as O,
    PwaContext as P,
    useGameHallGridConfig as Q,
    GameTableCollection as R,
    SFSCoreContext as S,
    TABLE_TYPE as T,
    UserInfoContext as U,
    MovedContext as V,
    CardGameType as W,
    useHorizontalDrag as X,
    useGameHttpService as Y,
    useLanguageMapping as Z,
    _global_React as _,
    jsx as a,
    TWO_SIDES_POKDENG_BET_TYPE as a$,
    CardGameTableCollection as a0,
    isIOS_1 as a1,
    LANGUAGE_MAPPING_SCENRIO as a2,
    __vitePreload as a3,
    useEnterGameTable as a4,
    SetFixSizeContext as a5,
    use4kRootStyle as a6,
    GamesLayoutContainerContext as a7,
    SettingsContext as a8,
    useUserActionMessage as a9,
    useGameTableEssentials as aA,
    BetType as aB,
    BET_ACTIONS as aC,
    BET_STATUS as aD,
    gameTypeTitle as aE,
    GLC_CLASS_NAME_TYPE as aF,
    StreamsVideoPlayerComponent$1 as aG,
    LIVE_STREAMS_PLAYERS as aH,
    ScablableContainer as aI,
    GameTableEssentailContext as aJ,
    GameTableMenu as aK,
    GameTypeLogo as aL,
    Timer as aM,
    GameTableName as aN,
    GameTableBottomRightMenu as aO,
    GradientBg as aP,
    GameTableBetStateContext as aQ,
    ScalableContainerScaleContext as aR,
    POKDENG_BET_TYPE as aS,
    POKDENG_BET_TYPE_MAP as aT,
    PokdengGameResults as aU,
    PokdengResultRoad as aV,
    useRoadMap as aW,
    parsePokdengRoadData as aX,
    isMobile_1 as aY,
    StatisticsPanel as aZ,
    isDesktop_1 as a_,
    GAME_SESSION_ACTIONS_TYPE as aa,
    UserActionType as ab,
    SpecialGames as ac,
    VideoPlayingTableIdContext as ad,
    LoadingPage as ae,
    LiveGameHall as af,
    UTH_BET_TYPE as ag,
    useAvailableChips as ah,
    GameTableBetContext as ai,
    GameTableBetAmountContext as aj,
    GameTablePendingBetAmountContext as ak,
    GameTablePayoutContext as al,
    useChips as am,
    BET_STATE as an,
    useBetChip as ao,
    useBetAmountUpdateChipEffect as ap,
    usePayoutUpdateChipEffect as aq,
    useBet as ar,
    UTH_BET_TYPE_MAP as as,
    BetTable as at,
    Poker$2 as au,
    SoundContext as av,
    ToastContext as aw,
    GameTableStatusContext as ax,
    useSplashScreenControl as ay,
    useGameTableVideoContext as az,
    useEasyClosePopup as b,
    Statistic as b$,
    TWO_SIDES_POKDENG_BET_TYPE_MAP as b0,
    SICBO_BET_TYPE as b1,
    SICBO_BET_TYPE_MAP as b2,
    REGEX as b3,
    parseSicboRoadData as b4,
    DRAGGABLE_FRAME_TRANSFORM as b5,
    DragVideoFrame as b6,
    ROtoggleButton$1 as b7,
    SicboResultRoad as b8,
    SicboFocusedResult as b9,
    parseSictanRoadData as bA,
    SictanResultRoad as bB,
    SictanFocusedResult as bC,
    RouletteGameTable as bD,
    GameTableVideoProvider as bE,
    useSFS as bF,
    isHonor as bG,
    useVirtualKeyboardDetection as bH,
    USER_CURRENT_SCENE as bI,
    Global as bJ,
    GAME_SESSION_STATE as bK,
    IsHttpGetSessionIdSucc as bL,
    HttpFallBack as bM,
    DeviceInfo as bN,
    Win3CardsRoadStatistics as bO,
    Win3CardsBigRoad as bP,
    Win3CardsResultRoad as bQ,
    ThreePicturesRoadStatistics as bR,
    ThreePicturesBigRoad as bS,
    ThreePicturesResultRoad as bT,
    TeenPattiRoadStatistics as bU,
    TeenPattiBigRoad as bV,
    TeenPattiResultRoad as bW,
    ANDAR_BAHAR_WINNER as bX,
    AndarBaharBeadRoad as bY,
    WIN3CARDS_BET_TYPE as bZ,
    WIN3CARDS_BET_TYPE_MAP as b_,
    HI_LO_BET_TYPE as ba,
    HI_LO_BET_TYPE_MAP as bb,
    parseHiLoRoadData as bc,
    HiLoResultRoad as bd,
    HiLoFocusedResult as be,
    CASINO_WAR_BET_TYPE as bf,
    CASINO_WAR_BET_TYPE_MAP as bg,
    parseCasinoWarRoadData as bh,
    CasinoWarGameResults as bi,
    BLACKJACK_BET_TYPE as bj,
    useCumulativeBetChip as bk,
    BLACKJACK_BET_TYPE_MAP as bl,
    Tooltip as bm,
    useGameRoundStatus as bn,
    PLAYER_ACTION as bo,
    TOAST_COLOR as bp,
    BlackjackGameResults as bq,
    FPC_BET_TYPE as br,
    FPC_BET_TYPE_MAP as bs,
    FPC_COLOR as bt,
    FPC_DICE as bu,
    parseFPCRoadData as bv,
    FPCResultRoad as bw,
    FPCFocusedResult as bx,
    SICTAN_BET_TYPE as by,
    SICTAN_BET_TYPE_MAP as bz,
    useDeviceOrientation as c,
    Win3CardsGameResults as c0,
    parseWin3CardsRoadData as c1,
    useRoadMovedListener as c2,
    THREE_PICTURES_BET_TYPE as c3,
    THREE_PICTURES_BET_TYPE_MAP as c4,
    ThreePicturesGameResults as c5,
    parseThreePicturesRoadData as c6,
    TEEN_PATTI_BET_TYPE as c7,
    TEEN_PATTI_BET_TYPE_MAP as c8,
    TeenPattiGameResults as c9,
    SeeBaccaratGameTable as cA,
    BaccaratGameTable as cB,
    GameStatistic as cC,
    showStatisticPanelAtom as cD,
    TeenPattiSixCardResults as ca,
    parseTeenPattiRoadData as cb,
    BULL_BULL_BET_TYPE as cc,
    BULL_BULL_BET_TYPE_MAP as cd,
    BB_PLAY_TYPE as ce,
    BullBullGameResults as cf,
    parseBullBullRoadData as cg,
    BullBullPlayType as ch,
    BullBullResultRoad as ci,
    ANDAR_BAHAR_BET_TYPE as cj,
    ANDAR_BAHAR_BET_TYPE_MAP as ck,
    AndarBaharGameResults as cl,
    parseAndarBaharRoadData as cm,
    XOC_DIA_BET_TYPE as cn,
    XOC_DIA_BET_TYPE_MAP as co,
    Dots as cp,
    getPointsByBetType as cq,
    parseXicDiaRoadData as cr,
    XocDiaStatisticsLite as cs,
    XocDiaResultRoad as ct,
    XOC_DIA_RESULT_ROAD_FLEX_DIRECTION as cu,
    useAtom as cv,
    BACCARAT_BET_TYPE as cw,
    DragonTigerGameTable as cx,
    VipBaccaratGameTable as cy,
    InsuranceBaccaratGameTable as cz,
    useTranslation as d,
    useCustomerService as e,
    ServerConfigContext as f,
    POPUP as g,
    Profile as h,
    GAMES as i,
    jsxs as j,
    useColumns as k,
    useLiveGameHall as l,
    useNavigate as m,
    GameTableContext as n,
    GameHallContext as o,
    useDrawer as p,
    HALL_TYPE as q,
    isDesktop$1 as r,
    isMobile$1 as s,
    Handicap as t,
    useDisplayCurrency as u,
    DRAWER_INITIAL_HEIGHT_LEVELS as v,
    GameType as w,
    commonjsGlobal as x,
    GameCacheContext as y,
    useBannersLoader as z
};
